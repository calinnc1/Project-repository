
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006258  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006424  08006424  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006424  08006424  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006424  08006424  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006424  08006424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800642c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000364  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1a9  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000308c  00000000  00000000  0003a1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001430  00000000  00000000  0003e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022918  00000000  00000000  0003fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9c8  00000000  00000000  00062560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3685  00000000  00000000  00080f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001545ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ab8  00000000  00000000  00154600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080063d4 	.word	0x080063d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080063d4 	.word	0x080063d4

080001d4 <LED_Main>:
#include "stm32f3xx_hal.h"

static uint8_t ButtonState = 0u;

void LED_Main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	//HAL_Delay(500); //TODO: remove this when tasks are available
	Rte_Read_ButtonState(&ButtonState);
 80001d8:	4805      	ldr	r0, [pc, #20]	; (80001f0 <LED_Main+0x1c>)
 80001da:	f006 f8af 	bl	800633c <Rte_Read_ButtonState>
	if(ButtonState == 1u)
 80001de:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <LED_Main+0x1c>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d101      	bne.n	80001ea <LED_Main+0x16>
	{
		Rte_Switch_LEDState();
 80001e6:	f006 f8b9 	bl	800635c <Rte_Switch_LEDState>
	}
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000028 	.word	0x20000028

080001f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr

08000206 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000206:	b480      	push	{r7}
 8000208:	b083      	sub	sp, #12
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b0a2      	sub	sp, #136	; 0x88
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000244:	2300      	movs	r3, #0
 8000246:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800024a:	2300      	movs	r3, #0
 800024c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __IO uint32_t wait_loop_index = 0U;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d101      	bne.n	800025e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800025a:	2301      	movs	r3, #1
 800025c:	e210      	b.n	8000680 <HAL_ADC_Init+0x444>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000268:	f003 0310 	and.w	r3, r3, #16
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 808e 	bne.w	800038e <HAL_ADC_Init+0x152>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000276:	2b00      	cmp	r3, #0
 8000278:	d169      	bne.n	800034e <HAL_ADC_Init+0x112>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a92      	ldr	r2, [pc, #584]	; (80004e0 <HAL_ADC_Init+0x2a4>)
 8000298:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a91      	ldr	r2, [pc, #580]	; (80004e4 <HAL_ADC_Init+0x2a8>)
 800029e:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a91      	ldr	r2, [pc, #580]	; (80004e8 <HAL_ADC_Init+0x2ac>)
 80002a4:	659a      	str	r2, [r3, #88]	; 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a90      	ldr	r2, [pc, #576]	; (80004ec <HAL_ADC_Init+0x2b0>)
 80002aa:	65da      	str	r2, [r3, #92]	; 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a90      	ldr	r2, [pc, #576]	; (80004f0 <HAL_ADC_Init+0x2b4>)
 80002b0:	661a      	str	r2, [r3, #96]	; 0x60
    
    if (hadc->MspInitCallback == NULL)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d102      	bne.n	80002c0 <HAL_ADC_Init+0x84>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a8d      	ldr	r2, [pc, #564]	; (80004f4 <HAL_ADC_Init+0x2b8>)
 80002be:	665a      	str	r2, [r3, #100]	; 0x64
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d13b      	bne.n	800034e <HAL_ADC_Init+0x112>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f001 f8f4 	bl	80014c4 <ADC_Disable>
 80002dc:	4603      	mov	r3, r0
 80002de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e6:	f003 0310 	and.w	r3, r3, #16
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d12f      	bne.n	800034e <HAL_ADC_Init+0x112>
 80002ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d12b      	bne.n	800034e <HAL_ADC_Init+0x112>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002fe:	f023 0302 	bic.w	r3, r3, #2
 8000302:	f043 0202 	orr.w	r2, r3, #2
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000318:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000328:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800032a:	4b73      	ldr	r3, [pc, #460]	; (80004f8 <HAL_ADC_Init+0x2bc>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a73      	ldr	r2, [pc, #460]	; (80004fc <HAL_ADC_Init+0x2c0>)
 8000330:	fba2 2303 	umull	r2, r3, r2, r3
 8000334:	0c9a      	lsrs	r2, r3, #18
 8000336:	4613      	mov	r3, r2
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000340:	e002      	b.n	8000348 <HAL_ADC_Init+0x10c>
          {
            wait_loop_index--;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3b01      	subs	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f9      	bne.n	8000342 <HAL_ADC_Init+0x106>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000358:	2b00      	cmp	r3, #0
 800035a:	d007      	beq.n	800036c <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800036a:	d110      	bne.n	800038e <HAL_ADC_Init+0x152>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000370:	f023 0312 	bic.w	r3, r3, #18
 8000374:	f043 0210 	orr.w	r2, r3, #16
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000380:	f043 0201 	orr.w	r2, r3, #1
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000392:	f003 0310 	and.w	r3, r3, #16
 8000396:	2b00      	cmp	r3, #0
 8000398:	f040 8165 	bne.w	8000666 <HAL_ADC_Init+0x42a>
 800039c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	f040 8160 	bne.w	8000666 <HAL_ADC_Init+0x42a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f040 8158 	bne.w	8000666 <HAL_ADC_Init+0x42a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80003be:	f043 0202 	orr.w	r2, r3, #2
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003ce:	d004      	beq.n	80003da <HAL_ADC_Init+0x19e>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a4a      	ldr	r2, [pc, #296]	; (8000500 <HAL_ADC_Init+0x2c4>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d101      	bne.n	80003de <HAL_ADC_Init+0x1a2>
 80003da:	4b4a      	ldr	r3, [pc, #296]	; (8000504 <HAL_ADC_Init+0x2c8>)
 80003dc:	e000      	b.n	80003e0 <HAL_ADC_Init+0x1a4>
 80003de:	4b4a      	ldr	r3, [pc, #296]	; (8000508 <HAL_ADC_Init+0x2cc>)
 80003e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003ea:	d102      	bne.n	80003f2 <HAL_ADC_Init+0x1b6>
 80003ec:	4b44      	ldr	r3, [pc, #272]	; (8000500 <HAL_ADC_Init+0x2c4>)
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	e01a      	b.n	8000428 <HAL_ADC_Init+0x1ec>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a42      	ldr	r2, [pc, #264]	; (8000500 <HAL_ADC_Init+0x2c4>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d103      	bne.n	8000404 <HAL_ADC_Init+0x1c8>
 80003fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000400:	613b      	str	r3, [r7, #16]
 8000402:	e011      	b.n	8000428 <HAL_ADC_Init+0x1ec>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a40      	ldr	r2, [pc, #256]	; (800050c <HAL_ADC_Init+0x2d0>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d102      	bne.n	8000414 <HAL_ADC_Init+0x1d8>
 800040e:	4b40      	ldr	r3, [pc, #256]	; (8000510 <HAL_ADC_Init+0x2d4>)
 8000410:	613b      	str	r3, [r7, #16]
 8000412:	e009      	b.n	8000428 <HAL_ADC_Init+0x1ec>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a3d      	ldr	r2, [pc, #244]	; (8000510 <HAL_ADC_Init+0x2d4>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d102      	bne.n	8000424 <HAL_ADC_Init+0x1e8>
 800041e:	4b3b      	ldr	r3, [pc, #236]	; (800050c <HAL_ADC_Init+0x2d0>)
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	e001      	b.n	8000428 <HAL_ADC_Init+0x1ec>
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	f003 0303 	and.w	r3, r3, #3
 8000432:	2b01      	cmp	r3, #1
 8000434:	d108      	bne.n	8000448 <HAL_ADC_Init+0x20c>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	2b01      	cmp	r3, #1
 8000442:	d101      	bne.n	8000448 <HAL_ADC_Init+0x20c>
 8000444:	2301      	movs	r3, #1
 8000446:	e000      	b.n	800044a <HAL_ADC_Init+0x20e>
 8000448:	2300      	movs	r3, #0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d11c      	bne.n	8000488 <HAL_ADC_Init+0x24c>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800044e:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000450:	2b00      	cmp	r3, #0
 8000452:	d010      	beq.n	8000476 <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	f003 0303 	and.w	r3, r3, #3
 800045c:	2b01      	cmp	r3, #1
 800045e:	d107      	bne.n	8000470 <HAL_ADC_Init+0x234>
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	2b01      	cmp	r3, #1
 800046a:	d101      	bne.n	8000470 <HAL_ADC_Init+0x234>
 800046c:	2301      	movs	r3, #1
 800046e:	e000      	b.n	8000472 <HAL_ADC_Init+0x236>
 8000470:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000472:	2b00      	cmp	r3, #0
 8000474:	d108      	bne.n	8000488 <HAL_ADC_Init+0x24c>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	431a      	orrs	r2, r3
 8000484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000486:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7e5b      	ldrb	r3, [r3, #25]
 800048c:	035b      	lsls	r3, r3, #13
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000492:	2a01      	cmp	r2, #1
 8000494:	d002      	beq.n	800049c <HAL_ADC_Init+0x260>
 8000496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800049a:	e000      	b.n	800049e <HAL_ADC_Init+0x262>
 800049c:	2200      	movs	r2, #0
 800049e:	431a      	orrs	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	431a      	orrs	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	4313      	orrs	r3, r2
 80004ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80004b0:	4313      	orrs	r3, r2
 80004b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d137      	bne.n	8000530 <HAL_ADC_Init+0x2f4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	7e5b      	ldrb	r3, [r3, #25]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d125      	bne.n	8000514 <HAL_ADC_Init+0x2d8>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004cc:	3b01      	subs	r3, #1
 80004ce:	045a      	lsls	r2, r3, #17
 80004d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004d4:	4313      	orrs	r3, r2
 80004d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80004de:	e027      	b.n	8000530 <HAL_ADC_Init+0x2f4>
 80004e0:	080001f5 	.word	0x080001f5
 80004e4:	08000207 	.word	0x08000207
 80004e8:	08000219 	.word	0x08000219
 80004ec:	0800022b 	.word	0x0800022b
 80004f0:	08000cbd 	.word	0x08000cbd
 80004f4:	08002d19 	.word	0x08002d19
 80004f8:	20000000 	.word	0x20000000
 80004fc:	431bde83 	.word	0x431bde83
 8000500:	50000100 	.word	0x50000100
 8000504:	50000300 	.word	0x50000300
 8000508:	50000700 	.word	0x50000700
 800050c:	50000400 	.word	0x50000400
 8000510:	50000500 	.word	0x50000500
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800051c:	f043 0220 	orr.w	r2, r3, #32
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000528:	f043 0201 	orr.w	r2, r3, #1
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000534:	2b01      	cmp	r3, #1
 8000536:	d048      	beq.n	80005ca <HAL_ADC_Init+0x38e>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a52      	ldr	r2, [pc, #328]	; (8000688 <HAL_ADC_Init+0x44c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d004      	beq.n	800054c <HAL_ADC_Init+0x310>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a51      	ldr	r2, [pc, #324]	; (800068c <HAL_ADC_Init+0x450>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d132      	bne.n	80005b2 <HAL_ADC_Init+0x376>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000550:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000554:	d02a      	beq.n	80005ac <HAL_ADC_Init+0x370>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800055a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800055e:	d022      	beq.n	80005a6 <HAL_ADC_Init+0x36a>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000564:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000568:	d01a      	beq.n	80005a0 <HAL_ADC_Init+0x364>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056e:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000572:	d012      	beq.n	800059a <HAL_ADC_Init+0x35e>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000578:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800057c:	d00a      	beq.n	8000594 <HAL_ADC_Init+0x358>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000582:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000586:	d002      	beq.n	800058e <HAL_ADC_Init+0x352>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800058c:	e015      	b.n	80005ba <HAL_ADC_Init+0x37e>
 800058e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000592:	e012      	b.n	80005ba <HAL_ADC_Init+0x37e>
 8000594:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000598:	e00f      	b.n	80005ba <HAL_ADC_Init+0x37e>
 800059a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800059e:	e00c      	b.n	80005ba <HAL_ADC_Init+0x37e>
 80005a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a4:	e009      	b.n	80005ba <HAL_ADC_Init+0x37e>
 80005a6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80005aa:	e006      	b.n	80005ba <HAL_ADC_Init+0x37e>
 80005ac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80005b0:	e003      	b.n	80005ba <HAL_ADC_Init+0x37e>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80005c4:	4313      	orrs	r3, r2
 80005c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f003 030c 	and.w	r3, r3, #12
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d116      	bne.n	8000606 <HAL_ADC_Init+0x3ca>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005e6:	f023 0302 	bic.w	r3, r3, #2
 80005ea:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7e1b      	ldrb	r3, [r3, #24]
 80005f0:	039a      	lsls	r2, r3, #14
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4313      	orrs	r3, r2
 80005fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000600:	4313      	orrs	r3, r2
 8000602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68da      	ldr	r2, [r3, #12]
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_ADC_Init+0x454>)
 800060e:	4013      	ands	r3, r2
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	6812      	ldr	r2, [r2, #0]
 8000614:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000618:	430b      	orrs	r3, r1
 800061a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	691b      	ldr	r3, [r3, #16]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d10c      	bne.n	800063e <HAL_ADC_Init+0x402>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f023 010f 	bic.w	r1, r3, #15
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	430a      	orrs	r2, r1
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
 800063c:	e007      	b.n	800064e <HAL_ADC_Init+0x412>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f022 020f 	bic.w	r2, r2, #15
 800064c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f023 0303 	bic.w	r3, r3, #3
 800065c:	f043 0201 	orr.w	r2, r3, #1
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	641a      	str	r2, [r3, #64]	; 0x40
 8000664:	e00a      	b.n	800067c <HAL_ADC_Init+0x440>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f023 0312 	bic.w	r3, r3, #18
 800066e:	f043 0210 	orr.w	r2, r3, #16
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000676:	2301      	movs	r3, #1
 8000678:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800067c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8000680:	4618      	mov	r0, r3
 8000682:	3788      	adds	r7, #136	; 0x88
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	50000400 	.word	0x50000400
 800068c:	50000500 	.word	0x50000500
 8000690:	fff0c007 	.word	0xfff0c007

08000694 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d106      	bne.n	80006c4 <HAL_ADC_IRQHandler+0x30>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d00f      	beq.n	80006e4 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	f040 80c1 	bne.w	8000856 <HAL_ADC_IRQHandler+0x1c2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b08      	cmp	r3, #8
 80006e0:	f040 80b9 	bne.w	8000856 <HAL_ADC_IRQHandler+0x1c2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d105      	bne.n	80006fc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000704:	d004      	beq.n	8000710 <HAL_ADC_IRQHandler+0x7c>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a8f      	ldr	r2, [pc, #572]	; (8000948 <HAL_ADC_IRQHandler+0x2b4>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <HAL_ADC_IRQHandler+0x8a>
 8000710:	4b8e      	ldr	r3, [pc, #568]	; (800094c <HAL_ADC_IRQHandler+0x2b8>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	2b00      	cmp	r3, #0
 800071a:	d03e      	beq.n	800079a <HAL_ADC_IRQHandler+0x106>
 800071c:	e005      	b.n	800072a <HAL_ADC_IRQHandler+0x96>
 800071e:	4b8c      	ldr	r3, [pc, #560]	; (8000950 <HAL_ADC_IRQHandler+0x2bc>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f003 031f 	and.w	r3, r3, #31
 8000726:	2b00      	cmp	r3, #0
 8000728:	d037      	beq.n	800079a <HAL_ADC_IRQHandler+0x106>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000732:	d004      	beq.n	800073e <HAL_ADC_IRQHandler+0xaa>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a83      	ldr	r2, [pc, #524]	; (8000948 <HAL_ADC_IRQHandler+0x2b4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <HAL_ADC_IRQHandler+0xb8>
 800073e:	4b83      	ldr	r3, [pc, #524]	; (800094c <HAL_ADC_IRQHandler+0x2b8>)
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	f003 031f 	and.w	r3, r3, #31
 8000746:	2b05      	cmp	r3, #5
 8000748:	d027      	beq.n	800079a <HAL_ADC_IRQHandler+0x106>
 800074a:	e005      	b.n	8000758 <HAL_ADC_IRQHandler+0xc4>
 800074c:	4b80      	ldr	r3, [pc, #512]	; (8000950 <HAL_ADC_IRQHandler+0x2bc>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f003 031f 	and.w	r3, r3, #31
 8000754:	2b05      	cmp	r3, #5
 8000756:	d020      	beq.n	800079a <HAL_ADC_IRQHandler+0x106>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000760:	d004      	beq.n	800076c <HAL_ADC_IRQHandler+0xd8>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a78      	ldr	r2, [pc, #480]	; (8000948 <HAL_ADC_IRQHandler+0x2b4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <HAL_ADC_IRQHandler+0xe6>
 800076c:	4b77      	ldr	r3, [pc, #476]	; (800094c <HAL_ADC_IRQHandler+0x2b8>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 031f 	and.w	r3, r3, #31
 8000774:	2b09      	cmp	r3, #9
 8000776:	d010      	beq.n	800079a <HAL_ADC_IRQHandler+0x106>
 8000778:	e005      	b.n	8000786 <HAL_ADC_IRQHandler+0xf2>
 800077a:	4b75      	ldr	r3, [pc, #468]	; (8000950 <HAL_ADC_IRQHandler+0x2bc>)
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	f003 031f 	and.w	r3, r3, #31
 8000782:	2b09      	cmp	r3, #9
 8000784:	d009      	beq.n	800079a <HAL_ADC_IRQHandler+0x106>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800078e:	d004      	beq.n	800079a <HAL_ADC_IRQHandler+0x106>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a6f      	ldr	r2, [pc, #444]	; (8000954 <HAL_ADC_IRQHandler+0x2c0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d104      	bne.n	80007a4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	e00f      	b.n	80007c4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ac:	d004      	beq.n	80007b8 <HAL_ADC_IRQHandler+0x124>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a65      	ldr	r2, [pc, #404]	; (8000948 <HAL_ADC_IRQHandler+0x2b4>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d102      	bne.n	80007be <HAL_ADC_IRQHandler+0x12a>
 80007b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007bc:	e000      	b.n	80007c0 <HAL_ADC_IRQHandler+0x12c>
 80007be:	4b65      	ldr	r3, [pc, #404]	; (8000954 <HAL_ADC_IRQHandler+0x2c0>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d139      	bne.n	8000846 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d134      	bne.n	8000846 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	2b08      	cmp	r3, #8
 80007e8:	d12d      	bne.n	8000846 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d11a      	bne.n	800082e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f022 020c 	bic.w	r2, r2, #12
 8000806:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d112      	bne.n	8000846 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f043 0201 	orr.w	r2, r3, #1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	641a      	str	r2, [r3, #64]	; 0x40
 800082c:	e00b      	b.n	8000846 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f043 0210 	orr.w	r2, r3, #16
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f043 0201 	orr.w	r2, r3, #1
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	4798      	blx	r3
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	2b20      	cmp	r3, #32
 8000862:	d106      	bne.n	8000872 <HAL_ADC_IRQHandler+0x1de>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0320 	and.w	r3, r3, #32
 800086e:	2b20      	cmp	r3, #32
 8000870:	d00f      	beq.n	8000892 <HAL_ADC_IRQHandler+0x1fe>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800087c:	2b40      	cmp	r3, #64	; 0x40
 800087e:	f040 8145 	bne.w	8000b0c <HAL_ADC_IRQHandler+0x478>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088c:	2b40      	cmp	r3, #64	; 0x40
 800088e:	f040 813d 	bne.w	8000b0c <HAL_ADC_IRQHandler+0x478>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008a6:	d004      	beq.n	80008b2 <HAL_ADC_IRQHandler+0x21e>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a26      	ldr	r2, [pc, #152]	; (8000948 <HAL_ADC_IRQHandler+0x2b4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d106      	bne.n	80008c0 <HAL_ADC_IRQHandler+0x22c>
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <HAL_ADC_IRQHandler+0x2b8>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f003 031f 	and.w	r3, r3, #31
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d03e      	beq.n	800093c <HAL_ADC_IRQHandler+0x2a8>
 80008be:	e005      	b.n	80008cc <HAL_ADC_IRQHandler+0x238>
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <HAL_ADC_IRQHandler+0x2bc>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d037      	beq.n	800093c <HAL_ADC_IRQHandler+0x2a8>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008d4:	d004      	beq.n	80008e0 <HAL_ADC_IRQHandler+0x24c>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <HAL_ADC_IRQHandler+0x2b4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <HAL_ADC_IRQHandler+0x25a>
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <HAL_ADC_IRQHandler+0x2b8>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f003 031f 	and.w	r3, r3, #31
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	d027      	beq.n	800093c <HAL_ADC_IRQHandler+0x2a8>
 80008ec:	e005      	b.n	80008fa <HAL_ADC_IRQHandler+0x266>
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_ADC_IRQHandler+0x2bc>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d020      	beq.n	800093c <HAL_ADC_IRQHandler+0x2a8>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000902:	d004      	beq.n	800090e <HAL_ADC_IRQHandler+0x27a>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_ADC_IRQHandler+0x2b4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <HAL_ADC_IRQHandler+0x288>
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_ADC_IRQHandler+0x2b8>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	f003 031f 	and.w	r3, r3, #31
 8000916:	2b09      	cmp	r3, #9
 8000918:	d010      	beq.n	800093c <HAL_ADC_IRQHandler+0x2a8>
 800091a:	e005      	b.n	8000928 <HAL_ADC_IRQHandler+0x294>
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_ADC_IRQHandler+0x2bc>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f003 031f 	and.w	r3, r3, #31
 8000924:	2b09      	cmp	r3, #9
 8000926:	d009      	beq.n	800093c <HAL_ADC_IRQHandler+0x2a8>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000930:	d004      	beq.n	800093c <HAL_ADC_IRQHandler+0x2a8>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_ADC_IRQHandler+0x2c0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d10d      	bne.n	8000958 <HAL_ADC_IRQHandler+0x2c4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	e018      	b.n	8000978 <HAL_ADC_IRQHandler+0x2e4>
 8000946:	bf00      	nop
 8000948:	50000100 	.word	0x50000100
 800094c:	50000300 	.word	0x50000300
 8000950:	50000700 	.word	0x50000700
 8000954:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000960:	d004      	beq.n	800096c <HAL_ADC_IRQHandler+0x2d8>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a5b      	ldr	r2, [pc, #364]	; (8000ad4 <HAL_ADC_IRQHandler+0x440>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d102      	bne.n	8000972 <HAL_ADC_IRQHandler+0x2de>
 800096c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000970:	e000      	b.n	8000974 <HAL_ADC_IRQHandler+0x2e0>
 8000972:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <HAL_ADC_IRQHandler+0x444>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000982:	2b00      	cmp	r3, #0
 8000984:	f040 80ba 	bne.w	8000afc <HAL_ADC_IRQHandler+0x468>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00d      	beq.n	80009ae <HAL_ADC_IRQHandler+0x31a>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800099c:	2b00      	cmp	r3, #0
 800099e:	f040 80ad 	bne.w	8000afc <HAL_ADC_IRQHandler+0x468>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f040 80a7 	bne.w	8000afc <HAL_ADC_IRQHandler+0x468>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b8:	2b40      	cmp	r3, #64	; 0x40
 80009ba:	f040 809f 	bne.w	8000afc <HAL_ADC_IRQHandler+0x468>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009c6:	d004      	beq.n	80009d2 <HAL_ADC_IRQHandler+0x33e>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a41      	ldr	r2, [pc, #260]	; (8000ad4 <HAL_ADC_IRQHandler+0x440>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d106      	bne.n	80009e0 <HAL_ADC_IRQHandler+0x34c>
 80009d2:	4b42      	ldr	r3, [pc, #264]	; (8000adc <HAL_ADC_IRQHandler+0x448>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d03e      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x3c8>
 80009de:	e005      	b.n	80009ec <HAL_ADC_IRQHandler+0x358>
 80009e0:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <HAL_ADC_IRQHandler+0x44c>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f003 031f 	and.w	r3, r3, #31
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d037      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x3c8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009f4:	d004      	beq.n	8000a00 <HAL_ADC_IRQHandler+0x36c>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a36      	ldr	r2, [pc, #216]	; (8000ad4 <HAL_ADC_IRQHandler+0x440>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d106      	bne.n	8000a0e <HAL_ADC_IRQHandler+0x37a>
 8000a00:	4b36      	ldr	r3, [pc, #216]	; (8000adc <HAL_ADC_IRQHandler+0x448>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f003 031f 	and.w	r3, r3, #31
 8000a08:	2b06      	cmp	r3, #6
 8000a0a:	d027      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x3c8>
 8000a0c:	e005      	b.n	8000a1a <HAL_ADC_IRQHandler+0x386>
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <HAL_ADC_IRQHandler+0x44c>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 031f 	and.w	r3, r3, #31
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d020      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x3c8>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a22:	d004      	beq.n	8000a2e <HAL_ADC_IRQHandler+0x39a>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <HAL_ADC_IRQHandler+0x440>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d106      	bne.n	8000a3c <HAL_ADC_IRQHandler+0x3a8>
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <HAL_ADC_IRQHandler+0x448>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f003 031f 	and.w	r3, r3, #31
 8000a36:	2b07      	cmp	r3, #7
 8000a38:	d010      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x3c8>
 8000a3a:	e005      	b.n	8000a48 <HAL_ADC_IRQHandler+0x3b4>
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <HAL_ADC_IRQHandler+0x44c>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d009      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x3c8>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a50:	d004      	beq.n	8000a5c <HAL_ADC_IRQHandler+0x3c8>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_ADC_IRQHandler+0x444>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d104      	bne.n	8000a66 <HAL_ADC_IRQHandler+0x3d2>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e00f      	b.n	8000a86 <HAL_ADC_IRQHandler+0x3f2>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a6e:	d004      	beq.n	8000a7a <HAL_ADC_IRQHandler+0x3e6>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_ADC_IRQHandler+0x440>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d102      	bne.n	8000a80 <HAL_ADC_IRQHandler+0x3ec>
 8000a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a7e:	e000      	b.n	8000a82 <HAL_ADC_IRQHandler+0x3ee>
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_ADC_IRQHandler+0x444>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d135      	bne.n	8000afc <HAL_ADC_IRQHandler+0x468>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d122      	bne.n	8000ae4 <HAL_ADC_IRQHandler+0x450>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000aac:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d11a      	bne.n	8000afc <HAL_ADC_IRQHandler+0x468>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f043 0201 	orr.w	r2, r3, #1
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad2:	e013      	b.n	8000afc <HAL_ADC_IRQHandler+0x468>
 8000ad4:	50000100 	.word	0x50000100
 8000ad8:	50000400 	.word	0x50000400
 8000adc:	50000300 	.word	0x50000300
 8000ae0:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f043 0210 	orr.w	r2, r3, #16
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	f043 0201 	orr.w	r2, r3, #1
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2260      	movs	r2, #96	; 0x60
 8000b0a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	2b80      	cmp	r3, #128	; 0x80
 8000b18:	d114      	bne.n	8000b44 <HAL_ADC_IRQHandler+0x4b0>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b24:	2b80      	cmp	r3, #128	; 0x80
 8000b26:	d10d      	bne.n	8000b44 <HAL_ADC_IRQHandler+0x4b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b52:	d115      	bne.n	8000b80 <HAL_ADC_IRQHandler+0x4ec>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b62:	d10d      	bne.n	8000b80 <HAL_ADC_IRQHandler+0x4ec>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f8b5 	bl	8000ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8e:	d115      	bne.n	8000bbc <HAL_ADC_IRQHandler+0x528>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9e:	d10d      	bne.n	8000bbc <HAL_ADC_IRQHandler+0x528>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f8a0 	bl	8000cf2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	d14a      	bne.n	8000c60 <HAL_ADC_IRQHandler+0x5cc>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	2b10      	cmp	r3, #16
 8000bd6:	d143      	bne.n	8000c60 <HAL_ADC_IRQHandler+0x5cc>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d102      	bne.n	8000be6 <HAL_ADC_IRQHandler+0x552>
    {
      overrun_error = 1U;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e025      	b.n	8000c32 <HAL_ADC_IRQHandler+0x59e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bee:	d004      	beq.n	8000bfa <HAL_ADC_IRQHandler+0x566>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2e      	ldr	r2, [pc, #184]	; (8000cb0 <HAL_ADC_IRQHandler+0x61c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_ADC_IRQHandler+0x56a>
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <HAL_ADC_IRQHandler+0x620>)
 8000bfc:	e000      	b.n	8000c00 <HAL_ADC_IRQHandler+0x56c>
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <HAL_ADC_IRQHandler+0x624>)
 8000c00:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d109      	bne.n	8000c22 <HAL_ADC_IRQHandler+0x58e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d10a      	bne.n	8000c32 <HAL_ADC_IRQHandler+0x59e>
        {
          overrun_error = 1U;  
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e007      	b.n	8000c32 <HAL_ADC_IRQHandler+0x59e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_ADC_IRQHandler+0x59e>
        {
          overrun_error = 1U;  
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d10f      	bne.n	8000c58 <HAL_ADC_IRQHandler+0x5c4>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c48:	f043 0202 	orr.w	r2, r3, #2
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6e:	d11b      	bne.n	8000ca8 <HAL_ADC_IRQHandler+0x614>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c7e:	d113      	bne.n	8000ca8 <HAL_ADC_IRQHandler+0x614>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	f043 0208 	orr.w	r2, r3, #8
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f813 	bl	8000cce <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	50000100 	.word	0x50000100
 8000cb4:	50000300 	.word	0x50000300
 8000cb8:	50000700 	.word	0x50000700

08000cbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b0a3      	sub	sp, #140	; 0x8c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <HAL_ADC_ConfigChannel+0x22>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e2ce      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x5c0>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f040 82b2 	bne.w	80012a2 <HAL_ADC_ConfigChannel+0x59e>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d81c      	bhi.n	8000d80 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	461a      	mov	r2, r3
 8000d5a:	231f      	movs	r3, #31
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4019      	ands	r1, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa00 f203 	lsl.w	r2, r0, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7e:	e063      	b.n	8000e48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d81e      	bhi.n	8000dc6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	3b1e      	subs	r3, #30
 8000d9c:	221f      	movs	r2, #31
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4019      	ands	r1, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	3b1e      	subs	r3, #30
 8000db8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc4:	e040      	b.n	8000e48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b0e      	cmp	r3, #14
 8000dcc:	d81e      	bhi.n	8000e0c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	3b3c      	subs	r3, #60	; 0x3c
 8000de2:	221f      	movs	r2, #31
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4019      	ands	r1, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	3b3c      	subs	r3, #60	; 0x3c
 8000dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	e01d      	b.n	8000e48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	3b5a      	subs	r3, #90	; 0x5a
 8000e20:	221f      	movs	r2, #31
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4019      	ands	r1, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	3b5a      	subs	r3, #90	; 0x5a
 8000e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 80e9 	bne.w	800102a <HAL_ADC_ConfigChannel+0x326>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	d91c      	bls.n	8000e9a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6999      	ldr	r1, [r3, #24]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b1e      	subs	r3, #30
 8000e72:	2207      	movs	r2, #7
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6898      	ldr	r0, [r3, #8]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b1e      	subs	r3, #30
 8000e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	e019      	b.n	8000ece <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6959      	ldr	r1, [r3, #20]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2207      	movs	r2, #7
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4019      	ands	r1, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	6898      	ldr	r0, [r3, #8]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d852      	bhi.n	8000f98 <HAL_ADC_ConfigChannel+0x294>
 8000ef2:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <HAL_ADC_ConfigChannel+0x1f4>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f09 	.word	0x08000f09
 8000efc:	08000f2d 	.word	0x08000f2d
 8000f00:	08000f51 	.word	0x08000f51
 8000f04:	08000f75 	.word	0x08000f75
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f0e:	4b9c      	ldr	r3, [pc, #624]	; (8001180 <HAL_ADC_ConfigChannel+0x47c>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	0691      	lsls	r1, r2, #26
 8000f18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f28:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f2a:	e081      	b.n	8001030 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f32:	4b93      	ldr	r3, [pc, #588]	; (8001180 <HAL_ADC_ConfigChannel+0x47c>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	0691      	lsls	r1, r2, #26
 8000f3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000f40:	430a      	orrs	r2, r1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f4c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f4e:	e06f      	b.n	8001030 <HAL_ADC_ConfigChannel+0x32c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f56:	4b8a      	ldr	r3, [pc, #552]	; (8001180 <HAL_ADC_ConfigChannel+0x47c>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	0691      	lsls	r1, r2, #26
 8000f60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000f64:	430a      	orrs	r2, r1
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f70:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f72:	e05d      	b.n	8001030 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <HAL_ADC_ConfigChannel+0x47c>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	0691      	lsls	r1, r2, #26
 8000f84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f94:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f96:	e04b      	b.n	8001030 <HAL_ADC_ConfigChannel+0x32c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	069b      	lsls	r3, r3, #26
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d107      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x2b8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	069b      	lsls	r3, r3, #26
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d107      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x2dc>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fde:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	069b      	lsls	r3, r3, #26
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d107      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x300>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001002:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800100a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	069b      	lsls	r3, r3, #26
 8001014:	429a      	cmp	r2, r3
 8001016:	d10a      	bne.n	800102e <HAL_ADC_ConfigChannel+0x32a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001026:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001028:	e001      	b.n	800102e <HAL_ADC_ConfigChannel+0x32a>
    }

  }
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <HAL_ADC_ConfigChannel+0x32c>
      break;
 800102e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x34c>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x34c>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_ADC_ConfigChannel+0x34e>
 8001050:	2300      	movs	r3, #0
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 8130 	bne.w	80012b8 <HAL_ADC_ConfigChannel+0x5b4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d00f      	beq.n	8001080 <HAL_ADC_ConfigChannel+0x37c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	400a      	ands	r2, r1
 800107a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800107e:	e049      	b.n	8001114 <HAL_ADC_ConfigChannel+0x410>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b09      	cmp	r3, #9
 80010a0:	d91c      	bls.n	80010dc <HAL_ADC_ConfigChannel+0x3d8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6999      	ldr	r1, [r3, #24]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	3b1b      	subs	r3, #27
 80010b4:	2207      	movs	r2, #7
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4019      	ands	r1, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	3b1b      	subs	r3, #27
 80010ce:	fa00 f203 	lsl.w	r2, r0, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	e01b      	b.n	8001114 <HAL_ADC_ConfigChannel+0x410>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6959      	ldr	r1, [r3, #20]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4019      	ands	r1, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	fa00 f203 	lsl.w	r2, r0, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800111c:	d004      	beq.n	8001128 <HAL_ADC_ConfigChannel+0x424>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <HAL_ADC_ConfigChannel+0x480>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_ADC_ConfigChannel+0x428>
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_ADC_ConfigChannel+0x484>)
 800112a:	e000      	b.n	800112e <HAL_ADC_ConfigChannel+0x42a>
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_ADC_ConfigChannel+0x488>)
 800112e:	67fb      	str	r3, [r7, #124]	; 0x7c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b10      	cmp	r3, #16
 8001136:	d105      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x440>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001140:	2b00      	cmp	r3, #0
 8001142:	d015      	beq.n	8001170 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001148:	2b11      	cmp	r3, #17
 800114a:	d105      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x454>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800114c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00b      	beq.n	8001170 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800115c:	2b12      	cmp	r3, #18
 800115e:	f040 80ab 	bne.w	80012b8 <HAL_ADC_ConfigChannel+0x5b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 80a4 	bne.w	80012b8 <HAL_ADC_ConfigChannel+0x5b4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001178:	d10a      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x48c>
 800117a:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_ADC_ConfigChannel+0x480>)
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	e022      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x4c2>
 8001180:	83fff000 	.word	0x83fff000
 8001184:	50000100 	.word	0x50000100
 8001188:	50000300 	.word	0x50000300
 800118c:	50000700 	.word	0x50000700
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d103      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x49e>
 800119a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e011      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x4c2>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_ADC_ConfigChannel+0x5d0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d102      	bne.n	80011b2 <HAL_ADC_ConfigChannel+0x4ae>
 80011ac:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_ADC_ConfigChannel+0x5d4>)
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	e009      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x4c2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <HAL_ADC_ConfigChannel+0x5d4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d102      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x4be>
 80011bc:	4b45      	ldr	r3, [pc, #276]	; (80012d4 <HAL_ADC_ConfigChannel+0x5d0>)
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	e001      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x4c2>
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x4e2>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x4e2>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x4e4>
 80011e6:	2300      	movs	r3, #0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d150      	bne.n	800128e <HAL_ADC_ConfigChannel+0x58a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011ec:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d010      	beq.n	8001214 <HAL_ADC_ConfigChannel+0x510>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d107      	bne.n	800120e <HAL_ADC_ConfigChannel+0x50a>
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_ADC_ConfigChannel+0x50a>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_ADC_ConfigChannel+0x50c>
 800120e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001210:	2b00      	cmp	r3, #0
 8001212:	d13c      	bne.n	800128e <HAL_ADC_ConfigChannel+0x58a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b10      	cmp	r3, #16
 800121a:	d11d      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x554>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001224:	d118      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x554>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001226:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800122e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001230:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <HAL_ADC_ConfigChannel+0x5d8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <HAL_ADC_ConfigChannel+0x5dc>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9a      	lsrs	r2, r3, #18
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001248:	e002      	b.n	8001250 <HAL_ADC_ConfigChannel+0x54c>
          {
            wait_loop_index--;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3b01      	subs	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f9      	bne.n	800124a <HAL_ADC_ConfigChannel+0x546>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001256:	e02e      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x5b2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b11      	cmp	r3, #17
 800125e:	d10b      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x574>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001268:	d106      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x574>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800126a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001274:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001276:	e01e      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x5b2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b12      	cmp	r3, #18
 800127e:	d11a      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x5b2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800128a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800128c:	e013      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x5b2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0220 	orr.w	r2, r3, #32
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80012a0:	e00a      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x5b4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80012b4:	e000      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x5b4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012b6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	378c      	adds	r7, #140	; 0x8c
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	50000100 	.word	0x50000100
 80012d4:	50000400 	.word	0x50000400
 80012d8:	50000500 	.word	0x50000500
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83

080012e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b0a1      	sub	sp, #132	; 0x84
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fc:	d102      	bne.n	8001304 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80012fe:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e01a      	b.n	800133a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a69      	ldr	r2, [pc, #420]	; (80014b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d103      	bne.n	8001316 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800130e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e011      	b.n	800133a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a66      	ldr	r2, [pc, #408]	; (80014b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d102      	bne.n	8001326 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001320:	4b65      	ldr	r3, [pc, #404]	; (80014b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e009      	b.n	800133a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a63      	ldr	r2, [pc, #396]	; (80014b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d102      	bne.n	8001336 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e001      	b.n	800133a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0b0      	b.n	80014a6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800134e:	2302      	movs	r3, #2
 8001350:	e0a9      	b.n	80014a6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 808d 	bne.w	8001484 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 8086 	bne.w	8001484 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001380:	d004      	beq.n	800138c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a4a      	ldr	r2, [pc, #296]	; (80014b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800138c:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800138e:	e000      	b.n	8001392 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001390:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001392:	67bb      	str	r3, [r7, #120]	; 0x78
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d040      	beq.n	800141e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800139c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ae:	035b      	lsls	r3, r3, #13
 80013b0:	430b      	orrs	r3, r1
 80013b2:	431a      	orrs	r2, r3
 80013b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013b6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d108      	bne.n	80013d8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80013d8:	2300      	movs	r3, #0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d15c      	bne.n	8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80013fa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d14b      	bne.n	8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001408:	f023 030f 	bic.w	r3, r3, #15
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	6811      	ldr	r1, [r2, #0]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	6892      	ldr	r2, [r2, #8]
 8001414:	430a      	orrs	r2, r1
 8001416:	431a      	orrs	r2, r3
 8001418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800141a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800141c:	e03c      	b.n	8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800141e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001428:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800144a:	2300      	movs	r3, #0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d123      	bne.n	8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d107      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800146c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d112      	bne.n	8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800147a:	f023 030f 	bic.w	r3, r3, #15
 800147e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001480:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001482:	e009      	b.n	8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f043 0220 	orr.w	r2, r3, #32
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001496:	e000      	b.n	800149a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001498:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
} 
 80014a6:	4618      	mov	r0, r3
 80014a8:	3784      	adds	r7, #132	; 0x84
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	50000100 	.word	0x50000100
 80014b4:	50000400 	.word	0x50000400
 80014b8:	50000500 	.word	0x50000500
 80014bc:	50000300 	.word	0x50000300
 80014c0:	50000700 	.word	0x50000700

080014c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d108      	bne.n	80014f0 <ADC_Disable+0x2c>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <ADC_Disable+0x2c>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <ADC_Disable+0x2e>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d047      	beq.n	8001586 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030d 	and.w	r3, r3, #13
 8001500:	2b01      	cmp	r3, #1
 8001502:	d10f      	bne.n	8001524 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0202 	orr.w	r2, r2, #2
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2203      	movs	r2, #3
 800151a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800151c:	f001 fac2 	bl	8002aa4 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001522:	e029      	b.n	8001578 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f043 0210 	orr.w	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e023      	b.n	8001588 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001540:	f001 fab0 	bl	8002aa4 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d914      	bls.n	8001578 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10d      	bne.n	8001578 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f043 0210 	orr.w	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e007      	b.n	8001588 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d0dc      	beq.n	8001540 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	e160      	b.n	8001862 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8152 	beq.w	800185c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_Init+0x40>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 0201 	and.w	r2, r3, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b03      	cmp	r3, #3
 800163c:	d017      	beq.n	800166e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d123      	bne.n	80016c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	6939      	ldr	r1, [r7, #16]
 80016be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0203 	and.w	r2, r3, #3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80ac 	beq.w	800185c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b5b      	ldr	r3, [pc, #364]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800171c:	4a59      	ldr	r2, [pc, #356]	; (8001884 <HAL_GPIO_Init+0x2f4>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001746:	d025      	beq.n	8001794 <HAL_GPIO_Init+0x204>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_GPIO_Init+0x2f8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d01f      	beq.n	8001790 <HAL_GPIO_Init+0x200>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4e      	ldr	r2, [pc, #312]	; (800188c <HAL_GPIO_Init+0x2fc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d019      	beq.n	800178c <HAL_GPIO_Init+0x1fc>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_GPIO_Init+0x300>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <HAL_GPIO_Init+0x1f8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_GPIO_Init+0x304>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_GPIO_Init+0x1f4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_GPIO_Init+0x308>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x1f0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a4a      	ldr	r2, [pc, #296]	; (800189c <HAL_GPIO_Init+0x30c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_GPIO_Init+0x1ec>
 8001778:	2306      	movs	r3, #6
 800177a:	e00c      	b.n	8001796 <HAL_GPIO_Init+0x206>
 800177c:	2307      	movs	r3, #7
 800177e:	e00a      	b.n	8001796 <HAL_GPIO_Init+0x206>
 8001780:	2305      	movs	r3, #5
 8001782:	e008      	b.n	8001796 <HAL_GPIO_Init+0x206>
 8001784:	2304      	movs	r3, #4
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x206>
 8001788:	2303      	movs	r3, #3
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x206>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x206>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x206>
 8001794:	2300      	movs	r3, #0
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a6:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_GPIO_Init+0x2f4>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_GPIO_Init+0x310>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017d8:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <HAL_GPIO_Init+0x310>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_GPIO_Init+0x310>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_GPIO_Init+0x310>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_GPIO_Init+0x310>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800182c:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_GPIO_Init+0x310>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_GPIO_Init+0x310>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_GPIO_Init+0x310>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f ae97 	bne.w	80015a0 <HAL_GPIO_Init+0x10>
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	48000c00 	.word	0x48000c00
 8001894:	48001000 	.word	0x48001000
 8001898:	48001400 	.word	0x48001400
 800189c:	48001800 	.word	0x48001800
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e4:	887a      	ldrh	r2, [r7, #2]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	041a      	lsls	r2, r3, #16
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	400b      	ands	r3, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4618      	mov	r0, r3
 8001924:	f001 f851 	bl	80029ca <HAL_GPIO_EXTI_Callback>
  }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001942:	2b02      	cmp	r3, #2
 8001944:	d008      	beq.n	8001958 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e020      	b.n	800199a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 020e 	bic.w	r2, r2, #14
 8001966:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d005      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2204      	movs	r2, #4
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e027      	b.n	8001a16 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 020e 	bic.w	r2, r2, #14
 80019d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
    } 
  }
  return status;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <Gpt_Init>:

static void Gpt_TIM3_Init(void);
static void Gpt_Error_Handler(void);

void Gpt_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	Gpt_TIM3_Init();
 8001a24:	f000 f834 	bl	8001a90 <Gpt_TIM3_Init>
	Gpt_InitDone = 1u;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <Gpt_Init+0x14>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000e8 	.word	0x200000e8

08001a38 <Gpt_TIM3_Start_IT>:

void Gpt_TIM3_Start_IT(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	if(1u == Gpt_InitDone)
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <Gpt_TIM3_Start_IT+0x18>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d102      	bne.n	8001a4a <Gpt_TIM3_Start_IT+0x12>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <Gpt_TIM3_Start_IT+0x1c>)
 8001a46:	f000 f8db 	bl	8001c00 <HAL_TIM_Base_Start_IT>
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200000e8 	.word	0x200000e8
 8001a54:	2000002c 	.word	0x2000002c

08001a58 <HAL_TIM_PeriodElapsedCallback>:
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	//TODO: Remove and redirect timer callback
	if(tim3_count == 99)
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b63      	cmp	r3, #99	; 0x63
 8001a68:	d103      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		tim3_count = 0u;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
	else
	{
		tim3_count++;
	}

}
 8001a70:	e006      	b.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x28>
		tim3_count++;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a7e:	701a      	strb	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000029 	.word	0x20000029

08001a90 <Gpt_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void Gpt_TIM3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <Gpt_TIM3_Init+0x98>)
 8001ab2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001ab6:	2264      	movs	r2, #100	; 0x64
 8001ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001ac2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ad4:	4813      	ldr	r0, [pc, #76]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001ad6:	f000 f82f 	bl	8001b38 <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <Gpt_TIM3_Init+0x54>
  {
	  Gpt_Error_Handler();
 8001ae0:	f000 f824 	bl	8001b2c <Gpt_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001af2:	f000 fa36 	bl	8001f62 <HAL_TIM_ConfigClockSource>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <Gpt_TIM3_Init+0x70>
  {
	  Gpt_Error_Handler();
 8001afc:	f000 f816 	bl	8001b2c <Gpt_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <Gpt_TIM3_Init+0x94>)
 8001b0e:	f000 fcd3 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <Gpt_TIM3_Init+0x8c>
  {
	  Gpt_Error_Handler();
 8001b18:	f000 f808 	bl	8001b2c <Gpt_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000002c 	.word	0x2000002c
 8001b28:	40000400 	.word	0x40000400

08001b2c <Gpt_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Gpt_Error_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b30:	b672      	cpsid	i
}
 8001b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <Gpt_Error_Handler+0x8>
	...

08001b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e054      	b.n	8001bf4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d111      	bne.n	8001b7a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fc4c 	bl	80023fc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_TIM_Base_Init+0xc4>)
 8001b70:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	f000 fb03 	bl	8002198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	08002ed5 	.word	0x08002ed5

08001c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d001      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e04f      	b.n	8001cb8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01d      	beq.n	8001c76 <HAL_TIM_Base_Start_IT+0x76>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c42:	d018      	beq.n	8001c76 <HAL_TIM_Base_Start_IT+0x76>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_TIM_Base_Start_IT+0x76>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_TIM_Base_Start_IT+0xcc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00e      	beq.n	8001c76 <HAL_TIM_Base_Start_IT+0x76>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d009      	beq.n	8001c76 <HAL_TIM_Base_Start_IT+0x76>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d004      	beq.n	8001c76 <HAL_TIM_Base_Start_IT+0x76>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d115      	bne.n	8001ca2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_TIM_Base_Start_IT+0xdc>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d015      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0xb4>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8e:	d011      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca0:	e008      	b.n	8001cb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e000      	b.n	8001cb6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40013400 	.word	0x40013400
 8001cd4:	40014000 	.word	0x40014000
 8001cd8:	40015000 	.word	0x40015000
 8001cdc:	00010007 	.word	0x00010007

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d128      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d121      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0202 	mvn.w	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
 8001d2c:	e009      	b.n	8001d42 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d128      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d121      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0204 	mvn.w	r2, #4
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
 8001d8c:	e009      	b.n	8001da2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d128      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d121      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0208 	mvn.w	r2, #8
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
 8001dec:	e009      	b.n	8001e02 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d128      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d121      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0210 	mvn.w	r2, #16
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2208      	movs	r2, #8
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
 8001e4c:	e009      	b.n	8001e62 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d110      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d109      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0201 	mvn.w	r2, #1
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b80      	cmp	r3, #128	; 0x80
 8001ea4:	d110      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d109      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed6:	d110      	bne.n	8001efa <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d109      	bne.n	8001efa <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d110      	bne.n	8001f2a <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d109      	bne.n	8001f2a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d110      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d109      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f06f 0220 	mvn.w	r2, #32
 8001f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_ConfigClockSource+0x1c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0b6      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x18a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fa0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fa8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fba:	d03e      	beq.n	800203a <HAL_TIM_ConfigClockSource+0xd8>
 8001fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc0:	f200 8087 	bhi.w	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8001fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc8:	f000 8086 	beq.w	80020d8 <HAL_TIM_ConfigClockSource+0x176>
 8001fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd0:	d87f      	bhi.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8001fd2:	2b70      	cmp	r3, #112	; 0x70
 8001fd4:	d01a      	beq.n	800200c <HAL_TIM_ConfigClockSource+0xaa>
 8001fd6:	2b70      	cmp	r3, #112	; 0x70
 8001fd8:	d87b      	bhi.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8001fda:	2b60      	cmp	r3, #96	; 0x60
 8001fdc:	d050      	beq.n	8002080 <HAL_TIM_ConfigClockSource+0x11e>
 8001fde:	2b60      	cmp	r3, #96	; 0x60
 8001fe0:	d877      	bhi.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8001fe2:	2b50      	cmp	r3, #80	; 0x50
 8001fe4:	d03c      	beq.n	8002060 <HAL_TIM_ConfigClockSource+0xfe>
 8001fe6:	2b50      	cmp	r3, #80	; 0x50
 8001fe8:	d873      	bhi.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d058      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0x13e>
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d86f      	bhi.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8001ff2:	2b30      	cmp	r3, #48	; 0x30
 8001ff4:	d064      	beq.n	80020c0 <HAL_TIM_ConfigClockSource+0x15e>
 8001ff6:	2b30      	cmp	r3, #48	; 0x30
 8001ff8:	d86b      	bhi.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d060      	beq.n	80020c0 <HAL_TIM_ConfigClockSource+0x15e>
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d867      	bhi.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d05c      	beq.n	80020c0 <HAL_TIM_ConfigClockSource+0x15e>
 8002006:	2b10      	cmp	r3, #16
 8002008:	d05a      	beq.n	80020c0 <HAL_TIM_ConfigClockSource+0x15e>
 800200a:	e062      	b.n	80020d2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f000 f9cf 	bl	80023be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800202e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	609a      	str	r2, [r3, #8]
      break;
 8002038:	e04f      	b.n	80020da <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f000 f9b8 	bl	80023be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800205c:	609a      	str	r2, [r3, #8]
      break;
 800205e:	e03c      	b.n	80020da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	461a      	mov	r2, r3
 800206e:	f000 f92f 	bl	80022d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2150      	movs	r1, #80	; 0x50
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f986 	bl	800238a <TIM_ITRx_SetConfig>
      break;
 800207e:	e02c      	b.n	80020da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	461a      	mov	r2, r3
 800208e:	f000 f94d 	bl	800232c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2160      	movs	r1, #96	; 0x60
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f976 	bl	800238a <TIM_ITRx_SetConfig>
      break;
 800209e:	e01c      	b.n	80020da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f000 f90f 	bl	80022d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2140      	movs	r1, #64	; 0x40
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f966 	bl	800238a <TIM_ITRx_SetConfig>
      break;
 80020be:	e00c      	b.n	80020da <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f000 f95d 	bl	800238a <TIM_ITRx_SetConfig>
      break;
 80020d0:	e003      	b.n	80020da <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
      break;
 80020d6:	e000      	b.n	80020da <HAL_TIM_ConfigClockSource+0x178>
      break;
 80020d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
	...

08002198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a41      	ldr	r2, [pc, #260]	; (80022b0 <TIM_Base_SetConfig+0x118>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b6:	d00f      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3e      	ldr	r2, [pc, #248]	; (80022b4 <TIM_Base_SetConfig+0x11c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a3d      	ldr	r2, [pc, #244]	; (80022b8 <TIM_Base_SetConfig+0x120>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a3c      	ldr	r2, [pc, #240]	; (80022bc <TIM_Base_SetConfig+0x124>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <TIM_Base_SetConfig+0x128>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a30      	ldr	r2, [pc, #192]	; (80022b0 <TIM_Base_SetConfig+0x118>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d01b      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2d      	ldr	r2, [pc, #180]	; (80022b4 <TIM_Base_SetConfig+0x11c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d017      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2c      	ldr	r2, [pc, #176]	; (80022b8 <TIM_Base_SetConfig+0x120>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <TIM_Base_SetConfig+0x124>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00f      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <TIM_Base_SetConfig+0x12c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <TIM_Base_SetConfig+0x130>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <TIM_Base_SetConfig+0x134>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0x9a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <TIM_Base_SetConfig+0x128>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <TIM_Base_SetConfig+0x118>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <TIM_Base_SetConfig+0x100>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <TIM_Base_SetConfig+0x124>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00f      	beq.n	8002298 <TIM_Base_SetConfig+0x100>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <TIM_Base_SetConfig+0x12c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00b      	beq.n	8002298 <TIM_Base_SetConfig+0x100>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <TIM_Base_SetConfig+0x130>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <TIM_Base_SetConfig+0x100>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <TIM_Base_SetConfig+0x134>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0x100>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <TIM_Base_SetConfig+0x128>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d103      	bne.n	80022a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	615a      	str	r2, [r3, #20]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	40012c00 	.word	0x40012c00
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40013400 	.word	0x40013400
 80022c0:	40015000 	.word	0x40015000
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800

080022d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f023 0201 	bic.w	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 030a 	bic.w	r3, r3, #10
 800230c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 0210 	bic.w	r2, r3, #16
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002356:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	031b      	lsls	r3, r3, #12
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	621a      	str	r2, [r3, #32]
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f043 0307 	orr.w	r3, r3, #7
 80023ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023be:	b480      	push	{r7}
 80023c0:	b087      	sub	sp, #28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	021a      	lsls	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	609a      	str	r2, [r3, #8]
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <TIM_ResetCallback+0x84>)
 8002408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <TIM_ResetCallback+0x88>)
 8002410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <TIM_ResetCallback+0x8c>)
 8002418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a1b      	ldr	r2, [pc, #108]	; (800248c <TIM_ResetCallback+0x90>)
 8002420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <TIM_ResetCallback+0x94>)
 8002428:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a19      	ldr	r2, [pc, #100]	; (8002494 <TIM_ResetCallback+0x98>)
 8002430:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <TIM_ResetCallback+0x9c>)
 8002438:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <TIM_ResetCallback+0xa0>)
 8002440:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <TIM_ResetCallback+0xa4>)
 8002448:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <TIM_ResetCallback+0xa8>)
 8002450:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <TIM_ResetCallback+0xac>)
 8002458:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a13      	ldr	r2, [pc, #76]	; (80024ac <TIM_ResetCallback+0xb0>)
 8002460:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <TIM_ResetCallback+0xb4>)
 8002468:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#if defined(TIM_BDTR_BK2E)
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <TIM_ResetCallback+0xb8>)
 8002470:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TIM_BDTR_BK2E */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	08001a59 	.word	0x08001a59
 8002484:	080020f5 	.word	0x080020f5
 8002488:	08002161 	.word	0x08002161
 800248c:	08002173 	.word	0x08002173
 8002490:	08002119 	.word	0x08002119
 8002494:	0800212b 	.word	0x0800212b
 8002498:	08002107 	.word	0x08002107
 800249c:	0800213d 	.word	0x0800213d
 80024a0:	0800214f 	.word	0x0800214f
 80024a4:	08002185 	.word	0x08002185
 80024a8:	080025d1 	.word	0x080025d1
 80024ac:	080025e3 	.word	0x080025e3
 80024b0:	080025f5 	.word	0x080025f5
 80024b4:	08002607 	.word	0x08002607

080024b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e06d      	b.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2d      	ldr	r2, [pc, #180]	; (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d108      	bne.n	8002520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002514:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d01d      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d018      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10c      	bne.n	800259a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4313      	orrs	r3, r2
 8002590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40013400 	.word	0x40013400
 80025c0:	40015000 	.word	0x40015000
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800
 80025cc:	40014000 	.word	0x40014000

080025d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0a7      	b.n	800277a <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d12c      	bne.n	8002690 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a50      	ldr	r2, [pc, #320]	; (8002784 <HAL_I2C_Init+0x16c>)
 8002642:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a50      	ldr	r2, [pc, #320]	; (8002788 <HAL_I2C_Init+0x170>)
 8002648:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4f      	ldr	r2, [pc, #316]	; (800278c <HAL_I2C_Init+0x174>)
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a4f      	ldr	r2, [pc, #316]	; (8002790 <HAL_I2C_Init+0x178>)
 8002654:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_I2C_Init+0x17c>)
 800265a:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_I2C_Init+0x180>)
 8002660:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_I2C_Init+0x184>)
 8002666:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a4d      	ldr	r2, [pc, #308]	; (80027a0 <HAL_I2C_Init+0x188>)
 800266c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <HAL_I2C_Init+0x18c>)
 8002672:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_I2C_Init+0x190>)
 8002678:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a49      	ldr	r2, [pc, #292]	; (80027ac <HAL_I2C_Init+0x194>)
 8002686:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	e006      	b.n	80026ec <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d104      	bne.n	80026fe <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800270c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69d9      	ldr	r1, [r3, #28]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	080027e5 	.word	0x080027e5
 8002788:	080027f7 	.word	0x080027f7
 800278c:	08002809 	.word	0x08002809
 8002790:	0800281b 	.word	0x0800281b
 8002794:	08002847 	.word	0x08002847
 8002798:	08002859 	.word	0x08002859
 800279c:	0800286b 	.word	0x0800286b
 80027a0:	0800287d 	.word	0x0800287d
 80027a4:	0800288f 	.word	0x0800288f
 80027a8:	0800282d 	.word	0x0800282d
 80027ac:	08002da5 	.word	0x08002da5

080027b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
  }
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
 8002838:	4613      	mov	r3, r2
 800283a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d138      	bne.n	8002928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e032      	b.n	800292a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	; 0x24
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	e000      	b.n	800292a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002928:	2302      	movs	r3, #2
  }
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b20      	cmp	r3, #32
 8002948:	d139      	bne.n	80029be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002954:	2302      	movs	r3, #2
 8002956:	e033      	b.n	80029c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2224      	movs	r2, #36	; 0x24
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002986:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_EXTI_Callback>:
#include "Rte_Bsw_Int.h"
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin)
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d101      	bne.n	80029e0 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Rte_Trigger_Bsw_Int_ButtonEvent();
 80029dc:	f003 fc9a 	bl	8006314 <Rte_Trigger_Bsw_Int_ButtonEvent>
	}
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_Init+0x28>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_Init+0x28>)
 80029fe:	f043 0310 	orr.w	r3, r3, #16
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f000 f923 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0a:	200f      	movs	r0, #15
 8002a0c:	f000 f808 	bl	8002a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a10:	f000 f960 	bl	8002cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40022000 	.word	0x40022000

08002a20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x54>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_InitTick+0x58>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f93b 	bl	8002cba <HAL_SYSTICK_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00e      	b.n	8002a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	d80a      	bhi.n	8002a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a54:	2200      	movs	r2, #0
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f000 f903 	bl	8002c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a60:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <HAL_InitTick+0x5c>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_IncTick+0x1c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_IncTick+0x20>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <HAL_IncTick+0x20>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	200000ec 	.word	0x200000ec

08002aa4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <HAL_GetTick+0x10>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	200000ec 	.word	0x200000ec

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4906      	ldr	r1, [pc, #24]	; (8002b50 <__NVIC_EnableIRQ+0x34>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f7ff ff90 	bl	8002b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff2d 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff42 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ff90 	bl	8002ba8 <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff5f 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff35 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffa2 	bl	8002c0c <SysTick_Config>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_MspInit+0x40>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_MspInit+0x40>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6193      	str	r3, [r2, #24]
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_MspInit+0x40>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_MspInit+0x40>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <HAL_MspInit+0x40>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	61d3      	str	r3, [r2, #28]
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_MspInit+0x40>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d38:	d12b      	bne.n	8002d92 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_ADC_MspInit+0x84>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_ADC_MspInit+0x84>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6153      	str	r3, [r2, #20]
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_ADC_MspInit+0x84>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_ADC_MspInit+0x84>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <HAL_ADC_MspInit+0x84>)
 8002d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d5c:	6153      	str	r3, [r2, #20]
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_ADC_MspInit+0x84>)
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4808      	ldr	r0, [pc, #32]	; (8002da0 <HAL_ADC_MspInit+0x88>)
 8002d7e:	f7fe fc07 	bl	8001590 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	2012      	movs	r0, #18
 8002d88:	f7ff ff6d 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002d8c:	2012      	movs	r0, #18
 8002d8e:	f7ff ff86 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	; 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	48000800 	.word	0x48000800

08002da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_I2C_MspInit+0x8c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d130      	bne.n	8002e28 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_I2C_MspInit+0x90>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <HAL_I2C_MspInit+0x90>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd0:	6153      	str	r3, [r2, #20]
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_I2C_MspInit+0x90>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de4:	2312      	movs	r3, #18
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002df0:	2304      	movs	r3, #4
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480f      	ldr	r0, [pc, #60]	; (8002e38 <HAL_I2C_MspInit+0x94>)
 8002dfc:	f7fe fbc8 	bl	8001590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_I2C_MspInit+0x90>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <HAL_I2C_MspInit+0x90>)
 8002e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_I2C_MspInit+0x90>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	201f      	movs	r0, #31
 8002e1e:	f7ff ff22 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e22:	201f      	movs	r0, #31
 8002e24:	f7ff ff3b 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e28:	bf00      	nop
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40005400 	.word	0x40005400
 8002e34:	40021000 	.word	0x40021000
 8002e38:	48000400 	.word	0x48000400

08002e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_SPI_MspInit+0x8c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d130      	bne.n	8002ec0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_SPI_MspInit+0x90>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <HAL_SPI_MspInit+0x90>)
 8002e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e68:	61d3      	str	r3, [r2, #28]
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_SPI_MspInit+0x90>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <HAL_SPI_MspInit+0x90>)
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <HAL_SPI_MspInit+0x90>)
 8002e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e80:	6153      	str	r3, [r2, #20]
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_SPI_MspInit+0x90>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002e8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ea0:	2306      	movs	r3, #6
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <HAL_SPI_MspInit+0x94>)
 8002eac:	f7fe fb70 	bl	8001590 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2033      	movs	r0, #51	; 0x33
 8002eb6:	f7ff fed6 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002eba:	2033      	movs	r0, #51	; 0x33
 8002ebc:	f7ff feef 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ec0:	bf00      	nop
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40003c00 	.word	0x40003c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	48000800 	.word	0x48000800

08002ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <HAL_TIM_Base_MspInit+0x44>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d113      	bne.n	8002f0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_TIM_Base_MspInit+0x48>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <HAL_TIM_Base_MspInit+0x48>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	61d3      	str	r3, [r2, #28]
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_TIM_Base_MspInit+0x48>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	201d      	movs	r0, #29
 8002f04:	f7ff feaf 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f08:	201d      	movs	r0, #29
 8002f0a:	f7ff fec8 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40021000 	.word	0x40021000

08002f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a36      	ldr	r2, [pc, #216]	; (8003018 <HAL_UART_MspInit+0xf8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d130      	bne.n	8002fa4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	4a35      	ldr	r2, [pc, #212]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6193      	str	r3, [r2, #24]
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5a:	4b30      	ldr	r3, [pc, #192]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f64:	6153      	str	r3, [r2, #20]
 8002f66:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f72:	2330      	movs	r3, #48	; 0x30
 8002f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f82:	2307      	movs	r3, #7
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4824      	ldr	r0, [pc, #144]	; (8003020 <HAL_UART_MspInit+0x100>)
 8002f8e:	f7fe faff 	bl	8001590 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2025      	movs	r0, #37	; 0x25
 8002f98:	f7ff fe65 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f9c:	2025      	movs	r0, #37	; 0x25
 8002f9e:	f7ff fe7e 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fa2:	e035      	b.n	8003010 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_UART_MspInit+0x104>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d130      	bne.n	8003010 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a1a      	ldr	r2, [pc, #104]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	61d3      	str	r3, [r2, #28]
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd0:	6153      	str	r3, [r2, #20]
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_UART_MspInit+0xfc>)
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fde:	230c      	movs	r3, #12
 8002fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fee:	2307      	movs	r3, #7
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ffc:	f7fe fac8 	bl	8001590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	2026      	movs	r0, #38	; 0x26
 8003006:	f7ff fe2e 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800300a:	2026      	movs	r0, #38	; 0x26
 800300c:	f7ff fe47 	bl	8002c9e <HAL_NVIC_EnableIRQ>
}
 8003010:	bf00      	nop
 8003012:	3730      	adds	r7, #48	; 0x30
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40013800 	.word	0x40013800
 800301c:	40021000 	.word	0x40021000
 8003020:	48000800 	.word	0x48000800
 8003024:	40004400 	.word	0x40004400

08003028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800302e:	af00      	add	r7, sp, #0
 8003030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003034:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003038:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800303a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800303e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f001 b83a 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003052:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 816f 	beq.w	8003342 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003064:	4bb5      	ldr	r3, [pc, #724]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b04      	cmp	r3, #4
 800306e:	d00c      	beq.n	800308a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003070:	4bb2      	ldr	r3, [pc, #712]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d15c      	bne.n	8003136 <HAL_RCC_OscConfig+0x10e>
 800307c:	4baf      	ldr	r3, [pc, #700]	; (800333c <HAL_RCC_OscConfig+0x314>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d155      	bne.n	8003136 <HAL_RCC_OscConfig+0x10e>
 800308a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800309e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_RCC_OscConfig+0x94>
 80030b6:	4ba1      	ldr	r3, [pc, #644]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	e015      	b.n	80030e8 <HAL_RCC_OscConfig+0xc0>
 80030bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80030d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030d8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030e4:	4b95      	ldr	r3, [pc, #596]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ec:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80030f0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80030f4:	fa92 f2a2 	rbit	r2, r2
 80030f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80030fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0220 	orr.w	r2, r2, #32
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8111 	beq.w	8003340 <HAL_RCC_OscConfig+0x318>
 800311e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003122:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8108 	bne.w	8003340 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f000 bfc6 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x12e>
 8003148:	4b7c      	ldr	r3, [pc, #496]	; (800333c <HAL_RCC_OscConfig+0x314>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a7b      	ldr	r2, [pc, #492]	; (800333c <HAL_RCC_OscConfig+0x314>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e036      	b.n	80031c4 <HAL_RCC_OscConfig+0x19c>
 8003156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x158>
 8003166:	4b75      	ldr	r3, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a74      	ldr	r2, [pc, #464]	; (800333c <HAL_RCC_OscConfig+0x314>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b72      	ldr	r3, [pc, #456]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a71      	ldr	r2, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e021      	b.n	80031c4 <HAL_RCC_OscConfig+0x19c>
 8003180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003184:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x184>
 8003192:	4b6a      	ldr	r3, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a69      	ldr	r2, [pc, #420]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a66      	ldr	r2, [pc, #408]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0x19c>
 80031ac:	4b63      	ldr	r3, [pc, #396]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a62      	ldr	r2, [pc, #392]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b60      	ldr	r3, [pc, #384]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5f      	ldr	r2, [pc, #380]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d059      	beq.n	8003288 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7ff fc66 	bl	8002aa4 <HAL_GetTick>
 80031d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031de:	f7ff fc61 	bl	8002aa4 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d902      	bls.n	80031f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	f000 bf67 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
 80031f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003208:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <HAL_RCC_OscConfig+0x1fe>
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	e015      	b.n	8003252 <HAL_RCC_OscConfig+0x22a>
 8003226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800323a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800323e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003242:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800324e:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003256:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800325a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800325e:	fa92 f2a2 	rbit	r2, r2
 8003262:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003266:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800326a:	fab2 f282 	clz	r2, r2
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f002 021f 	and.w	r2, r2, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f202 	lsl.w	r2, r1, r2
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0ab      	beq.n	80031de <HAL_RCC_OscConfig+0x1b6>
 8003286:	e05c      	b.n	8003342 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7ff fc0c 	bl	8002aa4 <HAL_GetTick>
 800328c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003292:	f7ff fc07 	bl	8002aa4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d902      	bls.n	80032a8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	f000 bf0d 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
 80032a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80032bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d102      	bne.n	80032da <HAL_RCC_OscConfig+0x2b2>
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCC_OscConfig+0x314>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x2de>
 80032da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80032ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <HAL_RCC_OscConfig+0x314>)
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800330a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800330e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003312:	fa92 f2a2 	rbit	r2, r2
 8003316:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800331a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0220 	orr.w	r2, r2, #32
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1ab      	bne.n	8003292 <HAL_RCC_OscConfig+0x26a>
 800333a:	e002      	b.n	8003342 <HAL_RCC_OscConfig+0x31a>
 800333c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003346:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 817f 	beq.w	8003656 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003358:	4ba7      	ldr	r3, [pc, #668]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00c      	beq.n	800337e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003364:	4ba4      	ldr	r3, [pc, #656]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d173      	bne.n	8003458 <HAL_RCC_OscConfig+0x430>
 8003370:	4ba1      	ldr	r3, [pc, #644]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	d16c      	bne.n	8003458 <HAL_RCC_OscConfig+0x430>
 800337e:	2302      	movs	r3, #2
 8003380:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003390:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d102      	bne.n	80033ae <HAL_RCC_OscConfig+0x386>
 80033a8:	4b93      	ldr	r3, [pc, #588]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	e013      	b.n	80033d6 <HAL_RCC_OscConfig+0x3ae>
 80033ae:	2302      	movs	r3, #2
 80033b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80033c0:	2302      	movs	r3, #2
 80033c2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2202      	movs	r2, #2
 80033d8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80033dc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80033e0:	fa92 f2a2 	rbit	r2, r2
 80033e4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80033e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	f042 0220 	orr.w	r2, r2, #32
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	f002 021f 	and.w	r2, r2, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCC_OscConfig+0x3f6>
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d002      	beq.n	800341e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f000 be52 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	21f8      	movs	r1, #248	; 0xf8
 8003434:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800343c:	fa91 f1a1 	rbit	r1, r1
 8003440:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003444:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003448:	fab1 f181 	clz	r1, r1
 800344c:	b2c9      	uxtb	r1, r1
 800344e:	408b      	lsls	r3, r1
 8003450:	4969      	ldr	r1, [pc, #420]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	e0fe      	b.n	8003656 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8088 	beq.w	800357a <HAL_RCC_OscConfig+0x552>
 800346a:	2301      	movs	r3, #1
 800346c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800347c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800348a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	461a      	mov	r2, r3
 8003492:	2301      	movs	r3, #1
 8003494:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7ff fb05 	bl	8002aa4 <HAL_GetTick>
 800349a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a0:	f7ff fb00 	bl	8002aa4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d902      	bls.n	80034b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	f000 be06 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
 80034b6:	2302      	movs	r3, #2
 80034b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80034c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4be>
 80034e0:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	e013      	b.n	800350e <HAL_RCC_OscConfig+0x4e6>
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80034f8:	2302      	movs	r3, #2
 80034fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80034fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2202      	movs	r2, #2
 8003510:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003514:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003518:	fa92 f2a2 	rbit	r2, r2
 800351c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003520:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f002 021f 	and.w	r2, r2, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0af      	beq.n	80034a0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003540:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	21f8      	movs	r1, #248	; 0xf8
 8003556:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800355e:	fa91 f1a1 	rbit	r1, r1
 8003562:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003566:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800356a:	fab1 f181 	clz	r1, r1
 800356e:	b2c9      	uxtb	r1, r1
 8003570:	408b      	lsls	r3, r1
 8003572:	4921      	ldr	r1, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	e06d      	b.n	8003656 <HAL_RCC_OscConfig+0x62e>
 800357a:	2301      	movs	r3, #1
 800357c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800358c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800359a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	461a      	mov	r2, r3
 80035a2:	2300      	movs	r3, #0
 80035a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7ff fa7d 	bl	8002aa4 <HAL_GetTick>
 80035aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b0:	f7ff fa78 	bl	8002aa4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d902      	bls.n	80035c6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	f000 bd7e 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
 80035c6:	2302      	movs	r3, #2
 80035c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80035d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <HAL_RCC_OscConfig+0x5d4>
 80035f0:	4b01      	ldr	r3, [pc, #4]	; (80035f8 <HAL_RCC_OscConfig+0x5d0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	e016      	b.n	8003624 <HAL_RCC_OscConfig+0x5fc>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	2302      	movs	r3, #2
 80035fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800360e:	2302      	movs	r3, #2
 8003610:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003614:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003620:	4bbf      	ldr	r3, [pc, #764]	; (8003920 <HAL_RCC_OscConfig+0x8f8>)
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	2202      	movs	r2, #2
 8003626:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800362a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003636:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f002 021f 	and.w	r2, r2, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ac      	bne.n	80035b0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800365a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8113 	beq.w	8003892 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800366c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003670:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d07c      	beq.n	8003776 <HAL_RCC_OscConfig+0x74e>
 800367c:	2301      	movs	r3, #1
 800367e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800368e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	4ba2      	ldr	r3, [pc, #648]	; (8003924 <HAL_RCC_OscConfig+0x8fc>)
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	461a      	mov	r2, r3
 80036a2:	2301      	movs	r3, #1
 80036a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7ff f9fd 	bl	8002aa4 <HAL_GetTick>
 80036aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b0:	f7ff f9f8 	bl	8002aa4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d902      	bls.n	80036c6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	f000 bcfe 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036e6:	2202      	movs	r2, #2
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	fa93 f2a3 	rbit	r2, r3
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003706:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800370a:	2202      	movs	r2, #2
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003712:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003720:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003724:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b7e      	ldr	r3, [pc, #504]	; (8003920 <HAL_RCC_OscConfig+0x8f8>)
 8003728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003732:	2102      	movs	r1, #2
 8003734:	6019      	str	r1, [r3, #0]
 8003736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f1a3 	rbit	r1, r3
 8003744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003748:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800374c:	6019      	str	r1, [r3, #0]
  return result;
 800374e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003752:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d09d      	beq.n	80036b0 <HAL_RCC_OscConfig+0x688>
 8003774:	e08d      	b.n	8003892 <HAL_RCC_OscConfig+0x86a>
 8003776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003786:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	fa93 f2a3 	rbit	r2, r3
 8003790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003794:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003798:	601a      	str	r2, [r3, #0]
  return result;
 800379a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_RCC_OscConfig+0x8fc>)
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b8:	f7ff f974 	bl	8002aa4 <HAL_GetTick>
 80037bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c2:	f7ff f96f 	bl	8002aa4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d902      	bls.n	80037d8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	f000 bc75 	b.w	80040c2 <HAL_RCC_OscConfig+0x109a>
 80037d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037e0:	2202      	movs	r2, #2
 80037e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003804:	2202      	movs	r2, #2
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	fa93 f2a3 	rbit	r2, r3
 8003816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800381a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003824:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003828:	2202      	movs	r2, #2
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003842:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCC_OscConfig+0x8f8>)
 8003846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003850:	2102      	movs	r1, #2
 8003852:	6019      	str	r1, [r3, #0]
 8003854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003858:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f1a3 	rbit	r1, r3
 8003862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003866:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800386a:	6019      	str	r1, [r3, #0]
  return result;
 800386c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003870:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d197      	bne.n	80037c2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003896:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 81a5 	beq.w	8003bf2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <HAL_RCC_OscConfig+0x8f8>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_OscConfig+0x8f8>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_RCC_OscConfig+0x8f8>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c4:	61d3      	str	r3, [r2, #28]
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <HAL_RCC_OscConfig+0x8f8>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_OscConfig+0x900>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d121      	bne.n	8003938 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_OscConfig+0x900>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x900>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003900:	f7ff f8d0 	bl	8002aa4 <HAL_GetTick>
 8003904:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e010      	b.n	800392c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7ff f8cb 	bl	8002aa4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d908      	bls.n	800392c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e3d1      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	10908120 	.word	0x10908120
 8003928:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <HAL_RCC_OscConfig+0xb3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0e8      	beq.n	800390a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x92e>
 8003948:	4b87      	ldr	r3, [pc, #540]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a86      	ldr	r2, [pc, #536]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e035      	b.n	80039c2 <HAL_RCC_OscConfig+0x99a>
 8003956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x958>
 8003966:	4b80      	ldr	r3, [pc, #512]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a7f      	ldr	r2, [pc, #508]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6213      	str	r3, [r2, #32]
 8003972:	4b7d      	ldr	r3, [pc, #500]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4a7c      	ldr	r2, [pc, #496]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6213      	str	r3, [r2, #32]
 800397e:	e020      	b.n	80039c2 <HAL_RCC_OscConfig+0x99a>
 8003980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003984:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b05      	cmp	r3, #5
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x982>
 8003990:	4b75      	ldr	r3, [pc, #468]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a74      	ldr	r2, [pc, #464]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	4b72      	ldr	r3, [pc, #456]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4a71      	ldr	r2, [pc, #452]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6213      	str	r3, [r2, #32]
 80039a8:	e00b      	b.n	80039c2 <HAL_RCC_OscConfig+0x99a>
 80039aa:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a6e      	ldr	r2, [pc, #440]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a6b      	ldr	r2, [pc, #428]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8081 	beq.w	8003ad6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7ff f866 	bl	8002aa4 <HAL_GetTick>
 80039d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	e00b      	b.n	80039f6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7ff f861 	bl	8002aa4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e365      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
 80039f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80039fe:	2202      	movs	r2, #2
 8003a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f2a3 	rbit	r2, r3
 8003a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a22:	2202      	movs	r2, #2
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	fa93 f2a3 	rbit	r2, r3
 8003a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a3c:	601a      	str	r2, [r3, #0]
  return result;
 8003a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a42:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	fab3 f383 	clz	r3, r3
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_OscConfig+0xa3a>
 8003a5c:	4b42      	ldr	r3, [pc, #264]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	e013      	b.n	8003a8a <HAL_RCC_OscConfig+0xa62>
 8003a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a66:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	fa93 f2a3 	rbit	r2, r3
 8003a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a80:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a8e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a92:	2102      	movs	r1, #2
 8003a94:	6011      	str	r1, [r2, #0]
 8003a96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a9a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	fa92 f1a2 	rbit	r1, r2
 8003aa4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aa8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003aac:	6011      	str	r1, [r2, #0]
  return result;
 8003aae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ab2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f002 021f 	and.w	r2, r2, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d084      	beq.n	80039de <HAL_RCC_OscConfig+0x9b6>
 8003ad4:	e083      	b.n	8003bde <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe ffe5 	bl	8002aa4 <HAL_GetTick>
 8003ada:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe ffe0 	bl	8002aa4 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e2e4      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
 8003af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b00:	2202      	movs	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b08:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b24:	2202      	movs	r2, #2
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b3e:	601a      	str	r2, [r3, #0]
  return result;
 8003b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b44:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCC_OscConfig+0xb44>
 8003b5e:	4b02      	ldr	r3, [pc, #8]	; (8003b68 <HAL_RCC_OscConfig+0xb40>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	e017      	b.n	8003b94 <HAL_RCC_OscConfig+0xb6c>
 8003b64:	40007000 	.word	0x40007000
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b70:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b74:	2202      	movs	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	fa93 f2a3 	rbit	r2, r3
 8003b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	4bb3      	ldr	r3, [pc, #716]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b98:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	6011      	str	r1, [r2, #0]
 8003ba0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ba4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	fa92 f1a2 	rbit	r1, r2
 8003bae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bb2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003bb6:	6011      	str	r1, [r2, #0]
  return result;
 8003bb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bbc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	fab2 f282 	clz	r2, r2
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	f002 021f 	and.w	r2, r2, #31
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d180      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bde:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4b9e      	ldr	r3, [pc, #632]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	4a9d      	ldr	r2, [pc, #628]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 825e 	beq.w	80040c0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c04:	4b96      	ldr	r3, [pc, #600]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	f000 821f 	beq.w	8004050 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	f040 8170 	bne.w	8003f04 <HAL_RCC_OscConfig+0xedc>
 8003c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c28:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c36:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	fa93 f2a3 	rbit	r2, r3
 8003c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c48:	601a      	str	r2, [r3, #0]
  return result;
 8003c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c52:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	461a      	mov	r2, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe ff1b 	bl	8002aa4 <HAL_GetTick>
 8003c6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c72:	e009      	b.n	8003c88 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe ff16 	bl	8002aa4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e21c      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
 8003c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cac:	601a      	str	r2, [r3, #0]
  return result;
 8003cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d102      	bne.n	8003cd2 <HAL_RCC_OscConfig+0xcaa>
 8003ccc:	4b64      	ldr	r3, [pc, #400]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	e027      	b.n	8003d22 <HAL_RCC_OscConfig+0xcfa>
 8003cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	fa93 f2a3 	rbit	r2, r3
 8003cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	fa93 f2a3 	rbit	r2, r3
 8003d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d18:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d26:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d2e:	6011      	str	r1, [r2, #0]
 8003d30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	fa92 f1a2 	rbit	r1, r2
 8003d3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d42:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d46:	6011      	str	r1, [r2, #0]
  return result;
 8003d48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d4c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	fab2 f282 	clz	r2, r2
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f042 0220 	orr.w	r2, r2, #32
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f002 021f 	and.w	r2, r2, #31
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d182      	bne.n	8003c74 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f023 020f 	bic.w	r2, r3, #15
 8003d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	4937      	ldr	r1, [pc, #220]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003d88:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a19      	ldr	r1, [r3, #32]
 8003d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	492d      	ldr	r1, [pc, #180]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
 8003db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dd4:	601a      	str	r2, [r3, #0]
  return result;
 8003dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dda:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dde:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	461a      	mov	r2, r3
 8003df2:	2301      	movs	r3, #1
 8003df4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fe fe55 	bl	8002aa4 <HAL_GetTick>
 8003dfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dfe:	e009      	b.n	8003e14 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe fe50 	bl	8002aa4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e156      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
 8003e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e26:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	fa93 f2a3 	rbit	r2, r3
 8003e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e34:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e38:	601a      	str	r2, [r3, #0]
  return result;
 8003e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0xe3c>
 8003e58:	4b01      	ldr	r3, [pc, #4]	; (8003e60 <HAL_RCC_OscConfig+0xe38>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e02a      	b.n	8003eb4 <HAL_RCC_OscConfig+0xe8c>
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e76:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	fa93 f2a3 	rbit	r2, r3
 8003e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e9c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	fa93 f2a3 	rbit	r2, r3
 8003ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eaa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	4b86      	ldr	r3, [pc, #536]	; (80040cc <HAL_RCC_OscConfig+0x10a4>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eb8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ec6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	fa92 f1a2 	rbit	r1, r2
 8003ed0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ed4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003ed8:	6011      	str	r1, [r2, #0]
  return result;
 8003eda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ede:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	fab2 f282 	clz	r2, r2
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f042 0220 	orr.w	r2, r2, #32
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f002 021f 	and.w	r2, r2, #31
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f43f af7f 	beq.w	8003e00 <HAL_RCC_OscConfig+0xdd8>
 8003f02:	e0dd      	b.n	80040c0 <HAL_RCC_OscConfig+0x1098>
 8003f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f08:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fa93 f2a3 	rbit	r2, r3
 8003f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f28:	601a      	str	r2, [r3, #0]
  return result;
 8003f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f32:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	461a      	mov	r2, r3
 8003f46:	2300      	movs	r3, #0
 8003f48:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fdab 	bl	8002aa4 <HAL_GetTick>
 8003f4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f52:	e009      	b.n	8003f68 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe fda6 	bl	8002aa4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0ac      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
 8003f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f88:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f8c:	601a      	str	r2, [r3, #0]
  return result;
 8003f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f92:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d102      	bne.n	8003fb2 <HAL_RCC_OscConfig+0xf8a>
 8003fac:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_RCC_OscConfig+0x10a4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	e027      	b.n	8004002 <HAL_RCC_OscConfig+0xfda>
 8003fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	fa93 f2a3 	rbit	r2, r3
 8003fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fdc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	fa93 f2a3 	rbit	r2, r3
 8003ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4b33      	ldr	r3, [pc, #204]	; (80040cc <HAL_RCC_OscConfig+0x10a4>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004006:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800400a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800400e:	6011      	str	r1, [r2, #0]
 8004010:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004014:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	fa92 f1a2 	rbit	r1, r2
 800401e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004022:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004026:	6011      	str	r1, [r2, #0]
  return result;
 8004028:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800402c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	fab2 f282 	clz	r2, r2
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	f042 0220 	orr.w	r2, r2, #32
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f002 021f 	and.w	r2, r2, #31
 8004042:	2101      	movs	r1, #1
 8004044:	fa01 f202 	lsl.w	r2, r1, r2
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d182      	bne.n	8003f54 <HAL_RCC_OscConfig+0xf2c>
 800404e:	e037      	b.n	80040c0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004054:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e02e      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_RCC_OscConfig+0x10a4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_RCC_OscConfig+0x10a4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004074:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004078:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800407c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	429a      	cmp	r2, r3
 800408a:	d117      	bne.n	80040bc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800408c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004090:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004098:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d10b      	bne.n	80040bc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80040a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b09e      	sub	sp, #120	; 0x78
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e162      	b.n	80043ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b90      	ldr	r3, [pc, #576]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d910      	bls.n	8004118 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b8d      	ldr	r3, [pc, #564]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	498b      	ldr	r1, [pc, #556]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b89      	ldr	r3, [pc, #548]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e14a      	b.n	80043ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b82      	ldr	r3, [pc, #520]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	497f      	ldr	r1, [pc, #508]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80dc 	beq.w	80042fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d13c      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xf6>
 800414c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004150:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800415a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415c:	fab3 f383 	clz	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d102      	bne.n	8004176 <HAL_RCC_ClockConfig+0xa6>
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	e00f      	b.n	8004196 <HAL_RCC_ClockConfig+0xc6>
 8004176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	667b      	str	r3, [r7, #100]	; 0x64
 8004184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004188:	663b      	str	r3, [r7, #96]	; 0x60
 800418a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800419a:	65ba      	str	r2, [r7, #88]	; 0x58
 800419c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800419e:	fa92 f2a2 	rbit	r2, r2
 80041a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80041a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041a6:	fab2 f282 	clz	r2, r2
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	f042 0220 	orr.w	r2, r2, #32
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	f002 021f 	and.w	r2, r2, #31
 80041b6:	2101      	movs	r1, #1
 80041b8:	fa01 f202 	lsl.w	r2, r1, r2
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d17b      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0f3      	b.n	80043ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d13c      	bne.n	8004248 <HAL_RCC_ClockConfig+0x178>
 80041ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x128>
 80041f2:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	e00f      	b.n	8004218 <HAL_RCC_ClockConfig+0x148>
 80041f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	647b      	str	r3, [r7, #68]	; 0x44
 8004206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
 800420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800421c:	63ba      	str	r2, [r7, #56]	; 0x38
 800421e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004220:	fa92 f2a2 	rbit	r2, r2
 8004224:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004228:	fab2 f282 	clz	r2, r2
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f042 0220 	orr.w	r2, r2, #32
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	f002 021f 	and.w	r2, r2, #31
 8004238:	2101      	movs	r1, #1
 800423a:	fa01 f202 	lsl.w	r2, r1, r2
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d13a      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0b2      	b.n	80043ae <HAL_RCC_ClockConfig+0x2de>
 8004248:	2302      	movs	r3, #2
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d102      	bne.n	8004270 <HAL_RCC_ClockConfig+0x1a0>
 800426a:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	e00d      	b.n	800428c <HAL_RCC_ClockConfig+0x1bc>
 8004270:	2302      	movs	r3, #2
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
 800427c:	2302      	movs	r3, #2
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	4b29      	ldr	r3, [pc, #164]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2202      	movs	r2, #2
 800428e:	61ba      	str	r2, [r7, #24]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	fa92 f2a2 	rbit	r2, r2
 8004296:	617a      	str	r2, [r7, #20]
  return result;
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	fab2 f282 	clz	r2, r2
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	f042 0220 	orr.w	r2, r2, #32
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	f002 021f 	and.w	r2, r2, #31
 80042aa:	2101      	movs	r1, #1
 80042ac:	fa01 f202 	lsl.w	r2, r1, r2
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e079      	b.n	80043ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	491a      	ldr	r1, [pc, #104]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fe fbea 	bl	8002aa4 <HAL_GetTick>
 80042d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d4:	f7fe fbe6 	bl	8002aa4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e061      	b.n	80043ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_RCC_ClockConfig+0x260>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 020c 	and.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d1eb      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d214      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 0207 	bic.w	r2, r3, #7
 8004312:	4906      	ldr	r1, [pc, #24]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <HAL_RCC_ClockConfig+0x25c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e040      	b.n	80043ae <HAL_RCC_ClockConfig+0x2de>
 800432c:	40022000 	.word	0x40022000
 8004330:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_RCC_ClockConfig+0x2e8>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	491a      	ldr	r1, [pc, #104]	; (80043b8 <HAL_RCC_ClockConfig+0x2e8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <HAL_RCC_ClockConfig+0x2e8>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4912      	ldr	r1, [pc, #72]	; (80043b8 <HAL_RCC_ClockConfig+0x2e8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004372:	f000 f829 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004376:	4601      	mov	r1, r0
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_RCC_ClockConfig+0x2e8>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004380:	22f0      	movs	r2, #240	; 0xf0
 8004382:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	fa92 f2a2 	rbit	r2, r2
 800438a:	60fa      	str	r2, [r7, #12]
  return result;
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	fab2 f282 	clz	r2, r2
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	40d3      	lsrs	r3, r2
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x2ec>)
 8004398:	5cd3      	ldrb	r3, [r2, r3]
 800439a:	fa21 f303 	lsr.w	r3, r1, r3
 800439e:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_RCC_ClockConfig+0x2f0>)
 80043a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_RCC_ClockConfig+0x2f4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fb3a 	bl	8002a20 <HAL_InitTick>
  
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3778      	adds	r7, #120	; 0x78
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	080063ec 	.word	0x080063ec
 80043c0:	20000000 	.word	0x20000000
 80043c4:	20000004 	.word	0x20000004

080043c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b08b      	sub	sp, #44	; 0x2c
 80043cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043e2:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_RCC_GetSysClockFreq+0xc4>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x30>
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x36>
 80043f6:	e03f      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043fa:	623b      	str	r3, [r7, #32]
      break;
 80043fc:	e03f      	b.n	800447e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004404:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004408:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	fa92 f2a2 	rbit	r2, r2
 8004410:	607a      	str	r2, [r7, #4]
  return result;
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	fab2 f282 	clz	r2, r2
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	40d3      	lsrs	r3, r2
 800441c:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <HAL_RCC_GetSysClockFreq+0xcc>)
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	220f      	movs	r2, #15
 800442c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	fa92 f2a2 	rbit	r2, r2
 8004434:	60fa      	str	r2, [r7, #12]
  return result;
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	fab2 f282 	clz	r2, r2
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	40d3      	lsrs	r3, r2
 8004440:	4a15      	ldr	r2, [pc, #84]	; (8004498 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004450:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	fbb2 f2f3 	udiv	r2, r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
 8004460:	e007      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004462:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	fbb2 f2f3 	udiv	r2, r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	623b      	str	r3, [r7, #32]
      break;
 8004476:	e002      	b.n	800447e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetSysClockFreq+0xc8>)
 800447a:	623b      	str	r3, [r7, #32]
      break;
 800447c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447e:	6a3b      	ldr	r3, [r7, #32]
}
 8004480:	4618      	mov	r0, r3
 8004482:	372c      	adds	r7, #44	; 0x2c
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	007a1200 	.word	0x007a1200
 8004494:	08006404 	.word	0x08006404
 8004498:	08006414 	.word	0x08006414

0800449c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <HAL_RCC_GetHCLKFreq+0x10>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	20000000 	.word	0x20000000

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044b6:	f7ff fff1 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044ba:	4601      	mov	r1, r0
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	fa92 f2a2 	rbit	r2, r2
 80044d0:	603a      	str	r2, [r7, #0]
  return result;
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	fab2 f282 	clz	r2, r2
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	40d3      	lsrs	r3, r2
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	080063fc 	.word	0x080063fc

080044f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044fa:	f7ff ffcf 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044fe:	4601      	mov	r1, r0
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004508:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800450c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	fa92 f2a2 	rbit	r2, r2
 8004514:	603a      	str	r2, [r7, #0]
  return result;
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	fab2 f282 	clz	r2, r2
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	40d3      	lsrs	r3, r2
 8004520:	4a04      	ldr	r2, [pc, #16]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	080063fc 	.word	0x080063fc

08004538 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b092      	sub	sp, #72	; 0x48
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004548:	2300      	movs	r3, #0
 800454a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80d4 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455c:	4b4e      	ldr	r3, [pc, #312]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10e      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b4b      	ldr	r3, [pc, #300]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	61d3      	str	r3, [r2, #28]
 8004574:	4b48      	ldr	r3, [pc, #288]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004586:	4b45      	ldr	r3, [pc, #276]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d118      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004592:	4b42      	ldr	r3, [pc, #264]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a41      	ldr	r2, [pc, #260]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459e:	f7fe fa81 	bl	8002aa4 <HAL_GetTick>
 80045a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	e008      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a6:	f7fe fa7d 	bl	8002aa4 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	; 0x64
 80045b2:	d901      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e1d6      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	4b38      	ldr	r3, [pc, #224]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c4:	4b34      	ldr	r3, [pc, #208]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8084 	beq.w	80046de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d07c      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e4:	4b2c      	ldr	r3, [pc, #176]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045fe:	fab3 f383 	clz	r3, r3
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	461a      	mov	r2, r3
 800460e:	2301      	movs	r3, #1
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004636:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d04b      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe fa2d 	bl	8002aa4 <HAL_GetTick>
 800464a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	e00a      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fe fa29 	bl	8002aa4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e180      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004664:	2302      	movs	r3, #2
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	2302      	movs	r3, #2
 8004672:	623b      	str	r3, [r7, #32]
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	61fb      	str	r3, [r7, #28]
  return result;
 800467c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d108      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004692:	4b01      	ldr	r3, [pc, #4]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	e00d      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004698:	40021000 	.word	0x40021000
 800469c:	40007000 	.word	0x40007000
 80046a0:	10908100 	.word	0x10908100
 80046a4:	2302      	movs	r3, #2
 80046a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	4b9a      	ldr	r3, [pc, #616]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	2202      	movs	r2, #2
 80046b6:	613a      	str	r2, [r7, #16]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	fa92 f2a2 	rbit	r2, r2
 80046be:	60fa      	str	r2, [r7, #12]
  return result;
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	fab2 f282 	clz	r2, r2
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f002 021f 	and.w	r2, r2, #31
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f202 	lsl.w	r2, r1, r2
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0b7      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046de:	4b8f      	ldr	r3, [pc, #572]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	498c      	ldr	r1, [pc, #560]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b88      	ldr	r3, [pc, #544]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4a87      	ldr	r2, [pc, #540]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004710:	4b82      	ldr	r3, [pc, #520]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	f023 0203 	bic.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	497f      	ldr	r1, [pc, #508]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800472e:	4b7b      	ldr	r3, [pc, #492]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4978      	ldr	r1, [pc, #480]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800474c:	4b73      	ldr	r3, [pc, #460]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	4970      	ldr	r1, [pc, #448]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476a:	4b6c      	ldr	r3, [pc, #432]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f023 0210 	bic.w	r2, r3, #16
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	4969      	ldr	r1, [pc, #420]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	4961      	ldr	r1, [pc, #388]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a6:	4b5d      	ldr	r3, [pc, #372]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f023 0220 	bic.w	r2, r3, #32
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	495a      	ldr	r1, [pc, #360]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047c4:	4b55      	ldr	r3, [pc, #340]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	4952      	ldr	r1, [pc, #328]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047e2:	4b4e      	ldr	r3, [pc, #312]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	494b      	ldr	r1, [pc, #300]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004800:	4b46      	ldr	r3, [pc, #280]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	4943      	ldr	r1, [pc, #268]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	493c      	ldr	r1, [pc, #240]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800483c:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	4934      	ldr	r1, [pc, #208]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800485a:	4b30      	ldr	r3, [pc, #192]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	492d      	ldr	r1, [pc, #180]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004878:	4b28      	ldr	r3, [pc, #160]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004884:	4925      	ldr	r1, [pc, #148]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004896:	4b21      	ldr	r3, [pc, #132]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	491e      	ldr	r1, [pc, #120]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	4916      	ldr	r1, [pc, #88]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	490f      	ldr	r1, [pc, #60]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	4907      	ldr	r1, [pc, #28]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00c      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800490e:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	e002      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004922:	4913      	ldr	r1, [pc, #76]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004924:	4313      	orrs	r3, r2
 8004926:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	490b      	ldr	r1, [pc, #44]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004942:	4313      	orrs	r3, r2
 8004944:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495e:	4904      	ldr	r1, [pc, #16]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004960:	4313      	orrs	r3, r2
 8004962:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3748      	adds	r7, #72	; 0x48
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000

08004974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004978:	e7fe      	b.n	8004978 <NMI_Handler+0x4>

0800497a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800497e:	e7fe      	b.n	800497e <HardFault_Handler+0x4>

08004980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004984:	e7fe      	b.n	8004984 <MemManage_Handler+0x4>

08004986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800498a:	e7fe      	b.n	800498a <BusFault_Handler+0x4>

0800498c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004990:	e7fe      	b.n	8004990 <UsageFault_Handler+0x4>

08004992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049ba:	f7fe f861 	bl	8002a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80049c8:	4802      	ldr	r0, [pc, #8]	; (80049d4 <ADC1_2_IRQHandler+0x10>)
 80049ca:	f7fb fe63 	bl	8000694 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	200000f0 	.word	0x200000f0

080049d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049dc:	4802      	ldr	r0, [pc, #8]	; (80049e8 <TIM3_IRQHandler+0x10>)
 80049de:	f7fd f97f 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2000002c 	.word	0x2000002c

080049ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80049f0:	4802      	ldr	r0, [pc, #8]	; (80049fc <I2C1_EV_IRQHandler+0x10>)
 80049f2:	f7fd fedd 	bl	80027b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	2000015c 	.word	0x2000015c

08004a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <USART1_IRQHandler+0x10>)
 8004a06:	f000 faaf 	bl	8004f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000264 	.word	0x20000264

08004a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <USART2_IRQHandler+0x10>)
 8004a1a:	f000 faa5 	bl	8004f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200002e8 	.word	0x200002e8

08004a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a30:	f7fc ff68 	bl	8001904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <SPI3_IRQHandler+0x10>)
 8004a3e:	f000 f8e7 	bl	8004c10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	200001d8 	.word	0x200001d8

08004a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0c1      	b.n	8004be2 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6e:	d009      	beq.n	8004a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
 8004a76:	e005      	b.n	8004a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d12a      	bne.n	8004aec <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a52      	ldr	r2, [pc, #328]	; (8004bec <HAL_SPI_Init+0x1a0>)
 8004aa2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <HAL_SPI_Init+0x1a4>)
 8004aa8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a51      	ldr	r2, [pc, #324]	; (8004bf4 <HAL_SPI_Init+0x1a8>)
 8004aae:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a51      	ldr	r2, [pc, #324]	; (8004bf8 <HAL_SPI_Init+0x1ac>)
 8004ab4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a50      	ldr	r2, [pc, #320]	; (8004bfc <HAL_SPI_Init+0x1b0>)
 8004aba:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a50      	ldr	r2, [pc, #320]	; (8004c00 <HAL_SPI_Init+0x1b4>)
 8004ac0:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a4f      	ldr	r2, [pc, #316]	; (8004c04 <HAL_SPI_Init+0x1b8>)
 8004ac6:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a4f      	ldr	r2, [pc, #316]	; (8004c08 <HAL_SPI_Init+0x1bc>)
 8004acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a4b      	ldr	r2, [pc, #300]	; (8004c0c <HAL_SPI_Init+0x1c0>)
 8004ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b0c:	d902      	bls.n	8004b14 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e002      	b.n	8004b1a <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b22:	d007      	beq.n	8004b34 <HAL_SPI_Init+0xe8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	ea42 0103 	orr.w	r1, r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	f003 0204 	and.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bb0:	ea42 0103 	orr.w	r1, r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	08004e11 	.word	0x08004e11
 8004bf0:	08004e23 	.word	0x08004e23
 8004bf4:	08004e35 	.word	0x08004e35
 8004bf8:	08004e47 	.word	0x08004e47
 8004bfc:	08004e59 	.word	0x08004e59
 8004c00:	08004e6b 	.word	0x08004e6b
 8004c04:	08004e7d 	.word	0x08004e7d
 8004c08:	08004e8f 	.word	0x08004e8f
 8004c0c:	08002e3d 	.word	0x08002e3d

08004c10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10f      	bne.n	8004c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
    return;
 8004c52:	e0d8      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_SPI_IRQHandler+0x66>
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	09db      	lsrs	r3, r3, #7
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
    return;
 8004c74:	e0c7      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10c      	bne.n	8004c9c <HAL_SPI_IRQHandler+0x8c>
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80b5 	beq.w	8004e06 <HAL_SPI_IRQHandler+0x1f6>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80ae 	beq.w	8004e06 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d023      	beq.n	8004cfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d011      	beq.n	8004ce6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc6:	f043 0204 	orr.w	r2, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	e00b      	b.n	8004cfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	693b      	ldr	r3, [r7, #16]
        return;
 8004cfc:	e083      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d014      	beq.n	8004d34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	f043 0208 	orr.w	r2, r3, #8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d050      	beq.n	8004e04 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <HAL_SPI_IRQHandler+0x17e>
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d034      	beq.n	8004df8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0203 	bic.w	r2, r2, #3
 8004d9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d011      	beq.n	8004dca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_SPI_IRQHandler+0x1fc>)
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fdf6 	bl	80019a4 <HAL_DMA_Abort_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d017      	beq.n	8004e02 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <HAL_SPI_IRQHandler+0x1fc>)
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fc fde0 	bl	80019a4 <HAL_DMA_Abort_IT>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004df6:	e004      	b.n	8004e02 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e00:	e000      	b.n	8004e04 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8004e02:	bf00      	nop
    return;
 8004e04:	bf00      	nop
  }
}
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	08004ea1 	.word	0x08004ea1

08004e10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e040      	b.n	8004f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fe f816 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2224      	movs	r2, #36	; 0x24
 8004ef8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fb28 	bl	8005560 <UART_SetConfig>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e022      	b.n	8004f60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fcf2 	bl	800590c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fd78 	bl	8005a4e <UART_CheckIdleState>
 8004f5e:	4603      	mov	r3, r0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b0ba      	sub	sp, #232	; 0xe8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f92:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f96:	4013      	ands	r3, r2
 8004f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d115      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00f      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 82a3 	beq.w	800550c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
      }
      return;
 8004fce:	e29d      	b.n	800550c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8117 	beq.w	8005208 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004fea:	4b85      	ldr	r3, [pc, #532]	; (8005200 <HAL_UART_IRQHandler+0x298>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 810a 	beq.w	8005208 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d011      	beq.n	8005024 <HAL_UART_IRQHandler+0xbc>
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2201      	movs	r2, #1
 8005012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <HAL_UART_IRQHandler+0xec>
 8005030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2202      	movs	r2, #2
 8005042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d011      	beq.n	8005084 <HAL_UART_IRQHandler+0x11c>
 8005060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00b      	beq.n	8005084 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2204      	movs	r2, #4
 8005072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507a:	f043 0202 	orr.w	r2, r3, #2
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d017      	beq.n	80050c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800509c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2208      	movs	r2, #8
 80050ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b6:	f043 0208 	orr.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d012      	beq.n	80050f2 <HAL_UART_IRQHandler+0x18a>
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8209 	beq.w	8005510 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00d      	beq.n	8005126 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d005      	beq.n	800514a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800513e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005142:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005146:	2b00      	cmp	r3, #0
 8005148:	d04f      	beq.n	80051ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fd8c 	bl	8005c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	d141      	bne.n	80051e2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3308      	adds	r3, #8
 8005186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800518a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800518e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1d9      	bne.n	800515e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d013      	beq.n	80051da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_UART_IRQHandler+0x29c>)
 80051b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fc fbf0 	bl	80019a4 <HAL_DMA_Abort_IT>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d017      	beq.n	80051fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	e00f      	b.n	80051fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9ab 	bl	8005536 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e00b      	b.n	80051fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f9a7 	bl	8005536 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	e007      	b.n	80051fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9a3 	bl	8005536 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80051f8:	e18a      	b.n	8005510 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fa:	bf00      	nop
    return;
 80051fc:	e188      	b.n	8005510 <HAL_UART_IRQHandler+0x5a8>
 80051fe:	bf00      	nop
 8005200:	04000120 	.word	0x04000120
 8005204:	08005d2d 	.word	0x08005d2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520c:	2b01      	cmp	r3, #1
 800520e:	f040 8143 	bne.w	8005498 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 813c 	beq.w	8005498 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8135 	beq.w	8005498 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2210      	movs	r2, #16
 8005234:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	f040 80b1 	bne.w	80053a8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005252:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 815c 	beq.w	8005514 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005266:	429a      	cmp	r2, r3
 8005268:	f080 8154 	bcs.w	8005514 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b20      	cmp	r3, #32
 800527e:	f000 8085 	beq.w	800538c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800529a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1da      	bne.n	8005282 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e1      	bne.n	80052cc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800532c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800532e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005332:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800533a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e3      	bne.n	8005308 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800535a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800536e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005370:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800537c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e4      	bne.n	800534c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	4618      	mov	r0, r3
 8005388:	f7fc fad4 	bl	8001934 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005398:	b29b      	uxth	r3, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	b29b      	uxth	r3, r3
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8d1 	bl	8005548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053a6:	e0b5      	b.n	8005514 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a7 	beq.w	8005518 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80053ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80a2 	beq.w	8005518 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053f6:	647b      	str	r3, [r7, #68]	; 0x44
 80053f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e4      	bne.n	80053d4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	623b      	str	r3, [r7, #32]
   return(result);
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800542e:	633a      	str	r2, [r7, #48]	; 0x30
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	60fb      	str	r3, [r7, #12]
   return(result);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 0310 	bic.w	r3, r3, #16
 8005468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	617b      	str	r3, [r7, #20]
   return(result);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e4      	bne.n	8005454 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800548a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f859 	bl	8005548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005496:	e03f      	b.n	8005518 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00e      	beq.n	80054c2 <HAL_UART_IRQHandler+0x55a>
 80054a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc76 	bl	8005dac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054c0:	e02d      	b.n	800551e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00e      	beq.n	80054ec <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01c      	beq.n	800551c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
    }
    return;
 80054ea:	e017      	b.n	800551c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d012      	beq.n	800551e <HAL_UART_IRQHandler+0x5b6>
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00c      	beq.n	800551e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fc27 	bl	8005d58 <UART_EndTransmit_IT>
    return;
 800550a:	e008      	b.n	800551e <HAL_UART_IRQHandler+0x5b6>
      return;
 800550c:	bf00      	nop
 800550e:	e006      	b.n	800551e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005510:	bf00      	nop
 8005512:	e004      	b.n	800551e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005514:	bf00      	nop
 8005516:	e002      	b.n	800551e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005518:	bf00      	nop
 800551a:	e000      	b.n	800551e <HAL_UART_IRQHandler+0x5b6>
    return;
 800551c:	bf00      	nop
  }

}
 800551e:	37e8      	adds	r7, #232	; 0xe8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr
	...

08005560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b92      	ldr	r3, [pc, #584]	; (80057d4 <UART_SetConfig+0x274>)
 800558c:	4013      	ands	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	430b      	orrs	r3, r1
 8005596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a80      	ldr	r2, [pc, #512]	; (80057d8 <UART_SetConfig+0x278>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d120      	bne.n	800561e <UART_SetConfig+0xbe>
 80055dc:	4b7f      	ldr	r3, [pc, #508]	; (80057dc <UART_SetConfig+0x27c>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d817      	bhi.n	8005618 <UART_SetConfig+0xb8>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x90>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005601 	.word	0x08005601
 80055f4:	0800560d 	.word	0x0800560d
 80055f8:	08005613 	.word	0x08005613
 80055fc:	08005607 	.word	0x08005607
 8005600:	2301      	movs	r3, #1
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e0b5      	b.n	8005772 <UART_SetConfig+0x212>
 8005606:	2302      	movs	r3, #2
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e0b2      	b.n	8005772 <UART_SetConfig+0x212>
 800560c:	2304      	movs	r3, #4
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e0af      	b.n	8005772 <UART_SetConfig+0x212>
 8005612:	2308      	movs	r3, #8
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e0ac      	b.n	8005772 <UART_SetConfig+0x212>
 8005618:	2310      	movs	r3, #16
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e0a9      	b.n	8005772 <UART_SetConfig+0x212>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6f      	ldr	r2, [pc, #444]	; (80057e0 <UART_SetConfig+0x280>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d124      	bne.n	8005672 <UART_SetConfig+0x112>
 8005628:	4b6c      	ldr	r3, [pc, #432]	; (80057dc <UART_SetConfig+0x27c>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005630:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005634:	d011      	beq.n	800565a <UART_SetConfig+0xfa>
 8005636:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800563a:	d817      	bhi.n	800566c <UART_SetConfig+0x10c>
 800563c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005640:	d011      	beq.n	8005666 <UART_SetConfig+0x106>
 8005642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005646:	d811      	bhi.n	800566c <UART_SetConfig+0x10c>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <UART_SetConfig+0xf4>
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005650:	d006      	beq.n	8005660 <UART_SetConfig+0x100>
 8005652:	e00b      	b.n	800566c <UART_SetConfig+0x10c>
 8005654:	2300      	movs	r3, #0
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e08b      	b.n	8005772 <UART_SetConfig+0x212>
 800565a:	2302      	movs	r3, #2
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e088      	b.n	8005772 <UART_SetConfig+0x212>
 8005660:	2304      	movs	r3, #4
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e085      	b.n	8005772 <UART_SetConfig+0x212>
 8005666:	2308      	movs	r3, #8
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e082      	b.n	8005772 <UART_SetConfig+0x212>
 800566c:	2310      	movs	r3, #16
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e07f      	b.n	8005772 <UART_SetConfig+0x212>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a5b      	ldr	r2, [pc, #364]	; (80057e4 <UART_SetConfig+0x284>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d124      	bne.n	80056c6 <UART_SetConfig+0x166>
 800567c:	4b57      	ldr	r3, [pc, #348]	; (80057dc <UART_SetConfig+0x27c>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005684:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005688:	d011      	beq.n	80056ae <UART_SetConfig+0x14e>
 800568a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800568e:	d817      	bhi.n	80056c0 <UART_SetConfig+0x160>
 8005690:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005694:	d011      	beq.n	80056ba <UART_SetConfig+0x15a>
 8005696:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800569a:	d811      	bhi.n	80056c0 <UART_SetConfig+0x160>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <UART_SetConfig+0x148>
 80056a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a4:	d006      	beq.n	80056b4 <UART_SetConfig+0x154>
 80056a6:	e00b      	b.n	80056c0 <UART_SetConfig+0x160>
 80056a8:	2300      	movs	r3, #0
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e061      	b.n	8005772 <UART_SetConfig+0x212>
 80056ae:	2302      	movs	r3, #2
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e05e      	b.n	8005772 <UART_SetConfig+0x212>
 80056b4:	2304      	movs	r3, #4
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e05b      	b.n	8005772 <UART_SetConfig+0x212>
 80056ba:	2308      	movs	r3, #8
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e058      	b.n	8005772 <UART_SetConfig+0x212>
 80056c0:	2310      	movs	r3, #16
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e055      	b.n	8005772 <UART_SetConfig+0x212>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a47      	ldr	r2, [pc, #284]	; (80057e8 <UART_SetConfig+0x288>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d124      	bne.n	800571a <UART_SetConfig+0x1ba>
 80056d0:	4b42      	ldr	r3, [pc, #264]	; (80057dc <UART_SetConfig+0x27c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80056d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056dc:	d011      	beq.n	8005702 <UART_SetConfig+0x1a2>
 80056de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056e2:	d817      	bhi.n	8005714 <UART_SetConfig+0x1b4>
 80056e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056e8:	d011      	beq.n	800570e <UART_SetConfig+0x1ae>
 80056ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ee:	d811      	bhi.n	8005714 <UART_SetConfig+0x1b4>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <UART_SetConfig+0x19c>
 80056f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056f8:	d006      	beq.n	8005708 <UART_SetConfig+0x1a8>
 80056fa:	e00b      	b.n	8005714 <UART_SetConfig+0x1b4>
 80056fc:	2300      	movs	r3, #0
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e037      	b.n	8005772 <UART_SetConfig+0x212>
 8005702:	2302      	movs	r3, #2
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e034      	b.n	8005772 <UART_SetConfig+0x212>
 8005708:	2304      	movs	r3, #4
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e031      	b.n	8005772 <UART_SetConfig+0x212>
 800570e:	2308      	movs	r3, #8
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e02e      	b.n	8005772 <UART_SetConfig+0x212>
 8005714:	2310      	movs	r3, #16
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e02b      	b.n	8005772 <UART_SetConfig+0x212>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a33      	ldr	r2, [pc, #204]	; (80057ec <UART_SetConfig+0x28c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d124      	bne.n	800576e <UART_SetConfig+0x20e>
 8005724:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <UART_SetConfig+0x27c>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800572c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005730:	d011      	beq.n	8005756 <UART_SetConfig+0x1f6>
 8005732:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005736:	d817      	bhi.n	8005768 <UART_SetConfig+0x208>
 8005738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800573c:	d011      	beq.n	8005762 <UART_SetConfig+0x202>
 800573e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005742:	d811      	bhi.n	8005768 <UART_SetConfig+0x208>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <UART_SetConfig+0x1f0>
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d006      	beq.n	800575c <UART_SetConfig+0x1fc>
 800574e:	e00b      	b.n	8005768 <UART_SetConfig+0x208>
 8005750:	2300      	movs	r3, #0
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e00d      	b.n	8005772 <UART_SetConfig+0x212>
 8005756:	2302      	movs	r3, #2
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	e00a      	b.n	8005772 <UART_SetConfig+0x212>
 800575c:	2304      	movs	r3, #4
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e007      	b.n	8005772 <UART_SetConfig+0x212>
 8005762:	2308      	movs	r3, #8
 8005764:	77fb      	strb	r3, [r7, #31]
 8005766:	e004      	b.n	8005772 <UART_SetConfig+0x212>
 8005768:	2310      	movs	r3, #16
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e001      	b.n	8005772 <UART_SetConfig+0x212>
 800576e:	2310      	movs	r3, #16
 8005770:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800577a:	d16c      	bne.n	8005856 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800577c:	7ffb      	ldrb	r3, [r7, #31]
 800577e:	2b08      	cmp	r3, #8
 8005780:	d838      	bhi.n	80057f4 <UART_SetConfig+0x294>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0x228>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057bd 	.word	0x080057bd
 8005794:	080057f5 	.word	0x080057f5
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057f5 	.word	0x080057f5
 80057a0:	080057f5 	.word	0x080057f5
 80057a4:	080057f5 	.word	0x080057f5
 80057a8:	080057cb 	.word	0x080057cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ac:	f7fe fe80 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 80057b0:	61b8      	str	r0, [r7, #24]
        break;
 80057b2:	e024      	b.n	80057fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b4:	f7fe fe9e 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 80057b8:	61b8      	str	r0, [r7, #24]
        break;
 80057ba:	e020      	b.n	80057fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057bc:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <UART_SetConfig+0x290>)
 80057be:	61bb      	str	r3, [r7, #24]
        break;
 80057c0:	e01d      	b.n	80057fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c2:	f7fe fe01 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 80057c6:	61b8      	str	r0, [r7, #24]
        break;
 80057c8:	e019      	b.n	80057fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ce:	61bb      	str	r3, [r7, #24]
        break;
 80057d0:	e015      	b.n	80057fe <UART_SetConfig+0x29e>
 80057d2:	bf00      	nop
 80057d4:	efff69f3 	.word	0xefff69f3
 80057d8:	40013800 	.word	0x40013800
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40004400 	.word	0x40004400
 80057e4:	40004800 	.word	0x40004800
 80057e8:	40004c00 	.word	0x40004c00
 80057ec:	40005000 	.word	0x40005000
 80057f0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	77bb      	strb	r3, [r7, #30]
        break;
 80057fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d075      	beq.n	80058f0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	005a      	lsls	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	441a      	add	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	b29b      	uxth	r3, r3
 800581a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b0f      	cmp	r3, #15
 8005820:	d916      	bls.n	8005850 <UART_SetConfig+0x2f0>
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005828:	d212      	bcs.n	8005850 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f023 030f 	bic.w	r3, r3, #15
 8005832:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	b29a      	uxth	r2, r3
 8005840:	89fb      	ldrh	r3, [r7, #14]
 8005842:	4313      	orrs	r3, r2
 8005844:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	89fa      	ldrh	r2, [r7, #14]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	e04f      	b.n	80058f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	77bb      	strb	r3, [r7, #30]
 8005854:	e04c      	b.n	80058f0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005856:	7ffb      	ldrb	r3, [r7, #31]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d828      	bhi.n	80058ae <UART_SetConfig+0x34e>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x304>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	080058af 	.word	0x080058af
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058af 	.word	0x080058af
 800587c:	080058af 	.word	0x080058af
 8005880:	080058af 	.word	0x080058af
 8005884:	080058a7 	.word	0x080058a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe fe12 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 800588c:	61b8      	str	r0, [r7, #24]
        break;
 800588e:	e013      	b.n	80058b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe fe30 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 8005894:	61b8      	str	r0, [r7, #24]
        break;
 8005896:	e00f      	b.n	80058b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005898:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <UART_SetConfig+0x3a8>)
 800589a:	61bb      	str	r3, [r7, #24]
        break;
 800589c:	e00c      	b.n	80058b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589e:	f7fe fd93 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 80058a2:	61b8      	str	r0, [r7, #24]
        break;
 80058a4:	e008      	b.n	80058b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058aa:	61bb      	str	r3, [r7, #24]
        break;
 80058ac:	e004      	b.n	80058b8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	77bb      	strb	r3, [r7, #30]
        break;
 80058b6:	bf00      	nop
    }

    if (pclk != 0U)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085a      	lsrs	r2, r3, #1
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	441a      	add	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b0f      	cmp	r3, #15
 80058d8:	d908      	bls.n	80058ec <UART_SetConfig+0x38c>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e0:	d204      	bcs.n	80058ec <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	e001      	b.n	80058f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	007a1200 	.word	0x007a1200

0800590c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0a:	d10a      	bne.n	8005a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af02      	add	r7, sp, #8
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a5e:	f7fd f821 	bl	8002aa4 <HAL_GetTick>
 8005a62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d10e      	bne.n	8005a90 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f82d 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e023      	b.n	8005ad8 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d10e      	bne.n	8005abc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f817 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e00d      	b.n	8005ad8 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b09c      	sub	sp, #112	; 0x70
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af0:	e0a5      	b.n	8005c3e <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	f000 80a1 	beq.w	8005c3e <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afc:	f7fc ffd2 	bl	8002aa4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d13e      	bne.n	8005b90 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b26:	667b      	str	r3, [r7, #100]	; 0x64
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b32:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b64:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e5      	bne.n	8005b44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e067      	b.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d04f      	beq.n	8005c3e <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bac:	d147      	bne.n	8005c3e <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e6      	bne.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c0a:	623a      	str	r2, [r7, #32]
 8005c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e010      	b.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	bf0c      	ite	eq
 8005c4e:	2301      	moveq	r3, #1
 8005c50:	2300      	movne	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	f43f af4a 	beq.w	8005af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3770      	adds	r7, #112	; 0x70
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b095      	sub	sp, #84	; 0x54
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e6      	bne.n	8005c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e5      	bne.n	8005ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d118      	bne.n	8005d10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6979      	ldr	r1, [r7, #20]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e6      	bne.n	8005cde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005d22:	bf00      	nop
 8005d24:	3754      	adds	r7, #84	; 0x54
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff fbf3 	bl	8005536 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e6      	bne.n	8005d60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fbc0 	bl	8005524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da4:	bf00      	nop
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr

08005dbe <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 8005dc2:	f000 f812 	bl	8005dea <SystemClock_Config>
	MX_GPIO_Init();
 8005dc6:	f000 f9c3 	bl	8006150 <MX_GPIO_Init>
	MX_ADC1_Init();
 8005dca:	f000 f873 	bl	8005eb4 <MX_ADC1_Init>
	MX_I2C1_Init();
 8005dce:	f000 f8e1 	bl	8005f94 <MX_I2C1_Init>
	MX_SPI3_Init();
 8005dd2:	f000 f91f 	bl	8006014 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8005dd6:	f000 f95b 	bl	8006090 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8005dda:	f000 f989 	bl	80060f0 <MX_USART2_UART_Init>
	Gpt_Init();
 8005dde:	f7fb fe1f 	bl	8001a20 <Gpt_Init>

	/* Init system services */
	Tm_Init();
 8005de2:	f000 fa67 	bl	80062b4 <Tm_Init>
}
 8005de6:	bf00      	nop
 8005de8:	bd80      	pop	{r7, pc}

08005dea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b0a6      	sub	sp, #152	; 0x98
 8005dee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005df4:	2228      	movs	r2, #40	; 0x28
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fae3 	bl	80063c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005dfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	609a      	str	r2, [r3, #8]
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	2258      	movs	r2, #88	; 0x58
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fad5 	bl	80063c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e22:	2310      	movs	r3, #16
 8005e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005e36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fd f8ed 	bl	8003028 <HAL_RCC_OscConfig>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8005e54:	f000 f9de 	bl	8006214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e58:	230f      	movs	r3, #15
 8005e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e60:	2300      	movs	r3, #0
 8005e62:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e6e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e72:	2102      	movs	r1, #2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe f92b 	bl	80040d0 <HAL_RCC_ClockConfig>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005e80:	f000 f9c8 	bl	8006214 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8005e84:	23a3      	movs	r3, #163	; 0xa3
 8005e86:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8005e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8005e96:	2310      	movs	r3, #16
 8005e98:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fb4b 	bl	8004538 <HAL_RCCEx_PeriphCLKConfig>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005ea8:	f000 f9b4 	bl	8006214 <Error_Handler>
  }
}
 8005eac:	bf00      	nop
 8005eae:	3798      	adds	r7, #152	; 0x98
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	; 0x28
 8005eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005eba:	f107 031c 	add.w	r3, r7, #28
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
 8005ec4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	609a      	str	r2, [r3, #8]
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	611a      	str	r2, [r3, #16]
 8005ed4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005ed6:	4b2e      	ldr	r3, [pc, #184]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005ed8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005edc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005ede:	4b2c      	ldr	r3, [pc, #176]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ee4:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ef6:	4b26      	ldr	r3, [pc, #152]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005efe:	4b24      	ldr	r3, [pc, #144]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f04:	4b22      	ldr	r3, [pc, #136]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f0a:	4b21      	ldr	r3, [pc, #132]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005f10:	4b1f      	ldr	r3, [pc, #124]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005f16:	4b1e      	ldr	r3, [pc, #120]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f20:	2204      	movs	r2, #4
 8005f22:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005f24:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005f2a:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f30:	4817      	ldr	r0, [pc, #92]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f32:	f7fa f983 	bl	800023c <HAL_ADC_Init>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005f3c:	f000 f96a 	bl	8006214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005f44:	f107 031c 	add.w	r3, r7, #28
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4811      	ldr	r0, [pc, #68]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f4c:	f7fb f9ca 	bl	80012e4 <HAL_ADCEx_MultiModeConfigChannel>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8005f56:	f000 f95d 	bl	8006214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f5a:	2306      	movs	r3, #6
 8005f5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4806      	ldr	r0, [pc, #24]	; (8005f90 <MX_ADC1_Init+0xdc>)
 8005f78:	f7fa fec4 	bl	8000d04 <HAL_ADC_ConfigChannel>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8005f82:	f000 f947 	bl	8006214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005f86:	bf00      	nop
 8005f88:	3728      	adds	r7, #40	; 0x28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200000f0 	.word	0x200000f0

08005f94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <MX_I2C1_Init+0x74>)
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	; (800600c <MX_I2C1_Init+0x78>)
 8005f9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8005f9e:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <MX_I2C1_Init+0x7c>)
 8005fa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005fa4:	4b18      	ldr	r3, [pc, #96]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005faa:	4b17      	ldr	r3, [pc, #92]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fb0:	4b15      	ldr	r3, [pc, #84]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005fb6:	4b14      	ldr	r3, [pc, #80]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005fbc:	4b12      	ldr	r3, [pc, #72]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fce:	480e      	ldr	r0, [pc, #56]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fd0:	f7fc fb22 	bl	8002618 <HAL_I2C_Init>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005fda:	f000 f91b 	bl	8006214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4809      	ldr	r0, [pc, #36]	; (8006008 <MX_I2C1_Init+0x74>)
 8005fe2:	f7fc fc5d 	bl	80028a0 <HAL_I2CEx_ConfigAnalogFilter>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005fec:	f000 f912 	bl	8006214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4805      	ldr	r0, [pc, #20]	; (8006008 <MX_I2C1_Init+0x74>)
 8005ff4:	f7fc fc9e 	bl	8002934 <HAL_I2CEx_ConfigDigitalFilter>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005ffe:	f000 f909 	bl	8006214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006002:	bf00      	nop
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2000015c 	.word	0x2000015c
 800600c:	40005400 	.word	0x40005400
 8006010:	00702681 	.word	0x00702681

08006014 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <MX_SPI3_Init+0x74>)
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <MX_SPI3_Init+0x78>)
 800601c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800601e:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <MX_SPI3_Init+0x74>)
 8006020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006024:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <MX_SPI3_Init+0x74>)
 8006028:	2200      	movs	r2, #0
 800602a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800602c:	4b16      	ldr	r3, [pc, #88]	; (8006088 <MX_SPI3_Init+0x74>)
 800602e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006032:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <MX_SPI3_Init+0x74>)
 8006036:	2200      	movs	r2, #0
 8006038:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800603a:	4b13      	ldr	r3, [pc, #76]	; (8006088 <MX_SPI3_Init+0x74>)
 800603c:	2200      	movs	r2, #0
 800603e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <MX_SPI3_Init+0x74>)
 8006042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006046:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <MX_SPI3_Init+0x74>)
 800604a:	2200      	movs	r2, #0
 800604c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <MX_SPI3_Init+0x74>)
 8006050:	2200      	movs	r2, #0
 8006052:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <MX_SPI3_Init+0x74>)
 8006056:	2200      	movs	r2, #0
 8006058:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <MX_SPI3_Init+0x74>)
 800605c:	2200      	movs	r2, #0
 800605e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <MX_SPI3_Init+0x74>)
 8006062:	2207      	movs	r2, #7
 8006064:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006066:	4b08      	ldr	r3, [pc, #32]	; (8006088 <MX_SPI3_Init+0x74>)
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <MX_SPI3_Init+0x74>)
 800606e:	2208      	movs	r2, #8
 8006070:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006072:	4805      	ldr	r0, [pc, #20]	; (8006088 <MX_SPI3_Init+0x74>)
 8006074:	f7fe fcea 	bl	8004a4c <HAL_SPI_Init>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800607e:	f000 f8c9 	bl	8006214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200001d8 	.word	0x200001d8
 800608c:	40003c00 	.word	0x40003c00

08006090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006094:	4b14      	ldr	r3, [pc, #80]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 8006096:	4a15      	ldr	r2, [pc, #84]	; (80060ec <MX_USART1_UART_Init+0x5c>)
 8006098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 800609c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80060a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060a2:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060a8:	4b0f      	ldr	r3, [pc, #60]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060ae:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060b4:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060b6:	220c      	movs	r2, #12
 80060b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060bc:	2200      	movs	r2, #0
 80060be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060c0:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060c6:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060d2:	4805      	ldr	r0, [pc, #20]	; (80060e8 <MX_USART1_UART_Init+0x58>)
 80060d4:	f7fe fefa 	bl	8004ecc <HAL_UART_Init>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80060de:	f000 f899 	bl	8006214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000264 	.word	0x20000264
 80060ec:	40013800 	.word	0x40013800

080060f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80060f4:	4b14      	ldr	r3, [pc, #80]	; (8006148 <MX_USART2_UART_Init+0x58>)
 80060f6:	4a15      	ldr	r2, [pc, #84]	; (800614c <MX_USART2_UART_Init+0x5c>)
 80060f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <MX_USART2_UART_Init+0x58>)
 80060fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <MX_USART2_UART_Init+0x58>)
 8006104:	2200      	movs	r2, #0
 8006106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <MX_USART2_UART_Init+0x58>)
 800610a:	2200      	movs	r2, #0
 800610c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <MX_USART2_UART_Init+0x58>)
 8006110:	2200      	movs	r2, #0
 8006112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <MX_USART2_UART_Init+0x58>)
 8006116:	220c      	movs	r2, #12
 8006118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <MX_USART2_UART_Init+0x58>)
 800611c:	2200      	movs	r2, #0
 800611e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <MX_USART2_UART_Init+0x58>)
 8006122:	2200      	movs	r2, #0
 8006124:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006126:	4b08      	ldr	r3, [pc, #32]	; (8006148 <MX_USART2_UART_Init+0x58>)
 8006128:	2200      	movs	r2, #0
 800612a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <MX_USART2_UART_Init+0x58>)
 800612e:	2200      	movs	r2, #0
 8006130:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006132:	4805      	ldr	r0, [pc, #20]	; (8006148 <MX_USART2_UART_Init+0x58>)
 8006134:	f7fe feca 	bl	8004ecc <HAL_UART_Init>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800613e:	f000 f869 	bl	8006214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200002e8 	.word	0x200002e8
 800614c:	40004400 	.word	0x40004400

08006150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006156:	f107 030c 	add.w	r3, r7, #12
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	609a      	str	r2, [r3, #8]
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006166:	4b29      	ldr	r3, [pc, #164]	; (800620c <MX_GPIO_Init+0xbc>)
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	4a28      	ldr	r2, [pc, #160]	; (800620c <MX_GPIO_Init+0xbc>)
 800616c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006170:	6153      	str	r3, [r2, #20]
 8006172:	4b26      	ldr	r3, [pc, #152]	; (800620c <MX_GPIO_Init+0xbc>)
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800617e:	4b23      	ldr	r3, [pc, #140]	; (800620c <MX_GPIO_Init+0xbc>)
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4a22      	ldr	r2, [pc, #136]	; (800620c <MX_GPIO_Init+0xbc>)
 8006184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006188:	6153      	str	r3, [r2, #20]
 800618a:	4b20      	ldr	r3, [pc, #128]	; (800620c <MX_GPIO_Init+0xbc>)
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <MX_GPIO_Init+0xbc>)
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <MX_GPIO_Init+0xbc>)
 800619c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a0:	6153      	str	r3, [r2, #20]
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <MX_GPIO_Init+0xbc>)
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80061ae:	2200      	movs	r2, #0
 80061b0:	2120      	movs	r1, #32
 80061b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061b6:	f7fb fb75 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80061ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80061c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80061c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	4619      	mov	r1, r3
 80061d0:	480f      	ldr	r0, [pc, #60]	; (8006210 <MX_GPIO_Init+0xc0>)
 80061d2:	f7fb f9dd 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80061d6:	2320      	movs	r3, #32
 80061d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061da:	2301      	movs	r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	4619      	mov	r1, r3
 80061ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061f0:	f7fb f9ce 	bl	8001590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80061f4:	2200      	movs	r2, #0
 80061f6:	2100      	movs	r1, #0
 80061f8:	2028      	movs	r0, #40	; 0x28
 80061fa:	f7fc fd34 	bl	8002c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80061fe:	2028      	movs	r0, #40	; 0x28
 8006200:	f7fc fd4d 	bl	8002c9e <HAL_NVIC_EnableIRQ>

}
 8006204:	bf00      	nop
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40021000 	.word	0x40021000
 8006210:	48000800 	.word	0x48000800

08006214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006218:	b672      	cpsid	i
}
 800621a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800621c:	e7fe      	b.n	800621c <Error_Handler+0x8>

0800621e <EcuM_main>:
#include "EcuM.h"
#include "BswM.h"
#include "Rte_Bsw_Int.h"

int EcuM_main(void)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 8006222:	f7fc fbe7 	bl	80029f4 <HAL_Init>
	BswM_Init();
 8006226:	f7ff fdca 	bl	8005dbe <BswM_Init>

	/* Start Scheduler */
	Os_Scheduler();
 800622a:	f000 f803 	bl	8006234 <Os_Scheduler>

	return 0;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}

08006234 <Os_Scheduler>:
static void Os_Task_10ms(void);
static void Os_Task_20ms(void);
static void Os_Task_500ms(void);

void Os_Scheduler()
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	while(1)
	{
		while(Os_Task_Cnt == tim3_count)
 8006238:	bf00      	nop
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <Os_Scheduler+0x50>)
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <Os_Scheduler+0x54>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d0f9      	beq.n	800623a <Os_Scheduler+0x6>
		{
			/*wait*/
		}

		Os_Task_Cnt = tim3_count;
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <Os_Scheduler+0x54>)
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <Os_Scheduler+0x50>)
 800624c:	701a      	strb	r2, [r3, #0]

		Os_Task_10ms();
 800624e:	f000 f81f 	bl	8006290 <Os_Task_10ms>

		if((Os_Task_Cnt % 2) == 0u)
 8006252:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <Os_Scheduler+0x50>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <Os_Scheduler+0x30>
		{
			Os_Task_20ms();
 8006260:	f000 f81c 	bl	800629c <Os_Task_20ms>
		}

		if((Os_Task_Cnt % 50) == 0u)
 8006264:	4b07      	ldr	r3, [pc, #28]	; (8006284 <Os_Scheduler+0x50>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <Os_Scheduler+0x58>)
 800626a:	fba2 1203 	umull	r1, r2, r2, r3
 800626e:	0912      	lsrs	r2, r2, #4
 8006270:	2132      	movs	r1, #50	; 0x32
 8006272:	fb01 f202 	mul.w	r2, r1, r2
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1dc      	bne.n	8006238 <Os_Scheduler+0x4>
		{
			Os_Task_500ms();
 800627e:	f000 f813 	bl	80062a8 <Os_Task_500ms>
		while(Os_Task_Cnt == tim3_count)
 8006282:	e7d9      	b.n	8006238 <Os_Scheduler+0x4>
 8006284:	2000036c 	.word	0x2000036c
 8006288:	20000029 	.word	0x20000029
 800628c:	51eb851f 	.word	0x51eb851f

08006290 <Os_Task_10ms>:
		}
	}
}

void Os_Task_10ms(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0

}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <Os_Task_20ms>:

void Os_Task_20ms(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
	//Rte_Call_Asw_Main();
}
 80062a0:	bf00      	nop
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <Os_Task_500ms>:

void Os_Task_500ms(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
	Rte_Call_Asw_Main();
 80062ac:	f000 f85f 	bl	800636e <Rte_Call_Asw_Main>
}
 80062b0:	bf00      	nop
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
	Gpt_TIM3_Start_IT();
 80062b8:	f7fb fbbe 	bl	8001a38 <Gpt_TIM3_Start_IT>
}
 80062bc:	bf00      	nop
 80062be:	bd80      	pop	{r7, pc}

080062c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80062c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062c4:	480d      	ldr	r0, [pc, #52]	; (80062fc <LoopForever+0x6>)
  ldr r1, =_edata
 80062c6:	490e      	ldr	r1, [pc, #56]	; (8006300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062c8:	4a0e      	ldr	r2, [pc, #56]	; (8006304 <LoopForever+0xe>)
  movs r3, #0
 80062ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062cc:	e002      	b.n	80062d4 <LoopCopyDataInit>

080062ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062d2:	3304      	adds	r3, #4

080062d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062d8:	d3f9      	bcc.n	80062ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062da:	4a0b      	ldr	r2, [pc, #44]	; (8006308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80062dc:	4c0b      	ldr	r4, [pc, #44]	; (800630c <LoopForever+0x16>)
  movs r3, #0
 80062de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062e0:	e001      	b.n	80062e6 <LoopFillZerobss>

080062e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062e4:	3204      	adds	r2, #4

080062e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062e8:	d3fb      	bcc.n	80062e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80062ea:	f7fc fb7d 	bl	80029e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062ee:	f000 f845 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_main
 80062f2:	f7ff ff94 	bl	800621e <EcuM_main>

080062f6 <LoopForever>:

LoopForever:
    b LoopForever
 80062f6:	e7fe      	b.n	80062f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80062f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80062fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006300:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006304:	0800642c 	.word	0x0800642c
  ldr r2, =_sbss
 8006308:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800630c:	20000370 	.word	0x20000370

08006310 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006310:	e7fe      	b.n	8006310 <ADC3_IRQHandler>
	...

08006314 <Rte_Trigger_Bsw_Int_ButtonEvent>:
#include "LED.h"

uint8_t ButtonState = 0u;

void Rte_Trigger_Bsw_Int_ButtonEvent(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
	/* Notify apps */
	if(ButtonState == 0u)
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <Rte_Trigger_Bsw_Int_ButtonEvent+0x24>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <Rte_Trigger_Bsw_Int_ButtonEvent+0x14>
	{
		ButtonState = 1u;
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <Rte_Trigger_Bsw_Int_ButtonEvent+0x24>)
 8006322:	2201      	movs	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		ButtonState = 0u;
	}
}
 8006326:	e002      	b.n	800632e <Rte_Trigger_Bsw_Int_ButtonEvent+0x1a>
		ButtonState = 0u;
 8006328:	4b03      	ldr	r3, [pc, #12]	; (8006338 <Rte_Trigger_Bsw_Int_ButtonEvent+0x24>)
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
}
 800632e:	bf00      	nop
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	2000036d 	.word	0x2000036d

0800633c <Rte_Read_ButtonState>:

void Rte_Read_ButtonState(uint8_t *state)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	*state = ButtonState;
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <Rte_Read_ButtonState+0x1c>)
 8006346:	781a      	ldrb	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	701a      	strb	r2, [r3, #0]
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	2000036d 	.word	0x2000036d

0800635c <Rte_Switch_LEDState>:

void Rte_Switch_LEDState()
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8006360:	2120      	movs	r1, #32
 8006362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006366:	f7fb fab4 	bl	80018d2 <HAL_GPIO_TogglePin>
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}

0800636e <Rte_Call_Asw_Main>:

void Rte_Call_Asw_Main(void)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	af00      	add	r7, sp, #0
	LED_Main();
 8006372:	f7f9 ff2f 	bl	80001d4 <LED_Main>
}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f820 	bl	80063d4 <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08006424 	.word	0x08006424
 80063b8:	08006424 	.word	0x08006424
 80063bc:	08006424 	.word	0x08006424
 80063c0:	08006428 	.word	0x08006428

080063c4 <memset>:
 80063c4:	4402      	add	r2, r0
 80063c6:	4603      	mov	r3, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	f803 1b01 	strb.w	r1, [r3], #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <_init>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr

080063e0 <_fini>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr
