
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d238  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d3d8  0800d3d8  0001d3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4a0  0800d4a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800d4a0  0800d4a0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d4a0  0800d4a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4a0  0800d4a0  0001d4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4a4  0800d4a4  0001d4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00001784  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200017ec  200017ec  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d610  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000445d  00000000  00000000  0003d6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad0  00000000  00000000  00041b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001496  00000000  00000000  00043618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254fb  00000000  00000000  00044aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002da6d  00000000  00000000  00069fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9584  00000000  00000000  00097a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000072ac  00000000  00000000  00170f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00178248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3c0 	.word	0x0800d3c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800d3c0 	.word	0x0800d3c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_frsub>:
 8000a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	e002      	b.n	8000a78 <__addsf3>
 8000a72:	bf00      	nop

08000a74 <__aeabi_fsub>:
 8000a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a78 <__addsf3>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	bf1f      	itttt	ne
 8000a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a80:	ea92 0f03 	teqne	r2, r3
 8000a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8c:	d06a      	beq.n	8000b64 <__addsf3+0xec>
 8000a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a96:	bfc1      	itttt	gt
 8000a98:	18d2      	addgt	r2, r2, r3
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	4048      	eorgt	r0, r1
 8000a9e:	4041      	eorgt	r1, r0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	bf88      	it	hi
 8000aa8:	4770      	bxhi	lr
 8000aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4249      	negne	r1, r1
 8000aca:	ea92 0f03 	teq	r2, r3
 8000ace:	d03f      	beq.n	8000b50 <__addsf3+0xd8>
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad8:	eb10 000c 	adds.w	r0, r0, ip
 8000adc:	f1c3 0320 	rsb	r3, r3, #32
 8000ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__addsf3+0x78>
 8000aea:	4249      	negs	r1, r1
 8000aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af4:	d313      	bcc.n	8000b1e <__addsf3+0xa6>
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d306      	bcc.n	8000b0a <__addsf3+0x92>
 8000afc:	0840      	lsrs	r0, r0, #1
 8000afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b02:	f102 0201 	add.w	r2, r2, #1
 8000b06:	2afe      	cmp	r2, #254	; 0xfe
 8000b08:	d251      	bcs.n	8000bae <__addsf3+0x136>
 8000b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b12:	bf08      	it	eq
 8000b14:	f020 0001 	biceq.w	r0, r0, #1
 8000b18:	ea40 0003 	orr.w	r0, r0, r3
 8000b1c:	4770      	bx	lr
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	eb40 0000 	adc.w	r0, r0, r0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	bf28      	it	cs
 8000b28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b2c:	d2ed      	bcs.n	8000b0a <__addsf3+0x92>
 8000b2e:	fab0 fc80 	clz	ip, r0
 8000b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b36:	ebb2 020c 	subs.w	r2, r2, ip
 8000b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3e:	bfaa      	itet	ge
 8000b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b44:	4252      	neglt	r2, r2
 8000b46:	4318      	orrge	r0, r3
 8000b48:	bfbc      	itt	lt
 8000b4a:	40d0      	lsrlt	r0, r2
 8000b4c:	4318      	orrlt	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	f092 0f00 	teq	r2, #0
 8000b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b58:	bf06      	itte	eq
 8000b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5e:	3201      	addeq	r2, #1
 8000b60:	3b01      	subne	r3, #1
 8000b62:	e7b5      	b.n	8000ad0 <__addsf3+0x58>
 8000b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b6c:	bf18      	it	ne
 8000b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b72:	d021      	beq.n	8000bb8 <__addsf3+0x140>
 8000b74:	ea92 0f03 	teq	r2, r3
 8000b78:	d004      	beq.n	8000b84 <__addsf3+0x10c>
 8000b7a:	f092 0f00 	teq	r2, #0
 8000b7e:	bf08      	it	eq
 8000b80:	4608      	moveq	r0, r1
 8000b82:	4770      	bx	lr
 8000b84:	ea90 0f01 	teq	r0, r1
 8000b88:	bf1c      	itt	ne
 8000b8a:	2000      	movne	r0, #0
 8000b8c:	4770      	bxne	lr
 8000b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b92:	d104      	bne.n	8000b9e <__addsf3+0x126>
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	bf28      	it	cs
 8000b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ba2:	bf3c      	itt	cc
 8000ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bxcc	lr
 8000baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bbc:	bf16      	itet	ne
 8000bbe:	4608      	movne	r0, r1
 8000bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc4:	4601      	movne	r1, r0
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	bf06      	itte	eq
 8000bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bce:	ea90 0f01 	teqeq	r0, r1
 8000bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_ui2f>:
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e004      	b.n	8000be8 <__aeabi_i2f+0x8>
 8000bde:	bf00      	nop

08000be0 <__aeabi_i2f>:
 8000be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	bf48      	it	mi
 8000be6:	4240      	negmi	r0, r0
 8000be8:	ea5f 0c00 	movs.w	ip, r0
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	e01c      	b.n	8000c36 <__aeabi_l2f+0x2a>

08000bfc <__aeabi_ul2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e00a      	b.n	8000c20 <__aeabi_l2f+0x14>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_l2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_l2f+0x14>
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	ea5f 0c01 	movs.w	ip, r1
 8000c24:	bf02      	ittt	eq
 8000c26:	4684      	moveq	ip, r0
 8000c28:	4601      	moveq	r1, r0
 8000c2a:	2000      	moveq	r0, #0
 8000c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c30:	bf08      	it	eq
 8000c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c3a:	fabc f28c 	clz	r2, ip
 8000c3e:	3a08      	subs	r2, #8
 8000c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c44:	db10      	blt.n	8000c68 <__aeabi_l2f+0x5c>
 8000c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c58:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f102 0220 	add.w	r2, r2, #32
 8000c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c78:	fa21 f202 	lsr.w	r2, r1, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_fmul>:
 8000c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c90:	bf1e      	ittt	ne
 8000c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c96:	ea92 0f0c 	teqne	r2, ip
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d06f      	beq.n	8000d80 <__aeabi_fmul+0xf8>
 8000ca0:	441a      	add	r2, r3
 8000ca2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca6:	0240      	lsls	r0, r0, #9
 8000ca8:	bf18      	it	ne
 8000caa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cae:	d01e      	beq.n	8000cee <__aeabi_fmul+0x66>
 8000cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc8:	bf3e      	ittt	cc
 8000cca:	0049      	lslcc	r1, r1, #1
 8000ccc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd0:	005b      	lslcc	r3, r3, #1
 8000cd2:	ea40 0001 	orr.w	r0, r0, r1
 8000cd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cda:	2afd      	cmp	r2, #253	; 0xfd
 8000cdc:	d81d      	bhi.n	8000d1a <__aeabi_fmul+0x92>
 8000cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf6:	bf08      	it	eq
 8000cf8:	0249      	lsleq	r1, r1, #9
 8000cfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	bfc2      	ittt	gt
 8000d06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0e:	4770      	bxgt	lr
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	dc5d      	bgt.n	8000dd8 <__aeabi_fmul+0x150>
 8000d1c:	f112 0f19 	cmn.w	r2, #25
 8000d20:	bfdc      	itt	le
 8000d22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d26:	4770      	bxle	lr
 8000d28:	f1c2 0200 	rsb	r2, r2, #0
 8000d2c:	0041      	lsls	r1, r0, #1
 8000d2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d32:	f1c2 0220 	rsb	r2, r2, #32
 8000d36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3e:	f140 0000 	adc.w	r0, r0, #0
 8000d42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d46:	bf08      	it	eq
 8000d48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4c:	4770      	bx	lr
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0040      	lsleq	r0, r0, #1
 8000d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5e:	3a01      	subeq	r2, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xce>
 8000d62:	ea40 000c 	orr.w	r0, r0, ip
 8000d66:	f093 0f00 	teq	r3, #0
 8000d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0049      	lsleq	r1, r1, #1
 8000d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d76:	3b01      	subeq	r3, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xe6>
 8000d7a:	ea41 010c 	orr.w	r1, r1, ip
 8000d7e:	e78f      	b.n	8000ca0 <__aeabi_fmul+0x18>
 8000d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	bf18      	it	ne
 8000d8a:	ea93 0f0c 	teqne	r3, ip
 8000d8e:	d00a      	beq.n	8000da6 <__aeabi_fmul+0x11e>
 8000d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d94:	bf18      	it	ne
 8000d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	d1d8      	bne.n	8000d4e <__aeabi_fmul+0xc6>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	bf17      	itett	ne
 8000dac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db0:	4608      	moveq	r0, r1
 8000db2:	f091 0f00 	teqne	r1, #0
 8000db6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dba:	d014      	beq.n	8000de6 <__aeabi_fmul+0x15e>
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d101      	bne.n	8000dc6 <__aeabi_fmul+0x13e>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	d10f      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dc6:	ea93 0f0c 	teq	r3, ip
 8000dca:	d103      	bne.n	8000dd4 <__aeabi_fmul+0x14c>
 8000dcc:	024b      	lsls	r3, r1, #9
 8000dce:	bf18      	it	ne
 8000dd0:	4608      	movne	r0, r1
 8000dd2:	d108      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dd4:	ea80 0001 	eor.w	r0, r0, r1
 8000dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bx	lr
 8000de6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fdiv>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d069      	beq.n	8000edc <__aeabi_fdiv+0xec>
 8000e08:	eba2 0203 	sub.w	r2, r2, r3
 8000e0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e16:	d037      	beq.n	8000e88 <__aeabi_fdiv+0x98>
 8000e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	bf38      	it	cc
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e36:	428b      	cmp	r3, r1
 8000e38:	bf24      	itt	cs
 8000e3a:	1a5b      	subcs	r3, r3, r1
 8000e3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e44:	bf24      	itt	cs
 8000e46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e52:	bf24      	itt	cs
 8000e54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e72:	d1e0      	bne.n	8000e36 <__aeabi_fdiv+0x46>
 8000e74:	2afd      	cmp	r2, #253	; 0xfd
 8000e76:	f63f af50 	bhi.w	8000d1a <__aeabi_fmul+0x92>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e80:	bf08      	it	eq
 8000e82:	f020 0001 	biceq.w	r0, r0, #1
 8000e86:	4770      	bx	lr
 8000e88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e90:	327f      	adds	r2, #127	; 0x7f
 8000e92:	bfc2      	ittt	gt
 8000e94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9c:	4770      	bxgt	lr
 8000e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	e737      	b.n	8000d1a <__aeabi_fmul+0x92>
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xc2>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xda>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e795      	b.n	8000e08 <__aeabi_fdiv+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	d108      	bne.n	8000ef8 <__aeabi_fdiv+0x108>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	f47f af7d 	bne.w	8000de6 <__aeabi_fmul+0x15e>
 8000eec:	ea93 0f0c 	teq	r3, ip
 8000ef0:	f47f af70 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e776      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	d104      	bne.n	8000f08 <__aeabi_fdiv+0x118>
 8000efe:	024b      	lsls	r3, r1, #9
 8000f00:	f43f af4c 	beq.w	8000d9c <__aeabi_fmul+0x114>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e76e      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f0c:	bf18      	it	ne
 8000f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	d1ca      	bne.n	8000eaa <__aeabi_fdiv+0xba>
 8000f14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f18:	f47f af5c 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000f1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f20:	f47f af3c 	bne.w	8000d9c <__aeabi_fmul+0x114>
 8000f24:	e75f      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f26:	bf00      	nop

08000f28 <__gesf2>:
 8000f28:	f04f 3cff 	mov.w	ip, #4294967295
 8000f2c:	e006      	b.n	8000f3c <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__lesf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	e002      	b.n	8000f3c <__cmpsf2+0x4>
 8000f36:	bf00      	nop

08000f38 <__cmpsf2>:
 8000f38:	f04f 0c01 	mov.w	ip, #1
 8000f3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f4c:	bf18      	it	ne
 8000f4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f52:	d011      	beq.n	8000f78 <__cmpsf2+0x40>
 8000f54:	b001      	add	sp, #4
 8000f56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f5a:	bf18      	it	ne
 8000f5c:	ea90 0f01 	teqne	r0, r1
 8000f60:	bf58      	it	pl
 8000f62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f66:	bf88      	it	hi
 8000f68:	17c8      	asrhi	r0, r1, #31
 8000f6a:	bf38      	it	cc
 8000f6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f70:	bf18      	it	ne
 8000f72:	f040 0001 	orrne.w	r0, r0, #1
 8000f76:	4770      	bx	lr
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	d102      	bne.n	8000f84 <__cmpsf2+0x4c>
 8000f7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f82:	d105      	bne.n	8000f90 <__cmpsf2+0x58>
 8000f84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f88:	d1e4      	bne.n	8000f54 <__cmpsf2+0x1c>
 8000f8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f8e:	d0e1      	beq.n	8000f54 <__cmpsf2+0x1c>
 8000f90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <__aeabi_cfrcmple>:
 8000f98:	4684      	mov	ip, r0
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	4661      	mov	r1, ip
 8000f9e:	e7ff      	b.n	8000fa0 <__aeabi_cfcmpeq>

08000fa0 <__aeabi_cfcmpeq>:
 8000fa0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fa2:	f7ff ffc9 	bl	8000f38 <__cmpsf2>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf48      	it	mi
 8000faa:	f110 0f00 	cmnmi.w	r0, #0
 8000fae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fb0 <__aeabi_fcmpeq>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff fff4 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fb8:	bf0c      	ite	eq
 8000fba:	2001      	moveq	r0, #1
 8000fbc:	2000      	movne	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmplt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffea 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmple>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffe0 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fe0:	bf94      	ite	ls
 8000fe2:	2001      	movls	r0, #1
 8000fe4:	2000      	movhi	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmpge>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffd2 	bl	8000f98 <__aeabi_cfrcmple>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmpgt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffc8 	bl	8000f98 <__aeabi_cfrcmple>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_f2uiz>:
 8001014:	0042      	lsls	r2, r0, #1
 8001016:	d20e      	bcs.n	8001036 <__aeabi_f2uiz+0x22>
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800101c:	d30b      	bcc.n	8001036 <__aeabi_f2uiz+0x22>
 800101e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d409      	bmi.n	800103c <__aeabi_f2uiz+0x28>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001030:	fa23 f002 	lsr.w	r0, r3, r2
 8001034:	4770      	bx	lr
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4770      	bx	lr
 800103c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001040:	d101      	bne.n	8001046 <__aeabi_f2uiz+0x32>
 8001042:	0242      	lsls	r2, r0, #9
 8001044:	d102      	bne.n	800104c <__aeabi_f2uiz+0x38>
 8001046:	f04f 30ff 	mov.w	r0, #4294967295
 800104a:	4770      	bx	lr
 800104c:	f04f 0000 	mov.w	r0, #0
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <Access_Init+0x14>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000084 	.word	0x20000084

0800106c <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <Brakes_OnAutobrakesEnabled>:
/**
  * @brief	Triggers the actions for Autobrakes enabled state
  * @return	None
  */
static void Brakes_OnAutobrakesEnabled(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Check critical distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Enable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <Brakes_OnAutobrakesEnabled+0x60>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4916      	ldr	r1, [pc, #88]	; (80010dc <Brakes_OnAutobrakesEnabled+0x64>)
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9e 	bl	8000fc4 <__aeabi_fcmplt>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00f      	beq.n	80010ae <Brakes_OnAutobrakesEnabled+0x36>
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b09      	cmp	r3, #9
 8001094:	d90b      	bls.n	80010ae <Brakes_OnAutobrakesEnabled+0x36>
	{
		/* Set Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = TRUE;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <Brakes_OnAutobrakesEnabled+0x6c>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		/* Set Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <Brakes_OnAutobrakesEnabled+0x6c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00b fb96 	bl	800c7d8 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
	}
}
 80010ac:	e012      	b.n	80010d4 <Brakes_OnAutobrakesEnabled+0x5c>
	else if (g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32)
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <Brakes_OnAutobrakesEnabled+0x60>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	490a      	ldr	r1, [pc, #40]	; (80010dc <Brakes_OnAutobrakesEnabled+0x64>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff85 	bl	8000fc4 <__aeabi_fcmplt>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <Brakes_OnAutobrakesEnabled+0x56>
		g_Brakes_Autobrakes_Enable_Cnt_u8++;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	e002      	b.n	80010d4 <Brakes_OnAutobrakesEnabled+0x5c>
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	41f00000 	.word	0x41f00000
 80010e0:	20000094 	.word	0x20000094
 80010e4:	20000092 	.word	0x20000092

080010e8 <Brakes_OnAutobrakesDisabled>:
/**
  * @brief	Triggers the actions for Autobrakes disabled state
  * @return	None
  */
static void Brakes_OnAutobrakesDisabled(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	/* Check Autobrakes disable distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Disable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <Brakes_OnAutobrakesDisabled+0x60>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4916      	ldr	r1, [pc, #88]	; (800114c <Brakes_OnAutobrakesDisabled+0x64>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff84 	bl	8001000 <__aeabi_fcmpgt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00f      	beq.n	800111e <Brakes_OnAutobrakesDisabled+0x36>
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b09      	cmp	r3, #9
 8001104:	d90b      	bls.n	800111e <Brakes_OnAutobrakesDisabled+0x36>
	{
		/* Reset Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = FALSE;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <Brakes_OnAutobrakesDisabled+0x6c>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Brakes_OnAutobrakesDisabled+0x6c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f00b fb5e 	bl	800c7d8 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
	}
}
 800111c:	e012      	b.n	8001144 <Brakes_OnAutobrakesDisabled+0x5c>
	else if(g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32)
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <Brakes_OnAutobrakesDisabled+0x60>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	490a      	ldr	r1, [pc, #40]	; (800114c <Brakes_OnAutobrakesDisabled+0x64>)
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff6b 	bl	8001000 <__aeabi_fcmpgt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <Brakes_OnAutobrakesDisabled+0x56>
		g_Brakes_Autobrakes_Disable_Cnt_u8++;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	e002      	b.n	8001144 <Brakes_OnAutobrakesDisabled+0x5c>
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000008c 	.word	0x2000008c
 800114c:	428c0000 	.word	0x428c0000
 8001150:	20000093 	.word	0x20000093
 8001154:	20000092 	.word	0x20000092

08001158 <Brakes_OnDistance>:

static uint8 Brakes_OnDistance(float32 distance)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 8001160:	4942      	ldr	r1, [pc, #264]	; (800126c <Brakes_OnDistance+0x114>)
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff38 	bl	8000fd8 <__aeabi_fcmple>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <Brakes_OnDistance+0x2e>
 800116e:	4b40      	ldr	r3, [pc, #256]	; (8001270 <Brakes_OnDistance+0x118>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b09      	cmp	r3, #9
 8001174:	d807      	bhi.n	8001186 <Brakes_OnDistance+0x2e>
	{
		g_Informative_Dist_Status_Cnt_u8++;
 8001176:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <Brakes_OnDistance+0x118>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <Brakes_OnDistance+0x118>)
 8001180:	701a      	strb	r2, [r3, #0]
		return 3;
 8001182:	2303      	movs	r3, #3
 8001184:	e06d      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 8001186:	4939      	ldr	r1, [pc, #228]	; (800126c <Brakes_OnDistance+0x114>)
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff25 	bl	8000fd8 <__aeabi_fcmple>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <Brakes_OnDistance+0x54>
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <Brakes_OnDistance+0x118>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b09      	cmp	r3, #9
 800119a:	d907      	bls.n	80011ac <Brakes_OnDistance+0x54>
	{
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <Brakes_OnDistance+0x11c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <Brakes_OnDistance+0x120>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
		return 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	e05a      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 80011ac:	492f      	ldr	r1, [pc, #188]	; (800126c <Brakes_OnDistance+0x114>)
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff26 	bl	8001000 <__aeabi_fcmpgt>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d012      	beq.n	80011e0 <Brakes_OnDistance+0x88>
 80011ba:	4930      	ldr	r1, [pc, #192]	; (800127c <Brakes_OnDistance+0x124>)
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff0b 	bl	8000fd8 <__aeabi_fcmple>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00b      	beq.n	80011e0 <Brakes_OnDistance+0x88>
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d807      	bhi.n	80011e0 <Brakes_OnDistance+0x88>
	{
		g_Warning_Dist_Status_Cnt_u8++;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011da:	701a      	strb	r2, [r3, #0]
		return 3;
 80011dc:	2303      	movs	r3, #3
 80011de:	e040      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 80011e0:	4922      	ldr	r1, [pc, #136]	; (800126c <Brakes_OnDistance+0x114>)
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff0c 	bl	8001000 <__aeabi_fcmpgt>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d012      	beq.n	8001214 <Brakes_OnDistance+0xbc>
 80011ee:	4923      	ldr	r1, [pc, #140]	; (800127c <Brakes_OnDistance+0x124>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fef1 	bl	8000fd8 <__aeabi_fcmple>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <Brakes_OnDistance+0xbc>
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b09      	cmp	r3, #9
 8001202:	d907      	bls.n	8001214 <Brakes_OnDistance+0xbc>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <Brakes_OnDistance+0x118>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <Brakes_OnDistance+0x120>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
		return 1;
 8001210:	2301      	movs	r3, #1
 8001212:	e026      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 8001214:	4919      	ldr	r1, [pc, #100]	; (800127c <Brakes_OnDistance+0x124>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fef2 	bl	8001000 <__aeabi_fcmpgt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <Brakes_OnDistance+0xe2>
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <Brakes_OnDistance+0x120>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b09      	cmp	r3, #9
 8001228:	d807      	bhi.n	800123a <Brakes_OnDistance+0xe2>
	{
		g_Critical_Dist_Status_Cnt_u8++;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <Brakes_OnDistance+0x120>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <Brakes_OnDistance+0x120>)
 8001234:	701a      	strb	r2, [r3, #0]
		return 3;
 8001236:	2303      	movs	r3, #3
 8001238:	e013      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 800123a:	4910      	ldr	r1, [pc, #64]	; (800127c <Brakes_OnDistance+0x124>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fedf 	bl	8001000 <__aeabi_fcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <Brakes_OnDistance+0x108>
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <Brakes_OnDistance+0x120>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b09      	cmp	r3, #9
 800124e:	d907      	bls.n	8001260 <Brakes_OnDistance+0x108>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <Brakes_OnDistance+0x118>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <Brakes_OnDistance+0x11c>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
		return 0;
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else
	{
		return 3;
 8001260:	2303      	movs	r3, #3
	}
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	41f00000 	.word	0x41f00000
 8001270:	200000b9 	.word	0x200000b9
 8001274:	200000ba 	.word	0x200000ba
 8001278:	200000bb 	.word	0x200000bb
 800127c:	42700000 	.word	0x42700000

08001280 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	/* Initialize variables */
	g_Brakes_AN0_Voltage_mV_u16 = 0u;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <Brakes_Init+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	801a      	strh	r2, [r3, #0]
	g_Brakes_AN2_Voltage_mV_u16 = 0u;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <Brakes_Init+0x48>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
	g_Brakes_SW_u8 = 0u;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <Brakes_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
	g_Brakes_Ultrasonic_Distance_cm_f32 = 0.0f;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <Brakes_Init+0x50>)
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
	g_Brakes_Autobrakes_Status_b = FALSE;
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <Brakes_Init+0x54>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <Brakes_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <Brakes_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	//initilalizare cu 0 a noi var
	/* Read Brakes NvM block */
	Rte_Read_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <Brakes_Init+0x60>)
 80012b2:	2001      	movs	r0, #1
 80012b4:	f00b faae 	bl	800c814 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <Brakes_Init+0x64>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000086 	.word	0x20000086
 80012c8:	20000088 	.word	0x20000088
 80012cc:	2000008a 	.word	0x2000008a
 80012d0:	2000008c 	.word	0x2000008c
 80012d4:	20000092 	.word	0x20000092
 80012d8:	20000093 	.word	0x20000093
 80012dc:	20000094 	.word	0x20000094
 80012e0:	20000098 	.word	0x20000098
 80012e4:	20000085 	.word	0x20000085

080012e8 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_Brakes_InitDone_b)
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <Brakes_MainFunction+0x70>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02f      	beq.n	8001354 <Brakes_MainFunction+0x6c>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_ADC_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_mV_u16);
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <Brakes_MainFunction+0x74>)
 80012f6:	f00b fac7 	bl	800c888 <Rte_Read_AN0_Voltage_u16>
		/* Read AN2 analog voltage (mV) */
		Rte_Read_ADC_AN2_Voltage_u16(&g_Brakes_AN2_Voltage_mV_u16);
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <Brakes_MainFunction+0x78>)
 80012fc:	f00b fae8 	bl	800c8d0 <Rte_Read_AN2_Voltage_u16>
		/* Read SWITCH analog voltage (mV) */
		Rte_Switch_Joystick(&g_Brakes_SW_u8);
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <Brakes_MainFunction+0x7c>)
 8001302:	f00b f9f3 	bl	800c6ec <Rte_Read_PC6_Pin_State>
		/* Read distance from ultrasonic sensor */
		Rte_Read_Ultrasonic_Distance_f32(&g_Brakes_Ultrasonic_Distance_cm_f32);
 8001306:	4818      	ldr	r0, [pc, #96]	; (8001368 <Brakes_MainFunction+0x80>)
 8001308:	f00b f9c2 	bl	800c690 <Rte_Read_Cdd_Ultrasonic_Distance_f32>
		/* Check Autobrakes condition */
		if(FALSE == g_Brakes_Autobrakes_Status_b)
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <Brakes_MainFunction+0x84>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <Brakes_MainFunction+0x32>
		{
			/* Autobrakes enabled actions */
			Brakes_OnAutobrakesEnabled();
 8001314:	f7ff feb0 	bl	8001078 <Brakes_OnAutobrakesEnabled>
 8001318:	e001      	b.n	800131e <Brakes_MainFunction+0x36>
		}
		else
		{
			/* Autobrakes disabled actions */
			Brakes_OnAutobrakesDisabled();
 800131a:	f7ff fee5 	bl	80010e8 <Brakes_OnAutobrakesDisabled>
		}
		/* rte write */
		g_Brakes_Ultrasonic_Distance_cm_u16 = (uint16) g_Brakes_Ultrasonic_Distance_cm_f32;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <Brakes_MainFunction+0x80>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe76 	bl	8001014 <__aeabi_f2uiz>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <Brakes_MainFunction+0x88>)
 800132e:	801a      	strh	r2, [r3, #0]
		g_Brakes_CollisionWarning_Status_u8 = Brakes_OnDistance(g_Brakes_Ultrasonic_Distance_cm_u16);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <Brakes_MainFunction+0x88>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fc4f 	bl	8000bd8 <__aeabi_ui2f>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff0b 	bl	8001158 <Brakes_OnDistance>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <Brakes_MainFunction+0x8c>)
 8001348:	701a      	strb	r2, [r3, #0]
		Rte_Write_Brakes_Collission_Status(g_Brakes_CollisionWarning_Status_u8);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <Brakes_MainFunction+0x8c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f00b f9ee 	bl	800c730 <Rte_Write_g_CollisionWarning_Status>
	}
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000085 	.word	0x20000085
 800135c:	20000086 	.word	0x20000086
 8001360:	20000088 	.word	0x20000088
 8001364:	2000008a 	.word	0x2000008a
 8001368:	2000008c 	.word	0x2000008c
 800136c:	20000092 	.word	0x20000092
 8001370:	20000090 	.word	0x20000090
 8001374:	200000b8 	.word	0x200000b8

08001378 <Brakes_Shutdown>:
/**
  * @brief  Shutdown the Brakes module
  * @return None
  */
void Brakes_Shutdown(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	/* Write Brakes NvM block */
	Rte_Write_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 800137c:	4904      	ldr	r1, [pc, #16]	; (8001390 <Brakes_Shutdown+0x18>)
 800137e:	2001      	movs	r0, #1
 8001380:	f00b fa62 	bl	800c848 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_Brakes_InitDone_b = FALSE;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <Brakes_Shutdown+0x1c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000098 	.word	0x20000098
 8001394:	20000085 	.word	0x20000085

08001398 <move_Forward_Remote>:

/* STATIC FUNCTIONS: */

/* Move forward remote control */
void move_Forward_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, uint8 increment)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d13c      	bne.n	8001428 <move_Forward_Remote+0x90>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d138      	bne.n	8001428 <move_Forward_Remote+0x90>
	{
		if(*speed_0 < 100 && *speed_1 < 100)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f993 3000 	ldrsb.w	r3, [r3]
 80013bc:	2b63      	cmp	r3, #99	; 0x63
 80013be:	dc2f      	bgt.n	8001420 <move_Forward_Remote+0x88>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f993 3000 	ldrsb.w	r3, [r3]
 80013c6:	2b63      	cmp	r3, #99	; 0x63
 80013c8:	dc2a      	bgt.n	8001420 <move_Forward_Remote+0x88>
		{
			if(*speed_0 == 0 && *speed_1 == 0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f993 3000 	ldrsb.w	r3, [r3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d116      	bne.n	8001402 <move_Forward_Remote+0x6a>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f993 3000 	ldrsb.w	r3, [r3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d111      	bne.n	8001402 <move_Forward_Remote+0x6a>
			{
				*speed_0 = *speed_0 + 2*increment;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f993 3000 	ldrsb.w	r3, [r3]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	7e3b      	ldrb	r3, [r7, #24]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f993 2000 	ldrsb.w	r2, [r3]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e00e      	b.n	8001420 <move_Forward_Remote+0x88>
			}
			else
			{
				*speed_0 = *speed_0 + increment;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f993 3000 	ldrsb.w	r3, [r3]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	7e3b      	ldrb	r3, [r7, #24]
 800140c:	4413      	add	r3, r2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	b25a      	sxtb	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f993 2000 	ldrsb.w	r2, [r3]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	701a      	strb	r2, [r3, #0]
		}
		else
		{

		}
		*previous_Status = 1;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001426:	e00a      	b.n	800143e <move_Forward_Remote+0xa6>
	else if(*current_Status == 0 && *previous_Status == 1)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <move_Forward_Remote+0xa6>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <move_Forward_Remote+0xa6>
		*previous_Status = 0;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <move_Right_Remote>:

/* Move right remote control */
void move_Right_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, sint8 *speed_Before_Turn)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10c      	bne.n	8001478 <move_Right_Remote+0x30>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <move_Right_Remote+0x30>
	{
		*speed_Before_Turn = *speed_0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f993 2000 	ldrsb.w	r2, [r3]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e029      	b.n	80014cc <move_Right_Remote+0x84>
	}
	else if(*current_Status == 0 && *previous_Status == 1)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d111      	bne.n	80014a4 <move_Right_Remote+0x5c>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10d      	bne.n	80014a4 <move_Right_Remote+0x5c>
	{
		*speed_0 = *speed_Before_Turn;
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f993 2000 	ldrsb.w	r2, [r3]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_Before_Turn;
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f993 2000 	ldrsb.w	r2, [r3]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	701a      	strb	r2, [r3, #0]
		*previous_Status = 0;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e013      	b.n	80014cc <move_Right_Remote+0x84>
	}
	else if(*current_Status == 1 && *previous_Status == 1)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10f      	bne.n	80014cc <move_Right_Remote+0x84>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10b      	bne.n	80014cc <move_Right_Remote+0x84>
	{
		*speed_1 = *speed_Before_Turn;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f993 2000 	ldrsb.w	r2, [r3]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	701a      	strb	r2, [r3, #0]
		*speed_0 = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 80014ca:	e7ff      	b.n	80014cc <move_Right_Remote+0x84>
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <move_Left_Remote>:

/* Move left remote control */
void move_Left_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, sint8 *speed_Before_Turn)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10c      	bne.n	8001506 <move_Left_Remote+0x30>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d108      	bne.n	8001506 <move_Left_Remote+0x30>
	{
		*speed_Before_Turn = *speed_0;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f993 2000 	ldrsb.w	r2, [r3]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	e029      	b.n	800155a <move_Left_Remote+0x84>
	}
	else if(*current_Status == 0 && *previous_Status == 1)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d111      	bne.n	8001532 <move_Left_Remote+0x5c>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10d      	bne.n	8001532 <move_Left_Remote+0x5c>
	{
		*speed_0 = *speed_Before_Turn;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f993 2000 	ldrsb.w	r2, [r3]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_Before_Turn;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f993 2000 	ldrsb.w	r2, [r3]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	701a      	strb	r2, [r3, #0]
		*previous_Status = 0;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e013      	b.n	800155a <move_Left_Remote+0x84>
	}
	else if(*current_Status == 1 && *previous_Status == 1)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10f      	bne.n	800155a <move_Left_Remote+0x84>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10b      	bne.n	800155a <move_Left_Remote+0x84>
	{
		*speed_0 = *speed_Before_Turn;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f993 2000 	ldrsb.w	r2, [r3]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	701a      	strb	r2, [r3, #0]
		*speed_1 = 0;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001558:	e7ff      	b.n	800155a <move_Left_Remote+0x84>
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <move_Backward_Remote>:

/* Move backward remote control */
void move_Backward_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, uint8 decrement)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d13e      	bne.n	80015f8 <move_Backward_Remote+0x94>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13a      	bne.n	80015f8 <move_Backward_Remote+0x94>
	{
		if(*speed_0 >= -90 && *speed_1 >= -90)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f993 3000 	ldrsb.w	r3, [r3]
 8001588:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 800158c:	db30      	blt.n	80015f0 <move_Backward_Remote+0x8c>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f993 3000 	ldrsb.w	r3, [r3]
 8001594:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001598:	db2a      	blt.n	80015f0 <move_Backward_Remote+0x8c>
		{
			if(*speed_0 == 0 && *speed_1 == 0)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f993 3000 	ldrsb.w	r3, [r3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d116      	bne.n	80015d2 <move_Backward_Remote+0x6e>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d111      	bne.n	80015d2 <move_Backward_Remote+0x6e>
			{
				*speed_0 = *speed_0 - 2*decrement;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f993 3000 	ldrsb.w	r3, [r3]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	7e3b      	ldrb	r3, [r7, #24]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f993 2000 	ldrsb.w	r2, [r3]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e00e      	b.n	80015f0 <move_Backward_Remote+0x8c>
			}
			else
			{
				*speed_0 = *speed_0 - decrement;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f993 3000 	ldrsb.w	r3, [r3]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	7e3b      	ldrb	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f993 2000 	ldrsb.w	r2, [r3]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	701a      	strb	r2, [r3, #0]
		}
		else
		{

		}
		*previous_Status = 1;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 80015f6:	e00a      	b.n	800160e <move_Backward_Remote+0xaa>
	else if(*current_Status == 0 && *previous_Status == 1)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <move_Backward_Remote+0xaa>
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <move_Backward_Remote+0xaa>
		*previous_Status = 0;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <mV_To_DutyCycle>:

void mV_To_DutyCycle(uint16 *mV_Value, uint8 *duty_Cylce_Value)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	*duty_Cylce_Value = *mV_Value * 0.030303;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff84 	bl	8000534 <__aeabi_i2d>
 800162c:	a30a      	add	r3, pc, #40	; (adr r3, 8001658 <mV_To_DutyCycle+0x40>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ffe9 	bl	8000608 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff f9f5 	bl	8000a2c <__aeabi_d2uiz>
 8001642:	4603      	mov	r3, r0
 8001644:	b2da      	uxtb	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	e7e1fc09 	.word	0xe7e1fc09
 800165c:	3f9f07bf 	.word	0x3f9f07bf

08001660 <move_From_Joystick>:

/* Move -> joystick */
void move_From_Joystick(uint8 *horizontal_Axis_Duty, uint8 *vertical_Axis_Duty, sint8 *speed_0, sint8 *speed_1)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
	if(*vertical_Axis_Duty < TRESHOLD_FORWARD)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b2c      	cmp	r3, #44	; 0x2c
 8001674:	d81e      	bhi.n	80016b4 <move_From_Joystick+0x54>
	{
		*speed_0 = 100 - (*vertical_Axis_Duty * 2);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800167e:	b2db      	uxtb	r3, r3
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b25a      	sxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f993 2000 	ldrsb.w	r2, [r3]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	701a      	strb	r2, [r3, #0]
		if(*horizontal_Axis_Duty < TRESHOLD_RIGHT)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b2c      	cmp	r3, #44	; 0x2c
 800169a:	d803      	bhi.n	80016a4 <move_From_Joystick+0x44>
		{
			*speed_0 = 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
	else
	{
		*speed_0 = 0;
		*speed_1 = 0;
	}
}
 80016a2:	e030      	b.n	8001706 <move_From_Joystick+0xa6>
		else if(*horizontal_Axis_Duty > TRESHOLD_LEFT)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b41      	cmp	r3, #65	; 0x41
 80016aa:	d92c      	bls.n	8001706 <move_From_Joystick+0xa6>
			*speed_1 = 0;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
}
 80016b2:	e028      	b.n	8001706 <move_From_Joystick+0xa6>
	else if(*vertical_Axis_Duty > TRESHOLD_BACKWARD)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b3c      	cmp	r3, #60	; 0x3c
 80016ba:	d91e      	bls.n	80016fa <move_From_Joystick+0x9a>
		*speed_0 = -(*vertical_Axis_Duty - 50) * 2;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b25a      	sxtb	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f993 2000 	ldrsb.w	r2, [r3]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	701a      	strb	r2, [r3, #0]
		if(*horizontal_Axis_Duty < TRESHOLD_RIGHT)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b2c      	cmp	r3, #44	; 0x2c
 80016e0:	d803      	bhi.n	80016ea <move_From_Joystick+0x8a>
			*speed_0 = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
}
 80016e8:	e00d      	b.n	8001706 <move_From_Joystick+0xa6>
		else if(*horizontal_Axis_Duty > TRESHOLD_LEFT)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b41      	cmp	r3, #65	; 0x41
 80016f0:	d909      	bls.n	8001706 <move_From_Joystick+0xa6>
			*speed_1 = 0;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
}
 80016f8:	e005      	b.n	8001706 <move_From_Joystick+0xa6>
		*speed_0 = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
		*speed_1 = 0;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <set_Speed_And_Direction>:

/* Set speed and direction */
void set_Speed_And_Direction(sint8 *speed_0_s8, sint8 *speed_1_s8, uint8 *speed_0_u8, uint8 *speed_1_u8, uint8 *direction)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
	if(*speed_0_s8 == 0)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f993 3000 	ldrsb.w	r3, [r3]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d135      	bne.n	8001794 <set_Speed_And_Direction+0x84>
	{
		if(*speed_1_s8 == 0)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f993 3000 	ldrsb.w	r3, [r3]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <set_Speed_And_Direction+0x36>
		{
			*speed_0_u8 = 0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001744:	e0b1      	b.n	80018aa <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f993 3000 	ldrsb.w	r3, [r3]
 800174c:	2b00      	cmp	r3, #0
 800174e:	dd0c      	ble.n	800176a <set_Speed_And_Direction+0x5a>
			*speed_0_u8 = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f993 3000 	ldrsb.w	r3, [r3]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
}
 8001768:	e09f      	b.n	80018aa <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f993 3000 	ldrsb.w	r3, [r3]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f280 809a 	bge.w	80018aa <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = 0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f993 3000 	ldrsb.w	r3, [r3]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	425b      	negs	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	e08a      	b.n	80018aa <set_Speed_And_Direction+0x19a>
	else if(*speed_0_s8 > 0)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f993 3000 	ldrsb.w	r3, [r3]
 800179a:	2b00      	cmp	r3, #0
 800179c:	dd3d      	ble.n	800181a <set_Speed_And_Direction+0x10a>
		if(*speed_1_s8 == 0)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f993 3000 	ldrsb.w	r3, [r3]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10c      	bne.n	80017c2 <set_Speed_And_Direction+0xb2>
			*speed_0_u8 = *speed_0_s8;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f993 3000 	ldrsb.w	r3, [r3]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	e073      	b.n	80018aa <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f993 3000 	ldrsb.w	r3, [r3]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	dd0f      	ble.n	80017ec <set_Speed_And_Direction+0xdc>
			*speed_0_u8 = *speed_0_s8;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f993 3000 	ldrsb.w	r3, [r3]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f993 3000 	ldrsb.w	r3, [r3]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
}
 80017ea:	e05e      	b.n	80018aa <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f993 3000 	ldrsb.w	r3, [r3]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da59      	bge.n	80018aa <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = *speed_0_s8;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f993 3000 	ldrsb.w	r3, [r3]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	425b      	negs	r3, r3
 800180c:	b2da      	uxtb	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
}
 8001818:	e047      	b.n	80018aa <set_Speed_And_Direction+0x19a>
	else if(*speed_0_s8 < 0)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f993 3000 	ldrsb.w	r3, [r3]
 8001820:	2b00      	cmp	r3, #0
 8001822:	da42      	bge.n	80018aa <set_Speed_And_Direction+0x19a>
		if(*speed_1_s8 == 0)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f993 3000 	ldrsb.w	r3, [r3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10e      	bne.n	800184c <set_Speed_And_Direction+0x13c>
			*speed_0_u8 = -*speed_0_s8;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f993 3000 	ldrsb.w	r3, [r3]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	425b      	negs	r3, r3
 8001838:	b2da      	uxtb	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	e02e      	b.n	80018aa <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f993 3000 	ldrsb.w	r3, [r3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	dd11      	ble.n	800187a <set_Speed_And_Direction+0x16a>
			*speed_0_u8 = -*speed_0_s8;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f993 3000 	ldrsb.w	r3, [r3]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	425b      	negs	r3, r3
 8001860:	b2da      	uxtb	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f993 3000 	ldrsb.w	r3, [r3]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
}
 8001878:	e017      	b.n	80018aa <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f993 3000 	ldrsb.w	r3, [r3]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da12      	bge.n	80018aa <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = -*speed_0_s8;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f993 3000 	ldrsb.w	r3, [r3]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	425b      	negs	r3, r3
 800188e:	b2da      	uxtb	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f993 3000 	ldrsb.w	r3, [r3]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	425b      	negs	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <Engine_Init+0x14>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200000bc 	.word	0x200000bc

080018cc <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af02      	add	r7, sp, #8
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
 80018d2:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <Engine_MainFunction+0x170>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	f040 80ac 	bne.w	8001a34 <Engine_MainFunction+0x168>
	{
		/* Read adc */
		Rte_Read_Remote_Channel0(&g_Remote_Control_Status_D0_u8);
 80018dc:	4858      	ldr	r0, [pc, #352]	; (8001a40 <Engine_MainFunction+0x174>)
 80018de:	f00b f80b 	bl	800c8f8 <Rte_Read_Remote_D0>
		Rte_Read_Remote_Channel1(&g_Remote_Control_Status_D1_u8);
 80018e2:	4858      	ldr	r0, [pc, #352]	; (8001a44 <Engine_MainFunction+0x178>)
 80018e4:	f00b f81a 	bl	800c91c <Rte_Read_Remote_D1>
		Rte_Read_Remote_Channel2(&g_Remote_Control_Status_D2_u8);
 80018e8:	4857      	ldr	r0, [pc, #348]	; (8001a48 <Engine_MainFunction+0x17c>)
 80018ea:	f00b f829 	bl	800c940 <Rte_Read_Remote_D2>
		Rte_Read_Remote_Channel3(&g_Remote_Control_Status_D3_u8);
 80018ee:	4857      	ldr	r0, [pc, #348]	; (8001a4c <Engine_MainFunction+0x180>)
 80018f0:	f00b f83a 	bl	800c968 <Rte_Read_Remote_D3>

		/* Read Joystick */
		Rte_Engine_Switch_Joystick(&g_Engine_SW_u8);
 80018f4:	4856      	ldr	r0, [pc, #344]	; (8001a50 <Engine_MainFunction+0x184>)
 80018f6:	f00a fef9 	bl	800c6ec <Rte_Read_PC6_Pin_State>
		Rte_Read_ADC_0_Joystick_Voltage_u16(&g_Engine_Joystick_0_Voltage_mV_u16);
 80018fa:	4856      	ldr	r0, [pc, #344]	; (8001a54 <Engine_MainFunction+0x188>)
 80018fc:	f00a ffc4 	bl	800c888 <Rte_Read_AN0_Voltage_u16>
		Rte_Read_ADC_1_Joystick_Voltage_u16(&g_Engine_Joystick_1_Voltage_mV_u16);
 8001900:	4855      	ldr	r0, [pc, #340]	; (8001a58 <Engine_MainFunction+0x18c>)
 8001902:	f00a ffe5 	bl	800c8d0 <Rte_Read_AN2_Voltage_u16>
		mV_To_DutyCycle(&g_Engine_Joystick_0_Voltage_mV_u16, &g_Engine_Joystick_0_Duty_Cycle_u8);
 8001906:	4955      	ldr	r1, [pc, #340]	; (8001a5c <Engine_MainFunction+0x190>)
 8001908:	4852      	ldr	r0, [pc, #328]	; (8001a54 <Engine_MainFunction+0x188>)
 800190a:	f7ff fe85 	bl	8001618 <mV_To_DutyCycle>
		mV_To_DutyCycle(&g_Engine_Joystick_1_Voltage_mV_u16, &g_Engine_Joystick_1_Duty_Cycle_u8);
 800190e:	4954      	ldr	r1, [pc, #336]	; (8001a60 <Engine_MainFunction+0x194>)
 8001910:	4851      	ldr	r0, [pc, #324]	; (8001a58 <Engine_MainFunction+0x18c>)
 8001912:	f7ff fe81 	bl	8001618 <mV_To_DutyCycle>

		/* Read Ultrasonic distance */
		Rte_Read_Ultrasonic(&g_Engine_Ultrasonic_Distance_cm_f32);
 8001916:	4853      	ldr	r0, [pc, #332]	; (8001a64 <Engine_MainFunction+0x198>)
 8001918:	f00a feba 	bl	800c690 <Rte_Read_Cdd_Ultrasonic_Distance_f32>
		g_Engine_Ultrasonic_Distance_cm_u16 = (uint16) g_Engine_Ultrasonic_Distance_cm_f32;
 800191c:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <Engine_MainFunction+0x198>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fb77 	bl	8001014 <__aeabi_f2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <Engine_MainFunction+0x19c>)
 800192c:	801a      	strh	r2, [r3, #0]

		if(g_Engine_SW_u8 == 0 && g_Engine_SW_Previous_State_u8 == 1)
 800192e:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <Engine_MainFunction+0x184>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <Engine_MainFunction+0x86>
 8001936:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <Engine_MainFunction+0x1a0>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d109      	bne.n	8001952 <Engine_MainFunction+0x86>
		{
			g_Switch_CNT_u8++;
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <Engine_MainFunction+0x1a4>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <Engine_MainFunction+0x1a4>)
 8001948:	701a      	strb	r2, [r3, #0]
			g_Engine_SW_Previous_State_u8 = 0;
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <Engine_MainFunction+0x1a0>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e00a      	b.n	8001968 <Engine_MainFunction+0x9c>
		}
		else if(g_Engine_SW_u8 == 1 && g_Engine_SW_Previous_State_u8 == 0)
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <Engine_MainFunction+0x184>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d106      	bne.n	8001968 <Engine_MainFunction+0x9c>
 800195a:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <Engine_MainFunction+0x1a0>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <Engine_MainFunction+0x9c>
		{
			g_Engine_SW_Previous_State_u8 = 1;
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <Engine_MainFunction+0x1a0>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
		else
		{

		}

		if(g_Engine_Ultrasonic_Distance_cm_u16 < Engine_CRITICAL_DISTANCE_CM_F32 && g_Direction_u8)
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <Engine_MainFunction+0x19c>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f937 	bl	8000be0 <__aeabi_i2f>
 8001972:	4603      	mov	r3, r0
 8001974:	493f      	ldr	r1, [pc, #252]	; (8001a74 <Engine_MainFunction+0x1a8>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fb24 	bl	8000fc4 <__aeabi_fcmplt>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00a      	beq.n	8001998 <Engine_MainFunction+0xcc>
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <Engine_MainFunction+0x1ac>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <Engine_MainFunction+0xcc>
		{
			g_Speed_0_s8 = 0;
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <Engine_MainFunction+0x1b0>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
			g_Speed_1_s8 = 0;
 8001990:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <Engine_MainFunction+0x1b4>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e02d      	b.n	80019f4 <Engine_MainFunction+0x128>
		}
		else
		{
			if( g_Switch_CNT_u8 % 2 == 0)
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <Engine_MainFunction+0x1a4>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d120      	bne.n	80019e8 <Engine_MainFunction+0x11c>
			{
				/* Moves from remote control */
				move_Forward_Remote(&g_Remote_Control_Status_D2_u8, &g_Remote_Control_Previous_Status_D2_u8, &g_Speed_0_s8, &g_Speed_1_s8, INCREMENT_SPEED);
 80019a6:	230a      	movs	r3, #10
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <Engine_MainFunction+0x1b4>)
 80019ac:	4a33      	ldr	r2, [pc, #204]	; (8001a7c <Engine_MainFunction+0x1b0>)
 80019ae:	4935      	ldr	r1, [pc, #212]	; (8001a84 <Engine_MainFunction+0x1b8>)
 80019b0:	4825      	ldr	r0, [pc, #148]	; (8001a48 <Engine_MainFunction+0x17c>)
 80019b2:	f7ff fcf1 	bl	8001398 <move_Forward_Remote>
				move_Right_Remote(&g_Remote_Control_Status_D0_u8, &g_Remote_Control_Previous_Status_D0_u8, &g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_Before_s8);
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <Engine_MainFunction+0x1bc>)
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <Engine_MainFunction+0x1b4>)
 80019bc:	4a2f      	ldr	r2, [pc, #188]	; (8001a7c <Engine_MainFunction+0x1b0>)
 80019be:	4933      	ldr	r1, [pc, #204]	; (8001a8c <Engine_MainFunction+0x1c0>)
 80019c0:	481f      	ldr	r0, [pc, #124]	; (8001a40 <Engine_MainFunction+0x174>)
 80019c2:	f7ff fd41 	bl	8001448 <move_Right_Remote>
				move_Left_Remote(&g_Remote_Control_Status_D3_u8, &g_Remote_Control_Previous_Status_D3_u8, &g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_Before_s8);
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <Engine_MainFunction+0x1bc>)
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <Engine_MainFunction+0x1b4>)
 80019cc:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <Engine_MainFunction+0x1b0>)
 80019ce:	4930      	ldr	r1, [pc, #192]	; (8001a90 <Engine_MainFunction+0x1c4>)
 80019d0:	481e      	ldr	r0, [pc, #120]	; (8001a4c <Engine_MainFunction+0x180>)
 80019d2:	f7ff fd80 	bl	80014d6 <move_Left_Remote>
				move_Backward_Remote(&g_Remote_Control_Status_D1_u8, &g_Remote_Control_Previous_Status_D1_u8, &g_Speed_0_s8, &g_Speed_1_s8, DECREMENT_SPEED);
 80019d6:	230a      	movs	r3, #10
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <Engine_MainFunction+0x1b4>)
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <Engine_MainFunction+0x1b0>)
 80019de:	492d      	ldr	r1, [pc, #180]	; (8001a94 <Engine_MainFunction+0x1c8>)
 80019e0:	4818      	ldr	r0, [pc, #96]	; (8001a44 <Engine_MainFunction+0x178>)
 80019e2:	f7ff fdbf 	bl	8001564 <move_Backward_Remote>
 80019e6:	e005      	b.n	80019f4 <Engine_MainFunction+0x128>
			}
			else
			{
				/* Moves from joystick */
				move_From_Joystick(&g_Engine_Joystick_0_Duty_Cycle_u8, &g_Engine_Joystick_1_Duty_Cycle_u8, &g_Speed_0_s8, &g_Speed_1_s8);
 80019e8:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <Engine_MainFunction+0x1b4>)
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <Engine_MainFunction+0x1b0>)
 80019ec:	491c      	ldr	r1, [pc, #112]	; (8001a60 <Engine_MainFunction+0x194>)
 80019ee:	481b      	ldr	r0, [pc, #108]	; (8001a5c <Engine_MainFunction+0x190>)
 80019f0:	f7ff fe36 	bl	8001660 <move_From_Joystick>
			}
		}


		/* Set speed and direction */
		set_Speed_And_Direction(&g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_0_u8, &g_Speed_1_u8, &g_Direction_u8);
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <Engine_MainFunction+0x1ac>)
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <Engine_MainFunction+0x1cc>)
 80019fa:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <Engine_MainFunction+0x1d0>)
 80019fc:	4920      	ldr	r1, [pc, #128]	; (8001a80 <Engine_MainFunction+0x1b4>)
 80019fe:	481f      	ldr	r0, [pc, #124]	; (8001a7c <Engine_MainFunction+0x1b0>)
 8001a00:	f7ff fe86 	bl	8001710 <set_Speed_And_Direction>
        /* Write on DC motor */
		Rte_Speed_DCMotor(DC_MOTOR_ID_0, g_Speed_0_u8);
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <Engine_MainFunction+0x1d0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f00b f812 	bl	800ca34 <Rte_Call_DCMotor_Set_Speed>
		Rte_Speed_DCMotor(DC_MOTOR_ID_1, g_Speed_1_u8);
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <Engine_MainFunction+0x1cc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	2001      	movs	r0, #1
 8001a18:	f00b f80c 	bl	800ca34 <Rte_Call_DCMotor_Set_Speed>
		Rte_Direction_DCMotor(DC_MOTOR_ID_0, g_Direction_u8);
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <Engine_MainFunction+0x1ac>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	2000      	movs	r0, #0
 8001a24:	f00b f818 	bl	800ca58 <Rte_Call_DCMotor_Set_Dir>
		Rte_Direction_DCMotor(DC_MOTOR_ID_1, g_Direction_u8);
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <Engine_MainFunction+0x1ac>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f00b f812 	bl	800ca58 <Rte_Call_DCMotor_Set_Dir>
	}
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200000bc 	.word	0x200000bc
 8001a40:	200000cf 	.word	0x200000cf
 8001a44:	200000d0 	.word	0x200000d0
 8001a48:	200000d1 	.word	0x200000d1
 8001a4c:	200000d2 	.word	0x200000d2
 8001a50:	200000bd 	.word	0x200000bd
 8001a54:	200000be 	.word	0x200000be
 8001a58:	200000c0 	.word	0x200000c0
 8001a5c:	200000c3 	.word	0x200000c3
 8001a60:	200000c4 	.word	0x200000c4
 8001a64:	200000c8 	.word	0x200000c8
 8001a68:	200000cc 	.word	0x200000cc
 8001a6c:	200000ce 	.word	0x200000ce
 8001a70:	200000c2 	.word	0x200000c2
 8001a74:	41f00000 	.word	0x41f00000
 8001a78:	200000dc 	.word	0x200000dc
 8001a7c:	200000d9 	.word	0x200000d9
 8001a80:	200000da 	.word	0x200000da
 8001a84:	200000d5 	.word	0x200000d5
 8001a88:	200000db 	.word	0x200000db
 8001a8c:	200000d3 	.word	0x200000d3
 8001a90:	200000d6 	.word	0x200000d6
 8001a94:	200000d4 	.word	0x200000d4
 8001a98:	200000d8 	.word	0x200000d8
 8001a9c:	200000d7 	.word	0x200000d7

08001aa0 <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE_U16)
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <LED_UpdatePulseDirection+0x30>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001aac:	d302      	bcc.n	8001ab4 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN_U8;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <LED_UpdatePulseDirection+0x34>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE_U16)
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <LED_UpdatePulseDirection+0x30>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d802      	bhi.n	8001ac6 <LED_UpdatePulseDirection+0x26>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <LED_UpdatePulseDirection+0x34>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200000e0 	.word	0x200000e0
 8001ad4:	200000e2 	.word	0x200000e2

08001ad8 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP_U8 == g_LED_Pulse_Direction_u8)
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <LED_UpdatePulseWidth+0x48>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10c      	bne.n	8001afe <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE_U16)
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <LED_UpdatePulseWidth+0x4c>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001aec:	d813      	bhi.n	8001b16 <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 + LED_FADE_PULSE_STEP_U16;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <LED_UpdatePulseWidth+0x4c>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <LED_UpdatePulseWidth+0x4c>)
 8001afa:	801a      	strh	r2, [r3, #0]
 8001afc:	e00b      	b.n	8001b16 <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP_U16)
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <LED_UpdatePulseWidth+0x4c>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b06:	d306      	bcc.n	8001b16 <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 - LED_FADE_PULSE_STEP_U16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <LED_UpdatePulseWidth+0x4c>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <LED_UpdatePulseWidth+0x4c>)
 8001b14:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 8001b16:	f7ff ffc3 	bl	8001aa0 <LED_UpdatePulseDirection>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200000e2 	.word	0x200000e2
 8001b24:	200000e0 	.word	0x200000e0

08001b28 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	g_LED_ButtonState_b = FALSE;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <LED_Init+0x34>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
	g_LED_Pulse_u16 = 0u;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <LED_Init+0x38>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	801a      	strh	r2, [r3, #0]
	g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <LED_Init+0x3c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <LED_Init+0x38>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00a fe58 	bl	800c7f8 <Rte_Cdd_Servo_RawMove>
	/* Read LED NvM block */
	Rte_Read_NvM_LED_Block(g_LED_NvMBlock_a);
 8001b48:	4907      	ldr	r1, [pc, #28]	; (8001b68 <LED_Init+0x40>)
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f00a fe62 	bl	800c814 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <LED_Init+0x44>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200000de 	.word	0x200000de
 8001b60:	200000e0 	.word	0x200000e0
 8001b64:	200000e2 	.word	0x200000e2
 8001b68:	200000e4 	.word	0x200000e4
 8001b6c:	200000dd 	.word	0x200000dd

08001b70 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_LED_InitDone_b)
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <LED_MainFunction+0xa8>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d04b      	beq.n	8001c14 <LED_MainFunction+0xa4>
	{
		/* Rte read the global variable */
		Rte_Read_LED_Collision_Status(&g_LED_CollisionWarning_Status);
 8001b7c:	4827      	ldr	r0, [pc, #156]	; (8001c1c <LED_MainFunction+0xac>)
 8001b7e:	f00a fdc7 	bl	800c710 <Rte_Read_g_CollisionWarning_Status>
		switch(g_LED_CollisionWarning_Status)
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <LED_MainFunction+0xac>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d01a      	beq.n	8001bc0 <LED_MainFunction+0x50>
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	dc22      	bgt.n	8001bd4 <LED_MainFunction+0x64>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <LED_MainFunction+0x28>
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d00a      	beq.n	8001bac <LED_MainFunction+0x3c>
 8001b96:	e01d      	b.n	8001bd4 <LED_MainFunction+0x64>
		{
			case 0:
			{
				Rte_Write_Green_LED_Status(TRUE);                                  /* Green LED  */
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f00a fef7 	bl	800c98c <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f00a ff10 	bl	800c9c4 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f00a ff29 	bl	800c9fc <Rte_Write_PB_15>
			}break;
 8001baa:	e01d      	b.n	8001be8 <LED_MainFunction+0x78>
			case 1:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001bac:	2000      	movs	r0, #0
 8001bae:	f00a feed 	bl	800c98c <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(TRUE);                                 /* Yellow LED */
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f00a ff06 	bl	800c9c4 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f00a ff1f 	bl	800c9fc <Rte_Write_PB_15>
			}break;
 8001bbe:	e013      	b.n	8001be8 <LED_MainFunction+0x78>
			case 2:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f00a fee3 	bl	800c98c <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f00a fefc 	bl	800c9c4 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(TRUE);                                    /* Red LED    */
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f00a ff15 	bl	800c9fc <Rte_Write_PB_15>
			}break;
 8001bd2:	e009      	b.n	8001be8 <LED_MainFunction+0x78>
			default:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f00a fed9 	bl	800c98c <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f00a fef2 	bl	800c9c4 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001be0:	2000      	movs	r0, #0
 8001be2:	f00a ff0b 	bl	800c9fc <Rte_Write_PB_15>
			}break;
 8001be6:	bf00      	nop
		}
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <LED_MainFunction+0xb0>)
 8001bea:	f00a fd5f 	bl	800c6ac <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(FALSE != g_LED_ButtonState_b)
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <LED_MainFunction+0xb0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <LED_MainFunction+0x96>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8001bf6:	f7ff ff6f 	bl	8001ad8 <LED_UpdatePulseWidth>
			/* Call the Servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <LED_MainFunction+0xb4>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00a fdfa 	bl	800c7f8 <Rte_Cdd_Servo_RawMove>
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
			/* Stop fading */
		}

	}
}
 8001c04:	e006      	b.n	8001c14 <LED_MainFunction+0xa4>
			g_LED_NvMBlock_a[0] = 1u;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <LED_MainFunction+0xb8>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <LED_MainFunction+0xb8>)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f00a fe1a 	bl	800c848 <Rte_Write_NvM_Block>
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200000dd 	.word	0x200000dd
 8001c1c:	20000104 	.word	0x20000104
 8001c20:	200000de 	.word	0x200000de
 8001c24:	200000e0 	.word	0x200000e0
 8001c28:	200000e4 	.word	0x200000e4

08001c2c <LED_Shutdown>:
/**
  * @brief  Shutdown the LED module
  * @return None
  */
void LED_Shutdown(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	/* Write LED NvM block */
	Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001c30:	4904      	ldr	r1, [pc, #16]	; (8001c44 <LED_Shutdown+0x18>)
 8001c32:	2000      	movs	r0, #0
 8001c34:	f00a fe08 	bl	800c848 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_LED_InitDone_b = FALSE;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <LED_Shutdown+0x1c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000e4 	.word	0x200000e4
 8001c48:	200000dd 	.word	0x200000dd

08001c4c <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	g_Left_Blinker_Status_b = FALSE;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <Blinker_Init+0x30>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
	g_Right_Blinker_Status_b = FALSE;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <Blinker_Init+0x34>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
	Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <Blinker_Init+0x30>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f00a fd85 	bl	800c770 <Rte_Write_PC_2>
	Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <Blinker_Init+0x34>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00a fd9a 	bl	800c7a4 <Rte_Write_PC_3>
	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <Blinker_Init+0x38>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000010a 	.word	0x2000010a
 8001c80:	2000010b 	.word	0x2000010b
 8001c84:	20000105 	.word	0x20000105

08001c88 <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <Blinker_MainFunction+0xe0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d167      	bne.n	8001d64 <Blinker_MainFunction+0xdc>
	{
		Rte_Read_Blinker_Autobrakes_Status(&g_Bliker_Autobrakes_Status);
 8001c94:	4835      	ldr	r0, [pc, #212]	; (8001d6c <Blinker_MainFunction+0xe4>)
 8001c96:	f00a fd5b 	bl	800c750 <Rte_Read_DIO_Autobrakes_State_b>

		if(TRUE == g_Bliker_Autobrakes_Status && FALSE == g_Bliker_Autobrakes_Previous_Status)
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <Blinker_MainFunction+0xe4>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10d      	bne.n	8001cbe <Blinker_MainFunction+0x36>
 8001ca2:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <Blinker_MainFunction+0xe8>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <Blinker_MainFunction+0x36>
		{
			g_Left_Blinker_Status_b = TRUE;
 8001caa:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <Blinker_MainFunction+0xec>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = TRUE;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <Blinker_MainFunction+0xf0>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
			g_Bliker_Autobrakes_Previous_Status = TRUE;
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <Blinker_MainFunction+0xe8>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e048      	b.n	8001d50 <Blinker_MainFunction+0xc8>
		}
		else if(TRUE == g_Bliker_Autobrakes_Status && TRUE == g_Bliker_Autobrakes_Previous_Status)
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <Blinker_MainFunction+0xe4>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d136      	bne.n	8001d34 <Blinker_MainFunction+0xac>
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <Blinker_MainFunction+0xe8>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d132      	bne.n	8001d34 <Blinker_MainFunction+0xac>
		{
			if(g_Blinker_Counter_u16 < 45)
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <Blinker_MainFunction+0xf4>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	2b2c      	cmp	r3, #44	; 0x2c
 8001cd4:	d827      	bhi.n	8001d26 <Blinker_MainFunction+0x9e>
			{
				g_Blinker_Counter_u16++;
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <Blinker_MainFunction+0xf4>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <Blinker_MainFunction+0xf4>)
 8001ce0:	801a      	strh	r2, [r3, #0]
				if(0 == g_Blinker_Counter_u16 % 5)
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <Blinker_MainFunction+0xf4>)
 8001ce4:	881a      	ldrh	r2, [r3, #0]
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <Blinker_MainFunction+0xf8>)
 8001ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cec:	0899      	lsrs	r1, r3, #2
 8001cee:	460b      	mov	r3, r1
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d128      	bne.n	8001d4e <Blinker_MainFunction+0xc6>
				{
					g_Left_Blinker_Status_b = !g_Left_Blinker_Status_b;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <Blinker_MainFunction+0xec>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <Blinker_MainFunction+0xec>)
 8001d0e:	701a      	strb	r2, [r3, #0]
					g_Right_Blinker_Status_b = !g_Right_Blinker_Status_b;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <Blinker_MainFunction+0xf0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <Blinker_MainFunction+0xf0>)
 8001d22:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 8001d24:	e013      	b.n	8001d4e <Blinker_MainFunction+0xc6>
				}

			}
			else
			{
				g_Left_Blinker_Status_b = FALSE;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <Blinker_MainFunction+0xec>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
				g_Right_Blinker_Status_b = FALSE;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <Blinker_MainFunction+0xf0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 8001d32:	e00c      	b.n	8001d4e <Blinker_MainFunction+0xc6>
			}
		}
		else
		{
			g_Bliker_Autobrakes_Previous_Status = FALSE;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <Blinker_MainFunction+0xe8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			g_Blinker_Counter_u16 = 0;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <Blinker_MainFunction+0xf4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	801a      	strh	r2, [r3, #0]
			g_Left_Blinker_Status_b = FALSE;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <Blinker_MainFunction+0xec>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = FALSE;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <Blinker_MainFunction+0xf0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e000      	b.n	8001d50 <Blinker_MainFunction+0xc8>
			if(g_Blinker_Counter_u16 < 45)
 8001d4e:	bf00      	nop
		}

		Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <Blinker_MainFunction+0xec>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00a fd0b 	bl	800c770 <Rte_Write_PC_2>
		Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <Blinker_MainFunction+0xf0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00a fd20 	bl	800c7a4 <Rte_Write_PC_3>
	}
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000105 	.word	0x20000105
 8001d6c:	20000106 	.word	0x20000106
 8001d70:	20000107 	.word	0x20000107
 8001d74:	2000010a 	.word	0x2000010a
 8001d78:	2000010b 	.word	0x2000010b
 8001d7c:	20000108 	.word	0x20000108
 8001d80:	cccccccd 	.word	0xcccccccd

08001d84 <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <FrontLights_Init+0x14>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000010c 	.word	0x2000010c

08001d9c <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <InteriorLights_Init+0x14>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	2000010d 	.word	0x2000010d

08001dc0 <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <RearLights_Init+0x14>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000010e 	.word	0x2000010e

08001de4 <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <Steering_Init+0x14>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	2000010f 	.word	0x2000010f

08001e08 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <Cdd_DCMotor_ConvertSpeedToARR>:
  * @brief	Cdd_DCMotor_ConvertSpeedToARR speed conversion function
  * @param	ub_Speed DC Motor speed in percents
  * @return	ARR speed value
  */
static uint16 Cdd_DCMotor_ConvertSpeedToARR(uint8 ub_Speed)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	uint16 Speed_u16;
	if(ub_Speed < 100u)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b63      	cmp	r3, #99	; 0x63
 8001e22:	d80b      	bhi.n	8001e3c <Cdd_DCMotor_ConvertSpeedToARR+0x28>
	{
		Speed_u16 = (uint16)(ub_Speed * 599);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	441a      	add	r2, r3
 8001e2e:	4611      	mov	r1, r2
 8001e30:	0109      	lsls	r1, r1, #4
 8001e32:	1a8a      	subs	r2, r1, r2
 8001e34:	00d2      	lsls	r2, r2, #3
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	81fb      	strh	r3, [r7, #14]
 8001e3a:	e002      	b.n	8001e42 <Cdd_DCMotor_ConvertSpeedToARR+0x2e>
	}
	else
	{
		Speed_u16 = 59999;
 8001e3c:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8001e40:	81fb      	strh	r3, [r7, #14]
	}

	return Speed_u16;
 8001e42:	89fb      	ldrh	r3, [r7, #14]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <Cdd_DCMotor_Driver_Init>:
/**
  * @brief	Cdd_DCMotor module initialization function
  * @return	None
  */
void Cdd_DCMotor_Driver_Init(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
    DC_MOTOR_Init(DC_MOTOR_ID_0);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f81a 	bl	8001e8c <DC_MOTOR_Init>
    DC_MOTOR_Init(DC_MOTOR_ID_1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f000 f817 	bl	8001e8c <DC_MOTOR_Init>
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <Cdd_DCMotor_Init>:
/**
  * @brief	Cdd_DCMotor module initialization function
  * @return	None
  */
void Cdd_DCMotor_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    DC_MOTOR_Start(DC_MOTOR_ID_0, DC_MOTOR_DIR_CW, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f9d1 	bl	8002214 <DC_MOTOR_Start>
    DC_MOTOR_Start(DC_MOTOR_ID_1, DC_MOTOR_DIR_CW, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2001      	movs	r0, #1
 8001e78:	f000 f9cc 	bl	8002214 <DC_MOTOR_Start>
	/* Set initialization flag to done */
	g_Cdd_DCMotor_InitDone_b = TRUE;
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <Cdd_DCMotor_Init+0x24>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000110 	.word	0x20000110

08001e8c <DC_MOTOR_Init>:

uint32 arr_val = 0;
void DC_MOTOR_Init(uint8 au8_MOTOR_Instance)
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b0b0      	sub	sp, #192	; 0xc0
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	615a      	str	r2, [r3, #20]
 8001ed2:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32 ARR_Value = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001ee4:	015b      	lsls	r3, r3, #5
 8001ee6:	4413      	add	r3, r2
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eee:	d008      	beq.n	8001f02 <DC_MOTOR_Init+0x76>
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4a37      	ldr	r2, [pc, #220]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001ef4:	015b      	lsls	r3, r3, #5
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f00:	d10c      	bne.n	8001f1c <DC_MOTOR_Init+0x90>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4a33      	ldr	r2, [pc, #204]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	6153      	str	r3, [r2, #20]
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	e080      	b.n	800201e <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001f20:	015b      	lsls	r3, r3, #5
 8001f22:	4413      	add	r3, r2
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2c      	ldr	r2, [pc, #176]	; (8001fd8 <DC_MOTOR_Init+0x14c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d008      	beq.n	8001f3e <DC_MOTOR_Init+0xb2>
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a28      	ldr	r2, [pc, #160]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001f30:	015b      	lsls	r3, r3, #5
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <DC_MOTOR_Init+0x14c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10c      	bne.n	8001f58 <DC_MOTOR_Init+0xcc>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6153      	str	r3, [r2, #20]
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	e062      	b.n	800201e <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001f5c:	015b      	lsls	r3, r3, #5
 8001f5e:	4413      	add	r3, r2
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <DC_MOTOR_Init+0x150>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d008      	beq.n	8001f7a <DC_MOTOR_Init+0xee>
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001f6c:	015b      	lsls	r3, r3, #5
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <DC_MOTOR_Init+0x150>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10c      	bne.n	8001f94 <DC_MOTOR_Init+0x108>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f84:	6153      	str	r3, [r2, #20]
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	e044      	b.n	800201e <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001f98:	015b      	lsls	r3, r3, #5
 8001f9a:	4413      	add	r3, r2
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <DC_MOTOR_Init+0x154>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d008      	beq.n	8001fb6 <DC_MOTOR_Init+0x12a>
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <DC_MOTOR_Init+0x144>)
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <DC_MOTOR_Init+0x154>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d116      	bne.n	8001fe4 <DC_MOTOR_Init+0x158>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc0:	6153      	str	r3, [r2, #20]
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <DC_MOTOR_Init+0x148>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	e026      	b.n	800201e <DC_MOTOR_Init+0x192>
 8001fd0:	0800d3e0 	.word	0x0800d3e0
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	48000400 	.word	0x48000400
 8001fdc:	48000800 	.word	0x48000800
 8001fe0:	48000c00 	.word	0x48000c00
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4a85      	ldr	r2, [pc, #532]	; (80021fc <DC_MOTOR_Init+0x370>)
 8001fe8:	015b      	lsls	r3, r3, #5
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a84      	ldr	r2, [pc, #528]	; (8002200 <DC_MOTOR_Init+0x374>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d008      	beq.n	8002006 <DC_MOTOR_Init+0x17a>
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4a81      	ldr	r2, [pc, #516]	; (80021fc <DC_MOTOR_Init+0x370>)
 8001ff8:	015b      	lsls	r3, r3, #5
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7f      	ldr	r2, [pc, #508]	; (8002200 <DC_MOTOR_Init+0x374>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10b      	bne.n	800201e <DC_MOTOR_Init+0x192>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <DC_MOTOR_Init+0x378>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4a7e      	ldr	r2, [pc, #504]	; (8002204 <DC_MOTOR_Init+0x378>)
 800200c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002010:	6153      	str	r3, [r2, #20]
 8002012:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <DC_MOTOR_Init+0x378>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    }
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a76      	ldr	r2, [pc, #472]	; (80021fc <DC_MOTOR_Init+0x370>)
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	4413      	add	r3, r2
 8002026:	3308      	adds	r3, #8
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	4a6f      	ldr	r2, [pc, #444]	; (80021fc <DC_MOTOR_Init+0x370>)
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	4413      	add	r3, r2
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f001 fee0 	bl	8003e10 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4a6a      	ldr	r2, [pc, #424]	; (80021fc <DC_MOTOR_Init+0x370>)
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	4413      	add	r3, r2
 8002058:	330a      	adds	r3, #10
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4a63      	ldr	r2, [pc, #396]	; (80021fc <DC_MOTOR_Init+0x370>)
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f001 fec6 	bl	8003e10 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <DC_MOTOR_Init+0x370>)
 8002088:	015b      	lsls	r3, r3, #5
 800208a:	4413      	add	r3, r2
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4a5a      	ldr	r2, [pc, #360]	; (80021fc <DC_MOTOR_Init+0x370>)
 8002092:	015b      	lsls	r3, r3, #5
 8002094:	4413      	add	r3, r2
 8002096:	3308      	adds	r3, #8
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	4619      	mov	r1, r3
 800209e:	f002 f858 	bl	8004152 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	4a55      	ldr	r2, [pc, #340]	; (80021fc <DC_MOTOR_Init+0x370>)
 80020a6:	015b      	lsls	r3, r3, #5
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <DC_MOTOR_Init+0x370>)
 80020b2:	015b      	lsls	r3, r3, #5
 80020b4:	4413      	add	r3, r2
 80020b6:	330a      	adds	r3, #10
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	f002 f848 	bl	8004152 <HAL_GPIO_WritePin>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
	PSC_Value--;
	ARR_Value -= 2;
*/
	PSC_Value = 23;//(uint32) (DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz / 3600000.0);
 80020c2:	2317      	movs	r3, #23
 80020c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	ARR_Value = (uint32) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz / (50*(PSC_Value+1.0)))-1.0);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <DC_MOTOR_Init+0x370>)
 80020cc:	015b      	lsls	r3, r3, #5
 80020ce:	4413      	add	r3, r2
 80020d0:	3314      	adds	r3, #20
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa1d 	bl	8000514 <__aeabi_ui2d>
 80020da:	4604      	mov	r4, r0
 80020dc:	460d      	mov	r5, r1
 80020de:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80020e2:	f7fe fa17 	bl	8000514 <__aeabi_ui2d>
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <DC_MOTOR_Init+0x37c>)
 80020ec:	f7fe f8d6 	bl	800029c <__adddf3>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <DC_MOTOR_Init+0x380>)
 80020fe:	f7fe fa83 	bl	8000608 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe fba7 	bl	800085c <__aeabi_ddiv>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <DC_MOTOR_Init+0x37c>)
 800211c:	f7fe f8bc 	bl	8000298 <__aeabi_dsub>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fc80 	bl	8000a2c <__aeabi_d2uiz>
 800212c:	4603      	mov	r3, r0
 800212e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	arr_val = ARR_Value;
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <DC_MOTOR_Init+0x384>)
 8002134:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002138:	6013      	str	r3, [r2, #0]
	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <DC_MOTOR_Init+0x370>)
 800213e:	015b      	lsls	r3, r3, #5
 8002140:	4413      	add	r3, r2
 8002142:	330c      	adds	r3, #12
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	623b      	str	r3, [r7, #32]
	htim.Init.Prescaler = PSC_Value;
 8002148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Period = ARR_Value;
 8002152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_TIM_Base_Init(&htim);
 8002160:	f107 0320 	add.w	r3, r7, #32
 8002164:	4618      	mov	r0, r3
 8002166:	f002 fa61 	bl	800462c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8002172:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f003 f8fb 	bl	8005378 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8002182:	f107 0320 	add.w	r3, r7, #32
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fb18 	bl	80047bc <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8002198:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 ff88 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a8:	2360      	movs	r3, #96	; 0x60
 80021aa:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.Pulse = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	673b      	str	r3, [r7, #112]	; 0x70
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b0:	2300      	movs	r3, #0
 80021b2:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <DC_MOTOR_Init+0x370>)
 80021bc:	015b      	lsls	r3, r3, #5
 80021be:	4413      	add	r3, r2
 80021c0:	3310      	adds	r3, #16
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 ffbf 	bl	8005150 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	4618      	mov	r0, r3
 80021d8:	f006 fa40 	bl	800865c <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <DC_MOTOR_Init+0x370>)
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	4413      	add	r3, r2
 80021e4:	3310      	adds	r3, #16
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fb3c 	bl	800486c <HAL_TIM_PWM_Start>
}
 80021f4:	bf00      	nop
 80021f6:	37c0      	adds	r7, #192	; 0xc0
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdb0      	pop	{r4, r5, r7, pc}
 80021fc:	0800d3e0 	.word	0x0800d3e0
 8002200:	48001000 	.word	0x48001000
 8002204:	40021000 	.word	0x40021000
 8002208:	3ff00000 	.word	0x3ff00000
 800220c:	40490000 	.word	0x40490000
 8002210:	20000114 	.word	0x20000114

08002214 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8 au8_MOTOR_Instance, uint8 au8_DIR, uint8 au8_SPEED)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	717b      	strb	r3, [r7, #5]
	uint16 au16_SPEED = Cdd_DCMotor_ConvertSpeedToARR(au8_SPEED);
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fdf3 	bl	8001e14 <Cdd_DCMotor_ConvertSpeedToARR>
 800222e:	4603      	mov	r3, r0
 8002230:	81fb      	strh	r3, [r7, #14]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DC_MOTOR_DIR_CW)
 8002232:	79bb      	ldrb	r3, [r7, #6]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11f      	bne.n	8002278 <DC_MOTOR_Start+0x64>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4a40      	ldr	r2, [pc, #256]	; (800233c <DC_MOTOR_Start+0x128>)
 800223c:	015b      	lsls	r3, r3, #5
 800223e:	4413      	add	r3, r2
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4a3d      	ldr	r2, [pc, #244]	; (800233c <DC_MOTOR_Start+0x128>)
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	4413      	add	r3, r2
 800224a:	3308      	adds	r3, #8
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	4619      	mov	r1, r3
 8002252:	f001 ff7e 	bl	8004152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	4a38      	ldr	r2, [pc, #224]	; (800233c <DC_MOTOR_Start+0x128>)
 800225a:	015b      	lsls	r3, r3, #5
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4a35      	ldr	r2, [pc, #212]	; (800233c <DC_MOTOR_Start+0x128>)
 8002266:	015b      	lsls	r3, r3, #5
 8002268:	4413      	add	r3, r2
 800226a:	330a      	adds	r3, #10
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	4619      	mov	r1, r3
 8002272:	f001 ff6e 	bl	8004152 <HAL_GPIO_WritePin>
 8002276:	e021      	b.n	80022bc <DC_MOTOR_Start+0xa8>
	}
	else if(au8_DIR == DC_MOTOR_DIR_CCW)
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d11e      	bne.n	80022bc <DC_MOTOR_Start+0xa8>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4a2e      	ldr	r2, [pc, #184]	; (800233c <DC_MOTOR_Start+0x128>)
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	4413      	add	r3, r2
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4a2c      	ldr	r2, [pc, #176]	; (800233c <DC_MOTOR_Start+0x128>)
 800228c:	015b      	lsls	r3, r3, #5
 800228e:	4413      	add	r3, r2
 8002290:	3308      	adds	r3, #8
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	f001 ff5b 	bl	8004152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	4a27      	ldr	r2, [pc, #156]	; (800233c <DC_MOTOR_Start+0x128>)
 80022a0:	015b      	lsls	r3, r3, #5
 80022a2:	4413      	add	r3, r2
 80022a4:	3304      	adds	r3, #4
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	4a24      	ldr	r2, [pc, #144]	; (800233c <DC_MOTOR_Start+0x128>)
 80022ac:	015b      	lsls	r3, r3, #5
 80022ae:	4413      	add	r3, r2
 80022b0:	330a      	adds	r3, #10
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4619      	mov	r1, r3
 80022b8:	f001 ff4b 	bl	8004152 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4a1f      	ldr	r2, [pc, #124]	; (800233c <DC_MOTOR_Start+0x128>)
 80022c0:	015b      	lsls	r3, r3, #5
 80022c2:	4413      	add	r3, r2
 80022c4:	3310      	adds	r3, #16
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <DC_MOTOR_Start+0xca>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	4a1b      	ldr	r2, [pc, #108]	; (800233c <DC_MOTOR_Start+0x128>)
 80022d0:	015b      	lsls	r3, r3, #5
 80022d2:	4413      	add	r3, r2
 80022d4:	330c      	adds	r3, #12
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	89fa      	ldrh	r2, [r7, #14]
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80022dc:	e029      	b.n	8002332 <DC_MOTOR_Start+0x11e>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4a16      	ldr	r2, [pc, #88]	; (800233c <DC_MOTOR_Start+0x128>)
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	4413      	add	r3, r2
 80022e6:	3310      	adds	r3, #16
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d108      	bne.n	8002300 <DC_MOTOR_Start+0xec>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <DC_MOTOR_Start+0x128>)
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	4413      	add	r3, r2
 80022f6:	330c      	adds	r3, #12
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	89fa      	ldrh	r2, [r7, #14]
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022fe:	e018      	b.n	8002332 <DC_MOTOR_Start+0x11e>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <DC_MOTOR_Start+0x128>)
 8002304:	015b      	lsls	r3, r3, #5
 8002306:	4413      	add	r3, r2
 8002308:	3310      	adds	r3, #16
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d108      	bne.n	8002322 <DC_MOTOR_Start+0x10e>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <DC_MOTOR_Start+0x128>)
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	4413      	add	r3, r2
 8002318:	330c      	adds	r3, #12
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	89fa      	ldrh	r2, [r7, #14]
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002320:	e007      	b.n	8002332 <DC_MOTOR_Start+0x11e>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <DC_MOTOR_Start+0x128>)
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	4413      	add	r3, r2
 800232a:	330c      	adds	r3, #12
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	89fa      	ldrh	r2, [r7, #14]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	0800d3e0 	.word	0x0800d3e0

08002340 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8 au8_MOTOR_Instance, uint8 au8_SPEED)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	460a      	mov	r2, r1
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	4613      	mov	r3, r2
 800234e:	71bb      	strb	r3, [r7, #6]
	uint16 au16_SPEED = Cdd_DCMotor_ConvertSpeedToARR(au8_SPEED);
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fd5e 	bl	8001e14 <Cdd_DCMotor_ConvertSpeedToARR>
 8002358:	4603      	mov	r3, r0
 800235a:	81fb      	strh	r3, [r7, #14]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <DC_MOTOR_Set_Speed+0x9c>)
 8002360:	015b      	lsls	r3, r3, #5
 8002362:	4413      	add	r3, r2
 8002364:	3310      	adds	r3, #16
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d108      	bne.n	800237e <DC_MOTOR_Set_Speed+0x3e>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <DC_MOTOR_Set_Speed+0x9c>)
 8002370:	015b      	lsls	r3, r3, #5
 8002372:	4413      	add	r3, r2
 8002374:	330c      	adds	r3, #12
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	89fa      	ldrh	r2, [r7, #14]
 800237a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 800237c:	e029      	b.n	80023d2 <DC_MOTOR_Set_Speed+0x92>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4a16      	ldr	r2, [pc, #88]	; (80023dc <DC_MOTOR_Set_Speed+0x9c>)
 8002382:	015b      	lsls	r3, r3, #5
 8002384:	4413      	add	r3, r2
 8002386:	3310      	adds	r3, #16
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d108      	bne.n	80023a0 <DC_MOTOR_Set_Speed+0x60>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <DC_MOTOR_Set_Speed+0x9c>)
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	4413      	add	r3, r2
 8002396:	330c      	adds	r3, #12
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	89fa      	ldrh	r2, [r7, #14]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800239e:	e018      	b.n	80023d2 <DC_MOTOR_Set_Speed+0x92>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <DC_MOTOR_Set_Speed+0x9c>)
 80023a4:	015b      	lsls	r3, r3, #5
 80023a6:	4413      	add	r3, r2
 80023a8:	3310      	adds	r3, #16
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d108      	bne.n	80023c2 <DC_MOTOR_Set_Speed+0x82>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <DC_MOTOR_Set_Speed+0x9c>)
 80023b4:	015b      	lsls	r3, r3, #5
 80023b6:	4413      	add	r3, r2
 80023b8:	330c      	adds	r3, #12
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	89fa      	ldrh	r2, [r7, #14]
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023c0:	e007      	b.n	80023d2 <DC_MOTOR_Set_Speed+0x92>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4a05      	ldr	r2, [pc, #20]	; (80023dc <DC_MOTOR_Set_Speed+0x9c>)
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	4413      	add	r3, r2
 80023ca:	330c      	adds	r3, #12
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	89fa      	ldrh	r2, [r7, #14]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	0800d3e0 	.word	0x0800d3e0

080023e0 <DC_MOTOR_Set_Dir>:

void DC_MOTOR_Set_Dir(uint8 au8_MOTOR_Instance, uint8 au8_DIR)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71bb      	strb	r3, [r7, #6]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DC_MOTOR_DIR_CW)
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11f      	bne.n	8002436 <DC_MOTOR_Set_Dir+0x56>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 80023fa:	015b      	lsls	r3, r3, #5
 80023fc:	4413      	add	r3, r2
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 8002404:	015b      	lsls	r3, r3, #5
 8002406:	4413      	add	r3, r2
 8002408:	3308      	adds	r3, #8
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	4619      	mov	r1, r3
 8002410:	f001 fe9f 	bl	8004152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	4413      	add	r3, r2
 800241c:	3304      	adds	r3, #4
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 8002424:	015b      	lsls	r3, r3, #5
 8002426:	4413      	add	r3, r2
 8002428:	330a      	adds	r3, #10
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	4619      	mov	r1, r3
 8002430:	f001 fe8f 	bl	8004152 <HAL_GPIO_WritePin>
	}
	else
	{

	}
}
 8002434:	e021      	b.n	800247a <DC_MOTOR_Set_Dir+0x9a>
	else if(au8_DIR == DC_MOTOR_DIR_CCW)
 8002436:	79bb      	ldrb	r3, [r7, #6]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11e      	bne.n	800247a <DC_MOTOR_Set_Dir+0x9a>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	4413      	add	r3, r2
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 800244a:	015b      	lsls	r3, r3, #5
 800244c:	4413      	add	r3, r2
 800244e:	3308      	adds	r3, #8
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	4619      	mov	r1, r3
 8002456:	f001 fe7c 	bl	8004152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 800245e:	015b      	lsls	r3, r3, #5
 8002460:	4413      	add	r3, r2
 8002462:	3304      	adds	r3, #4
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <DC_MOTOR_Set_Dir+0xa4>)
 800246a:	015b      	lsls	r3, r3, #5
 800246c:	4413      	add	r3, r2
 800246e:	330a      	adds	r3, #10
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4619      	mov	r1, r3
 8002476:	f001 fe6c 	bl	8004152 <HAL_GPIO_WritePin>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	0800d3e0 	.word	0x0800d3e0

08002488 <Cdd_DCMotor_MainFunction>:
  */
int inc = 0;
uint32 freq = 0;
uint8 dir = 0;
void Cdd_DCMotor_MainFunction(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

		DC_MOTOR_Set_Speed(DC_MOTOR_ID_0, inc);
		DC_MOTOR_Set_Speed(DC_MOTOR_ID_1, inc);*/

	}
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <Cdd_Servo_Driver_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Driver_Init(void)
{
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b09e      	sub	sp, #120	; 0x78
 8002498:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef l_GPIO_InitStruct_s = {0};
 800249a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef l_ClockSourceConfig_s = {0};
 80024aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef l_MasterConfig_s = {0};
 80024b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef l_ConfigOC_s = {0};
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
 80024d4:	615a      	str	r2, [r3, #20]
 80024d6:	619a      	str	r2, [r3, #24]
    uint32 l_PSC_Value_u32 = 0UL;
 80024d8:	2300      	movs	r3, #0
 80024da:	677b      	str	r3, [r7, #116]	; 0x74
    uint32 l_ARR_Value_u32 = 0UL;
 80024dc:	2300      	movs	r3, #0
 80024de:	673b      	str	r3, [r7, #112]	; 0x70
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 80024e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e8:	d10c      	bne.n	8002504 <Cdd_Servo_Driver_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b6c      	ldr	r3, [pc, #432]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4a6b      	ldr	r2, [pc, #428]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f4:	6153      	str	r3, [r2, #20]
 80024f6:	4b69      	ldr	r3, [pc, #420]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	e046      	b.n	8002592 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 8002504:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002508:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <Cdd_Servo_Driver_Init+0x20c>)
 800250a:	429a      	cmp	r2, r3
 800250c:	d10c      	bne.n	8002528 <Cdd_Servo_Driver_Init+0x94>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4a62      	ldr	r2, [pc, #392]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6153      	str	r3, [r2, #20]
 800251a:	4b60      	ldr	r3, [pc, #384]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	e034      	b.n	8002592 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 8002528:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <Cdd_Servo_Driver_Init+0x210>)
 800252e:	429a      	cmp	r2, r3
 8002530:	d10c      	bne.n	800254c <Cdd_Servo_Driver_Init+0xb8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	4b5a      	ldr	r3, [pc, #360]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	4a59      	ldr	r2, [pc, #356]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800253c:	6153      	str	r3, [r2, #20]
 800253e:	4b57      	ldr	r3, [pc, #348]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	e022      	b.n	8002592 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 800254c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002550:	4b55      	ldr	r3, [pc, #340]	; (80026a8 <Cdd_Servo_Driver_Init+0x214>)
 8002552:	429a      	cmp	r2, r3
 8002554:	d10c      	bne.n	8002570 <Cdd_Servo_Driver_Init+0xdc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4a50      	ldr	r2, [pc, #320]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 800255c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002560:	6153      	str	r3, [r2, #20]
 8002562:	4b4e      	ldr	r3, [pc, #312]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	e010      	b.n	8002592 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 8002570:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002574:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <Cdd_Servo_Driver_Init+0x218>)
 8002576:	429a      	cmp	r2, r3
 8002578:	d10b      	bne.n	8002592 <Cdd_Servo_Driver_Init+0xfe>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 800257a:	4b48      	ldr	r3, [pc, #288]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4a47      	ldr	r2, [pc, #284]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002584:	6153      	str	r3, [r2, #20]
 8002586:	4b45      	ldr	r3, [pc, #276]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
    }
	l_GPIO_InitStruct_s.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 8002592:	2320      	movs	r3, #32
 8002594:	65fb      	str	r3, [r7, #92]	; 0x5c
	l_GPIO_InitStruct_s.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	663b      	str	r3, [r7, #96]	; 0x60
	l_GPIO_InitStruct_s.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	66bb      	str	r3, [r7, #104]	; 0x68
	l_GPIO_InitStruct_s.Alternate = GPIO_AF1_TIM2;
 800259e:	2301      	movs	r3, #1
 80025a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &l_GPIO_InitStruct_s);
 80025a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f001 fc2f 	bl	8003e10 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	l_PSC_Value_u32 = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 80025b2:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <Cdd_Servo_Driver_Init+0x21c>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffad 	bl	8000514 <__aeabi_ui2d>
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <Cdd_Servo_Driver_Init+0x220>)
 80025c0:	f7fe f94c 	bl	800085c <__aeabi_ddiv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7fe fa2e 	bl	8000a2c <__aeabi_d2uiz>
 80025d0:	4603      	mov	r3, r0
 80025d2:	677b      	str	r3, [r7, #116]	; 0x74
	l_ARR_Value_u32 = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(l_PSC_Value_u32+1.0)))-1.0);
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <Cdd_Servo_Driver_Init+0x21c>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ff9c 	bl	8000514 <__aeabi_ui2d>
 80025dc:	4604      	mov	r4, r0
 80025de:	460d      	mov	r5, r1
 80025e0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80025e2:	f7fd ff97 	bl	8000514 <__aeabi_ui2d>
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <Cdd_Servo_Driver_Init+0x224>)
 80025ec:	f7fd fe56 	bl	800029c <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <Cdd_Servo_Driver_Init+0x228>)
 80025fe:	f7fe f803 	bl	8000608 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4620      	mov	r0, r4
 8002608:	4629      	mov	r1, r5
 800260a:	f7fe f927 	bl	800085c <__aeabi_ddiv>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <Cdd_Servo_Driver_Init+0x224>)
 800261c:	f7fd fe3c 	bl	8000298 <__aeabi_dsub>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fa00 	bl	8000a2c <__aeabi_d2uiz>
 800262c:	4603      	mov	r3, r0
 800262e:	673b      	str	r3, [r7, #112]	; 0x70

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 8002630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <Cdd_Servo_Driver_Init+0x22c>)
 8002636:	429a      	cmp	r2, r3
 8002638:	d10c      	bne.n	8002654 <Cdd_Servo_Driver_Init+0x1c0>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002644:	6193      	str	r3, [r2, #24]
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	e04a      	b.n	80026ea <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 8002654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d10c      	bne.n	8002678 <Cdd_Servo_Driver_Init+0x1e4>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	e038      	b.n	80026ea <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 8002678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <Cdd_Servo_Driver_Init+0x230>)
 800267e:	429a      	cmp	r2, r3
 8002680:	d122      	bne.n	80026c8 <Cdd_Servo_Driver_Init+0x234>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b03      	ldr	r3, [pc, #12]	; (800269c <Cdd_Servo_Driver_Init+0x208>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	e026      	b.n	80026ea <Cdd_Servo_Driver_Init+0x256>
 800269c:	40021000 	.word	0x40021000
 80026a0:	48000400 	.word	0x48000400
 80026a4:	48000800 	.word	0x48000800
 80026a8:	48000c00 	.word	0x48000c00
 80026ac:	48001000 	.word	0x48001000
 80026b0:	044aa200 	.word	0x044aa200
 80026b4:	41490000 	.word	0x41490000
 80026b8:	3ff00000 	.word	0x3ff00000
 80026bc:	40490000 	.word	0x40490000
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 80026c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026cc:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <Cdd_Servo_Driver_Init+0x350>)
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10b      	bne.n	80026ea <Cdd_Servo_Driver_Init+0x256>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 80026d2:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <Cdd_Servo_Driver_Init+0x354>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <Cdd_Servo_Driver_Init+0x354>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	61d3      	str	r3, [r2, #28]
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <Cdd_Servo_Driver_Init+0x354>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
	}

	g_TimerHandler_s.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 80026ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 80026f0:	601a      	str	r2, [r3, #0]
	g_TimerHandler_s.Init.Prescaler = l_PSC_Value_u32;
 80026f2:	4a3e      	ldr	r2, [pc, #248]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 80026f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f6:	6053      	str	r3, [r2, #4]
	g_TimerHandler_s.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
	g_TimerHandler_s.Init.Period = l_ARR_Value_u32;
 80026fe:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 8002700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002702:	60d3      	str	r3, [r2, #12]
	g_TimerHandler_s.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002704:	4b39      	ldr	r3, [pc, #228]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
	g_TimerHandler_s.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&g_TimerHandler_s);
 8002710:	4836      	ldr	r0, [pc, #216]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 8002712:	f001 ff8b 	bl	800462c <HAL_TIM_Base_Init>
	l_ClockSourceConfig_s.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_TIM_ConfigClockSource(&g_TimerHandler_s, &l_ClockSourceConfig_s);
 800271c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002720:	4619      	mov	r1, r3
 8002722:	4832      	ldr	r0, [pc, #200]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 8002724:	f002 fe28 	bl	8005378 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&g_TimerHandler_s);
 8002728:	4830      	ldr	r0, [pc, #192]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 800272a:	f002 f847 	bl	80047bc <HAL_TIM_PWM_Init>
	l_MasterConfig_s.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	643b      	str	r3, [r7, #64]	; 0x40
	l_MasterConfig_s.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIMEx_MasterConfigSynchronization(&g_TimerHandler_s, &l_MasterConfig_s);
 8002736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800273a:	4619      	mov	r1, r3
 800273c:	482b      	ldr	r0, [pc, #172]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 800273e:	f003 fcbb 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
	l_ConfigOC_s.OCMode = TIM_OCMODE_PWM1;
 8002742:	2360      	movs	r3, #96	; 0x60
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
	l_ConfigOC_s.Pulse = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
	l_ConfigOC_s.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
	l_ConfigOC_s.OCFastMode = TIM_OCFAST_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_ConfigChannel(&g_TimerHandler_s, &l_ConfigOC_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8002752:	2200      	movs	r2, #0
 8002754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002758:	4619      	mov	r1, r3
 800275a:	4824      	ldr	r0, [pc, #144]	; (80027ec <Cdd_Servo_Driver_Init+0x358>)
 800275c:	f002 fcf8 	bl	8005150 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	g_SERVO_info_s.Period_Min_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MinPulse/20.0));
 8002760:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002762:	f7fd fed7 	bl	8000514 <__aeabi_ui2d>
 8002766:	4604      	mov	r4, r0
 8002768:	460d      	mov	r5, r1
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fef2 	bl	8000558 <__aeabi_f2d>
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <Cdd_Servo_Driver_Init+0x35c>)
 800277a:	f7fe f86f 	bl	800085c <__aeabi_ddiv>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fd ff3f 	bl	8000608 <__aeabi_dmul>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe f94b 	bl	8000a2c <__aeabi_d2uiz>
 8002796:	4603      	mov	r3, r0
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <Cdd_Servo_Driver_Init+0x360>)
 800279c:	801a      	strh	r2, [r3, #0]
	g_SERVO_info_s.Period_Max_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 800279e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80027a0:	f7fd feb8 	bl	8000514 <__aeabi_ui2d>
 80027a4:	4604      	mov	r4, r0
 80027a6:	460d      	mov	r5, r1
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <Cdd_Servo_Driver_Init+0x364>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fed4 	bl	8000558 <__aeabi_f2d>
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <Cdd_Servo_Driver_Init+0x35c>)
 80027b6:	f7fe f851 	bl	800085c <__aeabi_ddiv>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd ff21 	bl	8000608 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7fe f92d 	bl	8000a2c <__aeabi_d2uiz>
 80027d2:	4603      	mov	r3, r0
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <Cdd_Servo_Driver_Init+0x360>)
 80027d8:	805a      	strh	r2, [r3, #2]
}
 80027da:	bf00      	nop
 80027dc:	3778      	adds	r7, #120	; 0x78
 80027de:	46bd      	mov	sp, r7
 80027e0:	bdb0      	pop	{r4, r5, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40021000 	.word	0x40021000
 80027ec:	20000118 	.word	0x20000118
 80027f0:	40340000 	.word	0x40340000
 80027f4:	20000164 	.word	0x20000164
 80027f8:	41a00000 	.word	0x41a00000

080027fc <Cdd_Servo_Init>:

void Cdd_Servo_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	/*--------[ Start The PWM Channel ]-------*/
	HAL_TIM_PWM_Start(&g_TimerHandler_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8002800:	2300      	movs	r3, #0
 8002802:	4619      	mov	r1, r3
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <Cdd_Servo_Init+0x14>)
 8002806:	f002 f831 	bl	800486c <HAL_TIM_PWM_Start>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000118 	.word	0x20000118

08002814 <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= g_SERVO_info_s.Period_Max_u16 && Pulse >= g_SERVO_info_s.Period_Min_u16)
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <Cdd_Servo_RawMove+0x30>)
 8002820:	885b      	ldrh	r3, [r3, #2]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	429a      	cmp	r2, r3
 8002826:	d807      	bhi.n	8002838 <Cdd_Servo_RawMove+0x24>
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <Cdd_Servo_RawMove+0x30>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <Cdd_Servo_RawMove+0x34>)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	6013      	str	r3, [r2, #0]
	}
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000164 	.word	0x20000164
 8002848:	40000034 	.word	0x40000034

0800284c <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <Cdd_Ultrasonic_Trigger>:
/**
  * @brief	Cdd_Ultrasonic module trigger measurement function
  * @return	None
  */
static void Cdd_Ultrasonic_Trigger(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	Rte_Call_TriggerUltrasonicMeasurement();
 800285c:	f009 fefc 	bl	800c658 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}

08002864 <Cdd_Ultrasonic_ISR_CaptureCallback>:
  * @brief	Cdd_Ultrasonic capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	uint32 l_PS_u32 = 0UL;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance) && (htim->Channel == g_Cdd_Ultrasonic_Info_s.ACTIV_CH))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a89      	ldr	r2, [pc, #548]	; (8002a9c <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8002876:	4293      	cmp	r3, r2
 8002878:	f040 810b 	bne.w	8002a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7f1a      	ldrb	r2, [r3, #28]
 8002880:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002886:	429a      	cmp	r2, r3
 8002888:	f040 8103 	bne.w	8002a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
	{
		if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 0u)
 800288c:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d166      	bne.n	8002962 <Cdd_Ultrasonic_ISR_CaptureCallback+0xfe>
		{
			/* Capture T1 & Reverse The ICU Edge Polarity */
			g_Cdd_Ultrasonic_Info_s.T1 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8002894:	2300      	movs	r3, #0
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f002 fe37 	bl	800550c <HAL_TIM_ReadCapturedValue>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a7f      	ldr	r2, [pc, #508]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028a2:	60d3      	str	r3, [r2, #12]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 1u;
 80028a4:	4b7e      	ldr	r3, [pc, #504]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80028aa:	2300      	movs	r3, #0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d108      	bne.n	80028c2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x5e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 020a 	bic.w	r2, r2, #10
 80028be:	621a      	str	r2, [r3, #32]
 80028c0:	e01f      	b.n	8002902 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d108      	bne.n	80028da <Cdd_Ultrasonic_ISR_CaptureCallback+0x76>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e013      	b.n	8002902 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d108      	bne.n	80028f2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x8e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e007      	b.n	8002902 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <Cdd_Ultrasonic_ISR_CaptureCallback+0xb6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0202 	orr.w	r2, r2, #2
 8002916:	621a      	str	r2, [r3, #32]
 8002918:	e01f      	b.n	800295a <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 800291a:	2300      	movs	r3, #0
 800291c:	2b04      	cmp	r3, #4
 800291e:	d108      	bne.n	8002932 <Cdd_Ultrasonic_ISR_CaptureCallback+0xce>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	f043 0320 	orr.w	r3, r3, #32
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e013      	b.n	800295a <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8002932:	2300      	movs	r3, #0
 8002934:	2b08      	cmp	r3, #8
 8002936:	d108      	bne.n	800294a <Cdd_Ultrasonic_ISR_CaptureCallback+0xe6>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e007      	b.n	800295a <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002958:	6213      	str	r3, [r2, #32]
			g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 800295a:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800295c:	2200      	movs	r2, #0
 800295e:	805a      	strh	r2, [r3, #2]
		else
		{
			/* Nothing to do */
		}
	}
}
 8002960:	e097      	b.n	8002a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
		else if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 1u)
 8002962:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	f040 8093 	bne.w	8002a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			l_PS_u32 = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 800296c:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	60fb      	str	r3, [r7, #12]
			g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002978:	6093      	str	r3, [r2, #8]
			g_Cdd_Ultrasonic_Info_s.T2 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 800297a:	2300      	movs	r3, #0
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f002 fdc4 	bl	800550c <HAL_TIM_ReadCapturedValue>
 8002984:	4603      	mov	r3, r0
 8002986:	4a46      	ldr	r2, [pc, #280]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002988:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.T2 += (g_Cdd_Ultrasonic_Info_s.TMR_OVC * (g_Cdd_Ultrasonic_Info_s.TMR_ARR+1u));
 800298a:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	4b44      	ldr	r3, [pc, #272]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002990:	885b      	ldrh	r3, [r3, #2]
 8002992:	4619      	mov	r1, r3
 8002994:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	3301      	adds	r3, #1
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	4a3f      	ldr	r2, [pc, #252]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80029a2:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.DIFF = g_Cdd_Ultrasonic_Info_s.T2 - g_Cdd_Ultrasonic_Info_s.T1;
 80029a4:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	4a3c      	ldr	r2, [pc, #240]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80029b0:	6153      	str	r3, [r2, #20]
			g_Cdd_Ultrasonic_Info_s.DISTANCE = (g_Cdd_Ultrasonic_Info_s.DIFF * CDD_ULTRASONIC_DISTANCE_SCALE_FACTOR_F32)/(c_Cdd_Ultrasonic_CfgType_s.TIM_CLK_MHz/(l_PS_u32+1u));
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f90e 	bl	8000bd8 <__aeabi_ui2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4939      	ldr	r1, [pc, #228]	; (8002aa4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x240>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe f961 	bl	8000c88 <__aeabi_fmul>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461c      	mov	r4, r3
 80029ca:	2248      	movs	r2, #72	; 0x48
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3301      	adds	r3, #1
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f8ff 	bl	8000bd8 <__aeabi_ui2f>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	4620      	mov	r0, r4
 80029e0:	f7fe fa06 	bl	8000df0 <__aeabi_fdiv>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80029ea:	619a      	str	r2, [r3, #24]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 0u;
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d108      	bne.n	8002a0a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1a6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a1a      	ldr	r2, [r3, #32]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 020a 	bic.w	r2, r2, #10
 8002a06:	621a      	str	r2, [r3, #32]
 8002a08:	e01f      	b.n	8002a4a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d108      	bne.n	8002a22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1be>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	e013      	b.n	8002a4a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d108      	bne.n	8002a3a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1d6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002a36:	6213      	str	r3, [r2, #32]
 8002a38:	e007      	b.n	8002a4a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <Cdd_Ultrasonic_ISR_CaptureCallback+0x1fa>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a12      	ldr	r2, [r2, #32]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	e019      	b.n	8002a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d106      	bne.n	8002a72 <Cdd_Ultrasonic_ISR_CaptureCallback+0x20e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	6213      	str	r3, [r2, #32]
}
 8002a70:	e00f      	b.n	8002a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d106      	bne.n	8002a86 <Cdd_Ultrasonic_ISR_CaptureCallback+0x222>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	6213      	str	r3, [r2, #32]
}
 8002a84:	e005      	b.n	8002a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	6213      	str	r3, [r2, #32]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	200001b4 	.word	0x200001b4
 8002aa4:	3c8b4396 	.word	0x3c8b4396

08002aa8 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x28>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d105      	bne.n	8002ac6 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x1e>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_OVC++;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8002abc:	885b      	ldrh	r3, [r3, #2]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8002ac4:	805a      	strh	r2, [r3, #2]
	}
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	200001b4 	.word	0x200001b4

08002ad8 <Cdd_Ultrasonic_Init>:
/**
  * @brief	Cdd_Ultrasonic module initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	if(TRUE == g_Cdd_Ultrasonic_DriverInitDone_b)
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <Cdd_Ultrasonic_Init+0x28>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10a      	bne.n	8002afa <Cdd_Ultrasonic_Init+0x22>
	{
		/*--------[ Start The ICU Channel ]-------*/
		HAL_TIM_Base_Start_IT(&htim3);
 8002ae4:	4807      	ldr	r0, [pc, #28]	; (8002b04 <Cdd_Ultrasonic_Init+0x2c>)
 8002ae6:	f001 fdf9 	bl	80046dc <HAL_TIM_Base_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8002aea:	2300      	movs	r3, #0
 8002aec:	4619      	mov	r1, r3
 8002aee:	4805      	ldr	r0, [pc, #20]	; (8002b04 <Cdd_Ultrasonic_Init+0x2c>)
 8002af0:	f002 f828 	bl	8004b44 <HAL_TIM_IC_Start_IT>
		/* Set initialization flag to done */
		g_Cdd_Ultrasonic_InitDone_b = TRUE;
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <Cdd_Ultrasonic_Init+0x30>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
	}
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200001d9 	.word	0x200001d9
 8002b04:	20000168 	.word	0x20000168
 8002b08:	200001d8 	.word	0x200001d8

08002b0c <Cdd_Ultrasonic_Driver_Init>:
/**
  * @brief	Cdd_Ultrasonic module driver initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Driver_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b096      	sub	sp, #88	; 0x58
 8002b10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8002b12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8002b3c:	f107 0318 	add.w	r3, r7, #24
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]

    /*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOA)
 8002b4a:	4b6e      	ldr	r3, [pc, #440]	; (8002d04 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002b4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b50:	d10c      	bne.n	8002b6c <Cdd_Ultrasonic_Driver_Init+0x60>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4a6c      	ldr	r2, [pc, #432]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	6153      	str	r3, [r2, #20]
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	e042      	b.n	8002bf2 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOB)
 8002b6c:	4a65      	ldr	r2, [pc, #404]	; (8002d04 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d10c      	bne.n	8002b8e <Cdd_Ultrasonic_Driver_Init+0x82>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	4a63      	ldr	r2, [pc, #396]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7e:	6153      	str	r3, [r2, #20]
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	e031      	b.n	8002bf2 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOC)
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002b90:	4b5e      	ldr	r3, [pc, #376]	; (8002d0c <Cdd_Ultrasonic_Driver_Init+0x200>)
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d10c      	bne.n	8002bb0 <Cdd_Ultrasonic_Driver_Init+0xa4>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ba0:	6153      	str	r3, [r2, #20]
 8002ba2:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	e020      	b.n	8002bf2 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOD)
 8002bb0:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002bb2:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <Cdd_Ultrasonic_Driver_Init+0x204>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d10c      	bne.n	8002bd2 <Cdd_Ultrasonic_Driver_Init+0xc6>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc2:	6153      	str	r3, [r2, #20]
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	e00f      	b.n	8002bf2 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOE)
 8002bd2:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002bd4:	4b4f      	ldr	r3, [pc, #316]	; (8002d14 <Cdd_Ultrasonic_Driver_Init+0x208>)
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10b      	bne.n	8002bf2 <Cdd_Ultrasonic_Driver_Init+0xe6>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bda:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be4:	6153      	str	r3, [r2, #20]
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
    }
    TRIG_GPIO_InitStruct.Pin = c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN;
 8002bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8002c04:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002c06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f001 f8ff 	bl	8003e10 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	g_Cdd_Ultrasonic_Info_s.TMR_PSC = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	4a41      	ldr	r2, [pc, #260]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c18:	6053      	str	r3, [r2, #4]
	g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	4a3f      	ldr	r2, [pc, #252]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c20:	6093      	str	r3, [r2, #8]
	g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 8002c22:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	805a      	strh	r2, [r3, #2]
	g_Cdd_Ultrasonic_Info_s.HTIM = &htim3;
 8002c28:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c2c:	61da      	str	r2, [r3, #28]
	if(g_Cdd_Ultrasonic_Info_s.TMR_ARR == 0u)
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <Cdd_Ultrasonic_Driver_Init+0x132>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_ARR = 65535u;
 8002c36:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3c:	609a      	str	r2, [r3, #8]
	}
	if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_1)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <Cdd_Ultrasonic_Driver_Init+0x142>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2020 	strb.w	r2, [r3, #32]
 8002c4c:	e016      	b.n	8002c7c <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_2)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d104      	bne.n	8002c5e <Cdd_Ultrasonic_Driver_Init+0x152>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c54:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]
 8002c5c:	e00e      	b.n	8002c7c <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_3)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d104      	bne.n	8002c6e <Cdd_Ultrasonic_Driver_Init+0x162>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c66:	2204      	movs	r2, #4
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]
 8002c6c:	e006      	b.n	8002c7c <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_4)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d103      	bne.n	8002c7c <Cdd_Ultrasonic_Driver_Init+0x170>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c74:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c76:	2208      	movs	r2, #8
 8002c78:	f883 2020 	strb.w	r2, [r3, #32]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/
	htim3.Instance = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance;
 8002c7c:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002c7e:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c80:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = g_Cdd_Ultrasonic_Info_s.TMR_PSC;
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c88:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = g_Cdd_Ultrasonic_Info_s.TMR_ARR;
 8002c90:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c96:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 8002ca4:	481e      	ldr	r0, [pc, #120]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002ca6:	f001 fcc1 	bl	800462c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8002cb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	481a      	ldr	r0, [pc, #104]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002cb8:	f002 fb5e 	bl	8005378 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim3);
 8002cbc:	4818      	ldr	r0, [pc, #96]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002cbe:	f001 fee1 	bl	8004a84 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8002cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4813      	ldr	r0, [pc, #76]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002cd2:	f003 f9f1 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0u;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f107 0318 	add.w	r3, r7, #24
 8002cec:	4619      	mov	r1, r3
 8002cee:	480c      	ldr	r0, [pc, #48]	; (8002d20 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002cf0:	f002 f991 	bl	8005016 <HAL_TIM_IC_ConfigChannel>
	/* Set driver initialization flag to done */
	g_Cdd_Ultrasonic_DriverInitDone_b = TRUE;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <Cdd_Ultrasonic_Driver_Init+0x218>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	3758      	adds	r7, #88	; 0x58
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	48000400 	.word	0x48000400
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	48000800 	.word	0x48000800
 8002d10:	48000c00 	.word	0x48000c00
 8002d14:	48001000 	.word	0x48001000
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	200001b4 	.word	0x200001b4
 8002d20:	20000168 	.word	0x20000168
 8002d24:	200001d9 	.word	0x200001d9

08002d28 <Cdd_Ultrasonic_MainFunction>:
/**
  * @brief	Cdd_Ultrasonic module main function (runs in task)
  * @return	None
  */
void Cdd_Ultrasonic_MainFunction(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Cdd_Ultrasonic_InitDone_b)
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <Cdd_Ultrasonic_MainFunction+0x2c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10c      	bne.n	8002d4e <Cdd_Ultrasonic_MainFunction+0x26>
	{
		/* Trigger measurement every 2nd cycle ( 20ms = 2 * task cycle ) */
		if(FALSE == g_Cdd_Ultrasonic_TriggerFlag_b)
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <Cdd_Ultrasonic_MainFunction+0x30>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <Cdd_Ultrasonic_MainFunction+0x1c>
		{
			/* Trigger measurement next cycle */
			g_Cdd_Ultrasonic_TriggerFlag_b = TRUE;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <Cdd_Ultrasonic_MainFunction+0x30>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
			/* Call trigger function */
			Cdd_Ultrasonic_Trigger();
		}
	}
}
 8002d42:	e004      	b.n	8002d4e <Cdd_Ultrasonic_MainFunction+0x26>
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <Cdd_Ultrasonic_MainFunction+0x30>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
			Cdd_Ultrasonic_Trigger();
 8002d4a:	f7ff fd85 	bl	8002858 <Cdd_Ultrasonic_Trigger>
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200001d8 	.word	0x200001d8
 8002d58:	200001da 	.word	0x200001da

08002d5c <Cdd_Ultrasonic_ReadDistance>:
/**
  * @brief	Cdd_Ultrasonic module read distance function
  * @return	Last measured distance in centimeters
  */
float32 Cdd_Ultrasonic_ReadDistance(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
	float32 l_Distance_f32 = 0.0f;
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	607b      	str	r3, [r7, #4]
	l_Distance_f32 = g_Cdd_Ultrasonic_Info_s.DISTANCE;
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <Cdd_Ultrasonic_ReadDistance+0x20>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	607b      	str	r3, [r7, #4]
	return l_Distance_f32;
 8002d6e:	687b      	ldr	r3, [r7, #4]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200001b4 	.word	0x200001b4

08002d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief	Cdd_Ultrasonic external capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_CaptureCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff fd6b 	bl	8002864 <Cdd_Ultrasonic_ISR_CaptureCallback>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic external period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_PeriodElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fe82 	bl	8002aa8 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b09a      	sub	sp, #104	; 0x68
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e1e3      	b.n	80031b8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d176      	bne.n	8002ef0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d152      	bne.n	8002eb0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f005 f9db 	bl	80081e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d13b      	bne.n	8002eb0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 ff83 	bl	8003d44 <ADC_Disable>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d12f      	bne.n	8002eb0 <HAL_ADC_Init+0xe0>
 8002e50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d12b      	bne.n	8002eb0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e60:	f023 0302 	bic.w	r3, r3, #2
 8002e64:	f043 0202 	orr.w	r2, r3, #2
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e8c:	4b92      	ldr	r3, [pc, #584]	; (80030d8 <HAL_ADC_Init+0x308>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a92      	ldr	r2, [pc, #584]	; (80030dc <HAL_ADC_Init+0x30c>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9a      	lsrs	r2, r3, #18
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ea2:	e002      	b.n	8002eaa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f9      	bne.n	8002ea4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ecc:	d110      	bne.n	8002ef0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f023 0312 	bic.w	r3, r3, #18
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f040 8150 	bne.w	800319e <HAL_ADC_Init+0x3ce>
 8002efe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 814b 	bne.w	800319e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 8143 	bne.w	800319e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f20:	f043 0202 	orr.w	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f30:	d004      	beq.n	8002f3c <HAL_ADC_Init+0x16c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <HAL_ADC_Init+0x310>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_Init+0x170>
 8002f3c:	4b69      	ldr	r3, [pc, #420]	; (80030e4 <HAL_ADC_Init+0x314>)
 8002f3e:	e000      	b.n	8002f42 <HAL_ADC_Init+0x172>
 8002f40:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <HAL_ADC_Init+0x318>)
 8002f42:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4c:	d102      	bne.n	8002f54 <HAL_ADC_Init+0x184>
 8002f4e:	4b64      	ldr	r3, [pc, #400]	; (80030e0 <HAL_ADC_Init+0x310>)
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e01a      	b.n	8002f8a <HAL_ADC_Init+0x1ba>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a61      	ldr	r2, [pc, #388]	; (80030e0 <HAL_ADC_Init+0x310>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d103      	bne.n	8002f66 <HAL_ADC_Init+0x196>
 8002f5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e011      	b.n	8002f8a <HAL_ADC_Init+0x1ba>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a60      	ldr	r2, [pc, #384]	; (80030ec <HAL_ADC_Init+0x31c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d102      	bne.n	8002f76 <HAL_ADC_Init+0x1a6>
 8002f70:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <HAL_ADC_Init+0x320>)
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e009      	b.n	8002f8a <HAL_ADC_Init+0x1ba>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5d      	ldr	r2, [pc, #372]	; (80030f0 <HAL_ADC_Init+0x320>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d102      	bne.n	8002f86 <HAL_ADC_Init+0x1b6>
 8002f80:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <HAL_ADC_Init+0x31c>)
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e001      	b.n	8002f8a <HAL_ADC_Init+0x1ba>
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d108      	bne.n	8002faa <HAL_ADC_Init+0x1da>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_Init+0x1da>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_Init+0x1dc>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11c      	bne.n	8002fea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d010      	beq.n	8002fd8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_ADC_Init+0x202>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_Init+0x202>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_Init+0x204>
 8002fd2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d108      	bne.n	8002fea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7e5b      	ldrb	r3, [r3, #25]
 8002fee:	035b      	lsls	r3, r3, #13
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ff4:	2a01      	cmp	r2, #1
 8002ff6:	d002      	beq.n	8002ffe <HAL_ADC_Init+0x22e>
 8002ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ffc:	e000      	b.n	8003000 <HAL_ADC_Init+0x230>
 8002ffe:	2200      	movs	r2, #0
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003010:	4313      	orrs	r3, r2
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d11b      	bne.n	8003056 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7e5b      	ldrb	r3, [r3, #25]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	3b01      	subs	r3, #1
 800302c:	045a      	lsls	r2, r3, #17
 800302e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003030:	4313      	orrs	r3, r2
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	663b      	str	r3, [r7, #96]	; 0x60
 8003038:	e00d      	b.n	8003056 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	2b01      	cmp	r3, #1
 800305c:	d054      	beq.n	8003108 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a22      	ldr	r2, [pc, #136]	; (80030ec <HAL_ADC_Init+0x31c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_ADC_Init+0x2a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <HAL_ADC_Init+0x320>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d140      	bne.n	80030f4 <HAL_ADC_Init+0x324>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800307a:	d02a      	beq.n	80030d2 <HAL_ADC_Init+0x302>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003084:	d022      	beq.n	80030cc <HAL_ADC_Init+0x2fc>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800308e:	d01a      	beq.n	80030c6 <HAL_ADC_Init+0x2f6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003098:	d012      	beq.n	80030c0 <HAL_ADC_Init+0x2f0>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80030a2:	d00a      	beq.n	80030ba <HAL_ADC_Init+0x2ea>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80030ac:	d002      	beq.n	80030b4 <HAL_ADC_Init+0x2e4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	e023      	b.n	80030fc <HAL_ADC_Init+0x32c>
 80030b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030b8:	e020      	b.n	80030fc <HAL_ADC_Init+0x32c>
 80030ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030be:	e01d      	b.n	80030fc <HAL_ADC_Init+0x32c>
 80030c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80030c4:	e01a      	b.n	80030fc <HAL_ADC_Init+0x32c>
 80030c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ca:	e017      	b.n	80030fc <HAL_ADC_Init+0x32c>
 80030cc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80030d0:	e014      	b.n	80030fc <HAL_ADC_Init+0x32c>
 80030d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80030d6:	e011      	b.n	80030fc <HAL_ADC_Init+0x32c>
 80030d8:	20000000 	.word	0x20000000
 80030dc:	431bde83 	.word	0x431bde83
 80030e0:	50000100 	.word	0x50000100
 80030e4:	50000300 	.word	0x50000300
 80030e8:	50000700 	.word	0x50000700
 80030ec:	50000400 	.word	0x50000400
 80030f0:	50000500 	.word	0x50000500
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003100:	4313      	orrs	r3, r2
 8003102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003104:	4313      	orrs	r3, r2
 8003106:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d114      	bne.n	8003140 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003124:	f023 0302 	bic.w	r3, r3, #2
 8003128:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7e1b      	ldrb	r3, [r3, #24]
 800312e:	039a      	lsls	r2, r3, #14
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4313      	orrs	r3, r2
 800313a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800313c:	4313      	orrs	r3, r2
 800313e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <HAL_ADC_Init+0x3f0>)
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003150:	430b      	orrs	r3, r1
 8003152:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10c      	bne.n	8003176 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f023 010f 	bic.w	r1, r3, #15
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
 8003174:	e007      	b.n	8003186 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 020f 	bic.w	r2, r2, #15
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f023 0303 	bic.w	r3, r3, #3
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
 800319c:	e00a      	b.n	80031b4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f023 0312 	bic.w	r3, r3, #18
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80031b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3768      	adds	r7, #104	; 0x68
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	fff0c007 	.word	0xfff0c007

080031c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 80f7 	bne.w	80033d2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Start_DMA+0x2e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e0f2      	b.n	80033d8 <HAL_ADC_Start_DMA+0x214>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003202:	d004      	beq.n	800320e <HAL_ADC_Start_DMA+0x4a>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a75      	ldr	r2, [pc, #468]	; (80033e0 <HAL_ADC_Start_DMA+0x21c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d109      	bne.n	8003222 <HAL_ADC_Start_DMA+0x5e>
 800320e:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <HAL_ADC_Start_DMA+0x220>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e008      	b.n	8003234 <HAL_ADC_Start_DMA+0x70>
 8003222:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <HAL_ADC_Start_DMA+0x224>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80c5 	beq.w	80033c4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fd1e 	bl	8003c7c <ADC_Enable>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 80b7 	bne.w	80033ba <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003268:	d004      	beq.n	8003274 <HAL_ADC_Start_DMA+0xb0>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5c      	ldr	r2, [pc, #368]	; (80033e0 <HAL_ADC_Start_DMA+0x21c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d106      	bne.n	8003282 <HAL_ADC_Start_DMA+0xbe>
 8003274:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <HAL_ADC_Start_DMA+0x220>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_ADC_Start_DMA+0xde>
 8003280:	e005      	b.n	800328e <HAL_ADC_Start_DMA+0xca>
 8003282:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_ADC_Start_DMA+0x224>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_ADC_Start_DMA+0xde>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003296:	d004      	beq.n	80032a2 <HAL_ADC_Start_DMA+0xde>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a53      	ldr	r2, [pc, #332]	; (80033ec <HAL_ADC_Start_DMA+0x228>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d115      	bne.n	80032ce <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d036      	beq.n	800332a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80032cc:	e02d      	b.n	800332a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e2:	d004      	beq.n	80032ee <HAL_ADC_Start_DMA+0x12a>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <HAL_ADC_Start_DMA+0x21c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10a      	bne.n	8003304 <HAL_ADC_Start_DMA+0x140>
 80032ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e008      	b.n	8003316 <HAL_ADC_Start_DMA+0x152>
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_ADC_Start_DMA+0x228>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003322:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	d106      	bne.n	8003346 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f023 0206 	bic.w	r2, r3, #6
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
 8003344:	e002      	b.n	800334c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <HAL_ADC_Start_DMA+0x22c>)
 800335a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <HAL_ADC_Start_DMA+0x230>)
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_ADC_Start_DMA+0x234>)
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	221c      	movs	r2, #28
 8003372:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0210 	orr.w	r2, r2, #16
 8003382:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3340      	adds	r3, #64	; 0x40
 800339e:	4619      	mov	r1, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f000 ff4b 	bl	800423e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0204 	orr.w	r2, r2, #4
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	e00d      	b.n	80033d6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033c2:	e008      	b.n	80033d6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033d0:	e001      	b.n	80033d6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	50000100 	.word	0x50000100
 80033e4:	50000300 	.word	0x50000300
 80033e8:	50000700 	.word	0x50000700
 80033ec:	50000400 	.word	0x50000400
 80033f0:	08003bb1 	.word	0x08003bb1
 80033f4:	08003c2b 	.word	0x08003c2b
 80033f8:	08003c47 	.word	0x08003c47

080033fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b09b      	sub	sp, #108	; 0x6c
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x22>
 800341a:	2302      	movs	r3, #2
 800341c:	e2c8      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x5b4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 82ac 	bne.w	800398e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d81c      	bhi.n	8003478 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	461a      	mov	r2, r3
 8003452:	231f      	movs	r3, #31
 8003454:	4093      	lsls	r3, r2
 8003456:	43db      	mvns	r3, r3
 8003458:	4019      	ands	r1, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa00 f203 	lsl.w	r2, r0, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
 8003476:	e063      	b.n	8003540 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b09      	cmp	r3, #9
 800347e:	d81e      	bhi.n	80034be <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	3b1e      	subs	r3, #30
 8003494:	221f      	movs	r2, #31
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	4019      	ands	r1, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	3b1e      	subs	r3, #30
 80034b0:	fa00 f203 	lsl.w	r2, r0, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	635a      	str	r2, [r3, #52]	; 0x34
 80034bc:	e040      	b.n	8003540 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b0e      	cmp	r3, #14
 80034c4:	d81e      	bhi.n	8003504 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	3b3c      	subs	r3, #60	; 0x3c
 80034da:	221f      	movs	r2, #31
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	4019      	ands	r1, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	3b3c      	subs	r3, #60	; 0x3c
 80034f6:	fa00 f203 	lsl.w	r2, r0, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
 8003502:	e01d      	b.n	8003540 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	3b5a      	subs	r3, #90	; 0x5a
 8003518:	221f      	movs	r2, #31
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	4019      	ands	r1, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	3b5a      	subs	r3, #90	; 0x5a
 8003534:	fa00 f203 	lsl.w	r2, r0, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 80e5 	bne.w	800371a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b09      	cmp	r3, #9
 8003556:	d91c      	bls.n	8003592 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	3b1e      	subs	r3, #30
 800356a:	2207      	movs	r2, #7
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	4019      	ands	r1, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6898      	ldr	r0, [r3, #8]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	3b1e      	subs	r3, #30
 8003584:	fa00 f203 	lsl.w	r2, r0, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	619a      	str	r2, [r3, #24]
 8003590:	e019      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6959      	ldr	r1, [r3, #20]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	2207      	movs	r2, #7
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	4019      	ands	r1, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6898      	ldr	r0, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	fa00 f203 	lsl.w	r2, r0, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d84f      	bhi.n	8003688 <HAL_ADC_ConfigChannel+0x28c>
 80035e8:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_ADC_ConfigChannel+0x1f4>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003601 	.word	0x08003601
 80035f4:	08003623 	.word	0x08003623
 80035f8:	08003645 	.word	0x08003645
 80035fc:	08003667 	.word	0x08003667
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003606:	4b99      	ldr	r3, [pc, #612]	; (800386c <HAL_ADC_ConfigChannel+0x470>)
 8003608:	4013      	ands	r3, r2
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	0691      	lsls	r1, r2, #26
 8003610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003612:	430a      	orrs	r2, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800361e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003620:	e07b      	b.n	800371a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003628:	4b90      	ldr	r3, [pc, #576]	; (800386c <HAL_ADC_ConfigChannel+0x470>)
 800362a:	4013      	ands	r3, r2
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	0691      	lsls	r1, r2, #26
 8003632:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003634:	430a      	orrs	r2, r1
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003640:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003642:	e06a      	b.n	800371a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800364a:	4b88      	ldr	r3, [pc, #544]	; (800386c <HAL_ADC_ConfigChannel+0x470>)
 800364c:	4013      	ands	r3, r2
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	0691      	lsls	r1, r2, #26
 8003654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003656:	430a      	orrs	r2, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003662:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003664:	e059      	b.n	800371a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800366c:	4b7f      	ldr	r3, [pc, #508]	; (800386c <HAL_ADC_ConfigChannel+0x470>)
 800366e:	4013      	ands	r3, r2
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	0691      	lsls	r1, r2, #26
 8003676:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003678:	430a      	orrs	r2, r1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003684:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003686:	e048      	b.n	800371a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	069b      	lsls	r3, r3, #26
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036aa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	069b      	lsls	r3, r3, #26
 80036bc:	429a      	cmp	r2, r3
 80036be:	d107      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036ce:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	069b      	lsls	r3, r3, #26
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d107      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036f2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	069b      	lsls	r3, r3, #26
 8003704:	429a      	cmp	r2, r3
 8003706:	d107      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003716:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003718:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d108      	bne.n	800373a <HAL_ADC_ConfigChannel+0x33e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_ADC_ConfigChannel+0x33e>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_ADC_ConfigChannel+0x340>
 800373a:	2300      	movs	r3, #0
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 8131 	bne.w	80039a4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d00f      	beq.n	800376a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43da      	mvns	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	400a      	ands	r2, r1
 8003764:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003768:	e049      	b.n	80037fe <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	409a      	lsls	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b09      	cmp	r3, #9
 800378a:	d91c      	bls.n	80037c6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6999      	ldr	r1, [r3, #24]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	3b1b      	subs	r3, #27
 800379e:	2207      	movs	r2, #7
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	4019      	ands	r1, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6898      	ldr	r0, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	3b1b      	subs	r3, #27
 80037b8:	fa00 f203 	lsl.w	r2, r0, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	619a      	str	r2, [r3, #24]
 80037c4:	e01b      	b.n	80037fe <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6959      	ldr	r1, [r3, #20]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	2207      	movs	r2, #7
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	4019      	ands	r1, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6898      	ldr	r0, [r3, #8]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	fa00 f203 	lsl.w	r2, r0, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003806:	d004      	beq.n	8003812 <HAL_ADC_ConfigChannel+0x416>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_ADC_ConfigChannel+0x474>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x41a>
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_ADC_ConfigChannel+0x478>)
 8003814:	e000      	b.n	8003818 <HAL_ADC_ConfigChannel+0x41c>
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_ADC_ConfigChannel+0x47c>)
 8003818:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d105      	bne.n	800382e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003832:	2b11      	cmp	r3, #17
 8003834:	d105      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003846:	2b12      	cmp	r3, #18
 8003848:	f040 80ac 	bne.w	80039a4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800384c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003854:	2b00      	cmp	r3, #0
 8003856:	f040 80a5 	bne.w	80039a4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003862:	d10b      	bne.n	800387c <HAL_ADC_ConfigChannel+0x480>
 8003864:	4b02      	ldr	r3, [pc, #8]	; (8003870 <HAL_ADC_ConfigChannel+0x474>)
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e023      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x4b6>
 800386a:	bf00      	nop
 800386c:	83fff000 	.word	0x83fff000
 8003870:	50000100 	.word	0x50000100
 8003874:	50000300 	.word	0x50000300
 8003878:	50000700 	.word	0x50000700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a4e      	ldr	r2, [pc, #312]	; (80039bc <HAL_ADC_ConfigChannel+0x5c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d103      	bne.n	800388e <HAL_ADC_ConfigChannel+0x492>
 8003886:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e011      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x4b6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4b      	ldr	r2, [pc, #300]	; (80039c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d102      	bne.n	800389e <HAL_ADC_ConfigChannel+0x4a2>
 8003898:	4b4a      	ldr	r3, [pc, #296]	; (80039c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e009      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x4b6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <HAL_ADC_ConfigChannel+0x5c8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d102      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x4b2>
 80038a8:	4b45      	ldr	r3, [pc, #276]	; (80039c0 <HAL_ADC_ConfigChannel+0x5c4>)
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e001      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x4b6>
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d108      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x4d6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x4d6>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x4d8>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d150      	bne.n	800397a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80038d8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x4fe>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x4fe>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_ADC_ConfigChannel+0x500>
 80038fa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d13c      	bne.n	800397a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b10      	cmp	r3, #16
 8003906:	d11d      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x548>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003910:	d118      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800391a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800391e:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <HAL_ADC_ConfigChannel+0x5d0>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	0c9a      	lsrs	r2, r3, #18
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003934:	e002      	b.n	800393c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3b01      	subs	r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f9      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003942:	e02e      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b11      	cmp	r3, #17
 800394a:	d10b      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x568>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003954:	d106      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800395e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003960:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003962:	e01e      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b12      	cmp	r3, #18
 800396a:	d11a      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800396c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003976:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003978:	e013      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800398c:	e00a      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039a0:	e000      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039a2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80039ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	376c      	adds	r7, #108	; 0x6c
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000400 	.word	0x50000400
 80039c4:	50000500 	.word	0x50000500
 80039c8:	20000000 	.word	0x20000000
 80039cc:	431bde83 	.word	0x431bde83

080039d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b099      	sub	sp, #100	; 0x64
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e8:	d102      	bne.n	80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80039ea:	4b6c      	ldr	r3, [pc, #432]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	e01a      	b.n	8003a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a69      	ldr	r2, [pc, #420]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d103      	bne.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80039fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	e011      	b.n	8003a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a66      	ldr	r2, [pc, #408]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d102      	bne.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a0c:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	e009      	b.n	8003a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a63      	ldr	r2, [pc, #396]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d102      	bne.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a1c:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	e001      	b.n	8003a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b0      	b.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0a9      	b.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 808d 	bne.w	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 8086 	bne.w	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a6c:	d004      	beq.n	8003a78 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4a      	ldr	r2, [pc, #296]	; (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003a7a:	e000      	b.n	8003a7e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003a7e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d040      	beq.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a9a:	035b      	lsls	r3, r3, #13
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d108      	bne.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d15c      	bne.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003ae6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d14b      	bne.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003af4:	f023 030f 	bic.w	r3, r3, #15
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	6811      	ldr	r1, [r2, #0]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b06:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b08:	e03c      	b.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b14:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d108      	bne.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d123      	bne.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d107      	bne.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003b58:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d112      	bne.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b66:	f023 030f 	bic.w	r3, r3, #15
 8003b6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b6c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6e:	e009      	b.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003b82:	e000      	b.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b84:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003b92:	4618      	mov	r0, r3
 8003b94:	3764      	adds	r7, #100	; 0x64
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	50000100 	.word	0x50000100
 8003ba0:	50000400 	.word	0x50000400
 8003ba4:	50000500 	.word	0x50000500
 8003ba8:	50000300 	.word	0x50000300
 8003bac:	50000700 	.word	0x50000700

08003bb0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d126      	bne.n	8003c18 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d115      	bne.n	8003c10 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d111      	bne.n	8003c10 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f007 fe57 	bl	800b8c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003c16:	e004      	b.n	8003c22 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff f8b7 	bl	8002dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0204 	orr.w	r2, r3, #4
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff f8a6 	bl	8002dbe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <ADC_Enable+0x2c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <ADC_Enable+0x2c>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <ADC_Enable+0x2e>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d143      	bne.n	8003d36 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <ADC_Enable+0xc4>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0210 	orr.w	r2, r3, #16
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e02f      	b.n	8003d38 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003ce8:	f004 f940 	bl	8007f6c <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cee:	e01b      	b.n	8003d28 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cf0:	f004 f93c 	bl	8007f6c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d914      	bls.n	8003d28 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d00d      	beq.n	8003d28 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e007      	b.n	8003d38 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d1dc      	bne.n	8003cf0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	8000003f 	.word	0x8000003f

08003d44 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d108      	bne.n	8003d70 <ADC_Disable+0x2c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <ADC_Disable+0x2c>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <ADC_Disable+0x2e>
 8003d70:	2300      	movs	r3, #0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d047      	beq.n	8003e06 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030d 	and.w	r3, r3, #13
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10f      	bne.n	8003da4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0202 	orr.w	r2, r2, #2
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003d9c:	f004 f8e6 	bl	8007f6c <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003da2:	e029      	b.n	8003df8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f043 0210 	orr.w	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e023      	b.n	8003e08 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dc0:	f004 f8d4 	bl	8007f6c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d914      	bls.n	8003df8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10d      	bne.n	8003df8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f043 0210 	orr.w	r2, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e007      	b.n	8003e08 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d0dc      	beq.n	8003dc0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e1e:	e160      	b.n	80040e2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8152 	beq.w	80040dc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d005      	beq.n	8003e50 <HAL_GPIO_Init+0x40>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d130      	bne.n	8003eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e86:	2201      	movs	r2, #1
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0201 	and.w	r2, r3, #1
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d017      	beq.n	8003eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d123      	bne.n	8003f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	08da      	lsrs	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3208      	adds	r2, #8
 8003f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	08da      	lsrs	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3208      	adds	r2, #8
 8003f3c:	6939      	ldr	r1, [r7, #16]
 8003f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80ac 	beq.w	80040dc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f84:	4b5e      	ldr	r3, [pc, #376]	; (8004100 <HAL_GPIO_Init+0x2f0>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	4a5d      	ldr	r2, [pc, #372]	; (8004100 <HAL_GPIO_Init+0x2f0>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6193      	str	r3, [r2, #24]
 8003f90:	4b5b      	ldr	r3, [pc, #364]	; (8004100 <HAL_GPIO_Init+0x2f0>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f9c:	4a59      	ldr	r2, [pc, #356]	; (8004104 <HAL_GPIO_Init+0x2f4>)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fc6:	d025      	beq.n	8004014 <HAL_GPIO_Init+0x204>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a4f      	ldr	r2, [pc, #316]	; (8004108 <HAL_GPIO_Init+0x2f8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d01f      	beq.n	8004010 <HAL_GPIO_Init+0x200>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a4e      	ldr	r2, [pc, #312]	; (800410c <HAL_GPIO_Init+0x2fc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d019      	beq.n	800400c <HAL_GPIO_Init+0x1fc>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_GPIO_Init+0x300>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_GPIO_Init+0x1f8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a4c      	ldr	r2, [pc, #304]	; (8004114 <HAL_GPIO_Init+0x304>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00d      	beq.n	8004004 <HAL_GPIO_Init+0x1f4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_GPIO_Init+0x308>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <HAL_GPIO_Init+0x1f0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_GPIO_Init+0x1ec>
 8003ff8:	2306      	movs	r3, #6
 8003ffa:	e00c      	b.n	8004016 <HAL_GPIO_Init+0x206>
 8003ffc:	2307      	movs	r3, #7
 8003ffe:	e00a      	b.n	8004016 <HAL_GPIO_Init+0x206>
 8004000:	2305      	movs	r3, #5
 8004002:	e008      	b.n	8004016 <HAL_GPIO_Init+0x206>
 8004004:	2304      	movs	r3, #4
 8004006:	e006      	b.n	8004016 <HAL_GPIO_Init+0x206>
 8004008:	2303      	movs	r3, #3
 800400a:	e004      	b.n	8004016 <HAL_GPIO_Init+0x206>
 800400c:	2302      	movs	r3, #2
 800400e:	e002      	b.n	8004016 <HAL_GPIO_Init+0x206>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_GPIO_Init+0x206>
 8004014:	2300      	movs	r3, #0
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	f002 0203 	and.w	r2, r2, #3
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	4093      	lsls	r3, r2
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004026:	4937      	ldr	r1, [pc, #220]	; (8004104 <HAL_GPIO_Init+0x2f4>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004034:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <HAL_GPIO_Init+0x310>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004058:	4a31      	ldr	r2, [pc, #196]	; (8004120 <HAL_GPIO_Init+0x310>)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_GPIO_Init+0x310>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004082:	4a27      	ldr	r2, [pc, #156]	; (8004120 <HAL_GPIO_Init+0x310>)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_GPIO_Init+0x310>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_GPIO_Init+0x310>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_GPIO_Init+0x310>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <HAL_GPIO_Init+0x310>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3301      	adds	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f ae97 	bne.w	8003e20 <HAL_GPIO_Init+0x10>
  }
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	40010000 	.word	0x40010000
 8004108:	48000400 	.word	0x48000400
 800410c:	48000800 	.word	0x48000800
 8004110:	48000c00 	.word	0x48000c00
 8004114:	48001000 	.word	0x48001000
 8004118:	48001400 	.word	0x48001400
 800411c:	48001800 	.word	0x48001800
 8004120:	40010400 	.word	0x40010400

08004124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	887b      	ldrh	r3, [r7, #2]
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e001      	b.n	8004146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	807b      	strh	r3, [r7, #2]
 800415e:	4613      	mov	r3, r2
 8004160:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004162:	787b      	ldrb	r3, [r7, #1]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004168:	887a      	ldrh	r2, [r7, #2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800416e:	e002      	b.n	8004176 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 fe62 	bl	8007e68 <HAL_GPIO_EXTI_Callback>
  }
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40010400 	.word	0x40010400

080041b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e037      	b.n	8004236 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f9c1 	bl	80045a0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}  
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_DMA_Start_IT+0x20>
 800425a:	2302      	movs	r3, #2
 800425c:	e04a      	b.n	80042f4 <HAL_DMA_Start_IT+0xb6>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800426c:	2b01      	cmp	r3, #1
 800426e:	d13a      	bne.n	80042e6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f956 	bl	8004546 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 020e 	orr.w	r2, r2, #14
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e00f      	b.n	80042d4 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 020a 	orr.w	r2, r2, #10
 80042c2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0204 	bic.w	r2, r2, #4
 80042d2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e005      	b.n	80042f2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800430a:	2b02      	cmp	r3, #2
 800430c:	d008      	beq.n	8004320 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2204      	movs	r2, #4
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e020      	b.n	8004362 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 020e 	bic.w	r2, r2, #14
 800432e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f202 	lsl.w	r2, r1, r2
 800434e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800437e:	2b02      	cmp	r3, #2
 8004380:	d005      	beq.n	800438e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e027      	b.n	80043de <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 020e 	bic.w	r2, r2, #14
 800439c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2101      	movs	r1, #1
 80043b8:	fa01 f202 	lsl.w	r2, r1, r2
 80043bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
    } 
  }
  return status;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2204      	movs	r2, #4
 8004406:	409a      	lsls	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d024      	beq.n	800445a <HAL_DMA_IRQHandler+0x72>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01f      	beq.n	800445a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d107      	bne.n	8004438 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0204 	bic.w	r2, r2, #4
 8004436:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	2104      	movs	r1, #4
 8004442:	fa01 f202 	lsl.w	r2, r1, r2
 8004446:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d06a      	beq.n	8004526 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004458:	e065      	b.n	8004526 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2202      	movs	r2, #2
 8004460:	409a      	lsls	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0xdc>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 020a 	bic.w	r2, r2, #10
 8004490:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	2102      	movs	r1, #2
 80044a4:	fa01 f202 	lsl.w	r2, r1, r2
 80044a8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d035      	beq.n	8004526 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80044c2:	e030      	b.n	8004526 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	2208      	movs	r2, #8
 80044ca:	409a      	lsls	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d028      	beq.n	8004526 <HAL_DMA_IRQHandler+0x13e>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d023      	beq.n	8004526 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 020e 	bic.w	r2, r2, #14
 80044ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f202 	lsl.w	r2, r1, r2
 80044fc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
    }
  }
}  
 8004524:	e7ff      	b.n	8004526 <HAL_DMA_IRQHandler+0x13e>
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f202 	lsl.w	r2, r1, r2
 8004562:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d108      	bne.n	8004586 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004584:	e007      	b.n	8004596 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	60da      	str	r2, [r3, #12]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b13      	ldr	r3, [pc, #76]	; (80045fc <DMA_CalcBaseAndBitshift+0x5c>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d80f      	bhi.n	80045d4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <DMA_CalcBaseAndBitshift+0x60>)
 80045bc:	4413      	add	r3, r2
 80045be:	4a11      	ldr	r2, [pc, #68]	; (8004604 <DMA_CalcBaseAndBitshift+0x64>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <DMA_CalcBaseAndBitshift+0x68>)
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80045d2:	e00e      	b.n	80045f2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <DMA_CalcBaseAndBitshift+0x6c>)
 80045dc:	4413      	add	r3, r2
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <DMA_CalcBaseAndBitshift+0x64>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <DMA_CalcBaseAndBitshift+0x70>)
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	40020407 	.word	0x40020407
 8004600:	bffdfff8 	.word	0xbffdfff8
 8004604:	cccccccd 	.word	0xcccccccd
 8004608:	40020000 	.word	0x40020000
 800460c:	bffdfbf8 	.word	0xbffdfbf8
 8004610:	40020400 	.word	0x40020400

08004614 <Gpt_Init>:
#include "Gpt.h"

static boolean g_Gpt_InitDone_b = FALSE;

void Gpt_Init(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
	g_Gpt_InitDone_b = TRUE;
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <Gpt_Init+0x14>)
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	200001db 	.word	0x200001db

0800462c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e049      	b.n	80046d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f003 ff86 	bl	8008564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f000 ffae 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04f      	b.n	8004794 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d018      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <HAL_TIM_Base_Start_IT+0xd0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40015000 	.word	0x40015000
 80047b8:	00010007 	.word	0x00010007

080047bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e049      	b.n	8004862 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f003 ff1c 	bl	8008620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 fee6 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_TIM_PWM_Start+0x24>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e03c      	b.n	800490a <HAL_TIM_PWM_Start+0x9e>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d109      	bne.n	80048aa <HAL_TIM_PWM_Start+0x3e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b01      	cmp	r3, #1
 80048a0:	bf14      	ite	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	2300      	moveq	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	e02f      	b.n	800490a <HAL_TIM_PWM_Start+0x9e>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d109      	bne.n	80048c4 <HAL_TIM_PWM_Start+0x58>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e022      	b.n	800490a <HAL_TIM_PWM_Start+0x9e>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d109      	bne.n	80048de <HAL_TIM_PWM_Start+0x72>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	e015      	b.n	800490a <HAL_TIM_PWM_Start+0x9e>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d109      	bne.n	80048f8 <HAL_TIM_PWM_Start+0x8c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e008      	b.n	800490a <HAL_TIM_PWM_Start+0x9e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0a1      	b.n	8004a56 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Start+0xb6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	e023      	b.n	800496a <HAL_TIM_PWM_Start+0xfe>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start+0xc6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004930:	e01b      	b.n	800496a <HAL_TIM_PWM_Start+0xfe>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start+0xd6>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	e013      	b.n	800496a <HAL_TIM_PWM_Start+0xfe>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Start+0xe6>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004950:	e00b      	b.n	800496a <HAL_TIM_PWM_Start+0xfe>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b10      	cmp	r3, #16
 8004956:	d104      	bne.n	8004962 <HAL_TIM_PWM_Start+0xf6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004960:	e003      	b.n	800496a <HAL_TIM_PWM_Start+0xfe>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f001 fb7b 	bl	800606e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a38      	ldr	r2, [pc, #224]	; (8004a60 <HAL_TIM_PWM_Start+0x1f4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d018      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x148>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a37      	ldr	r2, [pc, #220]	; (8004a64 <HAL_TIM_PWM_Start+0x1f8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x148>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a35      	ldr	r2, [pc, #212]	; (8004a68 <HAL_TIM_PWM_Start+0x1fc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x148>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a34      	ldr	r2, [pc, #208]	; (8004a6c <HAL_TIM_PWM_Start+0x200>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x148>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <HAL_TIM_PWM_Start+0x204>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x148>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a31      	ldr	r2, [pc, #196]	; (8004a74 <HAL_TIM_PWM_Start+0x208>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_TIM_PWM_Start+0x14c>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_TIM_PWM_Start+0x14e>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <HAL_TIM_PWM_Start+0x1f4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d01d      	beq.n	8004a14 <HAL_TIM_PWM_Start+0x1a8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e0:	d018      	beq.n	8004a14 <HAL_TIM_PWM_Start+0x1a8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <HAL_TIM_PWM_Start+0x20c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_TIM_PWM_Start+0x1a8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <HAL_TIM_PWM_Start+0x210>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIM_PWM_Start+0x1a8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1a      	ldr	r2, [pc, #104]	; (8004a64 <HAL_TIM_PWM_Start+0x1f8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_TIM_PWM_Start+0x1a8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_TIM_PWM_Start+0x1fc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_PWM_Start+0x1a8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_TIM_PWM_Start+0x208>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d115      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_TIM_PWM_Start+0x214>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d015      	beq.n	8004a52 <HAL_TIM_PWM_Start+0x1e6>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d011      	beq.n	8004a52 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3e:	e008      	b.n	8004a52 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e000      	b.n	8004a54 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800
 8004a74:	40015000 	.word	0x40015000
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	00010007 	.word	0x00010007

08004a84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e049      	b.n	8004b2a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f841 	bl	8004b32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fd82 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_IC_Start_IT+0x1e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e023      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x66>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_IC_Start_IT+0x2e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	e01b      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x66>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_IC_Start_IT+0x3e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	e013      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x66>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b0c      	cmp	r3, #12
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_IC_Start_IT+0x4e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e00b      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x66>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_IC_Start_IT+0x5e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e003      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x66>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d104      	bne.n	8004bbc <HAL_TIM_IC_Start_IT+0x78>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e013      	b.n	8004be4 <HAL_TIM_IC_Start_IT+0xa0>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d104      	bne.n	8004bcc <HAL_TIM_IC_Start_IT+0x88>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e00b      	b.n	8004be4 <HAL_TIM_IC_Start_IT+0xa0>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d104      	bne.n	8004bdc <HAL_TIM_IC_Start_IT+0x98>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e003      	b.n	8004be4 <HAL_TIM_IC_Start_IT+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d102      	bne.n	8004bf2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bec:	7b7b      	ldrb	r3, [r7, #13]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d001      	beq.n	8004bf6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0dd      	b.n	8004db2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_IC_Start_IT+0xc2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c04:	e023      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x10a>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_IC_Start_IT+0xd2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c14:	e01b      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x10a>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_IC_Start_IT+0xe2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c24:	e013      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x10a>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_IC_Start_IT+0xf2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c34:	e00b      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x10a>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_IC_Start_IT+0x102>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c44:	e003      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x10a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_IC_Start_IT+0x11a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5c:	e013      	b.n	8004c86 <HAL_TIM_IC_Start_IT+0x142>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d104      	bne.n	8004c6e <HAL_TIM_IC_Start_IT+0x12a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c6c:	e00b      	b.n	8004c86 <HAL_TIM_IC_Start_IT+0x142>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_IC_Start_IT+0x13a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c7c:	e003      	b.n	8004c86 <HAL_TIM_IC_Start_IT+0x142>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b0c      	cmp	r3, #12
 8004c8a:	d841      	bhi.n	8004d10 <HAL_TIM_IC_Start_IT+0x1cc>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <HAL_TIM_IC_Start_IT+0x150>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cc9 	.word	0x08004cc9
 8004c98:	08004d11 	.word	0x08004d11
 8004c9c:	08004d11 	.word	0x08004d11
 8004ca0:	08004d11 	.word	0x08004d11
 8004ca4:	08004cdb 	.word	0x08004cdb
 8004ca8:	08004d11 	.word	0x08004d11
 8004cac:	08004d11 	.word	0x08004d11
 8004cb0:	08004d11 	.word	0x08004d11
 8004cb4:	08004ced 	.word	0x08004ced
 8004cb8:	08004d11 	.word	0x08004d11
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004cff 	.word	0x08004cff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0202 	orr.w	r2, r2, #2
 8004cd6:	60da      	str	r2, [r3, #12]
      break;
 8004cd8:	e01d      	b.n	8004d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0204 	orr.w	r2, r2, #4
 8004ce8:	60da      	str	r2, [r3, #12]
      break;
 8004cea:	e014      	b.n	8004d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	60da      	str	r2, [r3, #12]
      break;
 8004cfc:	e00b      	b.n	8004d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0210 	orr.w	r2, r2, #16
 8004d0c:	60da      	str	r2, [r3, #12]
      break;
 8004d0e:	e002      	b.n	8004d16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d149      	bne.n	8004db0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 f9a2 	bl	800606e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <HAL_TIM_IC_Start_IT+0x278>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d01d      	beq.n	8004d70 <HAL_TIM_IC_Start_IT+0x22c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d018      	beq.n	8004d70 <HAL_TIM_IC_Start_IT+0x22c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1f      	ldr	r2, [pc, #124]	; (8004dc0 <HAL_TIM_IC_Start_IT+0x27c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_TIM_IC_Start_IT+0x22c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <HAL_TIM_IC_Start_IT+0x280>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_TIM_IC_Start_IT+0x22c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1c      	ldr	r2, [pc, #112]	; (8004dc8 <HAL_TIM_IC_Start_IT+0x284>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_IC_Start_IT+0x22c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1a      	ldr	r2, [pc, #104]	; (8004dcc <HAL_TIM_IC_Start_IT+0x288>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_IC_Start_IT+0x22c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a19      	ldr	r2, [pc, #100]	; (8004dd0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d115      	bne.n	8004d9c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	4b17      	ldr	r3, [pc, #92]	; (8004dd4 <HAL_TIM_IC_Start_IT+0x290>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d015      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x26a>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d011      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9a:	e008      	b.n	8004dae <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e000      	b.n	8004db0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40013400 	.word	0x40013400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40015000 	.word	0x40015000
 8004dd4:	00010007 	.word	0x00010007

08004dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d122      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0202 	mvn.w	r2, #2
 8004e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd ffb0 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fbb6 	bl	8005594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fbbc 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d122      	bne.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11b      	bne.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0204 	mvn.w	r2, #4
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd ff86 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fb8c 	bl	8005594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fb92 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0208 	mvn.w	r2, #8
 8004eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fd ff5c 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fb62 	bl	8005594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fb68 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0210 	mvn.w	r2, #16
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2208      	movs	r2, #8
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fd ff32 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb38 	bl	8005594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fb3e 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10e      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d107      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0201 	mvn.w	r2, #1
 8004f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fd ff1d 	bl	8002d96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 f92d 	bl	80061e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f96:	d10e      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d107      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 f91f 	bl	80061f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d107      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 faeb 	bl	80055b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d10e      	bne.n	800500e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f06f 0220 	mvn.w	r2, #32
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 f8e1 	bl	80061d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005030:	2302      	movs	r3, #2
 8005032:	e088      	b.n	8005146 <HAL_TIM_IC_ConfigChannel+0x130>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11b      	bne.n	800507a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f000 fe57 	bl	8005d04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699a      	ldr	r2, [r3, #24]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 020c 	bic.w	r2, r2, #12
 8005064:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	619a      	str	r2, [r3, #24]
 8005078:	e060      	b.n	800513c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d11c      	bne.n	80050ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	6819      	ldr	r1, [r3, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f000 fed2 	bl	8005e38 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	021a      	lsls	r2, r3, #8
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	619a      	str	r2, [r3, #24]
 80050b8:	e040      	b.n	800513c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d11b      	bne.n	80050f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f000 ff1d 	bl	8005f0e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69da      	ldr	r2, [r3, #28]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 020c 	bic.w	r2, r2, #12
 80050e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69d9      	ldr	r1, [r3, #28]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	61da      	str	r2, [r3, #28]
 80050f6:	e021      	b.n	800513c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d11c      	bne.n	8005138 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f000 ff39 	bl	8005f84 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005120:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69d9      	ldr	r1, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	021a      	lsls	r2, r3, #8
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	61da      	str	r2, [r3, #28]
 8005136:	e001      	b.n	800513c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800516a:	2302      	movs	r3, #2
 800516c:	e0ff      	b.n	800536e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b14      	cmp	r3, #20
 800517a:	f200 80f0 	bhi.w	800535e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051d9 	.word	0x080051d9
 8005188:	0800535f 	.word	0x0800535f
 800518c:	0800535f 	.word	0x0800535f
 8005190:	0800535f 	.word	0x0800535f
 8005194:	08005219 	.word	0x08005219
 8005198:	0800535f 	.word	0x0800535f
 800519c:	0800535f 	.word	0x0800535f
 80051a0:	0800535f 	.word	0x0800535f
 80051a4:	0800525b 	.word	0x0800525b
 80051a8:	0800535f 	.word	0x0800535f
 80051ac:	0800535f 	.word	0x0800535f
 80051b0:	0800535f 	.word	0x0800535f
 80051b4:	0800529b 	.word	0x0800529b
 80051b8:	0800535f 	.word	0x0800535f
 80051bc:	0800535f 	.word	0x0800535f
 80051c0:	0800535f 	.word	0x0800535f
 80051c4:	080052dd 	.word	0x080052dd
 80051c8:	0800535f 	.word	0x0800535f
 80051cc:	0800535f 	.word	0x0800535f
 80051d0:	0800535f 	.word	0x0800535f
 80051d4:	0800531d 	.word	0x0800531d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fa90 	bl	8005704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0208 	orr.w	r2, r2, #8
 80051f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0204 	bic.w	r2, r2, #4
 8005202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6999      	ldr	r1, [r3, #24]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	619a      	str	r2, [r3, #24]
      break;
 8005216:	e0a5      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fb0a 	bl	8005838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	619a      	str	r2, [r3, #24]
      break;
 8005258:	e084      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fb7b 	bl	800595c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0208 	orr.w	r2, r2, #8
 8005274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0204 	bic.w	r2, r2, #4
 8005284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69d9      	ldr	r1, [r3, #28]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	61da      	str	r2, [r3, #28]
      break;
 8005298:	e064      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fbed 	bl	8005a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69d9      	ldr	r1, [r3, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	021a      	lsls	r2, r3, #8
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	61da      	str	r2, [r3, #28]
      break;
 80052da:	e043      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fc3a 	bl	8005b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0208 	orr.w	r2, r2, #8
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0204 	bic.w	r2, r2, #4
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800531a:	e023      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc84 	bl	8005c30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800535c:	e002      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
      break;
 8005362:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop

08005378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIM_ConfigClockSource+0x1c>
 8005390:	2302      	movs	r3, #2
 8005392:	e0b6      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x18a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d0:	d03e      	beq.n	8005450 <HAL_TIM_ConfigClockSource+0xd8>
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	f200 8087 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	f000 8086 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x176>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d87f      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 80053e8:	2b70      	cmp	r3, #112	; 0x70
 80053ea:	d01a      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0xaa>
 80053ec:	2b70      	cmp	r3, #112	; 0x70
 80053ee:	d87b      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 80053f0:	2b60      	cmp	r3, #96	; 0x60
 80053f2:	d050      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x11e>
 80053f4:	2b60      	cmp	r3, #96	; 0x60
 80053f6:	d877      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 80053f8:	2b50      	cmp	r3, #80	; 0x50
 80053fa:	d03c      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0xfe>
 80053fc:	2b50      	cmp	r3, #80	; 0x50
 80053fe:	d873      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d058      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x13e>
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d86f      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 8005408:	2b30      	cmp	r3, #48	; 0x30
 800540a:	d064      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15e>
 800540c:	2b30      	cmp	r3, #48	; 0x30
 800540e:	d86b      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 8005410:	2b20      	cmp	r3, #32
 8005412:	d060      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d867      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05c      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15e>
 800541c:	2b10      	cmp	r3, #16
 800541e:	d05a      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005420:	e062      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6899      	ldr	r1, [r3, #8]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f000 fdfd 	bl	8006030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	609a      	str	r2, [r3, #8]
      break;
 800544e:	e04f      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6899      	ldr	r1, [r3, #8]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f000 fde6 	bl	8006030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005472:	609a      	str	r2, [r3, #8]
      break;
 8005474:	e03c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	461a      	mov	r2, r3
 8005484:	f000 fcaa 	bl	8005ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2150      	movs	r1, #80	; 0x50
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fdb4 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 8005494:	e02c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6859      	ldr	r1, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f000 fd04 	bl	8005eb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2160      	movs	r1, #96	; 0x60
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fda4 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 80054b4:	e01c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 fc8a 	bl	8005ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fd94 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 80054d4:	e00c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f000 fd8b 	bl	8005ffc <TIM_ITRx_SetConfig>
      break;
 80054e6:	e003      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      break;
 80054ec:	e000      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d831      	bhi.n	8005584 <HAL_TIM_ReadCapturedValue+0x78>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	0800555d 	.word	0x0800555d
 800552c:	08005585 	.word	0x08005585
 8005530:	08005585 	.word	0x08005585
 8005534:	08005585 	.word	0x08005585
 8005538:	08005567 	.word	0x08005567
 800553c:	08005585 	.word	0x08005585
 8005540:	08005585 	.word	0x08005585
 8005544:	08005585 	.word	0x08005585
 8005548:	08005571 	.word	0x08005571
 800554c:	08005585 	.word	0x08005585
 8005550:	08005585 	.word	0x08005585
 8005554:	08005585 	.word	0x08005585
 8005558:	0800557b 	.word	0x0800557b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	60fb      	str	r3, [r7, #12]

      break;
 8005564:	e00f      	b.n	8005586 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	60fb      	str	r3, [r7, #12]

      break;
 800556e:	e00a      	b.n	8005586 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005576:	60fb      	str	r3, [r7, #12]

      break;
 8005578:	e005      	b.n	8005586 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	60fb      	str	r3, [r7, #12]

      break;
 8005582:	e000      	b.n	8005586 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005584:	bf00      	nop
  }

  return tmpreg;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop

08005594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
	...

080055cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a41      	ldr	r2, [pc, #260]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a3e      	ldr	r2, [pc, #248]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3d      	ldr	r2, [pc, #244]	; (80056ec <TIM_Base_SetConfig+0x120>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3c      	ldr	r2, [pc, #240]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3b      	ldr	r2, [pc, #236]	; (80056f4 <TIM_Base_SetConfig+0x128>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a30      	ldr	r2, [pc, #192]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01f      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562c:	d01b      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2d      	ldr	r2, [pc, #180]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d017      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2c      	ldr	r2, [pc, #176]	; (80056ec <TIM_Base_SetConfig+0x120>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2b      	ldr	r2, [pc, #172]	; (80056f8 <TIM_Base_SetConfig+0x12c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2a      	ldr	r2, [pc, #168]	; (80056fc <TIM_Base_SetConfig+0x130>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a29      	ldr	r2, [pc, #164]	; (8005700 <TIM_Base_SetConfig+0x134>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <TIM_Base_SetConfig+0x128>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d108      	bne.n	8005678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <TIM_Base_SetConfig+0x100>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00f      	beq.n	80056cc <TIM_Base_SetConfig+0x100>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a12      	ldr	r2, [pc, #72]	; (80056f8 <TIM_Base_SetConfig+0x12c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_Base_SetConfig+0x100>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a11      	ldr	r2, [pc, #68]	; (80056fc <TIM_Base_SetConfig+0x130>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_Base_SetConfig+0x100>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a10      	ldr	r2, [pc, #64]	; (8005700 <TIM_Base_SetConfig+0x134>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x100>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a0b      	ldr	r2, [pc, #44]	; (80056f4 <TIM_Base_SetConfig+0x128>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d103      	bne.n	80056d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	615a      	str	r2, [r3, #20]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40013400 	.word	0x40013400
 80056f4:	40015000 	.word	0x40015000
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40014400 	.word	0x40014400
 8005700:	40014800 	.word	0x40014800

08005704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 0302 	bic.w	r3, r3, #2
 8005750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a30      	ldr	r2, [pc, #192]	; (8005820 <TIM_OC1_SetConfig+0x11c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <TIM_OC1_SetConfig+0x88>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2f      	ldr	r2, [pc, #188]	; (8005824 <TIM_OC1_SetConfig+0x120>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_OC1_SetConfig+0x88>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2e      	ldr	r2, [pc, #184]	; (8005828 <TIM_OC1_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_OC1_SetConfig+0x88>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2d      	ldr	r2, [pc, #180]	; (800582c <TIM_OC1_SetConfig+0x128>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC1_SetConfig+0x88>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a2c      	ldr	r2, [pc, #176]	; (8005830 <TIM_OC1_SetConfig+0x12c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC1_SetConfig+0x88>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a2b      	ldr	r2, [pc, #172]	; (8005834 <TIM_OC1_SetConfig+0x130>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10c      	bne.n	80057a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0308 	bic.w	r3, r3, #8
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 0304 	bic.w	r3, r3, #4
 80057a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <TIM_OC1_SetConfig+0x11c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <TIM_OC1_SetConfig+0xd2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <TIM_OC1_SetConfig+0x120>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00f      	beq.n	80057d6 <TIM_OC1_SetConfig+0xd2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <TIM_OC1_SetConfig+0x124>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <TIM_OC1_SetConfig+0xd2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1a      	ldr	r2, [pc, #104]	; (800582c <TIM_OC1_SetConfig+0x128>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <TIM_OC1_SetConfig+0xd2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <TIM_OC1_SetConfig+0x12c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_OC1_SetConfig+0xd2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <TIM_OC1_SetConfig+0x130>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d111      	bne.n	80057fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800
 8005834:	40015000 	.word	0x40015000

08005838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f023 0210 	bic.w	r2, r3, #16
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0320 	bic.w	r3, r3, #32
 8005886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_OC2_SetConfig+0x10c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d007      	beq.n	80058ac <TIM_OC2_SetConfig+0x74>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <TIM_OC2_SetConfig+0x110>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_OC2_SetConfig+0x74>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a29      	ldr	r2, [pc, #164]	; (800594c <TIM_OC2_SetConfig+0x114>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d10d      	bne.n	80058c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <TIM_OC2_SetConfig+0x10c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <TIM_OC2_SetConfig+0xc0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <TIM_OC2_SetConfig+0x110>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <TIM_OC2_SetConfig+0xc0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <TIM_OC2_SetConfig+0x118>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_OC2_SetConfig+0xc0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <TIM_OC2_SetConfig+0x11c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_OC2_SetConfig+0xc0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <TIM_OC2_SetConfig+0x120>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0xc0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC2_SetConfig+0x114>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d113      	bne.n	8005920 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058fe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005906:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40013400 	.word	0x40013400
 800594c:	40015000 	.word	0x40015000
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2b      	ldr	r2, [pc, #172]	; (8005a68 <TIM_OC3_SetConfig+0x10c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <TIM_OC3_SetConfig+0x72>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <TIM_OC3_SetConfig+0x110>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_OC3_SetConfig+0x72>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <TIM_OC3_SetConfig+0x114>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10d      	bne.n	80059ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <TIM_OC3_SetConfig+0x10c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <TIM_OC3_SetConfig+0xbe>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <TIM_OC3_SetConfig+0x110>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00f      	beq.n	8005a1a <TIM_OC3_SetConfig+0xbe>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1d      	ldr	r2, [pc, #116]	; (8005a74 <TIM_OC3_SetConfig+0x118>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_OC3_SetConfig+0xbe>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1c      	ldr	r2, [pc, #112]	; (8005a78 <TIM_OC3_SetConfig+0x11c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_OC3_SetConfig+0xbe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <TIM_OC3_SetConfig+0x120>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_OC3_SetConfig+0xbe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <TIM_OC3_SetConfig+0x114>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d113      	bne.n	8005a42 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40013400 	.word	0x40013400
 8005a70:	40015000 	.word	0x40015000
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40014400 	.word	0x40014400
 8005a7c:	40014800 	.word	0x40014800

08005a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <TIM_OC4_SetConfig+0xc4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <TIM_OC4_SetConfig+0x8c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <TIM_OC4_SetConfig+0xc8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00f      	beq.n	8005b0c <TIM_OC4_SetConfig+0x8c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <TIM_OC4_SetConfig+0xcc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_OC4_SetConfig+0x8c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <TIM_OC4_SetConfig+0xd0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_OC4_SetConfig+0x8c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <TIM_OC4_SetConfig+0xd4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC4_SetConfig+0x8c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <TIM_OC4_SetConfig+0xd8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d109      	bne.n	8005b20 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800
 8005b58:	40015000 	.word	0x40015000

08005b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a19      	ldr	r2, [pc, #100]	; (8005c18 <TIM_OC5_SetConfig+0xbc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <TIM_OC5_SetConfig+0xc0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00f      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <TIM_OC5_SetConfig+0xc4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <TIM_OC5_SetConfig+0xc8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <TIM_OC5_SetConfig+0xcc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <TIM_OC5_SetConfig+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d109      	bne.n	8005bf2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	621a      	str	r2, [r3, #32]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800
 8005c2c:	40015000 	.word	0x40015000

08005c30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	051b      	lsls	r3, r3, #20
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a19      	ldr	r2, [pc, #100]	; (8005cec <TIM_OC6_SetConfig+0xbc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <TIM_OC6_SetConfig+0xc0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00f      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <TIM_OC6_SetConfig+0xc4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <TIM_OC6_SetConfig+0xc8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <TIM_OC6_SetConfig+0xcc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <TIM_OC6_SetConfig+0xd0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d109      	bne.n	8005cc8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	029b      	lsls	r3, r3, #10
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40013400 	.word	0x40013400
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40014400 	.word	0x40014400
 8005cfc:	40014800 	.word	0x40014800
 8005d00:	40015000 	.word	0x40015000

08005d04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0201 	bic.w	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <TIM_TI1_SetConfig+0xc0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d017      	beq.n	8005d62 <TIM_TI1_SetConfig+0x5e>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d013      	beq.n	8005d62 <TIM_TI1_SetConfig+0x5e>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <TIM_TI1_SetConfig+0xc4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00f      	beq.n	8005d62 <TIM_TI1_SetConfig+0x5e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <TIM_TI1_SetConfig+0xc8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00b      	beq.n	8005d62 <TIM_TI1_SetConfig+0x5e>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a20      	ldr	r2, [pc, #128]	; (8005dd0 <TIM_TI1_SetConfig+0xcc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d007      	beq.n	8005d62 <TIM_TI1_SetConfig+0x5e>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <TIM_TI1_SetConfig+0xd0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_TI1_SetConfig+0x5e>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <TIM_TI1_SetConfig+0xd4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <TIM_TI1_SetConfig+0x62>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <TIM_TI1_SetConfig+0x64>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e003      	b.n	8005d86 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f023 030a 	bic.w	r3, r3, #10
 8005da0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f003 030a 	and.w	r3, r3, #10
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40015000 	.word	0x40015000

08005ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f023 030a 	bic.w	r3, r3, #10
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0210 	bic.w	r2, r3, #16
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	031b      	lsls	r3, r3, #12
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	f023 0210 	bic.w	r2, r3, #16
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	031b      	lsls	r3, r3, #12
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b087      	sub	sp, #28
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	031b      	lsls	r3, r3, #12
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	031b      	lsls	r3, r3, #12
 8005fdc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	f043 0307 	orr.w	r3, r3, #7
 800601e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	609a      	str	r2, [r3, #8]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800604a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	431a      	orrs	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4313      	orrs	r3, r2
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr

0800606e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2201      	movs	r2, #1
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	43db      	mvns	r3, r3
 8006090:	401a      	ands	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	fa01 f303 	lsl.w	r3, r1, r3
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	621a      	str	r2, [r3, #32]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e06d      	b.n	80061ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a30      	ldr	r2, [pc, #192]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2f      	ldr	r2, [pc, #188]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2d      	ldr	r2, [pc, #180]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006114:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d01d      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d018      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1a      	ldr	r2, [pc, #104]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00e      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a15      	ldr	r2, [pc, #84]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d009      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a16      	ldr	r2, [pc, #88]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10c      	bne.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	4313      	orrs	r3, r2
 8006190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40013400 	.word	0x40013400
 80061c0:	40015000 	.word	0x40015000
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40014000 	.word	0x40014000

080061d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr

080061e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr
	...

08006208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e0a7      	b.n	800636a <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d12c      	bne.n	8006280 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a50      	ldr	r2, [pc, #320]	; (8006374 <HAL_I2C_Init+0x16c>)
 8006232:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a50      	ldr	r2, [pc, #320]	; (8006378 <HAL_I2C_Init+0x170>)
 8006238:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a4f      	ldr	r2, [pc, #316]	; (800637c <HAL_I2C_Init+0x174>)
 800623e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a4f      	ldr	r2, [pc, #316]	; (8006380 <HAL_I2C_Init+0x178>)
 8006244:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a4e      	ldr	r2, [pc, #312]	; (8006384 <HAL_I2C_Init+0x17c>)
 800624a:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a4e      	ldr	r2, [pc, #312]	; (8006388 <HAL_I2C_Init+0x180>)
 8006250:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a4d      	ldr	r2, [pc, #308]	; (800638c <HAL_I2C_Init+0x184>)
 8006256:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a4d      	ldr	r2, [pc, #308]	; (8006390 <HAL_I2C_Init+0x188>)
 800625c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a4c      	ldr	r2, [pc, #304]	; (8006394 <HAL_I2C_Init+0x18c>)
 8006262:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a4c      	ldr	r2, [pc, #304]	; (8006398 <HAL_I2C_Init+0x190>)
 8006268:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a49      	ldr	r2, [pc, #292]	; (800639c <HAL_I2C_Init+0x194>)
 8006276:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	; 0x24
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	e006      	b.n	80062dc <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80062da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d104      	bne.n	80062ee <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69d9      	ldr	r1, [r3, #28]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1a      	ldr	r2, [r3, #32]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	080067b1 	.word	0x080067b1
 8006378:	080067c3 	.word	0x080067c3
 800637c:	080067d5 	.word	0x080067d5
 8006380:	080067e7 	.word	0x080067e7
 8006384:	08006813 	.word	0x08006813
 8006388:	0800b965 	.word	0x0800b965
 800638c:	0800b985 	.word	0x0800b985
 8006390:	0800b9a5 	.word	0x0800b9a5
 8006394:	08006825 	.word	0x08006825
 8006398:	080067f9 	.word	0x080067f9
 800639c:	0800838d 	.word	0x0800838d

080063a0 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	817b      	strh	r3, [r7, #10]
 80063b2:	460b      	mov	r3, r1
 80063b4:	813b      	strh	r3, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	f040 80d5 	bne.w	8006572 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_I2C_Mem_Write_DMA+0x34>
 80063ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0c9      	b.n	8006574 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ee:	d101      	bne.n	80063f4 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
 80063f2:	e0bf      	b.n	8006574 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_I2C_Mem_Write_DMA+0x62>
 80063fe:	2302      	movs	r3, #2
 8006400:	e0b8      	b.n	8006574 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800640a:	f001 fdaf 	bl	8007f6c <HAL_GetTick>
 800640e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2221      	movs	r2, #33	; 0x21
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2240      	movs	r2, #64	; 0x40
 800641c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4a51      	ldr	r2, [pc, #324]	; (800657c <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a51      	ldr	r2, [pc, #324]	; (8006580 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 800643c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	2bff      	cmp	r3, #255	; 0xff
 8006446:	d906      	bls.n	8006456 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	22ff      	movs	r2, #255	; 0xff
 800644c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800644e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	e007      	b.n	8006466 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006464:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8006466:	88f8      	ldrh	r0, [r7, #6]
 8006468:	893a      	ldrh	r2, [r7, #8]
 800646a:	8979      	ldrh	r1, [r7, #10]
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	2319      	movs	r3, #25
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4603      	mov	r3, r0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fca2 	bl	8006dc0 <I2C_RequestMemoryWrite>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e072      	b.n	8006574 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	2b00      	cmp	r3, #0
 8006494:	d020      	beq.n	80064d8 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	4a3a      	ldr	r2, [pc, #232]	; (8006584 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 800649c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	4a39      	ldr	r2, [pc, #228]	; (8006588 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	2200      	movs	r2, #0
 80064ac:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	2200      	movs	r2, #0
 80064b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80064ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3328      	adds	r3, #40	; 0x28
 80064c2:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80064c8:	f7fd feb9 	bl	800423e <HAL_DMA_Start_IT>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d139      	bne.n	800654a <HAL_I2C_Mem_Write_DMA+0x1aa>
 80064d6:	e013      	b.n	8006500 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e039      	b.n	8006574 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	b2da      	uxtb	r2, r3
 8006506:	8979      	ldrh	r1, [r7, #10]
 8006508:	2300      	movs	r3, #0
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f001 fb2a 	bl	8007b68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800652e:	2110      	movs	r1, #16
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f001 fb45 	bl	8007bc0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006544:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e014      	b.n	8006574 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	f043 0210 	orr.w	r2, r3, #16
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	ffff0000 	.word	0xffff0000
 8006580:	08006a3d 	.word	0x08006a3d
 8006584:	080077e5 	.word	0x080077e5
 8006588:	08007911 	.word	0x08007911

0800658c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	; 0x28
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	817b      	strh	r3, [r7, #10]
 800659e:	460b      	mov	r3, r1
 80065a0:	813b      	strh	r3, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f040 80d5 	bne.w	800675e <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_I2C_Mem_Read_DMA+0x34>
 80065ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d105      	bne.n	80065cc <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0c9      	b.n	8006760 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065da:	d101      	bne.n	80065e0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
 80065de:	e0bf      	b.n	8006760 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_I2C_Mem_Read_DMA+0x62>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e0b8      	b.n	8006760 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065f6:	f001 fcb9 	bl	8007f6c <HAL_GetTick>
 80065fa:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2222      	movs	r2, #34	; 0x22
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2240      	movs	r2, #64	; 0x40
 8006608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800661c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a51      	ldr	r2, [pc, #324]	; (8006768 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8006622:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a51      	ldr	r2, [pc, #324]	; (800676c <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8006628:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	2bff      	cmp	r3, #255	; 0xff
 8006632:	d906      	bls.n	8006642 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	22ff      	movs	r2, #255	; 0xff
 8006638:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800663a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e007      	b.n	8006652 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800664c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006650:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006652:	88f8      	ldrh	r0, [r7, #6]
 8006654:	893a      	ldrh	r2, [r7, #8]
 8006656:	8979      	ldrh	r1, [r7, #10]
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	2319      	movs	r3, #25
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	4603      	mov	r3, r0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fc00 	bl	8006e68 <I2C_RequestMemoryRead>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e072      	b.n	8006760 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d020      	beq.n	80066c4 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	4a3a      	ldr	r2, [pc, #232]	; (8006770 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8006688:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	4a39      	ldr	r2, [pc, #228]	; (8006774 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8006690:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	2200      	movs	r2, #0
 8006698:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669e:	2200      	movs	r2, #0
 80066a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3324      	adds	r3, #36	; 0x24
 80066ac:	4619      	mov	r1, r3
 80066ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80066b4:	f7fd fdc3 	bl	800423e <HAL_DMA_Start_IT>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d139      	bne.n	8006736 <HAL_I2C_Mem_Read_DMA+0x1aa>
 80066c2:	e013      	b.n	80066ec <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e039      	b.n	8006760 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	8979      	ldrh	r1, [r7, #10]
 80066f4:	4b20      	ldr	r3, [pc, #128]	; (8006778 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f001 fa34 	bl	8007b68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800671a:	2110      	movs	r1, #16
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f001 fa4f 	bl	8007bc0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006730:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e014      	b.n	8006760 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	f043 0210 	orr.w	r2, r3, #16
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800675e:	2302      	movs	r3, #2
  }
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	ffff0000 	.word	0xffff0000
 800676c:	08006a3d 	.word	0x08006a3d
 8006770:	0800787b 	.word	0x0800787b
 8006774:	08007911 	.word	0x08007911
 8006778:	80002400 	.word	0x80002400

0800677c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
  }
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr

080067e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
 8006804:	4613      	mov	r3, r2
 8006806:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr

08006812 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <I2C_Slave_ISR_IT+0x24>
 800686c:	2302      	movs	r3, #2
 800686e:	e0e1      	b.n	8006a34 <I2C_Slave_ISR_IT+0x1e8>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800688c:	6939      	ldr	r1, [r7, #16]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fd2c 	bl	80072ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f003 0310 	and.w	r3, r3, #16
 800689a:	2b00      	cmp	r3, #0
 800689c:	d04b      	beq.n	8006936 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d046      	beq.n	8006936 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d128      	bne.n	8006904 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b28      	cmp	r3, #40	; 0x28
 80068bc:	d108      	bne.n	80068d0 <I2C_Slave_ISR_IT+0x84>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068c4:	d104      	bne.n	80068d0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80068c6:	6939      	ldr	r1, [r7, #16]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fe19 	bl	8007500 <I2C_ITListenCplt>
 80068ce:	e031      	b.n	8006934 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b29      	cmp	r3, #41	; 0x29
 80068da:	d10e      	bne.n	80068fa <I2C_Slave_ISR_IT+0xae>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068e2:	d00a      	beq.n	80068fa <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2210      	movs	r2, #16
 80068ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 ff56 	bl	800779e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fbcf 	bl	8007096 <I2C_ITSlaveSeqCplt>
 80068f8:	e01c      	b.n	8006934 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2210      	movs	r2, #16
 8006900:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006902:	e08f      	b.n	8006a24 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2210      	movs	r2, #16
 800690a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006910:	f043 0204 	orr.w	r2, r3, #4
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <I2C_Slave_ISR_IT+0xda>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006924:	d17e      	bne.n	8006a24 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	4619      	mov	r1, r3
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fe3d 	bl	80075ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006932:	e077      	b.n	8006a24 <I2C_Slave_ISR_IT+0x1d8>
 8006934:	e076      	b.n	8006a24 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d02f      	beq.n	80069a0 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02a      	beq.n	80069a0 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d018      	beq.n	8006986 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d14b      	bne.n	8006a28 <I2C_Slave_ISR_IT+0x1dc>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006996:	d047      	beq.n	8006a28 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fb7c 	bl	8007096 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800699e:	e043      	b.n	8006a28 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80069b4:	6939      	ldr	r1, [r7, #16]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 faaa 	bl	8006f10 <I2C_ITAddrCplt>
 80069bc:	e035      	b.n	8006a2a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d030      	beq.n	8006a2a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d02b      	beq.n	8006a2a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d018      	beq.n	8006a0e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a0c:	e00d      	b.n	8006a2a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a14:	d002      	beq.n	8006a1c <I2C_Slave_ISR_IT+0x1d0>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fb3a 	bl	8007096 <I2C_ITSlaveSeqCplt>
 8006a22:	e002      	b.n	8006a2a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006a24:	bf00      	nop
 8006a26:	e000      	b.n	8006a2a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006a28:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <I2C_Master_ISR_DMA+0x1a>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e0d9      	b.n	8006c0a <I2C_Master_ISR_DMA+0x1ce>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d016      	beq.n	8006a96 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d011      	beq.n	8006a96 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2210      	movs	r2, #16
 8006a78:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7e:	f043 0204 	orr.w	r2, r3, #4
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a86:	2120      	movs	r1, #32
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f001 f899 	bl	8007bc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fe85 	bl	800779e <I2C_Flush_TXDR>
 8006a94:	e0b4      	b.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d071      	beq.n	8006b84 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d06c      	beq.n	8006b84 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d04e      	beq.n	8006b62 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ad0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2bff      	cmp	r3, #255	; 0xff
 8006ada:	d906      	bls.n	8006aea <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e010      	b.n	8006b0c <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006afc:	d003      	beq.n	8006b06 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e002      	b.n	8006b0c <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b0a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	8a79      	ldrh	r1, [r7, #18]
 8006b14:	2300      	movs	r3, #0
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f001 f824 	bl	8007b68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b22      	cmp	r3, #34	; 0x22
 8006b3c:	d108      	bne.n	8006b50 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b4e:	e057      	b.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b5e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b60:	e04e      	b.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b70:	d003      	beq.n	8006b7a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fa50 	bl	8007018 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006b78:	e042      	b.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b7a:	2140      	movs	r1, #64	; 0x40
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fd15 	bl	80075ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006b82:	e03d      	b.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d028      	beq.n	8006be0 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d023      	beq.n	8006be0 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d119      	bne.n	8006bd6 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb0:	d025      	beq.n	8006bfe <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bba:	d108      	bne.n	8006bce <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006bcc:	e017      	b.n	8006bfe <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fa22 	bl	8007018 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006bd4:	e013      	b.n	8006bfe <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006bd6:	2140      	movs	r1, #64	; 0x40
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fce7 	bl	80075ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006bde:	e00e      	b.n	8006bfe <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 faac 	bl	8007154 <I2C_ITMasterCplt>
 8006bfc:	e000      	b.n	8006c00 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006bfe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <I2C_Slave_ISR_DMA+0x24>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e0bf      	b.n	8006db6 <I2C_Slave_ISR_DMA+0x1a4>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fb49 	bl	80072ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8095 	beq.w	8006d90 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 808f 	beq.w	8006d90 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d07d      	beq.n	8006d82 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00c      	beq.n	8006ca8 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <I2C_Slave_ISR_DMA+0x96>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <I2C_Slave_ISR_DMA+0xb8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d128      	bne.n	8006d22 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b28      	cmp	r3, #40	; 0x28
 8006cda:	d108      	bne.n	8006cee <I2C_Slave_ISR_DMA+0xdc>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ce2:	d104      	bne.n	8006cee <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fc0a 	bl	8007500 <I2C_ITListenCplt>
 8006cec:	e048      	b.n	8006d80 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b29      	cmp	r3, #41	; 0x29
 8006cf8:	d10e      	bne.n	8006d18 <I2C_Slave_ISR_DMA+0x106>
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d00:	d00a      	beq.n	8006d18 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2210      	movs	r2, #16
 8006d08:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fd47 	bl	800779e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f9c0 	bl	8007096 <I2C_ITSlaveSeqCplt>
 8006d16:	e033      	b.n	8006d80 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2210      	movs	r2, #16
 8006d1e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006d20:	e034      	b.n	8006d8c <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2210      	movs	r2, #16
 8006d28:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	f043 0204 	orr.w	r2, r3, #4
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <I2C_Slave_ISR_DMA+0x13a>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d4a:	d11f      	bne.n	8006d8c <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	2b21      	cmp	r3, #33	; 0x21
 8006d50:	d002      	beq.n	8006d58 <I2C_Slave_ISR_DMA+0x146>
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	2b29      	cmp	r3, #41	; 0x29
 8006d56:	d103      	bne.n	8006d60 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2221      	movs	r2, #33	; 0x21
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d5e:	e008      	b.n	8006d72 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b22      	cmp	r3, #34	; 0x22
 8006d64:	d002      	beq.n	8006d6c <I2C_Slave_ISR_DMA+0x15a>
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6a:	d102      	bne.n	8006d72 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2222      	movs	r2, #34	; 0x22
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	4619      	mov	r1, r3
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fc17 	bl	80075ac <I2C_ITError>
      if (treatdmanack == 1U)
 8006d7e:	e005      	b.n	8006d8c <I2C_Slave_ISR_DMA+0x17a>
 8006d80:	e004      	b.n	8006d8c <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2210      	movs	r2, #16
 8006d88:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d8a:	e00f      	b.n	8006dac <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8006d8c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d8e:	e00d      	b.n	8006dac <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d008      	beq.n	8006dac <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f8b2 	bl	8006f10 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4603      	mov	r3, r0
 8006dd0:	817b      	strh	r3, [r7, #10]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	813b      	strh	r3, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	8979      	ldrh	r1, [r7, #10]
 8006de0:	4b20      	ldr	r3, [pc, #128]	; (8006e64 <I2C_RequestMemoryWrite+0xa4>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 febd 	bl	8007b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	69b9      	ldr	r1, [r7, #24]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fe01 	bl	80079fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e02c      	b.n	8006e5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d105      	bne.n	8006e14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e08:	893b      	ldrh	r3, [r7, #8]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	629a      	str	r2, [r3, #40]	; 0x28
 8006e12:	e015      	b.n	8006e40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e14:	893b      	ldrh	r3, [r7, #8]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	69b9      	ldr	r1, [r7, #24]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 fde7 	bl	80079fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e012      	b.n	8006e5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e36:	893b      	ldrh	r3, [r7, #8]
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2200      	movs	r2, #0
 8006e48:	2180      	movs	r1, #128	; 0x80
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fd95 	bl	800797a <I2C_WaitOnFlagUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	80002000 	.word	0x80002000

08006e68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	817b      	strh	r3, [r7, #10]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	813b      	strh	r3, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	8979      	ldrh	r1, [r7, #10]
 8006e88:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <I2C_RequestMemoryRead+0xa4>)
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fe6a 	bl	8007b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fdae 	bl	80079fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e02c      	b.n	8006f02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d105      	bne.n	8006eba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eae:	893b      	ldrh	r3, [r7, #8]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8006eb8:	e015      	b.n	8006ee6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006eba:	893b      	ldrh	r3, [r7, #8]
 8006ebc:	0a1b      	lsrs	r3, r3, #8
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	69b9      	ldr	r1, [r7, #24]
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fd94 	bl	80079fa <I2C_WaitOnTXISFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e012      	b.n	8006f02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006edc:	893b      	ldrh	r3, [r7, #8]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2200      	movs	r2, #0
 8006eee:	2140      	movs	r1, #64	; 0x40
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fd42 	bl	800797a <I2C_WaitOnFlagUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e000      	b.n	8006f02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	80002000 	.word	0x80002000

08006f10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f26:	2b28      	cmp	r3, #40	; 0x28
 8006f28:	d16a      	bne.n	8007000 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	0c1b      	lsrs	r3, r3, #16
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006f48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006f64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d138      	bne.n	8006fe0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f6e:	897b      	ldrh	r3, [r7, #10]
 8006f70:	09db      	lsrs	r3, r3, #7
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	89bb      	ldrh	r3, [r7, #12]
 8006f76:	4053      	eors	r3, r2
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f003 0306 	and.w	r3, r3, #6
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d11c      	bne.n	8006fbc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f82:	897b      	ldrh	r3, [r7, #10]
 8006f84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d13b      	bne.n	8007010 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	89ba      	ldrh	r2, [r7, #12]
 8006fb4:	7bf9      	ldrb	r1, [r7, #15]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006fba:	e029      	b.n	8007010 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fe5d 	bl	8007c84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	89ba      	ldrh	r2, [r7, #12]
 8006fd8:	7bf9      	ldrb	r1, [r7, #15]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
}
 8006fde:	e017      	b.n	8007010 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fe4d 	bl	8007c84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	89ba      	ldrh	r2, [r7, #12]
 8006ff8:	7bf9      	ldrb	r1, [r7, #15]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
}
 8006ffe:	e007      	b.n	8007010 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2208      	movs	r2, #8
 8007006:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b21      	cmp	r3, #33	; 0x21
 8007032:	d116      	bne.n	8007062 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2211      	movs	r2, #17
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007048:	2101      	movs	r1, #1
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fe1a 	bl	8007c84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007060:	e015      	b.n	800708e <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2212      	movs	r2, #18
 800706e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007076:	2102      	movs	r1, #2
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fe03 	bl	8007c84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e00c      	b.n	80070e4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070e2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b29      	cmp	r3, #41	; 0x29
 80070ee:	d113      	bne.n	8007118 <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2228      	movs	r2, #40	; 0x28
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2221      	movs	r2, #33	; 0x21
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070fe:	2101      	movs	r1, #1
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fdbf 	bl	8007c84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8007116:	e018      	b.n	800714a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b2a      	cmp	r3, #42	; 0x2a
 8007122:	d112      	bne.n	800714a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2228      	movs	r2, #40	; 0x28
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2222      	movs	r2, #34	; 0x22
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007132:	2102      	movs	r1, #2
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fda5 	bl	8007c84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2220      	movs	r2, #32
 8007168:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b21      	cmp	r3, #33	; 0x21
 8007174:	d107      	bne.n	8007186 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007176:	2101      	movs	r1, #1
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fd83 	bl	8007c84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2211      	movs	r2, #17
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
 8007184:	e00c      	b.n	80071a0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b22      	cmp	r3, #34	; 0x22
 8007190:	d106      	bne.n	80071a0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007192:	2102      	movs	r1, #2
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fd75 	bl	8007c84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2212      	movs	r2, #18
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6859      	ldr	r1, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	4b4e      	ldr	r3, [pc, #312]	; (80072e4 <I2C_ITMasterCplt+0x190>)
 80071ac:	400b      	ands	r3, r1
 80071ae:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a4b      	ldr	r2, [pc, #300]	; (80072e8 <I2C_ITMasterCplt+0x194>)
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2210      	movs	r2, #16
 80071cc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	f043 0204 	orr.w	r2, r3, #4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b60      	cmp	r3, #96	; 0x60
 80071e4:	d10a      	bne.n	80071fc <I2C_ITMasterCplt+0xa8>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80071fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 face 	bl	800779e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b60      	cmp	r3, #96	; 0x60
 8007212:	d002      	beq.n	800721a <I2C_ITMasterCplt+0xc6>
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d006      	beq.n	8007228 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f9c3 	bl	80075ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007226:	e058      	b.n	80072da <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b21      	cmp	r3, #33	; 0x21
 8007232:	d126      	bne.n	8007282 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d10c      	bne.n	8007268 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
}
 8007266:	e038      	b.n	80072da <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
}
 8007280:	e02b      	b.n	80072da <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b22      	cmp	r3, #34	; 0x22
 800728c:	d125      	bne.n	80072da <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d10c      	bne.n	80072c2 <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
}
 80072c0:	e00b      	b.n	80072da <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
}
 80072da:	bf00      	nop
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	fe00e800 	.word	0xfe00e800
 80072e8:	ffff0000 	.word	0xffff0000

080072ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007308:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2220      	movs	r2, #32
 8007310:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b21      	cmp	r3, #33	; 0x21
 8007316:	d002      	beq.n	800731e <I2C_ITSlaveCplt+0x32>
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b29      	cmp	r3, #41	; 0x29
 800731c:	d108      	bne.n	8007330 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800731e:	f248 0101 	movw	r1, #32769	; 0x8001
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fcae 	bl	8007c84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2221      	movs	r2, #33	; 0x21
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
 800732e:	e00d      	b.n	800734c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2b22      	cmp	r3, #34	; 0x22
 8007334:	d002      	beq.n	800733c <I2C_ITSlaveCplt+0x50>
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b2a      	cmp	r3, #42	; 0x2a
 800733a:	d107      	bne.n	800734c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800733c:	f248 0102 	movw	r1, #32770	; 0x8002
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fc9f 	bl	8007c84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2222      	movs	r2, #34	; 0x22
 800734a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800735a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6859      	ldr	r1, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b64      	ldr	r3, [pc, #400]	; (80074f8 <I2C_ITSlaveCplt+0x20c>)
 8007368:	400b      	ands	r3, r1
 800736a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fa16 	bl	800779e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d013      	beq.n	80073a4 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800738a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01f      	beq.n	80073d4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073a2:	e017      	b.n	80073d4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d012      	beq.n	80073d4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d006      	beq.n	80073d4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d020      	beq.n	8007420 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 0304 	bic.w	r3, r3, #4
 80073e4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00c      	beq.n	8007420 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	f043 0204 	orr.w	r2, r3, #4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8aa 	bl	80075ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b28      	cmp	r3, #40	; 0x28
 8007462:	d144      	bne.n	80074ee <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007464:	6979      	ldr	r1, [r7, #20]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f84a 	bl	8007500 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800746c:	e03f      	b.n	80074ee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007476:	d015      	beq.n	80074a4 <I2C_ITSlaveCplt+0x1b8>
    I2C_ITSlaveSeqCplt(hi2c);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fe0c 	bl	8007096 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <I2C_ITSlaveCplt+0x210>)
 8007482:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
}
 80074a2:	e024      	b.n	80074ee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b22      	cmp	r3, #34	; 0x22
 80074ae:	d10f      	bne.n	80074d0 <I2C_ITSlaveCplt+0x1e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
}
 80074ce:	e00e      	b.n	80074ee <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	fe00e800 	.word	0xfe00e800
 80074fc:	ffff0000 	.word	0xffff0000

08007500 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a26      	ldr	r2, [pc, #152]	; (80075a8 <I2C_ITListenCplt+0xa8>)
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d022      	beq.n	800757c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d012      	beq.n	800757c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007574:	f043 0204 	orr.w	r2, r3, #4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800757c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb7f 	bl	8007c84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2210      	movs	r2, #16
 800758c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	ffff0000 	.word	0xffff0000

080075ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a5d      	ldr	r2, [pc, #372]	; (8007740 <I2C_ITError+0x194>)
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b28      	cmp	r3, #40	; 0x28
 80075e2:	d005      	beq.n	80075f0 <I2C_ITError+0x44>
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	2b29      	cmp	r3, #41	; 0x29
 80075e8:	d002      	beq.n	80075f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b2a      	cmp	r3, #42	; 0x2a
 80075ee:	d10b      	bne.n	8007608 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80075f0:	2103      	movs	r1, #3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb46 	bl	8007c84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2228      	movs	r2, #40	; 0x28
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a50      	ldr	r2, [pc, #320]	; (8007744 <I2C_ITError+0x198>)
 8007604:	635a      	str	r2, [r3, #52]	; 0x34
 8007606:	e011      	b.n	800762c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007608:	f248 0103 	movw	r1, #32771	; 0x8003
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb39 	bl	8007c84 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b60      	cmp	r3, #96	; 0x60
 800761c:	d003      	beq.n	8007626 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d039      	beq.n	80076ae <I2C_ITError+0x102>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b11      	cmp	r3, #17
 800763e:	d002      	beq.n	8007646 <I2C_ITError+0x9a>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b21      	cmp	r3, #33	; 0x21
 8007644:	d133      	bne.n	80076ae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007654:	d107      	bne.n	8007666 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007664:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	4618      	mov	r0, r3
 800766c:	f7fc ff5f 	bl	800452e <HAL_DMA_GetState>
 8007670:	4603      	mov	r3, r0
 8007672:	2b01      	cmp	r3, #1
 8007674:	d017      	beq.n	80076a6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	4a33      	ldr	r2, [pc, #204]	; (8007748 <I2C_ITError+0x19c>)
 800767c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	4618      	mov	r0, r3
 800768c:	f7fc fe6e 	bl	800436c <HAL_DMA_Abort_IT>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d04d      	beq.n	8007732 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076a4:	e045      	b.n	8007732 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f850 	bl	800774c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076ac:	e041      	b.n	8007732 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d039      	beq.n	800772a <I2C_ITError+0x17e>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b12      	cmp	r3, #18
 80076ba:	d002      	beq.n	80076c2 <I2C_ITError+0x116>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b22      	cmp	r3, #34	; 0x22
 80076c0:	d133      	bne.n	800772a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d0:	d107      	bne.n	80076e2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fc ff21 	bl	800452e <HAL_DMA_GetState>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d017      	beq.n	8007722 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	4a14      	ldr	r2, [pc, #80]	; (8007748 <I2C_ITError+0x19c>)
 80076f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	4618      	mov	r0, r3
 8007708:	f7fc fe30 	bl	800436c <HAL_DMA_Abort_IT>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d011      	beq.n	8007736 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007720:	e009      	b.n	8007736 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f812 	bl	800774c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007728:	e005      	b.n	8007736 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f80e 	bl	800774c <I2C_TreatErrorCallback>
  }
}
 8007730:	e002      	b.n	8007738 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007736:	bf00      	nop
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	ffff0000 	.word	0xffff0000
 8007744:	0800684d 	.word	0x0800684d
 8007748:	0800793f 	.word	0x0800793f

0800774c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b60      	cmp	r3, #96	; 0x60
 800775e:	d10f      	bne.n	8007780 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800777e:	e00a      	b.n	8007796 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d103      	bne.n	80077bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2200      	movs	r2, #0
 80077ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d007      	beq.n	80077da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0201 	orr.w	r2, r2, #1
 80077d8:	619a      	str	r2, [r3, #24]
  }
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007800:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007806:	b29b      	uxth	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800780c:	2120      	movs	r1, #32
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f9d6 	bl	8007bc0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007814:	e02d      	b.n	8007872 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800781e:	441a      	add	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	2bff      	cmp	r3, #255	; 0xff
 800782c:	d903      	bls.n	8007836 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	22ff      	movs	r2, #255	; 0xff
 8007832:	851a      	strh	r2, [r3, #40]	; 0x28
 8007834:	e004      	b.n	8007840 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	4619      	mov	r1, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3328      	adds	r3, #40	; 0x28
 8007850:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007856:	f7fc fcf2 	bl	800423e <HAL_DMA_Start_IT>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007860:	2110      	movs	r1, #16
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff fea2 	bl	80075ac <I2C_ITError>
}
 8007868:	e003      	b.n	8007872 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800786a:	2140      	movs	r1, #64	; 0x40
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f9a7 	bl	8007bc0 <I2C_Enable_IRQ>
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007896:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80078a2:	2120      	movs	r1, #32
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f98b 	bl	8007bc0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80078aa:	e02d      	b.n	8007908 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2bff      	cmp	r3, #255	; 0xff
 80078c2:	d903      	bls.n	80078cc <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	22ff      	movs	r2, #255	; 0xff
 80078c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80078ca:	e004      	b.n	80078d6 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3324      	adds	r3, #36	; 0x24
 80078e0:	4619      	mov	r1, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80078ec:	f7fc fca7 	bl	800423e <HAL_DMA_Start_IT>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d004      	beq.n	8007900 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80078f6:	2110      	movs	r1, #16
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff fe57 	bl	80075ac <I2C_ITError>
}
 80078fe:	e003      	b.n	8007908 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007900:	2140      	movs	r1, #64	; 0x40
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f95c 	bl	8007bc0 <I2C_Enable_IRQ>
}
 8007908:	bf00      	nop
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800792c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800792e:	2110      	movs	r1, #16
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fe3b 	bl	80075ac <I2C_ITError>
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	2200      	movs	r2, #0
 800795a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	2200      	movs	r2, #0
 800796a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff feed 	bl	800774c <I2C_TreatErrorCallback>
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800798a:	e022      	b.n	80079d2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007992:	d01e      	beq.n	80079d2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007994:	f000 faea 	bl	8007f6c <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d302      	bcc.n	80079aa <I2C_WaitOnFlagUntilTimeout+0x30>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d113      	bne.n	80079d2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e00f      	b.n	80079f2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4013      	ands	r3, r2
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	429a      	cmp	r2, r3
 80079e0:	bf0c      	ite	eq
 80079e2:	2301      	moveq	r3, #1
 80079e4:	2300      	movne	r3, #0
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	461a      	mov	r2, r3
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d0cd      	beq.n	800798c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a06:	e02c      	b.n	8007a62 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f835 	bl	8007a7c <I2C_IsAcknowledgeFailed>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e02a      	b.n	8007a72 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a22:	d01e      	beq.n	8007a62 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a24:	f000 faa2 	bl	8007f6c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d302      	bcc.n	8007a3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d113      	bne.n	8007a62 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e007      	b.n	8007a72 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d1cb      	bne.n	8007a08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d161      	bne.n	8007b5a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aa4:	d02b      	beq.n	8007afe <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ab4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ab6:	e022      	b.n	8007afe <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	d01e      	beq.n	8007afe <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac0:	f000 fa54 	bl	8007f6c <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d302      	bcc.n	8007ad6 <I2C_IsAcknowledgeFailed+0x5a>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d113      	bne.n	8007afe <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	f043 0220 	orr.w	r2, r3, #32
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e02e      	b.n	8007b5c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d1d5      	bne.n	8007ab8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2210      	movs	r2, #16
 8007b12:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff fe3e 	bl	800779e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6859      	ldr	r1, [r3, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	; (8007b64 <I2C_IsAcknowledgeFailed+0xe8>)
 8007b2e:	400b      	ands	r3, r1
 8007b30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	f043 0204 	orr.w	r2, r3, #4
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	fe00e800 	.word	0xfe00e800

08007b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	607b      	str	r3, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	817b      	strh	r3, [r7, #10]
 8007b76:	4613      	mov	r3, r2
 8007b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	0d5b      	lsrs	r3, r3, #21
 8007b84:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b88:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <I2C_TransferConfig+0x54>)
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	ea02 0103 	and.w	r1, r2, r3
 8007b92:	897b      	ldrh	r3, [r7, #10]
 8007b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b98:	7a7b      	ldrb	r3, [r7, #9]
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bc80      	pop	{r7}
 8007bba:	4770      	bx	lr
 8007bbc:	03ff63ff 	.word	0x03ff63ff

08007bc0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd4:	4a29      	ldr	r2, [pc, #164]	; (8007c7c <I2C_Enable_IRQ+0xbc>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d004      	beq.n	8007be4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007bde:	4a28      	ldr	r2, [pc, #160]	; (8007c80 <I2C_Enable_IRQ+0xc0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d11d      	bne.n	8007c20 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007be4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da03      	bge.n	8007bf4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007bf2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007bf4:	887b      	ldrh	r3, [r7, #2]
 8007bf6:	2b10      	cmp	r3, #16
 8007bf8:	d103      	bne.n	8007c02 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007c00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c02:	887b      	ldrh	r3, [r7, #2]
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d103      	bne.n	8007c10 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c10:	887b      	ldrh	r3, [r7, #2]
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d125      	bne.n	8007c62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c1e:	e020      	b.n	8007c62 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	da03      	bge.n	8007c30 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007c2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c30:	887b      	ldrh	r3, [r7, #2]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007c40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c42:	887b      	ldrh	r3, [r7, #2]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007c52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c54:	887b      	ldrh	r3, [r7, #2]
 8007c56:	2b20      	cmp	r3, #32
 8007c58:	d103      	bne.n	8007c62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f043 0320 	orr.w	r3, r3, #32
 8007c60:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6819      	ldr	r1, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr
 8007c7c:	08006a3d 	.word	0x08006a3d
 8007c80:	08006c13 	.word	0x08006c13

08007c84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c94:	887b      	ldrh	r3, [r7, #2]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00f      	beq.n	8007cbe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007ca4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cb2:	2b28      	cmp	r3, #40	; 0x28
 8007cb4:	d003      	beq.n	8007cbe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007cbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007cbe:	887b      	ldrh	r3, [r7, #2]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00f      	beq.n	8007ce8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007cce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cdc:	2b28      	cmp	r3, #40	; 0x28
 8007cde:	d003      	beq.n	8007ce8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007ce6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007ce8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	da03      	bge.n	8007cf8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007cf6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	2b10      	cmp	r3, #16
 8007cfc:	d103      	bne.n	8007d06 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007d04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d06:	887b      	ldrh	r3, [r7, #2]
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d103      	bne.n	8007d14 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f043 0320 	orr.w	r3, r3, #32
 8007d12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d14:	887b      	ldrh	r3, [r7, #2]
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d103      	bne.n	8007d22 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d20:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6819      	ldr	r1, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	43da      	mvns	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	400a      	ands	r2, r1
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr

08007d3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d138      	bne.n	8007dc6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e032      	b.n	8007dc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2224      	movs	r2, #36	; 0x24
 8007d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0201 	bic.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6819      	ldr	r1, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e000      	b.n	8007dc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007dc6:	2302      	movs	r3, #2
  }
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bc80      	pop	{r7}
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d139      	bne.n	8007e5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d101      	bne.n	8007df6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e033      	b.n	8007e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2224      	movs	r2, #36	; 0x24
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0201 	bic.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e000      	b.n	8007e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e5c:	2302      	movs	r3, #2
  }
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bc80      	pop	{r7}
 8007e66:	4770      	bx	lr

08007e68 <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e78:	d10e      	bne.n	8007e98 <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8007e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e7e:	4808      	ldr	r0, [pc, #32]	; (8007ea0 <HAL_GPIO_EXTI_Callback+0x38>)
 8007e80:	f7fc f950 	bl	8004124 <HAL_GPIO_ReadPin>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d103      	bne.n	8007e92 <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	f004 fc1e 	bl	800c6cc <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8007e90:	e002      	b.n	8007e98 <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 8007e92:	2000      	movs	r0, #0
 8007e94:	f004 fc1a 	bl	800c6cc <Rte_Write_PC13_Pin_State>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	48000800 	.word	0x48000800

08007ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007ea8:	bf00      	nop
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <HAL_Init+0x28>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a07      	ldr	r2, [pc, #28]	; (8007ed8 <HAL_Init+0x28>)
 8007eba:	f043 0310 	orr.w	r3, r3, #16
 8007ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ec0:	2003      	movs	r0, #3
 8007ec2:	f000 f929 	bl	8008118 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ec6:	200f      	movs	r0, #15
 8007ec8:	f000 f808 	bl	8007edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ecc:	f000 f966 	bl	800819c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	40022000 	.word	0x40022000

08007edc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ee4:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <HAL_InitTick+0x60>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <HAL_InitTick+0x64>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	4619      	mov	r1, r3
 8007eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f941 	bl	8008182 <HAL_SYSTICK_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e014      	b.n	8007f34 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b0f      	cmp	r3, #15
 8007f0e:	d810      	bhi.n	8007f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007f10:	2200      	movs	r2, #0
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	f000 f909 	bl	800812e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	210f      	movs	r1, #15
 8007f20:	f06f 0001 	mvn.w	r0, #1
 8007f24:	f000 f903 	bl	800812e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007f28:	4a06      	ldr	r2, [pc, #24]	; (8007f44 <HAL_InitTick+0x68>)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000000 	.word	0x20000000
 8007f40:	20000008 	.word	0x20000008
 8007f44:	20000004 	.word	0x20000004

08007f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <HAL_IncTick+0x1c>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_IncTick+0x20>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4413      	add	r3, r2
 8007f58:	4a03      	ldr	r2, [pc, #12]	; (8007f68 <HAL_IncTick+0x20>)
 8007f5a:	6013      	str	r3, [r2, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr
 8007f64:	20000008 	.word	0x20000008
 8007f68:	200001dc 	.word	0x200001dc

08007f6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8007f70:	4b02      	ldr	r3, [pc, #8]	; (8007f7c <HAL_GetTick+0x10>)
 8007f72:	681b      	ldr	r3, [r3, #0]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr
 8007f7c:	200001dc 	.word	0x200001dc

08007f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fb2:	4a04      	ldr	r2, [pc, #16]	; (8007fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	60d3      	str	r3, [r2, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	e000ed00 	.word	0xe000ed00

08007fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fcc:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	f003 0307 	and.w	r3, r3, #7
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bc80      	pop	{r7}
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	e000ed00 	.word	0xe000ed00

08007fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	db0b      	blt.n	800800e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	f003 021f 	and.w	r2, r3, #31
 8007ffc:	4906      	ldr	r1, [pc, #24]	; (8008018 <__NVIC_EnableIRQ+0x34>)
 8007ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	2001      	movs	r0, #1
 8008006:	fa00 f202 	lsl.w	r2, r0, r2
 800800a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr
 8008018:	e000e100 	.word	0xe000e100

0800801c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802c:	2b00      	cmp	r3, #0
 800802e:	db0a      	blt.n	8008046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	b2da      	uxtb	r2, r3
 8008034:	490c      	ldr	r1, [pc, #48]	; (8008068 <__NVIC_SetPriority+0x4c>)
 8008036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803a:	0112      	lsls	r2, r2, #4
 800803c:	b2d2      	uxtb	r2, r2
 800803e:	440b      	add	r3, r1
 8008040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008044:	e00a      	b.n	800805c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	4908      	ldr	r1, [pc, #32]	; (800806c <__NVIC_SetPriority+0x50>)
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	3b04      	subs	r3, #4
 8008054:	0112      	lsls	r2, r2, #4
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	440b      	add	r3, r1
 800805a:	761a      	strb	r2, [r3, #24]
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	e000e100 	.word	0xe000e100
 800806c:	e000ed00 	.word	0xe000ed00

08008070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008070:	b480      	push	{r7}
 8008072:	b089      	sub	sp, #36	; 0x24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f1c3 0307 	rsb	r3, r3, #7
 800808a:	2b04      	cmp	r3, #4
 800808c:	bf28      	it	cs
 800808e:	2304      	movcs	r3, #4
 8008090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	3304      	adds	r3, #4
 8008096:	2b06      	cmp	r3, #6
 8008098:	d902      	bls.n	80080a0 <NVIC_EncodePriority+0x30>
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	3b03      	subs	r3, #3
 800809e:	e000      	b.n	80080a2 <NVIC_EncodePriority+0x32>
 80080a0:	2300      	movs	r3, #0
 80080a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	43da      	mvns	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	401a      	ands	r2, r3
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080b8:	f04f 31ff 	mov.w	r1, #4294967295
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	fa01 f303 	lsl.w	r3, r1, r3
 80080c2:	43d9      	mvns	r1, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080c8:	4313      	orrs	r3, r2
         );
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3724      	adds	r7, #36	; 0x24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr

080080d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3b01      	subs	r3, #1
 80080e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080e4:	d301      	bcc.n	80080ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080e6:	2301      	movs	r3, #1
 80080e8:	e00f      	b.n	800810a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080ea:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <SysTick_Config+0x40>)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080f2:	210f      	movs	r1, #15
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	f7ff ff90 	bl	800801c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <SysTick_Config+0x40>)
 80080fe:	2200      	movs	r2, #0
 8008100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008102:	4b04      	ldr	r3, [pc, #16]	; (8008114 <SysTick_Config+0x40>)
 8008104:	2207      	movs	r2, #7
 8008106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	e000e010 	.word	0xe000e010

08008118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff ff2d 	bl	8007f80 <__NVIC_SetPriorityGrouping>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b086      	sub	sp, #24
 8008132:	af00      	add	r7, sp, #0
 8008134:	4603      	mov	r3, r0
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008140:	f7ff ff42 	bl	8007fc8 <__NVIC_GetPriorityGrouping>
 8008144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	6978      	ldr	r0, [r7, #20]
 800814c:	f7ff ff90 	bl	8008070 <NVIC_EncodePriority>
 8008150:	4602      	mov	r2, r0
 8008152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff ff5f 	bl	800801c <__NVIC_SetPriority>
}
 800815e:	bf00      	nop
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	4603      	mov	r3, r0
 800816e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff ff35 	bl	8007fe4 <__NVIC_EnableIRQ>
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff ffa2 	bl	80080d4 <SysTick_Config>
 8008190:	4603      	mov	r3, r0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081a2:	4b0e      	ldr	r3, [pc, #56]	; (80081dc <HAL_MspInit+0x40>)
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <HAL_MspInit+0x40>)
 80081a8:	f043 0301 	orr.w	r3, r3, #1
 80081ac:	6193      	str	r3, [r2, #24]
 80081ae:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <HAL_MspInit+0x40>)
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <HAL_MspInit+0x40>)
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	4a07      	ldr	r2, [pc, #28]	; (80081dc <HAL_MspInit+0x40>)
 80081c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081c4:	61d3      	str	r3, [r2, #28]
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <HAL_MspInit+0x40>)
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bc80      	pop	{r7}
 80081da:	4770      	bx	lr
 80081dc:	40021000 	.word	0x40021000

080081e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08c      	sub	sp, #48	; 0x30
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e8:	f107 031c 	add.w	r3, r7, #28
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	609a      	str	r2, [r3, #8]
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008200:	d156      	bne.n	80082b0 <HAL_ADC_MspInit+0xd0>



  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8008202:	4b5b      	ldr	r3, [pc, #364]	; (8008370 <HAL_ADC_MspInit+0x190>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3301      	adds	r3, #1
 8008208:	4a59      	ldr	r2, [pc, #356]	; (8008370 <HAL_ADC_MspInit+0x190>)
 800820a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800820c:	4b58      	ldr	r3, [pc, #352]	; (8008370 <HAL_ADC_MspInit+0x190>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d10b      	bne.n	800822c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008214:	4b57      	ldr	r3, [pc, #348]	; (8008374 <HAL_ADC_MspInit+0x194>)
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	4a56      	ldr	r2, [pc, #344]	; (8008374 <HAL_ADC_MspInit+0x194>)
 800821a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800821e:	6153      	str	r3, [r2, #20]
 8008220:	4b54      	ldr	r3, [pc, #336]	; (8008374 <HAL_ADC_MspInit+0x194>)
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	69bb      	ldr	r3, [r7, #24]
    }



    __HAL_RCC_GPIOA_CLK_ENABLE();
 800822c:	4b51      	ldr	r3, [pc, #324]	; (8008374 <HAL_ADC_MspInit+0x194>)
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	4a50      	ldr	r2, [pc, #320]	; (8008374 <HAL_ADC_MspInit+0x194>)
 8008232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008236:	6153      	str	r3, [r2, #20]
 8008238:	4b4e      	ldr	r3, [pc, #312]	; (8008374 <HAL_ADC_MspInit+0x194>)
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008244:	2301      	movs	r3, #1
 8008246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008248:	2303      	movs	r3, #3
 800824a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824c:	2300      	movs	r3, #0
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008250:	f107 031c 	add.w	r3, r7, #28
 8008254:	4619      	mov	r1, r3
 8008256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800825a:	f7fb fdd9 	bl	8003e10 <HAL_GPIO_Init>



    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800825e:	4b46      	ldr	r3, [pc, #280]	; (8008378 <HAL_ADC_MspInit+0x198>)
 8008260:	4a46      	ldr	r2, [pc, #280]	; (800837c <HAL_ADC_MspInit+0x19c>)
 8008262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008264:	4b44      	ldr	r3, [pc, #272]	; (8008378 <HAL_ADC_MspInit+0x198>)
 8008266:	2200      	movs	r2, #0
 8008268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800826a:	4b43      	ldr	r3, [pc, #268]	; (8008378 <HAL_ADC_MspInit+0x198>)
 800826c:	2200      	movs	r2, #0
 800826e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <HAL_ADC_MspInit+0x198>)
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008276:	4b40      	ldr	r3, [pc, #256]	; (8008378 <HAL_ADC_MspInit+0x198>)
 8008278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800827c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800827e:	4b3e      	ldr	r3, [pc, #248]	; (8008378 <HAL_ADC_MspInit+0x198>)
 8008280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008284:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008286:	4b3c      	ldr	r3, [pc, #240]	; (8008378 <HAL_ADC_MspInit+0x198>)
 8008288:	2220      	movs	r2, #32
 800828a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800828c:	4b3a      	ldr	r3, [pc, #232]	; (8008378 <HAL_ADC_MspInit+0x198>)
 800828e:	2200      	movs	r2, #0
 8008290:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008292:	4839      	ldr	r0, [pc, #228]	; (8008378 <HAL_ADC_MspInit+0x198>)
 8008294:	f7fb ff8c 	bl	80041b0 <HAL_DMA_Init>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <HAL_ADC_MspInit+0xc2>
    {
      Msp_Error_Handler();
 800829e:	f000 fa99 	bl	80087d4 <Msp_Error_Handler>
    }



    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a34      	ldr	r2, [pc, #208]	; (8008378 <HAL_ADC_MspInit+0x198>)
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38
 80082a8:	4a33      	ldr	r2, [pc, #204]	; (8008378 <HAL_ADC_MspInit+0x198>)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END ADC2_MspInit 1 */
  }



}
 80082ae:	e05a      	b.n	8008366 <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a32      	ldr	r2, [pc, #200]	; (8008380 <HAL_ADC_MspInit+0x1a0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d155      	bne.n	8008366 <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80082ba:	4b2d      	ldr	r3, [pc, #180]	; (8008370 <HAL_ADC_MspInit+0x190>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3301      	adds	r3, #1
 80082c0:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <HAL_ADC_MspInit+0x190>)
 80082c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80082c4:	4b2a      	ldr	r3, [pc, #168]	; (8008370 <HAL_ADC_MspInit+0x190>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d10b      	bne.n	80082e4 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80082cc:	4b29      	ldr	r3, [pc, #164]	; (8008374 <HAL_ADC_MspInit+0x194>)
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	4a28      	ldr	r2, [pc, #160]	; (8008374 <HAL_ADC_MspInit+0x194>)
 80082d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d6:	6153      	str	r3, [r2, #20]
 80082d8:	4b26      	ldr	r3, [pc, #152]	; (8008374 <HAL_ADC_MspInit+0x194>)
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082e4:	4b23      	ldr	r3, [pc, #140]	; (8008374 <HAL_ADC_MspInit+0x194>)
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	4a22      	ldr	r2, [pc, #136]	; (8008374 <HAL_ADC_MspInit+0x194>)
 80082ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ee:	6153      	str	r3, [r2, #20]
 80082f0:	4b20      	ldr	r3, [pc, #128]	; (8008374 <HAL_ADC_MspInit+0x194>)
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80082fc:	2310      	movs	r3, #16
 80082fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008300:	2303      	movs	r3, #3
 8008302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008304:	2300      	movs	r3, #0
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008308:	f107 031c 	add.w	r3, r7, #28
 800830c:	4619      	mov	r1, r3
 800830e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008312:	f7fb fd7d 	bl	8003e10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8008316:	4b1b      	ldr	r3, [pc, #108]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 8008318:	4a1b      	ldr	r2, [pc, #108]	; (8008388 <HAL_ADC_MspInit+0x1a8>)
 800831a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800831c:	4b19      	ldr	r3, [pc, #100]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 800831e:	2200      	movs	r2, #0
 8008320:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008322:	4b18      	ldr	r3, [pc, #96]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 8008324:	2200      	movs	r2, #0
 8008326:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008328:	4b16      	ldr	r3, [pc, #88]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800832e:	4b15      	ldr	r3, [pc, #84]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 8008330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008334:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008336:	4b13      	ldr	r3, [pc, #76]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 8008338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800833c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800833e:	4b11      	ldr	r3, [pc, #68]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 8008340:	2220      	movs	r2, #32
 8008342:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008344:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 8008346:	2200      	movs	r2, #0
 8008348:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800834a:	480e      	ldr	r0, [pc, #56]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 800834c:	f7fb ff30 	bl	80041b0 <HAL_DMA_Init>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <HAL_ADC_MspInit+0x17a>
      Msp_Error_Handler();
 8008356:	f000 fa3d 	bl	80087d4 <Msp_Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a09      	ldr	r2, [pc, #36]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
 8008360:	4a08      	ldr	r2, [pc, #32]	; (8008384 <HAL_ADC_MspInit+0x1a4>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008366:	bf00      	nop
 8008368:	3730      	adds	r7, #48	; 0x30
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200001e0 	.word	0x200001e0
 8008374:	40021000 	.word	0x40021000
 8008378:	2000023c 	.word	0x2000023c
 800837c:	40020008 	.word	0x40020008
 8008380:	50000100 	.word	0x50000100
 8008384:	200002d0 	.word	0x200002d0
 8008388:	40020408 	.word	0x40020408

0800838c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08a      	sub	sp, #40	; 0x28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008394:	f107 0314 	add.w	r3, r7, #20
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	609a      	str	r2, [r3, #8]
 80083a0:	60da      	str	r2, [r3, #12]
 80083a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a41      	ldr	r2, [pc, #260]	; (80084b0 <HAL_I2C_MspInit+0x124>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d17c      	bne.n	80084a8 <HAL_I2C_MspInit+0x11c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ae:	4b41      	ldr	r3, [pc, #260]	; (80084b4 <HAL_I2C_MspInit+0x128>)
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	4a40      	ldr	r2, [pc, #256]	; (80084b4 <HAL_I2C_MspInit+0x128>)
 80083b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083b8:	6153      	str	r3, [r2, #20]
 80083ba:	4b3e      	ldr	r3, [pc, #248]	; (80084b4 <HAL_I2C_MspInit+0x128>)
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80083c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80083ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083cc:	2312      	movs	r3, #18
 80083ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d0:	2300      	movs	r3, #0
 80083d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083d4:	2303      	movs	r3, #3
 80083d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80083d8:	2304      	movs	r3, #4
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083dc:	f107 0314 	add.w	r3, r7, #20
 80083e0:	4619      	mov	r1, r3
 80083e2:	4835      	ldr	r0, [pc, #212]	; (80084b8 <HAL_I2C_MspInit+0x12c>)
 80083e4:	f7fb fd14 	bl	8003e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80083e8:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <HAL_I2C_MspInit+0x128>)
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	4a31      	ldr	r2, [pc, #196]	; (80084b4 <HAL_I2C_MspInit+0x128>)
 80083ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f2:	61d3      	str	r3, [r2, #28]
 80083f4:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <HAL_I2C_MspInit+0x128>)
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8008400:	4b2e      	ldr	r3, [pc, #184]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008402:	4a2f      	ldr	r2, [pc, #188]	; (80084c0 <HAL_I2C_MspInit+0x134>)
 8008404:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008406:	4b2d      	ldr	r3, [pc, #180]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008408:	2200      	movs	r2, #0
 800840a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800840c:	4b2b      	ldr	r3, [pc, #172]	; (80084bc <HAL_I2C_MspInit+0x130>)
 800840e:	2200      	movs	r2, #0
 8008410:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008412:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008414:	2280      	movs	r2, #128	; 0x80
 8008416:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008418:	4b28      	ldr	r3, [pc, #160]	; (80084bc <HAL_I2C_MspInit+0x130>)
 800841a:	2200      	movs	r2, #0
 800841c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800841e:	4b27      	ldr	r3, [pc, #156]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008420:	2200      	movs	r2, #0
 8008422:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008426:	2200      	movs	r2, #0
 8008428:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800842a:	4b24      	ldr	r3, [pc, #144]	; (80084bc <HAL_I2C_MspInit+0x130>)
 800842c:	2200      	movs	r2, #0
 800842e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8008430:	4822      	ldr	r0, [pc, #136]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008432:	f7fb febd 	bl	80041b0 <HAL_DMA_Init>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <HAL_I2C_MspInit+0xb4>
    {
    	Msp_Error_Handler();
 800843c:	f000 f9ca 	bl	80087d4 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a1e      	ldr	r2, [pc, #120]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008444:	63da      	str	r2, [r3, #60]	; 0x3c
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <HAL_I2C_MspInit+0x130>)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800844c:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 800844e:	4a1e      	ldr	r2, [pc, #120]	; (80084c8 <HAL_I2C_MspInit+0x13c>)
 8008450:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 8008454:	2210      	movs	r2, #16
 8008456:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008458:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 800845a:	2200      	movs	r2, #0
 800845c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800845e:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 8008460:	2280      	movs	r2, #128	; 0x80
 8008462:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008464:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 8008466:	2200      	movs	r2, #0
 8008468:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800846a:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 800846c:	2200      	movs	r2, #0
 800846e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 8008472:	2200      	movs	r2, #0
 8008474:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 8008478:	2200      	movs	r2, #0
 800847a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800847c:	4811      	ldr	r0, [pc, #68]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 800847e:	f7fb fe97 	bl	80041b0 <HAL_DMA_Init>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <HAL_I2C_MspInit+0x100>
    {
    	Msp_Error_Handler();
 8008488:	f000 f9a4 	bl	80087d4 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a0d      	ldr	r2, [pc, #52]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 8008490:	639a      	str	r2, [r3, #56]	; 0x38
 8008492:	4a0c      	ldr	r2, [pc, #48]	; (80084c4 <HAL_I2C_MspInit+0x138>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	201f      	movs	r0, #31
 800849e:	f7ff fe46 	bl	800812e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80084a2:	201f      	movs	r0, #31
 80084a4:	f7ff fe5f 	bl	8008166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084a8:	bf00      	nop
 80084aa:	3728      	adds	r7, #40	; 0x28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40005400 	.word	0x40005400
 80084b4:	40021000 	.word	0x40021000
 80084b8:	48000400 	.word	0x48000400
 80084bc:	20000390 	.word	0x20000390
 80084c0:	40020080 	.word	0x40020080
 80084c4:	200003d4 	.word	0x200003d4
 80084c8:	4002006c 	.word	0x4002006c

080084cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	60da      	str	r2, [r3, #12]
 80084e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a1b      	ldr	r2, [pc, #108]	; (8008558 <HAL_SPI_MspInit+0x8c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d130      	bne.n	8008550 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80084ee:	4b1b      	ldr	r3, [pc, #108]	; (800855c <HAL_SPI_MspInit+0x90>)
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	4a1a      	ldr	r2, [pc, #104]	; (800855c <HAL_SPI_MspInit+0x90>)
 80084f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f8:	61d3      	str	r3, [r2, #28]
 80084fa:	4b18      	ldr	r3, [pc, #96]	; (800855c <HAL_SPI_MspInit+0x90>)
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008506:	4b15      	ldr	r3, [pc, #84]	; (800855c <HAL_SPI_MspInit+0x90>)
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	4a14      	ldr	r2, [pc, #80]	; (800855c <HAL_SPI_MspInit+0x90>)
 800850c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008510:	6153      	str	r3, [r2, #20]
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <HAL_SPI_MspInit+0x90>)
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800851e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008524:	2302      	movs	r3, #2
 8008526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800852c:	2303      	movs	r3, #3
 800852e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008530:	2306      	movs	r3, #6
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008534:	f107 0314 	add.w	r3, r7, #20
 8008538:	4619      	mov	r1, r3
 800853a:	4809      	ldr	r0, [pc, #36]	; (8008560 <HAL_SPI_MspInit+0x94>)
 800853c:	f7fb fc68 	bl	8003e10 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8008540:	2200      	movs	r2, #0
 8008542:	2100      	movs	r1, #0
 8008544:	2033      	movs	r0, #51	; 0x33
 8008546:	f7ff fdf2 	bl	800812e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800854a:	2033      	movs	r0, #51	; 0x33
 800854c:	f7ff fe0b 	bl	8008166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008550:	bf00      	nop
 8008552:	3728      	adds	r7, #40	; 0x28
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40003c00 	.word	0x40003c00
 800855c:	40021000 	.word	0x40021000
 8008560:	48000800 	.word	0x48000800

08008564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	; 0x28
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800856c:	f107 0314 	add.w	r3, r7, #20
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	60da      	str	r2, [r3, #12]
 800857a:	611a      	str	r2, [r3, #16]
	if(htim_base->Instance==TIM3)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a24      	ldr	r2, [pc, #144]	; (8008614 <HAL_TIM_Base_MspInit+0xb0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d131      	bne.n	80085ea <HAL_TIM_Base_MspInit+0x86>
	{
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 8008586:	4b24      	ldr	r3, [pc, #144]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	4a23      	ldr	r2, [pc, #140]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 800858c:	f043 0302 	orr.w	r3, r3, #2
 8008590:	61d3      	str	r3, [r2, #28]
 8008592:	4b21      	ldr	r3, [pc, #132]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800859e:	4b1e      	ldr	r3, [pc, #120]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	4a1d      	ldr	r2, [pc, #116]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 80085a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a8:	6153      	str	r3, [r2, #20]
 80085aa:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
		/**TIM3 GPIO Configuration
		PA6     ------> TIM3_CH1
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80085b6:	2340      	movs	r3, #64	; 0x40
 80085b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ba:	2302      	movs	r3, #2
 80085bc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c2:	2300      	movs	r3, #0
 80085c4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80085c6:	2302      	movs	r3, #2
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ca:	f107 0314 	add.w	r3, r7, #20
 80085ce:	4619      	mov	r1, r3
 80085d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085d4:	f7fb fc1c 	bl	8003e10 <HAL_GPIO_Init>

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	201d      	movs	r0, #29
 80085de:	f7ff fda6 	bl	800812e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80085e2:	201d      	movs	r0, #29
 80085e4:	f7ff fdbf 	bl	8008166 <HAL_NVIC_EnableIRQ>
	  }
	else
	{

	}
}
 80085e8:	e010      	b.n	800860c <HAL_TIM_Base_MspInit+0xa8>
	else if(htim_base->Instance==TIM4)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a0b      	ldr	r2, [pc, #44]	; (800861c <HAL_TIM_Base_MspInit+0xb8>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d10b      	bne.n	800860c <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 80085f4:	4b08      	ldr	r3, [pc, #32]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	4a07      	ldr	r2, [pc, #28]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 80085fa:	f043 0304 	orr.w	r3, r3, #4
 80085fe:	61d3      	str	r3, [r2, #28]
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_TIM_Base_MspInit+0xb4>)
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
}
 800860c:	bf00      	nop
 800860e:	3728      	adds	r7, #40	; 0x28
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40000400 	.word	0x40000400
 8008618:	40021000 	.word	0x40021000
 800861c:	40000800 	.word	0x40000800

08008620 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a09      	ldr	r2, [pc, #36]	; (8008654 <HAL_TIM_PWM_MspInit+0x34>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d10b      	bne.n	800864a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008632:	4b09      	ldr	r3, [pc, #36]	; (8008658 <HAL_TIM_PWM_MspInit+0x38>)
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	4a08      	ldr	r2, [pc, #32]	; (8008658 <HAL_TIM_PWM_MspInit+0x38>)
 8008638:	f043 0304 	orr.w	r3, r3, #4
 800863c:	61d3      	str	r3, [r2, #28]
 800863e:	4b06      	ldr	r3, [pc, #24]	; (8008658 <HAL_TIM_PWM_MspInit+0x38>)
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr
 8008654:	40000800 	.word	0x40000800
 8008658:	40021000 	.word	0x40021000

0800865c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008664:	f107 030c 	add.w	r3, r7, #12
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	605a      	str	r2, [r3, #4]
 800866e:	609a      	str	r2, [r3, #8]
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <HAL_TIM_MspPostInit+0x64>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d11b      	bne.n	80086b6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800867e:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <HAL_TIM_MspPostInit+0x68>)
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <HAL_TIM_MspPostInit+0x68>)
 8008684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008688:	6153      	str	r3, [r2, #20]
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <HAL_TIM_MspPostInit+0x68>)
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008692:	60bb      	str	r3, [r7, #8]
 8008694:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008696:	23c0      	movs	r3, #192	; 0xc0
 8008698:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800869a:	2302      	movs	r3, #2
 800869c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80086a6:	2302      	movs	r3, #2
 80086a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	4619      	mov	r1, r3
 80086b0:	4805      	ldr	r0, [pc, #20]	; (80086c8 <HAL_TIM_MspPostInit+0x6c>)
 80086b2:	f7fb fbad 	bl	8003e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80086b6:	bf00      	nop
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	40000800 	.word	0x40000800
 80086c4:	40021000 	.word	0x40021000
 80086c8:	48000400 	.word	0x48000400

080086cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08c      	sub	sp, #48	; 0x30
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d4:	f107 031c 	add.w	r3, r7, #28
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	605a      	str	r2, [r3, #4]
 80086de:	609a      	str	r2, [r3, #8]
 80086e0:	60da      	str	r2, [r3, #12]
 80086e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a36      	ldr	r2, [pc, #216]	; (80087c4 <HAL_UART_MspInit+0xf8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d130      	bne.n	8008750 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80086ee:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	4a35      	ldr	r2, [pc, #212]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 80086f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086f8:	6193      	str	r3, [r2, #24]
 80086fa:	4b33      	ldr	r3, [pc, #204]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008702:	61bb      	str	r3, [r7, #24]
 8008704:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008706:	4b30      	ldr	r3, [pc, #192]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	4a2f      	ldr	r2, [pc, #188]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 800870c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008710:	6153      	str	r3, [r2, #20]
 8008712:	4b2d      	ldr	r3, [pc, #180]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800871e:	2330      	movs	r3, #48	; 0x30
 8008720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008722:	2302      	movs	r3, #2
 8008724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008726:	2300      	movs	r3, #0
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800872a:	2303      	movs	r3, #3
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800872e:	2307      	movs	r3, #7
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008732:	f107 031c 	add.w	r3, r7, #28
 8008736:	4619      	mov	r1, r3
 8008738:	4824      	ldr	r0, [pc, #144]	; (80087cc <HAL_UART_MspInit+0x100>)
 800873a:	f7fb fb69 	bl	8003e10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800873e:	2200      	movs	r2, #0
 8008740:	2100      	movs	r1, #0
 8008742:	2025      	movs	r0, #37	; 0x25
 8008744:	f7ff fcf3 	bl	800812e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008748:	2025      	movs	r0, #37	; 0x25
 800874a:	f7ff fd0c 	bl	8008166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800874e:	e035      	b.n	80087bc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <HAL_UART_MspInit+0x104>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d130      	bne.n	80087bc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800875a:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 8008760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008764:	61d3      	str	r3, [r2, #28]
 8008766:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008772:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	4a14      	ldr	r2, [pc, #80]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 8008778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800877c:	6153      	str	r3, [r2, #20]
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <HAL_UART_MspInit+0xfc>)
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800878a:	230c      	movs	r3, #12
 800878c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878e:	2302      	movs	r3, #2
 8008790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008792:	2300      	movs	r3, #0
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008796:	2303      	movs	r3, #3
 8008798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800879a:	2307      	movs	r3, #7
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800879e:	f107 031c 	add.w	r3, r7, #28
 80087a2:	4619      	mov	r1, r3
 80087a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087a8:	f7fb fb32 	bl	8003e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80087ac:	2200      	movs	r2, #0
 80087ae:	2100      	movs	r1, #0
 80087b0:	2026      	movs	r0, #38	; 0x26
 80087b2:	f7ff fcbc 	bl	800812e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80087b6:	2026      	movs	r0, #38	; 0x26
 80087b8:	f7ff fcd5 	bl	8008166 <HAL_NVIC_EnableIRQ>
}
 80087bc:	bf00      	nop
 80087be:	3730      	adds	r7, #48	; 0x30
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	40013800 	.word	0x40013800
 80087c8:	40021000 	.word	0x40021000
 80087cc:	48000800 	.word	0x48000800
 80087d0:	40004400 	.word	0x40004400

080087d4 <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80087d8:	b672      	cpsid	i
}
 80087da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80087dc:	e7fe      	b.n	80087dc <Msp_Error_Handler+0x8>
	...

080087e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	f001 b83a 	b.w	800987a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800880a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 816f 	beq.w	8008afa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800881c:	4bb5      	ldr	r3, [pc, #724]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f003 030c 	and.w	r3, r3, #12
 8008824:	2b04      	cmp	r3, #4
 8008826:	d00c      	beq.n	8008842 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008828:	4bb2      	ldr	r3, [pc, #712]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f003 030c 	and.w	r3, r3, #12
 8008830:	2b08      	cmp	r3, #8
 8008832:	d15c      	bne.n	80088ee <HAL_RCC_OscConfig+0x10e>
 8008834:	4baf      	ldr	r3, [pc, #700]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800883c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008840:	d155      	bne.n	80088ee <HAL_RCC_OscConfig+0x10e>
 8008842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008846:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800884a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800884e:	fa93 f3a3 	rbit	r3, r3
 8008852:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008856:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800885a:	fab3 f383 	clz	r3, r3
 800885e:	b2db      	uxtb	r3, r3
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b01      	cmp	r3, #1
 800886c:	d102      	bne.n	8008874 <HAL_RCC_OscConfig+0x94>
 800886e:	4ba1      	ldr	r3, [pc, #644]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	e015      	b.n	80088a0 <HAL_RCC_OscConfig+0xc0>
 8008874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008878:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800887c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008880:	fa93 f3a3 	rbit	r3, r3
 8008884:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800888c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008890:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008894:	fa93 f3a3 	rbit	r3, r3
 8008898:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800889c:	4b95      	ldr	r3, [pc, #596]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80088a4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80088a8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80088ac:	fa92 f2a2 	rbit	r2, r2
 80088b0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80088b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80088b8:	fab2 f282 	clz	r2, r2
 80088bc:	b2d2      	uxtb	r2, r2
 80088be:	f042 0220 	orr.w	r2, r2, #32
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	f002 021f 	and.w	r2, r2, #31
 80088c8:	2101      	movs	r1, #1
 80088ca:	fa01 f202 	lsl.w	r2, r1, r2
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 8111 	beq.w	8008af8 <HAL_RCC_OscConfig+0x318>
 80088d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 8108 	bne.w	8008af8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	f000 bfc6 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088fe:	d106      	bne.n	800890e <HAL_RCC_OscConfig+0x12e>
 8008900:	4b7c      	ldr	r3, [pc, #496]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a7b      	ldr	r2, [pc, #492]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	e036      	b.n	800897c <HAL_RCC_OscConfig+0x19c>
 800890e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008912:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <HAL_RCC_OscConfig+0x158>
 800891e:	4b75      	ldr	r3, [pc, #468]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a74      	ldr	r2, [pc, #464]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	4b72      	ldr	r3, [pc, #456]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a71      	ldr	r2, [pc, #452]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	e021      	b.n	800897c <HAL_RCC_OscConfig+0x19c>
 8008938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800893c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008948:	d10c      	bne.n	8008964 <HAL_RCC_OscConfig+0x184>
 800894a:	4b6a      	ldr	r3, [pc, #424]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a69      	ldr	r2, [pc, #420]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	4b67      	ldr	r3, [pc, #412]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a66      	ldr	r2, [pc, #408]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 800895c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	e00b      	b.n	800897c <HAL_RCC_OscConfig+0x19c>
 8008964:	4b63      	ldr	r3, [pc, #396]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a62      	ldr	r2, [pc, #392]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 800896a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	4b60      	ldr	r3, [pc, #384]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a5f      	ldr	r2, [pc, #380]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800897a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800897c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008980:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d059      	beq.n	8008a40 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800898c:	f7ff faee 	bl	8007f6c <HAL_GetTick>
 8008990:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008994:	e00a      	b.n	80089ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008996:	f7ff fae9 	bl	8007f6c <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b64      	cmp	r3, #100	; 0x64
 80089a4:	d902      	bls.n	80089ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	f000 bf67 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
 80089ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089b0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80089b8:	fa93 f3a3 	rbit	r3, r3
 80089bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80089c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089c4:	fab3 f383 	clz	r3, r3
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	095b      	lsrs	r3, r3, #5
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d102      	bne.n	80089de <HAL_RCC_OscConfig+0x1fe>
 80089d8:	4b46      	ldr	r3, [pc, #280]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	e015      	b.n	8008a0a <HAL_RCC_OscConfig+0x22a>
 80089de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80089ea:	fa93 f3a3 	rbit	r3, r3
 80089ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80089f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80089fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80089fe:	fa93 f3a3 	rbit	r3, r3
 8008a02:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008a06:	4b3b      	ldr	r3, [pc, #236]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a0e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008a12:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008a16:	fa92 f2a2 	rbit	r2, r2
 8008a1a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008a1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008a22:	fab2 f282 	clz	r2, r2
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	f042 0220 	orr.w	r2, r2, #32
 8008a2c:	b2d2      	uxtb	r2, r2
 8008a2e:	f002 021f 	and.w	r2, r2, #31
 8008a32:	2101      	movs	r1, #1
 8008a34:	fa01 f202 	lsl.w	r2, r1, r2
 8008a38:	4013      	ands	r3, r2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0ab      	beq.n	8008996 <HAL_RCC_OscConfig+0x1b6>
 8008a3e:	e05c      	b.n	8008afa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a40:	f7ff fa94 	bl	8007f6c <HAL_GetTick>
 8008a44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a48:	e00a      	b.n	8008a60 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a4a:	f7ff fa8f 	bl	8007f6c <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b64      	cmp	r3, #100	; 0x64
 8008a58:	d902      	bls.n	8008a60 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	f000 bf0d 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
 8008a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a64:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008a6c:	fa93 f3a3 	rbit	r3, r3
 8008a70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008a74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a78:	fab3 f383 	clz	r3, r3
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d102      	bne.n	8008a92 <HAL_RCC_OscConfig+0x2b2>
 8008a8c:	4b19      	ldr	r3, [pc, #100]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	e015      	b.n	8008abe <HAL_RCC_OscConfig+0x2de>
 8008a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a96:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008a9e:	fa93 f3a3 	rbit	r3, r3
 8008aa2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008aaa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008aae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008ab2:	fa93 f3a3 	rbit	r3, r3
 8008ab6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008aba:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <HAL_RCC_OscConfig+0x314>)
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ac2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008ac6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008aca:	fa92 f2a2 	rbit	r2, r2
 8008ace:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8008ad2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008ad6:	fab2 f282 	clz	r2, r2
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	f042 0220 	orr.w	r2, r2, #32
 8008ae0:	b2d2      	uxtb	r2, r2
 8008ae2:	f002 021f 	and.w	r2, r2, #31
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8008aec:	4013      	ands	r3, r2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1ab      	bne.n	8008a4a <HAL_RCC_OscConfig+0x26a>
 8008af2:	e002      	b.n	8008afa <HAL_RCC_OscConfig+0x31a>
 8008af4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008afe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 817f 	beq.w	8008e0e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008b10:	4ba7      	ldr	r3, [pc, #668]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f003 030c 	and.w	r3, r3, #12
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00c      	beq.n	8008b36 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008b1c:	4ba4      	ldr	r3, [pc, #656]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f003 030c 	and.w	r3, r3, #12
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d173      	bne.n	8008c10 <HAL_RCC_OscConfig+0x430>
 8008b28:	4ba1      	ldr	r3, [pc, #644]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b34:	d16c      	bne.n	8008c10 <HAL_RCC_OscConfig+0x430>
 8008b36:	2302      	movs	r3, #2
 8008b38:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b3c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008b40:	fa93 f3a3 	rbit	r3, r3
 8008b44:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8008b48:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b4c:	fab3 f383 	clz	r3, r3
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f043 0301 	orr.w	r3, r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d102      	bne.n	8008b66 <HAL_RCC_OscConfig+0x386>
 8008b60:	4b93      	ldr	r3, [pc, #588]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	e013      	b.n	8008b8e <HAL_RCC_OscConfig+0x3ae>
 8008b66:	2302      	movs	r3, #2
 8008b68:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b6c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008b70:	fa93 f3a3 	rbit	r3, r3
 8008b74:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008b78:	2302      	movs	r3, #2
 8008b7a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008b7e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008b82:	fa93 f3a3 	rbit	r3, r3
 8008b86:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008b8a:	4b89      	ldr	r3, [pc, #548]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008b94:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008b98:	fa92 f2a2 	rbit	r2, r2
 8008b9c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008ba0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008ba4:	fab2 f282 	clz	r2, r2
 8008ba8:	b2d2      	uxtb	r2, r2
 8008baa:	f042 0220 	orr.w	r2, r2, #32
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	f002 021f 	and.w	r2, r2, #31
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x3f6>
 8008bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008bc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d002      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	f000 be52 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd6:	4b76      	ldr	r3, [pc, #472]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	21f8      	movs	r1, #248	; 0xf8
 8008bec:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bf0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008bf4:	fa91 f1a1 	rbit	r1, r1
 8008bf8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008bfc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008c00:	fab1 f181 	clz	r1, r1
 8008c04:	b2c9      	uxtb	r1, r1
 8008c06:	408b      	lsls	r3, r1
 8008c08:	4969      	ldr	r1, [pc, #420]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c0e:	e0fe      	b.n	8008e0e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8088 	beq.w	8008d32 <HAL_RCC_OscConfig+0x552>
 8008c22:	2301      	movs	r3, #1
 8008c24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008c2c:	fa93 f3a3 	rbit	r3, r3
 8008c30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008c34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c38:	fab3 f383 	clz	r3, r3
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008c42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c4e:	f7ff f98d 	bl	8007f6c <HAL_GetTick>
 8008c52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c56:	e00a      	b.n	8008c6e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c58:	f7ff f988 	bl	8007f6c <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d902      	bls.n	8008c6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	f000 be06 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008c78:	fa93 f3a3 	rbit	r3, r3
 8008c7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8008c80:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c84:	fab3 f383 	clz	r3, r3
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d102      	bne.n	8008c9e <HAL_RCC_OscConfig+0x4be>
 8008c98:	4b45      	ldr	r3, [pc, #276]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	e013      	b.n	8008cc6 <HAL_RCC_OscConfig+0x4e6>
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ca4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008ca8:	fa93 f3a3 	rbit	r3, r3
 8008cac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008cb6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008cba:	fa93 f3a3 	rbit	r3, r3
 8008cbe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008cc2:	4b3b      	ldr	r3, [pc, #236]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008ccc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008cd0:	fa92 f2a2 	rbit	r2, r2
 8008cd4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8008cd8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008cdc:	fab2 f282 	clz	r2, r2
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	f042 0220 	orr.w	r2, r2, #32
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	f002 021f 	and.w	r2, r2, #31
 8008cec:	2101      	movs	r1, #1
 8008cee:	fa01 f202 	lsl.w	r2, r1, r2
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0af      	beq.n	8008c58 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf8:	4b2d      	ldr	r3, [pc, #180]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	21f8      	movs	r1, #248	; 0xf8
 8008d0e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d12:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008d16:	fa91 f1a1 	rbit	r1, r1
 8008d1a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8008d1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008d22:	fab1 f181 	clz	r1, r1
 8008d26:	b2c9      	uxtb	r1, r1
 8008d28:	408b      	lsls	r3, r1
 8008d2a:	4921      	ldr	r1, [pc, #132]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	600b      	str	r3, [r1, #0]
 8008d30:	e06d      	b.n	8008e0e <HAL_RCC_OscConfig+0x62e>
 8008d32:	2301      	movs	r3, #1
 8008d34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008d3c:	fa93 f3a3 	rbit	r3, r3
 8008d40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8008d44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d48:	fab3 f383 	clz	r3, r3
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008d52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	461a      	mov	r2, r3
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d5e:	f7ff f905 	bl	8007f6c <HAL_GetTick>
 8008d62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d66:	e00a      	b.n	8008d7e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d68:	f7ff f900 	bl	8007f6c <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d902      	bls.n	8008d7e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	f000 bd7e 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d88:	fa93 f3a3 	rbit	r3, r3
 8008d8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8008d90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d94:	fab3 f383 	clz	r3, r3
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	095b      	lsrs	r3, r3, #5
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d105      	bne.n	8008db4 <HAL_RCC_OscConfig+0x5d4>
 8008da8:	4b01      	ldr	r3, [pc, #4]	; (8008db0 <HAL_RCC_OscConfig+0x5d0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	e016      	b.n	8008ddc <HAL_RCC_OscConfig+0x5fc>
 8008dae:	bf00      	nop
 8008db0:	40021000 	.word	0x40021000
 8008db4:	2302      	movs	r3, #2
 8008db6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dbe:	fa93 f3a3 	rbit	r3, r3
 8008dc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008dcc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008dd0:	fa93 f3a3 	rbit	r3, r3
 8008dd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008dd8:	4bbf      	ldr	r3, [pc, #764]	; (80090d8 <HAL_RCC_OscConfig+0x8f8>)
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2202      	movs	r2, #2
 8008dde:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008de2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008de6:	fa92 f2a2 	rbit	r2, r2
 8008dea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8008dee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008df2:	fab2 f282 	clz	r2, r2
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	f042 0220 	orr.w	r2, r2, #32
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	f002 021f 	and.w	r2, r2, #31
 8008e02:	2101      	movs	r1, #1
 8008e04:	fa01 f202 	lsl.w	r2, r1, r2
 8008e08:	4013      	ands	r3, r2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1ac      	bne.n	8008d68 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8113 	beq.w	800904a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d07c      	beq.n	8008f2e <HAL_RCC_OscConfig+0x74e>
 8008e34:	2301      	movs	r3, #1
 8008e36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3e:	fa93 f3a3 	rbit	r3, r3
 8008e42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8008e46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e4a:	fab3 f383 	clz	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	461a      	mov	r2, r3
 8008e52:	4ba2      	ldr	r3, [pc, #648]	; (80090dc <HAL_RCC_OscConfig+0x8fc>)
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	461a      	mov	r2, r3
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e5e:	f7ff f885 	bl	8007f6c <HAL_GetTick>
 8008e62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e66:	e00a      	b.n	8008e7e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e68:	f7ff f880 	bl	8007f6c <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d902      	bls.n	8008e7e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	f000 bcfe 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
 8008e7e:	2302      	movs	r3, #2
 8008e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e88:	fa93 f2a3 	rbit	r2, r3
 8008e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	fa93 f2a3 	rbit	r2, r3
 8008eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ebe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	fa93 f2a3 	rbit	r2, r3
 8008ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ed8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008edc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ede:	4b7e      	ldr	r3, [pc, #504]	; (80090d8 <HAL_RCC_OscConfig+0x8f8>)
 8008ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ee6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008eea:	2102      	movs	r1, #2
 8008eec:	6019      	str	r1, [r3, #0]
 8008eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ef2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	fa93 f1a3 	rbit	r1, r3
 8008efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008f04:	6019      	str	r1, [r3, #0]
  return result;
 8008f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	fab3 f383 	clz	r3, r3
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 031f 	and.w	r3, r3, #31
 8008f20:	2101      	movs	r1, #1
 8008f22:	fa01 f303 	lsl.w	r3, r1, r3
 8008f26:	4013      	ands	r3, r2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d09d      	beq.n	8008e68 <HAL_RCC_OscConfig+0x688>
 8008f2c:	e08d      	b.n	800904a <HAL_RCC_OscConfig+0x86a>
 8008f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	fa93 f2a3 	rbit	r2, r3
 8008f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f4c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008f50:	601a      	str	r2, [r3, #0]
  return result;
 8008f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008f5a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f5c:	fab3 f383 	clz	r3, r3
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	461a      	mov	r2, r3
 8008f64:	4b5d      	ldr	r3, [pc, #372]	; (80090dc <HAL_RCC_OscConfig+0x8fc>)
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f70:	f7fe fffc 	bl	8007f6c <HAL_GetTick>
 8008f74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f78:	e00a      	b.n	8008f90 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f7a:	f7fe fff7 	bl	8007f6c <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d902      	bls.n	8008f90 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	f000 bc75 	b.w	800987a <HAL_RCC_OscConfig+0x109a>
 8008f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008f98:	2202      	movs	r2, #2
 8008f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fa0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	fa93 f2a3 	rbit	r2, r3
 8008faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	fa93 f2a3 	rbit	r2, r3
 8008fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fdc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fe8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	fa93 f2a3 	rbit	r2, r3
 8008ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ff6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008ffa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ffc:	4b36      	ldr	r3, [pc, #216]	; (80090d8 <HAL_RCC_OscConfig+0x8f8>)
 8008ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009004:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009008:	2102      	movs	r1, #2
 800900a:	6019      	str	r1, [r3, #0]
 800900c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009010:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	fa93 f1a3 	rbit	r1, r3
 800901a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800901e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009022:	6019      	str	r1, [r3, #0]
  return result;
 8009024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009028:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	fab3 f383 	clz	r3, r3
 8009032:	b2db      	uxtb	r3, r3
 8009034:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f003 031f 	and.w	r3, r3, #31
 800903e:	2101      	movs	r1, #1
 8009040:	fa01 f303 	lsl.w	r3, r1, r3
 8009044:	4013      	ands	r3, r2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d197      	bne.n	8008f7a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800904a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800904e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 81a5 	beq.w	80093aa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009060:	2300      	movs	r3, #0
 8009062:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009066:	4b1c      	ldr	r3, [pc, #112]	; (80090d8 <HAL_RCC_OscConfig+0x8f8>)
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d116      	bne.n	80090a0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009072:	4b19      	ldr	r3, [pc, #100]	; (80090d8 <HAL_RCC_OscConfig+0x8f8>)
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	4a18      	ldr	r2, [pc, #96]	; (80090d8 <HAL_RCC_OscConfig+0x8f8>)
 8009078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907c:	61d3      	str	r3, [r2, #28]
 800907e:	4b16      	ldr	r3, [pc, #88]	; (80090d8 <HAL_RCC_OscConfig+0x8f8>)
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800908a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009098:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <HAL_RCC_OscConfig+0x900>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d121      	bne.n	80090f0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <HAL_RCC_OscConfig+0x900>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a0b      	ldr	r2, [pc, #44]	; (80090e0 <HAL_RCC_OscConfig+0x900>)
 80090b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090b8:	f7fe ff58 	bl	8007f6c <HAL_GetTick>
 80090bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090c0:	e010      	b.n	80090e4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c2:	f7fe ff53 	bl	8007f6c <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b64      	cmp	r3, #100	; 0x64
 80090d0:	d908      	bls.n	80090e4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e3d1      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
 80090d6:	bf00      	nop
 80090d8:	40021000 	.word	0x40021000
 80090dc:	10908120 	.word	0x10908120
 80090e0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090e4:	4b8d      	ldr	r3, [pc, #564]	; (800931c <HAL_RCC_OscConfig+0xb3c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d0e8      	beq.n	80090c2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d106      	bne.n	800910e <HAL_RCC_OscConfig+0x92e>
 8009100:	4b87      	ldr	r3, [pc, #540]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	4a86      	ldr	r2, [pc, #536]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	6213      	str	r3, [r2, #32]
 800910c:	e035      	b.n	800917a <HAL_RCC_OscConfig+0x99a>
 800910e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009112:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10c      	bne.n	8009138 <HAL_RCC_OscConfig+0x958>
 800911e:	4b80      	ldr	r3, [pc, #512]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	4a7f      	ldr	r2, [pc, #508]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009124:	f023 0301 	bic.w	r3, r3, #1
 8009128:	6213      	str	r3, [r2, #32]
 800912a:	4b7d      	ldr	r3, [pc, #500]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	4a7c      	ldr	r2, [pc, #496]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009130:	f023 0304 	bic.w	r3, r3, #4
 8009134:	6213      	str	r3, [r2, #32]
 8009136:	e020      	b.n	800917a <HAL_RCC_OscConfig+0x99a>
 8009138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800913c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	2b05      	cmp	r3, #5
 8009146:	d10c      	bne.n	8009162 <HAL_RCC_OscConfig+0x982>
 8009148:	4b75      	ldr	r3, [pc, #468]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	4a74      	ldr	r2, [pc, #464]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 800914e:	f043 0304 	orr.w	r3, r3, #4
 8009152:	6213      	str	r3, [r2, #32]
 8009154:	4b72      	ldr	r3, [pc, #456]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	4a71      	ldr	r2, [pc, #452]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 800915a:	f043 0301 	orr.w	r3, r3, #1
 800915e:	6213      	str	r3, [r2, #32]
 8009160:	e00b      	b.n	800917a <HAL_RCC_OscConfig+0x99a>
 8009162:	4b6f      	ldr	r3, [pc, #444]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	4a6e      	ldr	r2, [pc, #440]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	6213      	str	r3, [r2, #32]
 800916e:	4b6c      	ldr	r3, [pc, #432]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	4a6b      	ldr	r2, [pc, #428]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009174:	f023 0304 	bic.w	r3, r3, #4
 8009178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800917a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800917e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8081 	beq.w	800928e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800918c:	f7fe feee 	bl	8007f6c <HAL_GetTick>
 8009190:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009194:	e00b      	b.n	80091ae <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009196:	f7fe fee9 	bl	8007f6c <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e365      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
 80091ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80091b6:	2202      	movs	r2, #2
 80091b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	fa93 f2a3 	rbit	r2, r3
 80091c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80091da:	2202      	movs	r2, #2
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	fa93 f2a3 	rbit	r2, r3
 80091ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80091f4:	601a      	str	r2, [r3, #0]
  return result;
 80091f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091fa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80091fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009200:	fab3 f383 	clz	r3, r3
 8009204:	b2db      	uxtb	r3, r3
 8009206:	095b      	lsrs	r3, r3, #5
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f043 0302 	orr.w	r3, r3, #2
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d102      	bne.n	800921a <HAL_RCC_OscConfig+0xa3a>
 8009214:	4b42      	ldr	r3, [pc, #264]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	e013      	b.n	8009242 <HAL_RCC_OscConfig+0xa62>
 800921a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800921e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009222:	2202      	movs	r2, #2
 8009224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800922a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	fa93 f2a3 	rbit	r2, r3
 8009234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009238:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	4b38      	ldr	r3, [pc, #224]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009246:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800924a:	2102      	movs	r1, #2
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009252:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009256:	6812      	ldr	r2, [r2, #0]
 8009258:	fa92 f1a2 	rbit	r1, r2
 800925c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009260:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8009264:	6011      	str	r1, [r2, #0]
  return result;
 8009266:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800926a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800926e:	6812      	ldr	r2, [r2, #0]
 8009270:	fab2 f282 	clz	r2, r2
 8009274:	b2d2      	uxtb	r2, r2
 8009276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	f002 021f 	and.w	r2, r2, #31
 8009280:	2101      	movs	r1, #1
 8009282:	fa01 f202 	lsl.w	r2, r1, r2
 8009286:	4013      	ands	r3, r2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d084      	beq.n	8009196 <HAL_RCC_OscConfig+0x9b6>
 800928c:	e083      	b.n	8009396 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800928e:	f7fe fe6d 	bl	8007f6c <HAL_GetTick>
 8009292:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009296:	e00b      	b.n	80092b0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009298:	f7fe fe68 	bl	8007f6c <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d901      	bls.n	80092b0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e2e4      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
 80092b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80092b8:	2202      	movs	r2, #2
 80092ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	fa93 f2a3 	rbit	r2, r3
 80092ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80092dc:	2202      	movs	r2, #2
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	fa93 f2a3 	rbit	r2, r3
 80092ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80092f6:	601a      	str	r2, [r3, #0]
  return result;
 80092f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092fc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009300:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009302:	fab3 f383 	clz	r3, r3
 8009306:	b2db      	uxtb	r3, r3
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f043 0302 	orr.w	r3, r3, #2
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d106      	bne.n	8009324 <HAL_RCC_OscConfig+0xb44>
 8009316:	4b02      	ldr	r3, [pc, #8]	; (8009320 <HAL_RCC_OscConfig+0xb40>)
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	e017      	b.n	800934c <HAL_RCC_OscConfig+0xb6c>
 800931c:	40007000 	.word	0x40007000
 8009320:	40021000 	.word	0x40021000
 8009324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009328:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800932c:	2202      	movs	r2, #2
 800932e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009334:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	fa93 f2a3 	rbit	r2, r3
 800933e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009342:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	4bb3      	ldr	r3, [pc, #716]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009350:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009354:	2102      	movs	r1, #2
 8009356:	6011      	str	r1, [r2, #0]
 8009358:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800935c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009360:	6812      	ldr	r2, [r2, #0]
 8009362:	fa92 f1a2 	rbit	r1, r2
 8009366:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800936a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800936e:	6011      	str	r1, [r2, #0]
  return result;
 8009370:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009374:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8009378:	6812      	ldr	r2, [r2, #0]
 800937a:	fab2 f282 	clz	r2, r2
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009384:	b2d2      	uxtb	r2, r2
 8009386:	f002 021f 	and.w	r2, r2, #31
 800938a:	2101      	movs	r1, #1
 800938c:	fa01 f202 	lsl.w	r2, r1, r2
 8009390:	4013      	ands	r3, r2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d180      	bne.n	8009298 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009396:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800939a:	2b01      	cmp	r3, #1
 800939c:	d105      	bne.n	80093aa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800939e:	4b9e      	ldr	r3, [pc, #632]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	4a9d      	ldr	r2, [pc, #628]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 80093a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 825e 	beq.w	8009878 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093bc:	4b96      	ldr	r3, [pc, #600]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f003 030c 	and.w	r3, r3, #12
 80093c4:	2b08      	cmp	r3, #8
 80093c6:	f000 821f 	beq.w	8009808 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	f040 8170 	bne.w	80096bc <HAL_RCC_OscConfig+0xedc>
 80093dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80093e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	fa93 f2a3 	rbit	r2, r3
 80093f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009400:	601a      	str	r2, [r3, #0]
  return result;
 8009402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009406:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800940a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800940c:	fab3 f383 	clz	r3, r3
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009416:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	461a      	mov	r2, r3
 800941e:	2300      	movs	r3, #0
 8009420:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009422:	f7fe fda3 	bl	8007f6c <HAL_GetTick>
 8009426:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800942a:	e009      	b.n	8009440 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800942c:	f7fe fd9e 	bl	8007f6c <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d901      	bls.n	8009440 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e21c      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
 8009440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009444:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800944c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800944e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009452:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	fa93 f2a3 	rbit	r2, r3
 800945c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009460:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009464:	601a      	str	r2, [r3, #0]
  return result;
 8009466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800946a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800946e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009470:	fab3 f383 	clz	r3, r3
 8009474:	b2db      	uxtb	r3, r3
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	b2db      	uxtb	r3, r3
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b01      	cmp	r3, #1
 8009482:	d102      	bne.n	800948a <HAL_RCC_OscConfig+0xcaa>
 8009484:	4b64      	ldr	r3, [pc, #400]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	e027      	b.n	80094da <HAL_RCC_OscConfig+0xcfa>
 800948a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800948e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800949c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	fa93 f2a3 	rbit	r2, r3
 80094a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80094b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	fa93 f2a3 	rbit	r2, r3
 80094cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094d0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	4b50      	ldr	r3, [pc, #320]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80094de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80094e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80094e6:	6011      	str	r1, [r2, #0]
 80094e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80094ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80094f0:	6812      	ldr	r2, [r2, #0]
 80094f2:	fa92 f1a2 	rbit	r1, r2
 80094f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80094fa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80094fe:	6011      	str	r1, [r2, #0]
  return result;
 8009500:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009504:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8009508:	6812      	ldr	r2, [r2, #0]
 800950a:	fab2 f282 	clz	r2, r2
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	f042 0220 	orr.w	r2, r2, #32
 8009514:	b2d2      	uxtb	r2, r2
 8009516:	f002 021f 	and.w	r2, r2, #31
 800951a:	2101      	movs	r1, #1
 800951c:	fa01 f202 	lsl.w	r2, r1, r2
 8009520:	4013      	ands	r3, r2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d182      	bne.n	800942c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009526:	4b3c      	ldr	r3, [pc, #240]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 8009528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952a:	f023 020f 	bic.w	r2, r3, #15
 800952e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009532:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	4937      	ldr	r1, [pc, #220]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 800953c:	4313      	orrs	r3, r2
 800953e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009540:	4b35      	ldr	r3, [pc, #212]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8009548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800954c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6a19      	ldr	r1, [r3, #32]
 8009554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009558:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	430b      	orrs	r3, r1
 8009562:	492d      	ldr	r1, [pc, #180]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 8009564:	4313      	orrs	r3, r2
 8009566:	604b      	str	r3, [r1, #4]
 8009568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800956c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800957a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	fa93 f2a3 	rbit	r2, r3
 8009584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009588:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800958c:	601a      	str	r2, [r3, #0]
  return result;
 800958e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009592:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009596:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009598:	fab3 f383 	clz	r3, r3
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80095a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	461a      	mov	r2, r3
 80095aa:	2301      	movs	r3, #1
 80095ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095ae:	f7fe fcdd 	bl	8007f6c <HAL_GetTick>
 80095b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80095b6:	e009      	b.n	80095cc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095b8:	f7fe fcd8 	bl	8007f6c <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d901      	bls.n	80095cc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e156      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
 80095cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80095d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095de:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	fa93 f2a3 	rbit	r2, r3
 80095e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095ec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80095f0:	601a      	str	r2, [r3, #0]
  return result;
 80095f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80095fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80095fc:	fab3 f383 	clz	r3, r3
 8009600:	b2db      	uxtb	r3, r3
 8009602:	095b      	lsrs	r3, r3, #5
 8009604:	b2db      	uxtb	r3, r3
 8009606:	f043 0301 	orr.w	r3, r3, #1
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b01      	cmp	r3, #1
 800960e:	d105      	bne.n	800961c <HAL_RCC_OscConfig+0xe3c>
 8009610:	4b01      	ldr	r3, [pc, #4]	; (8009618 <HAL_RCC_OscConfig+0xe38>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	e02a      	b.n	800966c <HAL_RCC_OscConfig+0xe8c>
 8009616:	bf00      	nop
 8009618:	40021000 	.word	0x40021000
 800961c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009620:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800962a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800962e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	fa93 f2a3 	rbit	r2, r3
 8009638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800963c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009646:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800964a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009654:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	fa93 f2a3 	rbit	r2, r3
 800965e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009662:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	4b86      	ldr	r3, [pc, #536]	; (8009884 <HAL_RCC_OscConfig+0x10a4>)
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009670:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009678:	6011      	str	r1, [r2, #0]
 800967a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800967e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009682:	6812      	ldr	r2, [r2, #0]
 8009684:	fa92 f1a2 	rbit	r1, r2
 8009688:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800968c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009690:	6011      	str	r1, [r2, #0]
  return result;
 8009692:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009696:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800969a:	6812      	ldr	r2, [r2, #0]
 800969c:	fab2 f282 	clz	r2, r2
 80096a0:	b2d2      	uxtb	r2, r2
 80096a2:	f042 0220 	orr.w	r2, r2, #32
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	f002 021f 	and.w	r2, r2, #31
 80096ac:	2101      	movs	r1, #1
 80096ae:	fa01 f202 	lsl.w	r2, r1, r2
 80096b2:	4013      	ands	r3, r2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f43f af7f 	beq.w	80095b8 <HAL_RCC_OscConfig+0xdd8>
 80096ba:	e0dd      	b.n	8009878 <HAL_RCC_OscConfig+0x1098>
 80096bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096c0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80096c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	fa93 f2a3 	rbit	r2, r3
 80096d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80096e0:	601a      	str	r2, [r3, #0]
  return result;
 80096e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80096ea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ec:	fab3 f383 	clz	r3, r3
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80096f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	461a      	mov	r2, r3
 80096fe:	2300      	movs	r3, #0
 8009700:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009702:	f7fe fc33 	bl	8007f6c <HAL_GetTick>
 8009706:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800970a:	e009      	b.n	8009720 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800970c:	f7fe fc2e 	bl	8007f6c <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	2b02      	cmp	r3, #2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e0ac      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
 8009720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009724:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009728:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800972c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800972e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009732:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	fa93 f2a3 	rbit	r2, r3
 800973c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009740:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009744:	601a      	str	r2, [r3, #0]
  return result;
 8009746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800974a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800974e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009750:	fab3 f383 	clz	r3, r3
 8009754:	b2db      	uxtb	r3, r3
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	b2db      	uxtb	r3, r3
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	d102      	bne.n	800976a <HAL_RCC_OscConfig+0xf8a>
 8009764:	4b47      	ldr	r3, [pc, #284]	; (8009884 <HAL_RCC_OscConfig+0x10a4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	e027      	b.n	80097ba <HAL_RCC_OscConfig+0xfda>
 800976a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800976e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800977c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	fa93 f2a3 	rbit	r2, r3
 8009786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800978a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009794:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80097a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	fa93 f2a3 	rbit	r2, r3
 80097ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80097b0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	4b33      	ldr	r3, [pc, #204]	; (8009884 <HAL_RCC_OscConfig+0x10a4>)
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097be:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80097c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80097c6:	6011      	str	r1, [r2, #0]
 80097c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80097d0:	6812      	ldr	r2, [r2, #0]
 80097d2:	fa92 f1a2 	rbit	r1, r2
 80097d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097da:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80097de:	6011      	str	r1, [r2, #0]
  return result;
 80097e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097e4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80097e8:	6812      	ldr	r2, [r2, #0]
 80097ea:	fab2 f282 	clz	r2, r2
 80097ee:	b2d2      	uxtb	r2, r2
 80097f0:	f042 0220 	orr.w	r2, r2, #32
 80097f4:	b2d2      	uxtb	r2, r2
 80097f6:	f002 021f 	and.w	r2, r2, #31
 80097fa:	2101      	movs	r1, #1
 80097fc:	fa01 f202 	lsl.w	r2, r1, r2
 8009800:	4013      	ands	r3, r2
 8009802:	2b00      	cmp	r3, #0
 8009804:	d182      	bne.n	800970c <HAL_RCC_OscConfig+0xf2c>
 8009806:	e037      	b.n	8009878 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800980c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e02e      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800981c:	4b19      	ldr	r3, [pc, #100]	; (8009884 <HAL_RCC_OscConfig+0x10a4>)
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8009824:	4b17      	ldr	r3, [pc, #92]	; (8009884 <HAL_RCC_OscConfig+0x10a4>)
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800982c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009830:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8009834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	429a      	cmp	r2, r3
 8009842:	d117      	bne.n	8009874 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009844:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009848:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800984c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009850:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009858:	429a      	cmp	r2, r3
 800985a:	d10b      	bne.n	8009874 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800985c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009860:	f003 020f 	and.w	r2, r3, #15
 8009864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009868:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009870:	429a      	cmp	r2, r3
 8009872:	d001      	beq.n	8009878 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	40021000 	.word	0x40021000

08009888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b09e      	sub	sp, #120	; 0x78
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e162      	b.n	8009b66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098a0:	4b90      	ldr	r3, [pc, #576]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0307 	and.w	r3, r3, #7
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d910      	bls.n	80098d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ae:	4b8d      	ldr	r3, [pc, #564]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f023 0207 	bic.w	r2, r3, #7
 80098b6:	498b      	ldr	r1, [pc, #556]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098be:	4b89      	ldr	r3, [pc, #548]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d001      	beq.n	80098d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e14a      	b.n	8009b66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0302 	and.w	r3, r3, #2
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d008      	beq.n	80098ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098dc:	4b82      	ldr	r3, [pc, #520]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	497f      	ldr	r1, [pc, #508]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 80dc 	beq.w	8009ab4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d13c      	bne.n	800997e <HAL_RCC_ClockConfig+0xf6>
 8009904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009908:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800990a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800990c:	fa93 f3a3 	rbit	r3, r3
 8009910:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009914:	fab3 f383 	clz	r3, r3
 8009918:	b2db      	uxtb	r3, r3
 800991a:	095b      	lsrs	r3, r3, #5
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	b2db      	uxtb	r3, r3
 8009924:	2b01      	cmp	r3, #1
 8009926:	d102      	bne.n	800992e <HAL_RCC_ClockConfig+0xa6>
 8009928:	4b6f      	ldr	r3, [pc, #444]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	e00f      	b.n	800994e <HAL_RCC_ClockConfig+0xc6>
 800992e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009936:	fa93 f3a3 	rbit	r3, r3
 800993a:	667b      	str	r3, [r7, #100]	; 0x64
 800993c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009940:	663b      	str	r3, [r7, #96]	; 0x60
 8009942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009944:	fa93 f3a3 	rbit	r3, r3
 8009948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800994a:	4b67      	ldr	r3, [pc, #412]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009952:	65ba      	str	r2, [r7, #88]	; 0x58
 8009954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009956:	fa92 f2a2 	rbit	r2, r2
 800995a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800995c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800995e:	fab2 f282 	clz	r2, r2
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	f042 0220 	orr.w	r2, r2, #32
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	f002 021f 	and.w	r2, r2, #31
 800996e:	2101      	movs	r1, #1
 8009970:	fa01 f202 	lsl.w	r2, r1, r2
 8009974:	4013      	ands	r3, r2
 8009976:	2b00      	cmp	r3, #0
 8009978:	d17b      	bne.n	8009a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e0f3      	b.n	8009b66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d13c      	bne.n	8009a00 <HAL_RCC_ClockConfig+0x178>
 8009986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800998a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800998c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800998e:	fa93 f3a3 	rbit	r3, r3
 8009992:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009996:	fab3 f383 	clz	r3, r3
 800999a:	b2db      	uxtb	r3, r3
 800999c:	095b      	lsrs	r3, r3, #5
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f043 0301 	orr.w	r3, r3, #1
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d102      	bne.n	80099b0 <HAL_RCC_ClockConfig+0x128>
 80099aa:	4b4f      	ldr	r3, [pc, #316]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	e00f      	b.n	80099d0 <HAL_RCC_ClockConfig+0x148>
 80099b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b8:	fa93 f3a3 	rbit	r3, r3
 80099bc:	647b      	str	r3, [r7, #68]	; 0x44
 80099be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099c2:	643b      	str	r3, [r7, #64]	; 0x40
 80099c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c6:	fa93 f3a3 	rbit	r3, r3
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099cc:	4b46      	ldr	r3, [pc, #280]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80099d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80099d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099d8:	fa92 f2a2 	rbit	r2, r2
 80099dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80099de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099e0:	fab2 f282 	clz	r2, r2
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	f042 0220 	orr.w	r2, r2, #32
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	f002 021f 	and.w	r2, r2, #31
 80099f0:	2101      	movs	r1, #1
 80099f2:	fa01 f202 	lsl.w	r2, r1, r2
 80099f6:	4013      	ands	r3, r2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d13a      	bne.n	8009a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e0b2      	b.n	8009b66 <HAL_RCC_ClockConfig+0x2de>
 8009a00:	2302      	movs	r3, #2
 8009a02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	fa93 f3a3 	rbit	r3, r3
 8009a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a0e:	fab3 f383 	clz	r3, r3
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f043 0301 	orr.w	r3, r3, #1
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d102      	bne.n	8009a28 <HAL_RCC_ClockConfig+0x1a0>
 8009a22:	4b31      	ldr	r3, [pc, #196]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	e00d      	b.n	8009a44 <HAL_RCC_ClockConfig+0x1bc>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	fa93 f3a3 	rbit	r3, r3
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
 8009a34:	2302      	movs	r3, #2
 8009a36:	623b      	str	r3, [r7, #32]
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	fa93 f3a3 	rbit	r3, r3
 8009a3e:	61fb      	str	r3, [r7, #28]
 8009a40:	4b29      	ldr	r3, [pc, #164]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	2202      	movs	r2, #2
 8009a46:	61ba      	str	r2, [r7, #24]
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	fa92 f2a2 	rbit	r2, r2
 8009a4e:	617a      	str	r2, [r7, #20]
  return result;
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	fab2 f282 	clz	r2, r2
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	f042 0220 	orr.w	r2, r2, #32
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	f002 021f 	and.w	r2, r2, #31
 8009a62:	2101      	movs	r1, #1
 8009a64:	fa01 f202 	lsl.w	r2, r1, r2
 8009a68:	4013      	ands	r3, r2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e079      	b.n	8009b66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a72:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f023 0203 	bic.w	r2, r3, #3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	491a      	ldr	r1, [pc, #104]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a84:	f7fe fa72 	bl	8007f6c <HAL_GetTick>
 8009a88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a8a:	e00a      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a8c:	f7fe fa6e 	bl	8007f6c <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d901      	bls.n	8009aa2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e061      	b.n	8009b66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aa2:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <HAL_RCC_ClockConfig+0x260>)
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f003 020c 	and.w	r2, r3, #12
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d1eb      	bne.n	8009a8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d214      	bcs.n	8009aec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f023 0207 	bic.w	r2, r3, #7
 8009aca:	4906      	ldr	r1, [pc, #24]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ad2:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <HAL_RCC_ClockConfig+0x25c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d005      	beq.n	8009aec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e040      	b.n	8009b66 <HAL_RCC_ClockConfig+0x2de>
 8009ae4:	40022000 	.word	0x40022000
 8009ae8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d008      	beq.n	8009b0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009af8:	4b1d      	ldr	r3, [pc, #116]	; (8009b70 <HAL_RCC_ClockConfig+0x2e8>)
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	491a      	ldr	r1, [pc, #104]	; (8009b70 <HAL_RCC_ClockConfig+0x2e8>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d009      	beq.n	8009b2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b16:	4b16      	ldr	r3, [pc, #88]	; (8009b70 <HAL_RCC_ClockConfig+0x2e8>)
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	00db      	lsls	r3, r3, #3
 8009b24:	4912      	ldr	r1, [pc, #72]	; (8009b70 <HAL_RCC_ClockConfig+0x2e8>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009b2a:	f000 f829 	bl	8009b80 <HAL_RCC_GetSysClockFreq>
 8009b2e:	4601      	mov	r1, r0
 8009b30:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <HAL_RCC_ClockConfig+0x2e8>)
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b38:	22f0      	movs	r2, #240	; 0xf0
 8009b3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	fa92 f2a2 	rbit	r2, r2
 8009b42:	60fa      	str	r2, [r7, #12]
  return result;
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	fab2 f282 	clz	r2, r2
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	40d3      	lsrs	r3, r2
 8009b4e:	4a09      	ldr	r2, [pc, #36]	; (8009b74 <HAL_RCC_ClockConfig+0x2ec>)
 8009b50:	5cd3      	ldrb	r3, [r2, r3]
 8009b52:	fa21 f303 	lsr.w	r3, r1, r3
 8009b56:	4a08      	ldr	r2, [pc, #32]	; (8009b78 <HAL_RCC_ClockConfig+0x2f0>)
 8009b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8009b5a:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <HAL_RCC_ClockConfig+0x2f4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe f9bc 	bl	8007edc <HAL_InitTick>
  
  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3778      	adds	r7, #120	; 0x78
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	40021000 	.word	0x40021000
 8009b74:	0800d434 	.word	0x0800d434
 8009b78:	20000000 	.word	0x20000000
 8009b7c:	20000004 	.word	0x20000004

08009b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b08b      	sub	sp, #44	; 0x2c
 8009b84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	61fb      	str	r3, [r7, #28]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61bb      	str	r3, [r7, #24]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	627b      	str	r3, [r7, #36]	; 0x24
 8009b92:	2300      	movs	r3, #0
 8009b94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009b9a:	4b2a      	ldr	r3, [pc, #168]	; (8009c44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	f003 030c 	and.w	r3, r3, #12
 8009ba6:	2b04      	cmp	r3, #4
 8009ba8:	d002      	beq.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x30>
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d003      	beq.n	8009bb6 <HAL_RCC_GetSysClockFreq+0x36>
 8009bae:	e03f      	b.n	8009c30 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009bb0:	4b25      	ldr	r3, [pc, #148]	; (8009c48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009bb2:	623b      	str	r3, [r7, #32]
      break;
 8009bb4:	e03f      	b.n	8009c36 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009bbc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009bc0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	fa92 f2a2 	rbit	r2, r2
 8009bc8:	607a      	str	r2, [r7, #4]
  return result;
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	fab2 f282 	clz	r2, r2
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	40d3      	lsrs	r3, r2
 8009bd4:	4a1d      	ldr	r2, [pc, #116]	; (8009c4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8009bd6:	5cd3      	ldrb	r3, [r2, r3]
 8009bd8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009bda:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bde:	f003 030f 	and.w	r3, r3, #15
 8009be2:	220f      	movs	r2, #15
 8009be4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	fa92 f2a2 	rbit	r2, r2
 8009bec:	60fa      	str	r2, [r7, #12]
  return result;
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	fab2 f282 	clz	r2, r2
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	40d3      	lsrs	r3, r2
 8009bf8:	4a15      	ldr	r2, [pc, #84]	; (8009c50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009bfa:	5cd3      	ldrb	r3, [r2, r3]
 8009bfc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d008      	beq.n	8009c1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009c08:	4a0f      	ldr	r2, [pc, #60]	; (8009c48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	fb02 f303 	mul.w	r3, r2, r3
 8009c16:	627b      	str	r3, [r7, #36]	; 0x24
 8009c18:	e007      	b.n	8009c2a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009c1a:	4a0b      	ldr	r2, [pc, #44]	; (8009c48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	fb02 f303 	mul.w	r3, r2, r3
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	623b      	str	r3, [r7, #32]
      break;
 8009c2e:	e002      	b.n	8009c36 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c32:	623b      	str	r3, [r7, #32]
      break;
 8009c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c36:	6a3b      	ldr	r3, [r7, #32]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	372c      	adds	r7, #44	; 0x2c
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bc80      	pop	{r7}
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	40021000 	.word	0x40021000
 8009c48:	007a1200 	.word	0x007a1200
 8009c4c:	0800d44c 	.word	0x0800d44c
 8009c50:	0800d45c 	.word	0x0800d45c

08009c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c58:	4b02      	ldr	r3, [pc, #8]	; (8009c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bc80      	pop	{r7}
 8009c62:	4770      	bx	lr
 8009c64:	20000000 	.word	0x20000000

08009c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009c6e:	f7ff fff1 	bl	8009c54 <HAL_RCC_GetHCLKFreq>
 8009c72:	4601      	mov	r1, r0
 8009c74:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009c80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	fa92 f2a2 	rbit	r2, r2
 8009c88:	603a      	str	r2, [r7, #0]
  return result;
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	fab2 f282 	clz	r2, r2
 8009c90:	b2d2      	uxtb	r2, r2
 8009c92:	40d3      	lsrs	r3, r2
 8009c94:	4a04      	ldr	r2, [pc, #16]	; (8009ca8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009c96:	5cd3      	ldrb	r3, [r2, r3]
 8009c98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	40021000 	.word	0x40021000
 8009ca8:	0800d444 	.word	0x0800d444

08009cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009cb2:	f7ff ffcf 	bl	8009c54 <HAL_RCC_GetHCLKFreq>
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009cc0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009cc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	fa92 f2a2 	rbit	r2, r2
 8009ccc:	603a      	str	r2, [r7, #0]
  return result;
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	fab2 f282 	clz	r2, r2
 8009cd4:	b2d2      	uxtb	r2, r2
 8009cd6:	40d3      	lsrs	r3, r2
 8009cd8:	4a04      	ldr	r2, [pc, #16]	; (8009cec <HAL_RCC_GetPCLK2Freq+0x40>)
 8009cda:	5cd3      	ldrb	r3, [r2, r3]
 8009cdc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	40021000 	.word	0x40021000
 8009cec:	0800d444 	.word	0x0800d444

08009cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b092      	sub	sp, #72	; 0x48
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009d00:	2300      	movs	r3, #0
 8009d02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 80d4 	beq.w	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d14:	4b4e      	ldr	r3, [pc, #312]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10e      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d20:	4b4b      	ldr	r3, [pc, #300]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	4a4a      	ldr	r2, [pc, #296]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d2a:	61d3      	str	r3, [r2, #28]
 8009d2c:	4b48      	ldr	r3, [pc, #288]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d34:	60bb      	str	r3, [r7, #8]
 8009d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d3e:	4b45      	ldr	r3, [pc, #276]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d118      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d4a:	4b42      	ldr	r3, [pc, #264]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a41      	ldr	r2, [pc, #260]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d56:	f7fe f909 	bl	8007f6c <HAL_GetTick>
 8009d5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d5c:	e008      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d5e:	f7fe f905 	bl	8007f6c <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b64      	cmp	r3, #100	; 0x64
 8009d6a:	d901      	bls.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e1d6      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d70:	4b38      	ldr	r3, [pc, #224]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0f0      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009d7c:	4b34      	ldr	r3, [pc, #208]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 8084 	beq.w	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d07c      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d9c:	4b2c      	ldr	r3, [pc, #176]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	fa93 f3a3 	rbit	r3, r3
 8009db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009db6:	fab3 f383 	clz	r3, r3
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b26      	ldr	r3, [pc, #152]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd2:	fa93 f3a3 	rbit	r3, r3
 8009dd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009dda:	fab3 f383 	clz	r3, r3
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	4b1d      	ldr	r3, [pc, #116]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	461a      	mov	r2, r3
 8009dea:	2300      	movs	r3, #0
 8009dec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009dee:	4a18      	ldr	r2, [pc, #96]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d04b      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dfe:	f7fe f8b5 	bl	8007f6c <HAL_GetTick>
 8009e02:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e04:	e00a      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e06:	f7fe f8b1 	bl	8007f6c <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e180      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	fa93 f3a3 	rbit	r3, r3
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
 8009e28:	2302      	movs	r3, #2
 8009e2a:	623b      	str	r3, [r7, #32]
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	fa93 f3a3 	rbit	r3, r3
 8009e32:	61fb      	str	r3, [r7, #28]
  return result;
 8009e34:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e36:	fab3 f383 	clz	r3, r3
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	095b      	lsrs	r3, r3, #5
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	f043 0302 	orr.w	r3, r3, #2
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d108      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009e4a:	4b01      	ldr	r3, [pc, #4]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	e00d      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009e50:	40021000 	.word	0x40021000
 8009e54:	40007000 	.word	0x40007000
 8009e58:	10908100 	.word	0x10908100
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	fa93 f3a3 	rbit	r3, r3
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	4b9a      	ldr	r3, [pc, #616]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	613a      	str	r2, [r7, #16]
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	fa92 f2a2 	rbit	r2, r2
 8009e76:	60fa      	str	r2, [r7, #12]
  return result;
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	fab2 f282 	clz	r2, r2
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e84:	b2d2      	uxtb	r2, r2
 8009e86:	f002 021f 	and.w	r2, r2, #31
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8009e90:	4013      	ands	r3, r2
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0b7      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009e96:	4b8f      	ldr	r3, [pc, #572]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	498c      	ldr	r1, [pc, #560]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ea8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d105      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009eb0:	4b88      	ldr	r3, [pc, #544]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	4a87      	ldr	r2, [pc, #540]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009eba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d008      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ec8:	4b82      	ldr	r3, [pc, #520]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ecc:	f023 0203 	bic.w	r2, r3, #3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	497f      	ldr	r1, [pc, #508]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d008      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ee6:	4b7b      	ldr	r3, [pc, #492]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	4978      	ldr	r1, [pc, #480]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f04:	4b73      	ldr	r3, [pc, #460]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	4970      	ldr	r1, [pc, #448]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d008      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f22:	4b6c      	ldr	r3, [pc, #432]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	f023 0210 	bic.w	r2, r3, #16
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	4969      	ldr	r1, [pc, #420]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009f40:	4b64      	ldr	r3, [pc, #400]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4c:	4961      	ldr	r1, [pc, #388]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d008      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f5e:	4b5d      	ldr	r3, [pc, #372]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	f023 0220 	bic.w	r2, r3, #32
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	495a      	ldr	r1, [pc, #360]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f7c:	4b55      	ldr	r3, [pc, #340]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	4952      	ldr	r1, [pc, #328]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0308 	and.w	r3, r3, #8
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d008      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009f9a:	4b4e      	ldr	r3, [pc, #312]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	494b      	ldr	r1, [pc, #300]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0310 	and.w	r3, r3, #16
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009fb8:	4b46      	ldr	r3, [pc, #280]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	4943      	ldr	r1, [pc, #268]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009fd6:	4b3f      	ldr	r3, [pc, #252]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	493c      	ldr	r1, [pc, #240]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d008      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ff4:	4b37      	ldr	r3, [pc, #220]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a000:	4934      	ldr	r1, [pc, #208]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a002:	4313      	orrs	r3, r2
 800a004:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d008      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a012:	4b30      	ldr	r3, [pc, #192]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01e:	492d      	ldr	r1, [pc, #180]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a020:	4313      	orrs	r3, r2
 800a022:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d008      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a030:	4b28      	ldr	r3, [pc, #160]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03c:	4925      	ldr	r1, [pc, #148]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d008      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a04e:	4b21      	ldr	r3, [pc, #132]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a052:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	491e      	ldr	r1, [pc, #120]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d008      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a06c:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a070:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	4916      	ldr	r1, [pc, #88]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d008      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a08a:	4b12      	ldr	r3, [pc, #72]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	490f      	ldr	r1, [pc, #60]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d008      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a0a8:	4b0a      	ldr	r3, [pc, #40]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b4:	4907      	ldr	r1, [pc, #28]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00c      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a0c6:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	e002      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a0d2:	bf00      	nop
 800a0d4:	40021000 	.word	0x40021000
 800a0d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0da:	4913      	ldr	r1, [pc, #76]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d008      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f8:	490b      	ldr	r1, [pc, #44]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d008      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a10a:	4b07      	ldr	r3, [pc, #28]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a116:	4904      	ldr	r1, [pc, #16]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3748      	adds	r7, #72	; 0x48
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	40021000 	.word	0x40021000

0800a12c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a130:	e7fe      	b.n	800a130 <NMI_Handler+0x4>

0800a132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a132:	b480      	push	{r7}
 800a134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a136:	e7fe      	b.n	800a136 <HardFault_Handler+0x4>

0800a138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a138:	b480      	push	{r7}
 800a13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a13c:	e7fe      	b.n	800a13c <MemManage_Handler+0x4>

0800a13e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a13e:	b480      	push	{r7}
 800a140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a142:	e7fe      	b.n	800a142 <BusFault_Handler+0x4>

0800a144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a144:	b480      	push	{r7}
 800a146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a148:	e7fe      	b.n	800a148 <UsageFault_Handler+0x4>

0800a14a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a14a:	b480      	push	{r7}
 800a14c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a14e:	bf00      	nop
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr

0800a156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a156:	b480      	push	{r7}
 800a158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a15a:	bf00      	nop
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bc80      	pop	{r7}
 800a160:	4770      	bx	lr
	...

0800a164 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a168:	4802      	ldr	r0, [pc, #8]	; (800a174 <DMA1_Channel1_IRQHandler+0x10>)
 800a16a:	f7fa f93d 	bl	80043e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	2000023c 	.word	0x2000023c

0800a178 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a17c:	4802      	ldr	r0, [pc, #8]	; (800a188 <DMA1_Channel6_IRQHandler+0x10>)
 800a17e:	f7fa f933 	bl	80043e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800a182:	bf00      	nop
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200003d4 	.word	0x200003d4

0800a18c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a190:	4802      	ldr	r0, [pc, #8]	; (800a19c <DMA1_Channel7_IRQHandler+0x10>)
 800a192:	f7fa f929 	bl	80043e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800a196:	bf00      	nop
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000390 	.word	0x20000390

0800a1a0 <DMA2_Channel1_IRQHandler>:

void DMA2_Channel1_IRQHandler(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a1a4:	4802      	ldr	r0, [pc, #8]	; (800a1b0 <DMA2_Channel1_IRQHandler+0x10>)
 800a1a6:	f7fa f91f 	bl	80043e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a1aa:	bf00      	nop
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200002d0 	.word	0x200002d0

0800a1b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a1b8:	4802      	ldr	r0, [pc, #8]	; (800a1c4 <TIM3_IRQHandler+0x10>)
 800a1ba:	f7fa fe0d 	bl	8004dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a1be:	bf00      	nop
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000168 	.word	0x20000168

0800a1c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a1cc:	4802      	ldr	r0, [pc, #8]	; (800a1d8 <I2C1_EV_IRQHandler+0x10>)
 800a1ce:	f7fc fad5 	bl	800677c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a1d2:	bf00      	nop
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000314 	.word	0x20000314

0800a1dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a1e0:	4802      	ldr	r0, [pc, #8]	; (800a1ec <USART1_IRQHandler+0x10>)
 800a1e2:	f000 fb6f 	bl	800a8c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a1e6:	bf00      	nop
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200004a4 	.word	0x200004a4

0800a1f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a1f4:	4802      	ldr	r0, [pc, #8]	; (800a200 <USART2_IRQHandler+0x10>)
 800a1f6:	f000 fb65 	bl	800a8c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a1fa:	bf00      	nop
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000528 	.word	0x20000528

0800a204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800a208:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a20c:	f7f9 ffb8 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a210:	bf00      	nop
 800a212:	bd80      	pop	{r7, pc}

0800a214 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a218:	4802      	ldr	r0, [pc, #8]	; (800a224 <SPI3_IRQHandler+0x10>)
 800a21a:	f000 f91d 	bl	800a458 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a21e:	bf00      	nop
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20000418 	.word	0x20000418

0800a228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a230:	4a14      	ldr	r2, [pc, #80]	; (800a284 <_sbrk+0x5c>)
 800a232:	4b15      	ldr	r3, [pc, #84]	; (800a288 <_sbrk+0x60>)
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a23c:	4b13      	ldr	r3, [pc, #76]	; (800a28c <_sbrk+0x64>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d102      	bne.n	800a24a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a244:	4b11      	ldr	r3, [pc, #68]	; (800a28c <_sbrk+0x64>)
 800a246:	4a12      	ldr	r2, [pc, #72]	; (800a290 <_sbrk+0x68>)
 800a248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a24a:	4b10      	ldr	r3, [pc, #64]	; (800a28c <_sbrk+0x64>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4413      	add	r3, r2
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	429a      	cmp	r2, r3
 800a256:	d207      	bcs.n	800a268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a258:	f002 fc38 	bl	800cacc <__errno>
 800a25c:	4603      	mov	r3, r0
 800a25e:	220c      	movs	r2, #12
 800a260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a262:	f04f 33ff 	mov.w	r3, #4294967295
 800a266:	e009      	b.n	800a27c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a268:	4b08      	ldr	r3, [pc, #32]	; (800a28c <_sbrk+0x64>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a26e:	4b07      	ldr	r3, [pc, #28]	; (800a28c <_sbrk+0x64>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4413      	add	r3, r2
 800a276:	4a05      	ldr	r2, [pc, #20]	; (800a28c <_sbrk+0x64>)
 800a278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a27a:	68fb      	ldr	r3, [r7, #12]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20010000 	.word	0x20010000
 800a288:	00000400 	.word	0x00000400
 800a28c:	200001e4 	.word	0x200001e4
 800a290:	200017f0 	.word	0x200017f0

0800a294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e0c1      	b.n	800a42a <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d108      	bne.n	800a2c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2b6:	d009      	beq.n	800a2cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	61da      	str	r2, [r3, #28]
 800a2be:	e005      	b.n	800a2cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d12a      	bne.n	800a334 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a52      	ldr	r2, [pc, #328]	; (800a434 <HAL_SPI_Init+0x1a0>)
 800a2ea:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a52      	ldr	r2, [pc, #328]	; (800a438 <HAL_SPI_Init+0x1a4>)
 800a2f0:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a51      	ldr	r2, [pc, #324]	; (800a43c <HAL_SPI_Init+0x1a8>)
 800a2f6:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a51      	ldr	r2, [pc, #324]	; (800a440 <HAL_SPI_Init+0x1ac>)
 800a2fc:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a50      	ldr	r2, [pc, #320]	; (800a444 <HAL_SPI_Init+0x1b0>)
 800a302:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a50      	ldr	r2, [pc, #320]	; (800a448 <HAL_SPI_Init+0x1b4>)
 800a308:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a4f      	ldr	r2, [pc, #316]	; (800a44c <HAL_SPI_Init+0x1b8>)
 800a30e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a4f      	ldr	r2, [pc, #316]	; (800a450 <HAL_SPI_Init+0x1bc>)
 800a314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d103      	bne.n	800a32a <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a4b      	ldr	r2, [pc, #300]	; (800a454 <HAL_SPI_Init+0x1c0>)
 800a326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a34a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a354:	d902      	bls.n	800a35c <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	e002      	b.n	800a362 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a35c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a360:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a36a:	d007      	beq.n	800a37c <HAL_SPI_Init+0xe8>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a374:	d002      	beq.n	800a37c <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3b4:	431a      	orrs	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3be:	ea42 0103 	orr.w	r1, r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	0c1b      	lsrs	r3, r3, #16
 800a3d8:	f003 0204 	and.w	r2, r3, #4
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ea:	f003 0308 	and.w	r3, r3, #8
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a3f8:	ea42 0103 	orr.w	r1, r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69da      	ldr	r2, [r3, #28]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a418:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	0800a645 	.word	0x0800a645
 800a438:	0800a657 	.word	0x0800a657
 800a43c:	0800a669 	.word	0x0800a669
 800a440:	0800a67b 	.word	0x0800a67b
 800a444:	0800a68d 	.word	0x0800a68d
 800a448:	0800a69f 	.word	0x0800a69f
 800a44c:	0800a6b1 	.word	0x0800a6b1
 800a450:	0800a6c3 	.word	0x0800a6c3
 800a454:	080084cd 	.word	0x080084cd

0800a458 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10e      	bne.n	800a498 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a480:	2b00      	cmp	r3, #0
 800a482:	d009      	beq.n	800a498 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d004      	beq.n	800a498 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
    return;
 800a496:	e0cf      	b.n	800a638 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d009      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x5e>
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d004      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	4798      	blx	r3
    return;
 800a4b4:	e0c0      	b.n	800a638 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <HAL_SPI_IRQHandler+0x7e>
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d105      	bne.n	800a4d6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 80b1 	beq.w	800a638 <HAL_SPI_IRQHandler+0x1e0>
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 80ab 	beq.w	800a638 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d023      	beq.n	800a534 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d011      	beq.n	800a51c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4fc:	f043 0204 	orr.w	r2, r3, #4
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a504:	2300      	movs	r3, #0
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	617b      	str	r3, [r7, #20]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	e00b      	b.n	800a534 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a51c:	2300      	movs	r3, #0
 800a51e:	613b      	str	r3, [r7, #16]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	613b      	str	r3, [r7, #16]
 800a530:	693b      	ldr	r3, [r7, #16]
        return;
 800a532:	e081      	b.n	800a638 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	f003 0320 	and.w	r3, r3, #32
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d014      	beq.n	800a568 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a542:	f043 0201 	orr.w	r2, r3, #1
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00c      	beq.n	800a58c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a576:	f043 0208 	orr.w	r2, r3, #8
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a57e:	2300      	movs	r3, #0
 800a580:	60bb      	str	r3, [r7, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	60bb      	str	r3, [r7, #8]
 800a58a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a590:	2b00      	cmp	r3, #0
 800a592:	d050      	beq.n	800a636 <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d104      	bne.n	800a5c0 <HAL_SPI_IRQHandler+0x168>
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d034      	beq.n	800a62a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0203 	bic.w	r2, r2, #3
 800a5ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d011      	beq.n	800a5fc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5dc:	4a18      	ldr	r2, [pc, #96]	; (800a640 <HAL_SPI_IRQHandler+0x1e8>)
 800a5de:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7f9 fec1 	bl	800436c <HAL_DMA_Abort_IT>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d005      	beq.n	800a5fc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a600:	2b00      	cmp	r3, #0
 800a602:	d017      	beq.n	800a634 <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a608:	4a0d      	ldr	r2, [pc, #52]	; (800a640 <HAL_SPI_IRQHandler+0x1e8>)
 800a60a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a610:	4618      	mov	r0, r3
 800a612:	f7f9 feab 	bl	800436c <HAL_DMA_Abort_IT>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a620:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a628:	e004      	b.n	800a634 <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a632:	e000      	b.n	800a636 <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 800a634:	bf00      	nop
    return;
 800a636:	bf00      	nop
  }
}
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	0800a6d5 	.word	0x0800a6d5

0800a644 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	bc80      	pop	{r7}
 800a654:	4770      	bx	lr

0800a656 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	bc80      	pop	{r7}
 800a666:	4770      	bx	lr

0800a668 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr

0800a67a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a682:	bf00      	nop
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	bc80      	pop	{r7}
 800a68a:	4770      	bx	lr

0800a68c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr

0800a69e <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bc80      	pop	{r7}
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bc80      	pop	{r7}
 800a6c0:	4770      	bx	lr

0800a6c2 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr

0800a6d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6f8:	bf00      	nop
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e040      	b.n	800a794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7fd ffd2 	bl	80086cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2224      	movs	r2, #36	; 0x24
 800a72c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0201 	bic.w	r2, r2, #1
 800a73c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fbbc 	bl	800aebc <UART_SetConfig>
 800a744:	4603      	mov	r3, r0
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e022      	b.n	800a794 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fd86 	bl	800b268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a76a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689a      	ldr	r2, [r3, #8]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a77a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f042 0201 	orr.w	r2, r2, #1
 800a78a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fe0c 	bl	800b3aa <UART_CheckIdleState>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08a      	sub	sp, #40	; 0x28
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	603b      	str	r3, [r7, #0]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7b0:	2b20      	cmp	r3, #32
 800a7b2:	f040 8082 	bne.w	800a8ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <HAL_UART_Transmit+0x26>
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e07a      	b.n	800a8bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d101      	bne.n	800a7d4 <HAL_UART_Transmit+0x38>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e073      	b.n	800a8bc <HAL_UART_Transmit+0x120>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2221      	movs	r2, #33	; 0x21
 800a7e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7ea:	f7fd fbbf 	bl	8007f6c <HAL_GetTick>
 800a7ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	88fa      	ldrh	r2, [r7, #6]
 800a7f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	88fa      	ldrh	r2, [r7, #6]
 800a7fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a808:	d108      	bne.n	800a81c <HAL_UART_Transmit+0x80>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d104      	bne.n	800a81c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a812:	2300      	movs	r3, #0
 800a814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	61bb      	str	r3, [r7, #24]
 800a81a:	e003      	b.n	800a824 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a82c:	e02d      	b.n	800a88a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2200      	movs	r2, #0
 800a836:	2180      	movs	r1, #128	; 0x80
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 fdff 	bl	800b43c <UART_WaitOnFlagUntilTimeout>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	e039      	b.n	800a8bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10b      	bne.n	800a866 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	881a      	ldrh	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a85a:	b292      	uxth	r2, r2
 800a85c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	3302      	adds	r3, #2
 800a862:	61bb      	str	r3, [r7, #24]
 800a864:	e008      	b.n	800a878 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	781a      	ldrb	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	b292      	uxth	r2, r2
 800a870:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	3301      	adds	r3, #1
 800a876:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a87e:	b29b      	uxth	r3, r3
 800a880:	3b01      	subs	r3, #1
 800a882:	b29a      	uxth	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a890:	b29b      	uxth	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1cb      	bne.n	800a82e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2200      	movs	r2, #0
 800a89e:	2140      	movs	r1, #64	; 0x40
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 fdcb 	bl	800b43c <UART_WaitOnFlagUntilTimeout>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e005      	b.n	800a8bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e000      	b.n	800a8bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a8ba:	2302      	movs	r3, #2
  }
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b0ba      	sub	sp, #232	; 0xe8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a8ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a8ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a8f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d115      	bne.n	800a92c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a904:	f003 0320 	and.w	r3, r3, #32
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00f      	beq.n	800a92c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a910:	f003 0320 	and.w	r3, r3, #32
 800a914:	2b00      	cmp	r3, #0
 800a916:	d009      	beq.n	800a92c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 82a3 	beq.w	800ae68 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	4798      	blx	r3
      }
      return;
 800a92a:	e29d      	b.n	800ae68 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a92c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 8117 	beq.w	800ab64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d106      	bne.n	800a950 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a946:	4b85      	ldr	r3, [pc, #532]	; (800ab5c <HAL_UART_IRQHandler+0x298>)
 800a948:	4013      	ands	r3, r2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 810a 	beq.w	800ab64 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d011      	beq.n	800a980 <HAL_UART_IRQHandler+0xbc>
 800a95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00b      	beq.n	800a980 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2201      	movs	r2, #1
 800a96e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a976:	f043 0201 	orr.w	r2, r3, #1
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d011      	beq.n	800a9b0 <HAL_UART_IRQHandler+0xec>
 800a98c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00b      	beq.n	800a9b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2202      	movs	r2, #2
 800a99e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a6:	f043 0204 	orr.w	r2, r3, #4
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d011      	beq.n	800a9e0 <HAL_UART_IRQHandler+0x11c>
 800a9bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00b      	beq.n	800a9e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2204      	movs	r2, #4
 800a9ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9d6:	f043 0202 	orr.w	r2, r3, #2
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9e4:	f003 0308 	and.w	r3, r3, #8
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d017      	beq.n	800aa1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d105      	bne.n	800aa04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a9f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00b      	beq.n	800aa1c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2208      	movs	r2, #8
 800aa0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa12:	f043 0208 	orr.w	r2, r3, #8
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d012      	beq.n	800aa4e <HAL_UART_IRQHandler+0x18a>
 800aa28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00c      	beq.n	800aa4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa44:	f043 0220 	orr.w	r2, r3, #32
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 8209 	beq.w	800ae6c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5e:	f003 0320 	and.w	r3, r3, #32
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00d      	beq.n	800aa82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d007      	beq.n	800aa82 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa96:	2b40      	cmp	r3, #64	; 0x40
 800aa98:	d005      	beq.n	800aaa6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d04f      	beq.n	800ab46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fd8c 	bl	800b5c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab6:	2b40      	cmp	r3, #64	; 0x40
 800aab8:	d141      	bne.n	800ab3e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3308      	adds	r3, #8
 800aae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aaea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aaf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aafe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1d9      	bne.n	800aaba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d013      	beq.n	800ab36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab12:	4a13      	ldr	r2, [pc, #76]	; (800ab60 <HAL_UART_IRQHandler+0x29c>)
 800ab14:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7f9 fc26 	bl	800436c <HAL_DMA_Abort_IT>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d017      	beq.n	800ab56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ab30:	4610      	mov	r0, r2
 800ab32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab34:	e00f      	b.n	800ab56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9ab 	bl	800ae92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab3c:	e00b      	b.n	800ab56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f9a7 	bl	800ae92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab44:	e007      	b.n	800ab56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f9a3 	bl	800ae92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ab54:	e18a      	b.n	800ae6c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab56:	bf00      	nop
    return;
 800ab58:	e188      	b.n	800ae6c <HAL_UART_IRQHandler+0x5a8>
 800ab5a:	bf00      	nop
 800ab5c:	04000120 	.word	0x04000120
 800ab60:	0800b689 	.word	0x0800b689

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	f040 8143 	bne.w	800adf4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab72:	f003 0310 	and.w	r3, r3, #16
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 813c 	beq.w	800adf4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8135 	beq.w	800adf4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2210      	movs	r2, #16
 800ab90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab9c:	2b40      	cmp	r3, #64	; 0x40
 800ab9e:	f040 80b1 	bne.w	800ad04 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 815c 	beq.w	800ae70 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800abbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f080 8154 	bcs.w	800ae70 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	2b20      	cmp	r3, #32
 800abda:	f000 8085 	beq.w	800ace8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800abf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac18:	e841 2300 	strex	r3, r2, [r1]
 800ac1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1da      	bne.n	800abde <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac32:	e853 3f00 	ldrex	r3, [r3]
 800ac36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac3a:	f023 0301 	bic.w	r3, r3, #1
 800ac3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac58:	e841 2300 	strex	r3, r2, [r1]
 800ac5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e1      	bne.n	800ac28 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3308      	adds	r3, #8
 800ac6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3308      	adds	r3, #8
 800ac84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac88:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e3      	bne.n	800ac64 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb8:	f023 0310 	bic.w	r3, r3, #16
 800acbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acca:	65bb      	str	r3, [r7, #88]	; 0x58
 800accc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e4      	bne.n	800aca8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7f9 fb0a 	bl	80042fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f8d1 	bl	800aea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad02:	e0b5      	b.n	800ae70 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f000 80a7 	beq.w	800ae74 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800ad26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 80a2 	beq.w	800ae74 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	e853 3f00 	ldrex	r3, [r3]
 800ad3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad52:	647b      	str	r3, [r7, #68]	; 0x44
 800ad54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e4      	bne.n	800ad30 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	623b      	str	r3, [r7, #32]
   return(result);
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	f023 0301 	bic.w	r3, r3, #1
 800ad7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3308      	adds	r3, #8
 800ad86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad8a:	633a      	str	r2, [r7, #48]	; 0x30
 800ad8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad92:	e841 2300 	strex	r3, r2, [r1]
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1e3      	bne.n	800ad66 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2220      	movs	r2, #32
 800ada2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	60fb      	str	r3, [r7, #12]
   return(result);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f023 0310 	bic.w	r3, r3, #16
 800adc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800add2:	61fb      	str	r3, [r7, #28]
 800add4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add6:	69b9      	ldr	r1, [r7, #24]
 800add8:	69fa      	ldr	r2, [r7, #28]
 800adda:	e841 2300 	strex	r3, r2, [r1]
 800adde:	617b      	str	r3, [r7, #20]
   return(result);
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1e4      	bne.n	800adb0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ade6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f859 	bl	800aea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800adf2:	e03f      	b.n	800ae74 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800adf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00e      	beq.n	800ae1e <HAL_UART_IRQHandler+0x55a>
 800ae00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d008      	beq.n	800ae1e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ae14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fc76 	bl	800b708 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae1c:	e02d      	b.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ae1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00e      	beq.n	800ae48 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ae2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d008      	beq.n	800ae48 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01c      	beq.n	800ae78 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	4798      	blx	r3
    }
    return;
 800ae46:	e017      	b.n	800ae78 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d012      	beq.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
 800ae54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00c      	beq.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fc27 	bl	800b6b4 <UART_EndTransmit_IT>
    return;
 800ae66:	e008      	b.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
      return;
 800ae68:	bf00      	nop
 800ae6a:	e006      	b.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
    return;
 800ae6c:	bf00      	nop
 800ae6e:	e004      	b.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
      return;
 800ae70:	bf00      	nop
 800ae72:	e002      	b.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
      return;
 800ae74:	bf00      	nop
 800ae76:	e000      	b.n	800ae7a <HAL_UART_IRQHandler+0x5b6>
    return;
 800ae78:	bf00      	nop
  }

}
 800ae7a:	37e8      	adds	r7, #232	; 0xe8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bc80      	pop	{r7}
 800ae90:	4770      	bx	lr

0800ae92 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b083      	sub	sp, #12
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae9a:	bf00      	nop
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bc80      	pop	{r7}
 800aea2:	4770      	bx	lr

0800aea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bc80      	pop	{r7}
 800aeb8:	4770      	bx	lr
	...

0800aebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	431a      	orrs	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	431a      	orrs	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	4313      	orrs	r3, r2
 800aede:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b92      	ldr	r3, [pc, #584]	; (800b130 <UART_SetConfig+0x274>)
 800aee8:	4013      	ands	r3, r2
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	6812      	ldr	r2, [r2, #0]
 800aeee:	6979      	ldr	r1, [r7, #20]
 800aef0:	430b      	orrs	r3, r1
 800aef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	430a      	orrs	r2, r1
 800af08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	4313      	orrs	r3, r2
 800af18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a80      	ldr	r2, [pc, #512]	; (800b134 <UART_SetConfig+0x278>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d120      	bne.n	800af7a <UART_SetConfig+0xbe>
 800af38:	4b7f      	ldr	r3, [pc, #508]	; (800b138 <UART_SetConfig+0x27c>)
 800af3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3c:	f003 0303 	and.w	r3, r3, #3
 800af40:	2b03      	cmp	r3, #3
 800af42:	d817      	bhi.n	800af74 <UART_SetConfig+0xb8>
 800af44:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <UART_SetConfig+0x90>)
 800af46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4a:	bf00      	nop
 800af4c:	0800af5d 	.word	0x0800af5d
 800af50:	0800af69 	.word	0x0800af69
 800af54:	0800af6f 	.word	0x0800af6f
 800af58:	0800af63 	.word	0x0800af63
 800af5c:	2301      	movs	r3, #1
 800af5e:	77fb      	strb	r3, [r7, #31]
 800af60:	e0b5      	b.n	800b0ce <UART_SetConfig+0x212>
 800af62:	2302      	movs	r3, #2
 800af64:	77fb      	strb	r3, [r7, #31]
 800af66:	e0b2      	b.n	800b0ce <UART_SetConfig+0x212>
 800af68:	2304      	movs	r3, #4
 800af6a:	77fb      	strb	r3, [r7, #31]
 800af6c:	e0af      	b.n	800b0ce <UART_SetConfig+0x212>
 800af6e:	2308      	movs	r3, #8
 800af70:	77fb      	strb	r3, [r7, #31]
 800af72:	e0ac      	b.n	800b0ce <UART_SetConfig+0x212>
 800af74:	2310      	movs	r3, #16
 800af76:	77fb      	strb	r3, [r7, #31]
 800af78:	e0a9      	b.n	800b0ce <UART_SetConfig+0x212>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a6f      	ldr	r2, [pc, #444]	; (800b13c <UART_SetConfig+0x280>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d124      	bne.n	800afce <UART_SetConfig+0x112>
 800af84:	4b6c      	ldr	r3, [pc, #432]	; (800b138 <UART_SetConfig+0x27c>)
 800af86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af90:	d011      	beq.n	800afb6 <UART_SetConfig+0xfa>
 800af92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af96:	d817      	bhi.n	800afc8 <UART_SetConfig+0x10c>
 800af98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af9c:	d011      	beq.n	800afc2 <UART_SetConfig+0x106>
 800af9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afa2:	d811      	bhi.n	800afc8 <UART_SetConfig+0x10c>
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d003      	beq.n	800afb0 <UART_SetConfig+0xf4>
 800afa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afac:	d006      	beq.n	800afbc <UART_SetConfig+0x100>
 800afae:	e00b      	b.n	800afc8 <UART_SetConfig+0x10c>
 800afb0:	2300      	movs	r3, #0
 800afb2:	77fb      	strb	r3, [r7, #31]
 800afb4:	e08b      	b.n	800b0ce <UART_SetConfig+0x212>
 800afb6:	2302      	movs	r3, #2
 800afb8:	77fb      	strb	r3, [r7, #31]
 800afba:	e088      	b.n	800b0ce <UART_SetConfig+0x212>
 800afbc:	2304      	movs	r3, #4
 800afbe:	77fb      	strb	r3, [r7, #31]
 800afc0:	e085      	b.n	800b0ce <UART_SetConfig+0x212>
 800afc2:	2308      	movs	r3, #8
 800afc4:	77fb      	strb	r3, [r7, #31]
 800afc6:	e082      	b.n	800b0ce <UART_SetConfig+0x212>
 800afc8:	2310      	movs	r3, #16
 800afca:	77fb      	strb	r3, [r7, #31]
 800afcc:	e07f      	b.n	800b0ce <UART_SetConfig+0x212>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a5b      	ldr	r2, [pc, #364]	; (800b140 <UART_SetConfig+0x284>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d124      	bne.n	800b022 <UART_SetConfig+0x166>
 800afd8:	4b57      	ldr	r3, [pc, #348]	; (800b138 <UART_SetConfig+0x27c>)
 800afda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800afe0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800afe4:	d011      	beq.n	800b00a <UART_SetConfig+0x14e>
 800afe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800afea:	d817      	bhi.n	800b01c <UART_SetConfig+0x160>
 800afec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aff0:	d011      	beq.n	800b016 <UART_SetConfig+0x15a>
 800aff2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aff6:	d811      	bhi.n	800b01c <UART_SetConfig+0x160>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <UART_SetConfig+0x148>
 800affc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b000:	d006      	beq.n	800b010 <UART_SetConfig+0x154>
 800b002:	e00b      	b.n	800b01c <UART_SetConfig+0x160>
 800b004:	2300      	movs	r3, #0
 800b006:	77fb      	strb	r3, [r7, #31]
 800b008:	e061      	b.n	800b0ce <UART_SetConfig+0x212>
 800b00a:	2302      	movs	r3, #2
 800b00c:	77fb      	strb	r3, [r7, #31]
 800b00e:	e05e      	b.n	800b0ce <UART_SetConfig+0x212>
 800b010:	2304      	movs	r3, #4
 800b012:	77fb      	strb	r3, [r7, #31]
 800b014:	e05b      	b.n	800b0ce <UART_SetConfig+0x212>
 800b016:	2308      	movs	r3, #8
 800b018:	77fb      	strb	r3, [r7, #31]
 800b01a:	e058      	b.n	800b0ce <UART_SetConfig+0x212>
 800b01c:	2310      	movs	r3, #16
 800b01e:	77fb      	strb	r3, [r7, #31]
 800b020:	e055      	b.n	800b0ce <UART_SetConfig+0x212>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a47      	ldr	r2, [pc, #284]	; (800b144 <UART_SetConfig+0x288>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d124      	bne.n	800b076 <UART_SetConfig+0x1ba>
 800b02c:	4b42      	ldr	r3, [pc, #264]	; (800b138 <UART_SetConfig+0x27c>)
 800b02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b030:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b038:	d011      	beq.n	800b05e <UART_SetConfig+0x1a2>
 800b03a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b03e:	d817      	bhi.n	800b070 <UART_SetConfig+0x1b4>
 800b040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b044:	d011      	beq.n	800b06a <UART_SetConfig+0x1ae>
 800b046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b04a:	d811      	bhi.n	800b070 <UART_SetConfig+0x1b4>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <UART_SetConfig+0x19c>
 800b050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b054:	d006      	beq.n	800b064 <UART_SetConfig+0x1a8>
 800b056:	e00b      	b.n	800b070 <UART_SetConfig+0x1b4>
 800b058:	2300      	movs	r3, #0
 800b05a:	77fb      	strb	r3, [r7, #31]
 800b05c:	e037      	b.n	800b0ce <UART_SetConfig+0x212>
 800b05e:	2302      	movs	r3, #2
 800b060:	77fb      	strb	r3, [r7, #31]
 800b062:	e034      	b.n	800b0ce <UART_SetConfig+0x212>
 800b064:	2304      	movs	r3, #4
 800b066:	77fb      	strb	r3, [r7, #31]
 800b068:	e031      	b.n	800b0ce <UART_SetConfig+0x212>
 800b06a:	2308      	movs	r3, #8
 800b06c:	77fb      	strb	r3, [r7, #31]
 800b06e:	e02e      	b.n	800b0ce <UART_SetConfig+0x212>
 800b070:	2310      	movs	r3, #16
 800b072:	77fb      	strb	r3, [r7, #31]
 800b074:	e02b      	b.n	800b0ce <UART_SetConfig+0x212>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a33      	ldr	r2, [pc, #204]	; (800b148 <UART_SetConfig+0x28c>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d124      	bne.n	800b0ca <UART_SetConfig+0x20e>
 800b080:	4b2d      	ldr	r3, [pc, #180]	; (800b138 <UART_SetConfig+0x27c>)
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b08c:	d011      	beq.n	800b0b2 <UART_SetConfig+0x1f6>
 800b08e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b092:	d817      	bhi.n	800b0c4 <UART_SetConfig+0x208>
 800b094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b098:	d011      	beq.n	800b0be <UART_SetConfig+0x202>
 800b09a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b09e:	d811      	bhi.n	800b0c4 <UART_SetConfig+0x208>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d003      	beq.n	800b0ac <UART_SetConfig+0x1f0>
 800b0a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0a8:	d006      	beq.n	800b0b8 <UART_SetConfig+0x1fc>
 800b0aa:	e00b      	b.n	800b0c4 <UART_SetConfig+0x208>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	77fb      	strb	r3, [r7, #31]
 800b0b0:	e00d      	b.n	800b0ce <UART_SetConfig+0x212>
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	77fb      	strb	r3, [r7, #31]
 800b0b6:	e00a      	b.n	800b0ce <UART_SetConfig+0x212>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	77fb      	strb	r3, [r7, #31]
 800b0bc:	e007      	b.n	800b0ce <UART_SetConfig+0x212>
 800b0be:	2308      	movs	r3, #8
 800b0c0:	77fb      	strb	r3, [r7, #31]
 800b0c2:	e004      	b.n	800b0ce <UART_SetConfig+0x212>
 800b0c4:	2310      	movs	r3, #16
 800b0c6:	77fb      	strb	r3, [r7, #31]
 800b0c8:	e001      	b.n	800b0ce <UART_SetConfig+0x212>
 800b0ca:	2310      	movs	r3, #16
 800b0cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0d6:	d16c      	bne.n	800b1b2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800b0d8:	7ffb      	ldrb	r3, [r7, #31]
 800b0da:	2b08      	cmp	r3, #8
 800b0dc:	d838      	bhi.n	800b150 <UART_SetConfig+0x294>
 800b0de:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <UART_SetConfig+0x228>)
 800b0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e4:	0800b109 	.word	0x0800b109
 800b0e8:	0800b111 	.word	0x0800b111
 800b0ec:	0800b119 	.word	0x0800b119
 800b0f0:	0800b151 	.word	0x0800b151
 800b0f4:	0800b11f 	.word	0x0800b11f
 800b0f8:	0800b151 	.word	0x0800b151
 800b0fc:	0800b151 	.word	0x0800b151
 800b100:	0800b151 	.word	0x0800b151
 800b104:	0800b127 	.word	0x0800b127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b108:	f7fe fdae 	bl	8009c68 <HAL_RCC_GetPCLK1Freq>
 800b10c:	61b8      	str	r0, [r7, #24]
        break;
 800b10e:	e024      	b.n	800b15a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b110:	f7fe fdcc 	bl	8009cac <HAL_RCC_GetPCLK2Freq>
 800b114:	61b8      	str	r0, [r7, #24]
        break;
 800b116:	e020      	b.n	800b15a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b118:	4b0c      	ldr	r3, [pc, #48]	; (800b14c <UART_SetConfig+0x290>)
 800b11a:	61bb      	str	r3, [r7, #24]
        break;
 800b11c:	e01d      	b.n	800b15a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b11e:	f7fe fd2f 	bl	8009b80 <HAL_RCC_GetSysClockFreq>
 800b122:	61b8      	str	r0, [r7, #24]
        break;
 800b124:	e019      	b.n	800b15a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b12a:	61bb      	str	r3, [r7, #24]
        break;
 800b12c:	e015      	b.n	800b15a <UART_SetConfig+0x29e>
 800b12e:	bf00      	nop
 800b130:	efff69f3 	.word	0xefff69f3
 800b134:	40013800 	.word	0x40013800
 800b138:	40021000 	.word	0x40021000
 800b13c:	40004400 	.word	0x40004400
 800b140:	40004800 	.word	0x40004800
 800b144:	40004c00 	.word	0x40004c00
 800b148:	40005000 	.word	0x40005000
 800b14c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	77bb      	strb	r3, [r7, #30]
        break;
 800b158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d075      	beq.n	800b24c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	005a      	lsls	r2, r3, #1
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	085b      	lsrs	r3, r3, #1
 800b16a:	441a      	add	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	fbb2 f3f3 	udiv	r3, r2, r3
 800b174:	b29b      	uxth	r3, r3
 800b176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b0f      	cmp	r3, #15
 800b17c:	d916      	bls.n	800b1ac <UART_SetConfig+0x2f0>
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b184:	d212      	bcs.n	800b1ac <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	f023 030f 	bic.w	r3, r3, #15
 800b18e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	085b      	lsrs	r3, r3, #1
 800b194:	b29b      	uxth	r3, r3
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	89fb      	ldrh	r3, [r7, #14]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	89fa      	ldrh	r2, [r7, #14]
 800b1a8:	60da      	str	r2, [r3, #12]
 800b1aa:	e04f      	b.n	800b24c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	77bb      	strb	r3, [r7, #30]
 800b1b0:	e04c      	b.n	800b24c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1b2:	7ffb      	ldrb	r3, [r7, #31]
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d828      	bhi.n	800b20a <UART_SetConfig+0x34e>
 800b1b8:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <UART_SetConfig+0x304>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b1e5 	.word	0x0800b1e5
 800b1c4:	0800b1ed 	.word	0x0800b1ed
 800b1c8:	0800b1f5 	.word	0x0800b1f5
 800b1cc:	0800b20b 	.word	0x0800b20b
 800b1d0:	0800b1fb 	.word	0x0800b1fb
 800b1d4:	0800b20b 	.word	0x0800b20b
 800b1d8:	0800b20b 	.word	0x0800b20b
 800b1dc:	0800b20b 	.word	0x0800b20b
 800b1e0:	0800b203 	.word	0x0800b203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1e4:	f7fe fd40 	bl	8009c68 <HAL_RCC_GetPCLK1Freq>
 800b1e8:	61b8      	str	r0, [r7, #24]
        break;
 800b1ea:	e013      	b.n	800b214 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1ec:	f7fe fd5e 	bl	8009cac <HAL_RCC_GetPCLK2Freq>
 800b1f0:	61b8      	str	r0, [r7, #24]
        break;
 800b1f2:	e00f      	b.n	800b214 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1f4:	4b1b      	ldr	r3, [pc, #108]	; (800b264 <UART_SetConfig+0x3a8>)
 800b1f6:	61bb      	str	r3, [r7, #24]
        break;
 800b1f8:	e00c      	b.n	800b214 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1fa:	f7fe fcc1 	bl	8009b80 <HAL_RCC_GetSysClockFreq>
 800b1fe:	61b8      	str	r0, [r7, #24]
        break;
 800b200:	e008      	b.n	800b214 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b206:	61bb      	str	r3, [r7, #24]
        break;
 800b208:	e004      	b.n	800b214 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	77bb      	strb	r3, [r7, #30]
        break;
 800b212:	bf00      	nop
    }

    if (pclk != 0U)
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d018      	beq.n	800b24c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	085a      	lsrs	r2, r3, #1
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	441a      	add	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	fbb2 f3f3 	udiv	r3, r2, r3
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2b0f      	cmp	r3, #15
 800b234:	d908      	bls.n	800b248 <UART_SetConfig+0x38c>
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23c:	d204      	bcs.n	800b248 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	60da      	str	r2, [r3, #12]
 800b246:	e001      	b.n	800b24c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b258:	7fbb      	ldrb	r3, [r7, #30]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3720      	adds	r7, #32
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	007a1200 	.word	0x007a1200

0800b268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00a      	beq.n	800b2b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00a      	beq.n	800b2d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	f003 0308 	and.w	r3, r3, #8
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00a      	beq.n	800b33c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	430a      	orrs	r2, r1
 800b33a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b344:	2b00      	cmp	r3, #0
 800b346:	d01a      	beq.n	800b37e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	430a      	orrs	r2, r1
 800b35c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b366:	d10a      	bne.n	800b37e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	430a      	orrs	r2, r1
 800b37c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00a      	beq.n	800b3a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	430a      	orrs	r2, r1
 800b39e:	605a      	str	r2, [r3, #4]
  }
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bc80      	pop	{r7}
 800b3a8:	4770      	bx	lr

0800b3aa <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b086      	sub	sp, #24
 800b3ae:	af02      	add	r7, sp, #8
 800b3b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3ba:	f7fc fdd7 	bl	8007f6c <HAL_GetTick>
 800b3be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0308 	and.w	r3, r3, #8
 800b3ca:	2b08      	cmp	r3, #8
 800b3cc:	d10e      	bne.n	800b3ec <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f82d 	bl	800b43c <UART_WaitOnFlagUntilTimeout>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e023      	b.n	800b434 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 0304 	and.w	r3, r3, #4
 800b3f6:	2b04      	cmp	r3, #4
 800b3f8:	d10e      	bne.n	800b418 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f817 	bl	800b43c <UART_WaitOnFlagUntilTimeout>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b414:	2303      	movs	r3, #3
 800b416:	e00d      	b.n	800b434 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2220      	movs	r2, #32
 800b41c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b09c      	sub	sp, #112	; 0x70
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	4613      	mov	r3, r2
 800b44a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b44c:	e0a5      	b.n	800b59a <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b44e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b454:	f000 80a1 	beq.w	800b59a <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b458:	f7fc fd88 	bl	8007f6c <HAL_GetTick>
 800b45c:	4602      	mov	r2, r0
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b464:	429a      	cmp	r2, r3
 800b466:	d302      	bcc.n	800b46e <UART_WaitOnFlagUntilTimeout+0x32>
 800b468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d13e      	bne.n	800b4ec <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b476:	e853 3f00 	ldrex	r3, [r3]
 800b47a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b482:	667b      	str	r3, [r7, #100]	; 0x64
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b48c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b48e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b492:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e6      	bne.n	800b46e <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	f023 0301 	bic.w	r3, r3, #1
 800b4b6:	663b      	str	r3, [r7, #96]	; 0x60
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3308      	adds	r3, #8
 800b4be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4c0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e5      	bne.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2220      	movs	r2, #32
 800b4de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e067      	b.n	800b5bc <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0304 	and.w	r3, r3, #4
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d04f      	beq.n	800b59a <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b508:	d147      	bne.n	800b59a <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b512:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b528:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b532:	637b      	str	r3, [r7, #52]	; 0x34
 800b534:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e6      	bne.n	800b514 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	613b      	str	r3, [r7, #16]
   return(result);
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f023 0301 	bic.w	r3, r3, #1
 800b55c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b566:	623a      	str	r2, [r7, #32]
 800b568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	69f9      	ldr	r1, [r7, #28]
 800b56c:	6a3a      	ldr	r2, [r7, #32]
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	61bb      	str	r3, [r7, #24]
   return(result);
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e5      	bne.n	800b546 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2220      	movs	r2, #32
 800b57e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2220      	movs	r2, #32
 800b584:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2220      	movs	r2, #32
 800b58a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e010      	b.n	800b5bc <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69da      	ldr	r2, [r3, #28]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	bf0c      	ite	eq
 800b5aa:	2301      	moveq	r3, #1
 800b5ac:	2300      	movne	r3, #0
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	79fb      	ldrb	r3, [r7, #7]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	f43f af4a 	beq.w	800b44e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3770      	adds	r7, #112	; 0x70
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b095      	sub	sp, #84	; 0x54
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d4:	e853 3f00 	ldrex	r3, [r3]
 800b5d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ea:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e6      	bne.n	800b5cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	f023 0301 	bic.w	r3, r3, #1
 800b614:	64bb      	str	r3, [r7, #72]	; 0x48
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3308      	adds	r3, #8
 800b61c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b61e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b620:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b626:	e841 2300 	strex	r3, r2, [r1]
 800b62a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1e5      	bne.n	800b5fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b636:	2b01      	cmp	r3, #1
 800b638:	d118      	bne.n	800b66c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	e853 3f00 	ldrex	r3, [r3]
 800b646:	60bb      	str	r3, [r7, #8]
   return(result);
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f023 0310 	bic.w	r3, r3, #16
 800b64e:	647b      	str	r3, [r7, #68]	; 0x44
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	461a      	mov	r2, r3
 800b656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b658:	61bb      	str	r3, [r7, #24]
 800b65a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65c:	6979      	ldr	r1, [r7, #20]
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	e841 2300 	strex	r3, r2, [r1]
 800b664:	613b      	str	r3, [r7, #16]
   return(result);
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e6      	bne.n	800b63a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2220      	movs	r2, #32
 800b670:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b67e:	bf00      	nop
 800b680:	3754      	adds	r7, #84	; 0x54
 800b682:	46bd      	mov	sp, r7
 800b684:	bc80      	pop	{r7}
 800b686:	4770      	bx	lr

0800b688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff fbf3 	bl	800ae92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ac:	bf00      	nop
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6d0:	61fb      	str	r3, [r7, #28]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	61bb      	str	r3, [r7, #24]
 800b6dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6de:	6979      	ldr	r1, [r7, #20]
 800b6e0:	69ba      	ldr	r2, [r7, #24]
 800b6e2:	e841 2300 	strex	r3, r2, [r1]
 800b6e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e6      	bne.n	800b6bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff fbc0 	bl	800ae80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b700:	bf00      	nop
 800b702:	3720      	adds	r7, #32
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr
	...

0800b71c <Ea_Init>:
/**
  * @brief	Ea module initialization function
  * @return	None
  */
void Ea_Init(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Ea_InitDone_b = TRUE;
 800b720:	4b03      	ldr	r3, [pc, #12]	; (800b730 <Ea_Init+0x14>)
 800b722:	2201      	movs	r2, #1
 800b724:	701a      	strb	r2, [r3, #0]
}
 800b726:	bf00      	nop
 800b728:	46bd      	mov	sp, r7
 800b72a:	bc80      	pop	{r7}
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	200001e8 	.word	0x200001e8

0800b734 <Ea_Read>:
  * @param	BlockId		ID of the block to be read
  * @param  data		Pointer to the buffer where read data is stored
  * @return	None
  */
void Ea_Read(uint16 Block_Id, uint8 *data)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af02      	add	r7, sp, #8
 800b73a:	4603      	mov	r3, r0
 800b73c:	6039      	str	r1, [r7, #0]
 800b73e:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800b740:	88fb      	ldrh	r3, [r7, #6]
 800b742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b746:	d20b      	bcs.n	800b760 <Ea_Read+0x2c>
	{
		HAL_I2C_Mem_Read_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800b748:	88fb      	ldrh	r3, [r7, #6]
 800b74a:	015b      	lsls	r3, r3, #5
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	2320      	movs	r3, #32
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	2302      	movs	r3, #2
 800b758:	21a0      	movs	r1, #160	; 0xa0
 800b75a:	4803      	ldr	r0, [pc, #12]	; (800b768 <Ea_Read+0x34>)
 800b75c:	f7fa ff16 	bl	800658c <HAL_I2C_Mem_Read_DMA>
	}
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20000314 	.word	0x20000314

0800b76c <Ea_Write>:
  * @param	BlockId		ID of the block to be written
  * @param  data		Pointer to the data to be written
  * @return	None
  */
void Ea_Write(uint16 Block_Id, uint8 *data)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af02      	add	r7, sp, #8
 800b772:	4603      	mov	r3, r0
 800b774:	6039      	str	r1, [r7, #0]
 800b776:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800b778:	88fb      	ldrh	r3, [r7, #6]
 800b77a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b77e:	d20b      	bcs.n	800b798 <Ea_Write+0x2c>
	{
		HAL_I2C_Mem_Write_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800b780:	88fb      	ldrh	r3, [r7, #6]
 800b782:	015b      	lsls	r3, r3, #5
 800b784:	b29a      	uxth	r2, r3
 800b786:	2320      	movs	r3, #32
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	2302      	movs	r3, #2
 800b790:	21a0      	movs	r1, #160	; 0xa0
 800b792:	4803      	ldr	r0, [pc, #12]	; (800b7a0 <Ea_Write+0x34>)
 800b794:	f7fa fe04 	bl	80063a0 <HAL_I2C_Mem_Write_DMA>
	}
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20000314 	.word	0x20000314

0800b7a4 <NvM_Init>:
/**
  * @brief	NvM module initialization function
  * @return	None
  */
void NvM_Init(void)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
	g_NvM_State_e = NVM_STATE_INIT;
 800b7a8:	4b04      	ldr	r3, [pc, #16]	; (800b7bc <NvM_Init+0x18>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	701a      	strb	r2, [r3, #0]
	/* Set initialization flag to done */
	g_NvM_InitDone_b = TRUE;
 800b7ae:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <NvM_Init+0x1c>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	701a      	strb	r2, [r3, #0]
}
 800b7b4:	bf00      	nop
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bc80      	pop	{r7}
 800b7ba:	4770      	bx	lr
 800b7bc:	200001ea 	.word	0x200001ea
 800b7c0:	200001e9 	.word	0x200001e9

0800b7c4 <NvM_MainFunction>:
/**
  * @brief	NvM module main function (runs in task)
  * @return	None
  */
void NvM_MainFunction(void)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_NvM_InitDone_b)
 800b7c8:	4b0e      	ldr	r3, [pc, #56]	; (800b804 <NvM_MainFunction+0x40>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d015      	beq.n	800b7fc <NvM_MainFunction+0x38>
	{
		switch(g_NvM_State_e)
 800b7d0:	4b0d      	ldr	r3, [pc, #52]	; (800b808 <NvM_MainFunction+0x44>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	dc0e      	bgt.n	800b7f6 <NvM_MainFunction+0x32>
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	da08      	bge.n	800b7ee <NvM_MainFunction+0x2a>
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <NvM_MainFunction+0x22>
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d00a      	beq.n	800b7fa <NvM_MainFunction+0x36>
			case NVM_STATE_SHUTDOWN:
			case NVM_STATE_ERROR:
			default:
			{

			}break;
 800b7e4:	e007      	b.n	800b7f6 <NvM_MainFunction+0x32>
				g_NvM_State_e = NVM_STATE_READALL;
 800b7e6:	4b08      	ldr	r3, [pc, #32]	; (800b808 <NvM_MainFunction+0x44>)
 800b7e8:	2204      	movs	r2, #4
 800b7ea:	701a      	strb	r2, [r3, #0]
			}break;
 800b7ec:	e006      	b.n	800b7fc <NvM_MainFunction+0x38>
				g_NvM_State_e = NVM_STATE_READY;
 800b7ee:	4b06      	ldr	r3, [pc, #24]	; (800b808 <NvM_MainFunction+0x44>)
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
			}break;
 800b7f4:	e002      	b.n	800b7fc <NvM_MainFunction+0x38>
			}break;
 800b7f6:	bf00      	nop
 800b7f8:	e000      	b.n	800b7fc <NvM_MainFunction+0x38>
			}break;
 800b7fa:	bf00      	nop
		}
	}
}
 800b7fc:	bf00      	nop
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr
 800b804:	200001e9 	.word	0x200001e9
 800b808:	200001ea 	.word	0x200001ea

0800b80c <NvM_WriteBlock>:
  * @param	BlockId		ID of the block to be written
  * @param  NvM_SrcPtr	Pointer to the data to be written
  * @return	None
  */
void NvM_WriteBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	6039      	str	r1, [r7, #0]
 800b816:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block write function */
	Ea_Write(BlockId, NvM_SrcPtr);
 800b818:	88fb      	ldrh	r3, [r7, #6]
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7ff ffa5 	bl	800b76c <Ea_Write>
}
 800b822:	bf00      	nop
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <NvM_ReadBlock>:
  * @param	BlockId		ID of the block to be read
  * @param  NvM_SrcPtr	Pointer to the data to be read
  * @return	None
  */
void NvM_ReadBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	4603      	mov	r3, r0
 800b832:	6039      	str	r1, [r7, #0]
 800b834:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block read function */
	Ea_Read(BlockId, NvM_SrcPtr);
 800b836:	88fb      	ldrh	r3, [r7, #6]
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff ff7a 	bl	800b734 <Ea_Read>
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 800b84c:	f000 f8ba 	bl	800b9c4 <SystemClock_Config>
	MX_DMA_Init();
 800b850:	f000 f91e 	bl	800ba90 <MX_DMA_Init>
	MX_GPIO_Init();
 800b854:	f000 fb1e 	bl	800be94 <MX_GPIO_Init>
	MX_ADC1_Init();
 800b858:	f000 f95c 	bl	800bb14 <MX_ADC1_Init>
	MX_ADC2_Init();
 800b85c:	f000 f9ca 	bl	800bbf4 <MX_ADC2_Init>
	MX_I2C1_Init();
 800b860:	f000 fa3a 	bl	800bcd8 <MX_I2C1_Init>
	MX_SPI3_Init();
 800b864:	f000 fa78 	bl	800bd58 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 800b868:	f000 fab4 	bl	800bdd4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b86c:	f000 fae2 	bl	800be34 <MX_USART2_UART_Init>
	Gpt_Init();
 800b870:	f7f8 fed0 	bl	8004614 <Gpt_Init>

	/* Init Cdd drivers */
	Cdd_Servo_Driver_Init();
 800b874:	f7f6 fe0e 	bl	8002494 <Cdd_Servo_Driver_Init>
	Cdd_Ultrasonic_Driver_Init();
 800b878:	f7f7 f948 	bl	8002b0c <Cdd_Ultrasonic_Driver_Init>
	Cdd_DCMotor_Driver_Init();
 800b87c:	f7f6 fae7 	bl	8001e4e <Cdd_DCMotor_Driver_Init>
	/* Init system services */
	Tm_Init();
 800b880:	f000 fe10 	bl	800c4a4 <Tm_Init>

}
 800b884:	bf00      	nop
 800b886:	bd80      	pop	{r7, pc}

0800b888 <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc1_val, adc1_len);
 800b88c:	4b07      	ldr	r3, [pc, #28]	; (800b8ac <BswM_MainFunction+0x24>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	461a      	mov	r2, r3
 800b892:	4907      	ldr	r1, [pc, #28]	; (800b8b0 <BswM_MainFunction+0x28>)
 800b894:	4807      	ldr	r0, [pc, #28]	; (800b8b4 <BswM_MainFunction+0x2c>)
 800b896:	f7f7 fc95 	bl	80031c4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32 *)adc2_val, adc2_len);
 800b89a:	4b07      	ldr	r3, [pc, #28]	; (800b8b8 <BswM_MainFunction+0x30>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	4906      	ldr	r1, [pc, #24]	; (800b8bc <BswM_MainFunction+0x34>)
 800b8a2:	4807      	ldr	r0, [pc, #28]	; (800b8c0 <BswM_MainFunction+0x38>)
 800b8a4:	f7f7 fc8e 	bl	80031c4 <HAL_ADC_Start_DMA>

}
 800b8a8:	bf00      	nop
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	2000000c 	.word	0x2000000c
 800b8b0:	200005ac 	.word	0x200005ac
 800b8b4:	200001ec 	.word	0x200001ec
 800b8b8:	20000010 	.word	0x20000010
 800b8bc:	200005b0 	.word	0x200005b0
 800b8c0:	20000280 	.word	0x20000280

0800b8c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	if(hadc == &hadc1)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	; (800b948 <HAL_ADC_ConvCpltCallback+0x84>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d118      	bne.n	800b906 <HAL_ADC_ConvCpltCallback+0x42>
	{
		ADC_AN0_Voltage = (uint16)((adc1_val[0]*3300u)/4095u);
 800b8d4:	4b1d      	ldr	r3, [pc, #116]	; (800b94c <HAL_ADC_ConvCpltCallback+0x88>)
 800b8d6:	881b      	ldrh	r3, [r3, #0]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b8e0:	fb03 f202 	mul.w	r2, r3, r2
 800b8e4:	4b1a      	ldr	r3, [pc, #104]	; (800b950 <HAL_ADC_ConvCpltCallback+0x8c>)
 800b8e6:	fba3 1302 	umull	r1, r3, r3, r2
 800b8ea:	1ad2      	subs	r2, r2, r3
 800b8ec:	0852      	lsrs	r2, r2, #1
 800b8ee:	4413      	add	r3, r2
 800b8f0:	0adb      	lsrs	r3, r3, #11
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	4b17      	ldr	r3, [pc, #92]	; (800b954 <HAL_ADC_ConvCpltCallback+0x90>)
 800b8f6:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 800b8f8:	4b16      	ldr	r3, [pc, #88]	; (800b954 <HAL_ADC_ConvCpltCallback+0x90>)
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 ffb2 	bl	800c868 <Rte_Write_AN0_Voltage_u16>
	}
	else
	{

	}
}
 800b904:	e01b      	b.n	800b93e <HAL_ADC_ConvCpltCallback+0x7a>
	else if(hadc == &hadc2)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a13      	ldr	r2, [pc, #76]	; (800b958 <HAL_ADC_ConvCpltCallback+0x94>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d117      	bne.n	800b93e <HAL_ADC_ConvCpltCallback+0x7a>
		ADC_AN2_Voltage = (uint16)((adc2_val[0]*3300u)/4095u);
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <HAL_ADC_ConvCpltCallback+0x98>)
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	b29b      	uxth	r3, r3
 800b914:	461a      	mov	r2, r3
 800b916:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b91a:	fb03 f202 	mul.w	r2, r3, r2
 800b91e:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <HAL_ADC_ConvCpltCallback+0x8c>)
 800b920:	fba3 1302 	umull	r1, r3, r3, r2
 800b924:	1ad2      	subs	r2, r2, r3
 800b926:	0852      	lsrs	r2, r2, #1
 800b928:	4413      	add	r3, r2
 800b92a:	0adb      	lsrs	r3, r3, #11
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <HAL_ADC_ConvCpltCallback+0x9c>)
 800b930:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN2_Voltage_u16(ADC_AN2_Voltage);
 800b932:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <HAL_ADC_ConvCpltCallback+0x9c>)
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	b29b      	uxth	r3, r3
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 ffb9 	bl	800c8b0 <Rte_Write_AN2_Voltage_u16>
}
 800b93e:	bf00      	nop
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	200001ec 	.word	0x200001ec
 800b94c:	200005ac 	.word	0x200005ac
 800b950:	00100101 	.word	0x00100101
 800b954:	200005ae 	.word	0x200005ae
 800b958:	20000280 	.word	0x20000280
 800b95c:	200005b0 	.word	0x200005b0
 800b960:	200005b2 	.word	0x200005b2

0800b964 <HAL_I2C_MemTxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	I2cTxCnt++;
 800b96c:	4b04      	ldr	r3, [pc, #16]	; (800b980 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	3301      	adds	r3, #1
 800b972:	4a03      	ldr	r2, [pc, #12]	; (800b980 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800b974:	6013      	str	r3, [r2, #0]
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bc80      	pop	{r7}
 800b97e:	4770      	bx	lr
 800b980:	200005b8 	.word	0x200005b8

0800b984 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	I2cRxCnt++;
 800b98c:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3301      	adds	r3, #1
 800b992:	4a03      	ldr	r2, [pc, #12]	; (800b9a0 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800b994:	6013      	str	r3, [r2, #0]
}
 800b996:	bf00      	nop
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bc80      	pop	{r7}
 800b99e:	4770      	bx	lr
 800b9a0:	200005b4 	.word	0x200005b4

0800b9a4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7fa ff42 	bl	8006836 <HAL_I2C_GetError>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b04      	cmp	r3, #4
 800b9b6:	d001      	beq.n	800b9bc <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 800b9b8:	f000 fb04 	bl	800bfc4 <Error_Handler>
  }
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b0a6      	sub	sp, #152	; 0x98
 800b9c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b9ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b9ce:	2228      	movs	r2, #40	; 0x28
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f001 f872 	bl	800cabc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b9d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b9dc:	2200      	movs	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	605a      	str	r2, [r3, #4]
 800b9e2:	609a      	str	r2, [r3, #8]
 800b9e4:	60da      	str	r2, [r3, #12]
 800b9e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b9e8:	1d3b      	adds	r3, r7, #4
 800b9ea:	2258      	movs	r2, #88	; 0x58
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f001 f864 	bl	800cabc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b9fc:	2310      	movs	r3, #16
 800b9fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ba02:	2302      	movs	r3, #2
 800ba04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ba08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800ba10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800ba14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ba1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fc fedc 	bl	80087e0 <HAL_RCC_OscConfig>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800ba2e:	f000 fac9 	bl	800bfc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ba32:	230f      	movs	r3, #15
 800ba34:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ba36:	2302      	movs	r3, #2
 800ba38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ba3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ba44:	2300      	movs	r3, #0
 800ba46:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ba48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ba4c:	2102      	movs	r1, #2
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fd ff1a 	bl	8009888 <HAL_RCC_ClockConfig>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800ba5a:	f000 fab3 	bl	800bfc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800ba5e:	23a3      	movs	r3, #163	; 0xa3
 800ba60:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ba66:	2300      	movs	r3, #0
 800ba68:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800ba6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800ba70:	2310      	movs	r3, #16
 800ba72:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba74:	1d3b      	adds	r3, r7, #4
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe f93a 	bl	8009cf0 <HAL_RCCEx_PeriphCLKConfig>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ba82:	f000 fa9f 	bl	800bfc4 <Error_Handler>
  }
}
 800ba86:	bf00      	nop
 800ba88:	3798      	adds	r7, #152	; 0x98
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800ba96:	4b1e      	ldr	r3, [pc, #120]	; (800bb10 <MX_DMA_Init+0x80>)
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	4a1d      	ldr	r2, [pc, #116]	; (800bb10 <MX_DMA_Init+0x80>)
 800ba9c:	f043 0301 	orr.w	r3, r3, #1
 800baa0:	6153      	str	r3, [r2, #20]
 800baa2:	4b1b      	ldr	r3, [pc, #108]	; (800bb10 <MX_DMA_Init+0x80>)
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	607b      	str	r3, [r7, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800baae:	4b18      	ldr	r3, [pc, #96]	; (800bb10 <MX_DMA_Init+0x80>)
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	4a17      	ldr	r2, [pc, #92]	; (800bb10 <MX_DMA_Init+0x80>)
 800bab4:	f043 0302 	orr.w	r3, r3, #2
 800bab8:	6153      	str	r3, [r2, #20]
 800baba:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <MX_DMA_Init+0x80>)
 800babc:	695b      	ldr	r3, [r3, #20]
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	603b      	str	r3, [r7, #0]
 800bac4:	683b      	ldr	r3, [r7, #0]
	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800bac6:	2200      	movs	r2, #0
 800bac8:	2100      	movs	r1, #0
 800baca:	200b      	movs	r0, #11
 800bacc:	f7fc fb2f 	bl	800812e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800bad0:	200b      	movs	r0, #11
 800bad2:	f7fc fb48 	bl	8008166 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800bad6:	2200      	movs	r2, #0
 800bad8:	2100      	movs	r1, #0
 800bada:	2010      	movs	r0, #16
 800badc:	f7fc fb27 	bl	800812e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800bae0:	2010      	movs	r0, #16
 800bae2:	f7fc fb40 	bl	8008166 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800bae6:	2200      	movs	r2, #0
 800bae8:	2100      	movs	r1, #0
 800baea:	2011      	movs	r0, #17
 800baec:	f7fc fb1f 	bl	800812e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800baf0:	2011      	movs	r0, #17
 800baf2:	f7fc fb38 	bl	8008166 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800baf6:	2200      	movs	r2, #0
 800baf8:	2100      	movs	r1, #0
 800bafa:	2038      	movs	r0, #56	; 0x38
 800bafc:	f7fc fb17 	bl	800812e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800bb00:	2038      	movs	r0, #56	; 0x38
 800bb02:	f7fc fb30 	bl	8008166 <HAL_NVIC_EnableIRQ>
}
 800bb06:	bf00      	nop
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	40021000 	.word	0x40021000

0800bb14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08a      	sub	sp, #40	; 0x28
 800bb18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800bb1a:	f107 031c 	add.w	r3, r7, #28
 800bb1e:	2200      	movs	r2, #0
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	605a      	str	r2, [r3, #4]
 800bb24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800bb26:	1d3b      	adds	r3, r7, #4
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	605a      	str	r2, [r3, #4]
 800bb2e:	609a      	str	r2, [r3, #8]
 800bb30:	60da      	str	r2, [r3, #12]
 800bb32:	611a      	str	r2, [r3, #16]
 800bb34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800bb36:	4b2e      	ldr	r3, [pc, #184]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bb3e:	4b2c      	ldr	r3, [pc, #176]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800bb46:	4b2a      	ldr	r3, [pc, #168]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bb4c:	4b28      	ldr	r3, [pc, #160]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800bb52:	4b27      	ldr	r3, [pc, #156]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bb58:	4b25      	ldr	r3, [pc, #148]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bb60:	4b23      	ldr	r3, [pc, #140]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bb66:	4b22      	ldr	r3, [pc, #136]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bb6c:	4b20      	ldr	r3, [pc, #128]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800bb72:	4b1f      	ldr	r3, [pc, #124]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800bb78:	4b1d      	ldr	r3, [pc, #116]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bb80:	4b1b      	ldr	r3, [pc, #108]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb82:	2204      	movs	r2, #4
 800bb84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800bb86:	4b1a      	ldr	r3, [pc, #104]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bb8c:	4b18      	ldr	r3, [pc, #96]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bb92:	4817      	ldr	r0, [pc, #92]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bb94:	f7f7 f91c 	bl	8002dd0 <HAL_ADC_Init>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800bb9e:	f000 fa11 	bl	800bfc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800bba2:	2300      	movs	r3, #0
 800bba4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800bba6:	f107 031c 	add.w	r3, r7, #28
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4810      	ldr	r0, [pc, #64]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bbae:	f7f7 ff0f 	bl	80039d0 <HAL_ADCEx_MultiModeConfigChannel>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800bbb8:	f000 fa04 	bl	800bfc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bbd4:	1d3b      	adds	r3, r7, #4
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	4805      	ldr	r0, [pc, #20]	; (800bbf0 <MX_ADC1_Init+0xdc>)
 800bbda:	f7f7 fc0f 	bl	80033fc <HAL_ADC_ConfigChannel>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800bbe4:	f000 f9ee 	bl	800bfc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800bbe8:	bf00      	nop
 800bbea:	3728      	adds	r7, #40	; 0x28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	200001ec 	.word	0x200001ec

0800bbf4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	; 0x28
 800bbf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800bbfa:	f107 031c 	add.w	r3, r7, #28
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	605a      	str	r2, [r3, #4]
 800bc04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800bc06:	1d3b      	adds	r3, r7, #4
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	605a      	str	r2, [r3, #4]
 800bc0e:	609a      	str	r2, [r3, #8]
 800bc10:	60da      	str	r2, [r3, #12]
 800bc12:	611a      	str	r2, [r3, #16]
 800bc14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800bc16:	4b2e      	ldr	r3, [pc, #184]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc18:	4a2e      	ldr	r2, [pc, #184]	; (800bcd4 <MX_ADC2_Init+0xe0>)
 800bc1a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800bc1c:	4b2c      	ldr	r3, [pc, #176]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc22:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800bc24:	4b2a      	ldr	r3, [pc, #168]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bc2a:	4b29      	ldr	r3, [pc, #164]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800bc30:	4b27      	ldr	r3, [pc, #156]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800bc36:	4b26      	ldr	r3, [pc, #152]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bc3e:	4b24      	ldr	r3, [pc, #144]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bc44:	4b22      	ldr	r3, [pc, #136]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc46:	2201      	movs	r2, #1
 800bc48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bc4a:	4b21      	ldr	r3, [pc, #132]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800bc50:	4b1f      	ldr	r3, [pc, #124]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800bc56:	4b1e      	ldr	r3, [pc, #120]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bc5e:	4b1c      	ldr	r3, [pc, #112]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc60:	2204      	movs	r2, #4
 800bc62:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800bc64:	4b1a      	ldr	r3, [pc, #104]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bc6a:	4b19      	ldr	r3, [pc, #100]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800bc70:	4817      	ldr	r0, [pc, #92]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc72:	f7f7 f8ad 	bl	8002dd0 <HAL_ADC_Init>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 800bc7c:	f000 f9a2 	bl	800bfc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800bc80:	2300      	movs	r3, #0
 800bc82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc2, &multimode) != HAL_OK)
 800bc84:	f107 031c 	add.w	r3, r7, #28
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4811      	ldr	r0, [pc, #68]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bc8c:	f7f7 fea0 	bl	80039d0 <HAL_ADCEx_MultiModeConfigChannel>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800bc96:	f000 f995 	bl	800bfc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bca2:	2300      	movs	r3, #0
 800bca4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bcb2:	1d3b      	adds	r3, r7, #4
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4806      	ldr	r0, [pc, #24]	; (800bcd0 <MX_ADC2_Init+0xdc>)
 800bcb8:	f7f7 fba0 	bl	80033fc <HAL_ADC_ConfigChannel>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800bcc2:	f000 f97f 	bl	800bfc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800bcc6:	bf00      	nop
 800bcc8:	3728      	adds	r7, #40	; 0x28
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000280 	.word	0x20000280
 800bcd4:	50000100 	.word	0x50000100

0800bcd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 800bcdc:	4b1b      	ldr	r3, [pc, #108]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bcde:	4a1c      	ldr	r2, [pc, #112]	; (800bd50 <MX_I2C1_Init+0x78>)
 800bce0:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00702681;
 800bce2:	4b1a      	ldr	r3, [pc, #104]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bce4:	4a1b      	ldr	r2, [pc, #108]	; (800bd54 <MX_I2C1_Init+0x7c>)
 800bce6:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 800bce8:	4b18      	ldr	r3, [pc, #96]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bcee:	4b17      	ldr	r3, [pc, #92]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bcf4:	4b15      	ldr	r3, [pc, #84]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800bcfa:	4b14      	ldr	r3, [pc, #80]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bd00:	4b12      	ldr	r3, [pc, #72]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bd06:	4b11      	ldr	r3, [pc, #68]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bd0c:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bd12:	480e      	ldr	r0, [pc, #56]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bd14:	f7fa fa78 	bl	8006208 <HAL_I2C_Init>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <MX_I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800bd1e:	f000 f951 	bl	800bfc4 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bd22:	2100      	movs	r1, #0
 800bd24:	4809      	ldr	r0, [pc, #36]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bd26:	f7fc f80a 	bl	8007d3e <HAL_I2CEx_ConfigAnalogFilter>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <MX_I2C1_Init+0x5c>
	  {
	    Error_Handler();
 800bd30:	f000 f948 	bl	800bfc4 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bd34:	2100      	movs	r1, #0
 800bd36:	4805      	ldr	r0, [pc, #20]	; (800bd4c <MX_I2C1_Init+0x74>)
 800bd38:	f7fc f84b 	bl	8007dd2 <HAL_I2CEx_ConfigDigitalFilter>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <MX_I2C1_Init+0x6e>
	  {
	    Error_Handler();
 800bd42:	f000 f93f 	bl	800bfc4 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 800bd46:	bf00      	nop
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000314 	.word	0x20000314
 800bd50:	40005400 	.word	0x40005400
 800bd54:	00702681 	.word	0x00702681

0800bd58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800bd5c:	4b1b      	ldr	r3, [pc, #108]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd5e:	4a1c      	ldr	r2, [pc, #112]	; (800bdd0 <MX_SPI3_Init+0x78>)
 800bd60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800bd62:	4b1a      	ldr	r3, [pc, #104]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd64:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bd68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800bd6a:	4b18      	ldr	r3, [pc, #96]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800bd70:	4b16      	ldr	r3, [pc, #88]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd72:	f44f 7240 	mov.w	r2, #768	; 0x300
 800bd76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd78:	4b14      	ldr	r3, [pc, #80]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800bd84:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bd8c:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bd92:	4b0e      	ldr	r3, [pc, #56]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800bd98:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800bda4:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bda6:	2207      	movs	r2, #7
 800bda8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bdaa:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800bdb0:	4b06      	ldr	r3, [pc, #24]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bdb2:	2208      	movs	r2, #8
 800bdb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800bdb6:	4805      	ldr	r0, [pc, #20]	; (800bdcc <MX_SPI3_Init+0x74>)
 800bdb8:	f7fe fa6c 	bl	800a294 <HAL_SPI_Init>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800bdc2:	f000 f8ff 	bl	800bfc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800bdc6:	bf00      	nop
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	20000418 	.word	0x20000418
 800bdd0:	40003c00 	.word	0x40003c00

0800bdd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800bdd8:	4b14      	ldr	r3, [pc, #80]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800bdda:	4a15      	ldr	r2, [pc, #84]	; (800be30 <MX_USART1_UART_Init+0x5c>)
 800bddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800bdde:	4b13      	ldr	r3, [pc, #76]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800bde0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800bde4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bde6:	4b11      	ldr	r3, [pc, #68]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bdec:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bdf2:	4b0e      	ldr	r3, [pc, #56]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bdf8:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800bdfa:	220c      	movs	r2, #12
 800bdfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bdfe:	4b0b      	ldr	r3, [pc, #44]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800be00:	2200      	movs	r2, #0
 800be02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800be04:	4b09      	ldr	r3, [pc, #36]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800be06:	2200      	movs	r2, #0
 800be08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be0a:	4b08      	ldr	r3, [pc, #32]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800be10:	4b06      	ldr	r3, [pc, #24]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800be12:	2200      	movs	r2, #0
 800be14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800be16:	4805      	ldr	r0, [pc, #20]	; (800be2c <MX_USART1_UART_Init+0x58>)
 800be18:	f7fe fc72 	bl	800a700 <HAL_UART_Init>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800be22:	f000 f8cf 	bl	800bfc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800be26:	bf00      	nop
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	200004a4 	.word	0x200004a4
 800be30:	40013800 	.word	0x40013800

0800be34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800be38:	4b14      	ldr	r3, [pc, #80]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be3a:	4a15      	ldr	r2, [pc, #84]	; (800be90 <MX_USART2_UART_Init+0x5c>)
 800be3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800be3e:	4b13      	ldr	r3, [pc, #76]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800be44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800be46:	4b11      	ldr	r3, [pc, #68]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be48:	2200      	movs	r2, #0
 800be4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800be4c:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be4e:	2200      	movs	r2, #0
 800be50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800be52:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be54:	2200      	movs	r2, #0
 800be56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800be58:	4b0c      	ldr	r3, [pc, #48]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be5a:	220c      	movs	r2, #12
 800be5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be5e:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be60:	2200      	movs	r2, #0
 800be62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800be64:	4b09      	ldr	r3, [pc, #36]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be66:	2200      	movs	r2, #0
 800be68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be6a:	4b08      	ldr	r3, [pc, #32]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800be70:	4b06      	ldr	r3, [pc, #24]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be72:	2200      	movs	r2, #0
 800be74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800be76:	4805      	ldr	r0, [pc, #20]	; (800be8c <MX_USART2_UART_Init+0x58>)
 800be78:	f7fe fc42 	bl	800a700 <HAL_UART_Init>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800be82:	f000 f89f 	bl	800bfc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800be86:	bf00      	nop
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20000528 	.word	0x20000528
 800be90:	40004400 	.word	0x40004400

0800be94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be9a:	f107 030c 	add.w	r3, r7, #12
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	605a      	str	r2, [r3, #4]
 800bea4:	609a      	str	r2, [r3, #8]
 800bea6:	60da      	str	r2, [r3, #12]
 800bea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800beaa:	4b43      	ldr	r3, [pc, #268]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	4a42      	ldr	r2, [pc, #264]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800beb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800beb4:	6153      	str	r3, [r2, #20]
 800beb6:	4b40      	ldr	r3, [pc, #256]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bebe:	60bb      	str	r3, [r7, #8]
 800bec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bec2:	4b3d      	ldr	r3, [pc, #244]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	4a3c      	ldr	r2, [pc, #240]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800bec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800becc:	6153      	str	r3, [r2, #20]
 800bece:	4b3a      	ldr	r3, [pc, #232]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800beda:	4b37      	ldr	r3, [pc, #220]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	4a36      	ldr	r2, [pc, #216]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800bee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bee4:	6153      	str	r3, [r2, #20]
 800bee6:	4b34      	ldr	r3, [pc, #208]	; (800bfb8 <MX_GPIO_Init+0x124>)
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800bef2:	2200      	movs	r2, #0
 800bef4:	2120      	movs	r1, #32
 800bef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800befa:	f7f8 f92a 	bl	8004152 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800befe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bf04:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800bf08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800bf0e:	f107 030c 	add.w	r3, r7, #12
 800bf12:	4619      	mov	r1, r3
 800bf14:	4829      	ldr	r0, [pc, #164]	; (800bfbc <MX_GPIO_Init+0x128>)
 800bf16:	f7f7 ff7b 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800bf1a:	2340      	movs	r3, #64	; 0x40
 800bf1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf26:	f107 030c 	add.w	r3, r7, #12
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	4823      	ldr	r0, [pc, #140]	; (800bfbc <MX_GPIO_Init+0x128>)
 800bf2e:	f7f7 ff6f 	bl	8003e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800bf32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800bf36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf40:	2300      	movs	r3, #0
 800bf42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf44:	f107 030c 	add.w	r3, r7, #12
 800bf48:	4619      	mov	r1, r3
 800bf4a:	481d      	ldr	r0, [pc, #116]	; (800bfc0 <MX_GPIO_Init+0x12c>)
 800bf4c:	f7f7 ff60 	bl	8003e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3| GPIO_PIN_4;
 800bf50:	2318      	movs	r3, #24
 800bf52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf54:	2300      	movs	r3, #0
 800bf56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf5c:	f107 030c 	add.w	r3, r7, #12
 800bf60:	4619      	mov	r1, r3
 800bf62:	4817      	ldr	r0, [pc, #92]	; (800bfc0 <MX_GPIO_Init+0x12c>)
 800bf64:	f7f7 ff54 	bl	8003e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7| GPIO_PIN_9;
 800bf68:	f44f 7320 	mov.w	r3, #640	; 0x280
 800bf6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf76:	f107 030c 	add.w	r3, r7, #12
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	480f      	ldr	r0, [pc, #60]	; (800bfbc <MX_GPIO_Init+0x128>)
 800bf7e:	f7f7 ff47 	bl	8003e10 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin =  GPIO_PIN_2|GPIO_PIN_3;
 800bf82:	230c      	movs	r3, #12
 800bf84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf86:	2301      	movs	r3, #1
 800bf88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf92:	f107 030c 	add.w	r3, r7, #12
 800bf96:	4619      	mov	r1, r3
 800bf98:	4808      	ldr	r0, [pc, #32]	; (800bfbc <MX_GPIO_Init+0x128>)
 800bf9a:	f7f7 ff39 	bl	8003e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	2028      	movs	r0, #40	; 0x28
 800bfa4:	f7fc f8c3 	bl	800812e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800bfa8:	2028      	movs	r0, #40	; 0x28
 800bfaa:	f7fc f8dc 	bl	8008166 <HAL_NVIC_EnableIRQ>

}
 800bfae:	bf00      	nop
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	40021000 	.word	0x40021000
 800bfbc:	48000800 	.word	0x48000800
 800bfc0:	48000400 	.word	0x48000400

0800bfc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800bfc8:	b672      	cpsid	i
}
 800bfca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800bfcc:	e7fe      	b.n	800bfcc <Error_Handler+0x8>

0800bfce <EcuM_StartUp_One>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_One()
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 800bfd2:	f7fb ff6d 	bl	8007eb0 <HAL_Init>
	BswM_Init();
 800bfd6:	f7ff fc37 	bl	800b848 <BswM_Init>
}
 800bfda:	bf00      	nop
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <EcuM_StartUp_Two>:

void EcuM_StartUp_Two()
{
 800bfde:	b480      	push	{r7}
 800bfe0:	af00      	add	r7, sp, #0

}
 800bfe2:	bf00      	nop
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bc80      	pop	{r7}
 800bfe8:	4770      	bx	lr

0800bfea <EcuM_Init>:

int EcuM_Init(void)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	af00      	add	r7, sp, #0
	EcuM_StartUp_One();
 800bfee:	f7ff ffee 	bl	800bfce <EcuM_StartUp_One>
	/* Start Scheduler */
	Os_Start();
 800bff2:	f000 f803 	bl	800bffc <Os_Start>

	return 0;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <Os_Start>:

#include "Os.h"
#include "Os_scheduler.h"

void Os_Start()
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
	Os_Scheduler_Init();
 800c000:	f000 f8ba 	bl	800c178 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 800c004:	f000 f930 	bl	800c268 <Os_Scheduler_Start>

	while(1)
 800c008:	e7fe      	b.n	800c008 <Os_Start+0xc>
	...

0800c00c <SysTick_Handler>:
/**
  * @brief  SysTick IRQ Handler
  * @return None
  */
void SysTick_Handler(void)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
	/* Increment general counter */
	HAL_IncTick();
 800c010:	f7fb ff9a 	bl	8007f48 <HAL_IncTick>
	/* Reset counters if base counter reached maximum value */
	if(g_Os_BaseTimerISR_count_u32 == OS_BASETIMER_COUNT_MAX)
 800c014:	4b40      	ldr	r3, [pc, #256]	; (800c118 <SysTick_Handler+0x10c>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f242 720f 	movw	r2, #9999	; 0x270f
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d112      	bne.n	800c046 <SysTick_Handler+0x3a>
	{
		g_Os_BaseTimerISR_count_u32 = 0u;
 800c020:	4b3d      	ldr	r3, [pc, #244]	; (800c118 <SysTick_Handler+0x10c>)
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
		g_Os_5msTimerISR_count_u32 = 0u;
 800c026:	4b3d      	ldr	r3, [pc, #244]	; (800c11c <SysTick_Handler+0x110>)
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
		g_Os_10msTimerISR_count_u32 = 0u;
 800c02c:	4b3c      	ldr	r3, [pc, #240]	; (800c120 <SysTick_Handler+0x114>)
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]
		g_Os_50msTimerISR_count_u32 = 0u;
 800c032:	4b3c      	ldr	r3, [pc, #240]	; (800c124 <SysTick_Handler+0x118>)
 800c034:	2200      	movs	r2, #0
 800c036:	601a      	str	r2, [r3, #0]
		g_Os_100msTimerISR_count_u32 = 0u;
 800c038:	4b3b      	ldr	r3, [pc, #236]	; (800c128 <SysTick_Handler+0x11c>)
 800c03a:	2200      	movs	r2, #0
 800c03c:	601a      	str	r2, [r3, #0]
		g_Os_500msTimerISR_count_u32 = 0u;
 800c03e:	4b3b      	ldr	r3, [pc, #236]	; (800c12c <SysTick_Handler+0x120>)
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e004      	b.n	800c050 <SysTick_Handler+0x44>
	}
	else
	{
		/* Increment base counter */
		g_Os_BaseTimerISR_count_u32++;
 800c046:	4b34      	ldr	r3, [pc, #208]	; (800c118 <SysTick_Handler+0x10c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3301      	adds	r3, #1
 800c04c:	4a32      	ldr	r2, [pc, #200]	; (800c118 <SysTick_Handler+0x10c>)
 800c04e:	6013      	str	r3, [r2, #0]
	}

	/* Check for 5ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 5) == 0u)
 800c050:	4b31      	ldr	r3, [pc, #196]	; (800c118 <SysTick_Handler+0x10c>)
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	4b36      	ldr	r3, [pc, #216]	; (800c130 <SysTick_Handler+0x124>)
 800c056:	fba3 2301 	umull	r2, r3, r3, r1
 800c05a:	089a      	lsrs	r2, r3, #2
 800c05c:	4613      	mov	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	1aca      	subs	r2, r1, r3
 800c064:	2a00      	cmp	r2, #0
 800c066:	d104      	bne.n	800c072 <SysTick_Handler+0x66>
	{
		/* Increment 5ms counter */
		g_Os_5msTimerISR_count_u32++;
 800c068:	4b2c      	ldr	r3, [pc, #176]	; (800c11c <SysTick_Handler+0x110>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3301      	adds	r3, #1
 800c06e:	4a2b      	ldr	r2, [pc, #172]	; (800c11c <SysTick_Handler+0x110>)
 800c070:	6013      	str	r3, [r2, #0]
	}

	/* Check for 10ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 10) == 0u)
 800c072:	4b29      	ldr	r3, [pc, #164]	; (800c118 <SysTick_Handler+0x10c>)
 800c074:	6819      	ldr	r1, [r3, #0]
 800c076:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <SysTick_Handler+0x124>)
 800c078:	fba3 2301 	umull	r2, r3, r3, r1
 800c07c:	08da      	lsrs	r2, r3, #3
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	1aca      	subs	r2, r1, r3
 800c088:	2a00      	cmp	r2, #0
 800c08a:	d104      	bne.n	800c096 <SysTick_Handler+0x8a>
	{
		/* Increment 10ms counter */
		g_Os_10msTimerISR_count_u32++;
 800c08c:	4b24      	ldr	r3, [pc, #144]	; (800c120 <SysTick_Handler+0x114>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3301      	adds	r3, #1
 800c092:	4a23      	ldr	r2, [pc, #140]	; (800c120 <SysTick_Handler+0x114>)
 800c094:	6013      	str	r3, [r2, #0]
	}

	/* Check for 50ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 50) == 0u)
 800c096:	4b20      	ldr	r3, [pc, #128]	; (800c118 <SysTick_Handler+0x10c>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	4b26      	ldr	r3, [pc, #152]	; (800c134 <SysTick_Handler+0x128>)
 800c09c:	fba3 1302 	umull	r1, r3, r3, r2
 800c0a0:	091b      	lsrs	r3, r3, #4
 800c0a2:	2132      	movs	r1, #50	; 0x32
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d104      	bne.n	800c0b8 <SysTick_Handler+0xac>
	{
		/* Increment 50ms counter */
		g_Os_50msTimerISR_count_u32++;
 800c0ae:	4b1d      	ldr	r3, [pc, #116]	; (800c124 <SysTick_Handler+0x118>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	4a1b      	ldr	r2, [pc, #108]	; (800c124 <SysTick_Handler+0x118>)
 800c0b6:	6013      	str	r3, [r2, #0]
	}

	/* Check for 100ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 100) == 0u)
 800c0b8:	4b17      	ldr	r3, [pc, #92]	; (800c118 <SysTick_Handler+0x10c>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	4b1d      	ldr	r3, [pc, #116]	; (800c134 <SysTick_Handler+0x128>)
 800c0be:	fba3 1302 	umull	r1, r3, r3, r2
 800c0c2:	095b      	lsrs	r3, r3, #5
 800c0c4:	2164      	movs	r1, #100	; 0x64
 800c0c6:	fb01 f303 	mul.w	r3, r1, r3
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d104      	bne.n	800c0da <SysTick_Handler+0xce>
	{
		/* Increment 100ms counter */
		g_Os_100msTimerISR_count_u32++;
 800c0d0:	4b15      	ldr	r3, [pc, #84]	; (800c128 <SysTick_Handler+0x11c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	4a14      	ldr	r2, [pc, #80]	; (800c128 <SysTick_Handler+0x11c>)
 800c0d8:	6013      	str	r3, [r2, #0]
	}

	/* Check for 500ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 500) == 0u)
 800c0da:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <SysTick_Handler+0x10c>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	4b16      	ldr	r3, [pc, #88]	; (800c138 <SysTick_Handler+0x12c>)
 800c0e0:	fba3 1302 	umull	r1, r3, r3, r2
 800c0e4:	095b      	lsrs	r3, r3, #5
 800c0e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c0ea:	fb01 f303 	mul.w	r3, r1, r3
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d104      	bne.n	800c0fe <SysTick_Handler+0xf2>
	{
		/* Increment 500ms counter */
		g_Os_500msTimerISR_count_u32++;
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <SysTick_Handler+0x120>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	4a0c      	ldr	r2, [pc, #48]	; (800c12c <SysTick_Handler+0x120>)
 800c0fc:	6013      	str	r3, [r2, #0]
	}

	/* Call PendSV_Handler for context switch */
	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c0fe:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <SysTick_Handler+0x130>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b03      	cmp	r3, #3
 800c106:	d105      	bne.n	800c114 <SysTick_Handler+0x108>
	{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800c108:	4b0d      	ldr	r3, [pc, #52]	; (800c140 <SysTick_Handler+0x134>)
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	4a0c      	ldr	r2, [pc, #48]	; (800c140 <SysTick_Handler+0x134>)
 800c10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c112:	6053      	str	r3, [r2, #4]
	}
}
 800c114:	bf00      	nop
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20001588 	.word	0x20001588
 800c11c:	2000158c 	.word	0x2000158c
 800c120:	20001590 	.word	0x20001590
 800c124:	20001594 	.word	0x20001594
 800c128:	20001598 	.word	0x20001598
 800c12c:	2000159c 	.word	0x2000159c
 800c130:	cccccccd 	.word	0xcccccccd
 800c134:	51eb851f 	.word	0x51eb851f
 800c138:	10624dd3 	.word	0x10624dd3
 800c13c:	200015c8 	.word	0x200015c8
 800c140:	e000ed00 	.word	0xe000ed00

0800c144 <PendSV_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 800c144:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 800c146:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 800c148:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800c14a:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 800c14c:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 800c14e:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 800c150:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800c152:	4808      	ldr	r0, [pc, #32]	; (800c174 <PendSV_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 800c154:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 800c156:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 800c158:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 800c15a:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 800c15c:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 800c15e:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 800c160:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 800c162:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800c164:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800c166:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800c168:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800c16a:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 800c16c:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 800c16e:	b662      	cpsie	i
    __asm("BX      LR");
 800c170:	4770      	bx	lr

}
 800c172:	bf00      	nop
 800c174:	200005e4 	.word	0x200005e4

0800c178 <Os_Scheduler_Init>:
/**
  * @brief  OS Scheduler initialization function
  * @return None
  */
void Os_Scheduler_Init()
{
 800c178:	b480      	push	{r7}
 800c17a:	af00      	add	r7, sp, #0
	/* Enter critical section: Disable interrupts */
	__asm("CPSID   I");
 800c17c:	b672      	cpsid	i
	/* Make the Task Control Block linked list circular */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8];
 800c17e:	4b29      	ldr	r3, [pc, #164]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c180:	4a29      	ldr	r2, [pc, #164]	; (800c228 <Os_Scheduler_Init+0xb0>)
 800c182:	605a      	str	r2, [r3, #4]
	g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8];
 800c184:	4b27      	ldr	r3, [pc, #156]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c186:	4a29      	ldr	r2, [pc, #164]	; (800c22c <Os_Scheduler_Init+0xb4>)
 800c188:	60da      	str	r2, [r3, #12]
	g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8];
 800c18a:	4b26      	ldr	r3, [pc, #152]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c18c:	4a28      	ldr	r2, [pc, #160]	; (800c230 <Os_Scheduler_Init+0xb8>)
 800c18e:	615a      	str	r2, [r3, #20]
	g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8];
 800c190:	4b24      	ldr	r3, [pc, #144]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c192:	4a28      	ldr	r2, [pc, #160]	; (800c234 <Os_Scheduler_Init+0xbc>)
 800c194:	61da      	str	r2, [r3, #28]
	g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800c196:	4b23      	ldr	r3, [pc, #140]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c198:	4a22      	ldr	r2, [pc, #136]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c19a:	625a      	str	r2, [r3, #36]	; 0x24
	/* Setup stack for initialization (master) task */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-16];
 800c19c:	4b21      	ldr	r3, [pc, #132]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c19e:	4a26      	ldr	r2, [pc, #152]	; (800c238 <Os_Scheduler_Init+0xc0>)
 800c1a0:	601a      	str	r2, [r3, #0]
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c1a2:	4b26      	ldr	r3, [pc, #152]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1a8:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_TaskMaster_0);
 800c1ac:	4a24      	ldr	r2, [pc, #144]	; (800c240 <Os_Scheduler_Init+0xc8>)
 800c1ae:	4b23      	ldr	r3, [pc, #140]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1b0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	/* Setup stack for 10ms task */
    g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c1b4:	4b1b      	ldr	r3, [pc, #108]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c1b6:	4a23      	ldr	r2, [pc, #140]	; (800c244 <Os_Scheduler_Init+0xcc>)
 800c1b8:	609a      	str	r2, [r3, #8]
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c1ba:	4b20      	ldr	r3, [pc, #128]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1c0:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task10ms_0);
 800c1c4:	4a20      	ldr	r2, [pc, #128]	; (800c248 <Os_Scheduler_Init+0xd0>)
 800c1c6:	4b1d      	ldr	r3, [pc, #116]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1c8:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
	/* Setup stack for 50ms task */
    g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c1cc:	4b15      	ldr	r3, [pc, #84]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c1ce:	4a1f      	ldr	r2, [pc, #124]	; (800c24c <Os_Scheduler_Init+0xd4>)
 800c1d0:	611a      	str	r2, [r3, #16]
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c1d2:	4b1a      	ldr	r3, [pc, #104]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1d8:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task50ms_0);
 800c1dc:	4a1c      	ldr	r2, [pc, #112]	; (800c250 <Os_Scheduler_Init+0xd8>)
 800c1de:	4b17      	ldr	r3, [pc, #92]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1e0:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
	/* Setup stack for 100ms task */
    g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c1e4:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c1e6:	4a1b      	ldr	r2, [pc, #108]	; (800c254 <Os_Scheduler_Init+0xdc>)
 800c1e8:	619a      	str	r2, [r3, #24]
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c1ea:	4b14      	ldr	r3, [pc, #80]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1f0:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task100ms_0);
 800c1f4:	4a18      	ldr	r2, [pc, #96]	; (800c258 <Os_Scheduler_Init+0xe0>)
 800c1f6:	4b11      	ldr	r3, [pc, #68]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c1f8:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78
	/* Setup stack for 500ms task */
    g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c1fc:	4b09      	ldr	r3, [pc, #36]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c1fe:	4a17      	ldr	r2, [pc, #92]	; (800c25c <Os_Scheduler_Init+0xe4>)
 800c200:	621a      	str	r2, [r3, #32]
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c202:	4b0e      	ldr	r3, [pc, #56]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c208:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task500ms_0);
 800c20c:	4a14      	ldr	r2, [pc, #80]	; (800c260 <Os_Scheduler_Init+0xe8>)
 800c20e:	4b0b      	ldr	r3, [pc, #44]	; (800c23c <Os_Scheduler_Init+0xc4>)
 800c210:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
    /* Set the current task control block to point to init task */
    g_Os_CurrentTaskBlock_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800c214:	4b13      	ldr	r3, [pc, #76]	; (800c264 <Os_Scheduler_Init+0xec>)
 800c216:	4a03      	ldr	r2, [pc, #12]	; (800c224 <Os_Scheduler_Init+0xac>)
 800c218:	601a      	str	r2, [r3, #0]
    /* Leave critical section: Enable interrupts */
    __asm("CPSIE   I ");
 800c21a:	b662      	cpsie	i
}
 800c21c:	bf00      	nop
 800c21e:	46bd      	mov	sp, r7
 800c220:	bc80      	pop	{r7}
 800c222:	4770      	bx	lr
 800c224:	200005bc 	.word	0x200005bc
 800c228:	200005c4 	.word	0x200005c4
 800c22c:	200005cc 	.word	0x200005cc
 800c230:	200005d4 	.word	0x200005d4
 800c234:	200005dc 	.word	0x200005dc
 800c238:	200008c8 	.word	0x200008c8
 800c23c:	200005e8 	.word	0x200005e8
 800c240:	0800c295 	.word	0x0800c295
 800c244:	20000be8 	.word	0x20000be8
 800c248:	0800c31d 	.word	0x0800c31d
 800c24c:	20000f08 	.word	0x20000f08
 800c250:	0800c36d 	.word	0x0800c36d
 800c254:	20001228 	.word	0x20001228
 800c258:	0800c3bd 	.word	0x0800c3bd
 800c25c:	20001548 	.word	0x20001548
 800c260:	0800c40d 	.word	0x0800c40d
 800c264:	200005e4 	.word	0x200005e4

0800c268 <Os_Scheduler_Start>:
  * @return None
  */
__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800c268:	4809      	ldr	r0, [pc, #36]	; (800c290 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 800c26a:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 800c26c:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 800c26e:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 800c270:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800c272:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800c274:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800c276:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800c278:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 800c27a:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 800c27c:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800c27e:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800c280:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 800c282:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 800c284:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 800c286:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 800c288:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 800c28a:	b662      	cpsie	i
    __asm("BX      LR");
 800c28c:	4770      	bx	lr
}
 800c28e:	bf00      	nop
 800c290:	200005e4 	.word	0x200005e4

0800c294 <Os_Scheduler_TaskMaster_0>:
/**
  * @brief  Initialization task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_TaskMaster_0(void)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
    while(1)
    {
    	/* Wait for context switch of master task */
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800c298:	bf00      	nop
 800c29a:	4b1c      	ldr	r3, [pc, #112]	; (800c30c <Os_Scheduler_TaskMaster_0+0x78>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	4b1c      	ldr	r3, [pc, #112]	; (800c310 <Os_Scheduler_TaskMaster_0+0x7c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d0f9      	beq.n	800c29a <Os_Scheduler_TaskMaster_0+0x6>
    	{
    	}
    	Os_Task5ms_0_cnt++;
 800c2a6:	4b1b      	ldr	r3, [pc, #108]	; (800c314 <Os_Scheduler_TaskMaster_0+0x80>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	4a19      	ldr	r2, [pc, #100]	; (800c314 <Os_Scheduler_TaskMaster_0+0x80>)
 800c2ae:	6013      	str	r3, [r2, #0]
    	g_Os_Task5ms_count_u32 = g_Os_5msTimerISR_count_u32;
 800c2b0:	4b17      	ldr	r3, [pc, #92]	; (800c310 <Os_Scheduler_TaskMaster_0+0x7c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a15      	ldr	r2, [pc, #84]	; (800c30c <Os_Scheduler_TaskMaster_0+0x78>)
 800c2b6:	6013      	str	r3, [r2, #0]

    	/* Check Os state */
    	switch (g_OS_State_e)
 800c2b8:	4b17      	ldr	r3, [pc, #92]	; (800c318 <Os_Scheduler_TaskMaster_0+0x84>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	2b05      	cmp	r3, #5
 800c2c0:	d822      	bhi.n	800c308 <Os_Scheduler_TaskMaster_0+0x74>
 800c2c2:	a201      	add	r2, pc, #4	; (adr r2, 800c2c8 <Os_Scheduler_TaskMaster_0+0x34>)
 800c2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c8:	0800c2e1 	.word	0x0800c2e1
 800c2cc:	0800c2e9 	.word	0x0800c2e9
 800c2d0:	0800c2f5 	.word	0x0800c2f5
 800c2d4:	0800c2f5 	.word	0x0800c2f5
 800c2d8:	0800c2fd 	.word	0x0800c2fd
 800c2dc:	0800c309 	.word	0x0800c309
    	{
    		case OS_STATE_RESET_E:
    		{
    			g_OS_State_e = OS_STATE_INIT_E;
 800c2e0:	4b0d      	ldr	r3, [pc, #52]	; (800c318 <Os_Scheduler_TaskMaster_0+0x84>)
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	701a      	strb	r2, [r3, #0]
    		} break;
 800c2e6:	e010      	b.n	800c30a <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_INIT_E:
    		{
    			OS_TASK_CALL(Os_Task_Master(), g_Os_dwt_Master_f32);
 800c2e8:	f000 f8b8 	bl	800c45c <Os_Task_Master>
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800c2ec:	4b0a      	ldr	r3, [pc, #40]	; (800c318 <Os_Scheduler_TaskMaster_0+0x84>)
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	701a      	strb	r2, [r3, #0]
    		} break;
 800c2f2:	e00a      	b.n	800c30a <Os_Scheduler_TaskMaster_0+0x76>
    			//g_OS_State_e = OS_STATE_RUNNING_E;
    		}
    		case OS_STATE_RUNNING_E:
    		{
    			/* TODO: add task activate/suspend here */
    			g_OS_State_e = OS_STATE_RUNNING_E;
 800c2f4:	4b08      	ldr	r3, [pc, #32]	; (800c318 <Os_Scheduler_TaskMaster_0+0x84>)
 800c2f6:	2203      	movs	r2, #3
 800c2f8:	701a      	strb	r2, [r3, #0]
    		} break;
 800c2fa:	e006      	b.n	800c30a <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_SHUTDOWN_E:
    		{
    			/* TODO: Addc condition to get here */
    			OS_TASK_CALL(Os_Task_Shutdown(), g_Os_dwt_Shutdown_f32);
 800c2fc:	f000 f8cc 	bl	800c498 <Os_Task_Shutdown>
    			/* TODO: move to reset state */
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800c300:	4b05      	ldr	r3, [pc, #20]	; (800c318 <Os_Scheduler_TaskMaster_0+0x84>)
 800c302:	2202      	movs	r2, #2
 800c304:	701a      	strb	r2, [r3, #0]
    		} break;
 800c306:	e000      	b.n	800c30a <Os_Scheduler_TaskMaster_0+0x76>
    			/* NvM write all, write error */
    		} break;
    		default:
    		{

    		} break;
 800c308:	bf00      	nop
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800c30a:	e7c5      	b.n	800c298 <Os_Scheduler_TaskMaster_0+0x4>
 800c30c:	200015a4 	.word	0x200015a4
 800c310:	2000158c 	.word	0x2000158c
 800c314:	200015a0 	.word	0x200015a0
 800c318:	200015c8 	.word	0x200015c8

0800c31c <Os_Scheduler_Task10ms_0>:
/**
  * @brief  Periodic 10ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task10ms_0(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c320:	4b0e      	ldr	r3, [pc, #56]	; (800c35c <Os_Scheduler_Task10ms_0+0x40>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b03      	cmp	r3, #3
 800c328:	d112      	bne.n	800c350 <Os_Scheduler_Task10ms_0+0x34>
    	{
			while(g_Os_Task10ms_count_u32 == g_Os_10msTimerISR_count_u32)
 800c32a:	bf00      	nop
 800c32c:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <Os_Scheduler_Task10ms_0+0x44>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	4b0c      	ldr	r3, [pc, #48]	; (800c364 <Os_Scheduler_Task10ms_0+0x48>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	429a      	cmp	r2, r3
 800c336:	d0f9      	beq.n	800c32c <Os_Scheduler_Task10ms_0+0x10>
			{

			}
			Os_Task10ms_0_cnt++;
 800c338:	4b0b      	ldr	r3, [pc, #44]	; (800c368 <Os_Scheduler_Task10ms_0+0x4c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3301      	adds	r3, #1
 800c33e:	4a0a      	ldr	r2, [pc, #40]	; (800c368 <Os_Scheduler_Task10ms_0+0x4c>)
 800c340:	6013      	str	r3, [r2, #0]
			g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800c342:	4b08      	ldr	r3, [pc, #32]	; (800c364 <Os_Scheduler_Task10ms_0+0x48>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a06      	ldr	r2, [pc, #24]	; (800c360 <Os_Scheduler_Task10ms_0+0x44>)
 800c348:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_10ms(), g_Os_dwt_10ms_f32);
 800c34a:	f000 f88d 	bl	800c468 <Os_Task_10ms>
 800c34e:	e7e7      	b.n	800c320 <Os_Scheduler_Task10ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800c350:	4b04      	ldr	r3, [pc, #16]	; (800c364 <Os_Scheduler_Task10ms_0+0x48>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a02      	ldr	r2, [pc, #8]	; (800c360 <Os_Scheduler_Task10ms_0+0x44>)
 800c356:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c358:	e7e2      	b.n	800c320 <Os_Scheduler_Task10ms_0+0x4>
 800c35a:	bf00      	nop
 800c35c:	200015c8 	.word	0x200015c8
 800c360:	200015ac 	.word	0x200015ac
 800c364:	20001590 	.word	0x20001590
 800c368:	200015a8 	.word	0x200015a8

0800c36c <Os_Scheduler_Task50ms_0>:
/**
  * @brief  Periodic 50ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task50ms_0(void)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c370:	4b0e      	ldr	r3, [pc, #56]	; (800c3ac <Os_Scheduler_Task50ms_0+0x40>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b03      	cmp	r3, #3
 800c378:	d112      	bne.n	800c3a0 <Os_Scheduler_Task50ms_0+0x34>
    	{
			while(g_Os_Task50ms_count_u32 == g_Os_50msTimerISR_count_u32)
 800c37a:	bf00      	nop
 800c37c:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <Os_Scheduler_Task50ms_0+0x44>)
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	4b0c      	ldr	r3, [pc, #48]	; (800c3b4 <Os_Scheduler_Task50ms_0+0x48>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	429a      	cmp	r2, r3
 800c386:	d0f9      	beq.n	800c37c <Os_Scheduler_Task50ms_0+0x10>
			{

			}
			Os_Task50ms_0_cnt++;
 800c388:	4b0b      	ldr	r3, [pc, #44]	; (800c3b8 <Os_Scheduler_Task50ms_0+0x4c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3301      	adds	r3, #1
 800c38e:	4a0a      	ldr	r2, [pc, #40]	; (800c3b8 <Os_Scheduler_Task50ms_0+0x4c>)
 800c390:	6013      	str	r3, [r2, #0]
			g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800c392:	4b08      	ldr	r3, [pc, #32]	; (800c3b4 <Os_Scheduler_Task50ms_0+0x48>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a06      	ldr	r2, [pc, #24]	; (800c3b0 <Os_Scheduler_Task50ms_0+0x44>)
 800c398:	6013      	str	r3, [r2, #0]
			OS_TASK_CALL(Os_Task_50ms(), g_Os_dwt_50ms_f32);
 800c39a:	f000 f86b 	bl	800c474 <Os_Task_50ms>
 800c39e:	e7e7      	b.n	800c370 <Os_Scheduler_Task50ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800c3a0:	4b04      	ldr	r3, [pc, #16]	; (800c3b4 <Os_Scheduler_Task50ms_0+0x48>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a02      	ldr	r2, [pc, #8]	; (800c3b0 <Os_Scheduler_Task50ms_0+0x44>)
 800c3a6:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c3a8:	e7e2      	b.n	800c370 <Os_Scheduler_Task50ms_0+0x4>
 800c3aa:	bf00      	nop
 800c3ac:	200015c8 	.word	0x200015c8
 800c3b0:	200015b4 	.word	0x200015b4
 800c3b4:	20001594 	.word	0x20001594
 800c3b8:	200015b0 	.word	0x200015b0

0800c3bc <Os_Scheduler_Task100ms_0>:
/**
  * @brief  Periodic 100ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task100ms_0(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c3c0:	4b0e      	ldr	r3, [pc, #56]	; (800c3fc <Os_Scheduler_Task100ms_0+0x40>)
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d112      	bne.n	800c3f0 <Os_Scheduler_Task100ms_0+0x34>
    	{
			while(g_Os_Task100ms_count_u32 == g_Os_100msTimerISR_count_u32)
 800c3ca:	bf00      	nop
 800c3cc:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <Os_Scheduler_Task100ms_0+0x44>)
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <Os_Scheduler_Task100ms_0+0x48>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d0f9      	beq.n	800c3cc <Os_Scheduler_Task100ms_0+0x10>
			{

			}
			Os_Task100ms_0_cnt++;
 800c3d8:	4b0b      	ldr	r3, [pc, #44]	; (800c408 <Os_Scheduler_Task100ms_0+0x4c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	4a0a      	ldr	r2, [pc, #40]	; (800c408 <Os_Scheduler_Task100ms_0+0x4c>)
 800c3e0:	6013      	str	r3, [r2, #0]
			g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800c3e2:	4b08      	ldr	r3, [pc, #32]	; (800c404 <Os_Scheduler_Task100ms_0+0x48>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a06      	ldr	r2, [pc, #24]	; (800c400 <Os_Scheduler_Task100ms_0+0x44>)
 800c3e8:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_100ms(), g_Os_dwt_100ms_f32);
 800c3ea:	f000 f849 	bl	800c480 <Os_Task_100ms>
 800c3ee:	e7e7      	b.n	800c3c0 <Os_Scheduler_Task100ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800c3f0:	4b04      	ldr	r3, [pc, #16]	; (800c404 <Os_Scheduler_Task100ms_0+0x48>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a02      	ldr	r2, [pc, #8]	; (800c400 <Os_Scheduler_Task100ms_0+0x44>)
 800c3f6:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c3f8:	e7e2      	b.n	800c3c0 <Os_Scheduler_Task100ms_0+0x4>
 800c3fa:	bf00      	nop
 800c3fc:	200015c8 	.word	0x200015c8
 800c400:	200015bc 	.word	0x200015bc
 800c404:	20001598 	.word	0x20001598
 800c408:	200015b8 	.word	0x200015b8

0800c40c <Os_Scheduler_Task500ms_0>:
/**
  * @brief  Periodic 500ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task500ms_0(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c410:	4b0e      	ldr	r3, [pc, #56]	; (800c44c <Os_Scheduler_Task500ms_0+0x40>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	b2db      	uxtb	r3, r3
 800c416:	2b03      	cmp	r3, #3
 800c418:	d112      	bne.n	800c440 <Os_Scheduler_Task500ms_0+0x34>
    	{
			while(g_Os_Task500ms_count_u32 == g_Os_500msTimerISR_count_u32)
 800c41a:	bf00      	nop
 800c41c:	4b0c      	ldr	r3, [pc, #48]	; (800c450 <Os_Scheduler_Task500ms_0+0x44>)
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	4b0c      	ldr	r3, [pc, #48]	; (800c454 <Os_Scheduler_Task500ms_0+0x48>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d0f9      	beq.n	800c41c <Os_Scheduler_Task500ms_0+0x10>
			{

			}
			Os_Task500ms_0_cnt++;
 800c428:	4b0b      	ldr	r3, [pc, #44]	; (800c458 <Os_Scheduler_Task500ms_0+0x4c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3301      	adds	r3, #1
 800c42e:	4a0a      	ldr	r2, [pc, #40]	; (800c458 <Os_Scheduler_Task500ms_0+0x4c>)
 800c430:	6013      	str	r3, [r2, #0]
			g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800c432:	4b08      	ldr	r3, [pc, #32]	; (800c454 <Os_Scheduler_Task500ms_0+0x48>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a06      	ldr	r2, [pc, #24]	; (800c450 <Os_Scheduler_Task500ms_0+0x44>)
 800c438:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_500ms(), g_Os_dwt_500ms_f32);
 800c43a:	f000 f827 	bl	800c48c <Os_Task_500ms>
 800c43e:	e7e7      	b.n	800c410 <Os_Scheduler_Task500ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800c440:	4b04      	ldr	r3, [pc, #16]	; (800c454 <Os_Scheduler_Task500ms_0+0x48>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a02      	ldr	r2, [pc, #8]	; (800c450 <Os_Scheduler_Task500ms_0+0x44>)
 800c446:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c448:	e7e2      	b.n	800c410 <Os_Scheduler_Task500ms_0+0x4>
 800c44a:	bf00      	nop
 800c44c:	200015c8 	.word	0x200015c8
 800c450:	200015c4 	.word	0x200015c4
 800c454:	2000159c 	.word	0x2000159c
 800c458:	200015c0 	.word	0x200015c0

0800c45c <Os_Task_Master>:

#include "Os_task.h"
#include "Rte_Os.h"

TASK(Master)()
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
	Rte_Os_Task_Master();
 800c460:	f000 f872 	bl	800c548 <Rte_Task_Master>
}
 800c464:	bf00      	nop
 800c466:	bd80      	pop	{r7, pc}

0800c468 <Os_Task_10ms>:

TASK(10ms)()
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 800c46c:	f000 f890 	bl	800c590 <Rte_Task_10ms>
}
 800c470:	bf00      	nop
 800c472:	bd80      	pop	{r7, pc}

0800c474 <Os_Task_50ms>:

TASK(50ms)()
{
 800c474:	b580      	push	{r7, lr}
 800c476:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 800c478:	f000 f89e 	bl	800c5b8 <Rte_Task_50ms>
}
 800c47c:	bf00      	nop
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <Os_Task_100ms>:

TASK(100ms)()
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 800c484:	f000 f8a0 	bl	800c5c8 <Rte_Task_100ms>
}
 800c488:	bf00      	nop
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <Os_Task_500ms>:

TASK(500ms)()
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 800c490:	f000 f8a6 	bl	800c5e0 <Rte_Task_500ms>
}
 800c494:	bf00      	nop
 800c496:	bd80      	pop	{r7, pc}

0800c498 <Os_Task_Shutdown>:

TASK(Shutdown)()
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	af00      	add	r7, sp, #0
	Rte_Os_Task_Shutdown();
 800c49c:	f000 f8d4 	bl	800c648 <Rte_Task_Shutdown>
}
 800c4a0:	bf00      	nop
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0

}
 800c4a8:	bf00      	nop
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bc80      	pop	{r7}
 800c4ae:	4770      	bx	lr

0800c4b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c4b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c4e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c4b4:	480d      	ldr	r0, [pc, #52]	; (800c4ec <LoopForever+0x6>)
  ldr r1, =_edata
 800c4b6:	490e      	ldr	r1, [pc, #56]	; (800c4f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c4b8:	4a0e      	ldr	r2, [pc, #56]	; (800c4f4 <LoopForever+0xe>)
  movs r3, #0
 800c4ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c4bc:	e002      	b.n	800c4c4 <LoopCopyDataInit>

0800c4be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c4be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c4c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c4c2:	3304      	adds	r3, #4

0800c4c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c4c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c4c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c4c8:	d3f9      	bcc.n	800c4be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c4ca:	4a0b      	ldr	r2, [pc, #44]	; (800c4f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c4cc:	4c0b      	ldr	r4, [pc, #44]	; (800c4fc <LoopForever+0x16>)
  movs r3, #0
 800c4ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c4d0:	e001      	b.n	800c4d6 <LoopFillZerobss>

0800c4d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c4d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c4d4:	3204      	adds	r2, #4

0800c4d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c4d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c4d8:	d3fb      	bcc.n	800c4d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c4da:	f7fb fce3 	bl	8007ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c4de:	f000 fafb 	bl	800cad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 800c4e2:	f7ff fd82 	bl	800bfea <EcuM_Init>

0800c4e6 <LoopForever>:

LoopForever:
    b LoopForever
 800c4e6:	e7fe      	b.n	800c4e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c4e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800c4ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c4f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800c4f4:	0800d4a8 	.word	0x0800d4a8
  ldr r2, =_sbss
 800c4f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800c4fc:	200017ec 	.word	0x200017ec

0800c500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c500:	e7fe      	b.n	800c500 <ADC1_2_IRQHandler>

0800c502 <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 800c502:	b480      	push	{r7}
 800c504:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c506:	b672      	cpsid	i
}
 800c508:	bf00      	nop
	__disable_irq();
}
 800c50a:	bf00      	nop
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bc80      	pop	{r7}
 800c510:	4770      	bx	lr

0800c512 <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 800c512:	b480      	push	{r7}
 800c514:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800c516:	b662      	cpsie	i
}
 800c518:	bf00      	nop
	__enable_irq();
}
 800c51a:	bf00      	nop
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bc80      	pop	{r7}
 800c520:	4770      	bx	lr
	...

0800c524 <Rte_Init>:

void Rte_Init(void)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800c528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c52c:	4804      	ldr	r0, [pc, #16]	; (800c540 <Rte_Init+0x1c>)
 800c52e:	f7f7 fdf9 	bl	8004124 <HAL_GPIO_ReadPin>
 800c532:	4603      	mov	r3, r0
 800c534:	461a      	mov	r2, r3
 800c536:	4b03      	ldr	r3, [pc, #12]	; (800c544 <Rte_Init+0x20>)
 800c538:	701a      	strb	r2, [r3, #0]
}
 800c53a:	bf00      	nop
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	48000800 	.word	0x48000800
 800c544:	200015c9 	.word	0x200015c9

0800c548 <Rte_Task_Master>:

/* Os Tasks*/
/* Init task */
void Rte_Task_Master(void)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 800c54c:	f7ff fd47 	bl	800bfde <EcuM_StartUp_Two>

	/* Bsw stacks init */
	NvM_Init();
 800c550:	f7ff f928 	bl	800b7a4 <NvM_Init>
	Ea_Init();
 800c554:	f7ff f8e2 	bl	800b71c <Ea_Init>
	/* Rte init */
	Rte_Init();
 800c558:	f7ff ffe4 	bl	800c524 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 800c55c:	f7f6 f94e 	bl	80027fc <Cdd_Servo_Init>
	Cdd_Ultrasonic_Init();
 800c560:	f7f6 faba 	bl	8002ad8 <Cdd_Ultrasonic_Init>
	Cdd_DCMotor_Init();
 800c564:	f7f5 fc7e 	bl	8001e64 <Cdd_DCMotor_Init>
	/* Asw init */
	Access_Init();
 800c568:	f7f4 fd74 	bl	8001054 <Access_Init>
	Engine_Init();
 800c56c:	f7f5 f9a2 	bl	80018b4 <Engine_Init>
	Brakes_Init();
 800c570:	f7f4 fe86 	bl	8001280 <Brakes_Init>
	Steering_Init();
 800c574:	f7f5 fc3c 	bl	8001df0 <Steering_Init>
	Blinker_Init();
 800c578:	f7f5 fb68 	bl	8001c4c <Blinker_Init>
	FrontLights_Init();
 800c57c:	f7f5 fc02 	bl	8001d84 <FrontLights_Init>
	InteriorLights_Init();
 800c580:	f7f5 fc12 	bl	8001da8 <InteriorLights_Init>
	RearLights_Init();
 800c584:	f7f5 fc22 	bl	8001dcc <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 800c588:	f7f5 face 	bl	8001b28 <LED_Init>

	/* Add new ASW init functions here */
}
 800c58c:	bf00      	nop
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 800c594:	f7ff f978 	bl	800b888 <BswM_MainFunction>
	NvM_MainFunction();
 800c598:	f7ff f914 	bl	800b7c4 <NvM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 800c59c:	f7f6 f956 	bl	800284c <Cdd_Servo_MainFunction>
	Cdd_Ultrasonic_MainFunction();
 800c5a0:	f7f6 fbc2 	bl	8002d28 <Cdd_Ultrasonic_MainFunction>
	/* ASW */
	Access_MainFunction();
 800c5a4:	f7f4 fd62 	bl	800106c <Access_MainFunction>
	Engine_MainFunction();
 800c5a8:	f7f5 f990 	bl	80018cc <Engine_MainFunction>
	Brakes_MainFunction();
 800c5ac:	f7f4 fe9c 	bl	80012e8 <Brakes_MainFunction>
	Steering_MainFunction();
 800c5b0:	f7f5 fc2a 	bl	8001e08 <Steering_MainFunction>

}
 800c5b4:	bf00      	nop
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	af00      	add	r7, sp, #0
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 800c5bc:	f7f5 fad8 	bl	8001b70 <LED_MainFunction>
	Cdd_DCMotor_MainFunction();
 800c5c0:	f7f5 ff62 	bl	8002488 <Cdd_DCMotor_MainFunction>
}
 800c5c4:	bf00      	nop
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 800c5cc:	f7f5 fb5c 	bl	8001c88 <Blinker_MainFunction>
	FrontLights_MainFunction();
 800c5d0:	f7f5 fbe4 	bl	8001d9c <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 800c5d4:	f7f5 fbf4 	bl	8001dc0 <InteriorLights_MainFunction>
	RearLights_MainFunction();
 800c5d8:	f7f5 fc04 	bl	8001de4 <RearLights_MainFunction>
}
 800c5dc:	bf00      	nop
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0

	/* UART test section. TODO: remove */
	sprintf(databuf, "%4d X", count);
 800c5e4:	4b13      	ldr	r3, [pc, #76]	; (800c634 <Rte_Task_500ms+0x54>)
 800c5e6:	881b      	ldrh	r3, [r3, #0]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	4913      	ldr	r1, [pc, #76]	; (800c638 <Rte_Task_500ms+0x58>)
 800c5ec:	4813      	ldr	r0, [pc, #76]	; (800c63c <Rte_Task_500ms+0x5c>)
 800c5ee:	f000 fa45 	bl	800ca7c <siprintf>
	databuf[strlen(databuf)] = 0;
 800c5f2:	4812      	ldr	r0, [pc, #72]	; (800c63c <Rte_Task_500ms+0x5c>)
 800c5f4:	f7f3 fdf4 	bl	80001e0 <strlen>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	4a10      	ldr	r2, [pc, #64]	; (800c63c <Rte_Task_500ms+0x5c>)
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 800c600:	480e      	ldr	r0, [pc, #56]	; (800c63c <Rte_Task_500ms+0x5c>)
 800c602:	f7f3 fded 	bl	80001e0 <strlen>
 800c606:	4603      	mov	r3, r0
 800c608:	b29a      	uxth	r2, r3
 800c60a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c60e:	490b      	ldr	r1, [pc, #44]	; (800c63c <Rte_Task_500ms+0x5c>)
 800c610:	480b      	ldr	r0, [pc, #44]	; (800c640 <Rte_Task_500ms+0x60>)
 800c612:	f7fe f8c3 	bl	800a79c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 800c616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c61a:	2201      	movs	r2, #1
 800c61c:	4909      	ldr	r1, [pc, #36]	; (800c644 <Rte_Task_500ms+0x64>)
 800c61e:	4808      	ldr	r0, [pc, #32]	; (800c640 <Rte_Task_500ms+0x60>)
 800c620:	f7fe f8bc 	bl	800a79c <HAL_UART_Transmit>

	count++;
 800c624:	4b03      	ldr	r3, [pc, #12]	; (800c634 <Rte_Task_500ms+0x54>)
 800c626:	881b      	ldrh	r3, [r3, #0]
 800c628:	3301      	adds	r3, #1
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	4b01      	ldr	r3, [pc, #4]	; (800c634 <Rte_Task_500ms+0x54>)
 800c62e:	801a      	strh	r2, [r3, #0]
}
 800c630:	bf00      	nop
 800c632:	bd80      	pop	{r7, pc}
 800c634:	200015e0 	.word	0x200015e0
 800c638:	0800d3d8 	.word	0x0800d3d8
 800c63c:	200015d0 	.word	0x200015d0
 800c640:	20000528 	.word	0x20000528
 800c644:	20000014 	.word	0x20000014

0800c648 <Rte_Task_Shutdown>:

void Rte_Task_Shutdown(void)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0
	/* ASW Shutdown callbacks */
	LED_Shutdown();
 800c64c:	f7f5 faee 	bl	8001c2c <LED_Shutdown>
	Brakes_Shutdown();
 800c650:	f7f4 fe92 	bl	8001378 <Brakes_Shutdown>

	/* BSW Shutdown callbacks */
}
 800c654:	bf00      	nop
 800c656:	bd80      	pop	{r7, pc}

0800c658 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>:
/* CDD interfaces: Ultrasonic */
/* Cdd_Ultrasonic: Trigger measurement */
void Rte_Call_Cdd_Ultrasonic_TriggerMeasurement(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_SET);
 800c65c:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a0a      	ldr	r2, [pc, #40]	; (800c68c <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c662:	8891      	ldrh	r1, [r2, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	4618      	mov	r0, r3
 800c668:	f7f7 fd73 	bl	8004152 <HAL_GPIO_WritePin>
	__asm("NOP");
 800c66c:	bf00      	nop
	__asm("NOP");
 800c66e:	bf00      	nop
	__asm("NOP");
 800c670:	bf00      	nop
	__asm("NOP");
 800c672:	bf00      	nop
	__asm("NOP");
 800c674:	bf00      	nop
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_RESET);
 800c676:	4b05      	ldr	r3, [pc, #20]	; (800c68c <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a04      	ldr	r2, [pc, #16]	; (800c68c <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c67c:	8891      	ldrh	r1, [r2, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	4618      	mov	r0, r3
 800c682:	f7f7 fd66 	bl	8004152 <HAL_GPIO_WritePin>
}
 800c686:	bf00      	nop
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	0800d420 	.word	0x0800d420

0800c690 <Rte_Read_Cdd_Ultrasonic_Distance_f32>:

/* Cdd_Ultrasonic: Read distance */
void Rte_Read_Cdd_Ultrasonic_Distance_f32(float32 *distance)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	*distance = Cdd_Ultrasonic_ReadDistance();
 800c698:	f7f6 fb60 	bl	8002d5c <Cdd_Ultrasonic_ReadDistance>
 800c69c:	4602      	mov	r2, r0
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	601a      	str	r2, [r3, #0]
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 800c6b4:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <Rte_Read_PC13_Pin_State+0x1c>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	701a      	strb	r2, [r3, #0]
}
 800c6be:	bf00      	nop
 800c6c0:	370c      	adds	r7, #12
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bc80      	pop	{r7}
 800c6c6:	4770      	bx	lr
 800c6c8:	200015c9 	.word	0x200015c9

0800c6cc <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 800c6d6:	4a04      	ldr	r2, [pc, #16]	; (800c6e8 <Rte_Write_PC13_Pin_State+0x1c>)
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	7013      	strb	r3, [r2, #0]
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bc80      	pop	{r7}
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	200015c9 	.word	0x200015c9

0800c6ec <Rte_Read_PC6_Pin_State>:

void Rte_Read_PC6_Pin_State(uint8 *state)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
	*state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 800c6f4:	2140      	movs	r1, #64	; 0x40
 800c6f6:	4805      	ldr	r0, [pc, #20]	; (800c70c <Rte_Read_PC6_Pin_State+0x20>)
 800c6f8:	f7f7 fd14 	bl	8004124 <HAL_GPIO_ReadPin>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	461a      	mov	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	701a      	strb	r2, [r3, #0]
}
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	48000800 	.word	0x48000800

0800c710 <Rte_Read_g_CollisionWarning_Status>:

void Rte_Read_g_CollisionWarning_Status(uint8 *status)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
	*status = g_Rte_CollisionWarning_Status_u8;
 800c718:	4b04      	ldr	r3, [pc, #16]	; (800c72c <Rte_Read_g_CollisionWarning_Status+0x1c>)
 800c71a:	781a      	ldrb	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	701a      	strb	r2, [r3, #0]
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	bc80      	pop	{r7}
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	200015e2 	.word	0x200015e2

0800c730 <Rte_Write_g_CollisionWarning_Status>:

void Rte_Write_g_CollisionWarning_Status(uint8 status)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	71fb      	strb	r3, [r7, #7]
	g_Rte_CollisionWarning_Status_u8 = status;
 800c73a:	4a04      	ldr	r2, [pc, #16]	; (800c74c <Rte_Write_g_CollisionWarning_Status+0x1c>)
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	7013      	strb	r3, [r2, #0]
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	bc80      	pop	{r7}
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	200015e2 	.word	0x200015e2

0800c750 <Rte_Read_DIO_Autobrakes_State_b>:

void Rte_Read_DIO_Autobrakes_State_b(boolean *state)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	*state = g_Rte_Autobrakes_Status_b;
 800c758:	4b04      	ldr	r3, [pc, #16]	; (800c76c <Rte_Read_DIO_Autobrakes_State_b+0x1c>)
 800c75a:	781a      	ldrb	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	701a      	strb	r2, [r3, #0]
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	bc80      	pop	{r7}
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	200015e3 	.word	0x200015e3

0800c770 <Rte_Write_PC_2>:

/* Write PC2 pin state */
void Rte_Write_PC_2(boolean state)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d105      	bne.n	800c78c <Rte_Write_PC_2+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800c780:	2200      	movs	r2, #0
 800c782:	2104      	movs	r1, #4
 800c784:	4806      	ldr	r0, [pc, #24]	; (800c7a0 <Rte_Write_PC_2+0x30>)
 800c786:	f7f7 fce4 	bl	8004152 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
	}
}
 800c78a:	e004      	b.n	800c796 <Rte_Write_PC_2+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800c78c:	2201      	movs	r2, #1
 800c78e:	2104      	movs	r1, #4
 800c790:	4803      	ldr	r0, [pc, #12]	; (800c7a0 <Rte_Write_PC_2+0x30>)
 800c792:	f7f7 fcde 	bl	8004152 <HAL_GPIO_WritePin>
}
 800c796:	bf00      	nop
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	48000800 	.word	0x48000800

0800c7a4 <Rte_Write_PC_3>:

/* Write PC3 pin state */
void Rte_Write_PC_3(boolean state)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d105      	bne.n	800c7c0 <Rte_Write_PC_3+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2108      	movs	r1, #8
 800c7b8:	4806      	ldr	r0, [pc, #24]	; (800c7d4 <Rte_Write_PC_3+0x30>)
 800c7ba:	f7f7 fcca 	bl	8004152 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800c7be:	e004      	b.n	800c7ca <Rte_Write_PC_3+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	2108      	movs	r1, #8
 800c7c4:	4803      	ldr	r0, [pc, #12]	; (800c7d4 <Rte_Write_PC_3+0x30>)
 800c7c6:	f7f7 fcc4 	bl	8004152 <HAL_GPIO_WritePin>
}
 800c7ca:	bf00      	nop
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	48000800 	.word	0x48000800

0800c7d8 <Rte_Write_DIO_Autobrakes_State_b>:

/* Write PC6 pin state */
void Rte_Write_DIO_Autobrakes_State_b(boolean state)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	71fb      	strb	r3, [r7, #7]
	g_Rte_Autobrakes_Status_b = state;
 800c7e2:	4a04      	ldr	r2, [pc, #16]	; (800c7f4 <Rte_Write_DIO_Autobrakes_State_b+0x1c>)
 800c7e4:	79fb      	ldrb	r3, [r7, #7]
 800c7e6:	7013      	strb	r3, [r2, #0]
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}
	*/
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bc80      	pop	{r7}
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	200015e3 	.word	0x200015e3

0800c7f8 <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 800c802:	88fb      	ldrh	r3, [r7, #6]
 800c804:	4618      	mov	r0, r3
 800c806:	f7f6 f805 	bl	8002814 <Cdd_Servo_RawMove>
}
 800c80a:	bf00      	nop
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
	...

0800c814 <Rte_Read_NvM_Block>:

void Rte_Read_NvM_Block(uint16 blockID, uint8 *data)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	4603      	mov	r3, r0
 800c81c:	6039      	str	r1, [r7, #0]
 800c81e:	80fb      	strh	r3, [r7, #6]
	/* TODO:	- remove direct read <- should be done by ReadAll
	 * 			- add block update after write
	 */
	NvM_ReadBlock(blockID, Rte_NvM_RAM_Block[blockID]);
 800c820:	88fb      	ldrh	r3, [r7, #6]
 800c822:	015b      	lsls	r3, r3, #5
 800c824:	4a07      	ldr	r2, [pc, #28]	; (800c844 <Rte_Read_NvM_Block+0x30>)
 800c826:	441a      	add	r2, r3
 800c828:	88fb      	ldrh	r3, [r7, #6]
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fe fffc 	bl	800b82a <NvM_ReadBlock>
	data = &Rte_NvM_RAM_Block[blockID][0u];
 800c832:	88fb      	ldrh	r3, [r7, #6]
 800c834:	015b      	lsls	r3, r3, #5
 800c836:	4a03      	ldr	r2, [pc, #12]	; (800c844 <Rte_Read_NvM_Block+0x30>)
 800c838:	4413      	add	r3, r2
 800c83a:	603b      	str	r3, [r7, #0]
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	200015e4 	.word	0x200015e4

0800c848 <Rte_Write_NvM_Block>:

void Rte_Write_NvM_Block(uint16 blockID, uint8 *data)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	6039      	str	r1, [r7, #0]
 800c852:	80fb      	strh	r3, [r7, #6]
	NvM_WriteBlock(blockID, data);
 800c854:	88fb      	ldrh	r3, [r7, #6]
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe ffd7 	bl	800b80c <NvM_WriteBlock>
}
 800c85e:	bf00      	nop
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	4603      	mov	r3, r0
 800c870:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 800c872:	4a04      	ldr	r2, [pc, #16]	; (800c884 <Rte_Write_AN0_Voltage_u16+0x1c>)
 800c874:	88fb      	ldrh	r3, [r7, #6]
 800c876:	8013      	strh	r3, [r2, #0]
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bc80      	pop	{r7}
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	200015ca 	.word	0x200015ca

0800c888 <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800c890:	f7ff fe37 	bl	800c502 <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <Rte_Read_AN0_Voltage_u16+0x24>)
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	b29a      	uxth	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800c89e:	f7ff fe38 	bl	800c512 <Rte_Call_LeaveProtectedSection>
}
 800c8a2:	bf00      	nop
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	200015ca 	.word	0x200015ca

0800c8b0 <Rte_Write_AN2_Voltage_u16>:

void Rte_Write_AN2_Voltage_u16(uint16 voltage)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN2_Voltage = voltage;
 800c8ba:	4a04      	ldr	r2, [pc, #16]	; (800c8cc <Rte_Write_AN2_Voltage_u16+0x1c>)
 800c8bc:	88fb      	ldrh	r3, [r7, #6]
 800c8be:	8013      	strh	r3, [r2, #0]
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bc80      	pop	{r7}
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	200015cc 	.word	0x200015cc

0800c8d0 <Rte_Read_AN2_Voltage_u16>:

void Rte_Read_AN2_Voltage_u16(uint16 *voltage)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800c8d8:	f7ff fe13 	bl	800c502 <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN2_Voltage;
 800c8dc:	4b05      	ldr	r3, [pc, #20]	; (800c8f4 <Rte_Read_AN2_Voltage_u16+0x24>)
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800c8e6:	f7ff fe14 	bl	800c512 <Rte_Call_LeaveProtectedSection>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	200015cc 	.word	0x200015cc

0800c8f8 <Rte_Read_Remote_D0>:

void Rte_Read_Remote_D0(uint8 *status)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 800c900:	2180      	movs	r1, #128	; 0x80
 800c902:	4805      	ldr	r0, [pc, #20]	; (800c918 <Rte_Read_Remote_D0+0x20>)
 800c904:	f7f7 fc0e 	bl	8004124 <HAL_GPIO_ReadPin>
 800c908:	4603      	mov	r3, r0
 800c90a:	461a      	mov	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	701a      	strb	r2, [r3, #0]
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	48000800 	.word	0x48000800

0800c91c <Rte_Read_Remote_D1>:

void Rte_Read_Remote_D1(uint8 *status)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800c924:	2108      	movs	r1, #8
 800c926:	4805      	ldr	r0, [pc, #20]	; (800c93c <Rte_Read_Remote_D1+0x20>)
 800c928:	f7f7 fbfc 	bl	8004124 <HAL_GPIO_ReadPin>
 800c92c:	4603      	mov	r3, r0
 800c92e:	461a      	mov	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	701a      	strb	r2, [r3, #0]
}
 800c934:	bf00      	nop
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	48000400 	.word	0x48000400

0800c940 <Rte_Read_Remote_D2>:

void Rte_Read_Remote_D2(uint8 *status)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 800c948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c94c:	4805      	ldr	r0, [pc, #20]	; (800c964 <Rte_Read_Remote_D2+0x24>)
 800c94e:	f7f7 fbe9 	bl	8004124 <HAL_GPIO_ReadPin>
 800c952:	4603      	mov	r3, r0
 800c954:	461a      	mov	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	701a      	strb	r2, [r3, #0]
}
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	48000800 	.word	0x48000800

0800c968 <Rte_Read_Remote_D3>:

void Rte_Read_Remote_D3(uint8 *status)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800c970:	2110      	movs	r1, #16
 800c972:	4805      	ldr	r0, [pc, #20]	; (800c988 <Rte_Read_Remote_D3+0x20>)
 800c974:	f7f7 fbd6 	bl	8004124 <HAL_GPIO_ReadPin>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	701a      	strb	r2, [r3, #0]
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	48000400 	.word	0x48000400

0800c98c <Rte_Write_PB_13>:

/* Write Green pin state */
void Rte_Write_PB_13(boolean state)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d106      	bne.n	800c9aa <Rte_Write_PB_13+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_SET);
 800c99c:	2201      	movs	r2, #1
 800c99e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c9a2:	4807      	ldr	r0, [pc, #28]	; (800c9c0 <Rte_Write_PB_13+0x34>)
 800c9a4:	f7f7 fbd5 	bl	8004152 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
	}
}
 800c9a8:	e005      	b.n	800c9b6 <Rte_Write_PB_13+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c9b0:	4803      	ldr	r0, [pc, #12]	; (800c9c0 <Rte_Write_PB_13+0x34>)
 800c9b2:	f7f7 fbce 	bl	8004152 <HAL_GPIO_WritePin>
}
 800c9b6:	bf00      	nop
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	48000400 	.word	0x48000400

0800c9c4 <Rte_Write_PB_14>:

/* Write Yellow pin state */
void Rte_Write_PB_14(boolean state)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c9ce:	79fb      	ldrb	r3, [r7, #7]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d106      	bne.n	800c9e2 <Rte_Write_PB_14+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_SET);
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c9da:	4807      	ldr	r0, [pc, #28]	; (800c9f8 <Rte_Write_PB_14+0x34>)
 800c9dc:	f7f7 fbb9 	bl	8004152 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
	}
}
 800c9e0:	e005      	b.n	800c9ee <Rte_Write_PB_14+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c9e8:	4803      	ldr	r0, [pc, #12]	; (800c9f8 <Rte_Write_PB_14+0x34>)
 800c9ea:	f7f7 fbb2 	bl	8004152 <HAL_GPIO_WritePin>
}
 800c9ee:	bf00      	nop
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	48000400 	.word	0x48000400

0800c9fc <Rte_Write_PB_15>:

/* Write Red pin state */
void Rte_Write_PB_15(boolean state)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	4603      	mov	r3, r0
 800ca04:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800ca06:	79fb      	ldrb	r3, [r7, #7]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d106      	bne.n	800ca1a <Rte_Write_PB_15+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_SET);
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ca12:	4807      	ldr	r0, [pc, #28]	; (800ca30 <Rte_Write_PB_15+0x34>)
 800ca14:	f7f7 fb9d 	bl	8004152 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
	}
}
 800ca18:	e005      	b.n	800ca26 <Rte_Write_PB_15+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ca20:	4803      	ldr	r0, [pc, #12]	; (800ca30 <Rte_Write_PB_15+0x34>)
 800ca22:	f7f7 fb96 	bl	8004152 <HAL_GPIO_WritePin>
}
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	48000400 	.word	0x48000400

0800ca34 <Rte_Call_DCMotor_Set_Speed>:
{
	DC_MOTOR_Start(au8_MOTOR_Instance, au8_DIR, au8_SPEED);
}

void Rte_Call_DCMotor_Set_Speed(uint8 au8_MOTOR_Instance, uint8 au8_SPEED)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	460a      	mov	r2, r1
 800ca3e:	71fb      	strb	r3, [r7, #7]
 800ca40:	4613      	mov	r3, r2
 800ca42:	71bb      	strb	r3, [r7, #6]
	DC_MOTOR_Set_Speed(au8_MOTOR_Instance, au8_SPEED);
 800ca44:	79ba      	ldrb	r2, [r7, #6]
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7f5 fc78 	bl	8002340 <DC_MOTOR_Set_Speed>
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <Rte_Call_DCMotor_Set_Dir>:

void Rte_Call_DCMotor_Set_Dir(uint8 au8_MOTOR_Instance, uint8 au8_DIR)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	460a      	mov	r2, r1
 800ca62:	71fb      	strb	r3, [r7, #7]
 800ca64:	4613      	mov	r3, r2
 800ca66:	71bb      	strb	r3, [r7, #6]
	DC_MOTOR_Set_Dir(au8_MOTOR_Instance, au8_DIR);
 800ca68:	79ba      	ldrb	r2, [r7, #6]
 800ca6a:	79fb      	ldrb	r3, [r7, #7]
 800ca6c:	4611      	mov	r1, r2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7f5 fcb6 	bl	80023e0 <DC_MOTOR_Set_Dir>
}
 800ca74:	bf00      	nop
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <siprintf>:
 800ca7c:	b40e      	push	{r1, r2, r3}
 800ca7e:	b500      	push	{lr}
 800ca80:	b09c      	sub	sp, #112	; 0x70
 800ca82:	ab1d      	add	r3, sp, #116	; 0x74
 800ca84:	9002      	str	r0, [sp, #8]
 800ca86:	9006      	str	r0, [sp, #24]
 800ca88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca8c:	4809      	ldr	r0, [pc, #36]	; (800cab4 <siprintf+0x38>)
 800ca8e:	9107      	str	r1, [sp, #28]
 800ca90:	9104      	str	r1, [sp, #16]
 800ca92:	4909      	ldr	r1, [pc, #36]	; (800cab8 <siprintf+0x3c>)
 800ca94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca98:	9105      	str	r1, [sp, #20]
 800ca9a:	6800      	ldr	r0, [r0, #0]
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	a902      	add	r1, sp, #8
 800caa0:	f000 f990 	bl	800cdc4 <_svfiprintf_r>
 800caa4:	9b02      	ldr	r3, [sp, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	701a      	strb	r2, [r3, #0]
 800caaa:	b01c      	add	sp, #112	; 0x70
 800caac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cab0:	b003      	add	sp, #12
 800cab2:	4770      	bx	lr
 800cab4:	20000064 	.word	0x20000064
 800cab8:	ffff0208 	.word	0xffff0208

0800cabc <memset>:
 800cabc:	4402      	add	r2, r0
 800cabe:	4603      	mov	r3, r0
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d100      	bne.n	800cac6 <memset+0xa>
 800cac4:	4770      	bx	lr
 800cac6:	f803 1b01 	strb.w	r1, [r3], #1
 800caca:	e7f9      	b.n	800cac0 <memset+0x4>

0800cacc <__errno>:
 800cacc:	4b01      	ldr	r3, [pc, #4]	; (800cad4 <__errno+0x8>)
 800cace:	6818      	ldr	r0, [r3, #0]
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	20000064 	.word	0x20000064

0800cad8 <__libc_init_array>:
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	4d0d      	ldr	r5, [pc, #52]	; (800cb10 <__libc_init_array+0x38>)
 800cadc:	4c0d      	ldr	r4, [pc, #52]	; (800cb14 <__libc_init_array+0x3c>)
 800cade:	1b64      	subs	r4, r4, r5
 800cae0:	10a4      	asrs	r4, r4, #2
 800cae2:	2600      	movs	r6, #0
 800cae4:	42a6      	cmp	r6, r4
 800cae6:	d109      	bne.n	800cafc <__libc_init_array+0x24>
 800cae8:	4d0b      	ldr	r5, [pc, #44]	; (800cb18 <__libc_init_array+0x40>)
 800caea:	4c0c      	ldr	r4, [pc, #48]	; (800cb1c <__libc_init_array+0x44>)
 800caec:	f000 fc68 	bl	800d3c0 <_init>
 800caf0:	1b64      	subs	r4, r4, r5
 800caf2:	10a4      	asrs	r4, r4, #2
 800caf4:	2600      	movs	r6, #0
 800caf6:	42a6      	cmp	r6, r4
 800caf8:	d105      	bne.n	800cb06 <__libc_init_array+0x2e>
 800cafa:	bd70      	pop	{r4, r5, r6, pc}
 800cafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb00:	4798      	blx	r3
 800cb02:	3601      	adds	r6, #1
 800cb04:	e7ee      	b.n	800cae4 <__libc_init_array+0xc>
 800cb06:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb0a:	4798      	blx	r3
 800cb0c:	3601      	adds	r6, #1
 800cb0e:	e7f2      	b.n	800caf6 <__libc_init_array+0x1e>
 800cb10:	0800d4a0 	.word	0x0800d4a0
 800cb14:	0800d4a0 	.word	0x0800d4a0
 800cb18:	0800d4a0 	.word	0x0800d4a0
 800cb1c:	0800d4a4 	.word	0x0800d4a4

0800cb20 <__retarget_lock_acquire_recursive>:
 800cb20:	4770      	bx	lr

0800cb22 <__retarget_lock_release_recursive>:
 800cb22:	4770      	bx	lr

0800cb24 <_free_r>:
 800cb24:	b538      	push	{r3, r4, r5, lr}
 800cb26:	4605      	mov	r5, r0
 800cb28:	2900      	cmp	r1, #0
 800cb2a:	d041      	beq.n	800cbb0 <_free_r+0x8c>
 800cb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb30:	1f0c      	subs	r4, r1, #4
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bfb8      	it	lt
 800cb36:	18e4      	addlt	r4, r4, r3
 800cb38:	f000 f8de 	bl	800ccf8 <__malloc_lock>
 800cb3c:	4a1d      	ldr	r2, [pc, #116]	; (800cbb4 <_free_r+0x90>)
 800cb3e:	6813      	ldr	r3, [r2, #0]
 800cb40:	b933      	cbnz	r3, 800cb50 <_free_r+0x2c>
 800cb42:	6063      	str	r3, [r4, #4]
 800cb44:	6014      	str	r4, [r2, #0]
 800cb46:	4628      	mov	r0, r5
 800cb48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb4c:	f000 b8da 	b.w	800cd04 <__malloc_unlock>
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	d908      	bls.n	800cb66 <_free_r+0x42>
 800cb54:	6820      	ldr	r0, [r4, #0]
 800cb56:	1821      	adds	r1, r4, r0
 800cb58:	428b      	cmp	r3, r1
 800cb5a:	bf01      	itttt	eq
 800cb5c:	6819      	ldreq	r1, [r3, #0]
 800cb5e:	685b      	ldreq	r3, [r3, #4]
 800cb60:	1809      	addeq	r1, r1, r0
 800cb62:	6021      	streq	r1, [r4, #0]
 800cb64:	e7ed      	b.n	800cb42 <_free_r+0x1e>
 800cb66:	461a      	mov	r2, r3
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	b10b      	cbz	r3, 800cb70 <_free_r+0x4c>
 800cb6c:	42a3      	cmp	r3, r4
 800cb6e:	d9fa      	bls.n	800cb66 <_free_r+0x42>
 800cb70:	6811      	ldr	r1, [r2, #0]
 800cb72:	1850      	adds	r0, r2, r1
 800cb74:	42a0      	cmp	r0, r4
 800cb76:	d10b      	bne.n	800cb90 <_free_r+0x6c>
 800cb78:	6820      	ldr	r0, [r4, #0]
 800cb7a:	4401      	add	r1, r0
 800cb7c:	1850      	adds	r0, r2, r1
 800cb7e:	4283      	cmp	r3, r0
 800cb80:	6011      	str	r1, [r2, #0]
 800cb82:	d1e0      	bne.n	800cb46 <_free_r+0x22>
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	6053      	str	r3, [r2, #4]
 800cb8a:	4408      	add	r0, r1
 800cb8c:	6010      	str	r0, [r2, #0]
 800cb8e:	e7da      	b.n	800cb46 <_free_r+0x22>
 800cb90:	d902      	bls.n	800cb98 <_free_r+0x74>
 800cb92:	230c      	movs	r3, #12
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	e7d6      	b.n	800cb46 <_free_r+0x22>
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	1821      	adds	r1, r4, r0
 800cb9c:	428b      	cmp	r3, r1
 800cb9e:	bf04      	itt	eq
 800cba0:	6819      	ldreq	r1, [r3, #0]
 800cba2:	685b      	ldreq	r3, [r3, #4]
 800cba4:	6063      	str	r3, [r4, #4]
 800cba6:	bf04      	itt	eq
 800cba8:	1809      	addeq	r1, r1, r0
 800cbaa:	6021      	streq	r1, [r4, #0]
 800cbac:	6054      	str	r4, [r2, #4]
 800cbae:	e7ca      	b.n	800cb46 <_free_r+0x22>
 800cbb0:	bd38      	pop	{r3, r4, r5, pc}
 800cbb2:	bf00      	nop
 800cbb4:	200017e4 	.word	0x200017e4

0800cbb8 <sbrk_aligned>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	4e0e      	ldr	r6, [pc, #56]	; (800cbf4 <sbrk_aligned+0x3c>)
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	6831      	ldr	r1, [r6, #0]
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	b911      	cbnz	r1, 800cbca <sbrk_aligned+0x12>
 800cbc4:	f000 fba6 	bl	800d314 <_sbrk_r>
 800cbc8:	6030      	str	r0, [r6, #0]
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4628      	mov	r0, r5
 800cbce:	f000 fba1 	bl	800d314 <_sbrk_r>
 800cbd2:	1c43      	adds	r3, r0, #1
 800cbd4:	d00a      	beq.n	800cbec <sbrk_aligned+0x34>
 800cbd6:	1cc4      	adds	r4, r0, #3
 800cbd8:	f024 0403 	bic.w	r4, r4, #3
 800cbdc:	42a0      	cmp	r0, r4
 800cbde:	d007      	beq.n	800cbf0 <sbrk_aligned+0x38>
 800cbe0:	1a21      	subs	r1, r4, r0
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f000 fb96 	bl	800d314 <_sbrk_r>
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d101      	bne.n	800cbf0 <sbrk_aligned+0x38>
 800cbec:	f04f 34ff 	mov.w	r4, #4294967295
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	200017e8 	.word	0x200017e8

0800cbf8 <_malloc_r>:
 800cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbfc:	1ccd      	adds	r5, r1, #3
 800cbfe:	f025 0503 	bic.w	r5, r5, #3
 800cc02:	3508      	adds	r5, #8
 800cc04:	2d0c      	cmp	r5, #12
 800cc06:	bf38      	it	cc
 800cc08:	250c      	movcc	r5, #12
 800cc0a:	2d00      	cmp	r5, #0
 800cc0c:	4607      	mov	r7, r0
 800cc0e:	db01      	blt.n	800cc14 <_malloc_r+0x1c>
 800cc10:	42a9      	cmp	r1, r5
 800cc12:	d905      	bls.n	800cc20 <_malloc_r+0x28>
 800cc14:	230c      	movs	r3, #12
 800cc16:	603b      	str	r3, [r7, #0]
 800cc18:	2600      	movs	r6, #0
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ccf4 <_malloc_r+0xfc>
 800cc24:	f000 f868 	bl	800ccf8 <__malloc_lock>
 800cc28:	f8d8 3000 	ldr.w	r3, [r8]
 800cc2c:	461c      	mov	r4, r3
 800cc2e:	bb5c      	cbnz	r4, 800cc88 <_malloc_r+0x90>
 800cc30:	4629      	mov	r1, r5
 800cc32:	4638      	mov	r0, r7
 800cc34:	f7ff ffc0 	bl	800cbb8 <sbrk_aligned>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	d155      	bne.n	800ccea <_malloc_r+0xf2>
 800cc3e:	f8d8 4000 	ldr.w	r4, [r8]
 800cc42:	4626      	mov	r6, r4
 800cc44:	2e00      	cmp	r6, #0
 800cc46:	d145      	bne.n	800ccd4 <_malloc_r+0xdc>
 800cc48:	2c00      	cmp	r4, #0
 800cc4a:	d048      	beq.n	800ccde <_malloc_r+0xe6>
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	4631      	mov	r1, r6
 800cc50:	4638      	mov	r0, r7
 800cc52:	eb04 0903 	add.w	r9, r4, r3
 800cc56:	f000 fb5d 	bl	800d314 <_sbrk_r>
 800cc5a:	4581      	cmp	r9, r0
 800cc5c:	d13f      	bne.n	800ccde <_malloc_r+0xe6>
 800cc5e:	6821      	ldr	r1, [r4, #0]
 800cc60:	1a6d      	subs	r5, r5, r1
 800cc62:	4629      	mov	r1, r5
 800cc64:	4638      	mov	r0, r7
 800cc66:	f7ff ffa7 	bl	800cbb8 <sbrk_aligned>
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	d037      	beq.n	800ccde <_malloc_r+0xe6>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	442b      	add	r3, r5
 800cc72:	6023      	str	r3, [r4, #0]
 800cc74:	f8d8 3000 	ldr.w	r3, [r8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d038      	beq.n	800ccee <_malloc_r+0xf6>
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	42a2      	cmp	r2, r4
 800cc80:	d12b      	bne.n	800ccda <_malloc_r+0xe2>
 800cc82:	2200      	movs	r2, #0
 800cc84:	605a      	str	r2, [r3, #4]
 800cc86:	e00f      	b.n	800cca8 <_malloc_r+0xb0>
 800cc88:	6822      	ldr	r2, [r4, #0]
 800cc8a:	1b52      	subs	r2, r2, r5
 800cc8c:	d41f      	bmi.n	800ccce <_malloc_r+0xd6>
 800cc8e:	2a0b      	cmp	r2, #11
 800cc90:	d917      	bls.n	800ccc2 <_malloc_r+0xca>
 800cc92:	1961      	adds	r1, r4, r5
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	6025      	str	r5, [r4, #0]
 800cc98:	bf18      	it	ne
 800cc9a:	6059      	strne	r1, [r3, #4]
 800cc9c:	6863      	ldr	r3, [r4, #4]
 800cc9e:	bf08      	it	eq
 800cca0:	f8c8 1000 	streq.w	r1, [r8]
 800cca4:	5162      	str	r2, [r4, r5]
 800cca6:	604b      	str	r3, [r1, #4]
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f104 060b 	add.w	r6, r4, #11
 800ccae:	f000 f829 	bl	800cd04 <__malloc_unlock>
 800ccb2:	f026 0607 	bic.w	r6, r6, #7
 800ccb6:	1d23      	adds	r3, r4, #4
 800ccb8:	1af2      	subs	r2, r6, r3
 800ccba:	d0ae      	beq.n	800cc1a <_malloc_r+0x22>
 800ccbc:	1b9b      	subs	r3, r3, r6
 800ccbe:	50a3      	str	r3, [r4, r2]
 800ccc0:	e7ab      	b.n	800cc1a <_malloc_r+0x22>
 800ccc2:	42a3      	cmp	r3, r4
 800ccc4:	6862      	ldr	r2, [r4, #4]
 800ccc6:	d1dd      	bne.n	800cc84 <_malloc_r+0x8c>
 800ccc8:	f8c8 2000 	str.w	r2, [r8]
 800cccc:	e7ec      	b.n	800cca8 <_malloc_r+0xb0>
 800ccce:	4623      	mov	r3, r4
 800ccd0:	6864      	ldr	r4, [r4, #4]
 800ccd2:	e7ac      	b.n	800cc2e <_malloc_r+0x36>
 800ccd4:	4634      	mov	r4, r6
 800ccd6:	6876      	ldr	r6, [r6, #4]
 800ccd8:	e7b4      	b.n	800cc44 <_malloc_r+0x4c>
 800ccda:	4613      	mov	r3, r2
 800ccdc:	e7cc      	b.n	800cc78 <_malloc_r+0x80>
 800ccde:	230c      	movs	r3, #12
 800cce0:	603b      	str	r3, [r7, #0]
 800cce2:	4638      	mov	r0, r7
 800cce4:	f000 f80e 	bl	800cd04 <__malloc_unlock>
 800cce8:	e797      	b.n	800cc1a <_malloc_r+0x22>
 800ccea:	6025      	str	r5, [r4, #0]
 800ccec:	e7dc      	b.n	800cca8 <_malloc_r+0xb0>
 800ccee:	605b      	str	r3, [r3, #4]
 800ccf0:	deff      	udf	#255	; 0xff
 800ccf2:	bf00      	nop
 800ccf4:	200017e4 	.word	0x200017e4

0800ccf8 <__malloc_lock>:
 800ccf8:	4801      	ldr	r0, [pc, #4]	; (800cd00 <__malloc_lock+0x8>)
 800ccfa:	f7ff bf11 	b.w	800cb20 <__retarget_lock_acquire_recursive>
 800ccfe:	bf00      	nop
 800cd00:	200017e0 	.word	0x200017e0

0800cd04 <__malloc_unlock>:
 800cd04:	4801      	ldr	r0, [pc, #4]	; (800cd0c <__malloc_unlock+0x8>)
 800cd06:	f7ff bf0c 	b.w	800cb22 <__retarget_lock_release_recursive>
 800cd0a:	bf00      	nop
 800cd0c:	200017e0 	.word	0x200017e0

0800cd10 <__ssputs_r>:
 800cd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd14:	688e      	ldr	r6, [r1, #8]
 800cd16:	461f      	mov	r7, r3
 800cd18:	42be      	cmp	r6, r7
 800cd1a:	680b      	ldr	r3, [r1, #0]
 800cd1c:	4682      	mov	sl, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	4690      	mov	r8, r2
 800cd22:	d82c      	bhi.n	800cd7e <__ssputs_r+0x6e>
 800cd24:	898a      	ldrh	r2, [r1, #12]
 800cd26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd2a:	d026      	beq.n	800cd7a <__ssputs_r+0x6a>
 800cd2c:	6965      	ldr	r5, [r4, #20]
 800cd2e:	6909      	ldr	r1, [r1, #16]
 800cd30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd34:	eba3 0901 	sub.w	r9, r3, r1
 800cd38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd3c:	1c7b      	adds	r3, r7, #1
 800cd3e:	444b      	add	r3, r9
 800cd40:	106d      	asrs	r5, r5, #1
 800cd42:	429d      	cmp	r5, r3
 800cd44:	bf38      	it	cc
 800cd46:	461d      	movcc	r5, r3
 800cd48:	0553      	lsls	r3, r2, #21
 800cd4a:	d527      	bpl.n	800cd9c <__ssputs_r+0x8c>
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	f7ff ff53 	bl	800cbf8 <_malloc_r>
 800cd52:	4606      	mov	r6, r0
 800cd54:	b360      	cbz	r0, 800cdb0 <__ssputs_r+0xa0>
 800cd56:	6921      	ldr	r1, [r4, #16]
 800cd58:	464a      	mov	r2, r9
 800cd5a:	f000 faeb 	bl	800d334 <memcpy>
 800cd5e:	89a3      	ldrh	r3, [r4, #12]
 800cd60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	6126      	str	r6, [r4, #16]
 800cd6c:	6165      	str	r5, [r4, #20]
 800cd6e:	444e      	add	r6, r9
 800cd70:	eba5 0509 	sub.w	r5, r5, r9
 800cd74:	6026      	str	r6, [r4, #0]
 800cd76:	60a5      	str	r5, [r4, #8]
 800cd78:	463e      	mov	r6, r7
 800cd7a:	42be      	cmp	r6, r7
 800cd7c:	d900      	bls.n	800cd80 <__ssputs_r+0x70>
 800cd7e:	463e      	mov	r6, r7
 800cd80:	6820      	ldr	r0, [r4, #0]
 800cd82:	4632      	mov	r2, r6
 800cd84:	4641      	mov	r1, r8
 800cd86:	f000 faab 	bl	800d2e0 <memmove>
 800cd8a:	68a3      	ldr	r3, [r4, #8]
 800cd8c:	1b9b      	subs	r3, r3, r6
 800cd8e:	60a3      	str	r3, [r4, #8]
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	4433      	add	r3, r6
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	2000      	movs	r0, #0
 800cd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9c:	462a      	mov	r2, r5
 800cd9e:	f000 fad7 	bl	800d350 <_realloc_r>
 800cda2:	4606      	mov	r6, r0
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d1e0      	bne.n	800cd6a <__ssputs_r+0x5a>
 800cda8:	6921      	ldr	r1, [r4, #16]
 800cdaa:	4650      	mov	r0, sl
 800cdac:	f7ff feba 	bl	800cb24 <_free_r>
 800cdb0:	230c      	movs	r3, #12
 800cdb2:	f8ca 3000 	str.w	r3, [sl]
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdbc:	81a3      	strh	r3, [r4, #12]
 800cdbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc2:	e7e9      	b.n	800cd98 <__ssputs_r+0x88>

0800cdc4 <_svfiprintf_r>:
 800cdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc8:	4698      	mov	r8, r3
 800cdca:	898b      	ldrh	r3, [r1, #12]
 800cdcc:	061b      	lsls	r3, r3, #24
 800cdce:	b09d      	sub	sp, #116	; 0x74
 800cdd0:	4607      	mov	r7, r0
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	4614      	mov	r4, r2
 800cdd6:	d50e      	bpl.n	800cdf6 <_svfiprintf_r+0x32>
 800cdd8:	690b      	ldr	r3, [r1, #16]
 800cdda:	b963      	cbnz	r3, 800cdf6 <_svfiprintf_r+0x32>
 800cddc:	2140      	movs	r1, #64	; 0x40
 800cdde:	f7ff ff0b 	bl	800cbf8 <_malloc_r>
 800cde2:	6028      	str	r0, [r5, #0]
 800cde4:	6128      	str	r0, [r5, #16]
 800cde6:	b920      	cbnz	r0, 800cdf2 <_svfiprintf_r+0x2e>
 800cde8:	230c      	movs	r3, #12
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	e0d0      	b.n	800cf94 <_svfiprintf_r+0x1d0>
 800cdf2:	2340      	movs	r3, #64	; 0x40
 800cdf4:	616b      	str	r3, [r5, #20]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfa:	2320      	movs	r3, #32
 800cdfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce04:	2330      	movs	r3, #48	; 0x30
 800ce06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cfac <_svfiprintf_r+0x1e8>
 800ce0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce0e:	f04f 0901 	mov.w	r9, #1
 800ce12:	4623      	mov	r3, r4
 800ce14:	469a      	mov	sl, r3
 800ce16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce1a:	b10a      	cbz	r2, 800ce20 <_svfiprintf_r+0x5c>
 800ce1c:	2a25      	cmp	r2, #37	; 0x25
 800ce1e:	d1f9      	bne.n	800ce14 <_svfiprintf_r+0x50>
 800ce20:	ebba 0b04 	subs.w	fp, sl, r4
 800ce24:	d00b      	beq.n	800ce3e <_svfiprintf_r+0x7a>
 800ce26:	465b      	mov	r3, fp
 800ce28:	4622      	mov	r2, r4
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	4638      	mov	r0, r7
 800ce2e:	f7ff ff6f 	bl	800cd10 <__ssputs_r>
 800ce32:	3001      	adds	r0, #1
 800ce34:	f000 80a9 	beq.w	800cf8a <_svfiprintf_r+0x1c6>
 800ce38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce3a:	445a      	add	r2, fp
 800ce3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f000 80a1 	beq.w	800cf8a <_svfiprintf_r+0x1c6>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce52:	f10a 0a01 	add.w	sl, sl, #1
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	9307      	str	r3, [sp, #28]
 800ce5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ce60:	4654      	mov	r4, sl
 800ce62:	2205      	movs	r2, #5
 800ce64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce68:	4850      	ldr	r0, [pc, #320]	; (800cfac <_svfiprintf_r+0x1e8>)
 800ce6a:	f7f3 f9c1 	bl	80001f0 <memchr>
 800ce6e:	9a04      	ldr	r2, [sp, #16]
 800ce70:	b9d8      	cbnz	r0, 800ceaa <_svfiprintf_r+0xe6>
 800ce72:	06d0      	lsls	r0, r2, #27
 800ce74:	bf44      	itt	mi
 800ce76:	2320      	movmi	r3, #32
 800ce78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce7c:	0711      	lsls	r1, r2, #28
 800ce7e:	bf44      	itt	mi
 800ce80:	232b      	movmi	r3, #43	; 0x2b
 800ce82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce86:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce8c:	d015      	beq.n	800ceba <_svfiprintf_r+0xf6>
 800ce8e:	9a07      	ldr	r2, [sp, #28]
 800ce90:	4654      	mov	r4, sl
 800ce92:	2000      	movs	r0, #0
 800ce94:	f04f 0c0a 	mov.w	ip, #10
 800ce98:	4621      	mov	r1, r4
 800ce9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce9e:	3b30      	subs	r3, #48	; 0x30
 800cea0:	2b09      	cmp	r3, #9
 800cea2:	d94d      	bls.n	800cf40 <_svfiprintf_r+0x17c>
 800cea4:	b1b0      	cbz	r0, 800ced4 <_svfiprintf_r+0x110>
 800cea6:	9207      	str	r2, [sp, #28]
 800cea8:	e014      	b.n	800ced4 <_svfiprintf_r+0x110>
 800ceaa:	eba0 0308 	sub.w	r3, r0, r8
 800ceae:	fa09 f303 	lsl.w	r3, r9, r3
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	46a2      	mov	sl, r4
 800ceb8:	e7d2      	b.n	800ce60 <_svfiprintf_r+0x9c>
 800ceba:	9b03      	ldr	r3, [sp, #12]
 800cebc:	1d19      	adds	r1, r3, #4
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	9103      	str	r1, [sp, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	bfbb      	ittet	lt
 800cec6:	425b      	neglt	r3, r3
 800cec8:	f042 0202 	orrlt.w	r2, r2, #2
 800cecc:	9307      	strge	r3, [sp, #28]
 800cece:	9307      	strlt	r3, [sp, #28]
 800ced0:	bfb8      	it	lt
 800ced2:	9204      	strlt	r2, [sp, #16]
 800ced4:	7823      	ldrb	r3, [r4, #0]
 800ced6:	2b2e      	cmp	r3, #46	; 0x2e
 800ced8:	d10c      	bne.n	800cef4 <_svfiprintf_r+0x130>
 800ceda:	7863      	ldrb	r3, [r4, #1]
 800cedc:	2b2a      	cmp	r3, #42	; 0x2a
 800cede:	d134      	bne.n	800cf4a <_svfiprintf_r+0x186>
 800cee0:	9b03      	ldr	r3, [sp, #12]
 800cee2:	1d1a      	adds	r2, r3, #4
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	9203      	str	r2, [sp, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bfb8      	it	lt
 800ceec:	f04f 33ff 	movlt.w	r3, #4294967295
 800cef0:	3402      	adds	r4, #2
 800cef2:	9305      	str	r3, [sp, #20]
 800cef4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cfb0 <_svfiprintf_r+0x1ec>
 800cef8:	7821      	ldrb	r1, [r4, #0]
 800cefa:	2203      	movs	r2, #3
 800cefc:	4650      	mov	r0, sl
 800cefe:	f7f3 f977 	bl	80001f0 <memchr>
 800cf02:	b138      	cbz	r0, 800cf14 <_svfiprintf_r+0x150>
 800cf04:	9b04      	ldr	r3, [sp, #16]
 800cf06:	eba0 000a 	sub.w	r0, r0, sl
 800cf0a:	2240      	movs	r2, #64	; 0x40
 800cf0c:	4082      	lsls	r2, r0
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	3401      	adds	r4, #1
 800cf12:	9304      	str	r3, [sp, #16]
 800cf14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf18:	4826      	ldr	r0, [pc, #152]	; (800cfb4 <_svfiprintf_r+0x1f0>)
 800cf1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf1e:	2206      	movs	r2, #6
 800cf20:	f7f3 f966 	bl	80001f0 <memchr>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d038      	beq.n	800cf9a <_svfiprintf_r+0x1d6>
 800cf28:	4b23      	ldr	r3, [pc, #140]	; (800cfb8 <_svfiprintf_r+0x1f4>)
 800cf2a:	bb1b      	cbnz	r3, 800cf74 <_svfiprintf_r+0x1b0>
 800cf2c:	9b03      	ldr	r3, [sp, #12]
 800cf2e:	3307      	adds	r3, #7
 800cf30:	f023 0307 	bic.w	r3, r3, #7
 800cf34:	3308      	adds	r3, #8
 800cf36:	9303      	str	r3, [sp, #12]
 800cf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf3a:	4433      	add	r3, r6
 800cf3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf3e:	e768      	b.n	800ce12 <_svfiprintf_r+0x4e>
 800cf40:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf44:	460c      	mov	r4, r1
 800cf46:	2001      	movs	r0, #1
 800cf48:	e7a6      	b.n	800ce98 <_svfiprintf_r+0xd4>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	3401      	adds	r4, #1
 800cf4e:	9305      	str	r3, [sp, #20]
 800cf50:	4619      	mov	r1, r3
 800cf52:	f04f 0c0a 	mov.w	ip, #10
 800cf56:	4620      	mov	r0, r4
 800cf58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf5c:	3a30      	subs	r2, #48	; 0x30
 800cf5e:	2a09      	cmp	r2, #9
 800cf60:	d903      	bls.n	800cf6a <_svfiprintf_r+0x1a6>
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d0c6      	beq.n	800cef4 <_svfiprintf_r+0x130>
 800cf66:	9105      	str	r1, [sp, #20]
 800cf68:	e7c4      	b.n	800cef4 <_svfiprintf_r+0x130>
 800cf6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf6e:	4604      	mov	r4, r0
 800cf70:	2301      	movs	r3, #1
 800cf72:	e7f0      	b.n	800cf56 <_svfiprintf_r+0x192>
 800cf74:	ab03      	add	r3, sp, #12
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	462a      	mov	r2, r5
 800cf7a:	4b10      	ldr	r3, [pc, #64]	; (800cfbc <_svfiprintf_r+0x1f8>)
 800cf7c:	a904      	add	r1, sp, #16
 800cf7e:	4638      	mov	r0, r7
 800cf80:	f3af 8000 	nop.w
 800cf84:	1c42      	adds	r2, r0, #1
 800cf86:	4606      	mov	r6, r0
 800cf88:	d1d6      	bne.n	800cf38 <_svfiprintf_r+0x174>
 800cf8a:	89ab      	ldrh	r3, [r5, #12]
 800cf8c:	065b      	lsls	r3, r3, #25
 800cf8e:	f53f af2d 	bmi.w	800cdec <_svfiprintf_r+0x28>
 800cf92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf94:	b01d      	add	sp, #116	; 0x74
 800cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9a:	ab03      	add	r3, sp, #12
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	462a      	mov	r2, r5
 800cfa0:	4b06      	ldr	r3, [pc, #24]	; (800cfbc <_svfiprintf_r+0x1f8>)
 800cfa2:	a904      	add	r1, sp, #16
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f000 f879 	bl	800d09c <_printf_i>
 800cfaa:	e7eb      	b.n	800cf84 <_svfiprintf_r+0x1c0>
 800cfac:	0800d46c 	.word	0x0800d46c
 800cfb0:	0800d472 	.word	0x0800d472
 800cfb4:	0800d476 	.word	0x0800d476
 800cfb8:	00000000 	.word	0x00000000
 800cfbc:	0800cd11 	.word	0x0800cd11

0800cfc0 <_printf_common>:
 800cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	4616      	mov	r6, r2
 800cfc6:	4699      	mov	r9, r3
 800cfc8:	688a      	ldr	r2, [r1, #8]
 800cfca:	690b      	ldr	r3, [r1, #16]
 800cfcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	bfb8      	it	lt
 800cfd4:	4613      	movlt	r3, r2
 800cfd6:	6033      	str	r3, [r6, #0]
 800cfd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfdc:	4607      	mov	r7, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	b10a      	cbz	r2, 800cfe6 <_printf_common+0x26>
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	6033      	str	r3, [r6, #0]
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	0699      	lsls	r1, r3, #26
 800cfea:	bf42      	ittt	mi
 800cfec:	6833      	ldrmi	r3, [r6, #0]
 800cfee:	3302      	addmi	r3, #2
 800cff0:	6033      	strmi	r3, [r6, #0]
 800cff2:	6825      	ldr	r5, [r4, #0]
 800cff4:	f015 0506 	ands.w	r5, r5, #6
 800cff8:	d106      	bne.n	800d008 <_printf_common+0x48>
 800cffa:	f104 0a19 	add.w	sl, r4, #25
 800cffe:	68e3      	ldr	r3, [r4, #12]
 800d000:	6832      	ldr	r2, [r6, #0]
 800d002:	1a9b      	subs	r3, r3, r2
 800d004:	42ab      	cmp	r3, r5
 800d006:	dc26      	bgt.n	800d056 <_printf_common+0x96>
 800d008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d00c:	1e13      	subs	r3, r2, #0
 800d00e:	6822      	ldr	r2, [r4, #0]
 800d010:	bf18      	it	ne
 800d012:	2301      	movne	r3, #1
 800d014:	0692      	lsls	r2, r2, #26
 800d016:	d42b      	bmi.n	800d070 <_printf_common+0xb0>
 800d018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d01c:	4649      	mov	r1, r9
 800d01e:	4638      	mov	r0, r7
 800d020:	47c0      	blx	r8
 800d022:	3001      	adds	r0, #1
 800d024:	d01e      	beq.n	800d064 <_printf_common+0xa4>
 800d026:	6823      	ldr	r3, [r4, #0]
 800d028:	6922      	ldr	r2, [r4, #16]
 800d02a:	f003 0306 	and.w	r3, r3, #6
 800d02e:	2b04      	cmp	r3, #4
 800d030:	bf02      	ittt	eq
 800d032:	68e5      	ldreq	r5, [r4, #12]
 800d034:	6833      	ldreq	r3, [r6, #0]
 800d036:	1aed      	subeq	r5, r5, r3
 800d038:	68a3      	ldr	r3, [r4, #8]
 800d03a:	bf0c      	ite	eq
 800d03c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d040:	2500      	movne	r5, #0
 800d042:	4293      	cmp	r3, r2
 800d044:	bfc4      	itt	gt
 800d046:	1a9b      	subgt	r3, r3, r2
 800d048:	18ed      	addgt	r5, r5, r3
 800d04a:	2600      	movs	r6, #0
 800d04c:	341a      	adds	r4, #26
 800d04e:	42b5      	cmp	r5, r6
 800d050:	d11a      	bne.n	800d088 <_printf_common+0xc8>
 800d052:	2000      	movs	r0, #0
 800d054:	e008      	b.n	800d068 <_printf_common+0xa8>
 800d056:	2301      	movs	r3, #1
 800d058:	4652      	mov	r2, sl
 800d05a:	4649      	mov	r1, r9
 800d05c:	4638      	mov	r0, r7
 800d05e:	47c0      	blx	r8
 800d060:	3001      	adds	r0, #1
 800d062:	d103      	bne.n	800d06c <_printf_common+0xac>
 800d064:	f04f 30ff 	mov.w	r0, #4294967295
 800d068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06c:	3501      	adds	r5, #1
 800d06e:	e7c6      	b.n	800cffe <_printf_common+0x3e>
 800d070:	18e1      	adds	r1, r4, r3
 800d072:	1c5a      	adds	r2, r3, #1
 800d074:	2030      	movs	r0, #48	; 0x30
 800d076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d07a:	4422      	add	r2, r4
 800d07c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d084:	3302      	adds	r3, #2
 800d086:	e7c7      	b.n	800d018 <_printf_common+0x58>
 800d088:	2301      	movs	r3, #1
 800d08a:	4622      	mov	r2, r4
 800d08c:	4649      	mov	r1, r9
 800d08e:	4638      	mov	r0, r7
 800d090:	47c0      	blx	r8
 800d092:	3001      	adds	r0, #1
 800d094:	d0e6      	beq.n	800d064 <_printf_common+0xa4>
 800d096:	3601      	adds	r6, #1
 800d098:	e7d9      	b.n	800d04e <_printf_common+0x8e>
	...

0800d09c <_printf_i>:
 800d09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a0:	7e0f      	ldrb	r7, [r1, #24]
 800d0a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0a4:	2f78      	cmp	r7, #120	; 0x78
 800d0a6:	4691      	mov	r9, r2
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	469a      	mov	sl, r3
 800d0ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0b2:	d807      	bhi.n	800d0c4 <_printf_i+0x28>
 800d0b4:	2f62      	cmp	r7, #98	; 0x62
 800d0b6:	d80a      	bhi.n	800d0ce <_printf_i+0x32>
 800d0b8:	2f00      	cmp	r7, #0
 800d0ba:	f000 80d4 	beq.w	800d266 <_printf_i+0x1ca>
 800d0be:	2f58      	cmp	r7, #88	; 0x58
 800d0c0:	f000 80c0 	beq.w	800d244 <_printf_i+0x1a8>
 800d0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0cc:	e03a      	b.n	800d144 <_printf_i+0xa8>
 800d0ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0d2:	2b15      	cmp	r3, #21
 800d0d4:	d8f6      	bhi.n	800d0c4 <_printf_i+0x28>
 800d0d6:	a101      	add	r1, pc, #4	; (adr r1, 800d0dc <_printf_i+0x40>)
 800d0d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0dc:	0800d135 	.word	0x0800d135
 800d0e0:	0800d149 	.word	0x0800d149
 800d0e4:	0800d0c5 	.word	0x0800d0c5
 800d0e8:	0800d0c5 	.word	0x0800d0c5
 800d0ec:	0800d0c5 	.word	0x0800d0c5
 800d0f0:	0800d0c5 	.word	0x0800d0c5
 800d0f4:	0800d149 	.word	0x0800d149
 800d0f8:	0800d0c5 	.word	0x0800d0c5
 800d0fc:	0800d0c5 	.word	0x0800d0c5
 800d100:	0800d0c5 	.word	0x0800d0c5
 800d104:	0800d0c5 	.word	0x0800d0c5
 800d108:	0800d24d 	.word	0x0800d24d
 800d10c:	0800d175 	.word	0x0800d175
 800d110:	0800d207 	.word	0x0800d207
 800d114:	0800d0c5 	.word	0x0800d0c5
 800d118:	0800d0c5 	.word	0x0800d0c5
 800d11c:	0800d26f 	.word	0x0800d26f
 800d120:	0800d0c5 	.word	0x0800d0c5
 800d124:	0800d175 	.word	0x0800d175
 800d128:	0800d0c5 	.word	0x0800d0c5
 800d12c:	0800d0c5 	.word	0x0800d0c5
 800d130:	0800d20f 	.word	0x0800d20f
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	1d1a      	adds	r2, r3, #4
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	602a      	str	r2, [r5, #0]
 800d13c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d144:	2301      	movs	r3, #1
 800d146:	e09f      	b.n	800d288 <_printf_i+0x1ec>
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	682b      	ldr	r3, [r5, #0]
 800d14c:	0607      	lsls	r7, r0, #24
 800d14e:	f103 0104 	add.w	r1, r3, #4
 800d152:	6029      	str	r1, [r5, #0]
 800d154:	d501      	bpl.n	800d15a <_printf_i+0xbe>
 800d156:	681e      	ldr	r6, [r3, #0]
 800d158:	e003      	b.n	800d162 <_printf_i+0xc6>
 800d15a:	0646      	lsls	r6, r0, #25
 800d15c:	d5fb      	bpl.n	800d156 <_printf_i+0xba>
 800d15e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d162:	2e00      	cmp	r6, #0
 800d164:	da03      	bge.n	800d16e <_printf_i+0xd2>
 800d166:	232d      	movs	r3, #45	; 0x2d
 800d168:	4276      	negs	r6, r6
 800d16a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d16e:	485a      	ldr	r0, [pc, #360]	; (800d2d8 <_printf_i+0x23c>)
 800d170:	230a      	movs	r3, #10
 800d172:	e012      	b.n	800d19a <_printf_i+0xfe>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	6820      	ldr	r0, [r4, #0]
 800d178:	1d19      	adds	r1, r3, #4
 800d17a:	6029      	str	r1, [r5, #0]
 800d17c:	0605      	lsls	r5, r0, #24
 800d17e:	d501      	bpl.n	800d184 <_printf_i+0xe8>
 800d180:	681e      	ldr	r6, [r3, #0]
 800d182:	e002      	b.n	800d18a <_printf_i+0xee>
 800d184:	0641      	lsls	r1, r0, #25
 800d186:	d5fb      	bpl.n	800d180 <_printf_i+0xe4>
 800d188:	881e      	ldrh	r6, [r3, #0]
 800d18a:	4853      	ldr	r0, [pc, #332]	; (800d2d8 <_printf_i+0x23c>)
 800d18c:	2f6f      	cmp	r7, #111	; 0x6f
 800d18e:	bf0c      	ite	eq
 800d190:	2308      	moveq	r3, #8
 800d192:	230a      	movne	r3, #10
 800d194:	2100      	movs	r1, #0
 800d196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d19a:	6865      	ldr	r5, [r4, #4]
 800d19c:	60a5      	str	r5, [r4, #8]
 800d19e:	2d00      	cmp	r5, #0
 800d1a0:	bfa2      	ittt	ge
 800d1a2:	6821      	ldrge	r1, [r4, #0]
 800d1a4:	f021 0104 	bicge.w	r1, r1, #4
 800d1a8:	6021      	strge	r1, [r4, #0]
 800d1aa:	b90e      	cbnz	r6, 800d1b0 <_printf_i+0x114>
 800d1ac:	2d00      	cmp	r5, #0
 800d1ae:	d04b      	beq.n	800d248 <_printf_i+0x1ac>
 800d1b0:	4615      	mov	r5, r2
 800d1b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d1ba:	5dc7      	ldrb	r7, [r0, r7]
 800d1bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1c0:	4637      	mov	r7, r6
 800d1c2:	42bb      	cmp	r3, r7
 800d1c4:	460e      	mov	r6, r1
 800d1c6:	d9f4      	bls.n	800d1b2 <_printf_i+0x116>
 800d1c8:	2b08      	cmp	r3, #8
 800d1ca:	d10b      	bne.n	800d1e4 <_printf_i+0x148>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	07de      	lsls	r6, r3, #31
 800d1d0:	d508      	bpl.n	800d1e4 <_printf_i+0x148>
 800d1d2:	6923      	ldr	r3, [r4, #16]
 800d1d4:	6861      	ldr	r1, [r4, #4]
 800d1d6:	4299      	cmp	r1, r3
 800d1d8:	bfde      	ittt	le
 800d1da:	2330      	movle	r3, #48	; 0x30
 800d1dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1e4:	1b52      	subs	r2, r2, r5
 800d1e6:	6122      	str	r2, [r4, #16]
 800d1e8:	f8cd a000 	str.w	sl, [sp]
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	aa03      	add	r2, sp, #12
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	f7ff fee4 	bl	800cfc0 <_printf_common>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d14a      	bne.n	800d292 <_printf_i+0x1f6>
 800d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d200:	b004      	add	sp, #16
 800d202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	f043 0320 	orr.w	r3, r3, #32
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	4833      	ldr	r0, [pc, #204]	; (800d2dc <_printf_i+0x240>)
 800d210:	2778      	movs	r7, #120	; 0x78
 800d212:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	6829      	ldr	r1, [r5, #0]
 800d21a:	061f      	lsls	r7, r3, #24
 800d21c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d220:	d402      	bmi.n	800d228 <_printf_i+0x18c>
 800d222:	065f      	lsls	r7, r3, #25
 800d224:	bf48      	it	mi
 800d226:	b2b6      	uxthmi	r6, r6
 800d228:	07df      	lsls	r7, r3, #31
 800d22a:	bf48      	it	mi
 800d22c:	f043 0320 	orrmi.w	r3, r3, #32
 800d230:	6029      	str	r1, [r5, #0]
 800d232:	bf48      	it	mi
 800d234:	6023      	strmi	r3, [r4, #0]
 800d236:	b91e      	cbnz	r6, 800d240 <_printf_i+0x1a4>
 800d238:	6823      	ldr	r3, [r4, #0]
 800d23a:	f023 0320 	bic.w	r3, r3, #32
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	2310      	movs	r3, #16
 800d242:	e7a7      	b.n	800d194 <_printf_i+0xf8>
 800d244:	4824      	ldr	r0, [pc, #144]	; (800d2d8 <_printf_i+0x23c>)
 800d246:	e7e4      	b.n	800d212 <_printf_i+0x176>
 800d248:	4615      	mov	r5, r2
 800d24a:	e7bd      	b.n	800d1c8 <_printf_i+0x12c>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	6826      	ldr	r6, [r4, #0]
 800d250:	6961      	ldr	r1, [r4, #20]
 800d252:	1d18      	adds	r0, r3, #4
 800d254:	6028      	str	r0, [r5, #0]
 800d256:	0635      	lsls	r5, r6, #24
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	d501      	bpl.n	800d260 <_printf_i+0x1c4>
 800d25c:	6019      	str	r1, [r3, #0]
 800d25e:	e002      	b.n	800d266 <_printf_i+0x1ca>
 800d260:	0670      	lsls	r0, r6, #25
 800d262:	d5fb      	bpl.n	800d25c <_printf_i+0x1c0>
 800d264:	8019      	strh	r1, [r3, #0]
 800d266:	2300      	movs	r3, #0
 800d268:	6123      	str	r3, [r4, #16]
 800d26a:	4615      	mov	r5, r2
 800d26c:	e7bc      	b.n	800d1e8 <_printf_i+0x14c>
 800d26e:	682b      	ldr	r3, [r5, #0]
 800d270:	1d1a      	adds	r2, r3, #4
 800d272:	602a      	str	r2, [r5, #0]
 800d274:	681d      	ldr	r5, [r3, #0]
 800d276:	6862      	ldr	r2, [r4, #4]
 800d278:	2100      	movs	r1, #0
 800d27a:	4628      	mov	r0, r5
 800d27c:	f7f2 ffb8 	bl	80001f0 <memchr>
 800d280:	b108      	cbz	r0, 800d286 <_printf_i+0x1ea>
 800d282:	1b40      	subs	r0, r0, r5
 800d284:	6060      	str	r0, [r4, #4]
 800d286:	6863      	ldr	r3, [r4, #4]
 800d288:	6123      	str	r3, [r4, #16]
 800d28a:	2300      	movs	r3, #0
 800d28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d290:	e7aa      	b.n	800d1e8 <_printf_i+0x14c>
 800d292:	6923      	ldr	r3, [r4, #16]
 800d294:	462a      	mov	r2, r5
 800d296:	4649      	mov	r1, r9
 800d298:	4640      	mov	r0, r8
 800d29a:	47d0      	blx	sl
 800d29c:	3001      	adds	r0, #1
 800d29e:	d0ad      	beq.n	800d1fc <_printf_i+0x160>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	079b      	lsls	r3, r3, #30
 800d2a4:	d413      	bmi.n	800d2ce <_printf_i+0x232>
 800d2a6:	68e0      	ldr	r0, [r4, #12]
 800d2a8:	9b03      	ldr	r3, [sp, #12]
 800d2aa:	4298      	cmp	r0, r3
 800d2ac:	bfb8      	it	lt
 800d2ae:	4618      	movlt	r0, r3
 800d2b0:	e7a6      	b.n	800d200 <_printf_i+0x164>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4632      	mov	r2, r6
 800d2b6:	4649      	mov	r1, r9
 800d2b8:	4640      	mov	r0, r8
 800d2ba:	47d0      	blx	sl
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d09d      	beq.n	800d1fc <_printf_i+0x160>
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	68e3      	ldr	r3, [r4, #12]
 800d2c4:	9903      	ldr	r1, [sp, #12]
 800d2c6:	1a5b      	subs	r3, r3, r1
 800d2c8:	42ab      	cmp	r3, r5
 800d2ca:	dcf2      	bgt.n	800d2b2 <_printf_i+0x216>
 800d2cc:	e7eb      	b.n	800d2a6 <_printf_i+0x20a>
 800d2ce:	2500      	movs	r5, #0
 800d2d0:	f104 0619 	add.w	r6, r4, #25
 800d2d4:	e7f5      	b.n	800d2c2 <_printf_i+0x226>
 800d2d6:	bf00      	nop
 800d2d8:	0800d47d 	.word	0x0800d47d
 800d2dc:	0800d48e 	.word	0x0800d48e

0800d2e0 <memmove>:
 800d2e0:	4288      	cmp	r0, r1
 800d2e2:	b510      	push	{r4, lr}
 800d2e4:	eb01 0402 	add.w	r4, r1, r2
 800d2e8:	d902      	bls.n	800d2f0 <memmove+0x10>
 800d2ea:	4284      	cmp	r4, r0
 800d2ec:	4623      	mov	r3, r4
 800d2ee:	d807      	bhi.n	800d300 <memmove+0x20>
 800d2f0:	1e43      	subs	r3, r0, #1
 800d2f2:	42a1      	cmp	r1, r4
 800d2f4:	d008      	beq.n	800d308 <memmove+0x28>
 800d2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2fe:	e7f8      	b.n	800d2f2 <memmove+0x12>
 800d300:	4402      	add	r2, r0
 800d302:	4601      	mov	r1, r0
 800d304:	428a      	cmp	r2, r1
 800d306:	d100      	bne.n	800d30a <memmove+0x2a>
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d30e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d312:	e7f7      	b.n	800d304 <memmove+0x24>

0800d314 <_sbrk_r>:
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	4d06      	ldr	r5, [pc, #24]	; (800d330 <_sbrk_r+0x1c>)
 800d318:	2300      	movs	r3, #0
 800d31a:	4604      	mov	r4, r0
 800d31c:	4608      	mov	r0, r1
 800d31e:	602b      	str	r3, [r5, #0]
 800d320:	f7fc ff82 	bl	800a228 <_sbrk>
 800d324:	1c43      	adds	r3, r0, #1
 800d326:	d102      	bne.n	800d32e <_sbrk_r+0x1a>
 800d328:	682b      	ldr	r3, [r5, #0]
 800d32a:	b103      	cbz	r3, 800d32e <_sbrk_r+0x1a>
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	bd38      	pop	{r3, r4, r5, pc}
 800d330:	200017dc 	.word	0x200017dc

0800d334 <memcpy>:
 800d334:	440a      	add	r2, r1
 800d336:	4291      	cmp	r1, r2
 800d338:	f100 33ff 	add.w	r3, r0, #4294967295
 800d33c:	d100      	bne.n	800d340 <memcpy+0xc>
 800d33e:	4770      	bx	lr
 800d340:	b510      	push	{r4, lr}
 800d342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d34a:	4291      	cmp	r1, r2
 800d34c:	d1f9      	bne.n	800d342 <memcpy+0xe>
 800d34e:	bd10      	pop	{r4, pc}

0800d350 <_realloc_r>:
 800d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d354:	4680      	mov	r8, r0
 800d356:	4614      	mov	r4, r2
 800d358:	460e      	mov	r6, r1
 800d35a:	b921      	cbnz	r1, 800d366 <_realloc_r+0x16>
 800d35c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d360:	4611      	mov	r1, r2
 800d362:	f7ff bc49 	b.w	800cbf8 <_malloc_r>
 800d366:	b92a      	cbnz	r2, 800d374 <_realloc_r+0x24>
 800d368:	f7ff fbdc 	bl	800cb24 <_free_r>
 800d36c:	4625      	mov	r5, r4
 800d36e:	4628      	mov	r0, r5
 800d370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d374:	f000 f81b 	bl	800d3ae <_malloc_usable_size_r>
 800d378:	4284      	cmp	r4, r0
 800d37a:	4607      	mov	r7, r0
 800d37c:	d802      	bhi.n	800d384 <_realloc_r+0x34>
 800d37e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d382:	d812      	bhi.n	800d3aa <_realloc_r+0x5a>
 800d384:	4621      	mov	r1, r4
 800d386:	4640      	mov	r0, r8
 800d388:	f7ff fc36 	bl	800cbf8 <_malloc_r>
 800d38c:	4605      	mov	r5, r0
 800d38e:	2800      	cmp	r0, #0
 800d390:	d0ed      	beq.n	800d36e <_realloc_r+0x1e>
 800d392:	42bc      	cmp	r4, r7
 800d394:	4622      	mov	r2, r4
 800d396:	4631      	mov	r1, r6
 800d398:	bf28      	it	cs
 800d39a:	463a      	movcs	r2, r7
 800d39c:	f7ff ffca 	bl	800d334 <memcpy>
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4640      	mov	r0, r8
 800d3a4:	f7ff fbbe 	bl	800cb24 <_free_r>
 800d3a8:	e7e1      	b.n	800d36e <_realloc_r+0x1e>
 800d3aa:	4635      	mov	r5, r6
 800d3ac:	e7df      	b.n	800d36e <_realloc_r+0x1e>

0800d3ae <_malloc_usable_size_r>:
 800d3ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3b2:	1f18      	subs	r0, r3, #4
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	bfbc      	itt	lt
 800d3b8:	580b      	ldrlt	r3, [r1, r0]
 800d3ba:	18c0      	addlt	r0, r0, r3
 800d3bc:	4770      	bx	lr
	...

0800d3c0 <_init>:
 800d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c2:	bf00      	nop
 800d3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c6:	bc08      	pop	{r3}
 800d3c8:	469e      	mov	lr, r3
 800d3ca:	4770      	bx	lr

0800d3cc <_fini>:
 800d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ce:	bf00      	nop
 800d3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3d2:	bc08      	pop	{r3}
 800d3d4:	469e      	mov	lr, r3
 800d3d6:	4770      	bx	lr
