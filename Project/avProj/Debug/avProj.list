
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bef8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800c098  0800c098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c120  0800c120  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800c120  0800c120  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c120  0800c120  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c120  0800c120  0001c120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001578  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200015f0  200015f0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d352  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fab  00000000  00000000  0003d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  000413a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001730  00000000  00000000  00042d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251f4  00000000  00000000  00044468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002af9c  00000000  00000000  0006965c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8ecf  00000000  00000000  000945f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016d4c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c2c  00000000  00000000  0016d518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c080 	.word	0x0800c080

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800c080 	.word	0x0800c080

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_frsub>:
 8000a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	e002      	b.n	8000a78 <__addsf3>
 8000a72:	bf00      	nop

08000a74 <__aeabi_fsub>:
 8000a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a78 <__addsf3>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	bf1f      	itttt	ne
 8000a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a80:	ea92 0f03 	teqne	r2, r3
 8000a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8c:	d06a      	beq.n	8000b64 <__addsf3+0xec>
 8000a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a96:	bfc1      	itttt	gt
 8000a98:	18d2      	addgt	r2, r2, r3
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	4048      	eorgt	r0, r1
 8000a9e:	4041      	eorgt	r1, r0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	bf88      	it	hi
 8000aa8:	4770      	bxhi	lr
 8000aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4249      	negne	r1, r1
 8000aca:	ea92 0f03 	teq	r2, r3
 8000ace:	d03f      	beq.n	8000b50 <__addsf3+0xd8>
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad8:	eb10 000c 	adds.w	r0, r0, ip
 8000adc:	f1c3 0320 	rsb	r3, r3, #32
 8000ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__addsf3+0x78>
 8000aea:	4249      	negs	r1, r1
 8000aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af4:	d313      	bcc.n	8000b1e <__addsf3+0xa6>
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d306      	bcc.n	8000b0a <__addsf3+0x92>
 8000afc:	0840      	lsrs	r0, r0, #1
 8000afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b02:	f102 0201 	add.w	r2, r2, #1
 8000b06:	2afe      	cmp	r2, #254	; 0xfe
 8000b08:	d251      	bcs.n	8000bae <__addsf3+0x136>
 8000b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b12:	bf08      	it	eq
 8000b14:	f020 0001 	biceq.w	r0, r0, #1
 8000b18:	ea40 0003 	orr.w	r0, r0, r3
 8000b1c:	4770      	bx	lr
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	eb40 0000 	adc.w	r0, r0, r0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	bf28      	it	cs
 8000b28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b2c:	d2ed      	bcs.n	8000b0a <__addsf3+0x92>
 8000b2e:	fab0 fc80 	clz	ip, r0
 8000b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b36:	ebb2 020c 	subs.w	r2, r2, ip
 8000b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3e:	bfaa      	itet	ge
 8000b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b44:	4252      	neglt	r2, r2
 8000b46:	4318      	orrge	r0, r3
 8000b48:	bfbc      	itt	lt
 8000b4a:	40d0      	lsrlt	r0, r2
 8000b4c:	4318      	orrlt	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	f092 0f00 	teq	r2, #0
 8000b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b58:	bf06      	itte	eq
 8000b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5e:	3201      	addeq	r2, #1
 8000b60:	3b01      	subne	r3, #1
 8000b62:	e7b5      	b.n	8000ad0 <__addsf3+0x58>
 8000b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b6c:	bf18      	it	ne
 8000b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b72:	d021      	beq.n	8000bb8 <__addsf3+0x140>
 8000b74:	ea92 0f03 	teq	r2, r3
 8000b78:	d004      	beq.n	8000b84 <__addsf3+0x10c>
 8000b7a:	f092 0f00 	teq	r2, #0
 8000b7e:	bf08      	it	eq
 8000b80:	4608      	moveq	r0, r1
 8000b82:	4770      	bx	lr
 8000b84:	ea90 0f01 	teq	r0, r1
 8000b88:	bf1c      	itt	ne
 8000b8a:	2000      	movne	r0, #0
 8000b8c:	4770      	bxne	lr
 8000b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b92:	d104      	bne.n	8000b9e <__addsf3+0x126>
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	bf28      	it	cs
 8000b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ba2:	bf3c      	itt	cc
 8000ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bxcc	lr
 8000baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bbc:	bf16      	itet	ne
 8000bbe:	4608      	movne	r0, r1
 8000bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc4:	4601      	movne	r1, r0
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	bf06      	itte	eq
 8000bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bce:	ea90 0f01 	teqeq	r0, r1
 8000bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_ui2f>:
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e004      	b.n	8000be8 <__aeabi_i2f+0x8>
 8000bde:	bf00      	nop

08000be0 <__aeabi_i2f>:
 8000be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	bf48      	it	mi
 8000be6:	4240      	negmi	r0, r0
 8000be8:	ea5f 0c00 	movs.w	ip, r0
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	e01c      	b.n	8000c36 <__aeabi_l2f+0x2a>

08000bfc <__aeabi_ul2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e00a      	b.n	8000c20 <__aeabi_l2f+0x14>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_l2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_l2f+0x14>
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	ea5f 0c01 	movs.w	ip, r1
 8000c24:	bf02      	ittt	eq
 8000c26:	4684      	moveq	ip, r0
 8000c28:	4601      	moveq	r1, r0
 8000c2a:	2000      	moveq	r0, #0
 8000c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c30:	bf08      	it	eq
 8000c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c3a:	fabc f28c 	clz	r2, ip
 8000c3e:	3a08      	subs	r2, #8
 8000c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c44:	db10      	blt.n	8000c68 <__aeabi_l2f+0x5c>
 8000c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c58:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f102 0220 	add.w	r2, r2, #32
 8000c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c78:	fa21 f202 	lsr.w	r2, r1, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_fmul>:
 8000c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c90:	bf1e      	ittt	ne
 8000c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c96:	ea92 0f0c 	teqne	r2, ip
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d06f      	beq.n	8000d80 <__aeabi_fmul+0xf8>
 8000ca0:	441a      	add	r2, r3
 8000ca2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca6:	0240      	lsls	r0, r0, #9
 8000ca8:	bf18      	it	ne
 8000caa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cae:	d01e      	beq.n	8000cee <__aeabi_fmul+0x66>
 8000cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc8:	bf3e      	ittt	cc
 8000cca:	0049      	lslcc	r1, r1, #1
 8000ccc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd0:	005b      	lslcc	r3, r3, #1
 8000cd2:	ea40 0001 	orr.w	r0, r0, r1
 8000cd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cda:	2afd      	cmp	r2, #253	; 0xfd
 8000cdc:	d81d      	bhi.n	8000d1a <__aeabi_fmul+0x92>
 8000cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf6:	bf08      	it	eq
 8000cf8:	0249      	lsleq	r1, r1, #9
 8000cfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	bfc2      	ittt	gt
 8000d06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0e:	4770      	bxgt	lr
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	dc5d      	bgt.n	8000dd8 <__aeabi_fmul+0x150>
 8000d1c:	f112 0f19 	cmn.w	r2, #25
 8000d20:	bfdc      	itt	le
 8000d22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d26:	4770      	bxle	lr
 8000d28:	f1c2 0200 	rsb	r2, r2, #0
 8000d2c:	0041      	lsls	r1, r0, #1
 8000d2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d32:	f1c2 0220 	rsb	r2, r2, #32
 8000d36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3e:	f140 0000 	adc.w	r0, r0, #0
 8000d42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d46:	bf08      	it	eq
 8000d48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4c:	4770      	bx	lr
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0040      	lsleq	r0, r0, #1
 8000d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5e:	3a01      	subeq	r2, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xce>
 8000d62:	ea40 000c 	orr.w	r0, r0, ip
 8000d66:	f093 0f00 	teq	r3, #0
 8000d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0049      	lsleq	r1, r1, #1
 8000d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d76:	3b01      	subeq	r3, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xe6>
 8000d7a:	ea41 010c 	orr.w	r1, r1, ip
 8000d7e:	e78f      	b.n	8000ca0 <__aeabi_fmul+0x18>
 8000d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	bf18      	it	ne
 8000d8a:	ea93 0f0c 	teqne	r3, ip
 8000d8e:	d00a      	beq.n	8000da6 <__aeabi_fmul+0x11e>
 8000d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d94:	bf18      	it	ne
 8000d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	d1d8      	bne.n	8000d4e <__aeabi_fmul+0xc6>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	bf17      	itett	ne
 8000dac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db0:	4608      	moveq	r0, r1
 8000db2:	f091 0f00 	teqne	r1, #0
 8000db6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dba:	d014      	beq.n	8000de6 <__aeabi_fmul+0x15e>
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d101      	bne.n	8000dc6 <__aeabi_fmul+0x13e>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	d10f      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dc6:	ea93 0f0c 	teq	r3, ip
 8000dca:	d103      	bne.n	8000dd4 <__aeabi_fmul+0x14c>
 8000dcc:	024b      	lsls	r3, r1, #9
 8000dce:	bf18      	it	ne
 8000dd0:	4608      	movne	r0, r1
 8000dd2:	d108      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dd4:	ea80 0001 	eor.w	r0, r0, r1
 8000dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bx	lr
 8000de6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fdiv>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d069      	beq.n	8000edc <__aeabi_fdiv+0xec>
 8000e08:	eba2 0203 	sub.w	r2, r2, r3
 8000e0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e16:	d037      	beq.n	8000e88 <__aeabi_fdiv+0x98>
 8000e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	bf38      	it	cc
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e36:	428b      	cmp	r3, r1
 8000e38:	bf24      	itt	cs
 8000e3a:	1a5b      	subcs	r3, r3, r1
 8000e3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e44:	bf24      	itt	cs
 8000e46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e52:	bf24      	itt	cs
 8000e54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e72:	d1e0      	bne.n	8000e36 <__aeabi_fdiv+0x46>
 8000e74:	2afd      	cmp	r2, #253	; 0xfd
 8000e76:	f63f af50 	bhi.w	8000d1a <__aeabi_fmul+0x92>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e80:	bf08      	it	eq
 8000e82:	f020 0001 	biceq.w	r0, r0, #1
 8000e86:	4770      	bx	lr
 8000e88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e90:	327f      	adds	r2, #127	; 0x7f
 8000e92:	bfc2      	ittt	gt
 8000e94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9c:	4770      	bxgt	lr
 8000e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	e737      	b.n	8000d1a <__aeabi_fmul+0x92>
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xc2>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xda>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e795      	b.n	8000e08 <__aeabi_fdiv+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	d108      	bne.n	8000ef8 <__aeabi_fdiv+0x108>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	f47f af7d 	bne.w	8000de6 <__aeabi_fmul+0x15e>
 8000eec:	ea93 0f0c 	teq	r3, ip
 8000ef0:	f47f af70 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e776      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	d104      	bne.n	8000f08 <__aeabi_fdiv+0x118>
 8000efe:	024b      	lsls	r3, r1, #9
 8000f00:	f43f af4c 	beq.w	8000d9c <__aeabi_fmul+0x114>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e76e      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f0c:	bf18      	it	ne
 8000f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	d1ca      	bne.n	8000eaa <__aeabi_fdiv+0xba>
 8000f14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f18:	f47f af5c 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000f1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f20:	f47f af3c 	bne.w	8000d9c <__aeabi_fmul+0x114>
 8000f24:	e75f      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f26:	bf00      	nop

08000f28 <__gesf2>:
 8000f28:	f04f 3cff 	mov.w	ip, #4294967295
 8000f2c:	e006      	b.n	8000f3c <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__lesf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	e002      	b.n	8000f3c <__cmpsf2+0x4>
 8000f36:	bf00      	nop

08000f38 <__cmpsf2>:
 8000f38:	f04f 0c01 	mov.w	ip, #1
 8000f3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f4c:	bf18      	it	ne
 8000f4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f52:	d011      	beq.n	8000f78 <__cmpsf2+0x40>
 8000f54:	b001      	add	sp, #4
 8000f56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f5a:	bf18      	it	ne
 8000f5c:	ea90 0f01 	teqne	r0, r1
 8000f60:	bf58      	it	pl
 8000f62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f66:	bf88      	it	hi
 8000f68:	17c8      	asrhi	r0, r1, #31
 8000f6a:	bf38      	it	cc
 8000f6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f70:	bf18      	it	ne
 8000f72:	f040 0001 	orrne.w	r0, r0, #1
 8000f76:	4770      	bx	lr
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	d102      	bne.n	8000f84 <__cmpsf2+0x4c>
 8000f7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f82:	d105      	bne.n	8000f90 <__cmpsf2+0x58>
 8000f84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f88:	d1e4      	bne.n	8000f54 <__cmpsf2+0x1c>
 8000f8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f8e:	d0e1      	beq.n	8000f54 <__cmpsf2+0x1c>
 8000f90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <__aeabi_cfrcmple>:
 8000f98:	4684      	mov	ip, r0
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	4661      	mov	r1, ip
 8000f9e:	e7ff      	b.n	8000fa0 <__aeabi_cfcmpeq>

08000fa0 <__aeabi_cfcmpeq>:
 8000fa0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fa2:	f7ff ffc9 	bl	8000f38 <__cmpsf2>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf48      	it	mi
 8000faa:	f110 0f00 	cmnmi.w	r0, #0
 8000fae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fb0 <__aeabi_fcmpeq>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff fff4 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fb8:	bf0c      	ite	eq
 8000fba:	2001      	moveq	r0, #1
 8000fbc:	2000      	movne	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmplt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffea 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmple>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffe0 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fe0:	bf94      	ite	ls
 8000fe2:	2001      	movls	r0, #1
 8000fe4:	2000      	movhi	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmpge>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffd2 	bl	8000f98 <__aeabi_cfrcmple>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmpgt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffc8 	bl	8000f98 <__aeabi_cfrcmple>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <Access_Init+0x14>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000094 	.word	0x20000094

0800102c <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <Brakes_OnAutobrakesEnabled>:
/**
  * @brief	Triggers the actions for Autobrakes enabled state
  * @return	None
  */
static void Brakes_OnAutobrakesEnabled(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	/* Check critical distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Enable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <Brakes_OnAutobrakesEnabled+0x60>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4916      	ldr	r1, [pc, #88]	; (800109c <Brakes_OnAutobrakesEnabled+0x64>)
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffbe 	bl	8000fc4 <__aeabi_fcmplt>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00f      	beq.n	800106e <Brakes_OnAutobrakesEnabled+0x36>
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b09      	cmp	r3, #9
 8001054:	d90b      	bls.n	800106e <Brakes_OnAutobrakesEnabled+0x36>
	{
		/* Set Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = TRUE;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <Brakes_OnAutobrakesEnabled+0x6c>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
		/* Set Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <Brakes_OnAutobrakesEnabled+0x6c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f00a faf2 	bl	800b650 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
	}
}
 800106c:	e012      	b.n	8001094 <Brakes_OnAutobrakesEnabled+0x5c>
	else if (g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32)
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <Brakes_OnAutobrakesEnabled+0x60>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	490a      	ldr	r1, [pc, #40]	; (800109c <Brakes_OnAutobrakesEnabled+0x64>)
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa5 	bl	8000fc4 <__aeabi_fcmplt>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <Brakes_OnAutobrakesEnabled+0x56>
		g_Brakes_Autobrakes_Enable_Cnt_u8++;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 800108a:	701a      	strb	r2, [r3, #0]
}
 800108c:	e002      	b.n	8001094 <Brakes_OnAutobrakesEnabled+0x5c>
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000098 	.word	0x20000098
 800109c:	41f00000 	.word	0x41f00000
 80010a0:	2000009e 	.word	0x2000009e
 80010a4:	2000009c 	.word	0x2000009c

080010a8 <Brakes_OnAutobrakesDisabled>:
/**
  * @brief	Triggers the actions for Autobrakes disabled state
  * @return	None
  */
static void Brakes_OnAutobrakesDisabled(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	/* Check Autobrakes disable distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Disable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <Brakes_OnAutobrakesDisabled+0x60>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <Brakes_OnAutobrakesDisabled+0x64>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffa4 	bl	8001000 <__aeabi_fcmpgt>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00f      	beq.n	80010de <Brakes_OnAutobrakesDisabled+0x36>
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b09      	cmp	r3, #9
 80010c4:	d90b      	bls.n	80010de <Brakes_OnAutobrakesDisabled+0x36>
	{
		/* Reset Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = FALSE;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <Brakes_OnAutobrakesDisabled+0x6c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <Brakes_OnAutobrakesDisabled+0x6c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00a faba 	bl	800b650 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
	}
}
 80010dc:	e012      	b.n	8001104 <Brakes_OnAutobrakesDisabled+0x5c>
	else if(g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32)
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <Brakes_OnAutobrakesDisabled+0x60>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	490a      	ldr	r1, [pc, #40]	; (800110c <Brakes_OnAutobrakesDisabled+0x64>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff8b 	bl	8001000 <__aeabi_fcmpgt>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <Brakes_OnAutobrakesDisabled+0x56>
		g_Brakes_Autobrakes_Disable_Cnt_u8++;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010fa:	701a      	strb	r2, [r3, #0]
}
 80010fc:	e002      	b.n	8001104 <Brakes_OnAutobrakesDisabled+0x5c>
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000098 	.word	0x20000098
 800110c:	428c0000 	.word	0x428c0000
 8001110:	2000009d 	.word	0x2000009d
 8001114:	2000009c 	.word	0x2000009c

08001118 <Brakes_OnDistance>:

static uint8 Brakes_OnDistance(float32 distance)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if(distance < 31)
 8001120:	4913      	ldr	r1, [pc, #76]	; (8001170 <Brakes_OnDistance+0x58>)
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff4e 	bl	8000fc4 <__aeabi_fcmplt>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <Brakes_OnDistance+0x1a>
	{
		return 2;
 800112e:	2302      	movs	r3, #2
 8001130:	e019      	b.n	8001166 <Brakes_OnDistance+0x4e>
	}
	else if((31 <= distance) && (distance < 61))
 8001132:	490f      	ldr	r1, [pc, #60]	; (8001170 <Brakes_OnDistance+0x58>)
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff59 	bl	8000fec <__aeabi_fcmpge>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <Brakes_OnDistance+0x3a>
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <Brakes_OnDistance+0x5c>)
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff3e 	bl	8000fc4 <__aeabi_fcmplt>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <Brakes_OnDistance+0x3a>
	{
		return 1;
 800114e:	2301      	movs	r3, #1
 8001150:	e009      	b.n	8001166 <Brakes_OnDistance+0x4e>
	}
	else if(61 <= distance)
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <Brakes_OnDistance+0x5c>)
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff49 	bl	8000fec <__aeabi_fcmpge>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <Brakes_OnDistance+0x4c>
	{
		return 0;
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <Brakes_OnDistance+0x4e>
	}
	else
	{
		return 3;
 8001164:	2303      	movs	r3, #3
	}
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	41f80000 	.word	0x41f80000
 8001174:	42740000 	.word	0x42740000

08001178 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	/* Initialize variables */
	g_Brakes_AN0_Voltage_mV_u16 = 0u;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <Brakes_Init+0x38>)
 800117e:	2200      	movs	r2, #0
 8001180:	801a      	strh	r2, [r3, #0]
	g_Brakes_Ultrasonic_Distance_cm_f32 = 0.0f;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <Brakes_Init+0x3c>)
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
	g_Brakes_Autobrakes_Status_b = FALSE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <Brakes_Init+0x40>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <Brakes_Init+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <Brakes_Init+0x48>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	//initilalizare cu 0 a noi var
	/* Read Brakes NvM block */
	Rte_Read_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 800119c:	4909      	ldr	r1, [pc, #36]	; (80011c4 <Brakes_Init+0x4c>)
 800119e:	2001      	movs	r0, #1
 80011a0:	f00a fa82 	bl	800b6a8 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <Brakes_Init+0x50>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000096 	.word	0x20000096
 80011b4:	20000098 	.word	0x20000098
 80011b8:	2000009c 	.word	0x2000009c
 80011bc:	2000009d 	.word	0x2000009d
 80011c0:	2000009e 	.word	0x2000009e
 80011c4:	200000a0 	.word	0x200000a0
 80011c8:	20000095 	.word	0x20000095

080011cc <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_Brakes_InitDone_b)
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <Brakes_MainFunction+0x4c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01c      	beq.n	8001212 <Brakes_MainFunction+0x46>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_ADC_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_mV_u16);
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <Brakes_MainFunction+0x50>)
 80011da:	f00a fa9f 	bl	800b71c <Rte_Read_AN0_Voltage_u16>
		/* Read distance from ultrasonic sensor */
		Rte_Read_Ultrasonic_Distance_f32(&g_Brakes_Ultrasonic_Distance_cm_f32);
 80011de:	4810      	ldr	r0, [pc, #64]	; (8001220 <Brakes_MainFunction+0x54>)
 80011e0:	f00a f9a4 	bl	800b52c <Rte_Read_Cdd_Ultrasonic_Distance_f32>
		/* Check Autobrakes condition */
		if(FALSE == g_Brakes_Autobrakes_Status_b)
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <Brakes_MainFunction+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <Brakes_MainFunction+0x26>
		{
			/* Autobrakes enabled actions */
			Brakes_OnAutobrakesEnabled();
 80011ec:	f7ff ff24 	bl	8001038 <Brakes_OnAutobrakesEnabled>
 80011f0:	e001      	b.n	80011f6 <Brakes_MainFunction+0x2a>
		}
		else
		{
			/* Autobrakes disabled actions */
			Brakes_OnAutobrakesDisabled();
 80011f2:	f7ff ff59 	bl	80010a8 <Brakes_OnAutobrakesDisabled>
		}
		/* rte write */
		g_Brakes_CollisionWarning_Status_u8 = Brakes_OnDistance(g_Brakes_Ultrasonic_Distance_cm_f32);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Brakes_MainFunction+0x54>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff8c 	bl	8001118 <Brakes_OnDistance>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <Brakes_MainFunction+0x5c>)
 8001206:	701a      	strb	r2, [r3, #0]
		Rte_Write_Brakes_Collission_Status(g_Brakes_CollisionWarning_Status_u8);
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <Brakes_MainFunction+0x5c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f00a f9cb 	bl	800b5a8 <Rte_Write_g_CollisionWarning_Status>
	}
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000095 	.word	0x20000095
 800121c:	20000096 	.word	0x20000096
 8001220:	20000098 	.word	0x20000098
 8001224:	2000009c 	.word	0x2000009c
 8001228:	200000c0 	.word	0x200000c0

0800122c <Brakes_Shutdown>:
/**
  * @brief  Shutdown the Brakes module
  * @return None
  */
void Brakes_Shutdown(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	/* Write Brakes NvM block */
	Rte_Write_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 8001230:	4904      	ldr	r1, [pc, #16]	; (8001244 <Brakes_Shutdown+0x18>)
 8001232:	2001      	movs	r0, #1
 8001234:	f00a fa52 	bl	800b6dc <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_Brakes_InitDone_b = FALSE;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <Brakes_Shutdown+0x1c>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000a0 	.word	0x200000a0
 8001248:	20000095 	.word	0x20000095

0800124c <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <Engine_Init+0x14>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200000c1 	.word	0x200000c1

08001264 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
	{

	}
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE_U16)
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <LED_UpdatePulseDirection+0x30>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800127c:	d302      	bcc.n	8001284 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN_U8;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <LED_UpdatePulseDirection+0x34>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE_U16)
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <LED_UpdatePulseDirection+0x30>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800128c:	4293      	cmp	r3, r2
 800128e:	d802      	bhi.n	8001296 <LED_UpdatePulseDirection+0x26>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <LED_UpdatePulseDirection+0x34>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
	}
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200000c4 	.word	0x200000c4
 80012a4:	200000c6 	.word	0x200000c6

080012a8 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP_U8 == g_LED_Pulse_Direction_u8)
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <LED_UpdatePulseWidth+0x48>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10c      	bne.n	80012ce <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE_U16)
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <LED_UpdatePulseWidth+0x4c>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80012bc:	d813      	bhi.n	80012e6 <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 + LED_FADE_PULSE_STEP_U16;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <LED_UpdatePulseWidth+0x4c>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <LED_UpdatePulseWidth+0x4c>)
 80012ca:	801a      	strh	r2, [r3, #0]
 80012cc:	e00b      	b.n	80012e6 <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP_U16)
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <LED_UpdatePulseWidth+0x4c>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012d6:	d306      	bcc.n	80012e6 <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 - LED_FADE_PULSE_STEP_U16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <LED_UpdatePulseWidth+0x4c>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <LED_UpdatePulseWidth+0x4c>)
 80012e4:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 80012e6:	f7ff ffc3 	bl	8001270 <LED_UpdatePulseDirection>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000c6 	.word	0x200000c6
 80012f4:	200000c4 	.word	0x200000c4

080012f8 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	g_LED_ButtonState_b = FALSE;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <LED_Init+0x34>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
	g_LED_Pulse_u16 = 0u;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <LED_Init+0x38>)
 8001304:	2200      	movs	r2, #0
 8001306:	801a      	strh	r2, [r3, #0]
	g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <LED_Init+0x3c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <LED_Init+0x38>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f00a f9ba 	bl	800b68c <Rte_Cdd_Servo_RawMove>
	/* Read LED NvM block */
	Rte_Read_NvM_LED_Block(g_LED_NvMBlock_a);
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <LED_Init+0x40>)
 800131a:	2000      	movs	r0, #0
 800131c:	f00a f9c4 	bl	800b6a8 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <LED_Init+0x44>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000c3 	.word	0x200000c3
 8001330:	200000c4 	.word	0x200000c4
 8001334:	200000c6 	.word	0x200000c6
 8001338:	200000c8 	.word	0x200000c8
 800133c:	200000c2 	.word	0x200000c2

08001340 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_LED_InitDone_b)
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <LED_MainFunction+0xd8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d063      	beq.n	8001414 <LED_MainFunction+0xd4>
	{
		//rte read
		Rte_Read_LED_Collision_Status(&g_LED_CollisionWarning_Status);
 800134c:	4833      	ldr	r0, [pc, #204]	; (800141c <LED_MainFunction+0xdc>)
 800134e:	f00a f91b 	bl	800b588 <Rte_Read_g_CollisionWarning_Status>
		switch(g_LED_CollisionWarning_Status)
 8001352:	4b32      	ldr	r3, [pc, #200]	; (800141c <LED_MainFunction+0xdc>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d026      	beq.n	80013a8 <LED_MainFunction+0x68>
 800135a:	2b02      	cmp	r3, #2
 800135c:	dc34      	bgt.n	80013c8 <LED_MainFunction+0x88>
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <LED_MainFunction+0x28>
 8001362:	2b01      	cmp	r3, #1
 8001364:	d010      	beq.n	8001388 <LED_MainFunction+0x48>
 8001366:	e02f      	b.n	80013c8 <LED_MainFunction+0x88>
		{
			case 0:
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2101      	movs	r1, #1
 800136c:	482c      	ldr	r0, [pc, #176]	; (8001420 <LED_MainFunction+0xe0>)
 800136e:	f001 ffba 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2102      	movs	r1, #2
 8001376:	482b      	ldr	r0, [pc, #172]	; (8001424 <LED_MainFunction+0xe4>)
 8001378:	f001 ffb5 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4828      	ldr	r0, [pc, #160]	; (8001424 <LED_MainFunction+0xe4>)
 8001382:	f001 ffb0 	bl	80032e6 <HAL_GPIO_WritePin>
			}break;
 8001386:	e02f      	b.n	80013e8 <LED_MainFunction+0xa8>
			case 1:
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2101      	movs	r1, #1
 800138c:	4824      	ldr	r0, [pc, #144]	; (8001420 <LED_MainFunction+0xe0>)
 800138e:	f001 ffaa 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2102      	movs	r1, #2
 8001396:	4823      	ldr	r0, [pc, #140]	; (8001424 <LED_MainFunction+0xe4>)
 8001398:	f001 ffa5 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2101      	movs	r1, #1
 80013a0:	4820      	ldr	r0, [pc, #128]	; (8001424 <LED_MainFunction+0xe4>)
 80013a2:	f001 ffa0 	bl	80032e6 <HAL_GPIO_WritePin>
			}break;
 80013a6:	e01f      	b.n	80013e8 <LED_MainFunction+0xa8>
			case 2:
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2101      	movs	r1, #1
 80013ac:	481c      	ldr	r0, [pc, #112]	; (8001420 <LED_MainFunction+0xe0>)
 80013ae:	f001 ff9a 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2102      	movs	r1, #2
 80013b6:	481b      	ldr	r0, [pc, #108]	; (8001424 <LED_MainFunction+0xe4>)
 80013b8:	f001 ff95 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	4818      	ldr	r0, [pc, #96]	; (8001424 <LED_MainFunction+0xe4>)
 80013c2:	f001 ff90 	bl	80032e6 <HAL_GPIO_WritePin>
			}break;
 80013c6:	e00f      	b.n	80013e8 <LED_MainFunction+0xa8>
			default:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2101      	movs	r1, #1
 80013cc:	4814      	ldr	r0, [pc, #80]	; (8001420 <LED_MainFunction+0xe0>)
 80013ce:	f001 ff8a 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2102      	movs	r1, #2
 80013d6:	4813      	ldr	r0, [pc, #76]	; (8001424 <LED_MainFunction+0xe4>)
 80013d8:	f001 ff85 	bl	80032e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <LED_MainFunction+0xe4>)
 80013e2:	f001 ff80 	bl	80032e6 <HAL_GPIO_WritePin>
				break;
 80013e6:	bf00      	nop
		}
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <LED_MainFunction+0xe8>)
 80013ea:	f00a f8ad 	bl	800b548 <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(FALSE != g_LED_ButtonState_b)
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <LED_MainFunction+0xe8>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <LED_MainFunction+0xc6>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 80013f6:	f7ff ff57 	bl	80012a8 <LED_UpdatePulseWidth>
			/* Call the Servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <LED_MainFunction+0xec>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f00a f944 	bl	800b68c <Rte_Cdd_Servo_RawMove>
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
			/* Stop fading */
		}

	}
}
 8001404:	e006      	b.n	8001414 <LED_MainFunction+0xd4>
			g_LED_NvMBlock_a[0] = 1u;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <LED_MainFunction+0xf0>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 800140c:	4908      	ldr	r1, [pc, #32]	; (8001430 <LED_MainFunction+0xf0>)
 800140e:	2000      	movs	r0, #0
 8001410:	f00a f964 	bl	800b6dc <Rte_Write_NvM_Block>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200000c2 	.word	0x200000c2
 800141c:	200000e8 	.word	0x200000e8
 8001420:	48000400 	.word	0x48000400
 8001424:	48000800 	.word	0x48000800
 8001428:	200000c3 	.word	0x200000c3
 800142c:	200000c4 	.word	0x200000c4
 8001430:	200000c8 	.word	0x200000c8

08001434 <LED_Shutdown>:
/**
  * @brief  Shutdown the LED module
  * @return None
  */
void LED_Shutdown(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	/* Write LED NvM block */
	Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001438:	4904      	ldr	r1, [pc, #16]	; (800144c <LED_Shutdown+0x18>)
 800143a:	2000      	movs	r0, #0
 800143c:	f00a f94e 	bl	800b6dc <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_LED_InitDone_b = FALSE;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <LED_Shutdown+0x1c>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000c8 	.word	0x200000c8
 8001450:	200000c2 	.word	0x200000c2

08001454 <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	Left_Blinker_Status = FALSE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <Blinker_Init+0x30>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
	Right_Blinker_Status = FALSE;
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <Blinker_Init+0x34>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
	Rte_Write_Left_Blinker_Autobrakes_Status(Left_Blinker_Status);
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <Blinker_Init+0x30>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f00a f8bd 	bl	800b5e8 <Rte_Write_PC_2>
	Rte_Write_Right_Blinker_Autobrakes_Status(Right_Blinker_Status);
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <Blinker_Init+0x34>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f00a f8d2 	bl	800b61c <Rte_Write_PC_3>
	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <Blinker_Init+0x38>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000ee 	.word	0x200000ee
 8001488:	200000ef 	.word	0x200000ef
 800148c:	200000e9 	.word	0x200000e9

08001490 <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <Blinker_MainFunction+0xe8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d16b      	bne.n	8001574 <Blinker_MainFunction+0xe4>
	{
		Rte_Read_Blinker_Autobrakes_Status(&g_Bliker_Autobrakes_Status);
 800149c:	4837      	ldr	r0, [pc, #220]	; (800157c <Blinker_MainFunction+0xec>)
 800149e:	f00a f893 	bl	800b5c8 <Rte_Read_DIO_Autobrakes_State_b>

		if(TRUE == g_Bliker_Autobrakes_Status && FALSE == g_Bliker_Autobrakes_Previous_Status)
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <Blinker_MainFunction+0xec>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d10d      	bne.n	80014c6 <Blinker_MainFunction+0x36>
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <Blinker_MainFunction+0xf0>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <Blinker_MainFunction+0x36>
		{
			Left_Blinker_Status = TRUE;
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <Blinker_MainFunction+0xf4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
			Right_Blinker_Status = TRUE;
 80014b8:	4b33      	ldr	r3, [pc, #204]	; (8001588 <Blinker_MainFunction+0xf8>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
			g_Bliker_Autobrakes_Previous_Status = TRUE;
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <Blinker_MainFunction+0xf0>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e056      	b.n	8001574 <Blinker_MainFunction+0xe4>
		}
		else if(TRUE == g_Bliker_Autobrakes_Status && TRUE == g_Bliker_Autobrakes_Previous_Status)
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <Blinker_MainFunction+0xec>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d14a      	bne.n	8001564 <Blinker_MainFunction+0xd4>
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <Blinker_MainFunction+0xf0>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d146      	bne.n	8001564 <Blinker_MainFunction+0xd4>
		{
			if(g_Blinker_Counter_u16 <= 50)
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <Blinker_MainFunction+0xfc>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2b32      	cmp	r3, #50	; 0x32
 80014dc:	d831      	bhi.n	8001542 <Blinker_MainFunction+0xb2>
			{
				g_Blinker_Counter_u16++;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <Blinker_MainFunction+0xfc>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <Blinker_MainFunction+0xfc>)
 80014e8:	801a      	strh	r2, [r3, #0]
				if(0 == g_Blinker_Counter_u16 % 5)
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <Blinker_MainFunction+0xfc>)
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <Blinker_MainFunction+0x100>)
 80014f0:	fba3 1302 	umull	r1, r3, r3, r2
 80014f4:	0899      	lsrs	r1, r3, #2
 80014f6:	460b      	mov	r3, r1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d136      	bne.n	8001572 <Blinker_MainFunction+0xe2>
				{
					Left_Blinker_Status = !Left_Blinker_Status;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <Blinker_MainFunction+0xf4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <Blinker_MainFunction+0xf4>)
 8001516:	701a      	strb	r2, [r3, #0]
					Right_Blinker_Status = !Right_Blinker_Status;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <Blinker_MainFunction+0xf8>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <Blinker_MainFunction+0xf8>)
 800152a:	701a      	strb	r2, [r3, #0]

					Rte_Write_Left_Blinker_Autobrakes_Status(Left_Blinker_Status);
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <Blinker_MainFunction+0xf4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f00a f859 	bl	800b5e8 <Rte_Write_PC_2>
					Rte_Write_Right_Blinker_Autobrakes_Status(Right_Blinker_Status);
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <Blinker_MainFunction+0xf8>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f00a f86e 	bl	800b61c <Rte_Write_PC_3>
			if(g_Blinker_Counter_u16 <= 50)
 8001540:	e017      	b.n	8001572 <Blinker_MainFunction+0xe2>
				}

			}
			else
			{
				Left_Blinker_Status = FALSE;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <Blinker_MainFunction+0xf4>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
				Right_Blinker_Status = FALSE;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <Blinker_MainFunction+0xf8>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
				Rte_Write_Left_Blinker_Autobrakes_Status(Left_Blinker_Status);
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <Blinker_MainFunction+0xf4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f00a f848 	bl	800b5e8 <Rte_Write_PC_2>
				Rte_Write_Right_Blinker_Autobrakes_Status(Right_Blinker_Status);
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <Blinker_MainFunction+0xf8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f00a f85d 	bl	800b61c <Rte_Write_PC_3>
			if(g_Blinker_Counter_u16 <= 50)
 8001562:	e006      	b.n	8001572 <Blinker_MainFunction+0xe2>
			}
		}
		else
		{
			g_Bliker_Autobrakes_Previous_Status = FALSE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <Blinker_MainFunction+0xf0>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
			g_Blinker_Counter_u16 = 0;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <Blinker_MainFunction+0xfc>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001570:	e000      	b.n	8001574 <Blinker_MainFunction+0xe4>
			if(g_Blinker_Counter_u16 <= 50)
 8001572:	bf00      	nop
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200000e9 	.word	0x200000e9
 800157c:	200000ea 	.word	0x200000ea
 8001580:	200000eb 	.word	0x200000eb
 8001584:	200000ee 	.word	0x200000ee
 8001588:	200000ef 	.word	0x200000ef
 800158c:	200000ec 	.word	0x200000ec
 8001590:	cccccccd 	.word	0xcccccccd

08001594 <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <FrontLights_Init+0x14>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200000f0 	.word	0x200000f0

080015ac <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <InteriorLights_Init+0x14>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200000f1 	.word	0x200000f1

080015d0 <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <RearLights_Init+0x14>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200000f2 	.word	0x200000f2

080015f4 <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <Steering_Init+0x14>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200000f3 	.word	0x200000f3

08001618 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <Cdd_Servo_Driver_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Driver_Init(void)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b09e      	sub	sp, #120	; 0x78
 8001628:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef l_GPIO_InitStruct_s = {0};
 800162a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef l_ClockSourceConfig_s = {0};
 800163a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef l_MasterConfig_s = {0};
 8001648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef l_ConfigOC_s = {0};
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
 8001664:	615a      	str	r2, [r3, #20]
 8001666:	619a      	str	r2, [r3, #24]
    uint32 l_PSC_Value_u32 = 0UL;
 8001668:	2300      	movs	r3, #0
 800166a:	677b      	str	r3, [r7, #116]	; 0x74
    uint32 l_ARR_Value_u32 = 0UL;
 800166c:	2300      	movs	r3, #0
 800166e:	673b      	str	r3, [r7, #112]	; 0x70
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 8001670:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001674:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001678:	d10c      	bne.n	8001694 <Cdd_Servo_Driver_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b6c      	ldr	r3, [pc, #432]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a6b      	ldr	r2, [pc, #428]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b69      	ldr	r3, [pc, #420]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	e046      	b.n	8001722 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 8001694:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001698:	4b65      	ldr	r3, [pc, #404]	; (8001830 <Cdd_Servo_Driver_Init+0x20c>)
 800169a:	429a      	cmp	r2, r3
 800169c:	d10c      	bne.n	80016b8 <Cdd_Servo_Driver_Init+0x94>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a62      	ldr	r2, [pc, #392]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6153      	str	r3, [r2, #20]
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	e034      	b.n	8001722 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 80016b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016bc:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <Cdd_Servo_Driver_Init+0x210>)
 80016be:	429a      	cmp	r2, r3
 80016c0:	d10c      	bne.n	80016dc <Cdd_Servo_Driver_Init+0xb8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a59      	ldr	r2, [pc, #356]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b57      	ldr	r3, [pc, #348]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	e022      	b.n	8001722 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 80016dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <Cdd_Servo_Driver_Init+0x214>)
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d10c      	bne.n	8001700 <Cdd_Servo_Driver_Init+0xdc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e6:	4b51      	ldr	r3, [pc, #324]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4a50      	ldr	r2, [pc, #320]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016f0:	6153      	str	r3, [r2, #20]
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	e010      	b.n	8001722 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 8001700:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001704:	4b4d      	ldr	r3, [pc, #308]	; (800183c <Cdd_Servo_Driver_Init+0x218>)
 8001706:	429a      	cmp	r2, r3
 8001708:	d10b      	bne.n	8001722 <Cdd_Servo_Driver_Init+0xfe>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	4a47      	ldr	r2, [pc, #284]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 8001710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001714:	6153      	str	r3, [r2, #20]
 8001716:	4b45      	ldr	r3, [pc, #276]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    }
	l_GPIO_InitStruct_s.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 8001722:	2320      	movs	r3, #32
 8001724:	65fb      	str	r3, [r7, #92]	; 0x5c
	l_GPIO_InitStruct_s.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	663b      	str	r3, [r7, #96]	; 0x60
	l_GPIO_InitStruct_s.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	66bb      	str	r3, [r7, #104]	; 0x68
	l_GPIO_InitStruct_s.Alternate = GPIO_AF1_TIM2;
 800172e:	2301      	movs	r3, #1
 8001730:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &l_GPIO_InitStruct_s);
 8001732:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001736:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800173a:	4619      	mov	r1, r3
 800173c:	4610      	mov	r0, r2
 800173e:	f001 fc31 	bl	8002fa4 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	l_PSC_Value_u32 = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <Cdd_Servo_Driver_Init+0x21c>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fee5 	bl	8000514 <__aeabi_ui2d>
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <Cdd_Servo_Driver_Init+0x220>)
 8001750:	f7ff f884 	bl	800085c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f966 	bl	8000a2c <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	677b      	str	r3, [r7, #116]	; 0x74
	l_ARR_Value_u32 = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(l_PSC_Value_u32+1.0)))-1.0);
 8001764:	4b36      	ldr	r3, [pc, #216]	; (8001840 <Cdd_Servo_Driver_Init+0x21c>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fed4 	bl	8000514 <__aeabi_ui2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001772:	f7fe fecf 	bl	8000514 <__aeabi_ui2d>
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b33      	ldr	r3, [pc, #204]	; (8001848 <Cdd_Servo_Driver_Init+0x224>)
 800177c:	f7fe fd8e 	bl	800029c <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <Cdd_Servo_Driver_Init+0x228>)
 800178e:	f7fe ff3b 	bl	8000608 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	f7ff f85f 	bl	800085c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <Cdd_Servo_Driver_Init+0x224>)
 80017ac:	f7fe fd74 	bl	8000298 <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f938 	bl	8000a2c <__aeabi_d2uiz>
 80017bc:	4603      	mov	r3, r0
 80017be:	673b      	str	r3, [r7, #112]	; 0x70

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 80017c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <Cdd_Servo_Driver_Init+0x22c>)
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d10c      	bne.n	80017e4 <Cdd_Servo_Driver_Init+0x1c0>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80017d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	e04a      	b.n	800187a <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 80017e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ec:	d10c      	bne.n	8001808 <Cdd_Servo_Driver_Init+0x1e4>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	e038      	b.n	800187a <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 8001808:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <Cdd_Servo_Driver_Init+0x230>)
 800180e:	429a      	cmp	r2, r3
 8001810:	d122      	bne.n	8001858 <Cdd_Servo_Driver_Init+0x234>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <Cdd_Servo_Driver_Init+0x208>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e026      	b.n	800187a <Cdd_Servo_Driver_Init+0x256>
 800182c:	40021000 	.word	0x40021000
 8001830:	48000400 	.word	0x48000400
 8001834:	48000800 	.word	0x48000800
 8001838:	48000c00 	.word	0x48000c00
 800183c:	48001000 	.word	0x48001000
 8001840:	044aa200 	.word	0x044aa200
 8001844:	41490000 	.word	0x41490000
 8001848:	3ff00000 	.word	0x3ff00000
 800184c:	40490000 	.word	0x40490000
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 8001858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185c:	4b45      	ldr	r3, [pc, #276]	; (8001974 <Cdd_Servo_Driver_Init+0x350>)
 800185e:	429a      	cmp	r2, r3
 8001860:	d10b      	bne.n	800187a <Cdd_Servo_Driver_Init+0x256>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001862:	4b45      	ldr	r3, [pc, #276]	; (8001978 <Cdd_Servo_Driver_Init+0x354>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a44      	ldr	r2, [pc, #272]	; (8001978 <Cdd_Servo_Driver_Init+0x354>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <Cdd_Servo_Driver_Init+0x354>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
	}

	g_TimerHandler_s.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 800187a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 8001880:	601a      	str	r2, [r3, #0]
	g_TimerHandler_s.Init.Prescaler = l_PSC_Value_u32;
 8001882:	4a3e      	ldr	r2, [pc, #248]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 8001884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001886:	6053      	str	r3, [r2, #4]
	g_TimerHandler_s.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
	g_TimerHandler_s.Init.Period = l_ARR_Value_u32;
 800188e:	4a3b      	ldr	r2, [pc, #236]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 8001890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001892:	60d3      	str	r3, [r2, #12]
	g_TimerHandler_s.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
	g_TimerHandler_s.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&g_TimerHandler_s);
 80018a0:	4836      	ldr	r0, [pc, #216]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 80018a2:	f001 ff8d 	bl	80037c0 <HAL_TIM_Base_Init>
	l_ClockSourceConfig_s.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_TIM_ConfigClockSource(&g_TimerHandler_s, &l_ClockSourceConfig_s);
 80018ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b0:	4619      	mov	r1, r3
 80018b2:	4832      	ldr	r0, [pc, #200]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 80018b4:	f002 fe32 	bl	800451c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&g_TimerHandler_s);
 80018b8:	4830      	ldr	r0, [pc, #192]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 80018ba:	f002 f849 	bl	8003950 <HAL_TIM_PWM_Init>
	l_MasterConfig_s.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	643b      	str	r3, [r7, #64]	; 0x40
	l_MasterConfig_s.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIMEx_MasterConfigSynchronization(&g_TimerHandler_s, &l_MasterConfig_s);
 80018c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ca:	4619      	mov	r1, r3
 80018cc:	482b      	ldr	r0, [pc, #172]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 80018ce:	f003 fcc5 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
	l_ConfigOC_s.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
	l_ConfigOC_s.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
	l_ConfigOC_s.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	l_ConfigOC_s.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_ConfigChannel(&g_TimerHandler_s, &l_ConfigOC_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4824      	ldr	r0, [pc, #144]	; (800197c <Cdd_Servo_Driver_Init+0x358>)
 80018ec:	f002 fd02 	bl	80042f4 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	g_SERVO_info_s.Period_Min_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MinPulse/20.0));
 80018f0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80018f2:	f7fe fe0f 	bl	8000514 <__aeabi_ui2d>
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe2a 	bl	8000558 <__aeabi_f2d>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <Cdd_Servo_Driver_Init+0x35c>)
 800190a:	f7fe ffa7 	bl	800085c <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe fe77 	bl	8000608 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f883 	bl	8000a2c <__aeabi_d2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <Cdd_Servo_Driver_Init+0x360>)
 800192c:	801a      	strh	r2, [r3, #0]
	g_SERVO_info_s.Period_Max_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 800192e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001930:	f7fe fdf0 	bl	8000514 <__aeabi_ui2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <Cdd_Servo_Driver_Init+0x364>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe0c 	bl	8000558 <__aeabi_f2d>
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <Cdd_Servo_Driver_Init+0x35c>)
 8001946:	f7fe ff89 	bl	800085c <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f7fe fe59 	bl	8000608 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f865 	bl	8000a2c <__aeabi_d2uiz>
 8001962:	4603      	mov	r3, r0
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <Cdd_Servo_Driver_Init+0x360>)
 8001968:	805a      	strh	r2, [r3, #2]
}
 800196a:	bf00      	nop
 800196c:	3778      	adds	r7, #120	; 0x78
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	40000800 	.word	0x40000800
 8001978:	40021000 	.word	0x40021000
 800197c:	200000f4 	.word	0x200000f4
 8001980:	40340000 	.word	0x40340000
 8001984:	20000140 	.word	0x20000140
 8001988:	41a00000 	.word	0x41a00000

0800198c <Cdd_Servo_Init>:

void Cdd_Servo_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	/*--------[ Start The PWM Channel ]-------*/
	HAL_TIM_PWM_Start(&g_TimerHandler_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8001990:	2300      	movs	r3, #0
 8001992:	4619      	mov	r1, r3
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <Cdd_Servo_Init+0x14>)
 8001996:	f002 f83b 	bl	8003a10 <HAL_TIM_PWM_Start>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000f4 	.word	0x200000f4

080019a4 <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= g_SERVO_info_s.Period_Max_u16 && Pulse >= g_SERVO_info_s.Period_Min_u16)
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <Cdd_Servo_RawMove+0x30>)
 80019b0:	885b      	ldrh	r3, [r3, #2]
 80019b2:	88fa      	ldrh	r2, [r7, #6]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d807      	bhi.n	80019c8 <Cdd_Servo_RawMove+0x24>
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <Cdd_Servo_RawMove+0x30>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	88fa      	ldrh	r2, [r7, #6]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d302      	bcc.n	80019c8 <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <Cdd_Servo_RawMove+0x34>)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	6013      	str	r3, [r2, #0]
	}
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000140 	.word	0x20000140
 80019d8:	40000034 	.word	0x40000034

080019dc <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <Cdd_Ultrasonic_Trigger>:
/**
  * @brief	Cdd_Ultrasonic module trigger measurement function
  * @return	None
  */
static void Cdd_Ultrasonic_Trigger(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	Rte_Call_TriggerUltrasonicMeasurement();
 80019ec:	f009 fd82 	bl	800b4f4 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <Cdd_Ultrasonic_ISR_CaptureCallback>:
  * @brief	Cdd_Ultrasonic capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	uint32 l_PS_u32 = 0UL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance) && (htim->Channel == g_Cdd_Ultrasonic_Info_s.ACTIV_CH))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a89      	ldr	r2, [pc, #548]	; (8001c2c <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	f040 810b 	bne.w	8001c22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7f1a      	ldrb	r2, [r3, #28]
 8001a10:	4b87      	ldr	r3, [pc, #540]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	f040 8103 	bne.w	8001c22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
	{
		if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 0u)
 8001a1c:	4b84      	ldr	r3, [pc, #528]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d166      	bne.n	8001af2 <Cdd_Ultrasonic_ISR_CaptureCallback+0xfe>
		{
			/* Capture T1 & Reverse The ICU Edge Polarity */
			g_Cdd_Ultrasonic_Info_s.T1 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001a24:	2300      	movs	r3, #0
 8001a26:	4619      	mov	r1, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f002 fe41 	bl	80046b0 <HAL_TIM_ReadCapturedValue>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a7f      	ldr	r2, [pc, #508]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001a32:	60d3      	str	r3, [r2, #12]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 1u;
 8001a34:	4b7e      	ldr	r3, [pc, #504]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <Cdd_Ultrasonic_ISR_CaptureCallback+0x5e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 020a 	bic.w	r2, r2, #10
 8001a4e:	621a      	str	r2, [r3, #32]
 8001a50:	e01f      	b.n	8001a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d108      	bne.n	8001a6a <Cdd_Ultrasonic_ISR_CaptureCallback+0x76>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	e013      	b.n	8001a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d108      	bne.n	8001a82 <Cdd_Ultrasonic_ISR_CaptureCallback+0x8e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001a7e:	6213      	str	r3, [r2, #32]
 8001a80:	e007      	b.n	8001a92 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	2300      	movs	r3, #0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d108      	bne.n	8001aaa <Cdd_Ultrasonic_ISR_CaptureCallback+0xb6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0202 	orr.w	r2, r2, #2
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	e01f      	b.n	8001aea <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d108      	bne.n	8001ac2 <Cdd_Ultrasonic_ISR_CaptureCallback+0xce>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	f043 0320 	orr.w	r3, r3, #32
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e013      	b.n	8001aea <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d108      	bne.n	8001ada <Cdd_Ultrasonic_ISR_CaptureCallback+0xe6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e007      	b.n	8001aea <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae8:	6213      	str	r3, [r2, #32]
			g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 8001aea:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	805a      	strh	r2, [r3, #2]
		else
		{
			/* Nothing to do */
		}
	}
}
 8001af0:	e097      	b.n	8001c22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
		else if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 1u)
 8001af2:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	f040 8093 	bne.w	8001c22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			l_PS_u32 = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 8001afc:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	60fb      	str	r3, [r7, #12]
			g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	4a4a      	ldr	r2, [pc, #296]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b08:	6093      	str	r3, [r2, #8]
			g_Cdd_Ultrasonic_Info_s.T2 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f002 fdce 	bl	80046b0 <HAL_TIM_ReadCapturedValue>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b18:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.T2 += (g_Cdd_Ultrasonic_Info_s.TMR_OVC * (g_Cdd_Ultrasonic_Info_s.TMR_ARR+1u));
 8001b1a:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b20:	885b      	ldrh	r3, [r3, #2]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b32:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.DIFF = g_Cdd_Ultrasonic_Info_s.T2 - g_Cdd_Ultrasonic_Info_s.T1;
 8001b34:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4a3c      	ldr	r2, [pc, #240]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b40:	6153      	str	r3, [r2, #20]
			g_Cdd_Ultrasonic_Info_s.DISTANCE = (g_Cdd_Ultrasonic_Info_s.DIFF * CDD_ULTRASONIC_DISTANCE_SCALE_FACTOR_F32)/(c_Cdd_Ultrasonic_CfgType_s.TIM_CLK_MHz/(l_PS_u32+1u));
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f846 	bl	8000bd8 <__aeabi_ui2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4939      	ldr	r1, [pc, #228]	; (8001c34 <Cdd_Ultrasonic_ISR_CaptureCallback+0x240>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f899 	bl	8000c88 <__aeabi_fmul>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461c      	mov	r4, r3
 8001b5a:	2248      	movs	r2, #72	; 0x48
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff f837 	bl	8000bd8 <__aeabi_ui2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff f93e 	bl	8000df0 <__aeabi_fdiv>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b7a:	619a      	str	r2, [r3, #24]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 0u;
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b82:	2300      	movs	r3, #0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d108      	bne.n	8001b9a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1a6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020a 	bic.w	r2, r2, #10
 8001b96:	621a      	str	r2, [r3, #32]
 8001b98:	e01f      	b.n	8001bda <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d108      	bne.n	8001bb2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1be>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	e013      	b.n	8001bda <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d108      	bne.n	8001bca <Cdd_Ultrasonic_ISR_CaptureCallback+0x1d6>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e007      	b.n	8001bda <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d106      	bne.n	8001bee <Cdd_Ultrasonic_ISR_CaptureCallback+0x1fa>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a12      	ldr	r2, [r2, #32]
 8001bea:	621a      	str	r2, [r3, #32]
}
 8001bec:	e019      	b.n	8001c22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d106      	bne.n	8001c02 <Cdd_Ultrasonic_ISR_CaptureCallback+0x20e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	6213      	str	r3, [r2, #32]
}
 8001c00:	e00f      	b.n	8001c22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c02:	2300      	movs	r3, #0
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d106      	bne.n	8001c16 <Cdd_Ultrasonic_ISR_CaptureCallback+0x222>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	6213      	str	r3, [r2, #32]
}
 8001c14:	e005      	b.n	8001c22 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	6213      	str	r3, [r2, #32]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	20000190 	.word	0x20000190
 8001c34:	3c8b4396 	.word	0x3c8b4396

08001c38 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x28>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d105      	bne.n	8001c56 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x1e>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_OVC++;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8001c4c:	885b      	ldrh	r3, [r3, #2]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8001c54:	805a      	strh	r2, [r3, #2]
	}
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40000400 	.word	0x40000400
 8001c64:	20000190 	.word	0x20000190

08001c68 <Cdd_Ultrasonic_Init>:
/**
  * @brief	Cdd_Ultrasonic module initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	if(TRUE == g_Cdd_Ultrasonic_DriverInitDone_b)
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <Cdd_Ultrasonic_Init+0x28>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10a      	bne.n	8001c8a <Cdd_Ultrasonic_Init+0x22>
	{
		/*--------[ Start The ICU Channel ]-------*/
		HAL_TIM_Base_Start_IT(&htim3);
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <Cdd_Ultrasonic_Init+0x2c>)
 8001c76:	f001 fdfb 	bl	8003870 <HAL_TIM_Base_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <Cdd_Ultrasonic_Init+0x2c>)
 8001c80:	f002 f832 	bl	8003ce8 <HAL_TIM_IC_Start_IT>
		/* Set initialization flag to done */
		g_Cdd_Ultrasonic_InitDone_b = TRUE;
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <Cdd_Ultrasonic_Init+0x30>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200001b5 	.word	0x200001b5
 8001c94:	20000144 	.word	0x20000144
 8001c98:	200001b4 	.word	0x200001b4

08001c9c <Cdd_Ultrasonic_Driver_Init>:
/**
  * @brief	Cdd_Ultrasonic module driver initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Driver_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b096      	sub	sp, #88	; 0x58
 8001ca0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8001ca2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]

    /*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOA)
 8001cda:	4b6e      	ldr	r3, [pc, #440]	; (8001e94 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001cdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ce0:	d10c      	bne.n	8001cfc <Cdd_Ultrasonic_Driver_Init+0x60>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	e042      	b.n	8001d82 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOB)
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001cfe:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10c      	bne.n	8001d1e <Cdd_Ultrasonic_Driver_Init+0x82>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0e:	6153      	str	r3, [r2, #20]
 8001d10:	4b61      	ldr	r3, [pc, #388]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	e031      	b.n	8001d82 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOC)
 8001d1e:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001d20:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <Cdd_Ultrasonic_Driver_Init+0x200>)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10c      	bne.n	8001d40 <Cdd_Ultrasonic_Driver_Init+0xa4>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4a5b      	ldr	r2, [pc, #364]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d30:	6153      	str	r3, [r2, #20]
 8001d32:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	e020      	b.n	8001d82 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOD)
 8001d40:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <Cdd_Ultrasonic_Driver_Init+0x204>)
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10c      	bne.n	8001d62 <Cdd_Ultrasonic_Driver_Init+0xc6>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d52:	6153      	str	r3, [r2, #20]
 8001d54:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	e00f      	b.n	8001d82 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOE)
 8001d62:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <Cdd_Ultrasonic_Driver_Init+0x208>)
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d10b      	bne.n	8001d82 <Cdd_Ultrasonic_Driver_Init+0xe6>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6a:	4b4b      	ldr	r3, [pc, #300]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
    }
    TRIG_GPIO_InitStruct.Pin = c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8001d94:	4a3f      	ldr	r2, [pc, #252]	; (8001e94 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001d96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f001 f901 	bl	8002fa4 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	g_Cdd_Ultrasonic_Info_s.TMR_PSC = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	4a41      	ldr	r2, [pc, #260]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001da8:	6053      	str	r3, [r2, #4]
	g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8001daa:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	4a3f      	ldr	r2, [pc, #252]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001db0:	6093      	str	r3, [r2, #8]
	g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	805a      	strh	r2, [r3, #2]
	g_Cdd_Ultrasonic_Info_s.HTIM = &htim3;
 8001db8:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001dba:	4a3d      	ldr	r2, [pc, #244]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001dbc:	61da      	str	r2, [r3, #28]
	if(g_Cdd_Ultrasonic_Info_s.TMR_ARR == 0u)
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <Cdd_Ultrasonic_Driver_Init+0x132>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_ARR = 65535u;
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dcc:	609a      	str	r2, [r3, #8]
	}
	if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_1)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <Cdd_Ultrasonic_Driver_Init+0x142>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2020 	strb.w	r2, [r3, #32]
 8001ddc:	e016      	b.n	8001e0c <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_2)
 8001dde:	2300      	movs	r3, #0
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d104      	bne.n	8001dee <Cdd_Ultrasonic_Driver_Init+0x152>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]
 8001dec:	e00e      	b.n	8001e0c <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_3)
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d104      	bne.n	8001dfe <Cdd_Ultrasonic_Driver_Init+0x162>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001df6:	2204      	movs	r2, #4
 8001df8:	f883 2020 	strb.w	r2, [r3, #32]
 8001dfc:	e006      	b.n	8001e0c <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_4)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d103      	bne.n	8001e0c <Cdd_Ultrasonic_Driver_Init+0x170>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e06:	2208      	movs	r2, #8
 8001e08:	f883 2020 	strb.w	r2, [r3, #32]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/
	htim3.Instance = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance;
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e10:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = g_Cdd_Ultrasonic_Info_s.TMR_PSC;
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e18:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = g_Cdd_Ultrasonic_Info_s.TMR_ARR;
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e26:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 8001e34:	481e      	ldr	r0, [pc, #120]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e36:	f001 fcc3 	bl	80037c0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001e40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e44:	4619      	mov	r1, r3
 8001e46:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e48:	f002 fb68 	bl	800451c <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim3);
 8001e4c:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e4e:	f001 feeb 	bl	8003c28 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e62:	f003 f9fb 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e80:	f002 f99b 	bl	80041ba <HAL_TIM_IC_ConfigChannel>
	/* Set driver initialization flag to done */
	g_Cdd_Ultrasonic_DriverInitDone_b = TRUE;
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <Cdd_Ultrasonic_Driver_Init+0x218>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	3758      	adds	r7, #88	; 0x58
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	48000400 	.word	0x48000400
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	48000800 	.word	0x48000800
 8001ea0:	48000c00 	.word	0x48000c00
 8001ea4:	48001000 	.word	0x48001000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	20000190 	.word	0x20000190
 8001eb0:	20000144 	.word	0x20000144
 8001eb4:	200001b5 	.word	0x200001b5

08001eb8 <Cdd_Ultrasonic_MainFunction>:
/**
  * @brief	Cdd_Ultrasonic module main function (runs in task)
  * @return	None
  */
void Cdd_Ultrasonic_MainFunction(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Cdd_Ultrasonic_InitDone_b)
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <Cdd_Ultrasonic_MainFunction+0x2c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10c      	bne.n	8001ede <Cdd_Ultrasonic_MainFunction+0x26>
	{
		/* Trigger measurement every 2nd cycle ( 20ms = 2 * task cycle ) */
		if(FALSE == g_Cdd_Ultrasonic_TriggerFlag_b)
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <Cdd_Ultrasonic_MainFunction+0x30>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <Cdd_Ultrasonic_MainFunction+0x1c>
		{
			/* Trigger measurement next cycle */
			g_Cdd_Ultrasonic_TriggerFlag_b = TRUE;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <Cdd_Ultrasonic_MainFunction+0x30>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
			/* Call trigger function */
			Cdd_Ultrasonic_Trigger();
		}
	}
}
 8001ed2:	e004      	b.n	8001ede <Cdd_Ultrasonic_MainFunction+0x26>
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <Cdd_Ultrasonic_MainFunction+0x30>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
			Cdd_Ultrasonic_Trigger();
 8001eda:	f7ff fd85 	bl	80019e8 <Cdd_Ultrasonic_Trigger>
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001b4 	.word	0x200001b4
 8001ee8:	200001b6 	.word	0x200001b6

08001eec <Cdd_Ultrasonic_ReadDistance>:
/**
  * @brief	Cdd_Ultrasonic module read distance function
  * @return	Last measured distance in centimeters
  */
float32 Cdd_Ultrasonic_ReadDistance(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
	float32 l_Distance_f32 = 0.0f;
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
	l_Distance_f32 = g_Cdd_Ultrasonic_Info_s.DISTANCE;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <Cdd_Ultrasonic_ReadDistance+0x20>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	607b      	str	r3, [r7, #4]
	return l_Distance_f32;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000190 	.word	0x20000190

08001f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief	Cdd_Ultrasonic external capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_CaptureCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fd6b 	bl	80019f4 <Cdd_Ultrasonic_ISR_CaptureCallback>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic external period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_PeriodElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fe82 	bl	8001c38 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b09a      	sub	sp, #104	; 0x68
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e1e3      	b.n	8002348 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d176      	bne.n	8002080 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d152      	bne.n	8002040 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f005 fa07 	bl	80073c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d13b      	bne.n	8002040 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 ff85 	bl	8002ed8 <ADC_Disable>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d12f      	bne.n	8002040 <HAL_ADC_Init+0xe0>
 8001fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d12b      	bne.n	8002040 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ff0:	f023 0302 	bic.w	r3, r3, #2
 8001ff4:	f043 0202 	orr.w	r2, r3, #2
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800200a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800201a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800201c:	4b92      	ldr	r3, [pc, #584]	; (8002268 <HAL_ADC_Init+0x308>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a92      	ldr	r2, [pc, #584]	; (800226c <HAL_ADC_Init+0x30c>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9a      	lsrs	r2, r3, #18
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002032:	e002      	b.n	800203a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800205c:	d110      	bne.n	8002080 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f023 0312 	bic.w	r3, r3, #18
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 8150 	bne.w	800232e <HAL_ADC_Init+0x3ce>
 800208e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 814b 	bne.w	800232e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8143 	bne.w	800232e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020b0:	f043 0202 	orr.w	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c0:	d004      	beq.n	80020cc <HAL_ADC_Init+0x16c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6a      	ldr	r2, [pc, #424]	; (8002270 <HAL_ADC_Init+0x310>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_Init+0x170>
 80020cc:	4b69      	ldr	r3, [pc, #420]	; (8002274 <HAL_ADC_Init+0x314>)
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_Init+0x172>
 80020d0:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_ADC_Init+0x318>)
 80020d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020dc:	d102      	bne.n	80020e4 <HAL_ADC_Init+0x184>
 80020de:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_ADC_Init+0x310>)
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e01a      	b.n	800211a <HAL_ADC_Init+0x1ba>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_ADC_Init+0x310>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d103      	bne.n	80020f6 <HAL_ADC_Init+0x196>
 80020ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e011      	b.n	800211a <HAL_ADC_Init+0x1ba>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a60      	ldr	r2, [pc, #384]	; (800227c <HAL_ADC_Init+0x31c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_Init+0x1a6>
 8002100:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_ADC_Init+0x320>)
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e009      	b.n	800211a <HAL_ADC_Init+0x1ba>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_ADC_Init+0x320>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d102      	bne.n	8002116 <HAL_ADC_Init+0x1b6>
 8002110:	4b5a      	ldr	r3, [pc, #360]	; (800227c <HAL_ADC_Init+0x31c>)
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e001      	b.n	800211a <HAL_ADC_Init+0x1ba>
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d108      	bne.n	800213a <HAL_ADC_Init+0x1da>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x1da>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_ADC_Init+0x1dc>
 800213a:	2300      	movs	r3, #0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d11c      	bne.n	800217a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002140:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_ADC_Init+0x202>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_ADC_Init+0x202>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_ADC_Init+0x204>
 8002162:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002164:	2b00      	cmp	r3, #0
 8002166:	d108      	bne.n	800217a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002178:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7e5b      	ldrb	r3, [r3, #25]
 800217e:	035b      	lsls	r3, r3, #13
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002184:	2a01      	cmp	r2, #1
 8002186:	d002      	beq.n	800218e <HAL_ADC_Init+0x22e>
 8002188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800218c:	e000      	b.n	8002190 <HAL_ADC_Init+0x230>
 800218e:	2200      	movs	r2, #0
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4313      	orrs	r3, r2
 800219e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021a0:	4313      	orrs	r3, r2
 80021a2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d11b      	bne.n	80021e6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7e5b      	ldrb	r3, [r3, #25]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	3b01      	subs	r3, #1
 80021bc:	045a      	lsls	r2, r3, #17
 80021be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	663b      	str	r3, [r7, #96]	; 0x60
 80021c8:	e00d      	b.n	80021e6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80021d2:	f043 0220 	orr.w	r2, r3, #32
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d054      	beq.n	8002298 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a22      	ldr	r2, [pc, #136]	; (800227c <HAL_ADC_Init+0x31c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d004      	beq.n	8002202 <HAL_ADC_Init+0x2a2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_ADC_Init+0x320>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d140      	bne.n	8002284 <HAL_ADC_Init+0x324>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800220a:	d02a      	beq.n	8002262 <HAL_ADC_Init+0x302>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002214:	d022      	beq.n	800225c <HAL_ADC_Init+0x2fc>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800221e:	d01a      	beq.n	8002256 <HAL_ADC_Init+0x2f6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002228:	d012      	beq.n	8002250 <HAL_ADC_Init+0x2f0>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002232:	d00a      	beq.n	800224a <HAL_ADC_Init+0x2ea>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800223c:	d002      	beq.n	8002244 <HAL_ADC_Init+0x2e4>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	e023      	b.n	800228c <HAL_ADC_Init+0x32c>
 8002244:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002248:	e020      	b.n	800228c <HAL_ADC_Init+0x32c>
 800224a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800224e:	e01d      	b.n	800228c <HAL_ADC_Init+0x32c>
 8002250:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002254:	e01a      	b.n	800228c <HAL_ADC_Init+0x32c>
 8002256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800225a:	e017      	b.n	800228c <HAL_ADC_Init+0x32c>
 800225c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002260:	e014      	b.n	800228c <HAL_ADC_Init+0x32c>
 8002262:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002266:	e011      	b.n	800228c <HAL_ADC_Init+0x32c>
 8002268:	20000000 	.word	0x20000000
 800226c:	431bde83 	.word	0x431bde83
 8002270:	50000100 	.word	0x50000100
 8002274:	50000300 	.word	0x50000300
 8002278:	50000700 	.word	0x50000700
 800227c:	50000400 	.word	0x50000400
 8002280:	50000500 	.word	0x50000500
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002290:	4313      	orrs	r3, r2
 8002292:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002294:	4313      	orrs	r3, r2
 8002296:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d114      	bne.n	80022d0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b4:	f023 0302 	bic.w	r3, r3, #2
 80022b8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7e1b      	ldrb	r3, [r3, #24]
 80022be:	039a      	lsls	r2, r3, #14
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4313      	orrs	r3, r2
 80022ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022cc:	4313      	orrs	r3, r2
 80022ce:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_ADC_Init+0x3f0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022e0:	430b      	orrs	r3, r1
 80022e2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10c      	bne.n	8002306 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f023 010f 	bic.w	r1, r3, #15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
 8002304:	e007      	b.n	8002316 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 020f 	bic.w	r2, r2, #15
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f023 0303 	bic.w	r3, r3, #3
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
 800232c:	e00a      	b.n	8002344 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f023 0312 	bic.w	r3, r3, #18
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800233e:	2301      	movs	r3, #1
 8002340:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002344:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002348:	4618      	mov	r0, r3
 800234a:	3768      	adds	r7, #104	; 0x68
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	fff0c007 	.word	0xfff0c007

08002354 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 80f7 	bne.w	8002562 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Start_DMA+0x2e>
 800237e:	2302      	movs	r3, #2
 8002380:	e0f2      	b.n	8002568 <HAL_ADC_Start_DMA+0x214>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002392:	d004      	beq.n	800239e <HAL_ADC_Start_DMA+0x4a>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a75      	ldr	r2, [pc, #468]	; (8002570 <HAL_ADC_Start_DMA+0x21c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d109      	bne.n	80023b2 <HAL_ADC_Start_DMA+0x5e>
 800239e:	4b75      	ldr	r3, [pc, #468]	; (8002574 <HAL_ADC_Start_DMA+0x220>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	e008      	b.n	80023c4 <HAL_ADC_Start_DMA+0x70>
 80023b2:	4b71      	ldr	r3, [pc, #452]	; (8002578 <HAL_ADC_Start_DMA+0x224>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80c5 	beq.w	8002554 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fd20 	bl	8002e10 <ADC_Enable>
 80023d0:	4603      	mov	r3, r0
 80023d2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 80b7 	bne.w	800254a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f8:	d004      	beq.n	8002404 <HAL_ADC_Start_DMA+0xb0>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a5c      	ldr	r2, [pc, #368]	; (8002570 <HAL_ADC_Start_DMA+0x21c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d106      	bne.n	8002412 <HAL_ADC_Start_DMA+0xbe>
 8002404:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_ADC_Start_DMA+0x220>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b00      	cmp	r3, #0
 800240e:	d010      	beq.n	8002432 <HAL_ADC_Start_DMA+0xde>
 8002410:	e005      	b.n	800241e <HAL_ADC_Start_DMA+0xca>
 8002412:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_ADC_Start_DMA+0x224>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_ADC_Start_DMA+0xde>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Start_DMA+0xde>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a53      	ldr	r2, [pc, #332]	; (800257c <HAL_ADC_Start_DMA+0x228>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d115      	bne.n	800245e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d036      	beq.n	80024ba <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002454:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800245c:	e02d      	b.n	80024ba <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002472:	d004      	beq.n	800247e <HAL_ADC_Start_DMA+0x12a>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3d      	ldr	r2, [pc, #244]	; (8002570 <HAL_ADC_Start_DMA+0x21c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10a      	bne.n	8002494 <HAL_ADC_Start_DMA+0x140>
 800247e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e008      	b.n	80024a6 <HAL_ADC_Start_DMA+0x152>
 8002494:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_ADC_Start_DMA+0x228>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	f023 0206 	bic.w	r2, r3, #6
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
 80024d4:	e002      	b.n	80024dc <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HAL_ADC_Start_DMA+0x22c>)
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_ADC_Start_DMA+0x230>)
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_ADC_Start_DMA+0x234>)
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	221c      	movs	r2, #28
 8002502:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0210 	orr.w	r2, r2, #16
 8002512:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3340      	adds	r3, #64	; 0x40
 800252e:	4619      	mov	r1, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f000 ff4d 	bl	80033d2 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0204 	orr.w	r2, r2, #4
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e00d      	b.n	8002566 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002552:	e008      	b.n	8002566 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002560:	e001      	b.n	8002566 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002562:	2302      	movs	r3, #2
 8002564:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002566:	7dfb      	ldrb	r3, [r7, #23]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	50000100 	.word	0x50000100
 8002574:	50000300 	.word	0x50000300
 8002578:	50000700 	.word	0x50000700
 800257c:	50000400 	.word	0x50000400
 8002580:	08002d45 	.word	0x08002d45
 8002584:	08002dbf 	.word	0x08002dbf
 8002588:	08002ddb 	.word	0x08002ddb

0800258c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b09b      	sub	sp, #108	; 0x6c
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x22>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e2ca      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x5b8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f040 82ae 	bne.w	8002b22 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d81c      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	461a      	mov	r2, r3
 80025e2:	231f      	movs	r3, #31
 80025e4:	4093      	lsls	r3, r2
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4019      	ands	r1, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
 8002606:	e063      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d81e      	bhi.n	800264e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	3b1e      	subs	r3, #30
 8002624:	221f      	movs	r2, #31
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	4019      	ands	r1, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	3b1e      	subs	r3, #30
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
 800264c:	e040      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b0e      	cmp	r3, #14
 8002654:	d81e      	bhi.n	8002694 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	3b3c      	subs	r3, #60	; 0x3c
 800266a:	221f      	movs	r2, #31
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	4019      	ands	r1, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	3b3c      	subs	r3, #60	; 0x3c
 8002686:	fa00 f203 	lsl.w	r2, r0, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
 8002692:	e01d      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	3b5a      	subs	r3, #90	; 0x5a
 80026a8:	221f      	movs	r2, #31
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	4019      	ands	r1, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	3b5a      	subs	r3, #90	; 0x5a
 80026c4:	fa00 f203 	lsl.w	r2, r0, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 80e5 	bne.w	80028aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b09      	cmp	r3, #9
 80026e6:	d91c      	bls.n	8002722 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6999      	ldr	r1, [r3, #24]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	3b1e      	subs	r3, #30
 80026fa:	2207      	movs	r2, #7
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	4019      	ands	r1, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6898      	ldr	r0, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	3b1e      	subs	r3, #30
 8002714:	fa00 f203 	lsl.w	r2, r0, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	e019      	b.n	8002756 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6959      	ldr	r1, [r3, #20]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	2207      	movs	r2, #7
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	4019      	ands	r1, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6898      	ldr	r0, [r3, #8]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	fa00 f203 	lsl.w	r2, r0, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	3b01      	subs	r3, #1
 8002774:	2b03      	cmp	r3, #3
 8002776:	d84f      	bhi.n	8002818 <HAL_ADC_ConfigChannel+0x28c>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_ADC_ConfigChannel+0x1f4>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	08002791 	.word	0x08002791
 8002784:	080027b3 	.word	0x080027b3
 8002788:	080027d5 	.word	0x080027d5
 800278c:	080027f7 	.word	0x080027f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002796:	4b9a      	ldr	r3, [pc, #616]	; (8002a00 <HAL_ADC_ConfigChannel+0x474>)
 8002798:	4013      	ands	r3, r2
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	0691      	lsls	r1, r2, #26
 80027a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027a2:	430a      	orrs	r2, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027b0:	e07e      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027b8:	4b91      	ldr	r3, [pc, #580]	; (8002a00 <HAL_ADC_ConfigChannel+0x474>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	0691      	lsls	r1, r2, #26
 80027c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027c4:	430a      	orrs	r2, r1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027d2:	e06d      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027da:	4b89      	ldr	r3, [pc, #548]	; (8002a00 <HAL_ADC_ConfigChannel+0x474>)
 80027dc:	4013      	ands	r3, r2
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	0691      	lsls	r1, r2, #26
 80027e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027e6:	430a      	orrs	r2, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027f4:	e05c      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027fc:	4b80      	ldr	r3, [pc, #512]	; (8002a00 <HAL_ADC_ConfigChannel+0x474>)
 80027fe:	4013      	ands	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	0691      	lsls	r1, r2, #26
 8002806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002808:	430a      	orrs	r2, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002814:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002816:	e04b      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	069b      	lsls	r3, r3, #26
 8002828:	429a      	cmp	r2, r3
 800282a:	d107      	bne.n	800283c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800283a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	429a      	cmp	r2, r3
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800285e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	429a      	cmp	r2, r3
 8002872:	d107      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002882:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	069b      	lsls	r3, r3, #26
 8002894:	429a      	cmp	r2, r3
 8002896:	d10a      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80028a8:	e001      	b.n	80028ae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80028ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x344>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x344>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x346>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8130 	bne.w	8002b38 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d00f      	beq.n	8002900 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2201      	movs	r2, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	400a      	ands	r2, r1
 80028fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028fe:	e049      	b.n	8002994 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	409a      	lsls	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b09      	cmp	r3, #9
 8002920:	d91c      	bls.n	800295c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6999      	ldr	r1, [r3, #24]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	3b1b      	subs	r3, #27
 8002934:	2207      	movs	r2, #7
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	4019      	ands	r1, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6898      	ldr	r0, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	3b1b      	subs	r3, #27
 800294e:	fa00 f203 	lsl.w	r2, r0, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	619a      	str	r2, [r3, #24]
 800295a:	e01b      	b.n	8002994 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6959      	ldr	r1, [r3, #20]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	2207      	movs	r2, #7
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	4019      	ands	r1, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6898      	ldr	r0, [r3, #8]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	fa00 f203 	lsl.w	r2, r0, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299c:	d004      	beq.n	80029a8 <HAL_ADC_ConfigChannel+0x41c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_ADC_ConfigChannel+0x478>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x420>
 80029a8:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_ADC_ConfigChannel+0x47c>)
 80029aa:	e000      	b.n	80029ae <HAL_ADC_ConfigChannel+0x422>
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_ADC_ConfigChannel+0x480>)
 80029ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d105      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029c8:	2b11      	cmp	r3, #17
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029dc:	2b12      	cmp	r3, #18
 80029de:	f040 80ab 	bne.w	8002b38 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80a4 	bne.w	8002b38 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f8:	d10a      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x484>
 80029fa:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <HAL_ADC_ConfigChannel+0x478>)
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e022      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x4ba>
 8002a00:	83fff000 	.word	0x83fff000
 8002a04:	50000100 	.word	0x50000100
 8002a08:	50000300 	.word	0x50000300
 8002a0c:	50000700 	.word	0x50000700
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a4e      	ldr	r2, [pc, #312]	; (8002b50 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d103      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x496>
 8002a1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e011      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x4ba>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a4b      	ldr	r2, [pc, #300]	; (8002b54 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x4a6>
 8002a2c:	4b4a      	ldr	r3, [pc, #296]	; (8002b58 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e009      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x4ba>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d102      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x4b6>
 8002a3c:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e001      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x4ba>
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x4da>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x4da>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x4dc>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d150      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x502>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x502>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x504>
 8002a8e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d13c      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d11d      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x54c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa4:	d118      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_ADC_ConfigChannel+0x5d0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <HAL_ADC_ConfigChannel+0x5d4>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	0c9a      	lsrs	r2, r3, #18
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ad6:	e02e      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d10b      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x56c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae8:	d106      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002af6:	e01e      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b12      	cmp	r3, #18
 8002afe:	d11a      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b0c:	e013      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b20:	e00a      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b36:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	376c      	adds	r7, #108	; 0x6c
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	50000100 	.word	0x50000100
 8002b54:	50000400 	.word	0x50000400
 8002b58:	50000500 	.word	0x50000500
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	431bde83 	.word	0x431bde83

08002b64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b099      	sub	sp, #100	; 0x64
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7c:	d102      	bne.n	8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b7e:	4b6c      	ldr	r3, [pc, #432]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	e01a      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a69      	ldr	r2, [pc, #420]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d103      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	e011      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a66      	ldr	r2, [pc, #408]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d102      	bne.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ba0:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	e009      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a63      	ldr	r2, [pc, #396]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bb0:	4b60      	ldr	r3, [pc, #384]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	e001      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b0      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0a9      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 808d 	bne.w	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8086 	bne.w	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c00:	d004      	beq.n	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a4a      	ldr	r2, [pc, #296]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002c0e:	e000      	b.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c10:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002c12:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d040      	beq.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c2e:	035b      	lsls	r3, r3, #13
 8002c30:	430b      	orrs	r3, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c36:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d15c      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002c7a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d14b      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c88:	f023 030f 	bic.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	6811      	ldr	r1, [r2, #0]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	6892      	ldr	r2, [r2, #8]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c9a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c9c:	e03c      	b.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d108      	bne.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d123      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002cec:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d112      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cfa:	f023 030f 	bic.w	r3, r3, #15
 8002cfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d00:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d02:	e009      	b.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d16:	e000      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d18:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d26:	4618      	mov	r0, r3
 8002d28:	3764      	adds	r7, #100	; 0x64
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	50000100 	.word	0x50000100
 8002d34:	50000400 	.word	0x50000400
 8002d38:	50000500 	.word	0x50000500
 8002d3c:	50000300 	.word	0x50000300
 8002d40:	50000700 	.word	0x50000700

08002d44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d126      	bne.n	8002dac <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d115      	bne.n	8002da4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f007 fd9b 	bl	800a8e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002daa:	e004      	b.n	8002db6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff f8b5 	bl	8001f3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff f8a4 	bl	8001f4e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <ADC_Enable+0x2c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <ADC_Enable+0x2c>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <ADC_Enable+0x2e>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d143      	bne.n	8002eca <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <ADC_Enable+0xc4>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0210 	orr.w	r2, r3, #16
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e02f      	b.n	8002ecc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e7c:	f004 f96a 	bl	8007154 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e82:	e01b      	b.n	8002ebc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e84:	f004 f966 	bl	8007154 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d914      	bls.n	8002ebc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d00d      	beq.n	8002ebc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f043 0210 	orr.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e007      	b.n	8002ecc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d1dc      	bne.n	8002e84 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	8000003f 	.word	0x8000003f

08002ed8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d108      	bne.n	8002f04 <ADC_Disable+0x2c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <ADC_Disable+0x2c>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <ADC_Disable+0x2e>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d047      	beq.n	8002f9a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030d 	and.w	r3, r3, #13
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10f      	bne.n	8002f38 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0202 	orr.w	r2, r2, #2
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f30:	f004 f910 	bl	8007154 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f36:	e029      	b.n	8002f8c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e023      	b.n	8002f9c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f54:	f004 f8fe 	bl	8007154 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d914      	bls.n	8002f8c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10d      	bne.n	8002f8c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f043 0210 	orr.w	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e007      	b.n	8002f9c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d0dc      	beq.n	8002f54 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb2:	e160      	b.n	8003276 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8152 	beq.w	8003270 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d005      	beq.n	8002fe4 <HAL_GPIO_Init+0x40>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d130      	bne.n	8003046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800301a:	2201      	movs	r2, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0201 	and.w	r2, r3, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b03      	cmp	r3, #3
 8003050:	d017      	beq.n	8003082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d123      	bne.n	80030d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	6939      	ldr	r1, [r7, #16]
 80030d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0203 	and.w	r2, r3, #3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80ac 	beq.w	8003270 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003118:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <HAL_GPIO_Init+0x2f0>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4a5d      	ldr	r2, [pc, #372]	; (8003294 <HAL_GPIO_Init+0x2f0>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6193      	str	r3, [r2, #24]
 8003124:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <HAL_GPIO_Init+0x2f0>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003130:	4a59      	ldr	r2, [pc, #356]	; (8003298 <HAL_GPIO_Init+0x2f4>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	220f      	movs	r2, #15
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800315a:	d025      	beq.n	80031a8 <HAL_GPIO_Init+0x204>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a4f      	ldr	r2, [pc, #316]	; (800329c <HAL_GPIO_Init+0x2f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01f      	beq.n	80031a4 <HAL_GPIO_Init+0x200>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a4e      	ldr	r2, [pc, #312]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d019      	beq.n	80031a0 <HAL_GPIO_Init+0x1fc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a4d      	ldr	r2, [pc, #308]	; (80032a4 <HAL_GPIO_Init+0x300>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <HAL_GPIO_Init+0x1f8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a4c      	ldr	r2, [pc, #304]	; (80032a8 <HAL_GPIO_Init+0x304>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00d      	beq.n	8003198 <HAL_GPIO_Init+0x1f4>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a4b      	ldr	r2, [pc, #300]	; (80032ac <HAL_GPIO_Init+0x308>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <HAL_GPIO_Init+0x1f0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a4a      	ldr	r2, [pc, #296]	; (80032b0 <HAL_GPIO_Init+0x30c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_GPIO_Init+0x1ec>
 800318c:	2306      	movs	r3, #6
 800318e:	e00c      	b.n	80031aa <HAL_GPIO_Init+0x206>
 8003190:	2307      	movs	r3, #7
 8003192:	e00a      	b.n	80031aa <HAL_GPIO_Init+0x206>
 8003194:	2305      	movs	r3, #5
 8003196:	e008      	b.n	80031aa <HAL_GPIO_Init+0x206>
 8003198:	2304      	movs	r3, #4
 800319a:	e006      	b.n	80031aa <HAL_GPIO_Init+0x206>
 800319c:	2303      	movs	r3, #3
 800319e:	e004      	b.n	80031aa <HAL_GPIO_Init+0x206>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e002      	b.n	80031aa <HAL_GPIO_Init+0x206>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_GPIO_Init+0x206>
 80031a8:	2300      	movs	r3, #0
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	f002 0203 	and.w	r2, r2, #3
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	4093      	lsls	r3, r2
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031ba:	4937      	ldr	r1, [pc, #220]	; (8003298 <HAL_GPIO_Init+0x2f4>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c8:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <HAL_GPIO_Init+0x310>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031ec:	4a31      	ldr	r2, [pc, #196]	; (80032b4 <HAL_GPIO_Init+0x310>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_GPIO_Init+0x310>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_GPIO_Init+0x310>)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321c:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_GPIO_Init+0x310>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_GPIO_Init+0x310>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_GPIO_Init+0x310>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <HAL_GPIO_Init+0x310>)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	f47f ae97 	bne.w	8002fb4 <HAL_GPIO_Init+0x10>
  }
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	48000400 	.word	0x48000400
 80032a0:	48000800 	.word	0x48000800
 80032a4:	48000c00 	.word	0x48000c00
 80032a8:	48001000 	.word	0x48001000
 80032ac:	48001400 	.word	0x48001400
 80032b0:	48001800 	.word	0x48001800
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e001      	b.n	80032da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]
 80032f2:	4613      	mov	r3, r2
 80032f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f6:	787b      	ldrb	r3, [r7, #1]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032fc:	887a      	ldrh	r2, [r7, #2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003302:	e002      	b.n	800330a <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003304:	887a      	ldrh	r2, [r7, #2]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	4618      	mov	r0, r3
 8003334:	f003 fe8c 	bl	8007050 <HAL_GPIO_EXTI_Callback>
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e037      	b.n	80033ca <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003370:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003374:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f9c1 	bl	8003734 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}  
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_DMA_Start_IT+0x20>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e04a      	b.n	8003488 <HAL_DMA_Start_IT+0xb6>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003400:	2b01      	cmp	r3, #1
 8003402:	d13a      	bne.n	800347a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f956 	bl	80036da <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 020e 	orr.w	r2, r2, #14
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e00f      	b.n	8003468 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 020a 	orr.w	r2, r2, #10
 8003456:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e005      	b.n	8003486 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003486:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d008      	beq.n	80034b4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2204      	movs	r2, #4
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e020      	b.n	80034f6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 020e 	bic.w	r2, r2, #14
 80034c2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003512:	2b02      	cmp	r3, #2
 8003514:	d005      	beq.n	8003522 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e027      	b.n	8003572 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 020e 	bic.w	r2, r2, #14
 8003530:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	4798      	blx	r3
    } 
  }
  return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2204      	movs	r2, #4
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d024      	beq.n	80035ee <HAL_DMA_IRQHandler+0x72>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01f      	beq.n	80035ee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0204 	bic.w	r2, r2, #4
 80035ca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	2104      	movs	r1, #4
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d06a      	beq.n	80036ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80035ec:	e065      	b.n	80036ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2202      	movs	r2, #2
 80035f4:	409a      	lsls	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d02c      	beq.n	8003658 <HAL_DMA_IRQHandler+0xdc>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d027      	beq.n	8003658 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 020a 	bic.w	r2, r2, #10
 8003624:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2102      	movs	r1, #2
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d035      	beq.n	80036ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003656:	e030      	b.n	80036ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	2208      	movs	r2, #8
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d028      	beq.n	80036ba <HAL_DMA_IRQHandler+0x13e>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d023      	beq.n	80036ba <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 020e 	bic.w	r2, r2, #14
 8003680:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	2101      	movs	r1, #1
 800368c:	fa01 f202 	lsl.w	r2, r1, r2
 8003690:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
    }
  }
}  
 80036b8:	e7ff      	b.n	80036ba <HAL_DMA_IRQHandler+0x13e>
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f202 	lsl.w	r2, r1, r2
 80036f6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b10      	cmp	r3, #16
 8003706:	d108      	bne.n	800371a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003718:	e007      	b.n	800372a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	60da      	str	r2, [r3, #12]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <DMA_CalcBaseAndBitshift+0x5c>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d80f      	bhi.n	8003768 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <DMA_CalcBaseAndBitshift+0x60>)
 8003750:	4413      	add	r3, r2
 8003752:	4a11      	ldr	r2, [pc, #68]	; (8003798 <DMA_CalcBaseAndBitshift+0x64>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0e      	ldr	r2, [pc, #56]	; (800379c <DMA_CalcBaseAndBitshift+0x68>)
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003766:	e00e      	b.n	8003786 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8003770:	4413      	add	r3, r2
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <DMA_CalcBaseAndBitshift+0x64>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <DMA_CalcBaseAndBitshift+0x70>)
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	40020407 	.word	0x40020407
 8003794:	bffdfff8 	.word	0xbffdfff8
 8003798:	cccccccd 	.word	0xcccccccd
 800379c:	40020000 	.word	0x40020000
 80037a0:	bffdfbf8 	.word	0xbffdfbf8
 80037a4:	40020400 	.word	0x40020400

080037a8 <Gpt_Init>:
#include "Gpt.h"

static boolean g_Gpt_InitDone_b = FALSE;

void Gpt_Init(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
	g_Gpt_InitDone_b = TRUE;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <Gpt_Init+0x14>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200001b7 	.word	0x200001b7

080037c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e049      	b.n	8003866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f003 ff42 	bl	8007670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f000 ffb6 	bl	8004770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d001      	beq.n	8003888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e04f      	b.n	8003928 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a23      	ldr	r2, [pc, #140]	; (8003934 <HAL_TIM_Base_Start_IT+0xc4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01d      	beq.n	80038e6 <HAL_TIM_Base_Start_IT+0x76>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b2:	d018      	beq.n	80038e6 <HAL_TIM_Base_Start_IT+0x76>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <HAL_TIM_Base_Start_IT+0xc8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_TIM_Base_Start_IT+0x76>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_TIM_Base_Start_IT+0xcc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_TIM_Base_Start_IT+0x76>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_TIM_Base_Start_IT+0x76>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_TIM_Base_Start_IT+0xd4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_TIM_Base_Start_IT+0x76>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_TIM_Base_Start_IT+0xd8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d115      	bne.n	8003912 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <HAL_TIM_Base_Start_IT+0xdc>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b06      	cmp	r3, #6
 80038f6:	d015      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0xb4>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d011      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	e008      	b.n	8003924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e000      	b.n	8003926 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40013400 	.word	0x40013400
 8003944:	40014000 	.word	0x40014000
 8003948:	40015000 	.word	0x40015000
 800394c:	00010007 	.word	0x00010007

08003950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e049      	b.n	80039f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f841 	bl	80039fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f000 feee 	bl	8004770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_TIM_PWM_Start+0x24>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e03c      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d109      	bne.n	8003a4e <HAL_TIM_PWM_Start+0x3e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	e02f      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d109      	bne.n	8003a68 <HAL_TIM_PWM_Start+0x58>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e022      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d109      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x72>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e015      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d109      	bne.n	8003a9c <HAL_TIM_PWM_Start+0x8c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e008      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0a1      	b.n	8003bfa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0xb6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac4:	e023      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0xc6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	e01b      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0xd6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	e013      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Start+0xe6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af4:	e00b      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Start+0xf6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b04:	e003      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2201      	movs	r2, #1
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fb7b 	bl	8005212 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <HAL_TIM_PWM_Start+0x1f4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_TIM_PWM_Start+0x148>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a37      	ldr	r2, [pc, #220]	; (8003c08 <HAL_TIM_PWM_Start+0x1f8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_TIM_PWM_Start+0x148>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a35      	ldr	r2, [pc, #212]	; (8003c0c <HAL_TIM_PWM_Start+0x1fc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_TIM_PWM_Start+0x148>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <HAL_TIM_PWM_Start+0x200>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_TIM_PWM_Start+0x148>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <HAL_TIM_PWM_Start+0x204>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_TIM_PWM_Start+0x148>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a31      	ldr	r2, [pc, #196]	; (8003c18 <HAL_TIM_PWM_Start+0x208>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_TIM_PWM_Start+0x14c>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_TIM_PWM_Start+0x14e>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a23      	ldr	r2, [pc, #140]	; (8003c04 <HAL_TIM_PWM_Start+0x1f4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0x1a8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d018      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0x1a8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_TIM_PWM_Start+0x20c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0x1a8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_TIM_PWM_Start+0x210>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0x1a8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <HAL_TIM_PWM_Start+0x1f8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0x1a8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_TIM_PWM_Start+0x1fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0x1a8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <HAL_TIM_PWM_Start+0x208>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d115      	bne.n	8003be4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_TIM_PWM_Start+0x214>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d015      	beq.n	8003bf6 <HAL_TIM_PWM_Start+0x1e6>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d011      	beq.n	8003bf6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	e008      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e000      	b.n	8003bf8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40013400 	.word	0x40013400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800
 8003c18:	40015000 	.word	0x40015000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	00010007 	.word	0x00010007

08003c28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e049      	b.n	8003cce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f841 	bl	8003cd6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 fd82 	bl	8004770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_IC_Start_IT+0x1e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e023      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x66>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_IC_Start_IT+0x2e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e01b      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x66>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_IC_Start_IT+0x3e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e013      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x66>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_IC_Start_IT+0x4e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e00b      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x66>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_IC_Start_IT+0x5e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e003      	b.n	8003d4e <HAL_TIM_IC_Start_IT+0x66>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_TIM_IC_Start_IT+0x78>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e013      	b.n	8003d88 <HAL_TIM_IC_Start_IT+0xa0>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d104      	bne.n	8003d70 <HAL_TIM_IC_Start_IT+0x88>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e00b      	b.n	8003d88 <HAL_TIM_IC_Start_IT+0xa0>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d104      	bne.n	8003d80 <HAL_TIM_IC_Start_IT+0x98>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e003      	b.n	8003d88 <HAL_TIM_IC_Start_IT+0xa0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d8a:	7bbb      	ldrb	r3, [r7, #14]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d90:	7b7b      	ldrb	r3, [r7, #13]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d001      	beq.n	8003d9a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0dd      	b.n	8003f56 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_IC_Start_IT+0xc2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	e023      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0x10a>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_IC_Start_IT+0xd2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db8:	e01b      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0x10a>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_IC_Start_IT+0xe2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc8:	e013      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0x10a>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_IC_Start_IT+0xf2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd8:	e00b      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0x10a>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_IC_Start_IT+0x102>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de8:	e003      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0x10a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_IC_Start_IT+0x11a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e00:	e013      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x142>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d104      	bne.n	8003e12 <HAL_TIM_IC_Start_IT+0x12a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e10:	e00b      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x142>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_IC_Start_IT+0x13a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e20:	e003      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x142>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d841      	bhi.n	8003eb4 <HAL_TIM_IC_Start_IT+0x1cc>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <HAL_TIM_IC_Start_IT+0x150>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003eb5 	.word	0x08003eb5
 8003e40:	08003eb5 	.word	0x08003eb5
 8003e44:	08003eb5 	.word	0x08003eb5
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003eb5 	.word	0x08003eb5
 8003e54:	08003eb5 	.word	0x08003eb5
 8003e58:	08003e91 	.word	0x08003e91
 8003e5c:	08003eb5 	.word	0x08003eb5
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003eb5 	.word	0x08003eb5
 8003e68:	08003ea3 	.word	0x08003ea3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0202 	orr.w	r2, r2, #2
 8003e7a:	60da      	str	r2, [r3, #12]
      break;
 8003e7c:	e01d      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0204 	orr.w	r2, r2, #4
 8003e8c:	60da      	str	r2, [r3, #12]
      break;
 8003e8e:	e014      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	60da      	str	r2, [r3, #12]
      break;
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0210 	orr.w	r2, r2, #16
 8003eb0:	60da      	str	r2, [r3, #12]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d149      	bne.n	8003f54 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f9a2 	bl	8005212 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <HAL_TIM_IC_Start_IT+0x278>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d01d      	beq.n	8003f14 <HAL_TIM_IC_Start_IT+0x22c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d018      	beq.n	8003f14 <HAL_TIM_IC_Start_IT+0x22c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <HAL_TIM_IC_Start_IT+0x27c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_TIM_IC_Start_IT+0x22c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_TIM_IC_Start_IT+0x280>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <HAL_TIM_IC_Start_IT+0x22c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_TIM_IC_Start_IT+0x284>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d009      	beq.n	8003f14 <HAL_TIM_IC_Start_IT+0x22c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1a      	ldr	r2, [pc, #104]	; (8003f70 <HAL_TIM_IC_Start_IT+0x288>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_IC_Start_IT+0x22c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_TIM_IC_Start_IT+0x28c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d115      	bne.n	8003f40 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <HAL_TIM_IC_Start_IT+0x290>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d015      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x26a>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d011      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	e008      	b.n	8003f52 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e000      	b.n	8003f54 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40015000 	.word	0x40015000
 8003f78:	00010007 	.word	0x00010007

08003f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d122      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0202 	mvn.w	r2, #2
 8003fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd ffa6 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fbb6 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fbbc 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d122      	bne.n	800402c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d11b      	bne.n	800402c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0204 	mvn.w	r2, #4
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fd ff7c 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fb8c 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fb92 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b08      	cmp	r3, #8
 8004038:	d122      	bne.n	8004080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b08      	cmp	r3, #8
 8004046:	d11b      	bne.n	8004080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0208 	mvn.w	r2, #8
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2204      	movs	r2, #4
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd ff52 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fb62 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb68 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b10      	cmp	r3, #16
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b10      	cmp	r3, #16
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0210 	mvn.w	r2, #16
 80040a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2208      	movs	r2, #8
 80040aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd ff28 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb38 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb3e 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0201 	mvn.w	r2, #1
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd ff13 	bl	8001f26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b80      	cmp	r3, #128	; 0x80
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f001 f92d 	bl	8005386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	d10e      	bne.n	800415a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d107      	bne.n	800415a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 f91f 	bl	8005398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	d10e      	bne.n	8004186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d107      	bne.n	8004186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 faeb 	bl	800475c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b20      	cmp	r3, #32
 8004192:	d10e      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d107      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f06f 0220 	mvn.w	r2, #32
 80041aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f001 f8e1 	bl	8005374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e088      	b.n	80042ea <HAL_TIM_IC_ConfigChannel+0x130>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11b      	bne.n	800421e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f000 fe57 	bl	8004ea8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 020c 	bic.w	r2, r2, #12
 8004208:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6999      	ldr	r1, [r3, #24]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	619a      	str	r2, [r3, #24]
 800421c:	e060      	b.n	80042e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d11c      	bne.n	800425e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6819      	ldr	r1, [r3, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f000 fed2 	bl	8004fdc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004246:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6999      	ldr	r1, [r3, #24]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	021a      	lsls	r2, r3, #8
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	619a      	str	r2, [r3, #24]
 800425c:	e040      	b.n	80042e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d11b      	bne.n	800429c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f000 ff1d 	bl	80050b2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 020c 	bic.w	r2, r2, #12
 8004286:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69d9      	ldr	r1, [r3, #28]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	61da      	str	r2, [r3, #28]
 800429a:	e021      	b.n	80042e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d11c      	bne.n	80042dc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6819      	ldr	r1, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f000 ff39 	bl	8005128 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042c4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	021a      	lsls	r2, r3, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]
 80042da:	e001      	b.n	80042e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800430e:	2302      	movs	r3, #2
 8004310:	e0ff      	b.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b14      	cmp	r3, #20
 800431e:	f200 80f0 	bhi.w	8004502 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800437d 	.word	0x0800437d
 800432c:	08004503 	.word	0x08004503
 8004330:	08004503 	.word	0x08004503
 8004334:	08004503 	.word	0x08004503
 8004338:	080043bd 	.word	0x080043bd
 800433c:	08004503 	.word	0x08004503
 8004340:	08004503 	.word	0x08004503
 8004344:	08004503 	.word	0x08004503
 8004348:	080043ff 	.word	0x080043ff
 800434c:	08004503 	.word	0x08004503
 8004350:	08004503 	.word	0x08004503
 8004354:	08004503 	.word	0x08004503
 8004358:	0800443f 	.word	0x0800443f
 800435c:	08004503 	.word	0x08004503
 8004360:	08004503 	.word	0x08004503
 8004364:	08004503 	.word	0x08004503
 8004368:	08004481 	.word	0x08004481
 800436c:	08004503 	.word	0x08004503
 8004370:	08004503 	.word	0x08004503
 8004374:	08004503 	.word	0x08004503
 8004378:	080044c1 	.word	0x080044c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa90 	bl	80048a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0208 	orr.w	r2, r2, #8
 8004396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0204 	bic.w	r2, r2, #4
 80043a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6999      	ldr	r1, [r3, #24]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	619a      	str	r2, [r3, #24]
      break;
 80043ba:	e0a5      	b.n	8004508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fb0a 	bl	80049dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6999      	ldr	r1, [r3, #24]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	021a      	lsls	r2, r3, #8
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	619a      	str	r2, [r3, #24]
      break;
 80043fc:	e084      	b.n	8004508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fb7b 	bl	8004b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0208 	orr.w	r2, r2, #8
 8004418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0204 	bic.w	r2, r2, #4
 8004428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69d9      	ldr	r1, [r3, #28]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	61da      	str	r2, [r3, #28]
      break;
 800443c:	e064      	b.n	8004508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fbed 	bl	8004c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69d9      	ldr	r1, [r3, #28]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	021a      	lsls	r2, r3, #8
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	61da      	str	r2, [r3, #28]
      break;
 800447e:	e043      	b.n	8004508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fc3a 	bl	8004d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0208 	orr.w	r2, r2, #8
 800449a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0204 	bic.w	r2, r2, #4
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044be:	e023      	b.n	8004508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fc84 	bl	8004dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004500:	e002      	b.n	8004508 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	75fb      	strb	r3, [r7, #23]
      break;
 8004506:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop

0800451c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIM_ConfigClockSource+0x1c>
 8004534:	2302      	movs	r3, #2
 8004536:	e0b6      	b.n	80046a6 <HAL_TIM_ConfigClockSource+0x18a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800455a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004574:	d03e      	beq.n	80045f4 <HAL_TIM_ConfigClockSource+0xd8>
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457a:	f200 8087 	bhi.w	800468c <HAL_TIM_ConfigClockSource+0x170>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	f000 8086 	beq.w	8004692 <HAL_TIM_ConfigClockSource+0x176>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	d87f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x170>
 800458c:	2b70      	cmp	r3, #112	; 0x70
 800458e:	d01a      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xaa>
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d87b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x170>
 8004594:	2b60      	cmp	r3, #96	; 0x60
 8004596:	d050      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x11e>
 8004598:	2b60      	cmp	r3, #96	; 0x60
 800459a:	d877      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x170>
 800459c:	2b50      	cmp	r3, #80	; 0x50
 800459e:	d03c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xfe>
 80045a0:	2b50      	cmp	r3, #80	; 0x50
 80045a2:	d873      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x170>
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d058      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x13e>
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d86f      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x170>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d064      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15e>
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d86b      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x170>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d060      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15e>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d867      	bhi.n	800468c <HAL_TIM_ConfigClockSource+0x170>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05c      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15e>
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d05a      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x15e>
 80045c4:	e062      	b.n	800468c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f000 fdfd 	bl	80051d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	609a      	str	r2, [r3, #8]
      break;
 80045f2:	e04f      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f000 fde6 	bl	80051d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004616:	609a      	str	r2, [r3, #8]
      break;
 8004618:	e03c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fcaa 	bl	8004f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2150      	movs	r1, #80	; 0x50
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fdb4 	bl	80051a0 <TIM_ITRx_SetConfig>
      break;
 8004638:	e02c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fd04 	bl	8005054 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2160      	movs	r1, #96	; 0x60
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fda4 	bl	80051a0 <TIM_ITRx_SetConfig>
      break;
 8004658:	e01c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f000 fc8a 	bl	8004f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2140      	movs	r1, #64	; 0x40
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fd94 	bl	80051a0 <TIM_ITRx_SetConfig>
      break;
 8004678:	e00c      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f000 fd8b 	bl	80051a0 <TIM_ITRx_SetConfig>
      break;
 800468a:	e003      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e000      	b.n	8004694 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d831      	bhi.n	8004728 <HAL_TIM_ReadCapturedValue+0x78>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004729 	.word	0x08004729
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004729 	.word	0x08004729
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	08004729 	.word	0x08004729
 80046e4:	08004729 	.word	0x08004729
 80046e8:	08004729 	.word	0x08004729
 80046ec:	08004715 	.word	0x08004715
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004729 	.word	0x08004729
 80046fc:	0800471f 	.word	0x0800471f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	60fb      	str	r3, [r7, #12]

      break;
 8004708:	e00f      	b.n	800472a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	60fb      	str	r3, [r7, #12]

      break;
 8004712:	e00a      	b.n	800472a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	60fb      	str	r3, [r7, #12]

      break;
 800471c:	e005      	b.n	800472a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	60fb      	str	r3, [r7, #12]

      break;
 8004726:	e000      	b.n	800472a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004728:	bf00      	nop
  }

  return tmpreg;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop

08004738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
	...

08004770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a41      	ldr	r2, [pc, #260]	; (8004888 <TIM_Base_SetConfig+0x118>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478e:	d00f      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3e      	ldr	r2, [pc, #248]	; (800488c <TIM_Base_SetConfig+0x11c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00b      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3d      	ldr	r2, [pc, #244]	; (8004890 <TIM_Base_SetConfig+0x120>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <TIM_Base_SetConfig+0x124>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3b      	ldr	r2, [pc, #236]	; (8004898 <TIM_Base_SetConfig+0x128>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d108      	bne.n	80047c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a30      	ldr	r2, [pc, #192]	; (8004888 <TIM_Base_SetConfig+0x118>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01f      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d01b      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2d      	ldr	r2, [pc, #180]	; (800488c <TIM_Base_SetConfig+0x11c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d017      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <TIM_Base_SetConfig+0x120>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2b      	ldr	r2, [pc, #172]	; (8004894 <TIM_Base_SetConfig+0x124>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00f      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <TIM_Base_SetConfig+0x12c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <TIM_Base_SetConfig+0x130>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <TIM_Base_SetConfig+0x134>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0x9a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a24      	ldr	r2, [pc, #144]	; (8004898 <TIM_Base_SetConfig+0x128>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a11      	ldr	r2, [pc, #68]	; (8004888 <TIM_Base_SetConfig+0x118>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <TIM_Base_SetConfig+0x100>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <TIM_Base_SetConfig+0x124>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x100>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a12      	ldr	r2, [pc, #72]	; (800489c <TIM_Base_SetConfig+0x12c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x100>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <TIM_Base_SetConfig+0x130>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x100>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <TIM_Base_SetConfig+0x134>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x100>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <TIM_Base_SetConfig+0x128>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d103      	bne.n	8004878 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	615a      	str	r2, [r3, #20]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40013400 	.word	0x40013400
 8004898:	40015000 	.word	0x40015000
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800

080048a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0302 	bic.w	r3, r3, #2
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <TIM_OC1_SetConfig+0x11c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <TIM_OC1_SetConfig+0x88>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <TIM_OC1_SetConfig+0x120>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <TIM_OC1_SetConfig+0x88>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <TIM_OC1_SetConfig+0x124>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_OC1_SetConfig+0x88>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2d      	ldr	r2, [pc, #180]	; (80049d0 <TIM_OC1_SetConfig+0x128>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_OC1_SetConfig+0x88>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <TIM_OC1_SetConfig+0x12c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC1_SetConfig+0x88>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <TIM_OC1_SetConfig+0x130>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10c      	bne.n	800494a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0308 	bic.w	r3, r3, #8
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <TIM_OC1_SetConfig+0x11c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <TIM_OC1_SetConfig+0xd2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <TIM_OC1_SetConfig+0x120>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00f      	beq.n	800497a <TIM_OC1_SetConfig+0xd2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <TIM_OC1_SetConfig+0x124>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00b      	beq.n	800497a <TIM_OC1_SetConfig+0xd2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <TIM_OC1_SetConfig+0x128>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d007      	beq.n	800497a <TIM_OC1_SetConfig+0xd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <TIM_OC1_SetConfig+0x12c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_OC1_SetConfig+0xd2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <TIM_OC1_SetConfig+0x130>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d111      	bne.n	800499e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	621a      	str	r2, [r3, #32]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40013400 	.word	0x40013400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800
 80049d8:	40015000 	.word	0x40015000

080049dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0210 	bic.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0320 	bic.w	r3, r3, #32
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <TIM_OC2_SetConfig+0x10c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC2_SetConfig+0x74>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <TIM_OC2_SetConfig+0x110>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC2_SetConfig+0x74>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <TIM_OC2_SetConfig+0x114>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10d      	bne.n	8004a6c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <TIM_OC2_SetConfig+0x10c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <TIM_OC2_SetConfig+0xc0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <TIM_OC2_SetConfig+0x110>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00f      	beq.n	8004a9c <TIM_OC2_SetConfig+0xc0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <TIM_OC2_SetConfig+0x118>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <TIM_OC2_SetConfig+0xc0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <TIM_OC2_SetConfig+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_OC2_SetConfig+0xc0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <TIM_OC2_SetConfig+0x120>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_OC2_SetConfig+0xc0>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_OC2_SetConfig+0x114>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d113      	bne.n	8004ac4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aaa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40013400 	.word	0x40013400
 8004af0:	40015000 	.word	0x40015000
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <TIM_OC3_SetConfig+0x10c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <TIM_OC3_SetConfig+0x72>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2a      	ldr	r2, [pc, #168]	; (8004c10 <TIM_OC3_SetConfig+0x110>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC3_SetConfig+0x72>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a29      	ldr	r2, [pc, #164]	; (8004c14 <TIM_OC3_SetConfig+0x114>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10d      	bne.n	8004b8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <TIM_OC3_SetConfig+0x10c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <TIM_OC3_SetConfig+0xbe>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <TIM_OC3_SetConfig+0x110>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00f      	beq.n	8004bbe <TIM_OC3_SetConfig+0xbe>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <TIM_OC3_SetConfig+0x118>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <TIM_OC3_SetConfig+0xbe>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <TIM_OC3_SetConfig+0x11c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d007      	beq.n	8004bbe <TIM_OC3_SetConfig+0xbe>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <TIM_OC3_SetConfig+0x120>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_OC3_SetConfig+0xbe>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <TIM_OC3_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d113      	bne.n	8004be6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	621a      	str	r2, [r3, #32]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40015000 	.word	0x40015000
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800

08004c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <TIM_OC4_SetConfig+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <TIM_OC4_SetConfig+0x8c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <TIM_OC4_SetConfig+0xc8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_OC4_SetConfig+0x8c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <TIM_OC4_SetConfig+0xcc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_OC4_SetConfig+0x8c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <TIM_OC4_SetConfig+0xd0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_OC4_SetConfig+0x8c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <TIM_OC4_SetConfig+0xd4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC4_SetConfig+0x8c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <TIM_OC4_SetConfig+0xd8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d109      	bne.n	8004cc4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	019b      	lsls	r3, r3, #6
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800
 8004cfc:	40015000 	.word	0x40015000

08004d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <TIM_OC5_SetConfig+0xbc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_OC5_SetConfig+0x82>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <TIM_OC5_SetConfig+0xc0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_OC5_SetConfig+0x82>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <TIM_OC5_SetConfig+0xc4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_OC5_SetConfig+0x82>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <TIM_OC5_SetConfig+0xc8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_OC5_SetConfig+0x82>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_OC5_SetConfig+0xcc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC5_SetConfig+0x82>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <TIM_OC5_SetConfig+0xd0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d109      	bne.n	8004d96 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800
 8004dd0:	40015000 	.word	0x40015000

08004dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	051b      	lsls	r3, r3, #20
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <TIM_OC6_SetConfig+0xbc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <TIM_OC6_SetConfig+0x84>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <TIM_OC6_SetConfig+0xc0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00f      	beq.n	8004e58 <TIM_OC6_SetConfig+0x84>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <TIM_OC6_SetConfig+0xc4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_OC6_SetConfig+0x84>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <TIM_OC6_SetConfig+0xc8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_OC6_SetConfig+0x84>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <TIM_OC6_SetConfig+0xcc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC6_SetConfig+0x84>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <TIM_OC6_SetConfig+0xd0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d109      	bne.n	8004e6c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	40013400 	.word	0x40013400
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800
 8004ea4:	40015000 	.word	0x40015000

08004ea8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0201 	bic.w	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <TIM_TI1_SetConfig+0xc0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d017      	beq.n	8004f06 <TIM_TI1_SetConfig+0x5e>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004edc:	d013      	beq.n	8004f06 <TIM_TI1_SetConfig+0x5e>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <TIM_TI1_SetConfig+0xc4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00f      	beq.n	8004f06 <TIM_TI1_SetConfig+0x5e>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <TIM_TI1_SetConfig+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <TIM_TI1_SetConfig+0x5e>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a20      	ldr	r2, [pc, #128]	; (8004f74 <TIM_TI1_SetConfig+0xcc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <TIM_TI1_SetConfig+0x5e>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <TIM_TI1_SetConfig+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_TI1_SetConfig+0x5e>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <TIM_TI1_SetConfig+0xd4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <TIM_TI1_SetConfig+0x62>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <TIM_TI1_SetConfig+0x64>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e003      	b.n	8004f2a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f023 030a 	bic.w	r3, r3, #10
 8004f44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 030a 	and.w	r3, r3, #10
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40015000 	.word	0x40015000

08004f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 030a 	bic.w	r3, r3, #10
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f023 0210 	bic.w	r2, r3, #16
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	031b      	lsls	r3, r3, #12
 8005020:	b29b      	uxth	r3, r3
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800502e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800507e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	031b      	lsls	r3, r3, #12
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005090:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005102:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005166:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	031b      	lsls	r3, r3, #12
 800516c:	b29b      	uxth	r3, r3
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800517a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	031b      	lsls	r3, r3, #12
 8005180:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	f043 0307 	orr.w	r3, r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	609a      	str	r2, [r3, #8]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005212:	b480      	push	{r7}
 8005214:	b087      	sub	sp, #28
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2201      	movs	r2, #1
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	43db      	mvns	r3, r3
 8005234:	401a      	ands	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	fa01 f303 	lsl.w	r3, r1, r3
 800524a:	431a      	orrs	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	621a      	str	r2, [r3, #32]
}
 8005250:	bf00      	nop
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e06d      	b.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a30      	ldr	r2, [pc, #192]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2f      	ldr	r2, [pc, #188]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2d      	ldr	r2, [pc, #180]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d108      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d018      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a16      	ldr	r2, [pc, #88]	; (8005370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a11      	ldr	r2, [pc, #68]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10c      	bne.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40013400 	.word	0x40013400
 8005364:	40015000 	.word	0x40015000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40014000 	.word	0x40014000

08005374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
	...

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0a7      	b.n	800550e <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d12c      	bne.n	8005424 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a50      	ldr	r2, [pc, #320]	; (8005518 <HAL_I2C_Init+0x16c>)
 80053d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a50      	ldr	r2, [pc, #320]	; (800551c <HAL_I2C_Init+0x170>)
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a4f      	ldr	r2, [pc, #316]	; (8005520 <HAL_I2C_Init+0x174>)
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a4f      	ldr	r2, [pc, #316]	; (8005524 <HAL_I2C_Init+0x178>)
 80053e8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a4e      	ldr	r2, [pc, #312]	; (8005528 <HAL_I2C_Init+0x17c>)
 80053ee:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a4e      	ldr	r2, [pc, #312]	; (800552c <HAL_I2C_Init+0x180>)
 80053f4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a4d      	ldr	r2, [pc, #308]	; (8005530 <HAL_I2C_Init+0x184>)
 80053fa:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a4d      	ldr	r2, [pc, #308]	; (8005534 <HAL_I2C_Init+0x188>)
 8005400:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a4c      	ldr	r2, [pc, #304]	; (8005538 <HAL_I2C_Init+0x18c>)
 8005406:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a4c      	ldr	r2, [pc, #304]	; (800553c <HAL_I2C_Init+0x190>)
 800540c:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a49      	ldr	r2, [pc, #292]	; (8005540 <HAL_I2C_Init+0x194>)
 800541a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005448:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005458:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d107      	bne.n	8005472 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	e006      	b.n	8005480 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800547e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d104      	bne.n	8005492 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005490:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69d9      	ldr	r1, [r3, #28]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1a      	ldr	r2, [r3, #32]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	08005955 	.word	0x08005955
 800551c:	08005967 	.word	0x08005967
 8005520:	08005979 	.word	0x08005979
 8005524:	0800598b 	.word	0x0800598b
 8005528:	080059b7 	.word	0x080059b7
 800552c:	0800a92d 	.word	0x0800a92d
 8005530:	0800a94d 	.word	0x0800a94d
 8005534:	0800a96d 	.word	0x0800a96d
 8005538:	080059c9 	.word	0x080059c9
 800553c:	0800599d 	.word	0x0800599d
 8005540:	08007499 	.word	0x08007499

08005544 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4603      	mov	r3, r0
 8005554:	817b      	strh	r3, [r7, #10]
 8005556:	460b      	mov	r3, r1
 8005558:	813b      	strh	r3, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b20      	cmp	r3, #32
 8005568:	f040 80d5 	bne.w	8005716 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_I2C_Mem_Write_DMA+0x34>
 8005572:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0c9      	b.n	8005718 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005592:	d101      	bne.n	8005598 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
 8005596:	e0bf      	b.n	8005718 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_I2C_Mem_Write_DMA+0x62>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0b8      	b.n	8005718 <HAL_I2C_Mem_Write_DMA+0x1d4>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ae:	f001 fdd1 	bl	8007154 <HAL_GetTick>
 80055b2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2221      	movs	r2, #33	; 0x21
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2240      	movs	r2, #64	; 0x40
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a51      	ldr	r2, [pc, #324]	; (8005720 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a51      	ldr	r2, [pc, #324]	; (8005724 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2bff      	cmp	r3, #255	; 0xff
 80055ea:	d906      	bls.n	80055fa <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	22ff      	movs	r2, #255	; 0xff
 80055f0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80055f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	e007      	b.n	800560a <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005608:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 800560a:	88f8      	ldrh	r0, [r7, #6]
 800560c:	893a      	ldrh	r2, [r7, #8]
 800560e:	8979      	ldrh	r1, [r7, #10]
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	2319      	movs	r3, #25
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	4603      	mov	r3, r0
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 fcbe 	bl	8005f9c <I2C_RequestMemoryWrite>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e072      	b.n	8005718 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d020      	beq.n	800567c <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8005640:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	4a39      	ldr	r2, [pc, #228]	; (800572c <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8005648:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	2200      	movs	r2, #0
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	2200      	movs	r2, #0
 8005658:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800565e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3328      	adds	r3, #40	; 0x28
 8005666:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800566c:	f7fd feb1 	bl	80033d2 <HAL_DMA_Start_IT>
 8005670:	4603      	mov	r3, r0
 8005672:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d139      	bne.n	80056ee <HAL_I2C_Mem_Write_DMA+0x1aa>
 800567a:	e013      	b.n	80056a4 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005690:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e039      	b.n	8005718 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	8979      	ldrh	r1, [r7, #10]
 80056ac:	2300      	movs	r3, #0
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f001 fb4c 	bl	8006d50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056d2:	2110      	movs	r1, #16
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f001 fb67 	bl	8006da8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e014      	b.n	8005718 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f043 0210 	orr.w	r2, r3, #16
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	ffff0000 	.word	0xffff0000
 8005724:	08005bf7 	.word	0x08005bf7
 8005728:	080069cd 	.word	0x080069cd
 800572c:	08006af9 	.word	0x08006af9

08005730 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	; 0x28
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	461a      	mov	r2, r3
 800573e:	4603      	mov	r3, r0
 8005740:	817b      	strh	r3, [r7, #10]
 8005742:	460b      	mov	r3, r1
 8005744:	813b      	strh	r3, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	f040 80d5 	bne.w	8005902 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_I2C_Mem_Read_DMA+0x34>
 800575e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d105      	bne.n	8005770 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0c9      	b.n	8005904 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800577a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800577e:	d101      	bne.n	8005784 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
 8005782:	e0bf      	b.n	8005904 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_I2C_Mem_Read_DMA+0x62>
 800578e:	2302      	movs	r3, #2
 8005790:	e0b8      	b.n	8005904 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800579a:	f001 fcdb 	bl	8007154 <HAL_GetTick>
 800579e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2222      	movs	r2, #34	; 0x22
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2240      	movs	r2, #64	; 0x40
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a51      	ldr	r2, [pc, #324]	; (800590c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4a51      	ldr	r2, [pc, #324]	; (8005910 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80057cc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2bff      	cmp	r3, #255	; 0xff
 80057d6:	d906      	bls.n	80057e6 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	22ff      	movs	r2, #255	; 0xff
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80057de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	e007      	b.n	80057f6 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80057f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057f4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80057f6:	88f8      	ldrh	r0, [r7, #6]
 80057f8:	893a      	ldrh	r2, [r7, #8]
 80057fa:	8979      	ldrh	r1, [r7, #10]
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	2319      	movs	r3, #25
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4603      	mov	r3, r0
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fc1c 	bl	8006044 <I2C_RequestMemoryRead>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e072      	b.n	8005904 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d020      	beq.n	8005868 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	4a3a      	ldr	r2, [pc, #232]	; (8005914 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 800582c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	4a39      	ldr	r2, [pc, #228]	; (8005918 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8005834:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583a:	2200      	movs	r2, #0
 800583c:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	2200      	movs	r2, #0
 8005844:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3324      	adds	r3, #36	; 0x24
 8005850:	4619      	mov	r1, r3
 8005852:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005858:	f7fd fdbb 	bl	80033d2 <HAL_DMA_Start_IT>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d139      	bne.n	80058da <HAL_I2C_Mem_Read_DMA+0x1aa>
 8005866:	e013      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e039      	b.n	8005904 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005894:	b2da      	uxtb	r2, r3
 8005896:	8979      	ldrh	r1, [r7, #10]
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f001 fa56 	bl	8006d50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80058be:	2110      	movs	r1, #16
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f001 fa71 	bl	8006da8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e014      	b.n	8005904 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	f043 0210 	orr.w	r2, r3, #16
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8005902:	2302      	movs	r3, #2
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	ffff0000 	.word	0xffff0000
 8005910:	08005bf7 	.word	0x08005bf7
 8005914:	08006a63 	.word	0x08006a63
 8005918:	08006af9 	.word	0x08006af9
 800591c:	80002400 	.word	0x80002400

08005920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
  }
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr

08005966 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
 80059a8:	4613      	mov	r3, r2
 80059aa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <I2C_Slave_ISR_IT+0x24>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e0ec      	b.n	8005bee <I2C_Slave_ISR_IT+0x1fe>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a34:	6939      	ldr	r1, [r7, #16]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fd4a 	bl	80064d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d04d      	beq.n	8005ae4 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d047      	beq.n	8005ae4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d128      	bne.n	8005ab0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b28      	cmp	r3, #40	; 0x28
 8005a68:	d108      	bne.n	8005a7c <I2C_Slave_ISR_IT+0x8c>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a70:	d104      	bne.n	8005a7c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fe37 	bl	80066e8 <I2C_ITListenCplt>
 8005a7a:	e032      	b.n	8005ae2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b29      	cmp	r3, #41	; 0x29
 8005a86:	d10e      	bne.n	8005aa6 <I2C_Slave_ISR_IT+0xb6>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a8e:	d00a      	beq.n	8005aa6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2210      	movs	r2, #16
 8005a96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 ff74 	bl	8006986 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fbe7 	bl	8006272 <I2C_ITSlaveSeqCplt>
 8005aa4:	e01d      	b.n	8005ae2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2210      	movs	r2, #16
 8005aac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005aae:	e096      	b.n	8005bde <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abc:	f043 0204 	orr.w	r2, r3, #4
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <I2C_Slave_ISR_IT+0xe4>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad0:	f040 8085 	bne.w	8005bde <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad8:	4619      	mov	r1, r3
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fe5a 	bl	8006794 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ae0:	e07d      	b.n	8005bde <I2C_Slave_ISR_IT+0x1ee>
 8005ae2:	e07c      	b.n	8005bde <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d030      	beq.n	8005b52 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	089b      	lsrs	r3, r3, #2
 8005af4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02a      	beq.n	8005b52 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d14f      	bne.n	8005be2 <I2C_Slave_ISR_IT+0x1f2>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b48:	d04b      	beq.n	8005be2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fb91 	bl	8006272 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005b50:	e047      	b.n	8005be2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	08db      	lsrs	r3, r3, #3
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	08db      	lsrs	r3, r3, #3
 8005b62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b6a:	6939      	ldr	r1, [r7, #16]
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fabd 	bl	80060ec <I2C_ITAddrCplt>
 8005b72:	e037      	b.n	8005be4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d031      	beq.n	8005be4 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02b      	beq.n	8005be4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d018      	beq.n	8005bc8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	851a      	strh	r2, [r3, #40]	; 0x28
 8005bc6:	e00d      	b.n	8005be4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bce:	d002      	beq.n	8005bd6 <I2C_Slave_ISR_IT+0x1e6>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fb4b 	bl	8006272 <I2C_ITSlaveSeqCplt>
 8005bdc:	e002      	b.n	8005be4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005be2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b088      	sub	sp, #32
 8005bfa:	af02      	add	r7, sp, #8
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <I2C_Master_ISR_DMA+0x1a>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e0e1      	b.n	8005dd4 <I2C_Master_ISR_DMA+0x1de>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	091b      	lsrs	r3, r3, #4
 8005c28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d011      	beq.n	8005c54 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2210      	movs	r2, #16
 8005c36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3c:	f043 0204 	orr.w	r2, r3, #4
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c44:	2120      	movs	r1, #32
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f001 f8ae 	bl	8006da8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fe9a 	bl	8006986 <I2C_Flush_TXDR>
 8005c52:	e0ba      	b.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	09db      	lsrs	r3, r3, #7
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d072      	beq.n	8005d46 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	099b      	lsrs	r3, r3, #6
 8005c64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d06c      	beq.n	8005d46 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d04e      	beq.n	8005d24 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2bff      	cmp	r3, #255	; 0xff
 8005c9c:	d906      	bls.n	8005cac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	22ff      	movs	r2, #255	; 0xff
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e010      	b.n	8005cce <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cbe:	d003      	beq.n	8005cc8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	e002      	b.n	8005cce <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ccc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	8a79      	ldrh	r1, [r7, #18]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f001 f837 	bl	8006d50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b22      	cmp	r3, #34	; 0x22
 8005cfe:	d108      	bne.n	8005d12 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d10:	e05b      	b.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d22:	e052      	b.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d32:	d003      	beq.n	8005d3c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fa5d 	bl	80061f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005d3a:	e046      	b.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d3c:	2140      	movs	r1, #64	; 0x40
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fd28 	bl	8006794 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d44:	e041      	b.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	099b      	lsrs	r3, r3, #6
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d029      	beq.n	8005da6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	099b      	lsrs	r3, r3, #6
 8005d56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d023      	beq.n	8005da6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d119      	bne.n	8005d9c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d76:	d027      	beq.n	8005dc8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d80:	d108      	bne.n	8005d94 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d90:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005d92:	e019      	b.n	8005dc8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fa2d 	bl	80061f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005d9a:	e015      	b.n	8005dc8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fcf8 	bl	8006794 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005da4:	e010      	b.n	8005dc8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fab7 	bl	8006334 <I2C_ITMasterCplt>
 8005dc6:	e000      	b.n	8005dca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005dc8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <I2C_Slave_ISR_DMA+0x24>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e0c9      	b.n	8005f94 <I2C_Slave_ISR_DMA+0x1b8>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fb54 	bl	80064d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 809a 	beq.w	8005f6a <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8093 	beq.w	8005f6a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	0b9b      	lsrs	r3, r3, #14
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	0bdb      	lsrs	r3, r3, #15
 8005e54:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d07f      	beq.n	8005f5c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	0bdb      	lsrs	r3, r3, #15
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0b9b      	lsrs	r3, r3, #14
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d007      	beq.n	8005ea4 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d128      	bne.n	8005efc <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b28      	cmp	r3, #40	; 0x28
 8005eb4:	d108      	bne.n	8005ec8 <I2C_Slave_ISR_DMA+0xec>
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ebc:	d104      	bne.n	8005ec8 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fc11 	bl	80066e8 <I2C_ITListenCplt>
 8005ec6:	e048      	b.n	8005f5a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b29      	cmp	r3, #41	; 0x29
 8005ed2:	d10e      	bne.n	8005ef2 <I2C_Slave_ISR_DMA+0x116>
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eda:	d00a      	beq.n	8005ef2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fd4e 	bl	8006986 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f9c1 	bl	8006272 <I2C_ITSlaveSeqCplt>
 8005ef0:	e033      	b.n	8005f5a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005efa:	e034      	b.n	8005f66 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2210      	movs	r2, #16
 8005f02:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f08:	f043 0204 	orr.w	r2, r3, #4
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f16:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <I2C_Slave_ISR_DMA+0x14a>
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f24:	d11f      	bne.n	8005f66 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	2b21      	cmp	r3, #33	; 0x21
 8005f2a:	d002      	beq.n	8005f32 <I2C_Slave_ISR_DMA+0x156>
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b29      	cmp	r3, #41	; 0x29
 8005f30:	d103      	bne.n	8005f3a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2221      	movs	r2, #33	; 0x21
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
 8005f38:	e008      	b.n	8005f4c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b22      	cmp	r3, #34	; 0x22
 8005f3e:	d002      	beq.n	8005f46 <I2C_Slave_ISR_DMA+0x16a>
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b2a      	cmp	r3, #42	; 0x2a
 8005f44:	d102      	bne.n	8005f4c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2222      	movs	r2, #34	; 0x22
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f50:	4619      	mov	r1, r3
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fc1e 	bl	8006794 <I2C_ITError>
      if (treatdmanack == 1U)
 8005f58:	e005      	b.n	8005f66 <I2C_Slave_ISR_DMA+0x18a>
 8005f5a:	e004      	b.n	8005f66 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f64:	e011      	b.n	8005f8a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005f66:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f68:	e00f      	b.n	8005f8a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	08db      	lsrs	r3, r3, #3
 8005f7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f8b1 	bl	80060ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	817b      	strh	r3, [r7, #10]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	813b      	strh	r3, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	8979      	ldrh	r1, [r7, #10]
 8005fbc:	4b20      	ldr	r3, [pc, #128]	; (8006040 <I2C_RequestMemoryWrite+0xa4>)
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fec3 	bl	8006d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	69b9      	ldr	r1, [r7, #24]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fe07 	bl	8006be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e02c      	b.n	8006038 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d105      	bne.n	8005ff0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe4:	893b      	ldrh	r3, [r7, #8]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	629a      	str	r2, [r3, #40]	; 0x28
 8005fee:	e015      	b.n	800601c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ff0:	893b      	ldrh	r3, [r7, #8]
 8005ff2:	0a1b      	lsrs	r3, r3, #8
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	69b9      	ldr	r1, [r7, #24]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fded 	bl	8006be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e012      	b.n	8006038 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006012:	893b      	ldrh	r3, [r7, #8]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2200      	movs	r2, #0
 8006024:	2180      	movs	r1, #128	; 0x80
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fd9b 	bl	8006b62 <I2C_WaitOnFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	80002000 	.word	0x80002000

08006044 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	4608      	mov	r0, r1
 800604e:	4611      	mov	r1, r2
 8006050:	461a      	mov	r2, r3
 8006052:	4603      	mov	r3, r0
 8006054:	817b      	strh	r3, [r7, #10]
 8006056:	460b      	mov	r3, r1
 8006058:	813b      	strh	r3, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	4b20      	ldr	r3, [pc, #128]	; (80060e8 <I2C_RequestMemoryRead+0xa4>)
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	2300      	movs	r3, #0
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 fe70 	bl	8006d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	69b9      	ldr	r1, [r7, #24]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fdb4 	bl	8006be2 <I2C_WaitOnTXISFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e02c      	b.n	80060de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800608a:	893b      	ldrh	r3, [r7, #8]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
 8006094:	e015      	b.n	80060c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006096:	893b      	ldrh	r3, [r7, #8]
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	b29b      	uxth	r3, r3
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	69b9      	ldr	r1, [r7, #24]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fd9a 	bl	8006be2 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e012      	b.n	80060de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060b8:	893b      	ldrh	r3, [r7, #8]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2200      	movs	r2, #0
 80060ca:	2140      	movs	r1, #64	; 0x40
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fd48 	bl	8006b62 <I2C_WaitOnFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	80002000 	.word	0x80002000

080060ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006102:	2b28      	cmp	r3, #40	; 0x28
 8006104:	d16a      	bne.n	80061dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	0c1b      	lsrs	r3, r3, #16
 800611e:	b29b      	uxth	r3, r3
 8006120:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006124:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006132:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006140:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d138      	bne.n	80061bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	09db      	lsrs	r3, r3, #7
 800614e:	b29a      	uxth	r2, r3
 8006150:	89bb      	ldrh	r3, [r7, #12]
 8006152:	4053      	eors	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	f003 0306 	and.w	r3, r3, #6
 800615a:	2b00      	cmp	r3, #0
 800615c:	d11c      	bne.n	8006198 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800615e:	897b      	ldrh	r3, [r7, #10]
 8006160:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006170:	2b02      	cmp	r3, #2
 8006172:	d13b      	bne.n	80061ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2208      	movs	r2, #8
 8006180:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	89ba      	ldrh	r2, [r7, #12]
 8006190:	7bf9      	ldrb	r1, [r7, #15]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006196:	e029      	b.n	80061ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006198:	893b      	ldrh	r3, [r7, #8]
 800619a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800619c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fe63 	bl	8006e6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	89ba      	ldrh	r2, [r7, #12]
 80061b4:	7bf9      	ldrb	r1, [r7, #15]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
}
 80061ba:	e017      	b.n	80061ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80061bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fe53 	bl	8006e6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d2:	89ba      	ldrh	r2, [r7, #12]
 80061d4:	7bf9      	ldrb	r1, [r7, #15]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
}
 80061da:	e007      	b.n	80061ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2208      	movs	r2, #8
 80061e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b21      	cmp	r3, #33	; 0x21
 800620e:	d116      	bne.n	800623e <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2211      	movs	r2, #17
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006224:	2101      	movs	r1, #1
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fe20 	bl	8006e6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800623c:	e015      	b.n	800626a <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2212      	movs	r2, #18
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006252:	2102      	movs	r1, #2
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fe09 	bl	8006e6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	4798      	blx	r3
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	0b9b      	lsrs	r3, r3, #14
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d008      	beq.n	80062a8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	e00d      	b.n	80062c4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	0bdb      	lsrs	r3, r3, #15
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062c2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b29      	cmp	r3, #41	; 0x29
 80062ce:	d113      	bne.n	80062f8 <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2228      	movs	r2, #40	; 0x28
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062de:	2101      	movs	r1, #1
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fdc3 	bl	8006e6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 80062f6:	e018      	b.n	800632a <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b2a      	cmp	r3, #42	; 0x2a
 8006302:	d112      	bne.n	800632a <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2228      	movs	r2, #40	; 0x28
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2222      	movs	r2, #34	; 0x22
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006312:	2102      	movs	r1, #2
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fda9 	bl	8006e6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2220      	movs	r2, #32
 8006348:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b21      	cmp	r3, #33	; 0x21
 8006354:	d107      	bne.n	8006366 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006356:	2101      	movs	r1, #1
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fd87 	bl	8006e6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2211      	movs	r2, #17
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
 8006364:	e00c      	b.n	8006380 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b22      	cmp	r3, #34	; 0x22
 8006370:	d106      	bne.n	8006380 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006372:	2102      	movs	r1, #2
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fd79 	bl	8006e6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2212      	movs	r2, #18
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b4f      	ldr	r3, [pc, #316]	; (80064c8 <I2C_ITMasterCplt+0x194>)
 800638c:	400b      	ands	r3, r1
 800638e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a4c      	ldr	r2, [pc, #304]	; (80064cc <I2C_ITMasterCplt+0x198>)
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2210      	movs	r2, #16
 80063ae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	f043 0204 	orr.w	r2, r3, #4
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b60      	cmp	r3, #96	; 0x60
 80063c6:	d10b      	bne.n	80063e0 <I2C_ITMasterCplt+0xac>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80063de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fad0 	bl	8006986 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b60      	cmp	r3, #96	; 0x60
 80063f6:	d002      	beq.n	80063fe <I2C_ITMasterCplt+0xca>
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d006      	beq.n	800640c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f9c5 	bl	8006794 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800640a:	e058      	b.n	80064be <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b21      	cmp	r3, #33	; 0x21
 8006416:	d126      	bne.n	8006466 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d10c      	bne.n	800644c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
}
 800644a:	e038      	b.n	80064be <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
}
 8006464:	e02b      	b.n	80064be <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b22      	cmp	r3, #34	; 0x22
 8006470:	d125      	bne.n	80064be <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d10c      	bne.n	80064a6 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
}
 80064a4:	e00b      	b.n	80064be <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
}
 80064be:	bf00      	nop
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	fe00e800 	.word	0xfe00e800
 80064cc:	ffff0000 	.word	0xffff0000

080064d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2220      	movs	r2, #32
 80064f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b21      	cmp	r3, #33	; 0x21
 80064fa:	d002      	beq.n	8006502 <I2C_ITSlaveCplt+0x32>
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b29      	cmp	r3, #41	; 0x29
 8006500:	d108      	bne.n	8006514 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006502:	f248 0101 	movw	r1, #32769	; 0x8001
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fcb0 	bl	8006e6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2221      	movs	r2, #33	; 0x21
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
 8006512:	e00d      	b.n	8006530 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b22      	cmp	r3, #34	; 0x22
 8006518:	d002      	beq.n	8006520 <I2C_ITSlaveCplt+0x50>
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b2a      	cmp	r3, #42	; 0x2a
 800651e:	d107      	bne.n	8006530 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006520:	f248 0102 	movw	r1, #32770	; 0x8002
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fca1 	bl	8006e6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2222      	movs	r2, #34	; 0x22
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800653e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6859      	ldr	r1, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b65      	ldr	r3, [pc, #404]	; (80066e0 <I2C_ITSlaveCplt+0x210>)
 800654c:	400b      	ands	r3, r1
 800654e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa18 	bl	8006986 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	0b9b      	lsrs	r3, r3, #14
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d013      	beq.n	800658a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006570:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	2b00      	cmp	r3, #0
 8006578:	d020      	beq.n	80065bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006588:	e018      	b.n	80065bc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	0bdb      	lsrs	r3, r3, #15
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d012      	beq.n	80065bc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d006      	beq.n	80065bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	089b      	lsrs	r3, r3, #2
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d020      	beq.n	800660a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0304 	bic.w	r3, r3, #4
 80065ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00c      	beq.n	800660a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	f043 0204 	orr.w	r2, r3, #4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f8a9 	bl	8006794 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b28      	cmp	r3, #40	; 0x28
 800664c:	d144      	bne.n	80066d8 <I2C_ITSlaveCplt+0x208>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800664e:	6979      	ldr	r1, [r7, #20]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f849 	bl	80066e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006656:	e03f      	b.n	80066d8 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006660:	d015      	beq.n	800668e <I2C_ITSlaveCplt+0x1be>
    I2C_ITSlaveSeqCplt(hi2c);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff fe05 	bl	8006272 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <I2C_ITSlaveCplt+0x214>)
 800666c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
}
 800668c:	e024      	b.n	80066d8 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b22      	cmp	r3, #34	; 0x22
 8006698:	d10f      	bne.n	80066ba <I2C_ITSlaveCplt+0x1ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
}
 80066b8:	e00e      	b.n	80066d8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
}
 80066d8:	bf00      	nop
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	fe00e800 	.word	0xfe00e800
 80066e4:	ffff0000 	.word	0xffff0000

080066e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a26      	ldr	r2, [pc, #152]	; (8006790 <I2C_ITListenCplt+0xa8>)
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d022      	beq.n	8006766 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673c:	2b00      	cmp	r3, #0
 800673e:	d012      	beq.n	8006766 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	f043 0204 	orr.w	r2, r3, #4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006766:	f248 0103 	movw	r1, #32771	; 0x8003
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fb7e 	bl	8006e6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2210      	movs	r2, #16
 8006776:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	ffff0000 	.word	0xffff0000

08006794 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a5d      	ldr	r2, [pc, #372]	; (8006928 <I2C_ITError+0x194>)
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b28      	cmp	r3, #40	; 0x28
 80067ca:	d005      	beq.n	80067d8 <I2C_ITError+0x44>
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b29      	cmp	r3, #41	; 0x29
 80067d0:	d002      	beq.n	80067d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b2a      	cmp	r3, #42	; 0x2a
 80067d6:	d10b      	bne.n	80067f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067d8:	2103      	movs	r1, #3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fb46 	bl	8006e6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2228      	movs	r2, #40	; 0x28
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a50      	ldr	r2, [pc, #320]	; (800692c <I2C_ITError+0x198>)
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34
 80067ee:	e011      	b.n	8006814 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb39 	bl	8006e6c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b60      	cmp	r3, #96	; 0x60
 8006804:	d003      	beq.n	800680e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d039      	beq.n	8006896 <I2C_ITError+0x102>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b11      	cmp	r3, #17
 8006826:	d002      	beq.n	800682e <I2C_ITError+0x9a>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b21      	cmp	r3, #33	; 0x21
 800682c:	d133      	bne.n	8006896 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800683c:	d107      	bne.n	800684e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800684c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	4618      	mov	r0, r3
 8006854:	f7fc ff35 	bl	80036c2 <HAL_DMA_GetState>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d017      	beq.n	800688e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	4a33      	ldr	r2, [pc, #204]	; (8006930 <I2C_ITError+0x19c>)
 8006864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	4618      	mov	r0, r3
 8006874:	f7fc fe44 	bl	8003500 <HAL_DMA_Abort_IT>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d04d      	beq.n	800691a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800688c:	e045      	b.n	800691a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f850 	bl	8006934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006894:	e041      	b.n	800691a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d039      	beq.n	8006912 <I2C_ITError+0x17e>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b12      	cmp	r3, #18
 80068a2:	d002      	beq.n	80068aa <I2C_ITError+0x116>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b22      	cmp	r3, #34	; 0x22
 80068a8:	d133      	bne.n	8006912 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b8:	d107      	bne.n	80068ca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fc fef7 	bl	80036c2 <HAL_DMA_GetState>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d017      	beq.n	800690a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	4a14      	ldr	r2, [pc, #80]	; (8006930 <I2C_ITError+0x19c>)
 80068e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fc fe06 	bl	8003500 <HAL_DMA_Abort_IT>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d011      	beq.n	800691e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006908:	e009      	b.n	800691e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f812 	bl	8006934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006910:	e005      	b.n	800691e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f80e 	bl	8006934 <I2C_TreatErrorCallback>
  }
}
 8006918:	e002      	b.n	8006920 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800691e:	bf00      	nop
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	ffff0000 	.word	0xffff0000
 800692c:	080059f1 	.word	0x080059f1
 8006930:	08006b27 	.word	0x08006b27

08006934 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b60      	cmp	r3, #96	; 0x60
 8006946:	d10f      	bne.n	8006968 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006966:	e00a      	b.n	800697e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b02      	cmp	r3, #2
 800699a:	d103      	bne.n	80069a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2200      	movs	r2, #0
 80069a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d007      	beq.n	80069c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699a      	ldr	r2, [r3, #24]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	619a      	str	r2, [r3, #24]
  }
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069e8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069f4:	2120      	movs	r1, #32
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f9d6 	bl	8006da8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80069fc:	e02d      	b.n	8006a5a <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a06:	441a      	add	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2bff      	cmp	r3, #255	; 0xff
 8006a14:	d903      	bls.n	8006a1e <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	22ff      	movs	r2, #255	; 0xff
 8006a1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a1c:	e004      	b.n	8006a28 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	4619      	mov	r1, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3328      	adds	r3, #40	; 0x28
 8006a38:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006a3e:	f7fc fcc8 	bl	80033d2 <HAL_DMA_Start_IT>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006a48:	2110      	movs	r1, #16
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff fea2 	bl	8006794 <I2C_ITError>
}
 8006a50:	e003      	b.n	8006a5a <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006a52:	2140      	movs	r1, #64	; 0x40
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f9a7 	bl	8006da8 <I2C_Enable_IRQ>
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a7e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a8a:	2120      	movs	r1, #32
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f98b 	bl	8006da8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006a92:	e02d      	b.n	8006af0 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2bff      	cmp	r3, #255	; 0xff
 8006aaa:	d903      	bls.n	8006ab4 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	22ff      	movs	r2, #255	; 0xff
 8006ab0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ab2:	e004      	b.n	8006abe <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3324      	adds	r3, #36	; 0x24
 8006ac8:	4619      	mov	r1, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006ad4:	f7fc fc7d 	bl	80033d2 <HAL_DMA_Start_IT>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ade:	2110      	movs	r1, #16
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff fe57 	bl	8006794 <I2C_ITError>
}
 8006ae6:	e003      	b.n	8006af0 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006ae8:	2140      	movs	r1, #64	; 0x40
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f95c 	bl	8006da8 <I2C_Enable_IRQ>
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b14:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b16:	2110      	movs	r1, #16
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fe3b 	bl	8006794 <I2C_ITError>
}
 8006b1e:	bf00      	nop
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	2200      	movs	r2, #0
 8006b42:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	2200      	movs	r2, #0
 8006b52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff feed 	bl	8006934 <I2C_TreatErrorCallback>
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b72:	e022      	b.n	8006bba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d01e      	beq.n	8006bba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7c:	f000 faea 	bl	8007154 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d113      	bne.n	8006bba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e00f      	b.n	8006bda <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d0cd      	beq.n	8006b74 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bee:	e02c      	b.n	8006c4a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f835 	bl	8006c64 <I2C_IsAcknowledgeFailed>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e02a      	b.n	8006c5a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d01e      	beq.n	8006c4a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0c:	f000 faa2 	bl	8007154 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d302      	bcc.n	8006c22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d113      	bne.n	8006c4a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e007      	b.n	8006c5a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d1cb      	bne.n	8006bf0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d161      	bne.n	8006d42 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c8c:	d02b      	beq.n	8006ce6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c9c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c9e:	e022      	b.n	8006ce6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d01e      	beq.n	8006ce6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca8:	f000 fa54 	bl	8007154 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d302      	bcc.n	8006cbe <I2C_IsAcknowledgeFailed+0x5a>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d113      	bne.n	8006ce6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	f043 0220 	orr.w	r2, r3, #32
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e02e      	b.n	8006d44 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d1d5      	bne.n	8006ca0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2220      	movs	r2, #32
 8006d02:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fe3e 	bl	8006986 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <I2C_IsAcknowledgeFailed+0xe8>)
 8006d16:	400b      	ands	r3, r1
 8006d18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f043 0204 	orr.w	r2, r3, #4
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	fe00e800 	.word	0xfe00e800

08006d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	817b      	strh	r3, [r7, #10]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	0d5b      	lsrs	r3, r3, #21
 8006d6c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <I2C_TransferConfig+0x54>)
 8006d72:	430b      	orrs	r3, r1
 8006d74:	43db      	mvns	r3, r3
 8006d76:	ea02 0103 	and.w	r1, r2, r3
 8006d7a:	897b      	ldrh	r3, [r7, #10]
 8006d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d80:	7a7b      	ldrb	r3, [r7, #9]
 8006d82:	041b      	lsls	r3, r3, #16
 8006d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006d9a:	bf00      	nop
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr
 8006da4:	03ff63ff 	.word	0x03ff63ff

08006da8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbc:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <I2C_Enable_IRQ+0xbc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006dc6:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <I2C_Enable_IRQ+0xc0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d11d      	bne.n	8006e08 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006dcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	da03      	bge.n	8006ddc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006dda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ddc:	887b      	ldrh	r3, [r7, #2]
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	d103      	bne.n	8006dea <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006de8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006dea:	887b      	ldrh	r3, [r7, #2]
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d103      	bne.n	8006df8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006df6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006df8:	887b      	ldrh	r3, [r7, #2]
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d125      	bne.n	8006e4a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e04:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006e06:	e020      	b.n	8006e4a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	da03      	bge.n	8006e18 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006e16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006e18:	887b      	ldrh	r3, [r7, #2]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006e28:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006e2a:	887b      	ldrh	r3, [r7, #2]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006e3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006e3c:	887b      	ldrh	r3, [r7, #2]
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d103      	bne.n	8006e4a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f043 0320 	orr.w	r3, r3, #32
 8006e48:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6819      	ldr	r1, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr
 8006e64:	08005bf7 	.word	0x08005bf7
 8006e68:	08005ddd 	.word	0x08005ddd

08006e6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00f      	beq.n	8006ea6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006e8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e9a:	2b28      	cmp	r3, #40	; 0x28
 8006e9c:	d003      	beq.n	8006ea6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006ea4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ea6:	887b      	ldrh	r3, [r7, #2]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00f      	beq.n	8006ed0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006eb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ec4:	2b28      	cmp	r3, #40	; 0x28
 8006ec6:	d003      	beq.n	8006ed0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006ece:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ed0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da03      	bge.n	8006ee0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006ede:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ee0:	887b      	ldrh	r3, [r7, #2]
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d103      	bne.n	8006eee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006eec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d103      	bne.n	8006efc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f043 0320 	orr.w	r3, r3, #32
 8006efa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006efc:	887b      	ldrh	r3, [r7, #2]
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d103      	bne.n	8006f0a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	43da      	mvns	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	400a      	ands	r2, r1
 8006f1a:	601a      	str	r2, [r3, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr

08006f26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d138      	bne.n	8006fae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e032      	b.n	8006fb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2224      	movs	r2, #36	; 0x24
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0201 	bic.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d139      	bne.n	8007044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e033      	b.n	8007046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2224      	movs	r2, #36	; 0x24
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800700c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e000      	b.n	8007046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007044:	2302      	movs	r3, #2
  }
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007060:	d10e      	bne.n	8007080 <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8007062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007066:	4808      	ldr	r0, [pc, #32]	; (8007088 <HAL_GPIO_EXTI_Callback+0x38>)
 8007068:	f7fc f926 	bl	80032b8 <HAL_GPIO_ReadPin>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d103      	bne.n	800707a <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 8007072:	2001      	movs	r0, #1
 8007074:	f004 fa78 	bl	800b568 <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8007078:	e002      	b.n	8007080 <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 800707a:	2000      	movs	r0, #0
 800707c:	f004 fa74 	bl	800b568 <Rte_Write_PC13_Pin_State>
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	48000800 	.word	0x48000800

0800708c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007090:	bf00      	nop
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr

08007098 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800709c:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <HAL_Init+0x28>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a07      	ldr	r2, [pc, #28]	; (80070c0 <HAL_Init+0x28>)
 80070a2:	f043 0310 	orr.w	r3, r3, #16
 80070a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070a8:	2003      	movs	r0, #3
 80070aa:	f000 f929 	bl	8007300 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070ae:	200f      	movs	r0, #15
 80070b0:	f000 f808 	bl	80070c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070b4:	f000 f966 	bl	8007384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40022000 	.word	0x40022000

080070c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070cc:	4b15      	ldr	r3, [pc, #84]	; (8007124 <HAL_InitTick+0x60>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4b15      	ldr	r3, [pc, #84]	; (8007128 <HAL_InitTick+0x64>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	4619      	mov	r1, r3
 80070d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070da:	fbb3 f3f1 	udiv	r3, r3, r1
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f941 	bl	800736a <HAL_SYSTICK_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e014      	b.n	800711c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d810      	bhi.n	800711a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070f8:	2200      	movs	r2, #0
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	f000 f909 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007104:	2200      	movs	r2, #0
 8007106:	210f      	movs	r1, #15
 8007108:	f06f 0001 	mvn.w	r0, #1
 800710c:	f000 f903 	bl	8007316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007110:	4a06      	ldr	r2, [pc, #24]	; (800712c <HAL_InitTick+0x68>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000000 	.word	0x20000000
 8007128:	20000008 	.word	0x20000008
 800712c:	20000004 	.word	0x20000004

08007130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_IncTick+0x1c>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <HAL_IncTick+0x20>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4413      	add	r3, r2
 8007140:	4a03      	ldr	r2, [pc, #12]	; (8007150 <HAL_IncTick+0x20>)
 8007142:	6013      	str	r3, [r2, #0]
}
 8007144:	bf00      	nop
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr
 800714c:	20000008 	.word	0x20000008
 8007150:	200001b8 	.word	0x200001b8

08007154 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return uwTick;  
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <HAL_GetTick+0x10>)
 800715a:	681b      	ldr	r3, [r3, #0]
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr
 8007164:	200001b8 	.word	0x200001b8

08007168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <__NVIC_SetPriorityGrouping+0x44>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007184:	4013      	ands	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800719a:	4a04      	ldr	r2, [pc, #16]	; (80071ac <__NVIC_SetPriorityGrouping+0x44>)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	60d3      	str	r3, [r2, #12]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	e000ed00 	.word	0xe000ed00

080071b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <__NVIC_GetPriorityGrouping+0x18>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	f003 0307 	and.w	r3, r3, #7
}
 80071be:	4618      	mov	r0, r3
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	e000ed00 	.word	0xe000ed00

080071cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	db0b      	blt.n	80071f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	f003 021f 	and.w	r2, r3, #31
 80071e4:	4906      	ldr	r1, [pc, #24]	; (8007200 <__NVIC_EnableIRQ+0x34>)
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2001      	movs	r0, #1
 80071ee:	fa00 f202 	lsl.w	r2, r0, r2
 80071f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr
 8007200:	e000e100 	.word	0xe000e100

08007204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007214:	2b00      	cmp	r3, #0
 8007216:	db0a      	blt.n	800722e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	490c      	ldr	r1, [pc, #48]	; (8007250 <__NVIC_SetPriority+0x4c>)
 800721e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007222:	0112      	lsls	r2, r2, #4
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	440b      	add	r3, r1
 8007228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800722c:	e00a      	b.n	8007244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	b2da      	uxtb	r2, r3
 8007232:	4908      	ldr	r1, [pc, #32]	; (8007254 <__NVIC_SetPriority+0x50>)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	3b04      	subs	r3, #4
 800723c:	0112      	lsls	r2, r2, #4
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	440b      	add	r3, r1
 8007242:	761a      	strb	r2, [r3, #24]
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	e000e100 	.word	0xe000e100
 8007254:	e000ed00 	.word	0xe000ed00

08007258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007258:	b480      	push	{r7}
 800725a:	b089      	sub	sp, #36	; 0x24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f1c3 0307 	rsb	r3, r3, #7
 8007272:	2b04      	cmp	r3, #4
 8007274:	bf28      	it	cs
 8007276:	2304      	movcs	r3, #4
 8007278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3304      	adds	r3, #4
 800727e:	2b06      	cmp	r3, #6
 8007280:	d902      	bls.n	8007288 <NVIC_EncodePriority+0x30>
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	3b03      	subs	r3, #3
 8007286:	e000      	b.n	800728a <NVIC_EncodePriority+0x32>
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800728c:	f04f 32ff 	mov.w	r2, #4294967295
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43da      	mvns	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	401a      	ands	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072a0:	f04f 31ff 	mov.w	r1, #4294967295
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	fa01 f303 	lsl.w	r3, r1, r3
 80072aa:	43d9      	mvns	r1, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072b0:	4313      	orrs	r3, r2
         );
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3724      	adds	r7, #36	; 0x24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr

080072bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072cc:	d301      	bcc.n	80072d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072ce:	2301      	movs	r3, #1
 80072d0:	e00f      	b.n	80072f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072d2:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <SysTick_Config+0x40>)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072da:	210f      	movs	r1, #15
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	f7ff ff90 	bl	8007204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <SysTick_Config+0x40>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072ea:	4b04      	ldr	r3, [pc, #16]	; (80072fc <SysTick_Config+0x40>)
 80072ec:	2207      	movs	r2, #7
 80072ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	e000e010 	.word	0xe000e010

08007300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff ff2d 	bl	8007168 <__NVIC_SetPriorityGrouping>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	4603      	mov	r3, r0
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007328:	f7ff ff42 	bl	80071b0 <__NVIC_GetPriorityGrouping>
 800732c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	6978      	ldr	r0, [r7, #20]
 8007334:	f7ff ff90 	bl	8007258 <NVIC_EncodePriority>
 8007338:	4602      	mov	r2, r0
 800733a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff5f 	bl	8007204 <__NVIC_SetPriority>
}
 8007346:	bf00      	nop
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	4603      	mov	r3, r0
 8007356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff35 	bl	80071cc <__NVIC_EnableIRQ>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff ffa2 	bl	80072bc <SysTick_Config>
 8007378:	4603      	mov	r3, r0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <HAL_MspInit+0x40>)
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	4a0d      	ldr	r2, [pc, #52]	; (80073c4 <HAL_MspInit+0x40>)
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	6193      	str	r3, [r2, #24]
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <HAL_MspInit+0x40>)
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <HAL_MspInit+0x40>)
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	4a07      	ldr	r2, [pc, #28]	; (80073c4 <HAL_MspInit+0x40>)
 80073a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ac:	61d3      	str	r3, [r2, #28]
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <HAL_MspInit+0x40>)
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr
 80073c4:	40021000 	.word	0x40021000

080073c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d0:	f107 0314 	add.w	r3, r7, #20
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	605a      	str	r2, [r3, #4]
 80073da:	609a      	str	r2, [r3, #8]
 80073dc:	60da      	str	r2, [r3, #12]
 80073de:	611a      	str	r2, [r3, #16]
	  if(hadc->Instance==ADC1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073e8:	d14c      	bne.n	8007484 <HAL_ADC_MspInit+0xbc>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */

	  /* USER CODE END ADC1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_ADC12_CLK_ENABLE();
 80073ea:	4b28      	ldr	r3, [pc, #160]	; (800748c <HAL_ADC_MspInit+0xc4>)
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	4a27      	ldr	r2, [pc, #156]	; (800748c <HAL_ADC_MspInit+0xc4>)
 80073f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f4:	6153      	str	r3, [r2, #20]
 80073f6:	4b25      	ldr	r3, [pc, #148]	; (800748c <HAL_ADC_MspInit+0xc4>)
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007402:	4b22      	ldr	r3, [pc, #136]	; (800748c <HAL_ADC_MspInit+0xc4>)
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	4a21      	ldr	r2, [pc, #132]	; (800748c <HAL_ADC_MspInit+0xc4>)
 8007408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740c:	6153      	str	r3, [r2, #20]
 800740e:	4b1f      	ldr	r3, [pc, #124]	; (800748c <HAL_ADC_MspInit+0xc4>)
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
	    /**ADC1 GPIO Configuration
	    PA0     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800741a:	2301      	movs	r3, #1
 800741c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800741e:	2303      	movs	r3, #3
 8007420:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	4619      	mov	r1, r3
 800742c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007430:	f7fb fdb8 	bl	8002fa4 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA1_Channel1;
 8007434:	4b16      	ldr	r3, [pc, #88]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 8007436:	4a17      	ldr	r2, [pc, #92]	; (8007494 <HAL_ADC_MspInit+0xcc>)
 8007438:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800743a:	4b15      	ldr	r3, [pc, #84]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007440:	4b13      	ldr	r3, [pc, #76]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 8007442:	2200      	movs	r2, #0
 8007444:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 8007448:	2280      	movs	r2, #128	; 0x80
 800744a:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800744c:	4b10      	ldr	r3, [pc, #64]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 800744e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007452:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007454:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 8007456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800745a:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.Mode = DMA_NORMAL;
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 800745e:	2200      	movs	r2, #0
 8007460:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 8007464:	2200      	movs	r2, #0
 8007466:	61da      	str	r2, [r3, #28]
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007468:	4809      	ldr	r0, [pc, #36]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 800746a:	f7fb ff6b 	bl	8003344 <HAL_DMA_Init>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <HAL_ADC_MspInit+0xb0>
	    {
	    	Msp_Error_Handler();
 8007474:	f000 f9ca 	bl	800780c <Msp_Error_Handler>
	    }

	    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a05      	ldr	r2, [pc, #20]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
 800747e:	4a04      	ldr	r2, [pc, #16]	; (8007490 <HAL_ADC_MspInit+0xc8>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6253      	str	r3, [r2, #36]	; 0x24

	  /* USER CODE BEGIN ADC1_MspInit 1 */

	  /* USER CODE END ADC1_MspInit 1 */
	  }
}
 8007484:	bf00      	nop
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40021000 	.word	0x40021000
 8007490:	20000214 	.word	0x20000214
 8007494:	40020008 	.word	0x40020008

08007498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	; 0x28
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a0:	f107 0314 	add.w	r3, r7, #20
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	605a      	str	r2, [r3, #4]
 80074aa:	609a      	str	r2, [r3, #8]
 80074ac:	60da      	str	r2, [r3, #12]
 80074ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a41      	ldr	r2, [pc, #260]	; (80075bc <HAL_I2C_MspInit+0x124>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d17c      	bne.n	80075b4 <HAL_I2C_MspInit+0x11c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ba:	4b41      	ldr	r3, [pc, #260]	; (80075c0 <HAL_I2C_MspInit+0x128>)
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	4a40      	ldr	r2, [pc, #256]	; (80075c0 <HAL_I2C_MspInit+0x128>)
 80074c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074c4:	6153      	str	r3, [r2, #20]
 80074c6:	4b3e      	ldr	r3, [pc, #248]	; (80075c0 <HAL_I2C_MspInit+0x128>)
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80074d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80074d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074d8:	2312      	movs	r3, #18
 80074da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074e0:	2303      	movs	r3, #3
 80074e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80074e4:	2304      	movs	r3, #4
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	4619      	mov	r1, r3
 80074ee:	4835      	ldr	r0, [pc, #212]	; (80075c4 <HAL_I2C_MspInit+0x12c>)
 80074f0:	f7fb fd58 	bl	8002fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80074f4:	4b32      	ldr	r3, [pc, #200]	; (80075c0 <HAL_I2C_MspInit+0x128>)
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	4a31      	ldr	r2, [pc, #196]	; (80075c0 <HAL_I2C_MspInit+0x128>)
 80074fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074fe:	61d3      	str	r3, [r2, #28]
 8007500:	4b2f      	ldr	r3, [pc, #188]	; (80075c0 <HAL_I2C_MspInit+0x128>)
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800750c:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 800750e:	4a2f      	ldr	r2, [pc, #188]	; (80075cc <HAL_I2C_MspInit+0x134>)
 8007510:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007512:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 8007514:	2200      	movs	r2, #0
 8007516:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007518:	4b2b      	ldr	r3, [pc, #172]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800751e:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 8007520:	2280      	movs	r2, #128	; 0x80
 8007522:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007524:	4b28      	ldr	r3, [pc, #160]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 8007526:	2200      	movs	r2, #0
 8007528:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800752a:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 800752c:	2200      	movs	r2, #0
 800752e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 8007532:	2200      	movs	r2, #0
 8007534:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 8007538:	2200      	movs	r2, #0
 800753a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800753c:	4822      	ldr	r0, [pc, #136]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 800753e:	f7fb ff01 	bl	8003344 <HAL_DMA_Init>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <HAL_I2C_MspInit+0xb4>
    {
    	Msp_Error_Handler();
 8007548:	f000 f960 	bl	800780c <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 8007550:	63da      	str	r2, [r3, #60]	; 0x3c
 8007552:	4a1d      	ldr	r2, [pc, #116]	; (80075c8 <HAL_I2C_MspInit+0x130>)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8007558:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 800755a:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <HAL_I2C_MspInit+0x13c>)
 800755c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800755e:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 8007560:	2210      	movs	r2, #16
 8007562:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007564:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 8007566:	2200      	movs	r2, #0
 8007568:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800756a:	4b19      	ldr	r3, [pc, #100]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 800756c:	2280      	movs	r2, #128	; 0x80
 800756e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007570:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 8007572:	2200      	movs	r2, #0
 8007574:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007576:	4b16      	ldr	r3, [pc, #88]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 8007578:	2200      	movs	r2, #0
 800757a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800757c:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 800757e:	2200      	movs	r2, #0
 8007580:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007582:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 8007584:	2200      	movs	r2, #0
 8007586:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007588:	4811      	ldr	r0, [pc, #68]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 800758a:	f7fb fedb 	bl	8003344 <HAL_DMA_Init>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <HAL_I2C_MspInit+0x100>
    {
    	Msp_Error_Handler();
 8007594:	f000 f93a 	bl	800780c <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a0d      	ldr	r2, [pc, #52]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
 800759e:	4a0c      	ldr	r2, [pc, #48]	; (80075d0 <HAL_I2C_MspInit+0x138>)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80075a4:	2200      	movs	r2, #0
 80075a6:	2100      	movs	r1, #0
 80075a8:	201f      	movs	r0, #31
 80075aa:	f7ff feb4 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80075ae:	201f      	movs	r0, #31
 80075b0:	f7ff fecd 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80075b4:	bf00      	nop
 80075b6:	3728      	adds	r7, #40	; 0x28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	40005400 	.word	0x40005400
 80075c0:	40021000 	.word	0x40021000
 80075c4:	48000400 	.word	0x48000400
 80075c8:	200002d4 	.word	0x200002d4
 80075cc:	40020080 	.word	0x40020080
 80075d0:	20000318 	.word	0x20000318
 80075d4:	4002006c 	.word	0x4002006c

080075d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e0:	f107 0314 	add.w	r3, r7, #20
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1b      	ldr	r2, [pc, #108]	; (8007664 <HAL_SPI_MspInit+0x8c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d130      	bne.n	800765c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80075fa:	4b1b      	ldr	r3, [pc, #108]	; (8007668 <HAL_SPI_MspInit+0x90>)
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	4a1a      	ldr	r2, [pc, #104]	; (8007668 <HAL_SPI_MspInit+0x90>)
 8007600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007604:	61d3      	str	r3, [r2, #28]
 8007606:	4b18      	ldr	r3, [pc, #96]	; (8007668 <HAL_SPI_MspInit+0x90>)
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <HAL_SPI_MspInit+0x90>)
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	4a14      	ldr	r2, [pc, #80]	; (8007668 <HAL_SPI_MspInit+0x90>)
 8007618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800761c:	6153      	str	r3, [r2, #20]
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <HAL_SPI_MspInit+0x90>)
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800762a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800762e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007630:	2302      	movs	r3, #2
 8007632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007638:	2303      	movs	r3, #3
 800763a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800763c:	2306      	movs	r3, #6
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007640:	f107 0314 	add.w	r3, r7, #20
 8007644:	4619      	mov	r1, r3
 8007646:	4809      	ldr	r0, [pc, #36]	; (800766c <HAL_SPI_MspInit+0x94>)
 8007648:	f7fb fcac 	bl	8002fa4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	2033      	movs	r0, #51	; 0x33
 8007652:	f7ff fe60 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8007656:	2033      	movs	r0, #51	; 0x33
 8007658:	f7ff fe79 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800765c:	bf00      	nop
 800765e:	3728      	adds	r7, #40	; 0x28
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40003c00 	.word	0x40003c00
 8007668:	40021000 	.word	0x40021000
 800766c:	48000800 	.word	0x48000800

08007670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08a      	sub	sp, #40	; 0x28
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007678:	f107 0314 	add.w	r3, r7, #20
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	605a      	str	r2, [r3, #4]
 8007682:	609a      	str	r2, [r3, #8]
 8007684:	60da      	str	r2, [r3, #12]
 8007686:	611a      	str	r2, [r3, #16]
	if(htim_base->Instance==TIM3)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <HAL_TIM_Base_MspInit+0x8c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d130      	bne.n	80076f4 <HAL_TIM_Base_MspInit+0x84>
	{
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 8007692:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <HAL_TIM_Base_MspInit+0x90>)
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <HAL_TIM_Base_MspInit+0x90>)
 8007698:	f043 0302 	orr.w	r3, r3, #2
 800769c:	61d3      	str	r3, [r2, #28]
 800769e:	4b18      	ldr	r3, [pc, #96]	; (8007700 <HAL_TIM_Base_MspInit+0x90>)
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80076aa:	4b15      	ldr	r3, [pc, #84]	; (8007700 <HAL_TIM_Base_MspInit+0x90>)
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	4a14      	ldr	r2, [pc, #80]	; (8007700 <HAL_TIM_Base_MspInit+0x90>)
 80076b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076b4:	6153      	str	r3, [r2, #20]
 80076b6:	4b12      	ldr	r3, [pc, #72]	; (8007700 <HAL_TIM_Base_MspInit+0x90>)
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
		/**TIM3 GPIO Configuration
		PA6     ------> TIM3_CH1
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c6:	2302      	movs	r3, #2
 80076c8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ce:	2300      	movs	r3, #0
 80076d0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80076d2:	2302      	movs	r3, #2
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	4619      	mov	r1, r3
 80076dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076e0:	f7fb fc60 	bl	8002fa4 <HAL_GPIO_Init>

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80076e4:	2200      	movs	r2, #0
 80076e6:	2100      	movs	r1, #0
 80076e8:	201d      	movs	r0, #29
 80076ea:	f7ff fe14 	bl	8007316 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80076ee:	201d      	movs	r0, #29
 80076f0:	f7ff fe2d 	bl	800734e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}

}
 80076f4:	bf00      	nop
 80076f6:	3728      	adds	r7, #40	; 0x28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40000400 	.word	0x40000400
 8007700:	40021000 	.word	0x40021000

08007704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08c      	sub	sp, #48	; 0x30
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770c:	f107 031c 	add.w	r3, r7, #28
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a36      	ldr	r2, [pc, #216]	; (80077fc <HAL_UART_MspInit+0xf8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d130      	bne.n	8007788 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007726:	4b36      	ldr	r3, [pc, #216]	; (8007800 <HAL_UART_MspInit+0xfc>)
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	4a35      	ldr	r2, [pc, #212]	; (8007800 <HAL_UART_MspInit+0xfc>)
 800772c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007730:	6193      	str	r3, [r2, #24]
 8007732:	4b33      	ldr	r3, [pc, #204]	; (8007800 <HAL_UART_MspInit+0xfc>)
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800773e:	4b30      	ldr	r3, [pc, #192]	; (8007800 <HAL_UART_MspInit+0xfc>)
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	4a2f      	ldr	r2, [pc, #188]	; (8007800 <HAL_UART_MspInit+0xfc>)
 8007744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007748:	6153      	str	r3, [r2, #20]
 800774a:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <HAL_UART_MspInit+0xfc>)
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007756:	2330      	movs	r3, #48	; 0x30
 8007758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800775a:	2302      	movs	r3, #2
 800775c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007762:	2303      	movs	r3, #3
 8007764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007766:	2307      	movs	r3, #7
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800776a:	f107 031c 	add.w	r3, r7, #28
 800776e:	4619      	mov	r1, r3
 8007770:	4824      	ldr	r0, [pc, #144]	; (8007804 <HAL_UART_MspInit+0x100>)
 8007772:	f7fb fc17 	bl	8002fa4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	2025      	movs	r0, #37	; 0x25
 800777c:	f7ff fdcb 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007780:	2025      	movs	r0, #37	; 0x25
 8007782:	f7ff fde4 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007786:	e035      	b.n	80077f4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1e      	ldr	r2, [pc, #120]	; (8007808 <HAL_UART_MspInit+0x104>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d130      	bne.n	80077f4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007792:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <HAL_UART_MspInit+0xfc>)
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <HAL_UART_MspInit+0xfc>)
 8007798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779c:	61d3      	str	r3, [r2, #28]
 800779e:	4b18      	ldr	r3, [pc, #96]	; (8007800 <HAL_UART_MspInit+0xfc>)
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a6:	613b      	str	r3, [r7, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077aa:	4b15      	ldr	r3, [pc, #84]	; (8007800 <HAL_UART_MspInit+0xfc>)
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	4a14      	ldr	r2, [pc, #80]	; (8007800 <HAL_UART_MspInit+0xfc>)
 80077b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b4:	6153      	str	r3, [r2, #20]
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <HAL_UART_MspInit+0xfc>)
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80077c2:	230c      	movs	r3, #12
 80077c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c6:	2302      	movs	r3, #2
 80077c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077ce:	2303      	movs	r3, #3
 80077d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077d2:	2307      	movs	r3, #7
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077d6:	f107 031c 	add.w	r3, r7, #28
 80077da:	4619      	mov	r1, r3
 80077dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077e0:	f7fb fbe0 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80077e4:	2200      	movs	r2, #0
 80077e6:	2100      	movs	r1, #0
 80077e8:	2026      	movs	r0, #38	; 0x26
 80077ea:	f7ff fd94 	bl	8007316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80077ee:	2026      	movs	r0, #38	; 0x26
 80077f0:	f7ff fdad 	bl	800734e <HAL_NVIC_EnableIRQ>
}
 80077f4:	bf00      	nop
 80077f6:	3730      	adds	r7, #48	; 0x30
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40013800 	.word	0x40013800
 8007800:	40021000 	.word	0x40021000
 8007804:	48000800 	.word	0x48000800
 8007808:	40004400 	.word	0x40004400

0800780c <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007810:	b672      	cpsid	i
}
 8007812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007814:	e7fe      	b.n	8007814 <Msp_Error_Handler+0x8>
	...

08007818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800781e:	af00      	add	r7, sp, #0
 8007820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007824:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007828:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800782a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800782e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f001 b83a 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800783e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007842:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 816f 	beq.w	8007b32 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007854:	4bb5      	ldr	r3, [pc, #724]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f003 030c 	and.w	r3, r3, #12
 800785c:	2b04      	cmp	r3, #4
 800785e:	d00c      	beq.n	800787a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007860:	4bb2      	ldr	r3, [pc, #712]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 030c 	and.w	r3, r3, #12
 8007868:	2b08      	cmp	r3, #8
 800786a:	d15c      	bne.n	8007926 <HAL_RCC_OscConfig+0x10e>
 800786c:	4baf      	ldr	r3, [pc, #700]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007878:	d155      	bne.n	8007926 <HAL_RCC_OscConfig+0x10e>
 800787a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800787e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007882:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007886:	fa93 f3a3 	rbit	r3, r3
 800788a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800788e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007892:	fab3 f383 	clz	r3, r3
 8007896:	b2db      	uxtb	r3, r3
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d102      	bne.n	80078ac <HAL_RCC_OscConfig+0x94>
 80078a6:	4ba1      	ldr	r3, [pc, #644]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	e015      	b.n	80078d8 <HAL_RCC_OscConfig+0xc0>
 80078ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80078b8:	fa93 f3a3 	rbit	r3, r3
 80078bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80078c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80078c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80078cc:	fa93 f3a3 	rbit	r3, r3
 80078d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80078d4:	4b95      	ldr	r3, [pc, #596]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078dc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80078e0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80078e4:	fa92 f2a2 	rbit	r2, r2
 80078e8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80078ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80078f0:	fab2 f282 	clz	r2, r2
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	f042 0220 	orr.w	r2, r2, #32
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	f002 021f 	and.w	r2, r2, #31
 8007900:	2101      	movs	r1, #1
 8007902:	fa01 f202 	lsl.w	r2, r1, r2
 8007906:	4013      	ands	r3, r2
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8111 	beq.w	8007b30 <HAL_RCC_OscConfig+0x318>
 800790e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007912:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 8108 	bne.w	8007b30 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	f000 bfc6 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800792a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007936:	d106      	bne.n	8007946 <HAL_RCC_OscConfig+0x12e>
 8007938:	4b7c      	ldr	r3, [pc, #496]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a7b      	ldr	r2, [pc, #492]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 800793e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e036      	b.n	80079b4 <HAL_RCC_OscConfig+0x19c>
 8007946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800794a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10c      	bne.n	8007970 <HAL_RCC_OscConfig+0x158>
 8007956:	4b75      	ldr	r3, [pc, #468]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a74      	ldr	r2, [pc, #464]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 800795c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	4b72      	ldr	r3, [pc, #456]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a71      	ldr	r2, [pc, #452]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	e021      	b.n	80079b4 <HAL_RCC_OscConfig+0x19c>
 8007970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007974:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007980:	d10c      	bne.n	800799c <HAL_RCC_OscConfig+0x184>
 8007982:	4b6a      	ldr	r3, [pc, #424]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a69      	ldr	r2, [pc, #420]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b67      	ldr	r3, [pc, #412]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a66      	ldr	r2, [pc, #408]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e00b      	b.n	80079b4 <HAL_RCC_OscConfig+0x19c>
 800799c:	4b63      	ldr	r3, [pc, #396]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a62      	ldr	r2, [pc, #392]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 80079a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	4b60      	ldr	r3, [pc, #384]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5f      	ldr	r2, [pc, #380]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 80079ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079b2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80079b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d059      	beq.n	8007a78 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c4:	f7ff fbc6 	bl	8007154 <HAL_GetTick>
 80079c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079cc:	e00a      	b.n	80079e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ce:	f7ff fbc1 	bl	8007154 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b64      	cmp	r3, #100	; 0x64
 80079dc:	d902      	bls.n	80079e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	f000 bf67 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
 80079e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079e8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80079f0:	fa93 f3a3 	rbit	r3, r3
 80079f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80079f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079fc:	fab3 f383 	clz	r3, r3
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d102      	bne.n	8007a16 <HAL_RCC_OscConfig+0x1fe>
 8007a10:	4b46      	ldr	r3, [pc, #280]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	e015      	b.n	8007a42 <HAL_RCC_OscConfig+0x22a>
 8007a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a1a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007a22:	fa93 f3a3 	rbit	r3, r3
 8007a26:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007a32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007a36:	fa93 f3a3 	rbit	r3, r3
 8007a3a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007a3e:	4b3b      	ldr	r3, [pc, #236]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a46:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8007a4a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007a4e:	fa92 f2a2 	rbit	r2, r2
 8007a52:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8007a56:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007a5a:	fab2 f282 	clz	r2, r2
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	f042 0220 	orr.w	r2, r2, #32
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	f002 021f 	and.w	r2, r2, #31
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8007a70:	4013      	ands	r3, r2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0ab      	beq.n	80079ce <HAL_RCC_OscConfig+0x1b6>
 8007a76:	e05c      	b.n	8007b32 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a78:	f7ff fb6c 	bl	8007154 <HAL_GetTick>
 8007a7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a80:	e00a      	b.n	8007a98 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a82:	f7ff fb67 	bl	8007154 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b64      	cmp	r3, #100	; 0x64
 8007a90:	d902      	bls.n	8007a98 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	f000 bf0d 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
 8007a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a9c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007aa4:	fa93 f3a3 	rbit	r3, r3
 8007aa8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8007aac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ab0:	fab3 f383 	clz	r3, r3
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d102      	bne.n	8007aca <HAL_RCC_OscConfig+0x2b2>
 8007ac4:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	e015      	b.n	8007af6 <HAL_RCC_OscConfig+0x2de>
 8007aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ace:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007ad6:	fa93 f3a3 	rbit	r3, r3
 8007ada:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ae2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007ae6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007aea:	fa93 f3a3 	rbit	r3, r3
 8007aee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007af2:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <HAL_RCC_OscConfig+0x314>)
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007afa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8007afe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007b02:	fa92 f2a2 	rbit	r2, r2
 8007b06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8007b0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007b0e:	fab2 f282 	clz	r2, r2
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	f042 0220 	orr.w	r2, r2, #32
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	f002 021f 	and.w	r2, r2, #31
 8007b1e:	2101      	movs	r1, #1
 8007b20:	fa01 f202 	lsl.w	r2, r1, r2
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1ab      	bne.n	8007a82 <HAL_RCC_OscConfig+0x26a>
 8007b2a:	e002      	b.n	8007b32 <HAL_RCC_OscConfig+0x31a>
 8007b2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 817f 	beq.w	8007e46 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007b48:	4ba7      	ldr	r3, [pc, #668]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f003 030c 	and.w	r3, r3, #12
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00c      	beq.n	8007b6e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007b54:	4ba4      	ldr	r3, [pc, #656]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f003 030c 	and.w	r3, r3, #12
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d173      	bne.n	8007c48 <HAL_RCC_OscConfig+0x430>
 8007b60:	4ba1      	ldr	r3, [pc, #644]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6c:	d16c      	bne.n	8007c48 <HAL_RCC_OscConfig+0x430>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b74:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007b78:	fa93 f3a3 	rbit	r3, r3
 8007b7c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8007b80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b84:	fab3 f383 	clz	r3, r3
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d102      	bne.n	8007b9e <HAL_RCC_OscConfig+0x386>
 8007b98:	4b93      	ldr	r3, [pc, #588]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	e013      	b.n	8007bc6 <HAL_RCC_OscConfig+0x3ae>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007ba8:	fa93 f3a3 	rbit	r3, r3
 8007bac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007bb6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007bba:	fa93 f3a3 	rbit	r3, r3
 8007bbe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007bc2:	4b89      	ldr	r3, [pc, #548]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8007bcc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8007bd0:	fa92 f2a2 	rbit	r2, r2
 8007bd4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8007bd8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007bdc:	fab2 f282 	clz	r2, r2
 8007be0:	b2d2      	uxtb	r2, r2
 8007be2:	f042 0220 	orr.w	r2, r2, #32
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	f002 021f 	and.w	r2, r2, #31
 8007bec:	2101      	movs	r1, #1
 8007bee:	fa01 f202 	lsl.w	r2, r1, r2
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <HAL_RCC_OscConfig+0x3f6>
 8007bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d002      	beq.n	8007c0e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f000 be52 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0e:	4b76      	ldr	r3, [pc, #472]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	21f8      	movs	r1, #248	; 0xf8
 8007c24:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c28:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8007c2c:	fa91 f1a1 	rbit	r1, r1
 8007c30:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8007c34:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007c38:	fab1 f181 	clz	r1, r1
 8007c3c:	b2c9      	uxtb	r1, r1
 8007c3e:	408b      	lsls	r3, r1
 8007c40:	4969      	ldr	r1, [pc, #420]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c46:	e0fe      	b.n	8007e46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8088 	beq.w	8007d6a <HAL_RCC_OscConfig+0x552>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8007c64:	fa93 f3a3 	rbit	r3, r3
 8007c68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8007c6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c70:	fab3 f383 	clz	r3, r3
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	461a      	mov	r2, r3
 8007c82:	2301      	movs	r3, #1
 8007c84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c86:	f7ff fa65 	bl	8007154 <HAL_GetTick>
 8007c8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c90:	f7ff fa60 	bl	8007154 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d902      	bls.n	8007ca6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	f000 be06 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007cb0:	fa93 f3a3 	rbit	r3, r3
 8007cb4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8007cb8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cbc:	fab3 f383 	clz	r3, r3
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x4be>
 8007cd0:	4b45      	ldr	r3, [pc, #276]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	e013      	b.n	8007cfe <HAL_RCC_OscConfig+0x4e6>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007ce0:	fa93 f3a3 	rbit	r3, r3
 8007ce4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007ce8:	2302      	movs	r3, #2
 8007cea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007cee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007cf2:	fa93 f3a3 	rbit	r3, r3
 8007cf6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007cfa:	4b3b      	ldr	r3, [pc, #236]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007d04:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007d08:	fa92 f2a2 	rbit	r2, r2
 8007d0c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8007d10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007d14:	fab2 f282 	clz	r2, r2
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	f042 0220 	orr.w	r2, r2, #32
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	f002 021f 	and.w	r2, r2, #31
 8007d24:	2101      	movs	r1, #1
 8007d26:	fa01 f202 	lsl.w	r2, r1, r2
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0af      	beq.n	8007c90 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d30:	4b2d      	ldr	r3, [pc, #180]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	21f8      	movs	r1, #248	; 0xf8
 8007d46:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d4a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007d4e:	fa91 f1a1 	rbit	r1, r1
 8007d52:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8007d56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007d5a:	fab1 f181 	clz	r1, r1
 8007d5e:	b2c9      	uxtb	r1, r1
 8007d60:	408b      	lsls	r3, r1
 8007d62:	4921      	ldr	r1, [pc, #132]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	600b      	str	r3, [r1, #0]
 8007d68:	e06d      	b.n	8007e46 <HAL_RCC_OscConfig+0x62e>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d70:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007d74:	fa93 f3a3 	rbit	r3, r3
 8007d78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8007d7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d80:	fab3 f383 	clz	r3, r3
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	461a      	mov	r2, r3
 8007d92:	2300      	movs	r3, #0
 8007d94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d96:	f7ff f9dd 	bl	8007154 <HAL_GetTick>
 8007d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d9e:	e00a      	b.n	8007db6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007da0:	f7ff f9d8 	bl	8007154 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d902      	bls.n	8007db6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	f000 bd7e 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
 8007db6:	2302      	movs	r3, #2
 8007db8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dc0:	fa93 f3a3 	rbit	r3, r3
 8007dc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8007dc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dcc:	fab3 f383 	clz	r3, r3
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f043 0301 	orr.w	r3, r3, #1
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d105      	bne.n	8007dec <HAL_RCC_OscConfig+0x5d4>
 8007de0:	4b01      	ldr	r3, [pc, #4]	; (8007de8 <HAL_RCC_OscConfig+0x5d0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	e016      	b.n	8007e14 <HAL_RCC_OscConfig+0x5fc>
 8007de6:	bf00      	nop
 8007de8:	40021000 	.word	0x40021000
 8007dec:	2302      	movs	r3, #2
 8007dee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df6:	fa93 f3a3 	rbit	r3, r3
 8007dfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007dfe:	2302      	movs	r3, #2
 8007e00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007e04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007e08:	fa93 f3a3 	rbit	r3, r3
 8007e0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e10:	4bbf      	ldr	r3, [pc, #764]	; (8008110 <HAL_RCC_OscConfig+0x8f8>)
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2202      	movs	r2, #2
 8007e16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007e1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007e1e:	fa92 f2a2 	rbit	r2, r2
 8007e22:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8007e26:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007e2a:	fab2 f282 	clz	r2, r2
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	f042 0220 	orr.w	r2, r2, #32
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	f002 021f 	and.w	r2, r2, #31
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e40:	4013      	ands	r3, r2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1ac      	bne.n	8007da0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8113 	beq.w	8008082 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d07c      	beq.n	8007f66 <HAL_RCC_OscConfig+0x74e>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e76:	fa93 f3a3 	rbit	r3, r3
 8007e7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8007e7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e82:	fab3 f383 	clz	r3, r3
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4ba2      	ldr	r3, [pc, #648]	; (8008114 <HAL_RCC_OscConfig+0x8fc>)
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	461a      	mov	r2, r3
 8007e92:	2301      	movs	r3, #1
 8007e94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e96:	f7ff f95d 	bl	8007154 <HAL_GetTick>
 8007e9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e9e:	e00a      	b.n	8007eb6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea0:	f7ff f958 	bl	8007154 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d902      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	f000 bcfe 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ec0:	fa93 f2a3 	rbit	r2, r3
 8007ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ec8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	fa93 f2a3 	rbit	r2, r3
 8007ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ef6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007efa:	2202      	movs	r2, #2
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	fa93 f2a3 	rbit	r2, r3
 8007f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f16:	4b7e      	ldr	r3, [pc, #504]	; (8008110 <HAL_RCC_OscConfig+0x8f8>)
 8007f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f22:	2102      	movs	r1, #2
 8007f24:	6019      	str	r1, [r3, #0]
 8007f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	fa93 f1a3 	rbit	r1, r3
 8007f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f3c:	6019      	str	r1, [r3, #0]
  return result;
 8007f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f42:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	fab3 f383 	clz	r3, r3
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	2101      	movs	r1, #1
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	4013      	ands	r3, r2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d09d      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x688>
 8007f64:	e08d      	b.n	8008082 <HAL_RCC_OscConfig+0x86a>
 8007f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	fa93 f2a3 	rbit	r2, r3
 8007f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007f88:	601a      	str	r2, [r3, #0]
  return result;
 8007f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007f92:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f94:	fab3 f383 	clz	r3, r3
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4b5d      	ldr	r3, [pc, #372]	; (8008114 <HAL_RCC_OscConfig+0x8fc>)
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fa8:	f7ff f8d4 	bl	8007154 <HAL_GetTick>
 8007fac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb0:	e00a      	b.n	8007fc8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fb2:	f7ff f8cf 	bl	8007154 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d902      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	f000 bc75 	b.w	80088b2 <HAL_RCC_OscConfig+0x109a>
 8007fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fcc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fd8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	fa93 f2a3 	rbit	r2, r3
 8007fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fe6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ff0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	fa93 f2a3 	rbit	r2, r3
 8008006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800800a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008014:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008018:	2202      	movs	r2, #2
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008020:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	fa93 f2a3 	rbit	r2, r3
 800802a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800802e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008032:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008034:	4b36      	ldr	r3, [pc, #216]	; (8008110 <HAL_RCC_OscConfig+0x8f8>)
 8008036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800803c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008040:	2102      	movs	r1, #2
 8008042:	6019      	str	r1, [r3, #0]
 8008044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008048:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	fa93 f1a3 	rbit	r1, r3
 8008052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008056:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800805a:	6019      	str	r1, [r3, #0]
  return result;
 800805c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008060:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	fab3 f383 	clz	r3, r3
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 031f 	and.w	r3, r3, #31
 8008076:	2101      	movs	r1, #1
 8008078:	fa01 f303 	lsl.w	r3, r1, r3
 800807c:	4013      	ands	r3, r2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d197      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008086:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 81a5 	beq.w	80083e2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008098:	2300      	movs	r3, #0
 800809a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800809e:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <HAL_RCC_OscConfig+0x8f8>)
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d116      	bne.n	80080d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080aa:	4b19      	ldr	r3, [pc, #100]	; (8008110 <HAL_RCC_OscConfig+0x8f8>)
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	4a18      	ldr	r2, [pc, #96]	; (8008110 <HAL_RCC_OscConfig+0x8f8>)
 80080b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b4:	61d3      	str	r3, [r2, #28]
 80080b6:	4b16      	ldr	r3, [pc, #88]	; (8008110 <HAL_RCC_OscConfig+0x8f8>)
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80080be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080d8:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <HAL_RCC_OscConfig+0x900>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d121      	bne.n	8008128 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080e4:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <HAL_RCC_OscConfig+0x900>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a0b      	ldr	r2, [pc, #44]	; (8008118 <HAL_RCC_OscConfig+0x900>)
 80080ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080f0:	f7ff f830 	bl	8007154 <HAL_GetTick>
 80080f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080f8:	e010      	b.n	800811c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fa:	f7ff f82b 	bl	8007154 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b64      	cmp	r3, #100	; 0x64
 8008108:	d908      	bls.n	800811c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e3d1      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
 800810e:	bf00      	nop
 8008110:	40021000 	.word	0x40021000
 8008114:	10908120 	.word	0x10908120
 8008118:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800811c:	4b8d      	ldr	r3, [pc, #564]	; (8008354 <HAL_RCC_OscConfig+0xb3c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0e8      	beq.n	80080fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800812c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d106      	bne.n	8008146 <HAL_RCC_OscConfig+0x92e>
 8008138:	4b87      	ldr	r3, [pc, #540]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	4a86      	ldr	r2, [pc, #536]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	6213      	str	r3, [r2, #32]
 8008144:	e035      	b.n	80081b2 <HAL_RCC_OscConfig+0x99a>
 8008146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800814a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <HAL_RCC_OscConfig+0x958>
 8008156:	4b80      	ldr	r3, [pc, #512]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	4a7f      	ldr	r2, [pc, #508]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 800815c:	f023 0301 	bic.w	r3, r3, #1
 8008160:	6213      	str	r3, [r2, #32]
 8008162:	4b7d      	ldr	r3, [pc, #500]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	4a7c      	ldr	r2, [pc, #496]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008168:	f023 0304 	bic.w	r3, r3, #4
 800816c:	6213      	str	r3, [r2, #32]
 800816e:	e020      	b.n	80081b2 <HAL_RCC_OscConfig+0x99a>
 8008170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008174:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b05      	cmp	r3, #5
 800817e:	d10c      	bne.n	800819a <HAL_RCC_OscConfig+0x982>
 8008180:	4b75      	ldr	r3, [pc, #468]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	4a74      	ldr	r2, [pc, #464]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008186:	f043 0304 	orr.w	r3, r3, #4
 800818a:	6213      	str	r3, [r2, #32]
 800818c:	4b72      	ldr	r3, [pc, #456]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	4a71      	ldr	r2, [pc, #452]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008192:	f043 0301 	orr.w	r3, r3, #1
 8008196:	6213      	str	r3, [r2, #32]
 8008198:	e00b      	b.n	80081b2 <HAL_RCC_OscConfig+0x99a>
 800819a:	4b6f      	ldr	r3, [pc, #444]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	4a6e      	ldr	r2, [pc, #440]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	6213      	str	r3, [r2, #32]
 80081a6:	4b6c      	ldr	r3, [pc, #432]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	4a6b      	ldr	r2, [pc, #428]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 80081ac:	f023 0304 	bic.w	r3, r3, #4
 80081b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 8081 	beq.w	80082c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081c4:	f7fe ffc6 	bl	8007154 <HAL_GetTick>
 80081c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081cc:	e00b      	b.n	80081e6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ce:	f7fe ffc1 	bl	8007154 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	f241 3288 	movw	r2, #5000	; 0x1388
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e365      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
 80081e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80081ee:	2202      	movs	r2, #2
 80081f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	fa93 f2a3 	rbit	r2, r3
 8008200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008204:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800820e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008212:	2202      	movs	r2, #2
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800821a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	fa93 f2a3 	rbit	r2, r3
 8008224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008228:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800822c:	601a      	str	r2, [r3, #0]
  return result;
 800822e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008232:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008236:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008238:	fab3 f383 	clz	r3, r3
 800823c:	b2db      	uxtb	r3, r3
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	b2db      	uxtb	r3, r3
 8008242:	f043 0302 	orr.w	r3, r3, #2
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d102      	bne.n	8008252 <HAL_RCC_OscConfig+0xa3a>
 800824c:	4b42      	ldr	r3, [pc, #264]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	e013      	b.n	800827a <HAL_RCC_OscConfig+0xa62>
 8008252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008256:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800825a:	2202      	movs	r2, #2
 800825c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800825e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008262:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	fa93 f2a3 	rbit	r2, r3
 800826c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008270:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	4b38      	ldr	r3, [pc, #224]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800827e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008282:	2102      	movs	r1, #2
 8008284:	6011      	str	r1, [r2, #0]
 8008286:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800828a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	fa92 f1a2 	rbit	r1, r2
 8008294:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008298:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800829c:	6011      	str	r1, [r2, #0]
  return result;
 800829e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082a2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	fab2 f282 	clz	r2, r2
 80082ac:	b2d2      	uxtb	r2, r2
 80082ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	f002 021f 	and.w	r2, r2, #31
 80082b8:	2101      	movs	r1, #1
 80082ba:	fa01 f202 	lsl.w	r2, r1, r2
 80082be:	4013      	ands	r3, r2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d084      	beq.n	80081ce <HAL_RCC_OscConfig+0x9b6>
 80082c4:	e083      	b.n	80083ce <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082c6:	f7fe ff45 	bl	8007154 <HAL_GetTick>
 80082ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ce:	e00b      	b.n	80082e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082d0:	f7fe ff40 	bl	8007154 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d901      	bls.n	80082e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e2e4      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
 80082e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80082f0:	2202      	movs	r2, #2
 80082f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	fa93 f2a3 	rbit	r2, r3
 8008302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008306:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008310:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008314:	2202      	movs	r2, #2
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800831c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	fa93 f2a3 	rbit	r2, r3
 8008326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800832a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800832e:	601a      	str	r2, [r3, #0]
  return result;
 8008330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008334:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008338:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800833a:	fab3 f383 	clz	r3, r3
 800833e:	b2db      	uxtb	r3, r3
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f043 0302 	orr.w	r3, r3, #2
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d106      	bne.n	800835c <HAL_RCC_OscConfig+0xb44>
 800834e:	4b02      	ldr	r3, [pc, #8]	; (8008358 <HAL_RCC_OscConfig+0xb40>)
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	e017      	b.n	8008384 <HAL_RCC_OscConfig+0xb6c>
 8008354:	40007000 	.word	0x40007000
 8008358:	40021000 	.word	0x40021000
 800835c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008360:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008364:	2202      	movs	r2, #2
 8008366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800836c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	fa93 f2a3 	rbit	r2, r3
 8008376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800837a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	4bb3      	ldr	r3, [pc, #716]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008388:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800838c:	2102      	movs	r1, #2
 800838e:	6011      	str	r1, [r2, #0]
 8008390:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008394:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	fa92 f1a2 	rbit	r1, r2
 800839e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80083a2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80083a6:	6011      	str	r1, [r2, #0]
  return result;
 80083a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80083ac:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	fab2 f282 	clz	r2, r2
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	f002 021f 	and.w	r2, r2, #31
 80083c2:	2101      	movs	r1, #1
 80083c4:	fa01 f202 	lsl.w	r2, r1, r2
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d180      	bne.n	80082d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083ce:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d105      	bne.n	80083e2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083d6:	4b9e      	ldr	r3, [pc, #632]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	4a9d      	ldr	r2, [pc, #628]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 80083dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 825e 	beq.w	80088b0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083f4:	4b96      	ldr	r3, [pc, #600]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f003 030c 	and.w	r3, r3, #12
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	f000 821f 	beq.w	8008840 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008406:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	2b02      	cmp	r3, #2
 8008410:	f040 8170 	bne.w	80086f4 <HAL_RCC_OscConfig+0xedc>
 8008414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008418:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800841c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008426:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	fa93 f2a3 	rbit	r2, r3
 8008430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008434:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008438:	601a      	str	r2, [r3, #0]
  return result;
 800843a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800843e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008442:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008444:	fab3 f383 	clz	r3, r3
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800844e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	461a      	mov	r2, r3
 8008456:	2300      	movs	r3, #0
 8008458:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800845a:	f7fe fe7b 	bl	8007154 <HAL_GetTick>
 800845e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008462:	e009      	b.n	8008478 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008464:	f7fe fe76 	bl	8007154 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e21c      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
 8008478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800847c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800848a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	fa93 f2a3 	rbit	r2, r3
 8008494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008498:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800849c:	601a      	str	r2, [r3, #0]
  return result;
 800849e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80084a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084a8:	fab3 f383 	clz	r3, r3
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d102      	bne.n	80084c2 <HAL_RCC_OscConfig+0xcaa>
 80084bc:	4b64      	ldr	r3, [pc, #400]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	e027      	b.n	8008512 <HAL_RCC_OscConfig+0xcfa>
 80084c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80084ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084d4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	fa93 f2a3 	rbit	r2, r3
 80084de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80084f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	fa93 f2a3 	rbit	r2, r3
 8008504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008508:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	4b50      	ldr	r3, [pc, #320]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008516:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800851a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800851e:	6011      	str	r1, [r2, #0]
 8008520:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008524:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008528:	6812      	ldr	r2, [r2, #0]
 800852a:	fa92 f1a2 	rbit	r1, r2
 800852e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008532:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008536:	6011      	str	r1, [r2, #0]
  return result;
 8008538:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800853c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	fab2 f282 	clz	r2, r2
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	f042 0220 	orr.w	r2, r2, #32
 800854c:	b2d2      	uxtb	r2, r2
 800854e:	f002 021f 	and.w	r2, r2, #31
 8008552:	2101      	movs	r1, #1
 8008554:	fa01 f202 	lsl.w	r2, r1, r2
 8008558:	4013      	ands	r3, r2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d182      	bne.n	8008464 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800855e:	4b3c      	ldr	r3, [pc, #240]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	f023 020f 	bic.w	r2, r3, #15
 8008566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800856a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	4937      	ldr	r1, [pc, #220]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 8008574:	4313      	orrs	r3, r2
 8008576:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008578:	4b35      	ldr	r3, [pc, #212]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8008580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008584:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6a19      	ldr	r1, [r3, #32]
 800858c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	430b      	orrs	r3, r1
 800859a:	492d      	ldr	r1, [pc, #180]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 800859c:	4313      	orrs	r3, r2
 800859e:	604b      	str	r3, [r1, #4]
 80085a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80085a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	fa93 f2a3 	rbit	r2, r3
 80085bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085c0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80085c4:	601a      	str	r2, [r3, #0]
  return result;
 80085c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80085ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085d0:	fab3 f383 	clz	r3, r3
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80085da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	461a      	mov	r2, r3
 80085e2:	2301      	movs	r3, #1
 80085e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e6:	f7fe fdb5 	bl	8007154 <HAL_GetTick>
 80085ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085ee:	e009      	b.n	8008604 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085f0:	f7fe fdb0 	bl	8007154 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d901      	bls.n	8008604 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e156      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
 8008604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008608:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800860c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008616:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	fa93 f2a3 	rbit	r2, r3
 8008620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008624:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008628:	601a      	str	r2, [r3, #0]
  return result;
 800862a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800862e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008632:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008634:	fab3 f383 	clz	r3, r3
 8008638:	b2db      	uxtb	r3, r3
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b01      	cmp	r3, #1
 8008646:	d105      	bne.n	8008654 <HAL_RCC_OscConfig+0xe3c>
 8008648:	4b01      	ldr	r3, [pc, #4]	; (8008650 <HAL_RCC_OscConfig+0xe38>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	e02a      	b.n	80086a4 <HAL_RCC_OscConfig+0xe8c>
 800864e:	bf00      	nop
 8008650:	40021000 	.word	0x40021000
 8008654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008658:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800865c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008666:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	fa93 f2a3 	rbit	r2, r3
 8008670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008674:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800867e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800868c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	fa93 f2a3 	rbit	r2, r3
 8008696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800869a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	4b86      	ldr	r3, [pc, #536]	; (80088bc <HAL_RCC_OscConfig+0x10a4>)
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80086a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80086ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80086b0:	6011      	str	r1, [r2, #0]
 80086b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80086b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80086ba:	6812      	ldr	r2, [r2, #0]
 80086bc:	fa92 f1a2 	rbit	r1, r2
 80086c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80086c4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80086c8:	6011      	str	r1, [r2, #0]
  return result;
 80086ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80086ce:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	fab2 f282 	clz	r2, r2
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	f042 0220 	orr.w	r2, r2, #32
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	f002 021f 	and.w	r2, r2, #31
 80086e4:	2101      	movs	r1, #1
 80086e6:	fa01 f202 	lsl.w	r2, r1, r2
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f43f af7f 	beq.w	80085f0 <HAL_RCC_OscConfig+0xdd8>
 80086f2:	e0dd      	b.n	80088b0 <HAL_RCC_OscConfig+0x1098>
 80086f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80086fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008706:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	fa93 f2a3 	rbit	r2, r3
 8008710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008714:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008718:	601a      	str	r2, [r3, #0]
  return result;
 800871a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800871e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008722:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008724:	fab3 f383 	clz	r3, r3
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800872e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	461a      	mov	r2, r3
 8008736:	2300      	movs	r3, #0
 8008738:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873a:	f7fe fd0b 	bl	8007154 <HAL_GetTick>
 800873e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008742:	e009      	b.n	8008758 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008744:	f7fe fd06 	bl	8007154 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e0ac      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
 8008758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800875c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800876a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	fa93 f2a3 	rbit	r2, r3
 8008774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008778:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800877c:	601a      	str	r2, [r3, #0]
  return result;
 800877e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008782:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008788:	fab3 f383 	clz	r3, r3
 800878c:	b2db      	uxtb	r3, r3
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b01      	cmp	r3, #1
 800879a:	d102      	bne.n	80087a2 <HAL_RCC_OscConfig+0xf8a>
 800879c:	4b47      	ldr	r3, [pc, #284]	; (80088bc <HAL_RCC_OscConfig+0x10a4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	e027      	b.n	80087f2 <HAL_RCC_OscConfig+0xfda>
 80087a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087a6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80087aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	fa93 f2a3 	rbit	r2, r3
 80087be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087cc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80087d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	fa93 f2a3 	rbit	r2, r3
 80087e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087e8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	4b33      	ldr	r3, [pc, #204]	; (80088bc <HAL_RCC_OscConfig+0x10a4>)
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80087f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80087fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80087fe:	6011      	str	r1, [r2, #0]
 8008800:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008804:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	fa92 f1a2 	rbit	r1, r2
 800880e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008812:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008816:	6011      	str	r1, [r2, #0]
  return result;
 8008818:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800881c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	fab2 f282 	clz	r2, r2
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	f042 0220 	orr.w	r2, r2, #32
 800882c:	b2d2      	uxtb	r2, r2
 800882e:	f002 021f 	and.w	r2, r2, #31
 8008832:	2101      	movs	r1, #1
 8008834:	fa01 f202 	lsl.w	r2, r1, r2
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d182      	bne.n	8008744 <HAL_RCC_OscConfig+0xf2c>
 800883e:	e037      	b.n	80088b0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008844:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e02e      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008854:	4b19      	ldr	r3, [pc, #100]	; (80088bc <HAL_RCC_OscConfig+0x10a4>)
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800885c:	4b17      	ldr	r3, [pc, #92]	; (80088bc <HAL_RCC_OscConfig+0x10a4>)
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008864:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008868:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800886c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008870:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	429a      	cmp	r2, r3
 800887a:	d117      	bne.n	80088ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800887c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008880:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008888:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008890:	429a      	cmp	r2, r3
 8008892:	d10b      	bne.n	80088ac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8008894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008898:	f003 020f 	and.w	r2, r3, #15
 800889c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40021000 	.word	0x40021000

080088c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b09e      	sub	sp, #120	; 0x78
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e162      	b.n	8008b9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088d8:	4b90      	ldr	r3, [pc, #576]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d910      	bls.n	8008908 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088e6:	4b8d      	ldr	r3, [pc, #564]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f023 0207 	bic.w	r2, r3, #7
 80088ee:	498b      	ldr	r1, [pc, #556]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f6:	4b89      	ldr	r3, [pc, #548]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e14a      	b.n	8008b9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008914:	4b82      	ldr	r3, [pc, #520]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	497f      	ldr	r1, [pc, #508]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008922:	4313      	orrs	r3, r2
 8008924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80dc 	beq.w	8008aec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d13c      	bne.n	80089b6 <HAL_RCC_ClockConfig+0xf6>
 800893c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008940:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008944:	fa93 f3a3 	rbit	r3, r3
 8008948:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800894a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800894c:	fab3 f383 	clz	r3, r3
 8008950:	b2db      	uxtb	r3, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b01      	cmp	r3, #1
 800895e:	d102      	bne.n	8008966 <HAL_RCC_ClockConfig+0xa6>
 8008960:	4b6f      	ldr	r3, [pc, #444]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	e00f      	b.n	8008986 <HAL_RCC_ClockConfig+0xc6>
 8008966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800896a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800896c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800896e:	fa93 f3a3 	rbit	r3, r3
 8008972:	667b      	str	r3, [r7, #100]	; 0x64
 8008974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008978:	663b      	str	r3, [r7, #96]	; 0x60
 800897a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800897c:	fa93 f3a3 	rbit	r3, r3
 8008980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008982:	4b67      	ldr	r3, [pc, #412]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800898a:	65ba      	str	r2, [r7, #88]	; 0x58
 800898c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800898e:	fa92 f2a2 	rbit	r2, r2
 8008992:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008996:	fab2 f282 	clz	r2, r2
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	f042 0220 	orr.w	r2, r2, #32
 80089a0:	b2d2      	uxtb	r2, r2
 80089a2:	f002 021f 	and.w	r2, r2, #31
 80089a6:	2101      	movs	r1, #1
 80089a8:	fa01 f202 	lsl.w	r2, r1, r2
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d17b      	bne.n	8008aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e0f3      	b.n	8008b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d13c      	bne.n	8008a38 <HAL_RCC_ClockConfig+0x178>
 80089be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c6:	fa93 f3a3 	rbit	r3, r3
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80089cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ce:	fab3 f383 	clz	r3, r3
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	095b      	lsrs	r3, r3, #5
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f043 0301 	orr.w	r3, r3, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d102      	bne.n	80089e8 <HAL_RCC_ClockConfig+0x128>
 80089e2:	4b4f      	ldr	r3, [pc, #316]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	e00f      	b.n	8008a08 <HAL_RCC_ClockConfig+0x148>
 80089e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f0:	fa93 f3a3 	rbit	r3, r3
 80089f4:	647b      	str	r3, [r7, #68]	; 0x44
 80089f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089fa:	643b      	str	r3, [r7, #64]	; 0x40
 80089fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fe:	fa93 f3a3 	rbit	r3, r3
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a04:	4b46      	ldr	r3, [pc, #280]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008a0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a10:	fa92 f2a2 	rbit	r2, r2
 8008a14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a18:	fab2 f282 	clz	r2, r2
 8008a1c:	b2d2      	uxtb	r2, r2
 8008a1e:	f042 0220 	orr.w	r2, r2, #32
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	f002 021f 	and.w	r2, r2, #31
 8008a28:	2101      	movs	r1, #1
 8008a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a2e:	4013      	ands	r3, r2
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d13a      	bne.n	8008aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e0b2      	b.n	8008b9e <HAL_RCC_ClockConfig+0x2de>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	fa93 f3a3 	rbit	r3, r3
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a46:	fab3 f383 	clz	r3, r3
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	095b      	lsrs	r3, r3, #5
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f043 0301 	orr.w	r3, r3, #1
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d102      	bne.n	8008a60 <HAL_RCC_ClockConfig+0x1a0>
 8008a5a:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	e00d      	b.n	8008a7c <HAL_RCC_ClockConfig+0x1bc>
 8008a60:	2302      	movs	r3, #2
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	fa93 f3a3 	rbit	r3, r3
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	623b      	str	r3, [r7, #32]
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	fa93 f3a3 	rbit	r3, r3
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	4b29      	ldr	r3, [pc, #164]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	61ba      	str	r2, [r7, #24]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	fa92 f2a2 	rbit	r2, r2
 8008a86:	617a      	str	r2, [r7, #20]
  return result;
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	fab2 f282 	clz	r2, r2
 8008a8e:	b2d2      	uxtb	r2, r2
 8008a90:	f042 0220 	orr.w	r2, r2, #32
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	f002 021f 	and.w	r2, r2, #31
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e079      	b.n	8008b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008aaa:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f023 0203 	bic.w	r2, r3, #3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	491a      	ldr	r1, [pc, #104]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008abc:	f7fe fb4a 	bl	8007154 <HAL_GetTick>
 8008ac0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac2:	e00a      	b.n	8008ada <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ac4:	f7fe fb46 	bl	8007154 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e061      	b.n	8008b9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ada:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <HAL_RCC_ClockConfig+0x260>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f003 020c 	and.w	r2, r3, #12
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d1eb      	bne.n	8008ac4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008aec:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d214      	bcs.n	8008b24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008afa:	4b08      	ldr	r3, [pc, #32]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f023 0207 	bic.w	r2, r3, #7
 8008b02:	4906      	ldr	r1, [pc, #24]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <HAL_RCC_ClockConfig+0x25c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d005      	beq.n	8008b24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e040      	b.n	8008b9e <HAL_RCC_ClockConfig+0x2de>
 8008b1c:	40022000 	.word	0x40022000
 8008b20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d008      	beq.n	8008b42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b30:	4b1d      	ldr	r3, [pc, #116]	; (8008ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	491a      	ldr	r1, [pc, #104]	; (8008ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b4e:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	4912      	ldr	r1, [pc, #72]	; (8008ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008b62:	f000 f829 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 8008b66:	4601      	mov	r1, r0
 8008b68:	4b0f      	ldr	r3, [pc, #60]	; (8008ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b70:	22f0      	movs	r2, #240	; 0xf0
 8008b72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	fa92 f2a2 	rbit	r2, r2
 8008b7a:	60fa      	str	r2, [r7, #12]
  return result;
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	fab2 f282 	clz	r2, r2
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	40d3      	lsrs	r3, r2
 8008b86:	4a09      	ldr	r2, [pc, #36]	; (8008bac <HAL_RCC_ClockConfig+0x2ec>)
 8008b88:	5cd3      	ldrb	r3, [r2, r3]
 8008b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8008b8e:	4a08      	ldr	r2, [pc, #32]	; (8008bb0 <HAL_RCC_ClockConfig+0x2f0>)
 8008b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008b92:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <HAL_RCC_ClockConfig+0x2f4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe fa94 	bl	80070c4 <HAL_InitTick>
  
  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3778      	adds	r7, #120	; 0x78
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	0800c0b4 	.word	0x0800c0b4
 8008bb0:	20000000 	.word	0x20000000
 8008bb4:	20000004 	.word	0x20000004

08008bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b08b      	sub	sp, #44	; 0x2c
 8008bbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61fb      	str	r3, [r7, #28]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61bb      	str	r3, [r7, #24]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008bd2:	4b2a      	ldr	r3, [pc, #168]	; (8008c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f003 030c 	and.w	r3, r3, #12
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d002      	beq.n	8008be8 <HAL_RCC_GetSysClockFreq+0x30>
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	d003      	beq.n	8008bee <HAL_RCC_GetSysClockFreq+0x36>
 8008be6:	e03f      	b.n	8008c68 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008be8:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008bea:	623b      	str	r3, [r7, #32]
      break;
 8008bec:	e03f      	b.n	8008c6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008bf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008bf8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	fa92 f2a2 	rbit	r2, r2
 8008c00:	607a      	str	r2, [r7, #4]
  return result;
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	fab2 f282 	clz	r2, r2
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	40d3      	lsrs	r3, r2
 8008c0c:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008c0e:	5cd3      	ldrb	r3, [r2, r3]
 8008c10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008c12:	4b1a      	ldr	r3, [pc, #104]	; (8008c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	220f      	movs	r2, #15
 8008c1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	fa92 f2a2 	rbit	r2, r2
 8008c24:	60fa      	str	r2, [r7, #12]
  return result;
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	fab2 f282 	clz	r2, r2
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	40d3      	lsrs	r3, r2
 8008c30:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c32:	5cd3      	ldrb	r3, [r2, r3]
 8008c34:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008c40:	4a0f      	ldr	r2, [pc, #60]	; (8008c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	fb02 f303 	mul.w	r3, r2, r3
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c50:	e007      	b.n	8008c62 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008c52:	4a0b      	ldr	r2, [pc, #44]	; (8008c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	fb02 f303 	mul.w	r3, r2, r3
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	623b      	str	r3, [r7, #32]
      break;
 8008c66:	e002      	b.n	8008c6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008c68:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008c6a:	623b      	str	r3, [r7, #32]
      break;
 8008c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	372c      	adds	r7, #44	; 0x2c
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	40021000 	.word	0x40021000
 8008c80:	007a1200 	.word	0x007a1200
 8008c84:	0800c0cc 	.word	0x0800c0cc
 8008c88:	0800c0dc 	.word	0x0800c0dc

08008c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <HAL_RCC_GetHCLKFreq+0x10>)
 8008c92:	681b      	ldr	r3, [r3, #0]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	20000000 	.word	0x20000000

08008ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008ca6:	f7ff fff1 	bl	8008c8c <HAL_RCC_GetHCLKFreq>
 8008caa:	4601      	mov	r1, r0
 8008cac:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008cb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	fa92 f2a2 	rbit	r2, r2
 8008cc0:	603a      	str	r2, [r7, #0]
  return result;
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	fab2 f282 	clz	r2, r2
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	40d3      	lsrs	r3, r2
 8008ccc:	4a04      	ldr	r2, [pc, #16]	; (8008ce0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008cce:	5cd3      	ldrb	r3, [r2, r3]
 8008cd0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	40021000 	.word	0x40021000
 8008ce0:	0800c0c4 	.word	0x0800c0c4

08008ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008cea:	f7ff ffcf 	bl	8008c8c <HAL_RCC_GetHCLKFreq>
 8008cee:	4601      	mov	r1, r0
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008cf8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008cfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	fa92 f2a2 	rbit	r2, r2
 8008d04:	603a      	str	r2, [r7, #0]
  return result;
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	fab2 f282 	clz	r2, r2
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	40d3      	lsrs	r3, r2
 8008d10:	4a04      	ldr	r2, [pc, #16]	; (8008d24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008d12:	5cd3      	ldrb	r3, [r2, r3]
 8008d14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40021000 	.word	0x40021000
 8008d24:	0800c0c4 	.word	0x0800c0c4

08008d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b092      	sub	sp, #72	; 0x48
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80d4 	beq.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d4c:	4b4e      	ldr	r3, [pc, #312]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10e      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d58:	4b4b      	ldr	r3, [pc, #300]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	4a4a      	ldr	r2, [pc, #296]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d62:	61d3      	str	r3, [r2, #28]
 8008d64:	4b48      	ldr	r3, [pc, #288]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d6c:	60bb      	str	r3, [r7, #8]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d76:	4b45      	ldr	r3, [pc, #276]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d118      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d82:	4b42      	ldr	r3, [pc, #264]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a41      	ldr	r2, [pc, #260]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d8e:	f7fe f9e1 	bl	8007154 <HAL_GetTick>
 8008d92:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d94:	e008      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d96:	f7fe f9dd 	bl	8007154 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b64      	cmp	r3, #100	; 0x64
 8008da2:	d901      	bls.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e1d6      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008da8:	4b38      	ldr	r3, [pc, #224]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0f0      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008db4:	4b34      	ldr	r3, [pc, #208]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 8084 	beq.w	8008ece <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d07c      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008dd4:	4b2c      	ldr	r3, [pc, #176]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	fa93 f3a3 	rbit	r3, r3
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008dee:	fab3 f383 	clz	r3, r3
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	4b26      	ldr	r3, [pc, #152]	; (8008e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	2301      	movs	r3, #1
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	fa93 f3a3 	rbit	r3, r3
 8008e0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e12:	fab3 f383 	clz	r3, r3
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	461a      	mov	r2, r3
 8008e22:	2300      	movs	r3, #0
 8008e24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e26:	4a18      	ldr	r2, [pc, #96]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d04b      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e36:	f7fe f98d 	bl	8007154 <HAL_GetTick>
 8008e3a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e3c:	e00a      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e3e:	f7fe f989 	bl	8007154 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e180      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008e54:	2302      	movs	r3, #2
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	fa93 f3a3 	rbit	r3, r3
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e60:	2302      	movs	r3, #2
 8008e62:	623b      	str	r3, [r7, #32]
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	fa93 f3a3 	rbit	r3, r3
 8008e6a:	61fb      	str	r3, [r7, #28]
  return result;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6e:	fab3 f383 	clz	r3, r3
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	095b      	lsrs	r3, r3, #5
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f043 0302 	orr.w	r3, r3, #2
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d108      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008e82:	4b01      	ldr	r3, [pc, #4]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	e00d      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008e88:	40021000 	.word	0x40021000
 8008e8c:	40007000 	.word	0x40007000
 8008e90:	10908100 	.word	0x10908100
 8008e94:	2302      	movs	r3, #2
 8008e96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	fa93 f3a3 	rbit	r3, r3
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	4b9a      	ldr	r3, [pc, #616]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	613a      	str	r2, [r7, #16]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	fa92 f2a2 	rbit	r2, r2
 8008eae:	60fa      	str	r2, [r7, #12]
  return result;
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	fab2 f282 	clz	r2, r2
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	f002 021f 	and.w	r2, r2, #31
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0b7      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008ece:	4b8f      	ldr	r3, [pc, #572]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	498c      	ldr	r1, [pc, #560]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ee0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d105      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee8:	4b88      	ldr	r3, [pc, #544]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	4a87      	ldr	r2, [pc, #540]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ef2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d008      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f00:	4b82      	ldr	r3, [pc, #520]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	f023 0203 	bic.w	r2, r3, #3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	497f      	ldr	r1, [pc, #508]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d008      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f1e:	4b7b      	ldr	r3, [pc, #492]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	4978      	ldr	r1, [pc, #480]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d008      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f3c:	4b73      	ldr	r3, [pc, #460]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	4970      	ldr	r1, [pc, #448]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f5a:	4b6c      	ldr	r3, [pc, #432]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5e:	f023 0210 	bic.w	r2, r3, #16
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	4969      	ldr	r1, [pc, #420]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008f78:	4b64      	ldr	r3, [pc, #400]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	4961      	ldr	r1, [pc, #388]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d008      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f96:	4b5d      	ldr	r3, [pc, #372]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9a:	f023 0220 	bic.w	r2, r3, #32
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	495a      	ldr	r1, [pc, #360]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fb4:	4b55      	ldr	r3, [pc, #340]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	4952      	ldr	r1, [pc, #328]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0308 	and.w	r3, r3, #8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d008      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fd2:	4b4e      	ldr	r3, [pc, #312]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	494b      	ldr	r1, [pc, #300]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d008      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ff0:	4b46      	ldr	r3, [pc, #280]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	4943      	ldr	r1, [pc, #268]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800900e:	4b3f      	ldr	r3, [pc, #252]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	493c      	ldr	r1, [pc, #240]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800901c:	4313      	orrs	r3, r2
 800901e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009028:	2b00      	cmp	r3, #0
 800902a:	d008      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800902c:	4b37      	ldr	r3, [pc, #220]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	4934      	ldr	r1, [pc, #208]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800903a:	4313      	orrs	r3, r2
 800903c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800904a:	4b30      	ldr	r3, [pc, #192]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	492d      	ldr	r1, [pc, #180]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009058:	4313      	orrs	r3, r2
 800905a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d008      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009068:	4b28      	ldr	r3, [pc, #160]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009074:	4925      	ldr	r1, [pc, #148]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009076:	4313      	orrs	r3, r2
 8009078:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d008      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8009086:	4b21      	ldr	r3, [pc, #132]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	491e      	ldr	r1, [pc, #120]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009094:	4313      	orrs	r3, r2
 8009096:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d008      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80090a4:	4b19      	ldr	r3, [pc, #100]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b0:	4916      	ldr	r1, [pc, #88]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80090c2:	4b12      	ldr	r3, [pc, #72]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	490f      	ldr	r1, [pc, #60]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ec:	4907      	ldr	r1, [pc, #28]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00c      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80090fe:	4b03      	ldr	r3, [pc, #12]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	e002      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800910a:	bf00      	nop
 800910c:	40021000 	.word	0x40021000
 8009110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009112:	4913      	ldr	r1, [pc, #76]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009114:	4313      	orrs	r3, r2
 8009116:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d008      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009130:	490b      	ldr	r1, [pc, #44]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009132:	4313      	orrs	r3, r2
 8009134:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d008      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914e:	4904      	ldr	r1, [pc, #16]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009150:	4313      	orrs	r3, r2
 8009152:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3748      	adds	r7, #72	; 0x48
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	40021000 	.word	0x40021000

08009164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009168:	e7fe      	b.n	8009168 <NMI_Handler+0x4>

0800916a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800916a:	b480      	push	{r7}
 800916c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800916e:	e7fe      	b.n	800916e <HardFault_Handler+0x4>

08009170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009174:	e7fe      	b.n	8009174 <MemManage_Handler+0x4>

08009176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009176:	b480      	push	{r7}
 8009178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800917a:	e7fe      	b.n	800917a <BusFault_Handler+0x4>

0800917c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009180:	e7fe      	b.n	8009180 <UsageFault_Handler+0x4>

08009182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009182:	b480      	push	{r7}
 8009184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009186:	bf00      	nop
 8009188:	46bd      	mov	sp, r7
 800918a:	bc80      	pop	{r7}
 800918c:	4770      	bx	lr

0800918e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800918e:	b480      	push	{r7}
 8009190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009192:	bf00      	nop
 8009194:	46bd      	mov	sp, r7
 8009196:	bc80      	pop	{r7}
 8009198:	4770      	bx	lr
	...

0800919c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80091a0:	4802      	ldr	r0, [pc, #8]	; (80091ac <DMA1_Channel1_IRQHandler+0x10>)
 80091a2:	f7fa f9eb 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80091a6:	bf00      	nop
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000214 	.word	0x20000214

080091b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80091b4:	4802      	ldr	r0, [pc, #8]	; (80091c0 <DMA1_Channel6_IRQHandler+0x10>)
 80091b6:	f7fa f9e1 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80091ba:	bf00      	nop
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000318 	.word	0x20000318

080091c4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80091c8:	4802      	ldr	r0, [pc, #8]	; (80091d4 <DMA1_Channel7_IRQHandler+0x10>)
 80091ca:	f7fa f9d7 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80091ce:	bf00      	nop
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	200002d4 	.word	0x200002d4

080091d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80091dc:	4802      	ldr	r0, [pc, #8]	; (80091e8 <TIM3_IRQHandler+0x10>)
 80091de:	f7fa fecd 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80091e2:	bf00      	nop
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000144 	.word	0x20000144

080091ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80091f0:	4802      	ldr	r0, [pc, #8]	; (80091fc <I2C1_EV_IRQHandler+0x10>)
 80091f2:	f7fc fb95 	bl	8005920 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80091f6:	bf00      	nop
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20000258 	.word	0x20000258

08009200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009204:	4802      	ldr	r0, [pc, #8]	; (8009210 <USART1_IRQHandler+0x10>)
 8009206:	f000 fb79 	bl	80098fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800920a:	bf00      	nop
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	200003e8 	.word	0x200003e8

08009214 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009218:	4802      	ldr	r0, [pc, #8]	; (8009224 <USART2_IRQHandler+0x10>)
 800921a:	f000 fb6f 	bl	80098fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	2000046c 	.word	0x2000046c

08009228 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800922c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009230:	f7fa f870 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009234:	bf00      	nop
 8009236:	bd80      	pop	{r7, pc}

08009238 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800923c:	4802      	ldr	r0, [pc, #8]	; (8009248 <SPI3_IRQHandler+0x10>)
 800923e:	f000 f91d 	bl	800947c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8009242:	bf00      	nop
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	2000035c 	.word	0x2000035c

0800924c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009254:	4a14      	ldr	r2, [pc, #80]	; (80092a8 <_sbrk+0x5c>)
 8009256:	4b15      	ldr	r3, [pc, #84]	; (80092ac <_sbrk+0x60>)
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009260:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <_sbrk+0x64>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009268:	4b11      	ldr	r3, [pc, #68]	; (80092b0 <_sbrk+0x64>)
 800926a:	4a12      	ldr	r2, [pc, #72]	; (80092b4 <_sbrk+0x68>)
 800926c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800926e:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <_sbrk+0x64>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	429a      	cmp	r2, r3
 800927a:	d207      	bcs.n	800928c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800927c:	f002 fa62 	bl	800b744 <__errno>
 8009280:	4603      	mov	r3, r0
 8009282:	220c      	movs	r2, #12
 8009284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009286:	f04f 33ff 	mov.w	r3, #4294967295
 800928a:	e009      	b.n	80092a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800928c:	4b08      	ldr	r3, [pc, #32]	; (80092b0 <_sbrk+0x64>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009292:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <_sbrk+0x64>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4413      	add	r3, r2
 800929a:	4a05      	ldr	r2, [pc, #20]	; (80092b0 <_sbrk+0x64>)
 800929c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800929e:	68fb      	ldr	r3, [r7, #12]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20010000 	.word	0x20010000
 80092ac:	00000400 	.word	0x00000400
 80092b0:	200001bc 	.word	0x200001bc
 80092b4:	200015f0 	.word	0x200015f0

080092b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e0c1      	b.n	800944e <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d108      	bne.n	80092e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092da:	d009      	beq.n	80092f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	61da      	str	r2, [r3, #28]
 80092e2:	e005      	b.n	80092f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d12a      	bne.n	8009358 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a52      	ldr	r2, [pc, #328]	; (8009458 <HAL_SPI_Init+0x1a0>)
 800930e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a52      	ldr	r2, [pc, #328]	; (800945c <HAL_SPI_Init+0x1a4>)
 8009314:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a51      	ldr	r2, [pc, #324]	; (8009460 <HAL_SPI_Init+0x1a8>)
 800931a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a51      	ldr	r2, [pc, #324]	; (8009464 <HAL_SPI_Init+0x1ac>)
 8009320:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a50      	ldr	r2, [pc, #320]	; (8009468 <HAL_SPI_Init+0x1b0>)
 8009326:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a50      	ldr	r2, [pc, #320]	; (800946c <HAL_SPI_Init+0x1b4>)
 800932c:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a4f      	ldr	r2, [pc, #316]	; (8009470 <HAL_SPI_Init+0x1b8>)
 8009332:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a4f      	ldr	r2, [pc, #316]	; (8009474 <HAL_SPI_Init+0x1bc>)
 8009338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a4b      	ldr	r2, [pc, #300]	; (8009478 <HAL_SPI_Init+0x1c0>)
 800934a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800936e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009378:	d902      	bls.n	8009380 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800937a:	2300      	movs	r3, #0
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e002      	b.n	8009386 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009384:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800938e:	d007      	beq.n	80093a0 <HAL_SPI_Init+0xe8>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009398:	d002      	beq.n	80093a0 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093b0:	431a      	orrs	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	431a      	orrs	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093d8:	431a      	orrs	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e2:	ea42 0103 	orr.w	r1, r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	f003 0204 	and.w	r2, r3, #4
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	431a      	orrs	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940e:	f003 0308 	and.w	r3, r3, #8
 8009412:	431a      	orrs	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800941c:	ea42 0103 	orr.w	r1, r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	430a      	orrs	r2, r1
 800942c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69da      	ldr	r2, [r3, #28]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800943c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	0800967d 	.word	0x0800967d
 800945c:	0800968f 	.word	0x0800968f
 8009460:	080096a1 	.word	0x080096a1
 8009464:	080096b3 	.word	0x080096b3
 8009468:	080096c5 	.word	0x080096c5
 800946c:	080096d7 	.word	0x080096d7
 8009470:	080096e9 	.word	0x080096e9
 8009474:	080096fb 	.word	0x080096fb
 8009478:	080075d9 	.word	0x080075d9

0800947c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	099b      	lsrs	r3, r3, #6
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10f      	bne.n	80094c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	099b      	lsrs	r3, r3, #6
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d004      	beq.n	80094c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
    return;
 80094be:	e0d8      	b.n	8009672 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	085b      	lsrs	r3, r3, #1
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00a      	beq.n	80094e2 <HAL_SPI_IRQHandler+0x66>
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	09db      	lsrs	r3, r3, #7
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4798      	blx	r3
    return;
 80094e0:	e0c7      	b.n	8009672 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	095b      	lsrs	r3, r3, #5
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10c      	bne.n	8009508 <HAL_SPI_IRQHandler+0x8c>
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	099b      	lsrs	r3, r3, #6
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d106      	bne.n	8009508 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	0a1b      	lsrs	r3, r3, #8
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80b5 	beq.w	8009672 <HAL_SPI_IRQHandler+0x1f6>
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	095b      	lsrs	r3, r3, #5
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 80ae 	beq.w	8009672 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	099b      	lsrs	r3, r3, #6
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d023      	beq.n	800956a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d011      	beq.n	8009552 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009532:	f043 0204 	orr.w	r2, r3, #4
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	617b      	str	r3, [r7, #20]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	e00b      	b.n	800956a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009552:	2300      	movs	r3, #0
 8009554:	613b      	str	r3, [r7, #16]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	613b      	str	r3, [r7, #16]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	693b      	ldr	r3, [r7, #16]
        return;
 8009568:	e083      	b.n	8009672 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	095b      	lsrs	r3, r3, #5
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d014      	beq.n	80095a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800957a:	f043 0201 	orr.w	r2, r3, #1
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009582:	2300      	movs	r3, #0
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00c      	beq.n	80095c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b0:	f043 0208 	orr.w	r2, r3, #8
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095b8:	2300      	movs	r3, #0
 80095ba:	60bb      	str	r3, [r7, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	60bb      	str	r3, [r7, #8]
 80095c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d050      	beq.n	8009670 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <HAL_SPI_IRQHandler+0x17e>
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d034      	beq.n	8009664 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0203 	bic.w	r2, r2, #3
 8009608:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960e:	2b00      	cmp	r3, #0
 8009610:	d011      	beq.n	8009636 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009616:	4a18      	ldr	r2, [pc, #96]	; (8009678 <HAL_SPI_IRQHandler+0x1fc>)
 8009618:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800961e:	4618      	mov	r0, r3
 8009620:	f7f9 ff6e 	bl	8003500 <HAL_DMA_Abort_IT>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800962e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963a:	2b00      	cmp	r3, #0
 800963c:	d017      	beq.n	800966e <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009642:	4a0d      	ldr	r2, [pc, #52]	; (8009678 <HAL_SPI_IRQHandler+0x1fc>)
 8009644:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964a:	4618      	mov	r0, r3
 800964c:	f7f9 ff58 	bl	8003500 <HAL_DMA_Abort_IT>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009662:	e004      	b.n	800966e <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800966c:	e000      	b.n	8009670 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800966e:	bf00      	nop
    return;
 8009670:	bf00      	nop
  }
}
 8009672:	3720      	adds	r7, #32
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	0800970d 	.word	0x0800970d

0800967c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr

0800968e <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr

080096b2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	bc80      	pop	{r7}
 80096c2:	4770      	bx	lr

080096c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	4770      	bx	lr

080096d6 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80096de:	bf00      	nop
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr

080096e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bc80      	pop	{r7}
 80096f8:	4770      	bx	lr

080096fa <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr

0800970c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009718:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e040      	b.n	80097cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7fd ffd2 	bl	8007704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2224      	movs	r2, #36	; 0x24
 8009764:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fbbc 	bl	8009ef4 <UART_SetConfig>
 800977c:	4603      	mov	r3, r0
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e022      	b.n	80097cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fd86 	bl	800a2a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0201 	orr.w	r2, r2, #1
 80097c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fe0c 	bl	800a3e2 <UART_CheckIdleState>
 80097ca:	4603      	mov	r3, r0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af02      	add	r7, sp, #8
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	f040 8082 	bne.w	80098f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <HAL_UART_Transmit+0x26>
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e07a      	b.n	80098f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_UART_Transmit+0x38>
 8009808:	2302      	movs	r3, #2
 800980a:	e073      	b.n	80098f4 <HAL_UART_Transmit+0x120>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2221      	movs	r2, #33	; 0x21
 8009820:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009822:	f7fd fc97 	bl	8007154 <HAL_GetTick>
 8009826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	88fa      	ldrh	r2, [r7, #6]
 800982c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	88fa      	ldrh	r2, [r7, #6]
 8009834:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009840:	d108      	bne.n	8009854 <HAL_UART_Transmit+0x80>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	e003      	b.n	800985c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009864:	e02d      	b.n	80098c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2200      	movs	r2, #0
 800986e:	2180      	movs	r1, #128	; 0x80
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 fdff 	bl	800a474 <UART_WaitOnFlagUntilTimeout>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e039      	b.n	80098f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	881a      	ldrh	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009892:	b292      	uxth	r2, r2
 8009894:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	3302      	adds	r3, #2
 800989a:	61bb      	str	r3, [r7, #24]
 800989c:	e008      	b.n	80098b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	b292      	uxth	r2, r2
 80098a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	3301      	adds	r3, #1
 80098ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1cb      	bne.n	8009866 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2200      	movs	r2, #0
 80098d6:	2140      	movs	r1, #64	; 0x40
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fdcb 	bl	800a474 <UART_WaitOnFlagUntilTimeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e005      	b.n	80098f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2220      	movs	r2, #32
 80098ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	e000      	b.n	80098f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80098f2:	2302      	movs	r3, #2
  }
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b0ba      	sub	sp, #232	; 0xe8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009922:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009926:	f640 030f 	movw	r3, #2063	; 0x80f
 800992a:	4013      	ands	r3, r2
 800992c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d115      	bne.n	8009964 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993c:	f003 0320 	and.w	r3, r3, #32
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00f      	beq.n	8009964 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	d009      	beq.n	8009964 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 82a3 	beq.w	8009ea0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
      }
      return;
 8009962:	e29d      	b.n	8009ea0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 8117 	beq.w	8009b9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800996e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d106      	bne.n	8009988 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800997a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800997e:	4b85      	ldr	r3, [pc, #532]	; (8009b94 <HAL_UART_IRQHandler+0x298>)
 8009980:	4013      	ands	r3, r2
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 810a 	beq.w	8009b9c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d011      	beq.n	80099b8 <HAL_UART_IRQHandler+0xbc>
 8009994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2201      	movs	r2, #1
 80099a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ae:	f043 0201 	orr.w	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d011      	beq.n	80099e8 <HAL_UART_IRQHandler+0xec>
 80099c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2202      	movs	r2, #2
 80099d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099de:	f043 0204 	orr.w	r2, r3, #4
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d011      	beq.n	8009a18 <HAL_UART_IRQHandler+0x11c>
 80099f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2204      	movs	r2, #4
 8009a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a0e:	f043 0202 	orr.w	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a1c:	f003 0308 	and.w	r3, r3, #8
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d017      	beq.n	8009a54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2208      	movs	r2, #8
 8009a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a4a:	f043 0208 	orr.w	r2, r3, #8
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d012      	beq.n	8009a86 <HAL_UART_IRQHandler+0x18a>
 8009a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00c      	beq.n	8009a86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a7c:	f043 0220 	orr.w	r2, r3, #32
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 8209 	beq.w	8009ea4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ace:	2b40      	cmp	r3, #64	; 0x40
 8009ad0:	d005      	beq.n	8009ade <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d04f      	beq.n	8009b7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fd8c 	bl	800a5fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d141      	bne.n	8009b76 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3308      	adds	r3, #8
 8009af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1d9      	bne.n	8009af2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d013      	beq.n	8009b6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4a:	4a13      	ldr	r2, [pc, #76]	; (8009b98 <HAL_UART_IRQHandler+0x29c>)
 8009b4c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f9 fcd4 	bl	8003500 <HAL_DMA_Abort_IT>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d017      	beq.n	8009b8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b6c:	e00f      	b.n	8009b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f9ab 	bl	8009eca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b74:	e00b      	b.n	8009b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f9a7 	bl	8009eca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b7c:	e007      	b.n	8009b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f9a3 	bl	8009eca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009b8c:	e18a      	b.n	8009ea4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b8e:	bf00      	nop
    return;
 8009b90:	e188      	b.n	8009ea4 <HAL_UART_IRQHandler+0x5a8>
 8009b92:	bf00      	nop
 8009b94:	04000120 	.word	0x04000120
 8009b98:	0800a6c1 	.word	0x0800a6c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	f040 8143 	bne.w	8009e2c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 813c 	beq.w	8009e2c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8135 	beq.w	8009e2c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2210      	movs	r2, #16
 8009bc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	f040 80b1 	bne.w	8009d3c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009be6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 815c 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	f080 8154 	bcs.w	8009ea8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	2b20      	cmp	r3, #32
 8009c12:	f000 8085 	beq.w	8009d20 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c22:	e853 3f00 	ldrex	r3, [r3]
 8009c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1da      	bne.n	8009c16 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3308      	adds	r3, #8
 8009c66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c72:	f023 0301 	bic.w	r3, r3, #1
 8009c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e1      	bne.n	8009c60 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cc8:	e841 2300 	strex	r3, r2, [r1]
 8009ccc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e3      	bne.n	8009c9c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cf0:	f023 0310 	bic.w	r3, r3, #16
 8009cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e4      	bne.n	8009ce0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7f9 fbb8 	bl	8003490 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f8d1 	bl	8009edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d3a:	e0b5      	b.n	8009ea8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80a7 	beq.w	8009eac <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 80a2 	beq.w	8009eac <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e4      	bne.n	8009d68 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	623b      	str	r3, [r7, #32]
   return(result);
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8009dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e3      	bne.n	8009d9e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f023 0310 	bic.w	r3, r3, #16
 8009dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	69b9      	ldr	r1, [r7, #24]
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	617b      	str	r3, [r7, #20]
   return(result);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e4      	bne.n	8009de8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f859 	bl	8009edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e2a:	e03f      	b.n	8009eac <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00e      	beq.n	8009e56 <HAL_UART_IRQHandler+0x55a>
 8009e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d008      	beq.n	8009e56 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fc76 	bl	800a740 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e54:	e02d      	b.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00e      	beq.n	8009e80 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d008      	beq.n	8009e80 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01c      	beq.n	8009eb0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
    }
    return;
 8009e7e:	e017      	b.n	8009eb0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d012      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
 8009e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fc27 	bl	800a6ec <UART_EndTransmit_IT>
    return;
 8009e9e:	e008      	b.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009ea0:	bf00      	nop
 8009ea2:	e006      	b.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009ea4:	bf00      	nop
 8009ea6:	e004      	b.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009ea8:	bf00      	nop
 8009eaa:	e002      	b.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009eac:	bf00      	nop
 8009eae:	e000      	b.n	8009eb2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009eb0:	bf00      	nop
  }

}
 8009eb2:	37e8      	adds	r7, #232	; 0xe8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bc80      	pop	{r7}
 8009ec8:	4770      	bx	lr

08009eca <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bc80      	pop	{r7}
 8009ef0:	4770      	bx	lr
	...

08009ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b92      	ldr	r3, [pc, #584]	; (800a168 <UART_SetConfig+0x274>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	6979      	ldr	r1, [r7, #20]
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a80      	ldr	r2, [pc, #512]	; (800a16c <UART_SetConfig+0x278>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d120      	bne.n	8009fb2 <UART_SetConfig+0xbe>
 8009f70:	4b7f      	ldr	r3, [pc, #508]	; (800a170 <UART_SetConfig+0x27c>)
 8009f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d817      	bhi.n	8009fac <UART_SetConfig+0xb8>
 8009f7c:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <UART_SetConfig+0x90>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	08009fa1 	.word	0x08009fa1
 8009f8c:	08009fa7 	.word	0x08009fa7
 8009f90:	08009f9b 	.word	0x08009f9b
 8009f94:	2301      	movs	r3, #1
 8009f96:	77fb      	strb	r3, [r7, #31]
 8009f98:	e0b5      	b.n	800a106 <UART_SetConfig+0x212>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	77fb      	strb	r3, [r7, #31]
 8009f9e:	e0b2      	b.n	800a106 <UART_SetConfig+0x212>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	77fb      	strb	r3, [r7, #31]
 8009fa4:	e0af      	b.n	800a106 <UART_SetConfig+0x212>
 8009fa6:	2308      	movs	r3, #8
 8009fa8:	77fb      	strb	r3, [r7, #31]
 8009faa:	e0ac      	b.n	800a106 <UART_SetConfig+0x212>
 8009fac:	2310      	movs	r3, #16
 8009fae:	77fb      	strb	r3, [r7, #31]
 8009fb0:	e0a9      	b.n	800a106 <UART_SetConfig+0x212>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a6f      	ldr	r2, [pc, #444]	; (800a174 <UART_SetConfig+0x280>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d124      	bne.n	800a006 <UART_SetConfig+0x112>
 8009fbc:	4b6c      	ldr	r3, [pc, #432]	; (800a170 <UART_SetConfig+0x27c>)
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009fc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fc8:	d011      	beq.n	8009fee <UART_SetConfig+0xfa>
 8009fca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fce:	d817      	bhi.n	800a000 <UART_SetConfig+0x10c>
 8009fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd4:	d011      	beq.n	8009ffa <UART_SetConfig+0x106>
 8009fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fda:	d811      	bhi.n	800a000 <UART_SetConfig+0x10c>
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <UART_SetConfig+0xf4>
 8009fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe4:	d006      	beq.n	8009ff4 <UART_SetConfig+0x100>
 8009fe6:	e00b      	b.n	800a000 <UART_SetConfig+0x10c>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	77fb      	strb	r3, [r7, #31]
 8009fec:	e08b      	b.n	800a106 <UART_SetConfig+0x212>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	77fb      	strb	r3, [r7, #31]
 8009ff2:	e088      	b.n	800a106 <UART_SetConfig+0x212>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e085      	b.n	800a106 <UART_SetConfig+0x212>
 8009ffa:	2308      	movs	r3, #8
 8009ffc:	77fb      	strb	r3, [r7, #31]
 8009ffe:	e082      	b.n	800a106 <UART_SetConfig+0x212>
 800a000:	2310      	movs	r3, #16
 800a002:	77fb      	strb	r3, [r7, #31]
 800a004:	e07f      	b.n	800a106 <UART_SetConfig+0x212>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a5b      	ldr	r2, [pc, #364]	; (800a178 <UART_SetConfig+0x284>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d124      	bne.n	800a05a <UART_SetConfig+0x166>
 800a010:	4b57      	ldr	r3, [pc, #348]	; (800a170 <UART_SetConfig+0x27c>)
 800a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a014:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a018:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a01c:	d011      	beq.n	800a042 <UART_SetConfig+0x14e>
 800a01e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a022:	d817      	bhi.n	800a054 <UART_SetConfig+0x160>
 800a024:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a028:	d011      	beq.n	800a04e <UART_SetConfig+0x15a>
 800a02a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a02e:	d811      	bhi.n	800a054 <UART_SetConfig+0x160>
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <UART_SetConfig+0x148>
 800a034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a038:	d006      	beq.n	800a048 <UART_SetConfig+0x154>
 800a03a:	e00b      	b.n	800a054 <UART_SetConfig+0x160>
 800a03c:	2300      	movs	r3, #0
 800a03e:	77fb      	strb	r3, [r7, #31]
 800a040:	e061      	b.n	800a106 <UART_SetConfig+0x212>
 800a042:	2302      	movs	r3, #2
 800a044:	77fb      	strb	r3, [r7, #31]
 800a046:	e05e      	b.n	800a106 <UART_SetConfig+0x212>
 800a048:	2304      	movs	r3, #4
 800a04a:	77fb      	strb	r3, [r7, #31]
 800a04c:	e05b      	b.n	800a106 <UART_SetConfig+0x212>
 800a04e:	2308      	movs	r3, #8
 800a050:	77fb      	strb	r3, [r7, #31]
 800a052:	e058      	b.n	800a106 <UART_SetConfig+0x212>
 800a054:	2310      	movs	r3, #16
 800a056:	77fb      	strb	r3, [r7, #31]
 800a058:	e055      	b.n	800a106 <UART_SetConfig+0x212>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a47      	ldr	r2, [pc, #284]	; (800a17c <UART_SetConfig+0x288>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d124      	bne.n	800a0ae <UART_SetConfig+0x1ba>
 800a064:	4b42      	ldr	r3, [pc, #264]	; (800a170 <UART_SetConfig+0x27c>)
 800a066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a068:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a06c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a070:	d011      	beq.n	800a096 <UART_SetConfig+0x1a2>
 800a072:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a076:	d817      	bhi.n	800a0a8 <UART_SetConfig+0x1b4>
 800a078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a07c:	d011      	beq.n	800a0a2 <UART_SetConfig+0x1ae>
 800a07e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a082:	d811      	bhi.n	800a0a8 <UART_SetConfig+0x1b4>
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <UART_SetConfig+0x19c>
 800a088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a08c:	d006      	beq.n	800a09c <UART_SetConfig+0x1a8>
 800a08e:	e00b      	b.n	800a0a8 <UART_SetConfig+0x1b4>
 800a090:	2300      	movs	r3, #0
 800a092:	77fb      	strb	r3, [r7, #31]
 800a094:	e037      	b.n	800a106 <UART_SetConfig+0x212>
 800a096:	2302      	movs	r3, #2
 800a098:	77fb      	strb	r3, [r7, #31]
 800a09a:	e034      	b.n	800a106 <UART_SetConfig+0x212>
 800a09c:	2304      	movs	r3, #4
 800a09e:	77fb      	strb	r3, [r7, #31]
 800a0a0:	e031      	b.n	800a106 <UART_SetConfig+0x212>
 800a0a2:	2308      	movs	r3, #8
 800a0a4:	77fb      	strb	r3, [r7, #31]
 800a0a6:	e02e      	b.n	800a106 <UART_SetConfig+0x212>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	77fb      	strb	r3, [r7, #31]
 800a0ac:	e02b      	b.n	800a106 <UART_SetConfig+0x212>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a33      	ldr	r2, [pc, #204]	; (800a180 <UART_SetConfig+0x28c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d124      	bne.n	800a102 <UART_SetConfig+0x20e>
 800a0b8:	4b2d      	ldr	r3, [pc, #180]	; (800a170 <UART_SetConfig+0x27c>)
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a0c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a0c4:	d011      	beq.n	800a0ea <UART_SetConfig+0x1f6>
 800a0c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a0ca:	d817      	bhi.n	800a0fc <UART_SetConfig+0x208>
 800a0cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0d0:	d011      	beq.n	800a0f6 <UART_SetConfig+0x202>
 800a0d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0d6:	d811      	bhi.n	800a0fc <UART_SetConfig+0x208>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <UART_SetConfig+0x1f0>
 800a0dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0e0:	d006      	beq.n	800a0f0 <UART_SetConfig+0x1fc>
 800a0e2:	e00b      	b.n	800a0fc <UART_SetConfig+0x208>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	77fb      	strb	r3, [r7, #31]
 800a0e8:	e00d      	b.n	800a106 <UART_SetConfig+0x212>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	77fb      	strb	r3, [r7, #31]
 800a0ee:	e00a      	b.n	800a106 <UART_SetConfig+0x212>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	77fb      	strb	r3, [r7, #31]
 800a0f4:	e007      	b.n	800a106 <UART_SetConfig+0x212>
 800a0f6:	2308      	movs	r3, #8
 800a0f8:	77fb      	strb	r3, [r7, #31]
 800a0fa:	e004      	b.n	800a106 <UART_SetConfig+0x212>
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	77fb      	strb	r3, [r7, #31]
 800a100:	e001      	b.n	800a106 <UART_SetConfig+0x212>
 800a102:	2310      	movs	r3, #16
 800a104:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a10e:	d16c      	bne.n	800a1ea <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800a110:	7ffb      	ldrb	r3, [r7, #31]
 800a112:	2b08      	cmp	r3, #8
 800a114:	d838      	bhi.n	800a188 <UART_SetConfig+0x294>
 800a116:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <UART_SetConfig+0x228>)
 800a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a151 	.word	0x0800a151
 800a128:	0800a189 	.word	0x0800a189
 800a12c:	0800a157 	.word	0x0800a157
 800a130:	0800a189 	.word	0x0800a189
 800a134:	0800a189 	.word	0x0800a189
 800a138:	0800a189 	.word	0x0800a189
 800a13c:	0800a15f 	.word	0x0800a15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a140:	f7fe fdae 	bl	8008ca0 <HAL_RCC_GetPCLK1Freq>
 800a144:	61b8      	str	r0, [r7, #24]
        break;
 800a146:	e024      	b.n	800a192 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a148:	f7fe fdcc 	bl	8008ce4 <HAL_RCC_GetPCLK2Freq>
 800a14c:	61b8      	str	r0, [r7, #24]
        break;
 800a14e:	e020      	b.n	800a192 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a150:	4b0c      	ldr	r3, [pc, #48]	; (800a184 <UART_SetConfig+0x290>)
 800a152:	61bb      	str	r3, [r7, #24]
        break;
 800a154:	e01d      	b.n	800a192 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a156:	f7fe fd2f 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 800a15a:	61b8      	str	r0, [r7, #24]
        break;
 800a15c:	e019      	b.n	800a192 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a162:	61bb      	str	r3, [r7, #24]
        break;
 800a164:	e015      	b.n	800a192 <UART_SetConfig+0x29e>
 800a166:	bf00      	nop
 800a168:	efff69f3 	.word	0xefff69f3
 800a16c:	40013800 	.word	0x40013800
 800a170:	40021000 	.word	0x40021000
 800a174:	40004400 	.word	0x40004400
 800a178:	40004800 	.word	0x40004800
 800a17c:	40004c00 	.word	0x40004c00
 800a180:	40005000 	.word	0x40005000
 800a184:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	77bb      	strb	r3, [r7, #30]
        break;
 800a190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d075      	beq.n	800a284 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	005a      	lsls	r2, r3, #1
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	085b      	lsrs	r3, r3, #1
 800a1a2:	441a      	add	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2b0f      	cmp	r3, #15
 800a1b4:	d916      	bls.n	800a1e4 <UART_SetConfig+0x2f0>
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1bc:	d212      	bcs.n	800a1e4 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	f023 030f 	bic.w	r3, r3, #15
 800a1c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	89fb      	ldrh	r3, [r7, #14]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	89fa      	ldrh	r2, [r7, #14]
 800a1e0:	60da      	str	r2, [r3, #12]
 800a1e2:	e04f      	b.n	800a284 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	77bb      	strb	r3, [r7, #30]
 800a1e8:	e04c      	b.n	800a284 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1ea:	7ffb      	ldrb	r3, [r7, #31]
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d828      	bhi.n	800a242 <UART_SetConfig+0x34e>
 800a1f0:	a201      	add	r2, pc, #4	; (adr r2, 800a1f8 <UART_SetConfig+0x304>)
 800a1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f6:	bf00      	nop
 800a1f8:	0800a21d 	.word	0x0800a21d
 800a1fc:	0800a225 	.word	0x0800a225
 800a200:	0800a22d 	.word	0x0800a22d
 800a204:	0800a243 	.word	0x0800a243
 800a208:	0800a233 	.word	0x0800a233
 800a20c:	0800a243 	.word	0x0800a243
 800a210:	0800a243 	.word	0x0800a243
 800a214:	0800a243 	.word	0x0800a243
 800a218:	0800a23b 	.word	0x0800a23b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a21c:	f7fe fd40 	bl	8008ca0 <HAL_RCC_GetPCLK1Freq>
 800a220:	61b8      	str	r0, [r7, #24]
        break;
 800a222:	e013      	b.n	800a24c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a224:	f7fe fd5e 	bl	8008ce4 <HAL_RCC_GetPCLK2Freq>
 800a228:	61b8      	str	r0, [r7, #24]
        break;
 800a22a:	e00f      	b.n	800a24c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a22c:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <UART_SetConfig+0x3a8>)
 800a22e:	61bb      	str	r3, [r7, #24]
        break;
 800a230:	e00c      	b.n	800a24c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a232:	f7fe fcc1 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 800a236:	61b8      	str	r0, [r7, #24]
        break;
 800a238:	e008      	b.n	800a24c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a23e:	61bb      	str	r3, [r7, #24]
        break;
 800a240:	e004      	b.n	800a24c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	77bb      	strb	r3, [r7, #30]
        break;
 800a24a:	bf00      	nop
    }

    if (pclk != 0U)
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d018      	beq.n	800a284 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	085a      	lsrs	r2, r3, #1
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	441a      	add	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	fbb2 f3f3 	udiv	r3, r2, r3
 800a264:	b29b      	uxth	r3, r3
 800a266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	2b0f      	cmp	r3, #15
 800a26c:	d908      	bls.n	800a280 <UART_SetConfig+0x38c>
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a274:	d204      	bcs.n	800a280 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	60da      	str	r2, [r3, #12]
 800a27e:	e001      	b.n	800a284 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a290:	7fbb      	ldrb	r3, [r7, #30]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	007a1200 	.word	0x007a1200

0800a2a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00a      	beq.n	800a2ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00a      	beq.n	800a30e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	f003 0308 	and.w	r3, r3, #8
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00a      	beq.n	800a330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00a      	beq.n	800a352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d01a      	beq.n	800a3b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a39e:	d10a      	bne.n	800a3b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	605a      	str	r2, [r3, #4]
  }
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr

0800a3e2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af02      	add	r7, sp, #8
 800a3e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3f2:	f7fc feaf 	bl	8007154 <HAL_GetTick>
 800a3f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0308 	and.w	r3, r3, #8
 800a402:	2b08      	cmp	r3, #8
 800a404:	d10e      	bne.n	800a424 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a406:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f82d 	bl	800a474 <UART_WaitOnFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e023      	b.n	800a46c <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d10e      	bne.n	800a450 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a432:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f817 	bl	800a474 <UART_WaitOnFlagUntilTimeout>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e00d      	b.n	800a46c <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2220      	movs	r2, #32
 800a454:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2220      	movs	r2, #32
 800a45a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b09c      	sub	sp, #112	; 0x70
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	4613      	mov	r3, r2
 800a482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a484:	e0a5      	b.n	800a5d2 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48c:	f000 80a1 	beq.w	800a5d2 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a490:	f7fc fe60 	bl	8007154 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d302      	bcc.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0x32>
 800a4a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d13e      	bne.n	800a524 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4ae:	e853 3f00 	ldrex	r3, [r3]
 800a4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4ba:	667b      	str	r3, [r7, #100]	; 0x64
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4cc:	e841 2300 	strex	r3, r2, [r1]
 800a4d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a4d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e6      	bne.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3308      	adds	r3, #8
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e2:	e853 3f00 	ldrex	r3, [r3]
 800a4e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	663b      	str	r3, [r7, #96]	; 0x60
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4f8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a500:	e841 2300 	strex	r3, r2, [r1]
 800a504:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1e5      	bne.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2220      	movs	r2, #32
 800a516:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e067      	b.n	800a5f4 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0304 	and.w	r3, r3, #4
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d04f      	beq.n	800a5d2 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a53c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a540:	d147      	bne.n	800a5d2 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a54a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a560:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56a:	637b      	str	r3, [r7, #52]	; 0x34
 800a56c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e6      	bne.n	800a54c <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3308      	adds	r3, #8
 800a584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	e853 3f00 	ldrex	r3, [r3]
 800a58c:	613b      	str	r3, [r7, #16]
   return(result);
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f023 0301 	bic.w	r3, r3, #1
 800a594:	66bb      	str	r3, [r7, #104]	; 0x68
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a59e:	623a      	str	r2, [r7, #32]
 800a5a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	69f9      	ldr	r1, [r7, #28]
 800a5a4:	6a3a      	ldr	r2, [r7, #32]
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e5      	bne.n	800a57e <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e010      	b.n	800a5f4 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	69da      	ldr	r2, [r3, #28]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	bf0c      	ite	eq
 800a5e2:	2301      	moveq	r3, #1
 800a5e4:	2300      	movne	r3, #0
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	f43f af4a 	beq.w	800a486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3770      	adds	r7, #112	; 0x70
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b095      	sub	sp, #84	; 0x54
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a622:	643b      	str	r3, [r7, #64]	; 0x40
 800a624:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e6      	bne.n	800a604 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3308      	adds	r3, #8
 800a63c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	61fb      	str	r3, [r7, #28]
   return(result);
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	f023 0301 	bic.w	r3, r3, #1
 800a64c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3308      	adds	r3, #8
 800a654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a656:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a65c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e5      	bne.n	800a636 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d118      	bne.n	800a6a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	e853 3f00 	ldrex	r3, [r3]
 800a67e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f023 0310 	bic.w	r3, r3, #16
 800a686:	647b      	str	r3, [r7, #68]	; 0x44
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a690:	61bb      	str	r3, [r7, #24]
 800a692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a694:	6979      	ldr	r1, [r7, #20]
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	e841 2300 	strex	r3, r2, [r1]
 800a69c:	613b      	str	r3, [r7, #16]
   return(result);
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1e6      	bne.n	800a672 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a6b6:	bf00      	nop
 800a6b8:	3754      	adds	r7, #84	; 0x54
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bc80      	pop	{r7}
 800a6be:	4770      	bx	lr

0800a6c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7ff fbf3 	bl	8009eca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6e4:	bf00      	nop
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	60bb      	str	r3, [r7, #8]
   return(result);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a708:	61fb      	str	r3, [r7, #28]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	61bb      	str	r3, [r7, #24]
 800a714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6979      	ldr	r1, [r7, #20]
 800a718:	69ba      	ldr	r2, [r7, #24]
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	613b      	str	r3, [r7, #16]
   return(result);
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e6      	bne.n	800a6f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff fbc0 	bl	8009eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a738:	bf00      	nop
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr
	...

0800a754 <Ea_Init>:
/**
  * @brief	Ea module initialization function
  * @return	None
  */
void Ea_Init(void)
{
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Ea_InitDone_b = TRUE;
 800a758:	4b03      	ldr	r3, [pc, #12]	; (800a768 <Ea_Init+0x14>)
 800a75a:	2201      	movs	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
}
 800a75e:	bf00      	nop
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	200001c0 	.word	0x200001c0

0800a76c <Ea_Read>:
  * @param	BlockId		ID of the block to be read
  * @param  data		Pointer to the buffer where read data is stored
  * @return	None
  */
void Ea_Read(uint16 Block_Id, uint8 *data)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af02      	add	r7, sp, #8
 800a772:	4603      	mov	r3, r0
 800a774:	6039      	str	r1, [r7, #0]
 800a776:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800a778:	88fb      	ldrh	r3, [r7, #6]
 800a77a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a77e:	d20b      	bcs.n	800a798 <Ea_Read+0x2c>
	{
		HAL_I2C_Mem_Read_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	015b      	lsls	r3, r3, #5
 800a784:	b29a      	uxth	r2, r3
 800a786:	2320      	movs	r3, #32
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	2302      	movs	r3, #2
 800a790:	21a0      	movs	r1, #160	; 0xa0
 800a792:	4803      	ldr	r0, [pc, #12]	; (800a7a0 <Ea_Read+0x34>)
 800a794:	f7fa ffcc 	bl	8005730 <HAL_I2C_Mem_Read_DMA>
	}
}
 800a798:	bf00      	nop
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20000258 	.word	0x20000258

0800a7a4 <Ea_Write>:
  * @param	BlockId		ID of the block to be written
  * @param  data		Pointer to the data to be written
  * @return	None
  */
void Ea_Write(uint16 Block_Id, uint8 *data)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800a7b0:	88fb      	ldrh	r3, [r7, #6]
 800a7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b6:	d20b      	bcs.n	800a7d0 <Ea_Write+0x2c>
	{
		HAL_I2C_Mem_Write_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800a7b8:	88fb      	ldrh	r3, [r7, #6]
 800a7ba:	015b      	lsls	r3, r3, #5
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	2320      	movs	r3, #32
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	21a0      	movs	r1, #160	; 0xa0
 800a7ca:	4803      	ldr	r0, [pc, #12]	; (800a7d8 <Ea_Write+0x34>)
 800a7cc:	f7fa feba 	bl	8005544 <HAL_I2C_Mem_Write_DMA>
	}
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20000258 	.word	0x20000258

0800a7dc <NvM_Init>:
/**
  * @brief	NvM module initialization function
  * @return	None
  */
void NvM_Init(void)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
	g_NvM_State_e = NVM_STATE_INIT;
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <NvM_Init+0x18>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	701a      	strb	r2, [r3, #0]
	/* Set initialization flag to done */
	g_NvM_InitDone_b = TRUE;
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <NvM_Init+0x1c>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	701a      	strb	r2, [r3, #0]
}
 800a7ec:	bf00      	nop
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bc80      	pop	{r7}
 800a7f2:	4770      	bx	lr
 800a7f4:	200001c2 	.word	0x200001c2
 800a7f8:	200001c1 	.word	0x200001c1

0800a7fc <NvM_MainFunction>:
/**
  * @brief	NvM module main function (runs in task)
  * @return	None
  */
void NvM_MainFunction(void)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_NvM_InitDone_b)
 800a800:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <NvM_MainFunction+0x44>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d012      	beq.n	800a82e <NvM_MainFunction+0x32>
	{
		switch(g_NvM_State_e)
 800a808:	4b0e      	ldr	r3, [pc, #56]	; (800a844 <NvM_MainFunction+0x48>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	dc10      	bgt.n	800a832 <NvM_MainFunction+0x36>
 800a810:	2b02      	cmp	r3, #2
 800a812:	da08      	bge.n	800a826 <NvM_MainFunction+0x2a>
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <NvM_MainFunction+0x22>
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d00c      	beq.n	800a836 <NvM_MainFunction+0x3a>
			case NVM_STATE_SHUTDOWN:
			case NVM_STATE_ERROR:
			default:
			{

			}break;
 800a81c:	e009      	b.n	800a832 <NvM_MainFunction+0x36>
				g_NvM_State_e = NVM_STATE_READALL;
 800a81e:	4b09      	ldr	r3, [pc, #36]	; (800a844 <NvM_MainFunction+0x48>)
 800a820:	2204      	movs	r2, #4
 800a822:	701a      	strb	r2, [r3, #0]
			}break;
 800a824:	e008      	b.n	800a838 <NvM_MainFunction+0x3c>
				g_NvM_State_e = NVM_STATE_READY;
 800a826:	4b07      	ldr	r3, [pc, #28]	; (800a844 <NvM_MainFunction+0x48>)
 800a828:	2201      	movs	r2, #1
 800a82a:	701a      	strb	r2, [r3, #0]
			}break;
 800a82c:	e004      	b.n	800a838 <NvM_MainFunction+0x3c>
		}
	}
 800a82e:	bf00      	nop
 800a830:	e002      	b.n	800a838 <NvM_MainFunction+0x3c>
			}break;
 800a832:	bf00      	nop
 800a834:	e000      	b.n	800a838 <NvM_MainFunction+0x3c>
			}break;
 800a836:	bf00      	nop
}
 800a838:	bf00      	nop
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bc80      	pop	{r7}
 800a83e:	4770      	bx	lr
 800a840:	200001c1 	.word	0x200001c1
 800a844:	200001c2 	.word	0x200001c2

0800a848 <NvM_WriteBlock>:
  * @param	BlockId		ID of the block to be written
  * @param  NvM_SrcPtr	Pointer to the data to be written
  * @return	None
  */
void NvM_WriteBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	6039      	str	r1, [r7, #0]
 800a852:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block write function */
	Ea_Write(BlockId, NvM_SrcPtr);
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff ffa3 	bl	800a7a4 <Ea_Write>
}
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <NvM_ReadBlock>:
  * @param	BlockId		ID of the block to be read
  * @param  NvM_SrcPtr	Pointer to the data to be read
  * @return	None
  */
void NvM_ReadBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	4603      	mov	r3, r0
 800a86e:	6039      	str	r1, [r7, #0]
 800a870:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block read function */
	Ea_Read(BlockId, NvM_SrcPtr);
 800a872:	88fb      	ldrh	r3, [r7, #6]
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff ff78 	bl	800a76c <Ea_Read>
}
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 800a888:	f000 f880 	bl	800a98c <SystemClock_Config>
	MX_DMA_Init();
 800a88c:	f000 f8e4 	bl	800aa58 <MX_DMA_Init>
	MX_GPIO_Init();
 800a890:	f000 fa5e 	bl	800ad50 <MX_GPIO_Init>
	MX_ADC1_Init();
 800a894:	f000 f90e 	bl	800aab4 <MX_ADC1_Init>
	MX_I2C1_Init();
 800a898:	f000 f97c 	bl	800ab94 <MX_I2C1_Init>
	MX_SPI3_Init();
 800a89c:	f000 f9ba 	bl	800ac14 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 800a8a0:	f000 f9f6 	bl	800ac90 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a8a4:	f000 fa24 	bl	800acf0 <MX_USART2_UART_Init>
	Gpt_Init();
 800a8a8:	f7f8 ff7e 	bl	80037a8 <Gpt_Init>

	/* Init Cdd drivers */
	Cdd_Servo_Driver_Init();
 800a8ac:	f7f6 feba 	bl	8001624 <Cdd_Servo_Driver_Init>
	Cdd_Ultrasonic_Driver_Init();
 800a8b0:	f7f7 f9f4 	bl	8001c9c <Cdd_Ultrasonic_Driver_Init>
	/* Init system services */
	Tm_Init();
 800a8b4:	f000 fd48 	bl	800b348 <Tm_Init>

}
 800a8b8:	bf00      	nop
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc_val, adc_len);
 800a8c0:	4b04      	ldr	r3, [pc, #16]	; (800a8d4 <BswM_MainFunction+0x18>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4904      	ldr	r1, [pc, #16]	; (800a8d8 <BswM_MainFunction+0x1c>)
 800a8c8:	4804      	ldr	r0, [pc, #16]	; (800a8dc <BswM_MainFunction+0x20>)
 800a8ca:	f7f7 fd43 	bl	8002354 <HAL_ADC_Start_DMA>

}
 800a8ce:	bf00      	nop
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000000c 	.word	0x2000000c
 800a8d8:	200004f0 	.word	0x200004f0
 800a8dc:	200001c4 	.word	0x200001c4

0800a8e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	ADC_AN0_Voltage = (uint16)((adc_val[0]*3300u)/4095u);
 800a8e8:	4b0d      	ldr	r3, [pc, #52]	; (800a920 <HAL_ADC_ConvCpltCallback+0x40>)
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	f640 43e4 	movw	r3, #3300	; 0xce4
 800a8f4:	fb03 f202 	mul.w	r2, r3, r2
 800a8f8:	4b0a      	ldr	r3, [pc, #40]	; (800a924 <HAL_ADC_ConvCpltCallback+0x44>)
 800a8fa:	fba3 1302 	umull	r1, r3, r3, r2
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	0852      	lsrs	r2, r2, #1
 800a902:	4413      	add	r3, r2
 800a904:	0adb      	lsrs	r3, r3, #11
 800a906:	b29a      	uxth	r2, r3
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <HAL_ADC_ConvCpltCallback+0x48>)
 800a90a:	801a      	strh	r2, [r3, #0]
	Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 800a90c:	4b06      	ldr	r3, [pc, #24]	; (800a928 <HAL_ADC_ConvCpltCallback+0x48>)
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	b29b      	uxth	r3, r3
 800a912:	4618      	mov	r0, r3
 800a914:	f000 fef2 	bl	800b6fc <Rte_Write_AN0_Voltage_u16>
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	200004f0 	.word	0x200004f0
 800a924:	00100101 	.word	0x00100101
 800a928:	200004f2 	.word	0x200004f2

0800a92c <HAL_I2C_MemTxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
	I2cTxCnt++;
 800a934:	4b04      	ldr	r3, [pc, #16]	; (800a948 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3301      	adds	r3, #1
 800a93a:	4a03      	ldr	r2, [pc, #12]	; (800a948 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800a93c:	6013      	str	r3, [r2, #0]
}
 800a93e:	bf00      	nop
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	bc80      	pop	{r7}
 800a946:	4770      	bx	lr
 800a948:	200004f8 	.word	0x200004f8

0800a94c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	I2cRxCnt++;
 800a954:	4b04      	ldr	r3, [pc, #16]	; (800a968 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3301      	adds	r3, #1
 800a95a:	4a03      	ldr	r2, [pc, #12]	; (800a968 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800a95c:	6013      	str	r3, [r2, #0]
}
 800a95e:	bf00      	nop
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	bc80      	pop	{r7}
 800a966:	4770      	bx	lr
 800a968:	200004f4 	.word	0x200004f4

0800a96c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7fb f830 	bl	80059da <HAL_I2C_GetError>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d001      	beq.n	800a984 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 800a980:	f000 fa72 	bl	800ae68 <Error_Handler>
  }
}
 800a984:	bf00      	nop
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b0a6      	sub	sp, #152	; 0x98
 800a990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a992:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a996:	2228      	movs	r2, #40	; 0x28
 800a998:	2100      	movs	r1, #0
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fefc 	bl	800b798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a9a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	605a      	str	r2, [r3, #4]
 800a9aa:	609a      	str	r2, [r3, #8]
 800a9ac:	60da      	str	r2, [r3, #12]
 800a9ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9b0:	1d3b      	adds	r3, r7, #4
 800a9b2:	2258      	movs	r2, #88	; 0x58
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 feee 	bl	800b798 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a9c4:	2310      	movs	r3, #16
 800a9c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a9d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800a9d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800a9dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a9e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fc ff14 	bl	8007818 <HAL_RCC_OscConfig>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800a9f6:	f000 fa37 	bl	800ae68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a9fa:	230f      	movs	r3, #15
 800a9fc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a9fe:	2302      	movs	r3, #2
 800aa00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aa02:	2300      	movs	r3, #0
 800aa04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800aa06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800aa10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800aa14:	2102      	movs	r1, #2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fd ff52 	bl	80088c0 <HAL_RCC_ClockConfig>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800aa22:	f000 fa21 	bl	800ae68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800aa26:	23a3      	movs	r3, #163	; 0xa3
 800aa28:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800aa32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800aa38:	2310      	movs	r3, #16
 800aa3a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aa3c:	1d3b      	adds	r3, r7, #4
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe f972 	bl	8008d28 <HAL_RCCEx_PeriphCLKConfig>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800aa4a:	f000 fa0d 	bl	800ae68 <Error_Handler>
  }
}
 800aa4e:	bf00      	nop
 800aa50:	3798      	adds	r7, #152	; 0x98
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
	...

0800aa58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800aa5e:	4b14      	ldr	r3, [pc, #80]	; (800aab0 <MX_DMA_Init+0x58>)
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	4a13      	ldr	r2, [pc, #76]	; (800aab0 <MX_DMA_Init+0x58>)
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	6153      	str	r3, [r2, #20]
 800aa6a:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <MX_DMA_Init+0x58>)
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	607b      	str	r3, [r7, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800aa76:	2200      	movs	r2, #0
 800aa78:	2100      	movs	r1, #0
 800aa7a:	200b      	movs	r0, #11
 800aa7c:	f7fc fc4b 	bl	8007316 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800aa80:	200b      	movs	r0, #11
 800aa82:	f7fc fc64 	bl	800734e <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800aa86:	2200      	movs	r2, #0
 800aa88:	2100      	movs	r1, #0
 800aa8a:	2010      	movs	r0, #16
 800aa8c:	f7fc fc43 	bl	8007316 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800aa90:	2010      	movs	r0, #16
 800aa92:	f7fc fc5c 	bl	800734e <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800aa96:	2200      	movs	r2, #0
 800aa98:	2100      	movs	r1, #0
 800aa9a:	2011      	movs	r0, #17
 800aa9c:	f7fc fc3b 	bl	8007316 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800aaa0:	2011      	movs	r0, #17
 800aaa2:	f7fc fc54 	bl	800734e <HAL_NVIC_EnableIRQ>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	40021000 	.word	0x40021000

0800aab4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08a      	sub	sp, #40	; 0x28
 800aab8:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 800aaba:	f107 031c 	add.w	r3, r7, #28
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
 800aac2:	605a      	str	r2, [r3, #4]
 800aac4:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 800aac6:	1d3b      	adds	r3, r7, #4
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	609a      	str	r2, [r3, #8]
 800aad0:	60da      	str	r2, [r3, #12]
 800aad2:	611a      	str	r2, [r3, #16]
 800aad4:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 800aad6:	4b2e      	ldr	r3, [pc, #184]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800aad8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aadc:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800aade:	4b2c      	ldr	r3, [pc, #176]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800aae0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aae4:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800aae6:	4b2a      	ldr	r3, [pc, #168]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800aaec:	4b28      	ldr	r3, [pc, #160]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 800aaf2:	4b27      	ldr	r3, [pc, #156]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800aaf8:	4b25      	ldr	r3, [pc, #148]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ab00:	4b23      	ldr	r3, [pc, #140]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ab06:	4b22      	ldr	r3, [pc, #136]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab08:	2201      	movs	r2, #1
 800ab0a:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ab0c:	4b20      	ldr	r3, [pc, #128]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 800ab12:	4b1f      	ldr	r3, [pc, #124]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ab18:	4b1d      	ldr	r3, [pc, #116]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ab20:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab22:	2204      	movs	r2, #4
 800ab24:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 800ab26:	4b1a      	ldr	r3, [pc, #104]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800ab2c:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ab32:	4817      	ldr	r0, [pc, #92]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab34:	f7f7 fa14 	bl	8001f60 <HAL_ADC_Init>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <MX_ADC1_Init+0x8e>
	  {
	    Error_Handler();
 800ab3e:	f000 f993 	bl	800ae68 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ab42:	2300      	movs	r3, #0
 800ab44:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800ab46:	f107 031c 	add.w	r3, r7, #28
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4810      	ldr	r0, [pc, #64]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab4e:	f7f8 f809 	bl	8002b64 <HAL_ADCEx_MultiModeConfigChannel>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <MX_ADC1_Init+0xa8>
	  {
	    Error_Handler();
 800ab58:	f000 f986 	bl	800ae68 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ab60:	2301      	movs	r3, #1
 800ab62:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ab64:	2300      	movs	r3, #0
 800ab66:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ab74:	1d3b      	adds	r3, r7, #4
 800ab76:	4619      	mov	r1, r3
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <MX_ADC1_Init+0xdc>)
 800ab7a:	f7f7 fd07 	bl	800258c <HAL_ADC_ConfigChannel>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <MX_ADC1_Init+0xd4>
	  {
	    Error_Handler();
 800ab84:	f000 f970 	bl	800ae68 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

}
 800ab88:	bf00      	nop
 800ab8a:	3728      	adds	r7, #40	; 0x28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	200001c4 	.word	0x200001c4

0800ab94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 800ab98:	4b1b      	ldr	r3, [pc, #108]	; (800ac08 <MX_I2C1_Init+0x74>)
 800ab9a:	4a1c      	ldr	r2, [pc, #112]	; (800ac0c <MX_I2C1_Init+0x78>)
 800ab9c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00702681;
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <MX_I2C1_Init+0x74>)
 800aba0:	4a1b      	ldr	r2, [pc, #108]	; (800ac10 <MX_I2C1_Init+0x7c>)
 800aba2:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 800aba4:	4b18      	ldr	r3, [pc, #96]	; (800ac08 <MX_I2C1_Init+0x74>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800abaa:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abac:	2201      	movs	r2, #1
 800abae:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800abb0:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800abb6:	4b14      	ldr	r3, [pc, #80]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abb8:	2200      	movs	r2, #0
 800abba:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800abbc:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800abc2:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800abc8:	4b0f      	ldr	r3, [pc, #60]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abca:	2200      	movs	r2, #0
 800abcc:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800abce:	480e      	ldr	r0, [pc, #56]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abd0:	f7fa fbec 	bl	80053ac <HAL_I2C_Init>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <MX_I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800abda:	f000 f945 	bl	800ae68 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800abde:	2100      	movs	r1, #0
 800abe0:	4809      	ldr	r0, [pc, #36]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abe2:	f7fc f9a0 	bl	8006f26 <HAL_I2CEx_ConfigAnalogFilter>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <MX_I2C1_Init+0x5c>
	  {
	    Error_Handler();
 800abec:	f000 f93c 	bl	800ae68 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800abf0:	2100      	movs	r1, #0
 800abf2:	4805      	ldr	r0, [pc, #20]	; (800ac08 <MX_I2C1_Init+0x74>)
 800abf4:	f7fc f9e1 	bl	8006fba <HAL_I2CEx_ConfigDigitalFilter>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <MX_I2C1_Init+0x6e>
	  {
	    Error_Handler();
 800abfe:	f000 f933 	bl	800ae68 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 800ac02:	bf00      	nop
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20000258 	.word	0x20000258
 800ac0c:	40005400 	.word	0x40005400
 800ac10:	00702681 	.word	0x00702681

0800ac14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ac18:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac1a:	4a1c      	ldr	r2, [pc, #112]	; (800ac8c <MX_SPI3_Init+0x78>)
 800ac1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ac1e:	4b1a      	ldr	r3, [pc, #104]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac20:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ac24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ac26:	4b18      	ldr	r3, [pc, #96]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800ac2c:	4b16      	ldr	r3, [pc, #88]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ac32:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac34:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ac3a:	4b13      	ldr	r3, [pc, #76]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ac40:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac46:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac48:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ac4e:	4b0e      	ldr	r3, [pc, #56]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ac54:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac5a:	4b0b      	ldr	r3, [pc, #44]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800ac60:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac62:	2207      	movs	r2, #7
 800ac64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800ac66:	4b08      	ldr	r3, [pc, #32]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ac6c:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac6e:	2208      	movs	r2, #8
 800ac70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ac72:	4805      	ldr	r0, [pc, #20]	; (800ac88 <MX_SPI3_Init+0x74>)
 800ac74:	f7fe fb20 	bl	80092b8 <HAL_SPI_Init>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800ac7e:	f000 f8f3 	bl	800ae68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ac82:	bf00      	nop
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	2000035c 	.word	0x2000035c
 800ac8c:	40003c00 	.word	0x40003c00

0800ac90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ac94:	4b14      	ldr	r3, [pc, #80]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800ac96:	4a15      	ldr	r2, [pc, #84]	; (800acec <MX_USART1_UART_Init+0x5c>)
 800ac98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800ac9a:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800ac9c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800aca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aca2:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aca8:	4b0f      	ldr	r3, [pc, #60]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acaa:	2200      	movs	r2, #0
 800acac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800acae:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800acb4:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acb6:	220c      	movs	r2, #12
 800acb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800acba:	4b0b      	ldr	r3, [pc, #44]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800acc0:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800acc6:	4b08      	ldr	r3, [pc, #32]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acc8:	2200      	movs	r2, #0
 800acca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800accc:	4b06      	ldr	r3, [pc, #24]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acce:	2200      	movs	r2, #0
 800acd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800acd2:	4805      	ldr	r0, [pc, #20]	; (800ace8 <MX_USART1_UART_Init+0x58>)
 800acd4:	f7fe fd30 	bl	8009738 <HAL_UART_Init>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800acde:	f000 f8c3 	bl	800ae68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ace2:	bf00      	nop
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	200003e8 	.word	0x200003e8
 800acec:	40013800 	.word	0x40013800

0800acf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800acf4:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800acf6:	4a15      	ldr	r2, [pc, #84]	; (800ad4c <MX_USART2_UART_Init+0x5c>)
 800acf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800acfa:	4b13      	ldr	r3, [pc, #76]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800acfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ad00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ad02:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ad08:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ad0e:	4b0e      	ldr	r3, [pc, #56]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ad14:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad16:	220c      	movs	r2, #12
 800ad18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ad20:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ad26:	4b08      	ldr	r3, [pc, #32]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ad2c:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ad32:	4805      	ldr	r0, [pc, #20]	; (800ad48 <MX_USART2_UART_Init+0x58>)
 800ad34:	f7fe fd00 	bl	8009738 <HAL_UART_Init>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800ad3e:	f000 f893 	bl	800ae68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ad42:	bf00      	nop
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	2000046c 	.word	0x2000046c
 800ad4c:	40004400 	.word	0x40004400

0800ad50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad56:	f107 030c 	add.w	r3, r7, #12
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	605a      	str	r2, [r3, #4]
 800ad60:	609a      	str	r2, [r3, #8]
 800ad62:	60da      	str	r2, [r3, #12]
 800ad64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad66:	4b3d      	ldr	r3, [pc, #244]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	4a3c      	ldr	r2, [pc, #240]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad70:	6153      	str	r3, [r2, #20]
 800ad72:	4b3a      	ldr	r3, [pc, #232]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad7a:	60bb      	str	r3, [r7, #8]
 800ad7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad7e:	4b37      	ldr	r3, [pc, #220]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	4a36      	ldr	r2, [pc, #216]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad88:	6153      	str	r3, [r2, #20]
 800ad8a:	4b34      	ldr	r3, [pc, #208]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad92:	607b      	str	r3, [r7, #4]
 800ad94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad96:	4b31      	ldr	r3, [pc, #196]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	4a30      	ldr	r2, [pc, #192]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ad9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ada0:	6153      	str	r3, [r2, #20]
 800ada2:	4b2e      	ldr	r3, [pc, #184]	; (800ae5c <MX_GPIO_Init+0x10c>)
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800adae:	2200      	movs	r2, #0
 800adb0:	2120      	movs	r1, #32
 800adb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800adb6:	f7f8 fa96 	bl	80032e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800adba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800adc0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800adc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800adca:	f107 030c 	add.w	r3, r7, #12
 800adce:	4619      	mov	r1, r3
 800add0:	4823      	ldr	r0, [pc, #140]	; (800ae60 <MX_GPIO_Init+0x110>)
 800add2:	f7f8 f8e7 	bl	8002fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800add6:	2303      	movs	r3, #3
 800add8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adda:	2301      	movs	r3, #1
 800addc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ade2:	2300      	movs	r3, #0
 800ade4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ade6:	f107 030c 	add.w	r3, r7, #12
 800adea:	4619      	mov	r1, r3
 800adec:	481c      	ldr	r0, [pc, #112]	; (800ae60 <MX_GPIO_Init+0x110>)
 800adee:	f7f8 f8d9 	bl	8002fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800adf2:	2301      	movs	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adf6:	2301      	movs	r3, #1
 800adf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adfe:	2300      	movs	r3, #0
 800ae00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae02:	f107 030c 	add.w	r3, r7, #12
 800ae06:	4619      	mov	r1, r3
 800ae08:	4816      	ldr	r0, [pc, #88]	; (800ae64 <MX_GPIO_Init+0x114>)
 800ae0a:	f7f8 f8cb 	bl	8002fa4 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin =  GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8;
 800ae0e:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800ae12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae14:	2301      	movs	r3, #1
 800ae16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae20:	f107 030c 	add.w	r3, r7, #12
 800ae24:	4619      	mov	r1, r3
 800ae26:	480e      	ldr	r0, [pc, #56]	; (800ae60 <MX_GPIO_Init+0x110>)
 800ae28:	f7f8 f8bc 	bl	8002fa4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	2140      	movs	r1, #64	; 0x40
 800ae30:	480b      	ldr	r0, [pc, #44]	; (800ae60 <MX_GPIO_Init+0x110>)
 800ae32:	f7f8 fa58 	bl	80032e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ae36:	2201      	movs	r2, #1
 800ae38:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae3c:	4808      	ldr	r0, [pc, #32]	; (800ae60 <MX_GPIO_Init+0x110>)
 800ae3e:	f7f8 fa52 	bl	80032e6 <HAL_GPIO_WritePin>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800ae42:	2200      	movs	r2, #0
 800ae44:	2100      	movs	r1, #0
 800ae46:	2028      	movs	r0, #40	; 0x28
 800ae48:	f7fc fa65 	bl	8007316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ae4c:	2028      	movs	r0, #40	; 0x28
 800ae4e:	f7fc fa7e 	bl	800734e <HAL_NVIC_EnableIRQ>

}
 800ae52:	bf00      	nop
 800ae54:	3720      	adds	r7, #32
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	40021000 	.word	0x40021000
 800ae60:	48000800 	.word	0x48000800
 800ae64:	48000400 	.word	0x48000400

0800ae68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ae6c:	b672      	cpsid	i
}
 800ae6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ae70:	e7fe      	b.n	800ae70 <Error_Handler+0x8>

0800ae72 <EcuM_StartUp_One>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_One()
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 800ae76:	f7fc f90f 	bl	8007098 <HAL_Init>
	BswM_Init();
 800ae7a:	f7ff fd03 	bl	800a884 <BswM_Init>
}
 800ae7e:	bf00      	nop
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <EcuM_StartUp_Two>:

void EcuM_StartUp_Two()
{
 800ae82:	b480      	push	{r7}
 800ae84:	af00      	add	r7, sp, #0

}
 800ae86:	bf00      	nop
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr

0800ae8e <EcuM_Init>:

int EcuM_Init(void)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	af00      	add	r7, sp, #0
	EcuM_StartUp_One();
 800ae92:	f7ff ffee 	bl	800ae72 <EcuM_StartUp_One>
	/* Start Scheduler */
	Os_Start();
 800ae96:	f000 f803 	bl	800aea0 <Os_Start>

	return 0;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <Os_Start>:

#include "Os.h"
#include "Os_scheduler.h"

void Os_Start()
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
	Os_Scheduler_Init();
 800aea4:	f000 f8ba 	bl	800b01c <Os_Scheduler_Init>
	Os_Scheduler_Start();
 800aea8:	f000 f930 	bl	800b10c <Os_Scheduler_Start>

	while(1)
 800aeac:	e7fe      	b.n	800aeac <Os_Start+0xc>
	...

0800aeb0 <SysTick_Handler>:
/**
  * @brief  SysTick IRQ Handler
  * @return None
  */
void SysTick_Handler(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
	/* Increment general counter */
	HAL_IncTick();
 800aeb4:	f7fc f93c 	bl	8007130 <HAL_IncTick>
	/* Reset counters if base counter reached maximum value */
	if(g_Os_BaseTimerISR_count_u32 == OS_BASETIMER_COUNT_MAX)
 800aeb8:	4b40      	ldr	r3, [pc, #256]	; (800afbc <SysTick_Handler+0x10c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f242 720f 	movw	r2, #9999	; 0x270f
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d112      	bne.n	800aeea <SysTick_Handler+0x3a>
	{
		g_Os_BaseTimerISR_count_u32 = 0u;
 800aec4:	4b3d      	ldr	r3, [pc, #244]	; (800afbc <SysTick_Handler+0x10c>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	601a      	str	r2, [r3, #0]
		g_Os_5msTimerISR_count_u32 = 0u;
 800aeca:	4b3d      	ldr	r3, [pc, #244]	; (800afc0 <SysTick_Handler+0x110>)
 800aecc:	2200      	movs	r2, #0
 800aece:	601a      	str	r2, [r3, #0]
		g_Os_10msTimerISR_count_u32 = 0u;
 800aed0:	4b3c      	ldr	r3, [pc, #240]	; (800afc4 <SysTick_Handler+0x114>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
		g_Os_50msTimerISR_count_u32 = 0u;
 800aed6:	4b3c      	ldr	r3, [pc, #240]	; (800afc8 <SysTick_Handler+0x118>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
		g_Os_100msTimerISR_count_u32 = 0u;
 800aedc:	4b3b      	ldr	r3, [pc, #236]	; (800afcc <SysTick_Handler+0x11c>)
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]
		g_Os_500msTimerISR_count_u32 = 0u;
 800aee2:	4b3b      	ldr	r3, [pc, #236]	; (800afd0 <SysTick_Handler+0x120>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
 800aee8:	e004      	b.n	800aef4 <SysTick_Handler+0x44>
	}
	else
	{
		/* Increment base counter */
		g_Os_BaseTimerISR_count_u32++;
 800aeea:	4b34      	ldr	r3, [pc, #208]	; (800afbc <SysTick_Handler+0x10c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	4a32      	ldr	r2, [pc, #200]	; (800afbc <SysTick_Handler+0x10c>)
 800aef2:	6013      	str	r3, [r2, #0]
	}

	/* Check for 5ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 5) == 0u)
 800aef4:	4b31      	ldr	r3, [pc, #196]	; (800afbc <SysTick_Handler+0x10c>)
 800aef6:	6819      	ldr	r1, [r3, #0]
 800aef8:	4b36      	ldr	r3, [pc, #216]	; (800afd4 <SysTick_Handler+0x124>)
 800aefa:	fba3 2301 	umull	r2, r3, r3, r1
 800aefe:	089a      	lsrs	r2, r3, #2
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	1aca      	subs	r2, r1, r3
 800af08:	2a00      	cmp	r2, #0
 800af0a:	d104      	bne.n	800af16 <SysTick_Handler+0x66>
	{
		/* Increment 5ms counter */
		g_Os_5msTimerISR_count_u32++;
 800af0c:	4b2c      	ldr	r3, [pc, #176]	; (800afc0 <SysTick_Handler+0x110>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	4a2b      	ldr	r2, [pc, #172]	; (800afc0 <SysTick_Handler+0x110>)
 800af14:	6013      	str	r3, [r2, #0]
	}

	/* Check for 10ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 10) == 0u)
 800af16:	4b29      	ldr	r3, [pc, #164]	; (800afbc <SysTick_Handler+0x10c>)
 800af18:	6819      	ldr	r1, [r3, #0]
 800af1a:	4b2e      	ldr	r3, [pc, #184]	; (800afd4 <SysTick_Handler+0x124>)
 800af1c:	fba3 2301 	umull	r2, r3, r3, r1
 800af20:	08da      	lsrs	r2, r3, #3
 800af22:	4613      	mov	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	1aca      	subs	r2, r1, r3
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	d104      	bne.n	800af3a <SysTick_Handler+0x8a>
	{
		/* Increment 10ms counter */
		g_Os_10msTimerISR_count_u32++;
 800af30:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <SysTick_Handler+0x114>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3301      	adds	r3, #1
 800af36:	4a23      	ldr	r2, [pc, #140]	; (800afc4 <SysTick_Handler+0x114>)
 800af38:	6013      	str	r3, [r2, #0]
	}

	/* Check for 50ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 50) == 0u)
 800af3a:	4b20      	ldr	r3, [pc, #128]	; (800afbc <SysTick_Handler+0x10c>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	4b26      	ldr	r3, [pc, #152]	; (800afd8 <SysTick_Handler+0x128>)
 800af40:	fba3 1302 	umull	r1, r3, r3, r2
 800af44:	091b      	lsrs	r3, r3, #4
 800af46:	2132      	movs	r1, #50	; 0x32
 800af48:	fb01 f303 	mul.w	r3, r1, r3
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d104      	bne.n	800af5c <SysTick_Handler+0xac>
	{
		/* Increment 50ms counter */
		g_Os_50msTimerISR_count_u32++;
 800af52:	4b1d      	ldr	r3, [pc, #116]	; (800afc8 <SysTick_Handler+0x118>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3301      	adds	r3, #1
 800af58:	4a1b      	ldr	r2, [pc, #108]	; (800afc8 <SysTick_Handler+0x118>)
 800af5a:	6013      	str	r3, [r2, #0]
	}

	/* Check for 100ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 100) == 0u)
 800af5c:	4b17      	ldr	r3, [pc, #92]	; (800afbc <SysTick_Handler+0x10c>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	4b1d      	ldr	r3, [pc, #116]	; (800afd8 <SysTick_Handler+0x128>)
 800af62:	fba3 1302 	umull	r1, r3, r3, r2
 800af66:	095b      	lsrs	r3, r3, #5
 800af68:	2164      	movs	r1, #100	; 0x64
 800af6a:	fb01 f303 	mul.w	r3, r1, r3
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <SysTick_Handler+0xce>
	{
		/* Increment 100ms counter */
		g_Os_100msTimerISR_count_u32++;
 800af74:	4b15      	ldr	r3, [pc, #84]	; (800afcc <SysTick_Handler+0x11c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3301      	adds	r3, #1
 800af7a:	4a14      	ldr	r2, [pc, #80]	; (800afcc <SysTick_Handler+0x11c>)
 800af7c:	6013      	str	r3, [r2, #0]
	}

	/* Check for 500ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 500) == 0u)
 800af7e:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <SysTick_Handler+0x10c>)
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	4b16      	ldr	r3, [pc, #88]	; (800afdc <SysTick_Handler+0x12c>)
 800af84:	fba3 1302 	umull	r1, r3, r3, r2
 800af88:	095b      	lsrs	r3, r3, #5
 800af8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800af8e:	fb01 f303 	mul.w	r3, r1, r3
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <SysTick_Handler+0xf2>
	{
		/* Increment 500ms counter */
		g_Os_500msTimerISR_count_u32++;
 800af98:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <SysTick_Handler+0x120>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3301      	adds	r3, #1
 800af9e:	4a0c      	ldr	r2, [pc, #48]	; (800afd0 <SysTick_Handler+0x120>)
 800afa0:	6013      	str	r3, [r2, #0]
	}

	/* Call PendSV_Handler for context switch */
	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800afa2:	4b0f      	ldr	r3, [pc, #60]	; (800afe0 <SysTick_Handler+0x130>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d105      	bne.n	800afb8 <SysTick_Handler+0x108>
	{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <SysTick_Handler+0x134>)
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	4a0c      	ldr	r2, [pc, #48]	; (800afe4 <SysTick_Handler+0x134>)
 800afb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb6:	6053      	str	r3, [r2, #4]
	}
}
 800afb8:	bf00      	nop
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	200014c8 	.word	0x200014c8
 800afc0:	200014cc 	.word	0x200014cc
 800afc4:	200014d0 	.word	0x200014d0
 800afc8:	200014d4 	.word	0x200014d4
 800afcc:	200014d8 	.word	0x200014d8
 800afd0:	200014dc 	.word	0x200014dc
 800afd4:	cccccccd 	.word	0xcccccccd
 800afd8:	51eb851f 	.word	0x51eb851f
 800afdc:	10624dd3 	.word	0x10624dd3
 800afe0:	20001508 	.word	0x20001508
 800afe4:	e000ed00 	.word	0xe000ed00

0800afe8 <PendSV_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 800afe8:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 800afea:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 800afec:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800afee:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 800aff0:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 800aff2:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 800aff4:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800aff6:	4808      	ldr	r0, [pc, #32]	; (800b018 <PendSV_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 800aff8:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 800affa:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 800affc:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 800affe:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 800b000:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 800b002:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 800b004:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 800b006:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800b008:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800b00a:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800b00c:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800b00e:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 800b010:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 800b012:	b662      	cpsie	i
    __asm("BX      LR");
 800b014:	4770      	bx	lr

}
 800b016:	bf00      	nop
 800b018:	20000524 	.word	0x20000524

0800b01c <Os_Scheduler_Init>:
/**
  * @brief  OS Scheduler initialization function
  * @return None
  */
void Os_Scheduler_Init()
{
 800b01c:	b480      	push	{r7}
 800b01e:	af00      	add	r7, sp, #0
	/* Enter critical section: Disable interrupts */
	__asm("CPSID   I");
 800b020:	b672      	cpsid	i
	/* Make the Task Control Block linked list circular */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8];
 800b022:	4b29      	ldr	r3, [pc, #164]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b024:	4a29      	ldr	r2, [pc, #164]	; (800b0cc <Os_Scheduler_Init+0xb0>)
 800b026:	605a      	str	r2, [r3, #4]
	g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8];
 800b028:	4b27      	ldr	r3, [pc, #156]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b02a:	4a29      	ldr	r2, [pc, #164]	; (800b0d0 <Os_Scheduler_Init+0xb4>)
 800b02c:	60da      	str	r2, [r3, #12]
	g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8];
 800b02e:	4b26      	ldr	r3, [pc, #152]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b030:	4a28      	ldr	r2, [pc, #160]	; (800b0d4 <Os_Scheduler_Init+0xb8>)
 800b032:	615a      	str	r2, [r3, #20]
	g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8];
 800b034:	4b24      	ldr	r3, [pc, #144]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b036:	4a28      	ldr	r2, [pc, #160]	; (800b0d8 <Os_Scheduler_Init+0xbc>)
 800b038:	61da      	str	r2, [r3, #28]
	g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800b03a:	4b23      	ldr	r3, [pc, #140]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b03c:	4a22      	ldr	r2, [pc, #136]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b03e:	625a      	str	r2, [r3, #36]	; 0x24
	/* Setup stack for initialization (master) task */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-16];
 800b040:	4b21      	ldr	r3, [pc, #132]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b042:	4a26      	ldr	r2, [pc, #152]	; (800b0dc <Os_Scheduler_Init+0xc0>)
 800b044:	601a      	str	r2, [r3, #0]
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b046:	4b26      	ldr	r3, [pc, #152]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b04c:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_TaskMaster_0);
 800b050:	4a24      	ldr	r2, [pc, #144]	; (800b0e4 <Os_Scheduler_Init+0xc8>)
 800b052:	4b23      	ldr	r3, [pc, #140]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b054:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	/* Setup stack for 10ms task */
    g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b058:	4b1b      	ldr	r3, [pc, #108]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b05a:	4a23      	ldr	r2, [pc, #140]	; (800b0e8 <Os_Scheduler_Init+0xcc>)
 800b05c:	609a      	str	r2, [r3, #8]
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b05e:	4b20      	ldr	r3, [pc, #128]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b064:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task10ms_0);
 800b068:	4a20      	ldr	r2, [pc, #128]	; (800b0ec <Os_Scheduler_Init+0xd0>)
 800b06a:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b06c:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
	/* Setup stack for 50ms task */
    g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b070:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b072:	4a1f      	ldr	r2, [pc, #124]	; (800b0f0 <Os_Scheduler_Init+0xd4>)
 800b074:	611a      	str	r2, [r3, #16]
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b076:	4b1a      	ldr	r3, [pc, #104]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b07c:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task50ms_0);
 800b080:	4a1c      	ldr	r2, [pc, #112]	; (800b0f4 <Os_Scheduler_Init+0xd8>)
 800b082:	4b17      	ldr	r3, [pc, #92]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b084:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
	/* Setup stack for 100ms task */
    g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b088:	4b0f      	ldr	r3, [pc, #60]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b08a:	4a1b      	ldr	r2, [pc, #108]	; (800b0f8 <Os_Scheduler_Init+0xdc>)
 800b08c:	619a      	str	r2, [r3, #24]
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b08e:	4b14      	ldr	r3, [pc, #80]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b094:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task100ms_0);
 800b098:	4a18      	ldr	r2, [pc, #96]	; (800b0fc <Os_Scheduler_Init+0xe0>)
 800b09a:	4b11      	ldr	r3, [pc, #68]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b09c:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78
	/* Setup stack for 500ms task */
    g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b0a0:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b0a2:	4a17      	ldr	r2, [pc, #92]	; (800b100 <Os_Scheduler_Init+0xe4>)
 800b0a4:	621a      	str	r2, [r3, #32]
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b0a6:	4b0e      	ldr	r3, [pc, #56]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b0a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0ac:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task500ms_0);
 800b0b0:	4a14      	ldr	r2, [pc, #80]	; (800b104 <Os_Scheduler_Init+0xe8>)
 800b0b2:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <Os_Scheduler_Init+0xc4>)
 800b0b4:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
    /* Set the current task control block to point to init task */
    g_Os_CurrentTaskBlock_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800b0b8:	4b13      	ldr	r3, [pc, #76]	; (800b108 <Os_Scheduler_Init+0xec>)
 800b0ba:	4a03      	ldr	r2, [pc, #12]	; (800b0c8 <Os_Scheduler_Init+0xac>)
 800b0bc:	601a      	str	r2, [r3, #0]
    /* Leave critical section: Enable interrupts */
    __asm("CPSIE   I ");
 800b0be:	b662      	cpsie	i
}
 800b0c0:	bf00      	nop
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bc80      	pop	{r7}
 800b0c6:	4770      	bx	lr
 800b0c8:	200004fc 	.word	0x200004fc
 800b0cc:	20000504 	.word	0x20000504
 800b0d0:	2000050c 	.word	0x2000050c
 800b0d4:	20000514 	.word	0x20000514
 800b0d8:	2000051c 	.word	0x2000051c
 800b0dc:	20000808 	.word	0x20000808
 800b0e0:	20000528 	.word	0x20000528
 800b0e4:	0800b139 	.word	0x0800b139
 800b0e8:	20000b28 	.word	0x20000b28
 800b0ec:	0800b1c1 	.word	0x0800b1c1
 800b0f0:	20000e48 	.word	0x20000e48
 800b0f4:	0800b211 	.word	0x0800b211
 800b0f8:	20001168 	.word	0x20001168
 800b0fc:	0800b261 	.word	0x0800b261
 800b100:	20001488 	.word	0x20001488
 800b104:	0800b2b1 	.word	0x0800b2b1
 800b108:	20000524 	.word	0x20000524

0800b10c <Os_Scheduler_Start>:
  * @return None
  */
__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800b10c:	4809      	ldr	r0, [pc, #36]	; (800b134 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 800b10e:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 800b110:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 800b112:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 800b114:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800b116:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800b118:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800b11a:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800b11c:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 800b11e:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 800b120:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800b122:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800b124:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 800b126:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 800b128:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 800b12a:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 800b12c:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 800b12e:	b662      	cpsie	i
    __asm("BX      LR");
 800b130:	4770      	bx	lr
}
 800b132:	bf00      	nop
 800b134:	20000524 	.word	0x20000524

0800b138 <Os_Scheduler_TaskMaster_0>:
/**
  * @brief  Initialization task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_TaskMaster_0(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
    while(1)
    {
    	/* Wait for context switch of master task */
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800b13c:	bf00      	nop
 800b13e:	4b1c      	ldr	r3, [pc, #112]	; (800b1b0 <Os_Scheduler_TaskMaster_0+0x78>)
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <Os_Scheduler_TaskMaster_0+0x7c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	429a      	cmp	r2, r3
 800b148:	d0f9      	beq.n	800b13e <Os_Scheduler_TaskMaster_0+0x6>
    	{
    	}
    	Os_Task5ms_0_cnt++;
 800b14a:	4b1b      	ldr	r3, [pc, #108]	; (800b1b8 <Os_Scheduler_TaskMaster_0+0x80>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	4a19      	ldr	r2, [pc, #100]	; (800b1b8 <Os_Scheduler_TaskMaster_0+0x80>)
 800b152:	6013      	str	r3, [r2, #0]
    	g_Os_Task5ms_count_u32 = g_Os_5msTimerISR_count_u32;
 800b154:	4b17      	ldr	r3, [pc, #92]	; (800b1b4 <Os_Scheduler_TaskMaster_0+0x7c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <Os_Scheduler_TaskMaster_0+0x78>)
 800b15a:	6013      	str	r3, [r2, #0]

    	/* Check Os state */
    	switch (g_OS_State_e)
 800b15c:	4b17      	ldr	r3, [pc, #92]	; (800b1bc <Os_Scheduler_TaskMaster_0+0x84>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b05      	cmp	r3, #5
 800b164:	d822      	bhi.n	800b1ac <Os_Scheduler_TaskMaster_0+0x74>
 800b166:	a201      	add	r2, pc, #4	; (adr r2, 800b16c <Os_Scheduler_TaskMaster_0+0x34>)
 800b168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16c:	0800b185 	.word	0x0800b185
 800b170:	0800b18d 	.word	0x0800b18d
 800b174:	0800b199 	.word	0x0800b199
 800b178:	0800b199 	.word	0x0800b199
 800b17c:	0800b1a1 	.word	0x0800b1a1
 800b180:	0800b1ad 	.word	0x0800b1ad
    	{
    		case OS_STATE_RESET_E:
    		{
    			g_OS_State_e = OS_STATE_INIT_E;
 800b184:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <Os_Scheduler_TaskMaster_0+0x84>)
 800b186:	2201      	movs	r2, #1
 800b188:	701a      	strb	r2, [r3, #0]
    		} break;
 800b18a:	e010      	b.n	800b1ae <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_INIT_E:
    		{
    			OS_TASK_CALL(Os_Task_Master(), g_Os_dwt_Master_f32);
 800b18c:	f000 f8b8 	bl	800b300 <Os_Task_Master>
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800b190:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <Os_Scheduler_TaskMaster_0+0x84>)
 800b192:	2202      	movs	r2, #2
 800b194:	701a      	strb	r2, [r3, #0]
    		} break;
 800b196:	e00a      	b.n	800b1ae <Os_Scheduler_TaskMaster_0+0x76>
    			//g_OS_State_e = OS_STATE_RUNNING_E;
    		}
    		case OS_STATE_RUNNING_E:
    		{
    			/* TODO: add task activate/suspend here */
    			g_OS_State_e = OS_STATE_RUNNING_E;
 800b198:	4b08      	ldr	r3, [pc, #32]	; (800b1bc <Os_Scheduler_TaskMaster_0+0x84>)
 800b19a:	2203      	movs	r2, #3
 800b19c:	701a      	strb	r2, [r3, #0]
    		} break;
 800b19e:	e006      	b.n	800b1ae <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_SHUTDOWN_E:
    		{
    			/* TODO: Addc condition to get here */
    			OS_TASK_CALL(Os_Task_Shutdown(), g_Os_dwt_Shutdown_f32);
 800b1a0:	f000 f8cc 	bl	800b33c <Os_Task_Shutdown>
    			/* TODO: move to reset state */
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800b1a4:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <Os_Scheduler_TaskMaster_0+0x84>)
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	701a      	strb	r2, [r3, #0]
    		} break;
 800b1aa:	e000      	b.n	800b1ae <Os_Scheduler_TaskMaster_0+0x76>
    			/* NvM write all, write error */
    		} break;
    		default:
    		{

    		} break;
 800b1ac:	bf00      	nop
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800b1ae:	e7c5      	b.n	800b13c <Os_Scheduler_TaskMaster_0+0x4>
 800b1b0:	200014e4 	.word	0x200014e4
 800b1b4:	200014cc 	.word	0x200014cc
 800b1b8:	200014e0 	.word	0x200014e0
 800b1bc:	20001508 	.word	0x20001508

0800b1c0 <Os_Scheduler_Task10ms_0>:
/**
  * @brief  Periodic 10ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task10ms_0(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b1c4:	4b0e      	ldr	r3, [pc, #56]	; (800b200 <Os_Scheduler_Task10ms_0+0x40>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d112      	bne.n	800b1f4 <Os_Scheduler_Task10ms_0+0x34>
    	{
			while(g_Os_Task10ms_count_u32 == g_Os_10msTimerISR_count_u32)
 800b1ce:	bf00      	nop
 800b1d0:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <Os_Scheduler_Task10ms_0+0x44>)
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <Os_Scheduler_Task10ms_0+0x48>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d0f9      	beq.n	800b1d0 <Os_Scheduler_Task10ms_0+0x10>
			{

			}
			Os_Task10ms_0_cnt++;
 800b1dc:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <Os_Scheduler_Task10ms_0+0x4c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <Os_Scheduler_Task10ms_0+0x4c>)
 800b1e4:	6013      	str	r3, [r2, #0]
			g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800b1e6:	4b08      	ldr	r3, [pc, #32]	; (800b208 <Os_Scheduler_Task10ms_0+0x48>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a06      	ldr	r2, [pc, #24]	; (800b204 <Os_Scheduler_Task10ms_0+0x44>)
 800b1ec:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_10ms(), g_Os_dwt_10ms_f32);
 800b1ee:	f000 f88d 	bl	800b30c <Os_Task_10ms>
 800b1f2:	e7e7      	b.n	800b1c4 <Os_Scheduler_Task10ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800b1f4:	4b04      	ldr	r3, [pc, #16]	; (800b208 <Os_Scheduler_Task10ms_0+0x48>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a02      	ldr	r2, [pc, #8]	; (800b204 <Os_Scheduler_Task10ms_0+0x44>)
 800b1fa:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b1fc:	e7e2      	b.n	800b1c4 <Os_Scheduler_Task10ms_0+0x4>
 800b1fe:	bf00      	nop
 800b200:	20001508 	.word	0x20001508
 800b204:	200014ec 	.word	0x200014ec
 800b208:	200014d0 	.word	0x200014d0
 800b20c:	200014e8 	.word	0x200014e8

0800b210 <Os_Scheduler_Task50ms_0>:
/**
  * @brief  Periodic 50ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task50ms_0(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b214:	4b0e      	ldr	r3, [pc, #56]	; (800b250 <Os_Scheduler_Task50ms_0+0x40>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d112      	bne.n	800b244 <Os_Scheduler_Task50ms_0+0x34>
    	{
			while(g_Os_Task50ms_count_u32 == g_Os_50msTimerISR_count_u32)
 800b21e:	bf00      	nop
 800b220:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <Os_Scheduler_Task50ms_0+0x44>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <Os_Scheduler_Task50ms_0+0x48>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d0f9      	beq.n	800b220 <Os_Scheduler_Task50ms_0+0x10>
			{

			}
			Os_Task50ms_0_cnt++;
 800b22c:	4b0b      	ldr	r3, [pc, #44]	; (800b25c <Os_Scheduler_Task50ms_0+0x4c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	4a0a      	ldr	r2, [pc, #40]	; (800b25c <Os_Scheduler_Task50ms_0+0x4c>)
 800b234:	6013      	str	r3, [r2, #0]
			g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800b236:	4b08      	ldr	r3, [pc, #32]	; (800b258 <Os_Scheduler_Task50ms_0+0x48>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a06      	ldr	r2, [pc, #24]	; (800b254 <Os_Scheduler_Task50ms_0+0x44>)
 800b23c:	6013      	str	r3, [r2, #0]
			OS_TASK_CALL(Os_Task_50ms(), g_Os_dwt_50ms_f32);
 800b23e:	f000 f86b 	bl	800b318 <Os_Task_50ms>
 800b242:	e7e7      	b.n	800b214 <Os_Scheduler_Task50ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800b244:	4b04      	ldr	r3, [pc, #16]	; (800b258 <Os_Scheduler_Task50ms_0+0x48>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a02      	ldr	r2, [pc, #8]	; (800b254 <Os_Scheduler_Task50ms_0+0x44>)
 800b24a:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b24c:	e7e2      	b.n	800b214 <Os_Scheduler_Task50ms_0+0x4>
 800b24e:	bf00      	nop
 800b250:	20001508 	.word	0x20001508
 800b254:	200014f4 	.word	0x200014f4
 800b258:	200014d4 	.word	0x200014d4
 800b25c:	200014f0 	.word	0x200014f0

0800b260 <Os_Scheduler_Task100ms_0>:
/**
  * @brief  Periodic 100ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task100ms_0(void)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b264:	4b0e      	ldr	r3, [pc, #56]	; (800b2a0 <Os_Scheduler_Task100ms_0+0x40>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d112      	bne.n	800b294 <Os_Scheduler_Task100ms_0+0x34>
    	{
			while(g_Os_Task100ms_count_u32 == g_Os_100msTimerISR_count_u32)
 800b26e:	bf00      	nop
 800b270:	4b0c      	ldr	r3, [pc, #48]	; (800b2a4 <Os_Scheduler_Task100ms_0+0x44>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <Os_Scheduler_Task100ms_0+0x48>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d0f9      	beq.n	800b270 <Os_Scheduler_Task100ms_0+0x10>
			{

			}
			Os_Task100ms_0_cnt++;
 800b27c:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <Os_Scheduler_Task100ms_0+0x4c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	4a0a      	ldr	r2, [pc, #40]	; (800b2ac <Os_Scheduler_Task100ms_0+0x4c>)
 800b284:	6013      	str	r3, [r2, #0]
			g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800b286:	4b08      	ldr	r3, [pc, #32]	; (800b2a8 <Os_Scheduler_Task100ms_0+0x48>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a06      	ldr	r2, [pc, #24]	; (800b2a4 <Os_Scheduler_Task100ms_0+0x44>)
 800b28c:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_100ms(), g_Os_dwt_100ms_f32);
 800b28e:	f000 f849 	bl	800b324 <Os_Task_100ms>
 800b292:	e7e7      	b.n	800b264 <Os_Scheduler_Task100ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800b294:	4b04      	ldr	r3, [pc, #16]	; (800b2a8 <Os_Scheduler_Task100ms_0+0x48>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a02      	ldr	r2, [pc, #8]	; (800b2a4 <Os_Scheduler_Task100ms_0+0x44>)
 800b29a:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b29c:	e7e2      	b.n	800b264 <Os_Scheduler_Task100ms_0+0x4>
 800b29e:	bf00      	nop
 800b2a0:	20001508 	.word	0x20001508
 800b2a4:	200014fc 	.word	0x200014fc
 800b2a8:	200014d8 	.word	0x200014d8
 800b2ac:	200014f8 	.word	0x200014f8

0800b2b0 <Os_Scheduler_Task500ms_0>:
/**
  * @brief  Periodic 500ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task500ms_0(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b2b4:	4b0e      	ldr	r3, [pc, #56]	; (800b2f0 <Os_Scheduler_Task500ms_0+0x40>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d112      	bne.n	800b2e4 <Os_Scheduler_Task500ms_0+0x34>
    	{
			while(g_Os_Task500ms_count_u32 == g_Os_500msTimerISR_count_u32)
 800b2be:	bf00      	nop
 800b2c0:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <Os_Scheduler_Task500ms_0+0x44>)
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <Os_Scheduler_Task500ms_0+0x48>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d0f9      	beq.n	800b2c0 <Os_Scheduler_Task500ms_0+0x10>
			{

			}
			Os_Task500ms_0_cnt++;
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <Os_Scheduler_Task500ms_0+0x4c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <Os_Scheduler_Task500ms_0+0x4c>)
 800b2d4:	6013      	str	r3, [r2, #0]
			g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800b2d6:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <Os_Scheduler_Task500ms_0+0x48>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a06      	ldr	r2, [pc, #24]	; (800b2f4 <Os_Scheduler_Task500ms_0+0x44>)
 800b2dc:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_500ms(), g_Os_dwt_500ms_f32);
 800b2de:	f000 f827 	bl	800b330 <Os_Task_500ms>
 800b2e2:	e7e7      	b.n	800b2b4 <Os_Scheduler_Task500ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <Os_Scheduler_Task500ms_0+0x48>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a02      	ldr	r2, [pc, #8]	; (800b2f4 <Os_Scheduler_Task500ms_0+0x44>)
 800b2ea:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b2ec:	e7e2      	b.n	800b2b4 <Os_Scheduler_Task500ms_0+0x4>
 800b2ee:	bf00      	nop
 800b2f0:	20001508 	.word	0x20001508
 800b2f4:	20001504 	.word	0x20001504
 800b2f8:	200014dc 	.word	0x200014dc
 800b2fc:	20001500 	.word	0x20001500

0800b300 <Os_Task_Master>:

#include "Os_task.h"
#include "Rte_Os.h"

TASK(Master)()
{
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
	Rte_Os_Task_Master();
 800b304:	f000 f872 	bl	800b3ec <Rte_Task_Master>
}
 800b308:	bf00      	nop
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <Os_Task_10ms>:

TASK(10ms)()
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 800b310:	f000 f88e 	bl	800b430 <Rte_Task_10ms>
}
 800b314:	bf00      	nop
 800b316:	bd80      	pop	{r7, pc}

0800b318 <Os_Task_50ms>:

TASK(50ms)()
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 800b31c:	f000 f89c 	bl	800b458 <Rte_Task_50ms>
}
 800b320:	bf00      	nop
 800b322:	bd80      	pop	{r7, pc}

0800b324 <Os_Task_100ms>:

TASK(100ms)()
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 800b328:	f000 f89c 	bl	800b464 <Rte_Task_100ms>
}
 800b32c:	bf00      	nop
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <Os_Task_500ms>:

TASK(500ms)()
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 800b334:	f000 f8a2 	bl	800b47c <Rte_Task_500ms>
}
 800b338:	bf00      	nop
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <Os_Task_Shutdown>:

TASK(Shutdown)()
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
	Rte_Os_Task_Shutdown();
 800b340:	f000 f8d0 	bl	800b4e4 <Rte_Task_Shutdown>
}
 800b344:	bf00      	nop
 800b346:	bd80      	pop	{r7, pc}

0800b348 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0

}
 800b34c:	bf00      	nop
 800b34e:	46bd      	mov	sp, r7
 800b350:	bc80      	pop	{r7}
 800b352:	4770      	bx	lr

0800b354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b38c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b358:	480d      	ldr	r0, [pc, #52]	; (800b390 <LoopForever+0x6>)
  ldr r1, =_edata
 800b35a:	490e      	ldr	r1, [pc, #56]	; (800b394 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b35c:	4a0e      	ldr	r2, [pc, #56]	; (800b398 <LoopForever+0xe>)
  movs r3, #0
 800b35e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b360:	e002      	b.n	800b368 <LoopCopyDataInit>

0800b362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b366:	3304      	adds	r3, #4

0800b368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b36a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b36c:	d3f9      	bcc.n	800b362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b36e:	4a0b      	ldr	r2, [pc, #44]	; (800b39c <LoopForever+0x12>)
  ldr r4, =_ebss
 800b370:	4c0b      	ldr	r4, [pc, #44]	; (800b3a0 <LoopForever+0x16>)
  movs r3, #0
 800b372:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b374:	e001      	b.n	800b37a <LoopFillZerobss>

0800b376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b378:	3204      	adds	r2, #4

0800b37a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b37a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b37c:	d3fb      	bcc.n	800b376 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b37e:	f7fb fe85 	bl	800708c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b382:	f000 f9e5 	bl	800b750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 800b386:	f7ff fd82 	bl	800ae8e <EcuM_Init>

0800b38a <LoopForever>:

LoopForever:
    b LoopForever
 800b38a:	e7fe      	b.n	800b38a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b38c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b394:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800b398:	0800c128 	.word	0x0800c128
  ldr r2, =_sbss
 800b39c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800b3a0:	200015f0 	.word	0x200015f0

0800b3a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b3a4:	e7fe      	b.n	800b3a4 <ADC1_2_IRQHandler>

0800b3a6 <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b3aa:	b672      	cpsid	i
}
 800b3ac:	bf00      	nop
	__disable_irq();
}
 800b3ae:	bf00      	nop
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bc80      	pop	{r7}
 800b3b4:	4770      	bx	lr

0800b3b6 <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800b3ba:	b662      	cpsie	i
}
 800b3bc:	bf00      	nop
	__enable_irq();
}
 800b3be:	bf00      	nop
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bc80      	pop	{r7}
 800b3c4:	4770      	bx	lr
	...

0800b3c8 <Rte_Init>:

void Rte_Init(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800b3cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b3d0:	4804      	ldr	r0, [pc, #16]	; (800b3e4 <Rte_Init+0x1c>)
 800b3d2:	f7f7 ff71 	bl	80032b8 <HAL_GPIO_ReadPin>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	461a      	mov	r2, r3
 800b3da:	4b03      	ldr	r3, [pc, #12]	; (800b3e8 <Rte_Init+0x20>)
 800b3dc:	701a      	strb	r2, [r3, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	48000800 	.word	0x48000800
 800b3e8:	20001509 	.word	0x20001509

0800b3ec <Rte_Task_Master>:

/* Os Tasks*/
/* Init task */
void Rte_Task_Master(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 800b3f0:	f7ff fd47 	bl	800ae82 <EcuM_StartUp_Two>

	/* Bsw stacks init */
	NvM_Init();
 800b3f4:	f7ff f9f2 	bl	800a7dc <NvM_Init>
	Ea_Init();
 800b3f8:	f7ff f9ac 	bl	800a754 <Ea_Init>
	/* Rte init */
	Rte_Init();
 800b3fc:	f7ff ffe4 	bl	800b3c8 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 800b400:	f7f6 fac4 	bl	800198c <Cdd_Servo_Init>
	Cdd_Ultrasonic_Init();
 800b404:	f7f6 fc30 	bl	8001c68 <Cdd_Ultrasonic_Init>
	/* Asw init */
	Access_Init();
 800b408:	f7f5 fe04 	bl	8001014 <Access_Init>
	Engine_Init();
 800b40c:	f7f5 ff1e 	bl	800124c <Engine_Init>
	Brakes_Init();
 800b410:	f7f5 feb2 	bl	8001178 <Brakes_Init>
	Steering_Init();
 800b414:	f7f6 f8f4 	bl	8001600 <Steering_Init>
	Blinker_Init();
 800b418:	f7f6 f81c 	bl	8001454 <Blinker_Init>
	FrontLights_Init();
 800b41c:	f7f6 f8ba 	bl	8001594 <FrontLights_Init>
	InteriorLights_Init();
 800b420:	f7f6 f8ca 	bl	80015b8 <InteriorLights_Init>
	RearLights_Init();
 800b424:	f7f6 f8da 	bl	80015dc <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 800b428:	f7f5 ff66 	bl	80012f8 <LED_Init>

	/* Add new ASW init functions here */
}
 800b42c:	bf00      	nop
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 800b434:	f7ff fa42 	bl	800a8bc <BswM_MainFunction>
	NvM_MainFunction();
 800b438:	f7ff f9e0 	bl	800a7fc <NvM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 800b43c:	f7f6 face 	bl	80019dc <Cdd_Servo_MainFunction>
	Cdd_Ultrasonic_MainFunction();
 800b440:	f7f6 fd3a 	bl	8001eb8 <Cdd_Ultrasonic_MainFunction>
	/* ASW */
	Access_MainFunction();
 800b444:	f7f5 fdf2 	bl	800102c <Access_MainFunction>
	Engine_MainFunction();
 800b448:	f7f5 ff0c 	bl	8001264 <Engine_MainFunction>
	Brakes_MainFunction();
 800b44c:	f7f5 febe 	bl	80011cc <Brakes_MainFunction>
	Steering_MainFunction();
 800b450:	f7f6 f8e2 	bl	8001618 <Steering_MainFunction>

}
 800b454:	bf00      	nop
 800b456:	bd80      	pop	{r7, pc}

0800b458 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 800b45c:	f7f5 ff70 	bl	8001340 <LED_MainFunction>
}
 800b460:	bf00      	nop
 800b462:	bd80      	pop	{r7, pc}

0800b464 <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 800b468:	f7f6 f812 	bl	8001490 <Blinker_MainFunction>
	FrontLights_MainFunction();
 800b46c:	f7f6 f89e 	bl	80015ac <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 800b470:	f7f6 f8ae 	bl	80015d0 <InteriorLights_MainFunction>
	RearLights_MainFunction();
 800b474:	f7f6 f8be 	bl	80015f4 <RearLights_MainFunction>
}
 800b478:	bf00      	nop
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0

	/* UART test section. TODO: remove */
	sprintf(databuf, "%4d X", count);
 800b480:	4b13      	ldr	r3, [pc, #76]	; (800b4d0 <Rte_Task_500ms+0x54>)
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	4913      	ldr	r1, [pc, #76]	; (800b4d4 <Rte_Task_500ms+0x58>)
 800b488:	4813      	ldr	r0, [pc, #76]	; (800b4d8 <Rte_Task_500ms+0x5c>)
 800b48a:	f000 f98d 	bl	800b7a8 <siprintf>
	databuf[strlen(databuf)] = 0;
 800b48e:	4812      	ldr	r0, [pc, #72]	; (800b4d8 <Rte_Task_500ms+0x5c>)
 800b490:	f7f4 fea6 	bl	80001e0 <strlen>
 800b494:	4603      	mov	r3, r0
 800b496:	4a10      	ldr	r2, [pc, #64]	; (800b4d8 <Rte_Task_500ms+0x5c>)
 800b498:	2100      	movs	r1, #0
 800b49a:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 800b49c:	480e      	ldr	r0, [pc, #56]	; (800b4d8 <Rte_Task_500ms+0x5c>)
 800b49e:	f7f4 fe9f 	bl	80001e0 <strlen>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4aa:	490b      	ldr	r1, [pc, #44]	; (800b4d8 <Rte_Task_500ms+0x5c>)
 800b4ac:	480b      	ldr	r0, [pc, #44]	; (800b4dc <Rte_Task_500ms+0x60>)
 800b4ae:	f7fe f991 	bl	80097d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 800b4b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	4909      	ldr	r1, [pc, #36]	; (800b4e0 <Rte_Task_500ms+0x64>)
 800b4ba:	4808      	ldr	r0, [pc, #32]	; (800b4dc <Rte_Task_500ms+0x60>)
 800b4bc:	f7fe f98a 	bl	80097d4 <HAL_UART_Transmit>

	count++;
 800b4c0:	4b03      	ldr	r3, [pc, #12]	; (800b4d0 <Rte_Task_500ms+0x54>)
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	4b01      	ldr	r3, [pc, #4]	; (800b4d0 <Rte_Task_500ms+0x54>)
 800b4ca:	801a      	strh	r2, [r3, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	2000151c 	.word	0x2000151c
 800b4d4:	0800c098 	.word	0x0800c098
 800b4d8:	2000150c 	.word	0x2000150c
 800b4dc:	2000046c 	.word	0x2000046c
 800b4e0:	20000010 	.word	0x20000010

0800b4e4 <Rte_Task_Shutdown>:

void Rte_Task_Shutdown(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
	/* ASW Shutdown callbacks */
	LED_Shutdown();
 800b4e8:	f7f5 ffa4 	bl	8001434 <LED_Shutdown>
	Brakes_Shutdown();
 800b4ec:	f7f5 fe9e 	bl	800122c <Brakes_Shutdown>

	/* BSW Shutdown callbacks */
}
 800b4f0:	bf00      	nop
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>:
/* CDD interfaces: Ultrasonic */
/* Cdd_Ultrasonic: Trigger measurement */
void Rte_Call_Cdd_Ultrasonic_TriggerMeasurement(void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_SET);
 800b4f8:	4b0b      	ldr	r3, [pc, #44]	; (800b528 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a0a      	ldr	r2, [pc, #40]	; (800b528 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b4fe:	8891      	ldrh	r1, [r2, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	4618      	mov	r0, r3
 800b504:	f7f7 feef 	bl	80032e6 <HAL_GPIO_WritePin>
	__asm("NOP");
 800b508:	bf00      	nop
	__asm("NOP");
 800b50a:	bf00      	nop
	__asm("NOP");
 800b50c:	bf00      	nop
	__asm("NOP");
 800b50e:	bf00      	nop
	__asm("NOP");
 800b510:	bf00      	nop
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_RESET);
 800b512:	4b05      	ldr	r3, [pc, #20]	; (800b528 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a04      	ldr	r2, [pc, #16]	; (800b528 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b518:	8891      	ldrh	r1, [r2, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7f7 fee2 	bl	80032e6 <HAL_GPIO_WritePin>
}
 800b522:	bf00      	nop
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	0800c0a0 	.word	0x0800c0a0

0800b52c <Rte_Read_Cdd_Ultrasonic_Distance_f32>:

/* Cdd_Ultrasonic: Read distance */
void Rte_Read_Cdd_Ultrasonic_Distance_f32(float32 *distance)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	*distance = Cdd_Ultrasonic_ReadDistance();
 800b534:	f7f6 fcda 	bl	8001eec <Cdd_Ultrasonic_ReadDistance>
 800b538:	4602      	mov	r2, r0
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]
}
 800b53e:	bf00      	nop
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <Rte_Read_PC13_Pin_State+0x1c>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	b2da      	uxtb	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	701a      	strb	r2, [r3, #0]
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	bc80      	pop	{r7}
 800b562:	4770      	bx	lr
 800b564:	20001509 	.word	0x20001509

0800b568 <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 800b572:	4a04      	ldr	r2, [pc, #16]	; (800b584 <Rte_Write_PC13_Pin_State+0x1c>)
 800b574:	79fb      	ldrb	r3, [r7, #7]
 800b576:	7013      	strb	r3, [r2, #0]
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bc80      	pop	{r7}
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	20001509 	.word	0x20001509

0800b588 <Rte_Read_g_CollisionWarning_Status>:

void Rte_Read_g_CollisionWarning_Status(uint8 *status)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	*status = g_Rte_CollisionWarning_Status_u8;
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <Rte_Read_g_CollisionWarning_Status+0x1c>)
 800b592:	781a      	ldrb	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	701a      	strb	r2, [r3, #0]
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	2000151e 	.word	0x2000151e

0800b5a8 <Rte_Write_g_CollisionWarning_Status>:

void Rte_Write_g_CollisionWarning_Status(uint8 status)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	71fb      	strb	r3, [r7, #7]
	g_Rte_CollisionWarning_Status_u8 = status;
 800b5b2:	4a04      	ldr	r2, [pc, #16]	; (800b5c4 <Rte_Write_g_CollisionWarning_Status+0x1c>)
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	7013      	strb	r3, [r2, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bc80      	pop	{r7}
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	2000151e 	.word	0x2000151e

0800b5c8 <Rte_Read_DIO_Autobrakes_State_b>:

void Rte_Read_DIO_Autobrakes_State_b(boolean *state)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
	*state = g_Rte_Autobrakes_Status_b;
 800b5d0:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <Rte_Read_DIO_Autobrakes_State_b+0x1c>)
 800b5d2:	781a      	ldrb	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	701a      	strb	r2, [r3, #0]
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bc80      	pop	{r7}
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	2000151f 	.word	0x2000151f

0800b5e8 <Rte_Write_PC_2>:

void Rte_Write_PC_2(boolean state)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800b5f2:	79fb      	ldrb	r3, [r7, #7]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d105      	bne.n	800b604 <Rte_Write_PC_2+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2104      	movs	r1, #4
 800b5fc:	4806      	ldr	r0, [pc, #24]	; (800b618 <Rte_Write_PC_2+0x30>)
 800b5fe:	f7f7 fe72 	bl	80032e6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
	}
}
 800b602:	e004      	b.n	800b60e <Rte_Write_PC_2+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b604:	2201      	movs	r2, #1
 800b606:	2104      	movs	r1, #4
 800b608:	4803      	ldr	r0, [pc, #12]	; (800b618 <Rte_Write_PC_2+0x30>)
 800b60a:	f7f7 fe6c 	bl	80032e6 <HAL_GPIO_WritePin>
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	48000800 	.word	0x48000800

0800b61c <Rte_Write_PC_3>:

void Rte_Write_PC_3(boolean state)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d105      	bne.n	800b638 <Rte_Write_PC_3+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800b62c:	2200      	movs	r2, #0
 800b62e:	2108      	movs	r1, #8
 800b630:	4806      	ldr	r0, [pc, #24]	; (800b64c <Rte_Write_PC_3+0x30>)
 800b632:	f7f7 fe58 	bl	80032e6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800b636:	e004      	b.n	800b642 <Rte_Write_PC_3+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800b638:	2201      	movs	r2, #1
 800b63a:	2108      	movs	r1, #8
 800b63c:	4803      	ldr	r0, [pc, #12]	; (800b64c <Rte_Write_PC_3+0x30>)
 800b63e:	f7f7 fe52 	bl	80032e6 <HAL_GPIO_WritePin>
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	48000800 	.word	0x48000800

0800b650 <Rte_Write_DIO_Autobrakes_State_b>:

/* Write PC6 pin state */
void Rte_Write_DIO_Autobrakes_State_b(boolean state)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	71fb      	strb	r3, [r7, #7]
	g_Rte_Autobrakes_Status_b = state;
 800b65a:	4a0a      	ldr	r2, [pc, #40]	; (800b684 <Rte_Write_DIO_Autobrakes_State_b+0x34>)
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	7013      	strb	r3, [r2, #0]
	if(TRUE == state)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d105      	bne.n	800b672 <Rte_Write_DIO_Autobrakes_State_b+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800b666:	2200      	movs	r2, #0
 800b668:	2140      	movs	r1, #64	; 0x40
 800b66a:	4807      	ldr	r0, [pc, #28]	; (800b688 <Rte_Write_DIO_Autobrakes_State_b+0x38>)
 800b66c:	f7f7 fe3b 	bl	80032e6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}
}
 800b670:	e004      	b.n	800b67c <Rte_Write_DIO_Autobrakes_State_b+0x2c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800b672:	2201      	movs	r2, #1
 800b674:	2140      	movs	r1, #64	; 0x40
 800b676:	4804      	ldr	r0, [pc, #16]	; (800b688 <Rte_Write_DIO_Autobrakes_State_b+0x38>)
 800b678:	f7f7 fe35 	bl	80032e6 <HAL_GPIO_WritePin>
}
 800b67c:	bf00      	nop
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	2000151f 	.word	0x2000151f
 800b688:	48000800 	.word	0x48000800

0800b68c <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 800b696:	88fb      	ldrh	r3, [r7, #6]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7f6 f983 	bl	80019a4 <Cdd_Servo_RawMove>
}
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <Rte_Read_NvM_Block>:

void Rte_Read_NvM_Block(uint16 blockID, uint8 *data)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	6039      	str	r1, [r7, #0]
 800b6b2:	80fb      	strh	r3, [r7, #6]
	/* TODO:	- remove direct read <- should be done by ReadAll
	 * 			- add block update after write
	 */
	NvM_ReadBlock(blockID, Rte_NvM_RAM_Block[blockID]);
 800b6b4:	88fb      	ldrh	r3, [r7, #6]
 800b6b6:	015b      	lsls	r3, r3, #5
 800b6b8:	4a07      	ldr	r2, [pc, #28]	; (800b6d8 <Rte_Read_NvM_Block+0x30>)
 800b6ba:	441a      	add	r2, r3
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	4611      	mov	r1, r2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff f8d0 	bl	800a866 <NvM_ReadBlock>
	data = &Rte_NvM_RAM_Block[blockID][0u];
 800b6c6:	88fb      	ldrh	r3, [r7, #6]
 800b6c8:	015b      	lsls	r3, r3, #5
 800b6ca:	4a03      	ldr	r2, [pc, #12]	; (800b6d8 <Rte_Read_NvM_Block+0x30>)
 800b6cc:	4413      	add	r3, r2
 800b6ce:	603b      	str	r3, [r7, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20001520 	.word	0x20001520

0800b6dc <Rte_Write_NvM_Block>:

void Rte_Write_NvM_Block(uint16 blockID, uint8 *data)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	6039      	str	r1, [r7, #0]
 800b6e6:	80fb      	strh	r3, [r7, #6]
	NvM_WriteBlock(blockID, data);
 800b6e8:	88fb      	ldrh	r3, [r7, #6]
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff f8ab 	bl	800a848 <NvM_WriteBlock>
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 800b706:	4a04      	ldr	r2, [pc, #16]	; (800b718 <Rte_Write_AN0_Voltage_u16+0x1c>)
 800b708:	88fb      	ldrh	r3, [r7, #6]
 800b70a:	8013      	strh	r3, [r2, #0]
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	bc80      	pop	{r7}
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	2000150a 	.word	0x2000150a

0800b71c <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800b724:	f7ff fe3f 	bl	800b3a6 <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 800b728:	4b05      	ldr	r3, [pc, #20]	; (800b740 <Rte_Read_AN0_Voltage_u16+0x24>)
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800b732:	f7ff fe40 	bl	800b3b6 <Rte_Call_LeaveProtectedSection>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	2000150a 	.word	0x2000150a

0800b744 <__errno>:
 800b744:	4b01      	ldr	r3, [pc, #4]	; (800b74c <__errno+0x8>)
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20000014 	.word	0x20000014

0800b750 <__libc_init_array>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4d0d      	ldr	r5, [pc, #52]	; (800b788 <__libc_init_array+0x38>)
 800b754:	4c0d      	ldr	r4, [pc, #52]	; (800b78c <__libc_init_array+0x3c>)
 800b756:	1b64      	subs	r4, r4, r5
 800b758:	10a4      	asrs	r4, r4, #2
 800b75a:	2600      	movs	r6, #0
 800b75c:	42a6      	cmp	r6, r4
 800b75e:	d109      	bne.n	800b774 <__libc_init_array+0x24>
 800b760:	4d0b      	ldr	r5, [pc, #44]	; (800b790 <__libc_init_array+0x40>)
 800b762:	4c0c      	ldr	r4, [pc, #48]	; (800b794 <__libc_init_array+0x44>)
 800b764:	f000 fc8c 	bl	800c080 <_init>
 800b768:	1b64      	subs	r4, r4, r5
 800b76a:	10a4      	asrs	r4, r4, #2
 800b76c:	2600      	movs	r6, #0
 800b76e:	42a6      	cmp	r6, r4
 800b770:	d105      	bne.n	800b77e <__libc_init_array+0x2e>
 800b772:	bd70      	pop	{r4, r5, r6, pc}
 800b774:	f855 3b04 	ldr.w	r3, [r5], #4
 800b778:	4798      	blx	r3
 800b77a:	3601      	adds	r6, #1
 800b77c:	e7ee      	b.n	800b75c <__libc_init_array+0xc>
 800b77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b782:	4798      	blx	r3
 800b784:	3601      	adds	r6, #1
 800b786:	e7f2      	b.n	800b76e <__libc_init_array+0x1e>
 800b788:	0800c120 	.word	0x0800c120
 800b78c:	0800c120 	.word	0x0800c120
 800b790:	0800c120 	.word	0x0800c120
 800b794:	0800c124 	.word	0x0800c124

0800b798 <memset>:
 800b798:	4402      	add	r2, r0
 800b79a:	4603      	mov	r3, r0
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d100      	bne.n	800b7a2 <memset+0xa>
 800b7a0:	4770      	bx	lr
 800b7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7a6:	e7f9      	b.n	800b79c <memset+0x4>

0800b7a8 <siprintf>:
 800b7a8:	b40e      	push	{r1, r2, r3}
 800b7aa:	b500      	push	{lr}
 800b7ac:	b09c      	sub	sp, #112	; 0x70
 800b7ae:	ab1d      	add	r3, sp, #116	; 0x74
 800b7b0:	9002      	str	r0, [sp, #8]
 800b7b2:	9006      	str	r0, [sp, #24]
 800b7b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7b8:	4809      	ldr	r0, [pc, #36]	; (800b7e0 <siprintf+0x38>)
 800b7ba:	9107      	str	r1, [sp, #28]
 800b7bc:	9104      	str	r1, [sp, #16]
 800b7be:	4909      	ldr	r1, [pc, #36]	; (800b7e4 <siprintf+0x3c>)
 800b7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c4:	9105      	str	r1, [sp, #20]
 800b7c6:	6800      	ldr	r0, [r0, #0]
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	a902      	add	r1, sp, #8
 800b7cc:	f000 f868 	bl	800b8a0 <_svfiprintf_r>
 800b7d0:	9b02      	ldr	r3, [sp, #8]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
 800b7d6:	b01c      	add	sp, #112	; 0x70
 800b7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7dc:	b003      	add	sp, #12
 800b7de:	4770      	bx	lr
 800b7e0:	20000014 	.word	0x20000014
 800b7e4:	ffff0208 	.word	0xffff0208

0800b7e8 <__ssputs_r>:
 800b7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ec:	688e      	ldr	r6, [r1, #8]
 800b7ee:	429e      	cmp	r6, r3
 800b7f0:	4682      	mov	sl, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	4690      	mov	r8, r2
 800b7f6:	461f      	mov	r7, r3
 800b7f8:	d838      	bhi.n	800b86c <__ssputs_r+0x84>
 800b7fa:	898a      	ldrh	r2, [r1, #12]
 800b7fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b800:	d032      	beq.n	800b868 <__ssputs_r+0x80>
 800b802:	6825      	ldr	r5, [r4, #0]
 800b804:	6909      	ldr	r1, [r1, #16]
 800b806:	eba5 0901 	sub.w	r9, r5, r1
 800b80a:	6965      	ldr	r5, [r4, #20]
 800b80c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b814:	3301      	adds	r3, #1
 800b816:	444b      	add	r3, r9
 800b818:	106d      	asrs	r5, r5, #1
 800b81a:	429d      	cmp	r5, r3
 800b81c:	bf38      	it	cc
 800b81e:	461d      	movcc	r5, r3
 800b820:	0553      	lsls	r3, r2, #21
 800b822:	d531      	bpl.n	800b888 <__ssputs_r+0xa0>
 800b824:	4629      	mov	r1, r5
 800b826:	f000 fb61 	bl	800beec <_malloc_r>
 800b82a:	4606      	mov	r6, r0
 800b82c:	b950      	cbnz	r0, 800b844 <__ssputs_r+0x5c>
 800b82e:	230c      	movs	r3, #12
 800b830:	f8ca 3000 	str.w	r3, [sl]
 800b834:	89a3      	ldrh	r3, [r4, #12]
 800b836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b844:	6921      	ldr	r1, [r4, #16]
 800b846:	464a      	mov	r2, r9
 800b848:	f000 fabe 	bl	800bdc8 <memcpy>
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b856:	81a3      	strh	r3, [r4, #12]
 800b858:	6126      	str	r6, [r4, #16]
 800b85a:	6165      	str	r5, [r4, #20]
 800b85c:	444e      	add	r6, r9
 800b85e:	eba5 0509 	sub.w	r5, r5, r9
 800b862:	6026      	str	r6, [r4, #0]
 800b864:	60a5      	str	r5, [r4, #8]
 800b866:	463e      	mov	r6, r7
 800b868:	42be      	cmp	r6, r7
 800b86a:	d900      	bls.n	800b86e <__ssputs_r+0x86>
 800b86c:	463e      	mov	r6, r7
 800b86e:	6820      	ldr	r0, [r4, #0]
 800b870:	4632      	mov	r2, r6
 800b872:	4641      	mov	r1, r8
 800b874:	f000 fab6 	bl	800bde4 <memmove>
 800b878:	68a3      	ldr	r3, [r4, #8]
 800b87a:	1b9b      	subs	r3, r3, r6
 800b87c:	60a3      	str	r3, [r4, #8]
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	4433      	add	r3, r6
 800b882:	6023      	str	r3, [r4, #0]
 800b884:	2000      	movs	r0, #0
 800b886:	e7db      	b.n	800b840 <__ssputs_r+0x58>
 800b888:	462a      	mov	r2, r5
 800b88a:	f000 fba3 	bl	800bfd4 <_realloc_r>
 800b88e:	4606      	mov	r6, r0
 800b890:	2800      	cmp	r0, #0
 800b892:	d1e1      	bne.n	800b858 <__ssputs_r+0x70>
 800b894:	6921      	ldr	r1, [r4, #16]
 800b896:	4650      	mov	r0, sl
 800b898:	f000 fabe 	bl	800be18 <_free_r>
 800b89c:	e7c7      	b.n	800b82e <__ssputs_r+0x46>
	...

0800b8a0 <_svfiprintf_r>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	4698      	mov	r8, r3
 800b8a6:	898b      	ldrh	r3, [r1, #12]
 800b8a8:	061b      	lsls	r3, r3, #24
 800b8aa:	b09d      	sub	sp, #116	; 0x74
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	460d      	mov	r5, r1
 800b8b0:	4614      	mov	r4, r2
 800b8b2:	d50e      	bpl.n	800b8d2 <_svfiprintf_r+0x32>
 800b8b4:	690b      	ldr	r3, [r1, #16]
 800b8b6:	b963      	cbnz	r3, 800b8d2 <_svfiprintf_r+0x32>
 800b8b8:	2140      	movs	r1, #64	; 0x40
 800b8ba:	f000 fb17 	bl	800beec <_malloc_r>
 800b8be:	6028      	str	r0, [r5, #0]
 800b8c0:	6128      	str	r0, [r5, #16]
 800b8c2:	b920      	cbnz	r0, 800b8ce <_svfiprintf_r+0x2e>
 800b8c4:	230c      	movs	r3, #12
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	e0d1      	b.n	800ba72 <_svfiprintf_r+0x1d2>
 800b8ce:	2340      	movs	r3, #64	; 0x40
 800b8d0:	616b      	str	r3, [r5, #20]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d6:	2320      	movs	r3, #32
 800b8d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8e0:	2330      	movs	r3, #48	; 0x30
 800b8e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba8c <_svfiprintf_r+0x1ec>
 800b8e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8ea:	f04f 0901 	mov.w	r9, #1
 800b8ee:	4623      	mov	r3, r4
 800b8f0:	469a      	mov	sl, r3
 800b8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8f6:	b10a      	cbz	r2, 800b8fc <_svfiprintf_r+0x5c>
 800b8f8:	2a25      	cmp	r2, #37	; 0x25
 800b8fa:	d1f9      	bne.n	800b8f0 <_svfiprintf_r+0x50>
 800b8fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b900:	d00b      	beq.n	800b91a <_svfiprintf_r+0x7a>
 800b902:	465b      	mov	r3, fp
 800b904:	4622      	mov	r2, r4
 800b906:	4629      	mov	r1, r5
 800b908:	4638      	mov	r0, r7
 800b90a:	f7ff ff6d 	bl	800b7e8 <__ssputs_r>
 800b90e:	3001      	adds	r0, #1
 800b910:	f000 80aa 	beq.w	800ba68 <_svfiprintf_r+0x1c8>
 800b914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b916:	445a      	add	r2, fp
 800b918:	9209      	str	r2, [sp, #36]	; 0x24
 800b91a:	f89a 3000 	ldrb.w	r3, [sl]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 80a2 	beq.w	800ba68 <_svfiprintf_r+0x1c8>
 800b924:	2300      	movs	r3, #0
 800b926:	f04f 32ff 	mov.w	r2, #4294967295
 800b92a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b92e:	f10a 0a01 	add.w	sl, sl, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	9307      	str	r3, [sp, #28]
 800b936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b93a:	931a      	str	r3, [sp, #104]	; 0x68
 800b93c:	4654      	mov	r4, sl
 800b93e:	2205      	movs	r2, #5
 800b940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b944:	4851      	ldr	r0, [pc, #324]	; (800ba8c <_svfiprintf_r+0x1ec>)
 800b946:	f7f4 fc53 	bl	80001f0 <memchr>
 800b94a:	9a04      	ldr	r2, [sp, #16]
 800b94c:	b9d8      	cbnz	r0, 800b986 <_svfiprintf_r+0xe6>
 800b94e:	06d0      	lsls	r0, r2, #27
 800b950:	bf44      	itt	mi
 800b952:	2320      	movmi	r3, #32
 800b954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b958:	0711      	lsls	r1, r2, #28
 800b95a:	bf44      	itt	mi
 800b95c:	232b      	movmi	r3, #43	; 0x2b
 800b95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b962:	f89a 3000 	ldrb.w	r3, [sl]
 800b966:	2b2a      	cmp	r3, #42	; 0x2a
 800b968:	d015      	beq.n	800b996 <_svfiprintf_r+0xf6>
 800b96a:	9a07      	ldr	r2, [sp, #28]
 800b96c:	4654      	mov	r4, sl
 800b96e:	2000      	movs	r0, #0
 800b970:	f04f 0c0a 	mov.w	ip, #10
 800b974:	4621      	mov	r1, r4
 800b976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b97a:	3b30      	subs	r3, #48	; 0x30
 800b97c:	2b09      	cmp	r3, #9
 800b97e:	d94e      	bls.n	800ba1e <_svfiprintf_r+0x17e>
 800b980:	b1b0      	cbz	r0, 800b9b0 <_svfiprintf_r+0x110>
 800b982:	9207      	str	r2, [sp, #28]
 800b984:	e014      	b.n	800b9b0 <_svfiprintf_r+0x110>
 800b986:	eba0 0308 	sub.w	r3, r0, r8
 800b98a:	fa09 f303 	lsl.w	r3, r9, r3
 800b98e:	4313      	orrs	r3, r2
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	46a2      	mov	sl, r4
 800b994:	e7d2      	b.n	800b93c <_svfiprintf_r+0x9c>
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	1d19      	adds	r1, r3, #4
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	9103      	str	r1, [sp, #12]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bfbb      	ittet	lt
 800b9a2:	425b      	neglt	r3, r3
 800b9a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9a8:	9307      	strge	r3, [sp, #28]
 800b9aa:	9307      	strlt	r3, [sp, #28]
 800b9ac:	bfb8      	it	lt
 800b9ae:	9204      	strlt	r2, [sp, #16]
 800b9b0:	7823      	ldrb	r3, [r4, #0]
 800b9b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9b4:	d10c      	bne.n	800b9d0 <_svfiprintf_r+0x130>
 800b9b6:	7863      	ldrb	r3, [r4, #1]
 800b9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ba:	d135      	bne.n	800ba28 <_svfiprintf_r+0x188>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	1d1a      	adds	r2, r3, #4
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	9203      	str	r2, [sp, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bfb8      	it	lt
 800b9c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9cc:	3402      	adds	r4, #2
 800b9ce:	9305      	str	r3, [sp, #20]
 800b9d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ba90 <_svfiprintf_r+0x1f0>
 800b9d4:	7821      	ldrb	r1, [r4, #0]
 800b9d6:	2203      	movs	r2, #3
 800b9d8:	4650      	mov	r0, sl
 800b9da:	f7f4 fc09 	bl	80001f0 <memchr>
 800b9de:	b140      	cbz	r0, 800b9f2 <_svfiprintf_r+0x152>
 800b9e0:	2340      	movs	r3, #64	; 0x40
 800b9e2:	eba0 000a 	sub.w	r0, r0, sl
 800b9e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ea:	9b04      	ldr	r3, [sp, #16]
 800b9ec:	4303      	orrs	r3, r0
 800b9ee:	3401      	adds	r4, #1
 800b9f0:	9304      	str	r3, [sp, #16]
 800b9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f6:	4827      	ldr	r0, [pc, #156]	; (800ba94 <_svfiprintf_r+0x1f4>)
 800b9f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9fc:	2206      	movs	r2, #6
 800b9fe:	f7f4 fbf7 	bl	80001f0 <memchr>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d038      	beq.n	800ba78 <_svfiprintf_r+0x1d8>
 800ba06:	4b24      	ldr	r3, [pc, #144]	; (800ba98 <_svfiprintf_r+0x1f8>)
 800ba08:	bb1b      	cbnz	r3, 800ba52 <_svfiprintf_r+0x1b2>
 800ba0a:	9b03      	ldr	r3, [sp, #12]
 800ba0c:	3307      	adds	r3, #7
 800ba0e:	f023 0307 	bic.w	r3, r3, #7
 800ba12:	3308      	adds	r3, #8
 800ba14:	9303      	str	r3, [sp, #12]
 800ba16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba18:	4433      	add	r3, r6
 800ba1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1c:	e767      	b.n	800b8ee <_svfiprintf_r+0x4e>
 800ba1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba22:	460c      	mov	r4, r1
 800ba24:	2001      	movs	r0, #1
 800ba26:	e7a5      	b.n	800b974 <_svfiprintf_r+0xd4>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	3401      	adds	r4, #1
 800ba2c:	9305      	str	r3, [sp, #20]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	f04f 0c0a 	mov.w	ip, #10
 800ba34:	4620      	mov	r0, r4
 800ba36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba3a:	3a30      	subs	r2, #48	; 0x30
 800ba3c:	2a09      	cmp	r2, #9
 800ba3e:	d903      	bls.n	800ba48 <_svfiprintf_r+0x1a8>
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d0c5      	beq.n	800b9d0 <_svfiprintf_r+0x130>
 800ba44:	9105      	str	r1, [sp, #20]
 800ba46:	e7c3      	b.n	800b9d0 <_svfiprintf_r+0x130>
 800ba48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e7f0      	b.n	800ba34 <_svfiprintf_r+0x194>
 800ba52:	ab03      	add	r3, sp, #12
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	462a      	mov	r2, r5
 800ba58:	4b10      	ldr	r3, [pc, #64]	; (800ba9c <_svfiprintf_r+0x1fc>)
 800ba5a:	a904      	add	r1, sp, #16
 800ba5c:	4638      	mov	r0, r7
 800ba5e:	f3af 8000 	nop.w
 800ba62:	1c42      	adds	r2, r0, #1
 800ba64:	4606      	mov	r6, r0
 800ba66:	d1d6      	bne.n	800ba16 <_svfiprintf_r+0x176>
 800ba68:	89ab      	ldrh	r3, [r5, #12]
 800ba6a:	065b      	lsls	r3, r3, #25
 800ba6c:	f53f af2c 	bmi.w	800b8c8 <_svfiprintf_r+0x28>
 800ba70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba72:	b01d      	add	sp, #116	; 0x74
 800ba74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba78:	ab03      	add	r3, sp, #12
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	462a      	mov	r2, r5
 800ba7e:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <_svfiprintf_r+0x1fc>)
 800ba80:	a904      	add	r1, sp, #16
 800ba82:	4638      	mov	r0, r7
 800ba84:	f000 f87a 	bl	800bb7c <_printf_i>
 800ba88:	e7eb      	b.n	800ba62 <_svfiprintf_r+0x1c2>
 800ba8a:	bf00      	nop
 800ba8c:	0800c0ec 	.word	0x0800c0ec
 800ba90:	0800c0f2 	.word	0x0800c0f2
 800ba94:	0800c0f6 	.word	0x0800c0f6
 800ba98:	00000000 	.word	0x00000000
 800ba9c:	0800b7e9 	.word	0x0800b7e9

0800baa0 <_printf_common>:
 800baa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa4:	4616      	mov	r6, r2
 800baa6:	4699      	mov	r9, r3
 800baa8:	688a      	ldr	r2, [r1, #8]
 800baaa:	690b      	ldr	r3, [r1, #16]
 800baac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bab0:	4293      	cmp	r3, r2
 800bab2:	bfb8      	it	lt
 800bab4:	4613      	movlt	r3, r2
 800bab6:	6033      	str	r3, [r6, #0]
 800bab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800babc:	4607      	mov	r7, r0
 800babe:	460c      	mov	r4, r1
 800bac0:	b10a      	cbz	r2, 800bac6 <_printf_common+0x26>
 800bac2:	3301      	adds	r3, #1
 800bac4:	6033      	str	r3, [r6, #0]
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	0699      	lsls	r1, r3, #26
 800baca:	bf42      	ittt	mi
 800bacc:	6833      	ldrmi	r3, [r6, #0]
 800bace:	3302      	addmi	r3, #2
 800bad0:	6033      	strmi	r3, [r6, #0]
 800bad2:	6825      	ldr	r5, [r4, #0]
 800bad4:	f015 0506 	ands.w	r5, r5, #6
 800bad8:	d106      	bne.n	800bae8 <_printf_common+0x48>
 800bada:	f104 0a19 	add.w	sl, r4, #25
 800bade:	68e3      	ldr	r3, [r4, #12]
 800bae0:	6832      	ldr	r2, [r6, #0]
 800bae2:	1a9b      	subs	r3, r3, r2
 800bae4:	42ab      	cmp	r3, r5
 800bae6:	dc26      	bgt.n	800bb36 <_printf_common+0x96>
 800bae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800baec:	1e13      	subs	r3, r2, #0
 800baee:	6822      	ldr	r2, [r4, #0]
 800baf0:	bf18      	it	ne
 800baf2:	2301      	movne	r3, #1
 800baf4:	0692      	lsls	r2, r2, #26
 800baf6:	d42b      	bmi.n	800bb50 <_printf_common+0xb0>
 800baf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bafc:	4649      	mov	r1, r9
 800bafe:	4638      	mov	r0, r7
 800bb00:	47c0      	blx	r8
 800bb02:	3001      	adds	r0, #1
 800bb04:	d01e      	beq.n	800bb44 <_printf_common+0xa4>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	68e5      	ldr	r5, [r4, #12]
 800bb0a:	6832      	ldr	r2, [r6, #0]
 800bb0c:	f003 0306 	and.w	r3, r3, #6
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	bf08      	it	eq
 800bb14:	1aad      	subeq	r5, r5, r2
 800bb16:	68a3      	ldr	r3, [r4, #8]
 800bb18:	6922      	ldr	r2, [r4, #16]
 800bb1a:	bf0c      	ite	eq
 800bb1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb20:	2500      	movne	r5, #0
 800bb22:	4293      	cmp	r3, r2
 800bb24:	bfc4      	itt	gt
 800bb26:	1a9b      	subgt	r3, r3, r2
 800bb28:	18ed      	addgt	r5, r5, r3
 800bb2a:	2600      	movs	r6, #0
 800bb2c:	341a      	adds	r4, #26
 800bb2e:	42b5      	cmp	r5, r6
 800bb30:	d11a      	bne.n	800bb68 <_printf_common+0xc8>
 800bb32:	2000      	movs	r0, #0
 800bb34:	e008      	b.n	800bb48 <_printf_common+0xa8>
 800bb36:	2301      	movs	r3, #1
 800bb38:	4652      	mov	r2, sl
 800bb3a:	4649      	mov	r1, r9
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	47c0      	blx	r8
 800bb40:	3001      	adds	r0, #1
 800bb42:	d103      	bne.n	800bb4c <_printf_common+0xac>
 800bb44:	f04f 30ff 	mov.w	r0, #4294967295
 800bb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb4c:	3501      	adds	r5, #1
 800bb4e:	e7c6      	b.n	800bade <_printf_common+0x3e>
 800bb50:	18e1      	adds	r1, r4, r3
 800bb52:	1c5a      	adds	r2, r3, #1
 800bb54:	2030      	movs	r0, #48	; 0x30
 800bb56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb5a:	4422      	add	r2, r4
 800bb5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb64:	3302      	adds	r3, #2
 800bb66:	e7c7      	b.n	800baf8 <_printf_common+0x58>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	4622      	mov	r2, r4
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4638      	mov	r0, r7
 800bb70:	47c0      	blx	r8
 800bb72:	3001      	adds	r0, #1
 800bb74:	d0e6      	beq.n	800bb44 <_printf_common+0xa4>
 800bb76:	3601      	adds	r6, #1
 800bb78:	e7d9      	b.n	800bb2e <_printf_common+0x8e>
	...

0800bb7c <_printf_i>:
 800bb7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb80:	7e0f      	ldrb	r7, [r1, #24]
 800bb82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb84:	2f78      	cmp	r7, #120	; 0x78
 800bb86:	4691      	mov	r9, r2
 800bb88:	4680      	mov	r8, r0
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	469a      	mov	sl, r3
 800bb8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb92:	d807      	bhi.n	800bba4 <_printf_i+0x28>
 800bb94:	2f62      	cmp	r7, #98	; 0x62
 800bb96:	d80a      	bhi.n	800bbae <_printf_i+0x32>
 800bb98:	2f00      	cmp	r7, #0
 800bb9a:	f000 80d8 	beq.w	800bd4e <_printf_i+0x1d2>
 800bb9e:	2f58      	cmp	r7, #88	; 0x58
 800bba0:	f000 80a3 	beq.w	800bcea <_printf_i+0x16e>
 800bba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbac:	e03a      	b.n	800bc24 <_printf_i+0xa8>
 800bbae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbb2:	2b15      	cmp	r3, #21
 800bbb4:	d8f6      	bhi.n	800bba4 <_printf_i+0x28>
 800bbb6:	a101      	add	r1, pc, #4	; (adr r1, 800bbbc <_printf_i+0x40>)
 800bbb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbbc:	0800bc15 	.word	0x0800bc15
 800bbc0:	0800bc29 	.word	0x0800bc29
 800bbc4:	0800bba5 	.word	0x0800bba5
 800bbc8:	0800bba5 	.word	0x0800bba5
 800bbcc:	0800bba5 	.word	0x0800bba5
 800bbd0:	0800bba5 	.word	0x0800bba5
 800bbd4:	0800bc29 	.word	0x0800bc29
 800bbd8:	0800bba5 	.word	0x0800bba5
 800bbdc:	0800bba5 	.word	0x0800bba5
 800bbe0:	0800bba5 	.word	0x0800bba5
 800bbe4:	0800bba5 	.word	0x0800bba5
 800bbe8:	0800bd35 	.word	0x0800bd35
 800bbec:	0800bc59 	.word	0x0800bc59
 800bbf0:	0800bd17 	.word	0x0800bd17
 800bbf4:	0800bba5 	.word	0x0800bba5
 800bbf8:	0800bba5 	.word	0x0800bba5
 800bbfc:	0800bd57 	.word	0x0800bd57
 800bc00:	0800bba5 	.word	0x0800bba5
 800bc04:	0800bc59 	.word	0x0800bc59
 800bc08:	0800bba5 	.word	0x0800bba5
 800bc0c:	0800bba5 	.word	0x0800bba5
 800bc10:	0800bd1f 	.word	0x0800bd1f
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	1d1a      	adds	r2, r3, #4
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	602a      	str	r2, [r5, #0]
 800bc1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc24:	2301      	movs	r3, #1
 800bc26:	e0a3      	b.n	800bd70 <_printf_i+0x1f4>
 800bc28:	6820      	ldr	r0, [r4, #0]
 800bc2a:	6829      	ldr	r1, [r5, #0]
 800bc2c:	0606      	lsls	r6, r0, #24
 800bc2e:	f101 0304 	add.w	r3, r1, #4
 800bc32:	d50a      	bpl.n	800bc4a <_printf_i+0xce>
 800bc34:	680e      	ldr	r6, [r1, #0]
 800bc36:	602b      	str	r3, [r5, #0]
 800bc38:	2e00      	cmp	r6, #0
 800bc3a:	da03      	bge.n	800bc44 <_printf_i+0xc8>
 800bc3c:	232d      	movs	r3, #45	; 0x2d
 800bc3e:	4276      	negs	r6, r6
 800bc40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc44:	485e      	ldr	r0, [pc, #376]	; (800bdc0 <_printf_i+0x244>)
 800bc46:	230a      	movs	r3, #10
 800bc48:	e019      	b.n	800bc7e <_printf_i+0x102>
 800bc4a:	680e      	ldr	r6, [r1, #0]
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc52:	bf18      	it	ne
 800bc54:	b236      	sxthne	r6, r6
 800bc56:	e7ef      	b.n	800bc38 <_printf_i+0xbc>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	6820      	ldr	r0, [r4, #0]
 800bc5c:	1d19      	adds	r1, r3, #4
 800bc5e:	6029      	str	r1, [r5, #0]
 800bc60:	0601      	lsls	r1, r0, #24
 800bc62:	d501      	bpl.n	800bc68 <_printf_i+0xec>
 800bc64:	681e      	ldr	r6, [r3, #0]
 800bc66:	e002      	b.n	800bc6e <_printf_i+0xf2>
 800bc68:	0646      	lsls	r6, r0, #25
 800bc6a:	d5fb      	bpl.n	800bc64 <_printf_i+0xe8>
 800bc6c:	881e      	ldrh	r6, [r3, #0]
 800bc6e:	4854      	ldr	r0, [pc, #336]	; (800bdc0 <_printf_i+0x244>)
 800bc70:	2f6f      	cmp	r7, #111	; 0x6f
 800bc72:	bf0c      	ite	eq
 800bc74:	2308      	moveq	r3, #8
 800bc76:	230a      	movne	r3, #10
 800bc78:	2100      	movs	r1, #0
 800bc7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc7e:	6865      	ldr	r5, [r4, #4]
 800bc80:	60a5      	str	r5, [r4, #8]
 800bc82:	2d00      	cmp	r5, #0
 800bc84:	bfa2      	ittt	ge
 800bc86:	6821      	ldrge	r1, [r4, #0]
 800bc88:	f021 0104 	bicge.w	r1, r1, #4
 800bc8c:	6021      	strge	r1, [r4, #0]
 800bc8e:	b90e      	cbnz	r6, 800bc94 <_printf_i+0x118>
 800bc90:	2d00      	cmp	r5, #0
 800bc92:	d04d      	beq.n	800bd30 <_printf_i+0x1b4>
 800bc94:	4615      	mov	r5, r2
 800bc96:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc9a:	fb03 6711 	mls	r7, r3, r1, r6
 800bc9e:	5dc7      	ldrb	r7, [r0, r7]
 800bca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bca4:	4637      	mov	r7, r6
 800bca6:	42bb      	cmp	r3, r7
 800bca8:	460e      	mov	r6, r1
 800bcaa:	d9f4      	bls.n	800bc96 <_printf_i+0x11a>
 800bcac:	2b08      	cmp	r3, #8
 800bcae:	d10b      	bne.n	800bcc8 <_printf_i+0x14c>
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	07de      	lsls	r6, r3, #31
 800bcb4:	d508      	bpl.n	800bcc8 <_printf_i+0x14c>
 800bcb6:	6923      	ldr	r3, [r4, #16]
 800bcb8:	6861      	ldr	r1, [r4, #4]
 800bcba:	4299      	cmp	r1, r3
 800bcbc:	bfde      	ittt	le
 800bcbe:	2330      	movle	r3, #48	; 0x30
 800bcc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcc8:	1b52      	subs	r2, r2, r5
 800bcca:	6122      	str	r2, [r4, #16]
 800bccc:	f8cd a000 	str.w	sl, [sp]
 800bcd0:	464b      	mov	r3, r9
 800bcd2:	aa03      	add	r2, sp, #12
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	f7ff fee2 	bl	800baa0 <_printf_common>
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d14c      	bne.n	800bd7a <_printf_i+0x1fe>
 800bce0:	f04f 30ff 	mov.w	r0, #4294967295
 800bce4:	b004      	add	sp, #16
 800bce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcea:	4835      	ldr	r0, [pc, #212]	; (800bdc0 <_printf_i+0x244>)
 800bcec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcf0:	6829      	ldr	r1, [r5, #0]
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcf8:	6029      	str	r1, [r5, #0]
 800bcfa:	061d      	lsls	r5, r3, #24
 800bcfc:	d514      	bpl.n	800bd28 <_printf_i+0x1ac>
 800bcfe:	07df      	lsls	r7, r3, #31
 800bd00:	bf44      	itt	mi
 800bd02:	f043 0320 	orrmi.w	r3, r3, #32
 800bd06:	6023      	strmi	r3, [r4, #0]
 800bd08:	b91e      	cbnz	r6, 800bd12 <_printf_i+0x196>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	f023 0320 	bic.w	r3, r3, #32
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	2310      	movs	r3, #16
 800bd14:	e7b0      	b.n	800bc78 <_printf_i+0xfc>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	f043 0320 	orr.w	r3, r3, #32
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	2378      	movs	r3, #120	; 0x78
 800bd20:	4828      	ldr	r0, [pc, #160]	; (800bdc4 <_printf_i+0x248>)
 800bd22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd26:	e7e3      	b.n	800bcf0 <_printf_i+0x174>
 800bd28:	0659      	lsls	r1, r3, #25
 800bd2a:	bf48      	it	mi
 800bd2c:	b2b6      	uxthmi	r6, r6
 800bd2e:	e7e6      	b.n	800bcfe <_printf_i+0x182>
 800bd30:	4615      	mov	r5, r2
 800bd32:	e7bb      	b.n	800bcac <_printf_i+0x130>
 800bd34:	682b      	ldr	r3, [r5, #0]
 800bd36:	6826      	ldr	r6, [r4, #0]
 800bd38:	6961      	ldr	r1, [r4, #20]
 800bd3a:	1d18      	adds	r0, r3, #4
 800bd3c:	6028      	str	r0, [r5, #0]
 800bd3e:	0635      	lsls	r5, r6, #24
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	d501      	bpl.n	800bd48 <_printf_i+0x1cc>
 800bd44:	6019      	str	r1, [r3, #0]
 800bd46:	e002      	b.n	800bd4e <_printf_i+0x1d2>
 800bd48:	0670      	lsls	r0, r6, #25
 800bd4a:	d5fb      	bpl.n	800bd44 <_printf_i+0x1c8>
 800bd4c:	8019      	strh	r1, [r3, #0]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	6123      	str	r3, [r4, #16]
 800bd52:	4615      	mov	r5, r2
 800bd54:	e7ba      	b.n	800bccc <_printf_i+0x150>
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	1d1a      	adds	r2, r3, #4
 800bd5a:	602a      	str	r2, [r5, #0]
 800bd5c:	681d      	ldr	r5, [r3, #0]
 800bd5e:	6862      	ldr	r2, [r4, #4]
 800bd60:	2100      	movs	r1, #0
 800bd62:	4628      	mov	r0, r5
 800bd64:	f7f4 fa44 	bl	80001f0 <memchr>
 800bd68:	b108      	cbz	r0, 800bd6e <_printf_i+0x1f2>
 800bd6a:	1b40      	subs	r0, r0, r5
 800bd6c:	6060      	str	r0, [r4, #4]
 800bd6e:	6863      	ldr	r3, [r4, #4]
 800bd70:	6123      	str	r3, [r4, #16]
 800bd72:	2300      	movs	r3, #0
 800bd74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd78:	e7a8      	b.n	800bccc <_printf_i+0x150>
 800bd7a:	6923      	ldr	r3, [r4, #16]
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	4649      	mov	r1, r9
 800bd80:	4640      	mov	r0, r8
 800bd82:	47d0      	blx	sl
 800bd84:	3001      	adds	r0, #1
 800bd86:	d0ab      	beq.n	800bce0 <_printf_i+0x164>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	079b      	lsls	r3, r3, #30
 800bd8c:	d413      	bmi.n	800bdb6 <_printf_i+0x23a>
 800bd8e:	68e0      	ldr	r0, [r4, #12]
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	4298      	cmp	r0, r3
 800bd94:	bfb8      	it	lt
 800bd96:	4618      	movlt	r0, r3
 800bd98:	e7a4      	b.n	800bce4 <_printf_i+0x168>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4640      	mov	r0, r8
 800bda2:	47d0      	blx	sl
 800bda4:	3001      	adds	r0, #1
 800bda6:	d09b      	beq.n	800bce0 <_printf_i+0x164>
 800bda8:	3501      	adds	r5, #1
 800bdaa:	68e3      	ldr	r3, [r4, #12]
 800bdac:	9903      	ldr	r1, [sp, #12]
 800bdae:	1a5b      	subs	r3, r3, r1
 800bdb0:	42ab      	cmp	r3, r5
 800bdb2:	dcf2      	bgt.n	800bd9a <_printf_i+0x21e>
 800bdb4:	e7eb      	b.n	800bd8e <_printf_i+0x212>
 800bdb6:	2500      	movs	r5, #0
 800bdb8:	f104 0619 	add.w	r6, r4, #25
 800bdbc:	e7f5      	b.n	800bdaa <_printf_i+0x22e>
 800bdbe:	bf00      	nop
 800bdc0:	0800c0fd 	.word	0x0800c0fd
 800bdc4:	0800c10e 	.word	0x0800c10e

0800bdc8 <memcpy>:
 800bdc8:	440a      	add	r2, r1
 800bdca:	4291      	cmp	r1, r2
 800bdcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdd0:	d100      	bne.n	800bdd4 <memcpy+0xc>
 800bdd2:	4770      	bx	lr
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdde:	4291      	cmp	r1, r2
 800bde0:	d1f9      	bne.n	800bdd6 <memcpy+0xe>
 800bde2:	bd10      	pop	{r4, pc}

0800bde4 <memmove>:
 800bde4:	4288      	cmp	r0, r1
 800bde6:	b510      	push	{r4, lr}
 800bde8:	eb01 0402 	add.w	r4, r1, r2
 800bdec:	d902      	bls.n	800bdf4 <memmove+0x10>
 800bdee:	4284      	cmp	r4, r0
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	d807      	bhi.n	800be04 <memmove+0x20>
 800bdf4:	1e43      	subs	r3, r0, #1
 800bdf6:	42a1      	cmp	r1, r4
 800bdf8:	d008      	beq.n	800be0c <memmove+0x28>
 800bdfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be02:	e7f8      	b.n	800bdf6 <memmove+0x12>
 800be04:	4402      	add	r2, r0
 800be06:	4601      	mov	r1, r0
 800be08:	428a      	cmp	r2, r1
 800be0a:	d100      	bne.n	800be0e <memmove+0x2a>
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be16:	e7f7      	b.n	800be08 <memmove+0x24>

0800be18 <_free_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4605      	mov	r5, r0
 800be1c:	2900      	cmp	r1, #0
 800be1e:	d041      	beq.n	800bea4 <_free_r+0x8c>
 800be20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be24:	1f0c      	subs	r4, r1, #4
 800be26:	2b00      	cmp	r3, #0
 800be28:	bfb8      	it	lt
 800be2a:	18e4      	addlt	r4, r4, r3
 800be2c:	f000 f912 	bl	800c054 <__malloc_lock>
 800be30:	4a1d      	ldr	r2, [pc, #116]	; (800bea8 <_free_r+0x90>)
 800be32:	6813      	ldr	r3, [r2, #0]
 800be34:	b933      	cbnz	r3, 800be44 <_free_r+0x2c>
 800be36:	6063      	str	r3, [r4, #4]
 800be38:	6014      	str	r4, [r2, #0]
 800be3a:	4628      	mov	r0, r5
 800be3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be40:	f000 b90e 	b.w	800c060 <__malloc_unlock>
 800be44:	42a3      	cmp	r3, r4
 800be46:	d908      	bls.n	800be5a <_free_r+0x42>
 800be48:	6820      	ldr	r0, [r4, #0]
 800be4a:	1821      	adds	r1, r4, r0
 800be4c:	428b      	cmp	r3, r1
 800be4e:	bf01      	itttt	eq
 800be50:	6819      	ldreq	r1, [r3, #0]
 800be52:	685b      	ldreq	r3, [r3, #4]
 800be54:	1809      	addeq	r1, r1, r0
 800be56:	6021      	streq	r1, [r4, #0]
 800be58:	e7ed      	b.n	800be36 <_free_r+0x1e>
 800be5a:	461a      	mov	r2, r3
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	b10b      	cbz	r3, 800be64 <_free_r+0x4c>
 800be60:	42a3      	cmp	r3, r4
 800be62:	d9fa      	bls.n	800be5a <_free_r+0x42>
 800be64:	6811      	ldr	r1, [r2, #0]
 800be66:	1850      	adds	r0, r2, r1
 800be68:	42a0      	cmp	r0, r4
 800be6a:	d10b      	bne.n	800be84 <_free_r+0x6c>
 800be6c:	6820      	ldr	r0, [r4, #0]
 800be6e:	4401      	add	r1, r0
 800be70:	1850      	adds	r0, r2, r1
 800be72:	4283      	cmp	r3, r0
 800be74:	6011      	str	r1, [r2, #0]
 800be76:	d1e0      	bne.n	800be3a <_free_r+0x22>
 800be78:	6818      	ldr	r0, [r3, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	6053      	str	r3, [r2, #4]
 800be7e:	4401      	add	r1, r0
 800be80:	6011      	str	r1, [r2, #0]
 800be82:	e7da      	b.n	800be3a <_free_r+0x22>
 800be84:	d902      	bls.n	800be8c <_free_r+0x74>
 800be86:	230c      	movs	r3, #12
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	e7d6      	b.n	800be3a <_free_r+0x22>
 800be8c:	6820      	ldr	r0, [r4, #0]
 800be8e:	1821      	adds	r1, r4, r0
 800be90:	428b      	cmp	r3, r1
 800be92:	bf04      	itt	eq
 800be94:	6819      	ldreq	r1, [r3, #0]
 800be96:	685b      	ldreq	r3, [r3, #4]
 800be98:	6063      	str	r3, [r4, #4]
 800be9a:	bf04      	itt	eq
 800be9c:	1809      	addeq	r1, r1, r0
 800be9e:	6021      	streq	r1, [r4, #0]
 800bea0:	6054      	str	r4, [r2, #4]
 800bea2:	e7ca      	b.n	800be3a <_free_r+0x22>
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	bf00      	nop
 800bea8:	200015e0 	.word	0x200015e0

0800beac <sbrk_aligned>:
 800beac:	b570      	push	{r4, r5, r6, lr}
 800beae:	4e0e      	ldr	r6, [pc, #56]	; (800bee8 <sbrk_aligned+0x3c>)
 800beb0:	460c      	mov	r4, r1
 800beb2:	6831      	ldr	r1, [r6, #0]
 800beb4:	4605      	mov	r5, r0
 800beb6:	b911      	cbnz	r1, 800bebe <sbrk_aligned+0x12>
 800beb8:	f000 f8bc 	bl	800c034 <_sbrk_r>
 800bebc:	6030      	str	r0, [r6, #0]
 800bebe:	4621      	mov	r1, r4
 800bec0:	4628      	mov	r0, r5
 800bec2:	f000 f8b7 	bl	800c034 <_sbrk_r>
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	d00a      	beq.n	800bee0 <sbrk_aligned+0x34>
 800beca:	1cc4      	adds	r4, r0, #3
 800becc:	f024 0403 	bic.w	r4, r4, #3
 800bed0:	42a0      	cmp	r0, r4
 800bed2:	d007      	beq.n	800bee4 <sbrk_aligned+0x38>
 800bed4:	1a21      	subs	r1, r4, r0
 800bed6:	4628      	mov	r0, r5
 800bed8:	f000 f8ac 	bl	800c034 <_sbrk_r>
 800bedc:	3001      	adds	r0, #1
 800bede:	d101      	bne.n	800bee4 <sbrk_aligned+0x38>
 800bee0:	f04f 34ff 	mov.w	r4, #4294967295
 800bee4:	4620      	mov	r0, r4
 800bee6:	bd70      	pop	{r4, r5, r6, pc}
 800bee8:	200015e4 	.word	0x200015e4

0800beec <_malloc_r>:
 800beec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef0:	1ccd      	adds	r5, r1, #3
 800bef2:	f025 0503 	bic.w	r5, r5, #3
 800bef6:	3508      	adds	r5, #8
 800bef8:	2d0c      	cmp	r5, #12
 800befa:	bf38      	it	cc
 800befc:	250c      	movcc	r5, #12
 800befe:	2d00      	cmp	r5, #0
 800bf00:	4607      	mov	r7, r0
 800bf02:	db01      	blt.n	800bf08 <_malloc_r+0x1c>
 800bf04:	42a9      	cmp	r1, r5
 800bf06:	d905      	bls.n	800bf14 <_malloc_r+0x28>
 800bf08:	230c      	movs	r3, #12
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	2600      	movs	r6, #0
 800bf0e:	4630      	mov	r0, r6
 800bf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf14:	4e2e      	ldr	r6, [pc, #184]	; (800bfd0 <_malloc_r+0xe4>)
 800bf16:	f000 f89d 	bl	800c054 <__malloc_lock>
 800bf1a:	6833      	ldr	r3, [r6, #0]
 800bf1c:	461c      	mov	r4, r3
 800bf1e:	bb34      	cbnz	r4, 800bf6e <_malloc_r+0x82>
 800bf20:	4629      	mov	r1, r5
 800bf22:	4638      	mov	r0, r7
 800bf24:	f7ff ffc2 	bl	800beac <sbrk_aligned>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	d14d      	bne.n	800bfca <_malloc_r+0xde>
 800bf2e:	6834      	ldr	r4, [r6, #0]
 800bf30:	4626      	mov	r6, r4
 800bf32:	2e00      	cmp	r6, #0
 800bf34:	d140      	bne.n	800bfb8 <_malloc_r+0xcc>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	4631      	mov	r1, r6
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	eb04 0803 	add.w	r8, r4, r3
 800bf40:	f000 f878 	bl	800c034 <_sbrk_r>
 800bf44:	4580      	cmp	r8, r0
 800bf46:	d13a      	bne.n	800bfbe <_malloc_r+0xd2>
 800bf48:	6821      	ldr	r1, [r4, #0]
 800bf4a:	3503      	adds	r5, #3
 800bf4c:	1a6d      	subs	r5, r5, r1
 800bf4e:	f025 0503 	bic.w	r5, r5, #3
 800bf52:	3508      	adds	r5, #8
 800bf54:	2d0c      	cmp	r5, #12
 800bf56:	bf38      	it	cc
 800bf58:	250c      	movcc	r5, #12
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	f7ff ffa5 	bl	800beac <sbrk_aligned>
 800bf62:	3001      	adds	r0, #1
 800bf64:	d02b      	beq.n	800bfbe <_malloc_r+0xd2>
 800bf66:	6823      	ldr	r3, [r4, #0]
 800bf68:	442b      	add	r3, r5
 800bf6a:	6023      	str	r3, [r4, #0]
 800bf6c:	e00e      	b.n	800bf8c <_malloc_r+0xa0>
 800bf6e:	6822      	ldr	r2, [r4, #0]
 800bf70:	1b52      	subs	r2, r2, r5
 800bf72:	d41e      	bmi.n	800bfb2 <_malloc_r+0xc6>
 800bf74:	2a0b      	cmp	r2, #11
 800bf76:	d916      	bls.n	800bfa6 <_malloc_r+0xba>
 800bf78:	1961      	adds	r1, r4, r5
 800bf7a:	42a3      	cmp	r3, r4
 800bf7c:	6025      	str	r5, [r4, #0]
 800bf7e:	bf18      	it	ne
 800bf80:	6059      	strne	r1, [r3, #4]
 800bf82:	6863      	ldr	r3, [r4, #4]
 800bf84:	bf08      	it	eq
 800bf86:	6031      	streq	r1, [r6, #0]
 800bf88:	5162      	str	r2, [r4, r5]
 800bf8a:	604b      	str	r3, [r1, #4]
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	f104 060b 	add.w	r6, r4, #11
 800bf92:	f000 f865 	bl	800c060 <__malloc_unlock>
 800bf96:	f026 0607 	bic.w	r6, r6, #7
 800bf9a:	1d23      	adds	r3, r4, #4
 800bf9c:	1af2      	subs	r2, r6, r3
 800bf9e:	d0b6      	beq.n	800bf0e <_malloc_r+0x22>
 800bfa0:	1b9b      	subs	r3, r3, r6
 800bfa2:	50a3      	str	r3, [r4, r2]
 800bfa4:	e7b3      	b.n	800bf0e <_malloc_r+0x22>
 800bfa6:	6862      	ldr	r2, [r4, #4]
 800bfa8:	42a3      	cmp	r3, r4
 800bfaa:	bf0c      	ite	eq
 800bfac:	6032      	streq	r2, [r6, #0]
 800bfae:	605a      	strne	r2, [r3, #4]
 800bfb0:	e7ec      	b.n	800bf8c <_malloc_r+0xa0>
 800bfb2:	4623      	mov	r3, r4
 800bfb4:	6864      	ldr	r4, [r4, #4]
 800bfb6:	e7b2      	b.n	800bf1e <_malloc_r+0x32>
 800bfb8:	4634      	mov	r4, r6
 800bfba:	6876      	ldr	r6, [r6, #4]
 800bfbc:	e7b9      	b.n	800bf32 <_malloc_r+0x46>
 800bfbe:	230c      	movs	r3, #12
 800bfc0:	603b      	str	r3, [r7, #0]
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	f000 f84c 	bl	800c060 <__malloc_unlock>
 800bfc8:	e7a1      	b.n	800bf0e <_malloc_r+0x22>
 800bfca:	6025      	str	r5, [r4, #0]
 800bfcc:	e7de      	b.n	800bf8c <_malloc_r+0xa0>
 800bfce:	bf00      	nop
 800bfd0:	200015e0 	.word	0x200015e0

0800bfd4 <_realloc_r>:
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4614      	mov	r4, r2
 800bfdc:	460e      	mov	r6, r1
 800bfde:	b921      	cbnz	r1, 800bfea <_realloc_r+0x16>
 800bfe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	f7ff bf81 	b.w	800beec <_malloc_r>
 800bfea:	b92a      	cbnz	r2, 800bff8 <_realloc_r+0x24>
 800bfec:	f7ff ff14 	bl	800be18 <_free_r>
 800bff0:	4625      	mov	r5, r4
 800bff2:	4628      	mov	r0, r5
 800bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff8:	f000 f838 	bl	800c06c <_malloc_usable_size_r>
 800bffc:	4284      	cmp	r4, r0
 800bffe:	4607      	mov	r7, r0
 800c000:	d802      	bhi.n	800c008 <_realloc_r+0x34>
 800c002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c006:	d812      	bhi.n	800c02e <_realloc_r+0x5a>
 800c008:	4621      	mov	r1, r4
 800c00a:	4640      	mov	r0, r8
 800c00c:	f7ff ff6e 	bl	800beec <_malloc_r>
 800c010:	4605      	mov	r5, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d0ed      	beq.n	800bff2 <_realloc_r+0x1e>
 800c016:	42bc      	cmp	r4, r7
 800c018:	4622      	mov	r2, r4
 800c01a:	4631      	mov	r1, r6
 800c01c:	bf28      	it	cs
 800c01e:	463a      	movcs	r2, r7
 800c020:	f7ff fed2 	bl	800bdc8 <memcpy>
 800c024:	4631      	mov	r1, r6
 800c026:	4640      	mov	r0, r8
 800c028:	f7ff fef6 	bl	800be18 <_free_r>
 800c02c:	e7e1      	b.n	800bff2 <_realloc_r+0x1e>
 800c02e:	4635      	mov	r5, r6
 800c030:	e7df      	b.n	800bff2 <_realloc_r+0x1e>
	...

0800c034 <_sbrk_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	4d06      	ldr	r5, [pc, #24]	; (800c050 <_sbrk_r+0x1c>)
 800c038:	2300      	movs	r3, #0
 800c03a:	4604      	mov	r4, r0
 800c03c:	4608      	mov	r0, r1
 800c03e:	602b      	str	r3, [r5, #0]
 800c040:	f7fd f904 	bl	800924c <_sbrk>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	d102      	bne.n	800c04e <_sbrk_r+0x1a>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	b103      	cbz	r3, 800c04e <_sbrk_r+0x1a>
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	200015e8 	.word	0x200015e8

0800c054 <__malloc_lock>:
 800c054:	4801      	ldr	r0, [pc, #4]	; (800c05c <__malloc_lock+0x8>)
 800c056:	f000 b811 	b.w	800c07c <__retarget_lock_acquire_recursive>
 800c05a:	bf00      	nop
 800c05c:	200015ec 	.word	0x200015ec

0800c060 <__malloc_unlock>:
 800c060:	4801      	ldr	r0, [pc, #4]	; (800c068 <__malloc_unlock+0x8>)
 800c062:	f000 b80c 	b.w	800c07e <__retarget_lock_release_recursive>
 800c066:	bf00      	nop
 800c068:	200015ec 	.word	0x200015ec

0800c06c <_malloc_usable_size_r>:
 800c06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c070:	1f18      	subs	r0, r3, #4
 800c072:	2b00      	cmp	r3, #0
 800c074:	bfbc      	itt	lt
 800c076:	580b      	ldrlt	r3, [r1, r0]
 800c078:	18c0      	addlt	r0, r0, r3
 800c07a:	4770      	bx	lr

0800c07c <__retarget_lock_acquire_recursive>:
 800c07c:	4770      	bx	lr

0800c07e <__retarget_lock_release_recursive>:
 800c07e:	4770      	bx	lr

0800c080 <_init>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr

0800c08c <_fini>:
 800c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08e:	bf00      	nop
 800c090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c092:	bc08      	pop	{r3}
 800c094:	469e      	mov	lr, r3
 800c096:	4770      	bx	lr
