
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800c768  0800c768  0001c768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f4  0800c7f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800c7f4  0800c7f4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c7f4  0800c7f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f4  0800c7f4  0001c7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7f8  0800c7f8  0001c7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800c7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000015a0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200015b4  200015b4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ce26  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000437c  00000000  00000000  0003cea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001aa0  00000000  00000000  00041228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001477  00000000  00000000  00042cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000251c0  00000000  00000000  0004413f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002d463  00000000  00000000  000692ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d906f  00000000  00000000  00096762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006d14  00000000  00000000  0016f7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001764e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c750 	.word	0x0800c750

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	0800c750 	.word	0x0800c750

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_frsub>:
 80009b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b8:	e002      	b.n	80009c0 <__addsf3>
 80009ba:	bf00      	nop

080009bc <__aeabi_fsub>:
 80009bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c0 <__addsf3>:
 80009c0:	0042      	lsls	r2, r0, #1
 80009c2:	bf1f      	itttt	ne
 80009c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c8:	ea92 0f03 	teqne	r2, r3
 80009cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d4:	d06a      	beq.n	8000aac <__addsf3+0xec>
 80009d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009de:	bfc1      	itttt	gt
 80009e0:	18d2      	addgt	r2, r2, r3
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	4048      	eorgt	r0, r1
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	bfb8      	it	lt
 80009ea:	425b      	neglt	r3, r3
 80009ec:	2b19      	cmp	r3, #25
 80009ee:	bf88      	it	hi
 80009f0:	4770      	bxhi	lr
 80009f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4249      	negne	r1, r1
 8000a12:	ea92 0f03 	teq	r2, r3
 8000a16:	d03f      	beq.n	8000a98 <__addsf3+0xd8>
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a20:	eb10 000c 	adds.w	r0, r0, ip
 8000a24:	f1c3 0320 	rsb	r3, r3, #32
 8000a28:	fa01 f103 	lsl.w	r1, r1, r3
 8000a2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a30:	d502      	bpl.n	8000a38 <__addsf3+0x78>
 8000a32:	4249      	negs	r1, r1
 8000a34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a3c:	d313      	bcc.n	8000a66 <__addsf3+0xa6>
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a42:	d306      	bcc.n	8000a52 <__addsf3+0x92>
 8000a44:	0840      	lsrs	r0, r0, #1
 8000a46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4a:	f102 0201 	add.w	r2, r2, #1
 8000a4e:	2afe      	cmp	r2, #254	; 0xfe
 8000a50:	d251      	bcs.n	8000af6 <__addsf3+0x136>
 8000a52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	ea40 0003 	orr.w	r0, r0, r3
 8000a64:	4770      	bx	lr
 8000a66:	0049      	lsls	r1, r1, #1
 8000a68:	eb40 0000 	adc.w	r0, r0, r0
 8000a6c:	3a01      	subs	r2, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a74:	d2ed      	bcs.n	8000a52 <__addsf3+0x92>
 8000a76:	fab0 fc80 	clz	ip, r0
 8000a7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a86:	bfaa      	itet	ge
 8000a88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a8c:	4252      	neglt	r2, r2
 8000a8e:	4318      	orrge	r0, r3
 8000a90:	bfbc      	itt	lt
 8000a92:	40d0      	lsrlt	r0, r2
 8000a94:	4318      	orrlt	r0, r3
 8000a96:	4770      	bx	lr
 8000a98:	f092 0f00 	teq	r2, #0
 8000a9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa0:	bf06      	itte	eq
 8000aa2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa6:	3201      	addeq	r2, #1
 8000aa8:	3b01      	subne	r3, #1
 8000aaa:	e7b5      	b.n	8000a18 <__addsf3+0x58>
 8000aac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aba:	d021      	beq.n	8000b00 <__addsf3+0x140>
 8000abc:	ea92 0f03 	teq	r2, r3
 8000ac0:	d004      	beq.n	8000acc <__addsf3+0x10c>
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	4608      	moveq	r0, r1
 8000aca:	4770      	bx	lr
 8000acc:	ea90 0f01 	teq	r0, r1
 8000ad0:	bf1c      	itt	ne
 8000ad2:	2000      	movne	r0, #0
 8000ad4:	4770      	bxne	lr
 8000ad6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ada:	d104      	bne.n	8000ae6 <__addsf3+0x126>
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	bf28      	it	cs
 8000ae0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aea:	bf3c      	itt	cc
 8000aec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bxcc	lr
 8000af2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	4770      	bx	lr
 8000b00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b04:	bf16      	itet	ne
 8000b06:	4608      	movne	r0, r1
 8000b08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b0c:	4601      	movne	r1, r0
 8000b0e:	0242      	lsls	r2, r0, #9
 8000b10:	bf06      	itte	eq
 8000b12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b16:	ea90 0f01 	teqeq	r0, r1
 8000b1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_ui2f>:
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e004      	b.n	8000b30 <__aeabi_i2f+0x8>
 8000b26:	bf00      	nop

08000b28 <__aeabi_i2f>:
 8000b28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b2c:	bf48      	it	mi
 8000b2e:	4240      	negmi	r0, r0
 8000b30:	ea5f 0c00 	movs.w	ip, r0
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	e01c      	b.n	8000b7e <__aeabi_l2f+0x2a>

08000b44 <__aeabi_ul2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e00a      	b.n	8000b68 <__aeabi_l2f+0x14>
 8000b52:	bf00      	nop

08000b54 <__aeabi_l2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__aeabi_l2f+0x14>
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	ea5f 0c01 	movs.w	ip, r1
 8000b6c:	bf02      	ittt	eq
 8000b6e:	4684      	moveq	ip, r0
 8000b70:	4601      	moveq	r1, r0
 8000b72:	2000      	moveq	r0, #0
 8000b74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b78:	bf08      	it	eq
 8000b7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b82:	fabc f28c 	clz	r2, ip
 8000b86:	3a08      	subs	r2, #8
 8000b88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b8c:	db10      	blt.n	8000bb0 <__aeabi_l2f+0x5c>
 8000b8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b92:	4463      	add	r3, ip
 8000b94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f102 0220 	add.w	r2, r2, #32
 8000bb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb8:	f1c2 0220 	rsb	r2, r2, #32
 8000bbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc4:	eb43 0002 	adc.w	r0, r3, r2
 8000bc8:	bf08      	it	eq
 8000bca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_fmul>:
 8000bd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd8:	bf1e      	ittt	ne
 8000bda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bde:	ea92 0f0c 	teqne	r2, ip
 8000be2:	ea93 0f0c 	teqne	r3, ip
 8000be6:	d06f      	beq.n	8000cc8 <__aeabi_fmul+0xf8>
 8000be8:	441a      	add	r2, r3
 8000bea:	ea80 0c01 	eor.w	ip, r0, r1
 8000bee:	0240      	lsls	r0, r0, #9
 8000bf0:	bf18      	it	ne
 8000bf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf6:	d01e      	beq.n	8000c36 <__aeabi_fmul+0x66>
 8000bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c04:	fba0 3101 	umull	r3, r1, r0, r1
 8000c08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c0c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c10:	bf3e      	ittt	cc
 8000c12:	0049      	lslcc	r1, r1, #1
 8000c14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c18:	005b      	lslcc	r3, r3, #1
 8000c1a:	ea40 0001 	orr.w	r0, r0, r1
 8000c1e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c22:	2afd      	cmp	r2, #253	; 0xfd
 8000c24:	d81d      	bhi.n	8000c62 <__aeabi_fmul+0x92>
 8000c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	4770      	bx	lr
 8000c36:	f090 0f00 	teq	r0, #0
 8000c3a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c3e:	bf08      	it	eq
 8000c40:	0249      	lsleq	r1, r1, #9
 8000c42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c4a:	3a7f      	subs	r2, #127	; 0x7f
 8000c4c:	bfc2      	ittt	gt
 8000c4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c56:	4770      	bxgt	lr
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	dc5d      	bgt.n	8000d20 <__aeabi_fmul+0x150>
 8000c64:	f112 0f19 	cmn.w	r2, #25
 8000c68:	bfdc      	itt	le
 8000c6a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bxle	lr
 8000c70:	f1c2 0200 	rsb	r2, r2, #0
 8000c74:	0041      	lsls	r1, r0, #1
 8000c76:	fa21 f102 	lsr.w	r1, r1, r2
 8000c7a:	f1c2 0220 	rsb	r2, r2, #32
 8000c7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c86:	f140 0000 	adc.w	r0, r0, #0
 8000c8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8e:	bf08      	it	eq
 8000c90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c94:	4770      	bx	lr
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0040      	lsleq	r0, r0, #1
 8000ca2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ca6:	3a01      	subeq	r2, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xce>
 8000caa:	ea40 000c 	orr.w	r0, r0, ip
 8000cae:	f093 0f00 	teq	r3, #0
 8000cb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0049      	lsleq	r1, r1, #1
 8000cba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cbe:	3b01      	subeq	r3, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xe6>
 8000cc2:	ea41 010c 	orr.w	r1, r1, ip
 8000cc6:	e78f      	b.n	8000be8 <__aeabi_fmul+0x18>
 8000cc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ccc:	ea92 0f0c 	teq	r2, ip
 8000cd0:	bf18      	it	ne
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d00a      	beq.n	8000cee <__aeabi_fmul+0x11e>
 8000cd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cdc:	bf18      	it	ne
 8000cde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ce2:	d1d8      	bne.n	8000c96 <__aeabi_fmul+0xc6>
 8000ce4:	ea80 0001 	eor.w	r0, r0, r1
 8000ce8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	bf17      	itett	ne
 8000cf4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf8:	4608      	moveq	r0, r1
 8000cfa:	f091 0f00 	teqne	r1, #0
 8000cfe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d02:	d014      	beq.n	8000d2e <__aeabi_fmul+0x15e>
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	d101      	bne.n	8000d0e <__aeabi_fmul+0x13e>
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	d10f      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d0e:	ea93 0f0c 	teq	r3, ip
 8000d12:	d103      	bne.n	8000d1c <__aeabi_fmul+0x14c>
 8000d14:	024b      	lsls	r3, r1, #9
 8000d16:	bf18      	it	ne
 8000d18:	4608      	movne	r0, r1
 8000d1a:	d108      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bx	lr
 8000d2e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_fdiv>:
 8000d38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d40:	bf1e      	ittt	ne
 8000d42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d46:	ea92 0f0c 	teqne	r2, ip
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d069      	beq.n	8000e24 <__aeabi_fdiv+0xec>
 8000d50:	eba2 0203 	sub.w	r2, r2, r3
 8000d54:	ea80 0c01 	eor.w	ip, r0, r1
 8000d58:	0249      	lsls	r1, r1, #9
 8000d5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5e:	d037      	beq.n	8000dd0 <__aeabi_fdiv+0x98>
 8000d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	428b      	cmp	r3, r1
 8000d72:	bf38      	it	cc
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d7a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	bf24      	itt	cs
 8000d82:	1a5b      	subcs	r3, r3, r1
 8000d84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d9a:	bf24      	itt	cs
 8000d9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000da0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da8:	bf24      	itt	cs
 8000daa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dba:	d1e0      	bne.n	8000d7e <__aeabi_fdiv+0x46>
 8000dbc:	2afd      	cmp	r2, #253	; 0xfd
 8000dbe:	f63f af50 	bhi.w	8000c62 <__aeabi_fmul+0x92>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd8:	327f      	adds	r2, #127	; 0x7f
 8000dda:	bfc2      	ittt	gt
 8000ddc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de4:	4770      	bxgt	lr
 8000de6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	3a01      	subs	r2, #1
 8000df0:	e737      	b.n	8000c62 <__aeabi_fmul+0x92>
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xc2>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xda>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e795      	b.n	8000d50 <__aeabi_fdiv+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d108      	bne.n	8000e40 <__aeabi_fdiv+0x108>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	f47f af7d 	bne.w	8000d2e <__aeabi_fmul+0x15e>
 8000e34:	ea93 0f0c 	teq	r3, ip
 8000e38:	f47f af70 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e776      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e40:	ea93 0f0c 	teq	r3, ip
 8000e44:	d104      	bne.n	8000e50 <__aeabi_fdiv+0x118>
 8000e46:	024b      	lsls	r3, r1, #9
 8000e48:	f43f af4c 	beq.w	8000ce4 <__aeabi_fmul+0x114>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e76e      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1ca      	bne.n	8000df2 <__aeabi_fdiv+0xba>
 8000e5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e60:	f47f af5c 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e64:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e68:	f47f af3c 	bne.w	8000ce4 <__aeabi_fmul+0x114>
 8000e6c:	e75f      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e6e:	bf00      	nop

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2uiz>:
 8000f5c:	0042      	lsls	r2, r0, #1
 8000f5e:	d20e      	bcs.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30b      	bcc.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d409      	bmi.n	8000f84 <__aeabi_f2uiz+0x28>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f88:	d101      	bne.n	8000f8e <__aeabi_f2uiz+0x32>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_f2uiz+0x38>
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f92:	4770      	bx	lr
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <Access_Init+0x14>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000030 	.word	0x20000030

08000fb4 <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <Brakes_OnAutobrakesEnabled>:
/**
  * @brief	Triggers the actions for Autobrakes enabled state
  * @return	None
  */
static void Brakes_OnAutobrakesEnabled(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	/* Check critical distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Enable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <Brakes_OnAutobrakesEnabled+0x60>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4916      	ldr	r1, [pc, #88]	; (8001024 <Brakes_OnAutobrakesEnabled+0x64>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff9e 	bl	8000f0c <__aeabi_fcmplt>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00f      	beq.n	8000ff6 <Brakes_OnAutobrakesEnabled+0x36>
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <Brakes_OnAutobrakesEnabled+0x68>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	d90b      	bls.n	8000ff6 <Brakes_OnAutobrakesEnabled+0x36>
	{
		/* Set Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = TRUE;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <Brakes_OnAutobrakesEnabled+0x6c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <Brakes_OnAutobrakesEnabled+0x68>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
		/* Set Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <Brakes_OnAutobrakesEnabled+0x6c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00b fa30 	bl	800c454 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
	}
}
 8000ff4:	e012      	b.n	800101c <Brakes_OnAutobrakesEnabled+0x5c>
	else if (g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32)
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <Brakes_OnAutobrakesEnabled+0x60>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	490a      	ldr	r1, [pc, #40]	; (8001024 <Brakes_OnAutobrakesEnabled+0x64>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff85 	bl	8000f0c <__aeabi_fcmplt>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <Brakes_OnAutobrakesEnabled+0x56>
		g_Brakes_Autobrakes_Enable_Cnt_u8++;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <Brakes_OnAutobrakesEnabled+0x68>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <Brakes_OnAutobrakesEnabled+0x68>)
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	e002      	b.n	800101c <Brakes_OnAutobrakesEnabled+0x5c>
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <Brakes_OnAutobrakesEnabled+0x68>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000038 	.word	0x20000038
 8001024:	41f00000 	.word	0x41f00000
 8001028:	20000040 	.word	0x20000040
 800102c:	2000003e 	.word	0x2000003e

08001030 <Brakes_OnAutobrakesDisabled>:
/**
  * @brief	Triggers the actions for Autobrakes disabled state
  * @return	None
  */
static void Brakes_OnAutobrakesDisabled(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	/* Check Autobrakes disable distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Disable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <Brakes_OnAutobrakesDisabled+0x60>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4916      	ldr	r1, [pc, #88]	; (8001094 <Brakes_OnAutobrakesDisabled+0x64>)
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff84 	bl	8000f48 <__aeabi_fcmpgt>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00f      	beq.n	8001066 <Brakes_OnAutobrakesDisabled+0x36>
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <Brakes_OnAutobrakesDisabled+0x68>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b09      	cmp	r3, #9
 800104c:	d90b      	bls.n	8001066 <Brakes_OnAutobrakesDisabled+0x36>
	{
		/* Reset Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = FALSE;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <Brakes_OnAutobrakesDisabled+0x6c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <Brakes_OnAutobrakesDisabled+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <Brakes_OnAutobrakesDisabled+0x6c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f00b f9f8 	bl	800c454 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
	}
}
 8001064:	e012      	b.n	800108c <Brakes_OnAutobrakesDisabled+0x5c>
	else if(g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32)
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <Brakes_OnAutobrakesDisabled+0x60>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	490a      	ldr	r1, [pc, #40]	; (8001094 <Brakes_OnAutobrakesDisabled+0x64>)
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff6b 	bl	8000f48 <__aeabi_fcmpgt>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <Brakes_OnAutobrakesDisabled+0x56>
		g_Brakes_Autobrakes_Disable_Cnt_u8++;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <Brakes_OnAutobrakesDisabled+0x68>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <Brakes_OnAutobrakesDisabled+0x68>)
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	e002      	b.n	800108c <Brakes_OnAutobrakesDisabled+0x5c>
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <Brakes_OnAutobrakesDisabled+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000038 	.word	0x20000038
 8001094:	428c0000 	.word	0x428c0000
 8001098:	2000003f 	.word	0x2000003f
 800109c:	2000003e 	.word	0x2000003e

080010a0 <Brakes_OnDistance>:

static uint8 Brakes_OnDistance(float32 distance)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 80010a8:	4942      	ldr	r1, [pc, #264]	; (80011b4 <Brakes_OnDistance+0x114>)
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff38 	bl	8000f20 <__aeabi_fcmple>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <Brakes_OnDistance+0x2e>
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <Brakes_OnDistance+0x118>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b09      	cmp	r3, #9
 80010bc:	d807      	bhi.n	80010ce <Brakes_OnDistance+0x2e>
	{
		g_Informative_Dist_Status_Cnt_u8++;
 80010be:	4b3e      	ldr	r3, [pc, #248]	; (80011b8 <Brakes_OnDistance+0x118>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <Brakes_OnDistance+0x118>)
 80010c8:	701a      	strb	r2, [r3, #0]
		return 3;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e06d      	b.n	80011aa <Brakes_OnDistance+0x10a>
	}
	else if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 80010ce:	4939      	ldr	r1, [pc, #228]	; (80011b4 <Brakes_OnDistance+0x114>)
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff25 	bl	8000f20 <__aeabi_fcmple>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <Brakes_OnDistance+0x54>
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <Brakes_OnDistance+0x118>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b09      	cmp	r3, #9
 80010e2:	d907      	bls.n	80010f4 <Brakes_OnDistance+0x54>
	{
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <Brakes_OnDistance+0x11c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <Brakes_OnDistance+0x120>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
		return 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e05a      	b.n	80011aa <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 80010f4:	492f      	ldr	r1, [pc, #188]	; (80011b4 <Brakes_OnDistance+0x114>)
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff26 	bl	8000f48 <__aeabi_fcmpgt>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d012      	beq.n	8001128 <Brakes_OnDistance+0x88>
 8001102:	4930      	ldr	r1, [pc, #192]	; (80011c4 <Brakes_OnDistance+0x124>)
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff0b 	bl	8000f20 <__aeabi_fcmple>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <Brakes_OnDistance+0x88>
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <Brakes_OnDistance+0x11c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b09      	cmp	r3, #9
 8001116:	d807      	bhi.n	8001128 <Brakes_OnDistance+0x88>
	{
		g_Warning_Dist_Status_Cnt_u8++;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <Brakes_OnDistance+0x11c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <Brakes_OnDistance+0x11c>)
 8001122:	701a      	strb	r2, [r3, #0]
		return 3;
 8001124:	2303      	movs	r3, #3
 8001126:	e040      	b.n	80011aa <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 8001128:	4922      	ldr	r1, [pc, #136]	; (80011b4 <Brakes_OnDistance+0x114>)
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff0c 	bl	8000f48 <__aeabi_fcmpgt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d012      	beq.n	800115c <Brakes_OnDistance+0xbc>
 8001136:	4923      	ldr	r1, [pc, #140]	; (80011c4 <Brakes_OnDistance+0x124>)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fef1 	bl	8000f20 <__aeabi_fcmple>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <Brakes_OnDistance+0xbc>
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <Brakes_OnDistance+0x11c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d907      	bls.n	800115c <Brakes_OnDistance+0xbc>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <Brakes_OnDistance+0x118>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <Brakes_OnDistance+0x120>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
		return 1;
 8001158:	2301      	movs	r3, #1
 800115a:	e026      	b.n	80011aa <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 800115c:	4919      	ldr	r1, [pc, #100]	; (80011c4 <Brakes_OnDistance+0x124>)
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fef2 	bl	8000f48 <__aeabi_fcmpgt>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <Brakes_OnDistance+0xe2>
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <Brakes_OnDistance+0x120>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b09      	cmp	r3, #9
 8001170:	d807      	bhi.n	8001182 <Brakes_OnDistance+0xe2>
	{
		g_Critical_Dist_Status_Cnt_u8++;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <Brakes_OnDistance+0x120>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <Brakes_OnDistance+0x120>)
 800117c:	701a      	strb	r2, [r3, #0]
		return 3;
 800117e:	2303      	movs	r3, #3
 8001180:	e013      	b.n	80011aa <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 8001182:	4910      	ldr	r1, [pc, #64]	; (80011c4 <Brakes_OnDistance+0x124>)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fedf 	bl	8000f48 <__aeabi_fcmpgt>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <Brakes_OnDistance+0x108>
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <Brakes_OnDistance+0x120>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b09      	cmp	r3, #9
 8001196:	d907      	bls.n	80011a8 <Brakes_OnDistance+0x108>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <Brakes_OnDistance+0x118>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <Brakes_OnDistance+0x11c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		return 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e000      	b.n	80011aa <Brakes_OnDistance+0x10a>
	}
	else
	{
		return 3;
 80011a8:	2303      	movs	r3, #3
	}
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	41f00000 	.word	0x41f00000
 80011b8:	20000065 	.word	0x20000065
 80011bc:	20000066 	.word	0x20000066
 80011c0:	20000067 	.word	0x20000067
 80011c4:	42700000 	.word	0x42700000

080011c8 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	/* Initialize variables */
	g_Brakes_AN0_Voltage_mV_u16 = 0u;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <Brakes_Init+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	801a      	strh	r2, [r3, #0]
	g_Brakes_AN2_Voltage_mV_u16 = 0u;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <Brakes_Init+0x48>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
	g_Brakes_SW_u8 = 0u;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Brakes_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
	g_Brakes_Ultrasonic_Distance_cm_f32 = 0.0f;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <Brakes_Init+0x50>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
	g_Brakes_Autobrakes_Status_b = FALSE;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <Brakes_Init+0x54>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <Brakes_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <Brakes_Init+0x5c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	//initilalizare cu 0 a noi var
	/* Read Brakes NvM block */
	Rte_Read_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 80011f8:	490b      	ldr	r1, [pc, #44]	; (8001228 <Brakes_Init+0x60>)
 80011fa:	2001      	movs	r0, #1
 80011fc:	f00b f948 	bl	800c490 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <Brakes_Init+0x64>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000032 	.word	0x20000032
 8001210:	20000034 	.word	0x20000034
 8001214:	20000036 	.word	0x20000036
 8001218:	20000038 	.word	0x20000038
 800121c:	2000003e 	.word	0x2000003e
 8001220:	2000003f 	.word	0x2000003f
 8001224:	20000040 	.word	0x20000040
 8001228:	20000044 	.word	0x20000044
 800122c:	20000031 	.word	0x20000031

08001230 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_Brakes_InitDone_b)
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <Brakes_MainFunction+0x70>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02f      	beq.n	800129c <Brakes_MainFunction+0x6c>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_ADC_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_mV_u16);
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <Brakes_MainFunction+0x74>)
 800123e:	f00b f961 	bl	800c504 <Rte_Read_AN0_Voltage_u16>
		/* Read AN2 analog voltage (mV) */
		Rte_Read_ADC_AN2_Voltage_u16(&g_Brakes_AN2_Voltage_mV_u16);
 8001242:	4819      	ldr	r0, [pc, #100]	; (80012a8 <Brakes_MainFunction+0x78>)
 8001244:	f00b f982 	bl	800c54c <Rte_Read_AN2_Voltage_u16>
		/* Read SWITCH analog voltage (mV) */
		Rte_Switch_Joystick(&g_Brakes_SW_u8);
 8001248:	4818      	ldr	r0, [pc, #96]	; (80012ac <Brakes_MainFunction+0x7c>)
 800124a:	f00b f88d 	bl	800c368 <Rte_Read_PC6_Pin_State>
		/* Read distance from ultrasonic sensor */
		Rte_Read_Ultrasonic_Distance_f32(&g_Brakes_Ultrasonic_Distance_cm_f32);
 800124e:	4818      	ldr	r0, [pc, #96]	; (80012b0 <Brakes_MainFunction+0x80>)
 8001250:	f00b f85c 	bl	800c30c <Rte_Read_Cdd_Ultrasonic_Distance_f32>
		/* Check Autobrakes condition */
		if(FALSE == g_Brakes_Autobrakes_Status_b)
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <Brakes_MainFunction+0x84>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <Brakes_MainFunction+0x32>
		{
			/* Autobrakes enabled actions */
			Brakes_OnAutobrakesEnabled();
 800125c:	f7ff feb0 	bl	8000fc0 <Brakes_OnAutobrakesEnabled>
 8001260:	e001      	b.n	8001266 <Brakes_MainFunction+0x36>
		}
		else
		{
			/* Autobrakes disabled actions */
			Brakes_OnAutobrakesDisabled();
 8001262:	f7ff fee5 	bl	8001030 <Brakes_OnAutobrakesDisabled>
		}
		/* rte write */
		g_Brakes_Ultrasonic_Distance_cm_u16 = (uint16) g_Brakes_Ultrasonic_Distance_cm_f32;
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <Brakes_MainFunction+0x80>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fe76 	bl	8000f5c <__aeabi_f2uiz>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <Brakes_MainFunction+0x88>)
 8001276:	801a      	strh	r2, [r3, #0]
		g_Brakes_CollisionWarning_Status_u8 = Brakes_OnDistance(g_Brakes_Ultrasonic_Distance_cm_u16);
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <Brakes_MainFunction+0x88>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fc4f 	bl	8000b20 <__aeabi_ui2f>
 8001282:	4603      	mov	r3, r0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff0b 	bl	80010a0 <Brakes_OnDistance>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <Brakes_MainFunction+0x8c>)
 8001290:	701a      	strb	r2, [r3, #0]
		Rte_Write_Brakes_Collission_Status(g_Brakes_CollisionWarning_Status_u8);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <Brakes_MainFunction+0x8c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f00b f888 	bl	800c3ac <Rte_Write_g_CollisionWarning_Status>
	}
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000031 	.word	0x20000031
 80012a4:	20000032 	.word	0x20000032
 80012a8:	20000034 	.word	0x20000034
 80012ac:	20000036 	.word	0x20000036
 80012b0:	20000038 	.word	0x20000038
 80012b4:	2000003e 	.word	0x2000003e
 80012b8:	2000003c 	.word	0x2000003c
 80012bc:	20000064 	.word	0x20000064

080012c0 <Brakes_Shutdown>:
/**
  * @brief  Shutdown the Brakes module
  * @return None
  */
void Brakes_Shutdown(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	/* Write Brakes NvM block */
	Rte_Write_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 80012c4:	4904      	ldr	r1, [pc, #16]	; (80012d8 <Brakes_Shutdown+0x18>)
 80012c6:	2001      	movs	r0, #1
 80012c8:	f00b f8fc 	bl	800c4c4 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_Brakes_InitDone_b = FALSE;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <Brakes_Shutdown+0x1c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000044 	.word	0x20000044
 80012dc:	20000031 	.word	0x20000031

080012e0 <move_Forward_Remote>:

/* STATIC FUNCTIONS: */

/* Move forward remote control */
void move_Forward_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, uint8 increment)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d13c      	bne.n	8001370 <move_Forward_Remote+0x90>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d138      	bne.n	8001370 <move_Forward_Remote+0x90>
	{
		if(*speed_0 < 100 && *speed_1 < 100)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f993 3000 	ldrsb.w	r3, [r3]
 8001304:	2b63      	cmp	r3, #99	; 0x63
 8001306:	dc2f      	bgt.n	8001368 <move_Forward_Remote+0x88>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f993 3000 	ldrsb.w	r3, [r3]
 800130e:	2b63      	cmp	r3, #99	; 0x63
 8001310:	dc2a      	bgt.n	8001368 <move_Forward_Remote+0x88>
		{
			if(*speed_0 == 0 && *speed_1 == 0)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f993 3000 	ldrsb.w	r3, [r3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d116      	bne.n	800134a <move_Forward_Remote+0x6a>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f993 3000 	ldrsb.w	r3, [r3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d111      	bne.n	800134a <move_Forward_Remote+0x6a>
			{
				*speed_0 = *speed_0 + 2*increment;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f993 3000 	ldrsb.w	r3, [r3]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	7e3b      	ldrb	r3, [r7, #24]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b25a      	sxtb	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f993 2000 	ldrsb.w	r2, [r3]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e00e      	b.n	8001368 <move_Forward_Remote+0x88>
			}
			else
			{
				*speed_0 = *speed_0 + increment;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f993 3000 	ldrsb.w	r3, [r3]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	7e3b      	ldrb	r3, [r7, #24]
 8001354:	4413      	add	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b25a      	sxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f993 2000 	ldrsb.w	r2, [r3]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	701a      	strb	r2, [r3, #0]
		}
		else
		{

		}
		*previous_Status = 1;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 800136e:	e00a      	b.n	8001386 <move_Forward_Remote+0xa6>
	else if(*current_Status == 0 && *previous_Status == 1)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <move_Forward_Remote+0xa6>
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d102      	bne.n	8001386 <move_Forward_Remote+0xa6>
		*previous_Status = 0;
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <move_Right_Remote>:

/* Move right remote control */
void move_Right_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, sint8 *speed_Before_Turn)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10c      	bne.n	80013c0 <move_Right_Remote+0x30>
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <move_Right_Remote+0x30>
	{
		*speed_Before_Turn = *speed_0;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f993 2000 	ldrsb.w	r2, [r3]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	e029      	b.n	8001414 <move_Right_Remote+0x84>
	}
	else if(*current_Status == 0 && *previous_Status == 1)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d111      	bne.n	80013ec <move_Right_Remote+0x5c>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10d      	bne.n	80013ec <move_Right_Remote+0x5c>
	{
		*speed_0 = *speed_Before_Turn;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	f993 2000 	ldrsb.w	r2, [r3]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_Before_Turn;
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	f993 2000 	ldrsb.w	r2, [r3]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	701a      	strb	r2, [r3, #0]
		*previous_Status = 0;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e013      	b.n	8001414 <move_Right_Remote+0x84>
	}
	else if(*current_Status == 1 && *previous_Status == 1)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10f      	bne.n	8001414 <move_Right_Remote+0x84>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10b      	bne.n	8001414 <move_Right_Remote+0x84>
	{
		*speed_1 = *speed_Before_Turn;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f993 2000 	ldrsb.w	r2, [r3]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	701a      	strb	r2, [r3, #0]
		*speed_0 = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001412:	e7ff      	b.n	8001414 <move_Right_Remote+0x84>
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <move_Left_Remote>:

/* Move left remote control */
void move_Left_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, sint8 *speed_Before_Turn)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10c      	bne.n	800144e <move_Left_Remote+0x30>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <move_Left_Remote+0x30>
	{
		*speed_Before_Turn = *speed_0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f993 2000 	ldrsb.w	r2, [r3]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e029      	b.n	80014a2 <move_Left_Remote+0x84>
	}
	else if(*current_Status == 0 && *previous_Status == 1)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d111      	bne.n	800147a <move_Left_Remote+0x5c>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10d      	bne.n	800147a <move_Left_Remote+0x5c>
	{
		*speed_0 = *speed_Before_Turn;
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	f993 2000 	ldrsb.w	r2, [r3]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_Before_Turn;
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	f993 2000 	ldrsb.w	r2, [r3]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	701a      	strb	r2, [r3, #0]
		*previous_Status = 0;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	e013      	b.n	80014a2 <move_Left_Remote+0x84>
	}
	else if(*current_Status == 1 && *previous_Status == 1)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10f      	bne.n	80014a2 <move_Left_Remote+0x84>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10b      	bne.n	80014a2 <move_Left_Remote+0x84>
	{
		*speed_0 = *speed_Before_Turn;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f993 2000 	ldrsb.w	r2, [r3]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	701a      	strb	r2, [r3, #0]
		*speed_1 = 0;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 80014a0:	e7ff      	b.n	80014a2 <move_Left_Remote+0x84>
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <move_Backward_Remote>:

/* Move backward remote control */
void move_Backward_Remote(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, uint8 decrement)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d13e      	bne.n	8001540 <move_Backward_Remote+0x94>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d13a      	bne.n	8001540 <move_Backward_Remote+0x94>
	{
		if(*speed_0 >= -90 && *speed_1 >= -90)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f993 3000 	ldrsb.w	r3, [r3]
 80014d0:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 80014d4:	db30      	blt.n	8001538 <move_Backward_Remote+0x8c>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f993 3000 	ldrsb.w	r3, [r3]
 80014dc:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 80014e0:	db2a      	blt.n	8001538 <move_Backward_Remote+0x8c>
		{
			if(*speed_0 == 0 && *speed_1 == 0)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f993 3000 	ldrsb.w	r3, [r3]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d116      	bne.n	800151a <move_Backward_Remote+0x6e>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f993 3000 	ldrsb.w	r3, [r3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d111      	bne.n	800151a <move_Backward_Remote+0x6e>
			{
				*speed_0 = *speed_0 - 2*decrement;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	7e3b      	ldrb	r3, [r7, #24]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	b25a      	sxtb	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f993 2000 	ldrsb.w	r2, [r3]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e00e      	b.n	8001538 <move_Backward_Remote+0x8c>
			}
			else
			{
				*speed_0 = *speed_0 - decrement;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f993 3000 	ldrsb.w	r3, [r3]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	7e3b      	ldrb	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b25a      	sxtb	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f993 2000 	ldrsb.w	r2, [r3]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	701a      	strb	r2, [r3, #0]
		}
		else
		{

		}
		*previous_Status = 1;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 800153e:	e00a      	b.n	8001556 <move_Backward_Remote+0xaa>
	else if(*current_Status == 0 && *previous_Status == 1)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <move_Backward_Remote+0xaa>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d102      	bne.n	8001556 <move_Backward_Remote+0xaa>
		*previous_Status = 0;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <mV_To_DutyCycle>:

/* Conversion from mV to duty cycle */
void mV_To_DutyCycle(uint16 *mV_Value, uint8 *duty_Cylce_Value)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	*duty_Cylce_Value = *mV_Value * 0.030303;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff84 	bl	800047c <__aeabi_i2d>
 8001574:	a30a      	add	r3, pc, #40	; (adr r3, 80015a0 <mV_To_DutyCycle+0x40>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe ffe9 	bl	8000550 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff f9f5 	bl	8000974 <__aeabi_d2uiz>
 800158a:	4603      	mov	r3, r0
 800158c:	b2da      	uxtb	r2, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	701a      	strb	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	e7e1fc09 	.word	0xe7e1fc09
 80015a4:	3f9f07bf 	.word	0x3f9f07bf

080015a8 <move_From_Joystick>:

/* Move commanded by joystick */
void move_From_Joystick(uint8 *horizontal_Axis_Duty, uint8 *vertical_Axis_Duty, sint8 *speed_0, sint8 *speed_1)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
	if(*vertical_Axis_Duty < TRESHOLD_FORWARD)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b2c      	cmp	r3, #44	; 0x2c
 80015bc:	d81e      	bhi.n	80015fc <move_From_Joystick+0x54>
	{
		*speed_0 = 100 - (*vertical_Axis_Duty * 2);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f993 2000 	ldrsb.w	r2, [r3]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	701a      	strb	r2, [r3, #0]
		if(*horizontal_Axis_Duty < TRESHOLD_RIGHT)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b2c      	cmp	r3, #44	; 0x2c
 80015e2:	d803      	bhi.n	80015ec <move_From_Joystick+0x44>
		{
			*speed_0 = 0;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
	else
	{
		*speed_0 = 0;
		*speed_1 = 0;
	}
}
 80015ea:	e030      	b.n	800164e <move_From_Joystick+0xa6>
		else if(*horizontal_Axis_Duty > TRESHOLD_LEFT)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b41      	cmp	r3, #65	; 0x41
 80015f2:	d92c      	bls.n	800164e <move_From_Joystick+0xa6>
			*speed_1 = 0;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
}
 80015fa:	e028      	b.n	800164e <move_From_Joystick+0xa6>
	else if(*vertical_Axis_Duty > TRESHOLD_BACKWARD)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b3c      	cmp	r3, #60	; 0x3c
 8001602:	d91e      	bls.n	8001642 <move_From_Joystick+0x9a>
		*speed_0 = -(*vertical_Axis_Duty - 50) * 2;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800160c:	b2db      	uxtb	r3, r3
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	b25a      	sxtb	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f993 2000 	ldrsb.w	r2, [r3]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	701a      	strb	r2, [r3, #0]
		if(*horizontal_Axis_Duty < TRESHOLD_RIGHT)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b2c      	cmp	r3, #44	; 0x2c
 8001628:	d803      	bhi.n	8001632 <move_From_Joystick+0x8a>
			*speed_0 = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
}
 8001630:	e00d      	b.n	800164e <move_From_Joystick+0xa6>
		else if(*horizontal_Axis_Duty > TRESHOLD_LEFT)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b41      	cmp	r3, #65	; 0x41
 8001638:	d909      	bls.n	800164e <move_From_Joystick+0xa6>
			*speed_1 = 0;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
}
 8001640:	e005      	b.n	800164e <move_From_Joystick+0xa6>
		*speed_0 = 0;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		*speed_1 = 0;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <set_Speed_And_Direction>:

/* Set speed and direction */
void set_Speed_And_Direction(sint8 *speed_0_s8, sint8 *speed_1_s8, uint8 *speed_0_u8, uint8 *speed_1_u8, uint8 *direction)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
	if(*speed_0_s8 == 0)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f993 3000 	ldrsb.w	r3, [r3]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d135      	bne.n	80016dc <set_Speed_And_Direction+0x84>
	{
		if(*speed_1_s8 == 0)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f993 3000 	ldrsb.w	r3, [r3]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <set_Speed_And_Direction+0x36>
		{
			*speed_0_u8 = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 800168c:	e0b1      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f993 3000 	ldrsb.w	r3, [r3]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd0c      	ble.n	80016b2 <set_Speed_And_Direction+0x5a>
			*speed_0_u8 = 0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f993 3000 	ldrsb.w	r3, [r3]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
}
 80016b0:	e09f      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f993 3000 	ldrsb.w	r3, [r3]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f280 809a 	bge.w	80017f2 <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	425b      	negs	r3, r3
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
}
 80016da:	e08a      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
	else if(*speed_0_s8 > 0)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f993 3000 	ldrsb.w	r3, [r3]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	dd3d      	ble.n	8001762 <set_Speed_And_Direction+0x10a>
		if(*speed_1_s8 == 0)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f993 3000 	ldrsb.w	r3, [r3]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10c      	bne.n	800170a <set_Speed_And_Direction+0xb2>
			*speed_0_u8 = *speed_0_s8;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f993 3000 	ldrsb.w	r3, [r3]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	e073      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f993 3000 	ldrsb.w	r3, [r3]
 8001710:	2b00      	cmp	r3, #0
 8001712:	dd0f      	ble.n	8001734 <set_Speed_And_Direction+0xdc>
			*speed_0_u8 = *speed_0_s8;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f993 3000 	ldrsb.w	r3, [r3]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f993 3000 	ldrsb.w	r3, [r3]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
}
 8001732:	e05e      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f993 3000 	ldrsb.w	r3, [r3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da59      	bge.n	80017f2 <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = *speed_0_s8;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f993 3000 	ldrsb.w	r3, [r3]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f993 3000 	ldrsb.w	r3, [r3]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	425b      	negs	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	e047      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
	else if(*speed_0_s8 < 0)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f993 3000 	ldrsb.w	r3, [r3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	da42      	bge.n	80017f2 <set_Speed_And_Direction+0x19a>
		if(*speed_1_s8 == 0)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f993 3000 	ldrsb.w	r3, [r3]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10e      	bne.n	8001794 <set_Speed_And_Direction+0x13c>
			*speed_0_u8 = -*speed_0_s8;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f993 3000 	ldrsb.w	r3, [r3]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	425b      	negs	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	e02e      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f993 3000 	ldrsb.w	r3, [r3]
 800179a:	2b00      	cmp	r3, #0
 800179c:	dd11      	ble.n	80017c2 <set_Speed_And_Direction+0x16a>
			*speed_0_u8 = -*speed_0_s8;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f993 3000 	ldrsb.w	r3, [r3]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	425b      	negs	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f993 3000 	ldrsb.w	r3, [r3]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	e017      	b.n	80017f2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f993 3000 	ldrsb.w	r3, [r3]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da12      	bge.n	80017f2 <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = -*speed_0_s8;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f993 3000 	ldrsb.w	r3, [r3]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	425b      	negs	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f993 3000 	ldrsb.w	r3, [r3]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	425b      	negs	r3, r3
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <Engine_Init+0x14>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000068 	.word	0x20000068

08001814 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af02      	add	r7, sp, #8
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <Engine_MainFunction+0x17c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	f040 80b3 	bne.w	800198a <Engine_MainFunction+0x176>
	{
		/* Read RT module */
		Rte_Read_Remote_Channel0(&g_Remote_Control_Status_D0_u8);
 8001824:	485b      	ldr	r0, [pc, #364]	; (8001994 <Engine_MainFunction+0x180>)
 8001826:	f00a fea5 	bl	800c574 <Rte_Read_Remote_D0>
		Rte_Read_Remote_Channel1(&g_Remote_Control_Status_D1_u8);
 800182a:	485b      	ldr	r0, [pc, #364]	; (8001998 <Engine_MainFunction+0x184>)
 800182c:	f00a feb4 	bl	800c598 <Rte_Read_Remote_D1>
		Rte_Read_Remote_Channel2(&g_Remote_Control_Status_D2_u8);
 8001830:	485a      	ldr	r0, [pc, #360]	; (800199c <Engine_MainFunction+0x188>)
 8001832:	f00a fec3 	bl	800c5bc <Rte_Read_Remote_D2>
		Rte_Read_Remote_Channel3(&g_Remote_Control_Status_D3_u8);
 8001836:	485a      	ldr	r0, [pc, #360]	; (80019a0 <Engine_MainFunction+0x18c>)
 8001838:	f00a fed4 	bl	800c5e4 <Rte_Read_Remote_D3>

		/* Read Joystick */
		Rte_Engine_Switch_Joystick(&g_Engine_SW_u8);
 800183c:	4859      	ldr	r0, [pc, #356]	; (80019a4 <Engine_MainFunction+0x190>)
 800183e:	f00a fd93 	bl	800c368 <Rte_Read_PC6_Pin_State>
		Rte_Read_ADC_0_Joystick_Voltage_u16(&g_Engine_Joystick_0_Voltage_mV_u16);
 8001842:	4859      	ldr	r0, [pc, #356]	; (80019a8 <Engine_MainFunction+0x194>)
 8001844:	f00a fe5e 	bl	800c504 <Rte_Read_AN0_Voltage_u16>
		Rte_Read_ADC_1_Joystick_Voltage_u16(&g_Engine_Joystick_1_Voltage_mV_u16);
 8001848:	4858      	ldr	r0, [pc, #352]	; (80019ac <Engine_MainFunction+0x198>)
 800184a:	f00a fe7f 	bl	800c54c <Rte_Read_AN2_Voltage_u16>
		mV_To_DutyCycle(&g_Engine_Joystick_0_Voltage_mV_u16, &g_Engine_Joystick_0_Duty_Cycle_u8);
 800184e:	4958      	ldr	r1, [pc, #352]	; (80019b0 <Engine_MainFunction+0x19c>)
 8001850:	4855      	ldr	r0, [pc, #340]	; (80019a8 <Engine_MainFunction+0x194>)
 8001852:	f7ff fe85 	bl	8001560 <mV_To_DutyCycle>
		mV_To_DutyCycle(&g_Engine_Joystick_1_Voltage_mV_u16, &g_Engine_Joystick_1_Duty_Cycle_u8);
 8001856:	4957      	ldr	r1, [pc, #348]	; (80019b4 <Engine_MainFunction+0x1a0>)
 8001858:	4854      	ldr	r0, [pc, #336]	; (80019ac <Engine_MainFunction+0x198>)
 800185a:	f7ff fe81 	bl	8001560 <mV_To_DutyCycle>

		/* Read Ultrasonic distance */
		Rte_Read_Ultrasonic(&g_Engine_Ultrasonic_Distance_cm_f32);
 800185e:	4856      	ldr	r0, [pc, #344]	; (80019b8 <Engine_MainFunction+0x1a4>)
 8001860:	f00a fd54 	bl	800c30c <Rte_Read_Cdd_Ultrasonic_Distance_f32>
		/* Convert ultrasonic distance value to uint16 */
		g_Engine_Ultrasonic_Distance_cm_u16 = (uint16) g_Engine_Ultrasonic_Distance_cm_f32;
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <Engine_MainFunction+0x1a4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fb77 	bl	8000f5c <__aeabi_f2uiz>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b52      	ldr	r3, [pc, #328]	; (80019bc <Engine_MainFunction+0x1a8>)
 8001874:	801a      	strh	r2, [r3, #0]

		/* The selection that shows whether the instructions are given from the remote control or from the joystick */
		if(g_Engine_SW_u8 == 0 && g_Engine_SW_Previous_State_u8 == 1)
 8001876:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <Engine_MainFunction+0x190>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d114      	bne.n	80018a8 <Engine_MainFunction+0x94>
 800187e:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <Engine_MainFunction+0x1ac>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d110      	bne.n	80018a8 <Engine_MainFunction+0x94>
		{
			if(g_Switch_CNT_u8 == 2)
 8001886:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <Engine_MainFunction+0x1b0>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d102      	bne.n	8001894 <Engine_MainFunction+0x80>
			{
				g_Switch_CNT_u8 = 0;
 800188e:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <Engine_MainFunction+0x1b0>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
			}
			g_Switch_CNT_u8++;
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <Engine_MainFunction+0x1b0>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <Engine_MainFunction+0x1b0>)
 800189e:	701a      	strb	r2, [r3, #0]
			g_Engine_SW_Previous_State_u8 = 0;
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <Engine_MainFunction+0x1ac>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e00a      	b.n	80018be <Engine_MainFunction+0xaa>
		}
		else if(g_Engine_SW_u8 == 1 && g_Engine_SW_Previous_State_u8 == 0)
 80018a8:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <Engine_MainFunction+0x190>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <Engine_MainFunction+0xaa>
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <Engine_MainFunction+0x1ac>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <Engine_MainFunction+0xaa>
		{
			g_Engine_SW_Previous_State_u8 = 1;
 80018b8:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <Engine_MainFunction+0x1ac>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
		else
		{

		}

		if(g_Engine_Ultrasonic_Distance_cm_u16 < ENGINE_CRITICAL_DISTANCE_CM_F32 && !g_Direction_u8)
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <Engine_MainFunction+0x1a8>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f930 	bl	8000b28 <__aeabi_i2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	493f      	ldr	r1, [pc, #252]	; (80019c8 <Engine_MainFunction+0x1b4>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb1d 	bl	8000f0c <__aeabi_fcmplt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00a      	beq.n	80018ee <Engine_MainFunction+0xda>
 80018d8:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <Engine_MainFunction+0x1b8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d106      	bne.n	80018ee <Engine_MainFunction+0xda>
		{
			g_Speed_0_s8 = 0;
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <Engine_MainFunction+0x1bc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
			g_Speed_1_s8 = 0;
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <Engine_MainFunction+0x1c0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e02d      	b.n	800194a <Engine_MainFunction+0x136>
		}
		else
		{
			if( g_Switch_CNT_u8 % 2 == 0)
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <Engine_MainFunction+0x1b0>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d120      	bne.n	800193e <Engine_MainFunction+0x12a>
			{
				/* Turn off the LED that shows that the joystick is giving the command and indicates that the instructions are given by the remote control now */

				/* Moves from remote control */
				move_Forward_Remote(&g_Remote_Control_Status_D2_u8, &g_Remote_Control_Previous_Status_D2_u8, &g_Speed_0_s8, &g_Speed_1_s8, INCREMENT_SPEED);
 80018fc:	230a      	movs	r3, #10
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <Engine_MainFunction+0x1c0>)
 8001902:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <Engine_MainFunction+0x1bc>)
 8001904:	4934      	ldr	r1, [pc, #208]	; (80019d8 <Engine_MainFunction+0x1c4>)
 8001906:	4825      	ldr	r0, [pc, #148]	; (800199c <Engine_MainFunction+0x188>)
 8001908:	f7ff fcea 	bl	80012e0 <move_Forward_Remote>
				move_Right_Remote(&g_Remote_Control_Status_D0_u8, &g_Remote_Control_Previous_Status_D0_u8, &g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_Before_s8);
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <Engine_MainFunction+0x1c8>)
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <Engine_MainFunction+0x1c0>)
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <Engine_MainFunction+0x1bc>)
 8001914:	4932      	ldr	r1, [pc, #200]	; (80019e0 <Engine_MainFunction+0x1cc>)
 8001916:	481f      	ldr	r0, [pc, #124]	; (8001994 <Engine_MainFunction+0x180>)
 8001918:	f7ff fd3a 	bl	8001390 <move_Right_Remote>
				move_Left_Remote(&g_Remote_Control_Status_D3_u8, &g_Remote_Control_Previous_Status_D3_u8, &g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_Before_s8);
 800191c:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <Engine_MainFunction+0x1c8>)
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <Engine_MainFunction+0x1c0>)
 8001922:	4a2b      	ldr	r2, [pc, #172]	; (80019d0 <Engine_MainFunction+0x1bc>)
 8001924:	492f      	ldr	r1, [pc, #188]	; (80019e4 <Engine_MainFunction+0x1d0>)
 8001926:	481e      	ldr	r0, [pc, #120]	; (80019a0 <Engine_MainFunction+0x18c>)
 8001928:	f7ff fd79 	bl	800141e <move_Left_Remote>
				move_Backward_Remote(&g_Remote_Control_Status_D1_u8, &g_Remote_Control_Previous_Status_D1_u8, &g_Speed_0_s8, &g_Speed_1_s8, DECREMENT_SPEED);
 800192c:	230a      	movs	r3, #10
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <Engine_MainFunction+0x1c0>)
 8001932:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <Engine_MainFunction+0x1bc>)
 8001934:	492c      	ldr	r1, [pc, #176]	; (80019e8 <Engine_MainFunction+0x1d4>)
 8001936:	4818      	ldr	r0, [pc, #96]	; (8001998 <Engine_MainFunction+0x184>)
 8001938:	f7ff fdb8 	bl	80014ac <move_Backward_Remote>
 800193c:	e005      	b.n	800194a <Engine_MainFunction+0x136>
			else
			{
				/* Lights up a LED that indicates that the joystick is giving the command now */

				/* Moves from joystick */
				move_From_Joystick(&g_Engine_Joystick_0_Duty_Cycle_u8, &g_Engine_Joystick_1_Duty_Cycle_u8, &g_Speed_0_s8, &g_Speed_1_s8);
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <Engine_MainFunction+0x1c0>)
 8001940:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <Engine_MainFunction+0x1bc>)
 8001942:	491c      	ldr	r1, [pc, #112]	; (80019b4 <Engine_MainFunction+0x1a0>)
 8001944:	481a      	ldr	r0, [pc, #104]	; (80019b0 <Engine_MainFunction+0x19c>)
 8001946:	f7ff fe2f 	bl	80015a8 <move_From_Joystick>
			}
		}


		/* Set speed and direction */
		set_Speed_And_Direction(&g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_0_u8, &g_Speed_1_u8, &g_Direction_u8);
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <Engine_MainFunction+0x1b8>)
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <Engine_MainFunction+0x1d8>)
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <Engine_MainFunction+0x1dc>)
 8001952:	4920      	ldr	r1, [pc, #128]	; (80019d4 <Engine_MainFunction+0x1c0>)
 8001954:	481e      	ldr	r0, [pc, #120]	; (80019d0 <Engine_MainFunction+0x1bc>)
 8001956:	f7ff fe7f 	bl	8001658 <set_Speed_And_Direction>
        /* Write on DC motor */
		Rte_Speed_DCMotor(DC_MOTOR_ID_0, g_Speed_0_u8);
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <Engine_MainFunction+0x1dc>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	2000      	movs	r0, #0
 8001962:	f00a fea5 	bl	800c6b0 <Rte_Call_DCMotor_Set_Speed>
		Rte_Speed_DCMotor(DC_MOTOR_ID_1, g_Speed_1_u8);
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <Engine_MainFunction+0x1d8>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	2001      	movs	r0, #1
 800196e:	f00a fe9f 	bl	800c6b0 <Rte_Call_DCMotor_Set_Speed>
		Rte_Direction_DCMotor(DC_MOTOR_ID_0, g_Direction_u8);
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <Engine_MainFunction+0x1b8>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	2000      	movs	r0, #0
 800197a:	f00a feab 	bl	800c6d4 <Rte_Call_DCMotor_Set_Dir>
		Rte_Direction_DCMotor(DC_MOTOR_ID_1, g_Direction_u8);
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <Engine_MainFunction+0x1b8>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	2001      	movs	r0, #1
 8001986:	f00a fea5 	bl	800c6d4 <Rte_Call_DCMotor_Set_Dir>
	}
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000068 	.word	0x20000068
 8001994:	2000007a 	.word	0x2000007a
 8001998:	2000007b 	.word	0x2000007b
 800199c:	2000007c 	.word	0x2000007c
 80019a0:	2000007d 	.word	0x2000007d
 80019a4:	20000069 	.word	0x20000069
 80019a8:	2000006c 	.word	0x2000006c
 80019ac:	2000006e 	.word	0x2000006e
 80019b0:	20000071 	.word	0x20000071
 80019b4:	20000072 	.word	0x20000072
 80019b8:	20000074 	.word	0x20000074
 80019bc:	20000078 	.word	0x20000078
 80019c0:	2000006a 	.word	0x2000006a
 80019c4:	20000070 	.word	0x20000070
 80019c8:	41f00000 	.word	0x41f00000
 80019cc:	20000087 	.word	0x20000087
 80019d0:	20000084 	.word	0x20000084
 80019d4:	20000085 	.word	0x20000085
 80019d8:	20000080 	.word	0x20000080
 80019dc:	20000086 	.word	0x20000086
 80019e0:	2000007e 	.word	0x2000007e
 80019e4:	20000081 	.word	0x20000081
 80019e8:	2000007f 	.word	0x2000007f
 80019ec:	20000083 	.word	0x20000083
 80019f0:	20000082 	.word	0x20000082

080019f4 <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE_U16)
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <LED_UpdatePulseDirection+0x30>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001a00:	d302      	bcc.n	8001a08 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN_U8;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <LED_UpdatePulseDirection+0x34>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE_U16)
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <LED_UpdatePulseDirection+0x30>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d802      	bhi.n	8001a1a <LED_UpdatePulseDirection+0x26>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <LED_UpdatePulseDirection+0x34>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	2000008a 	.word	0x2000008a
 8001a28:	2000008c 	.word	0x2000008c

08001a2c <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP_U8 == g_LED_Pulse_Direction_u8)
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <LED_UpdatePulseWidth+0x48>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE_U16)
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <LED_UpdatePulseWidth+0x4c>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001a40:	d813      	bhi.n	8001a6a <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 + LED_FADE_PULSE_STEP_U16;
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <LED_UpdatePulseWidth+0x4c>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <LED_UpdatePulseWidth+0x4c>)
 8001a4e:	801a      	strh	r2, [r3, #0]
 8001a50:	e00b      	b.n	8001a6a <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP_U16)
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <LED_UpdatePulseWidth+0x4c>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a5a:	d306      	bcc.n	8001a6a <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 - LED_FADE_PULSE_STEP_U16;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <LED_UpdatePulseWidth+0x4c>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <LED_UpdatePulseWidth+0x4c>)
 8001a68:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 8001a6a:	f7ff ffc3 	bl	80019f4 <LED_UpdatePulseDirection>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000008c 	.word	0x2000008c
 8001a78:	2000008a 	.word	0x2000008a

08001a7c <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	g_LED_ButtonState_b = FALSE;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <LED_Init+0x34>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
	g_LED_Pulse_u16 = 0u;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <LED_Init+0x38>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	801a      	strh	r2, [r3, #0]
	g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <LED_Init+0x3c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <LED_Init+0x38>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00a fcec 	bl	800c474 <Rte_Cdd_Servo_RawMove>
	/* Read LED NvM block */
	Rte_Read_NvM_LED_Block(g_LED_NvMBlock_a);
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <LED_Init+0x40>)
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f00a fcf6 	bl	800c490 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <LED_Init+0x44>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000089 	.word	0x20000089
 8001ab4:	2000008a 	.word	0x2000008a
 8001ab8:	2000008c 	.word	0x2000008c
 8001abc:	20000090 	.word	0x20000090
 8001ac0:	20000088 	.word	0x20000088

08001ac4 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_LED_InitDone_b)
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <LED_MainFunction+0xa8>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d04b      	beq.n	8001b68 <LED_MainFunction+0xa4>
	{
		/* Rte read the global variable */
		Rte_Read_LED_Collision_Status(&g_LED_CollisionWarning_Status);
 8001ad0:	4827      	ldr	r0, [pc, #156]	; (8001b70 <LED_MainFunction+0xac>)
 8001ad2:	f00a fc5b 	bl	800c38c <Rte_Read_g_CollisionWarning_Status>
		switch(g_LED_CollisionWarning_Status)
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <LED_MainFunction+0xac>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d01a      	beq.n	8001b14 <LED_MainFunction+0x50>
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	dc22      	bgt.n	8001b28 <LED_MainFunction+0x64>
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <LED_MainFunction+0x28>
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d00a      	beq.n	8001b00 <LED_MainFunction+0x3c>
 8001aea:	e01d      	b.n	8001b28 <LED_MainFunction+0x64>
		{
			case 0:
			{
				Rte_Write_Green_LED_Status(TRUE);                                  /* Green LED  */
 8001aec:	2001      	movs	r0, #1
 8001aee:	f00a fd8b 	bl	800c608 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001af2:	2000      	movs	r0, #0
 8001af4:	f00a fda4 	bl	800c640 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001af8:	2000      	movs	r0, #0
 8001afa:	f00a fdbd 	bl	800c678 <Rte_Write_PB_15>
			}break;
 8001afe:	e01d      	b.n	8001b3c <LED_MainFunction+0x78>
			case 1:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001b00:	2000      	movs	r0, #0
 8001b02:	f00a fd81 	bl	800c608 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(TRUE);                                 /* Yellow LED */
 8001b06:	2001      	movs	r0, #1
 8001b08:	f00a fd9a 	bl	800c640 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f00a fdb3 	bl	800c678 <Rte_Write_PB_15>
			}break;
 8001b12:	e013      	b.n	8001b3c <LED_MainFunction+0x78>
			case 2:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001b14:	2000      	movs	r0, #0
 8001b16:	f00a fd77 	bl	800c608 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f00a fd90 	bl	800c640 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(TRUE);                                    /* Red LED    */
 8001b20:	2001      	movs	r0, #1
 8001b22:	f00a fda9 	bl	800c678 <Rte_Write_PB_15>
			}break;
 8001b26:	e009      	b.n	8001b3c <LED_MainFunction+0x78>
			default:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f00a fd6d 	bl	800c608 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f00a fd86 	bl	800c640 <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001b34:	2000      	movs	r0, #0
 8001b36:	f00a fd9f 	bl	800c678 <Rte_Write_PB_15>
			}break;
 8001b3a:	bf00      	nop
		}
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LED_MainFunction+0xb0>)
 8001b3e:	f00a fbf3 	bl	800c328 <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(FALSE != g_LED_ButtonState_b)
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <LED_MainFunction+0xb0>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <LED_MainFunction+0x96>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8001b4a:	f7ff ff6f 	bl	8001a2c <LED_UpdatePulseWidth>
			/* Call the Servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <LED_MainFunction+0xb4>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00a fc8e 	bl	800c474 <Rte_Cdd_Servo_RawMove>
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
			/* Stop fading */
		}

	}
}
 8001b58:	e006      	b.n	8001b68 <LED_MainFunction+0xa4>
			g_LED_NvMBlock_a[0] = 1u;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <LED_MainFunction+0xb8>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001b60:	4906      	ldr	r1, [pc, #24]	; (8001b7c <LED_MainFunction+0xb8>)
 8001b62:	2000      	movs	r0, #0
 8001b64:	f00a fcae 	bl	800c4c4 <Rte_Write_NvM_Block>
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000088 	.word	0x20000088
 8001b70:	200000b0 	.word	0x200000b0
 8001b74:	20000089 	.word	0x20000089
 8001b78:	2000008a 	.word	0x2000008a
 8001b7c:	20000090 	.word	0x20000090

08001b80 <LED_Shutdown>:
/**
  * @brief  Shutdown the LED module
  * @return None
  */
void LED_Shutdown(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	/* Write LED NvM block */
	Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001b84:	4904      	ldr	r1, [pc, #16]	; (8001b98 <LED_Shutdown+0x18>)
 8001b86:	2000      	movs	r0, #0
 8001b88:	f00a fc9c 	bl	800c4c4 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_LED_InitDone_b = FALSE;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <LED_Shutdown+0x1c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000090 	.word	0x20000090
 8001b9c:	20000088 	.word	0x20000088

08001ba0 <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	g_Left_Blinker_Status_b = FALSE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <Blinker_Init+0x30>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
	g_Right_Blinker_Status_b = FALSE;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <Blinker_Init+0x34>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
	Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <Blinker_Init+0x30>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00a fc19 	bl	800c3ec <Rte_Write_PC_2>
	Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <Blinker_Init+0x34>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f00a fc2e 	bl	800c420 <Rte_Write_PC_3>
	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <Blinker_Init+0x38>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200000b6 	.word	0x200000b6
 8001bd4:	200000b7 	.word	0x200000b7
 8001bd8:	200000b1 	.word	0x200000b1

08001bdc <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <Blinker_MainFunction+0xe0>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d167      	bne.n	8001cb8 <Blinker_MainFunction+0xdc>
	{
		Rte_Read_Blinker_Autobrakes_Status(&g_Bliker_Autobrakes_Status);
 8001be8:	4835      	ldr	r0, [pc, #212]	; (8001cc0 <Blinker_MainFunction+0xe4>)
 8001bea:	f00a fbef 	bl	800c3cc <Rte_Read_DIO_Autobrakes_State_b>

		if(TRUE == g_Bliker_Autobrakes_Status && FALSE == g_Bliker_Autobrakes_Previous_Status)
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <Blinker_MainFunction+0xe4>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10d      	bne.n	8001c12 <Blinker_MainFunction+0x36>
 8001bf6:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <Blinker_MainFunction+0xe8>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <Blinker_MainFunction+0x36>
		{
			g_Left_Blinker_Status_b = TRUE;
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <Blinker_MainFunction+0xec>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = TRUE;
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <Blinker_MainFunction+0xf0>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
			g_Bliker_Autobrakes_Previous_Status = TRUE;
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <Blinker_MainFunction+0xe8>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	e048      	b.n	8001ca4 <Blinker_MainFunction+0xc8>
		}
		else if(TRUE == g_Bliker_Autobrakes_Status && TRUE == g_Bliker_Autobrakes_Previous_Status)
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <Blinker_MainFunction+0xe4>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d136      	bne.n	8001c88 <Blinker_MainFunction+0xac>
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <Blinker_MainFunction+0xe8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d132      	bne.n	8001c88 <Blinker_MainFunction+0xac>
		{
			if(g_Blinker_Counter_u16 < 45)
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <Blinker_MainFunction+0xf4>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	2b2c      	cmp	r3, #44	; 0x2c
 8001c28:	d827      	bhi.n	8001c7a <Blinker_MainFunction+0x9e>
			{
				g_Blinker_Counter_u16++;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <Blinker_MainFunction+0xf4>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <Blinker_MainFunction+0xf4>)
 8001c34:	801a      	strh	r2, [r3, #0]
				if(0 == g_Blinker_Counter_u16 % 5)
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <Blinker_MainFunction+0xf4>)
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <Blinker_MainFunction+0xf8>)
 8001c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c40:	0899      	lsrs	r1, r3, #2
 8001c42:	460b      	mov	r3, r1
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d128      	bne.n	8001ca2 <Blinker_MainFunction+0xc6>
				{
					g_Left_Blinker_Status_b = !g_Left_Blinker_Status_b;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <Blinker_MainFunction+0xec>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <Blinker_MainFunction+0xec>)
 8001c62:	701a      	strb	r2, [r3, #0]
					g_Right_Blinker_Status_b = !g_Right_Blinker_Status_b;
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <Blinker_MainFunction+0xf0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <Blinker_MainFunction+0xf0>)
 8001c76:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 8001c78:	e013      	b.n	8001ca2 <Blinker_MainFunction+0xc6>
				}

			}
			else
			{
				g_Left_Blinker_Status_b = FALSE;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <Blinker_MainFunction+0xec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
				g_Right_Blinker_Status_b = FALSE;
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <Blinker_MainFunction+0xf0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 8001c86:	e00c      	b.n	8001ca2 <Blinker_MainFunction+0xc6>
			}
		}
		else
		{
			g_Bliker_Autobrakes_Previous_Status = FALSE;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <Blinker_MainFunction+0xe8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
			g_Blinker_Counter_u16 = 0;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <Blinker_MainFunction+0xf4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	801a      	strh	r2, [r3, #0]
			g_Left_Blinker_Status_b = FALSE;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <Blinker_MainFunction+0xec>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = FALSE;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <Blinker_MainFunction+0xf0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e000      	b.n	8001ca4 <Blinker_MainFunction+0xc8>
			if(g_Blinker_Counter_u16 < 45)
 8001ca2:	bf00      	nop
		}

		Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <Blinker_MainFunction+0xec>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00a fb9f 	bl	800c3ec <Rte_Write_PC_2>
		Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <Blinker_MainFunction+0xf0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00a fbb4 	bl	800c420 <Rte_Write_PC_3>
	}
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200000b1 	.word	0x200000b1
 8001cc0:	200000b2 	.word	0x200000b2
 8001cc4:	200000b3 	.word	0x200000b3
 8001cc8:	200000b6 	.word	0x200000b6
 8001ccc:	200000b7 	.word	0x200000b7
 8001cd0:	200000b4 	.word	0x200000b4
 8001cd4:	cccccccd 	.word	0xcccccccd

08001cd8 <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <FrontLights_Init+0x14>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200000b8 	.word	0x200000b8

08001cf0 <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <InteriorLights_Init+0x14>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	200000b9 	.word	0x200000b9

08001d14 <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <RearLights_Init+0x14>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200000ba 	.word	0x200000ba

08001d38 <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <Steering_Init+0x14>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200000bb 	.word	0x200000bb

08001d5c <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <Cdd_DCMotor_ConvertSpeedToARR>:
  * @brief	Cdd_DCMotor_ConvertSpeedToARR speed conversion function
  * @param	ub_Speed DC Motor speed in percents
  * @return	ARR speed value
  */
static uint16 Cdd_DCMotor_ConvertSpeedToARR(uint8 ub_Speed)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
	uint16 Speed_u16;
	if(ub_Speed < 100u)
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b63      	cmp	r3, #99	; 0x63
 8001d76:	d80b      	bhi.n	8001d90 <Cdd_DCMotor_ConvertSpeedToARR+0x28>
	{
		Speed_u16 = (uint16)(ub_Speed * 599);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	4611      	mov	r1, r2
 8001d84:	0109      	lsls	r1, r1, #4
 8001d86:	1a8a      	subs	r2, r1, r2
 8001d88:	00d2      	lsls	r2, r2, #3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	81fb      	strh	r3, [r7, #14]
 8001d8e:	e002      	b.n	8001d96 <Cdd_DCMotor_ConvertSpeedToARR+0x2e>
	}
	else
	{
		Speed_u16 = 59999;
 8001d90:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8001d94:	81fb      	strh	r3, [r7, #14]
	}

	return Speed_u16;
 8001d96:	89fb      	ldrh	r3, [r7, #14]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <Cdd_DCMotor_Driver_Init>:
/**
  * @brief	Cdd_DCMotor module initialization function
  * @return	None
  */
void Cdd_DCMotor_Driver_Init(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
    DC_MOTOR_Init(DC_MOTOR_ID_0);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f81a 	bl	8001de0 <DC_MOTOR_Init>
    DC_MOTOR_Init(DC_MOTOR_ID_1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f000 f817 	bl	8001de0 <DC_MOTOR_Init>
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <Cdd_DCMotor_Init>:
/**
  * @brief	Cdd_DCMotor module initialization function
  * @return	None
  */
void Cdd_DCMotor_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
    DC_MOTOR_Start(DC_MOTOR_ID_0, DC_MOTOR_DIR_CW, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 f9d1 	bl	8002168 <DC_MOTOR_Start>
    DC_MOTOR_Start(DC_MOTOR_ID_1, DC_MOTOR_DIR_CW, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f000 f9cc 	bl	8002168 <DC_MOTOR_Start>
	/* Set initialization flag to done */
	g_Cdd_DCMotor_InitDone_b = TRUE;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <Cdd_DCMotor_Init+0x24>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200000bc 	.word	0x200000bc

08001de0 <DC_MOTOR_Init>:

uint32 arr_val = 0;
void DC_MOTOR_Init(uint8 au8_MOTOR_Instance)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b0b0      	sub	sp, #192	; 0xc0
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32 ARR_Value = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001e38:	015b      	lsls	r3, r3, #5
 8001e3a:	4413      	add	r3, r2
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e42:	d008      	beq.n	8001e56 <DC_MOTOR_Init+0x76>
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001e48:	015b      	lsls	r3, r3, #5
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e54:	d10c      	bne.n	8001e70 <DC_MOTOR_Init+0x90>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4a33      	ldr	r2, [pc, #204]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	6153      	str	r3, [r2, #20]
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	e080      	b.n	8001f72 <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001e74:	015b      	lsls	r3, r3, #5
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <DC_MOTOR_Init+0x14c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d008      	beq.n	8001e92 <DC_MOTOR_Init+0xb2>
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001e84:	015b      	lsls	r3, r3, #5
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <DC_MOTOR_Init+0x14c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10c      	bne.n	8001eac <DC_MOTOR_Init+0xcc>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6153      	str	r3, [r2, #20]
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	e062      	b.n	8001f72 <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001eb0:	015b      	lsls	r3, r3, #5
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <DC_MOTOR_Init+0x150>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d008      	beq.n	8001ece <DC_MOTOR_Init+0xee>
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001ec0:	015b      	lsls	r3, r3, #5
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <DC_MOTOR_Init+0x150>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d10c      	bne.n	8001ee8 <DC_MOTOR_Init+0x108>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ed8:	6153      	str	r3, [r2, #20]
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	e044      	b.n	8001f72 <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001eec:	015b      	lsls	r3, r3, #5
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <DC_MOTOR_Init+0x154>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d008      	beq.n	8001f0a <DC_MOTOR_Init+0x12a>
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <DC_MOTOR_Init+0x144>)
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <DC_MOTOR_Init+0x154>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d116      	bne.n	8001f38 <DC_MOTOR_Init+0x158>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f14:	6153      	str	r3, [r2, #20]
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <DC_MOTOR_Init+0x148>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	e026      	b.n	8001f72 <DC_MOTOR_Init+0x192>
 8001f24:	0800c768 	.word	0x0800c768
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000c00 	.word	0x48000c00
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4a85      	ldr	r2, [pc, #532]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001f3c:	015b      	lsls	r3, r3, #5
 8001f3e:	4413      	add	r3, r2
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a84      	ldr	r2, [pc, #528]	; (8002154 <DC_MOTOR_Init+0x374>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d008      	beq.n	8001f5a <DC_MOTOR_Init+0x17a>
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4a81      	ldr	r2, [pc, #516]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001f4c:	015b      	lsls	r3, r3, #5
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a7f      	ldr	r2, [pc, #508]	; (8002154 <DC_MOTOR_Init+0x374>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10b      	bne.n	8001f72 <DC_MOTOR_Init+0x192>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <DC_MOTOR_Init+0x378>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4a7e      	ldr	r2, [pc, #504]	; (8002158 <DC_MOTOR_Init+0x378>)
 8001f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f64:	6153      	str	r3, [r2, #20]
 8001f66:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <DC_MOTOR_Init+0x378>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    }
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	4a76      	ldr	r2, [pc, #472]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	4413      	add	r3, r2
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4a6f      	ldr	r2, [pc, #444]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	4413      	add	r3, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fee0 	bl	8003d64 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	4413      	add	r3, r2
 8001fac:	330a      	adds	r3, #10
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4a63      	ldr	r2, [pc, #396]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fec6 	bl	8003d64 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	4a5d      	ldr	r2, [pc, #372]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001fdc:	015b      	lsls	r3, r3, #5
 8001fde:	4413      	add	r3, r2
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001fe6:	015b      	lsls	r3, r3, #5
 8001fe8:	4413      	add	r3, r2
 8001fea:	3308      	adds	r3, #8
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f002 f858 	bl	80040a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4a55      	ldr	r2, [pc, #340]	; (8002150 <DC_MOTOR_Init+0x370>)
 8001ffa:	015b      	lsls	r3, r3, #5
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <DC_MOTOR_Init+0x370>)
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	4413      	add	r3, r2
 800200a:	330a      	adds	r3, #10
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	f002 f848 	bl	80040a6 <HAL_GPIO_WritePin>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
	PSC_Value--;
	ARR_Value -= 2;
*/
	PSC_Value = 23;//(uint32) (DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz / 3600000.0);
 8002016:	2317      	movs	r3, #23
 8002018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	ARR_Value = (uint32) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz / (50*(PSC_Value+1.0)))-1.0);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4a4c      	ldr	r2, [pc, #304]	; (8002150 <DC_MOTOR_Init+0x370>)
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	4413      	add	r3, r2
 8002024:	3314      	adds	r3, #20
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa17 	bl	800045c <__aeabi_ui2d>
 800202e:	4604      	mov	r4, r0
 8002030:	460d      	mov	r5, r1
 8002032:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002036:	f7fe fa11 	bl	800045c <__aeabi_ui2d>
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <DC_MOTOR_Init+0x37c>)
 8002040:	f7fe f8d0 	bl	80001e4 <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <DC_MOTOR_Init+0x380>)
 8002052:	f7fe fa7d 	bl	8000550 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe fba1 	bl	80007a4 <__aeabi_ddiv>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b3b      	ldr	r3, [pc, #236]	; (800215c <DC_MOTOR_Init+0x37c>)
 8002070:	f7fe f8b6 	bl	80001e0 <__aeabi_dsub>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fc7a 	bl	8000974 <__aeabi_d2uiz>
 8002080:	4603      	mov	r3, r0
 8002082:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	arr_val = ARR_Value;
 8002086:	4a37      	ldr	r2, [pc, #220]	; (8002164 <DC_MOTOR_Init+0x384>)
 8002088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800208c:	6013      	str	r3, [r2, #0]
	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <DC_MOTOR_Init+0x370>)
 8002092:	015b      	lsls	r3, r3, #5
 8002094:	4413      	add	r3, r2
 8002096:	330c      	adds	r3, #12
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	623b      	str	r3, [r7, #32]
	htim.Init.Prescaler = PSC_Value;
 800209c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Period = ARR_Value;
 80020a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_TIM_Base_Init(&htim);
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fa61 	bl	8004580 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80020c6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 f8fb 	bl	80052cc <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80020d6:	f107 0320 	add.w	r3, r7, #32
 80020da:	4618      	mov	r0, r3
 80020dc:	f002 fb18 	bl	8004710 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80020ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020f0:	f107 0320 	add.w	r3, r7, #32
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 ff88 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fc:	2360      	movs	r3, #96	; 0x60
 80020fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.Pulse = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	673b      	str	r3, [r7, #112]	; 0x70
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <DC_MOTOR_Init+0x370>)
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	4413      	add	r3, r2
 8002114:	3310      	adds	r3, #16
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800211c:	f107 0320 	add.w	r3, r7, #32
 8002120:	4618      	mov	r0, r3
 8002122:	f002 ffbf 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8002126:	f107 0320 	add.w	r3, r7, #32
 800212a:	4618      	mov	r0, r3
 800212c:	f006 fa40 	bl	80085b0 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <DC_MOTOR_Init+0x370>)
 8002134:	015b      	lsls	r3, r3, #5
 8002136:	4413      	add	r3, r2
 8002138:	3310      	adds	r3, #16
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fb3c 	bl	80047c0 <HAL_TIM_PWM_Start>
}
 8002148:	bf00      	nop
 800214a:	37c0      	adds	r7, #192	; 0xc0
 800214c:	46bd      	mov	sp, r7
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	0800c768 	.word	0x0800c768
 8002154:	48001000 	.word	0x48001000
 8002158:	40021000 	.word	0x40021000
 800215c:	3ff00000 	.word	0x3ff00000
 8002160:	40490000 	.word	0x40490000
 8002164:	200000c0 	.word	0x200000c0

08002168 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8 au8_MOTOR_Instance, uint8 au8_DIR, uint8 au8_SPEED)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
 8002172:	460b      	mov	r3, r1
 8002174:	71bb      	strb	r3, [r7, #6]
 8002176:	4613      	mov	r3, r2
 8002178:	717b      	strb	r3, [r7, #5]
	uint16 au16_SPEED = Cdd_DCMotor_ConvertSpeedToARR(au8_SPEED);
 800217a:	797b      	ldrb	r3, [r7, #5]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fdf3 	bl	8001d68 <Cdd_DCMotor_ConvertSpeedToARR>
 8002182:	4603      	mov	r3, r0
 8002184:	81fb      	strh	r3, [r7, #14]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DC_MOTOR_DIR_CW)
 8002186:	79bb      	ldrb	r3, [r7, #6]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11f      	bne.n	80021cc <DC_MOTOR_Start+0x64>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4a40      	ldr	r2, [pc, #256]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002190:	015b      	lsls	r3, r3, #5
 8002192:	4413      	add	r3, r2
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <DC_MOTOR_Start+0x128>)
 800219a:	015b      	lsls	r3, r3, #5
 800219c:	4413      	add	r3, r2
 800219e:	3308      	adds	r3, #8
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4619      	mov	r1, r3
 80021a6:	f001 ff7e 	bl	80040a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	4a38      	ldr	r2, [pc, #224]	; (8002290 <DC_MOTOR_Start+0x128>)
 80021ae:	015b      	lsls	r3, r3, #5
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	4a35      	ldr	r2, [pc, #212]	; (8002290 <DC_MOTOR_Start+0x128>)
 80021ba:	015b      	lsls	r3, r3, #5
 80021bc:	4413      	add	r3, r2
 80021be:	330a      	adds	r3, #10
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	f001 ff6e 	bl	80040a6 <HAL_GPIO_WritePin>
 80021ca:	e021      	b.n	8002210 <DC_MOTOR_Start+0xa8>
	}
	else if(au8_DIR == DC_MOTOR_DIR_CCW)
 80021cc:	79bb      	ldrb	r3, [r7, #6]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d11e      	bne.n	8002210 <DC_MOTOR_Start+0xa8>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <DC_MOTOR_Start+0x128>)
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	4413      	add	r3, r2
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <DC_MOTOR_Start+0x128>)
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	4413      	add	r3, r2
 80021e4:	3308      	adds	r3, #8
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	4619      	mov	r1, r3
 80021ec:	f001 ff5b 	bl	80040a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <DC_MOTOR_Start+0x128>)
 80021f4:	015b      	lsls	r3, r3, #5
 80021f6:	4413      	add	r3, r2
 80021f8:	3304      	adds	r3, #4
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	4a24      	ldr	r2, [pc, #144]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	4413      	add	r3, r2
 8002204:	330a      	adds	r3, #10
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4619      	mov	r1, r3
 800220c:	f001 ff4b 	bl	80040a6 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002214:	015b      	lsls	r3, r3, #5
 8002216:	4413      	add	r3, r2
 8002218:	3310      	adds	r3, #16
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d108      	bne.n	8002232 <DC_MOTOR_Start+0xca>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002224:	015b      	lsls	r3, r3, #5
 8002226:	4413      	add	r3, r2
 8002228:	330c      	adds	r3, #12
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	89fa      	ldrh	r2, [r7, #14]
 800222e:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8002230:	e029      	b.n	8002286 <DC_MOTOR_Start+0x11e>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002236:	015b      	lsls	r3, r3, #5
 8002238:	4413      	add	r3, r2
 800223a:	3310      	adds	r3, #16
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b04      	cmp	r3, #4
 8002240:	d108      	bne.n	8002254 <DC_MOTOR_Start+0xec>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4a12      	ldr	r2, [pc, #72]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	4413      	add	r3, r2
 800224a:	330c      	adds	r3, #12
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	89fa      	ldrh	r2, [r7, #14]
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002252:	e018      	b.n	8002286 <DC_MOTOR_Start+0x11e>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002258:	015b      	lsls	r3, r3, #5
 800225a:	4413      	add	r3, r2
 800225c:	3310      	adds	r3, #16
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d108      	bne.n	8002276 <DC_MOTOR_Start+0x10e>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <DC_MOTOR_Start+0x128>)
 8002268:	015b      	lsls	r3, r3, #5
 800226a:	4413      	add	r3, r2
 800226c:	330c      	adds	r3, #12
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	89fa      	ldrh	r2, [r7, #14]
 8002272:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002274:	e007      	b.n	8002286 <DC_MOTOR_Start+0x11e>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	4a05      	ldr	r2, [pc, #20]	; (8002290 <DC_MOTOR_Start+0x128>)
 800227a:	015b      	lsls	r3, r3, #5
 800227c:	4413      	add	r3, r2
 800227e:	330c      	adds	r3, #12
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	89fa      	ldrh	r2, [r7, #14]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	0800c768 	.word	0x0800c768

08002294 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8 au8_MOTOR_Instance, uint8 au8_SPEED)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	460a      	mov	r2, r1
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71bb      	strb	r3, [r7, #6]
	uint16 au16_SPEED = Cdd_DCMotor_ConvertSpeedToARR(au8_SPEED);
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fd5e 	bl	8001d68 <Cdd_DCMotor_ConvertSpeedToARR>
 80022ac:	4603      	mov	r3, r0
 80022ae:	81fb      	strh	r3, [r7, #14]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <DC_MOTOR_Set_Speed+0x9c>)
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	4413      	add	r3, r2
 80022b8:	3310      	adds	r3, #16
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d108      	bne.n	80022d2 <DC_MOTOR_Set_Speed+0x3e>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <DC_MOTOR_Set_Speed+0x9c>)
 80022c4:	015b      	lsls	r3, r3, #5
 80022c6:	4413      	add	r3, r2
 80022c8:	330c      	adds	r3, #12
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	89fa      	ldrh	r2, [r7, #14]
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80022d0:	e029      	b.n	8002326 <DC_MOTOR_Set_Speed+0x92>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	4a16      	ldr	r2, [pc, #88]	; (8002330 <DC_MOTOR_Set_Speed+0x9c>)
 80022d6:	015b      	lsls	r3, r3, #5
 80022d8:	4413      	add	r3, r2
 80022da:	3310      	adds	r3, #16
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d108      	bne.n	80022f4 <DC_MOTOR_Set_Speed+0x60>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <DC_MOTOR_Set_Speed+0x9c>)
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	4413      	add	r3, r2
 80022ea:	330c      	adds	r3, #12
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	89fa      	ldrh	r2, [r7, #14]
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022f2:	e018      	b.n	8002326 <DC_MOTOR_Set_Speed+0x92>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <DC_MOTOR_Set_Speed+0x9c>)
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	4413      	add	r3, r2
 80022fc:	3310      	adds	r3, #16
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d108      	bne.n	8002316 <DC_MOTOR_Set_Speed+0x82>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <DC_MOTOR_Set_Speed+0x9c>)
 8002308:	015b      	lsls	r3, r3, #5
 800230a:	4413      	add	r3, r2
 800230c:	330c      	adds	r3, #12
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	89fa      	ldrh	r2, [r7, #14]
 8002312:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002314:	e007      	b.n	8002326 <DC_MOTOR_Set_Speed+0x92>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4a05      	ldr	r2, [pc, #20]	; (8002330 <DC_MOTOR_Set_Speed+0x9c>)
 800231a:	015b      	lsls	r3, r3, #5
 800231c:	4413      	add	r3, r2
 800231e:	330c      	adds	r3, #12
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	89fa      	ldrh	r2, [r7, #14]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	0800c768 	.word	0x0800c768

08002334 <DC_MOTOR_Set_Dir>:

void DC_MOTOR_Set_Dir(uint8 au8_MOTOR_Instance, uint8 au8_DIR)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	460a      	mov	r2, r1
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	71bb      	strb	r3, [r7, #6]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DC_MOTOR_DIR_CW)
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11f      	bne.n	800238a <DC_MOTOR_Set_Dir+0x56>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 800234e:	015b      	lsls	r3, r3, #5
 8002350:	4413      	add	r3, r2
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 8002358:	015b      	lsls	r3, r3, #5
 800235a:	4413      	add	r3, r2
 800235c:	3308      	adds	r3, #8
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	2201      	movs	r2, #1
 8002362:	4619      	mov	r1, r3
 8002364:	f001 fe9f 	bl	80040a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 800236c:	015b      	lsls	r3, r3, #5
 800236e:	4413      	add	r3, r2
 8002370:	3304      	adds	r3, #4
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 8002378:	015b      	lsls	r3, r3, #5
 800237a:	4413      	add	r3, r2
 800237c:	330a      	adds	r3, #10
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	4619      	mov	r1, r3
 8002384:	f001 fe8f 	bl	80040a6 <HAL_GPIO_WritePin>
	}
	else
	{

	}
}
 8002388:	e021      	b.n	80023ce <DC_MOTOR_Set_Dir+0x9a>
	else if(au8_DIR == DC_MOTOR_DIR_CCW)
 800238a:	79bb      	ldrb	r3, [r7, #6]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d11e      	bne.n	80023ce <DC_MOTOR_Set_Dir+0x9a>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	4413      	add	r3, r2
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 800239e:	015b      	lsls	r3, r3, #5
 80023a0:	4413      	add	r3, r2
 80023a2:	3308      	adds	r3, #8
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	f001 fe7c 	bl	80040a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 80023b2:	015b      	lsls	r3, r3, #5
 80023b4:	4413      	add	r3, r2
 80023b6:	3304      	adds	r3, #4
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <DC_MOTOR_Set_Dir+0xa4>)
 80023be:	015b      	lsls	r3, r3, #5
 80023c0:	4413      	add	r3, r2
 80023c2:	330a      	adds	r3, #10
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4619      	mov	r1, r3
 80023ca:	f001 fe6c 	bl	80040a6 <HAL_GPIO_WritePin>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	0800c768 	.word	0x0800c768

080023dc <Cdd_DCMotor_MainFunction>:
  */
int inc = 0;
uint32 freq = 0;
uint8 dir = 0;
void Cdd_DCMotor_MainFunction(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

		DC_MOTOR_Set_Speed(DC_MOTOR_ID_0, inc);
		DC_MOTOR_Set_Speed(DC_MOTOR_ID_1, inc);*/

	}
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <Cdd_Servo_Driver_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Driver_Init(void)
{
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b09e      	sub	sp, #120	; 0x78
 80023ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef l_GPIO_InitStruct_s = {0};
 80023ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef l_ClockSourceConfig_s = {0};
 80023fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef l_MasterConfig_s = {0};
 800240c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef l_ConfigOC_s = {0};
 8002418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
 8002428:	615a      	str	r2, [r3, #20]
 800242a:	619a      	str	r2, [r3, #24]
    uint32 l_PSC_Value_u32 = 0UL;
 800242c:	2300      	movs	r3, #0
 800242e:	677b      	str	r3, [r7, #116]	; 0x74
    uint32 l_ARR_Value_u32 = 0UL;
 8002430:	2300      	movs	r3, #0
 8002432:	673b      	str	r3, [r7, #112]	; 0x70
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 8002434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002438:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800243c:	d10c      	bne.n	8002458 <Cdd_Servo_Driver_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4a6b      	ldr	r2, [pc, #428]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	6153      	str	r3, [r2, #20]
 800244a:	4b69      	ldr	r3, [pc, #420]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	e046      	b.n	80024e6 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 8002458:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800245c:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <Cdd_Servo_Driver_Init+0x20c>)
 800245e:	429a      	cmp	r2, r3
 8002460:	d10c      	bne.n	800247c <Cdd_Servo_Driver_Init+0x94>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	4a62      	ldr	r2, [pc, #392]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6153      	str	r3, [r2, #20]
 800246e:	4b60      	ldr	r3, [pc, #384]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	e034      	b.n	80024e6 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 800247c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002480:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <Cdd_Servo_Driver_Init+0x210>)
 8002482:	429a      	cmp	r2, r3
 8002484:	d10c      	bne.n	80024a0 <Cdd_Servo_Driver_Init+0xb8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002486:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4a59      	ldr	r2, [pc, #356]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 800248c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002490:	6153      	str	r3, [r2, #20]
 8002492:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	e022      	b.n	80024e6 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 80024a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024a4:	4b55      	ldr	r3, [pc, #340]	; (80025fc <Cdd_Servo_Driver_Init+0x214>)
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d10c      	bne.n	80024c4 <Cdd_Servo_Driver_Init+0xdc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80024aa:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4a50      	ldr	r2, [pc, #320]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80024b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b4:	6153      	str	r3, [r2, #20]
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	e010      	b.n	80024e6 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 80024c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024c8:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <Cdd_Servo_Driver_Init+0x218>)
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d10b      	bne.n	80024e6 <Cdd_Servo_Driver_Init+0xfe>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ce:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4a47      	ldr	r2, [pc, #284]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80024d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024d8:	6153      	str	r3, [r2, #20]
 80024da:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
    }
	l_GPIO_InitStruct_s.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 80024e6:	2320      	movs	r3, #32
 80024e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	l_GPIO_InitStruct_s.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	663b      	str	r3, [r7, #96]	; 0x60
	l_GPIO_InitStruct_s.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	66bb      	str	r3, [r7, #104]	; 0x68
	l_GPIO_InitStruct_s.Alternate = GPIO_AF1_TIM2;
 80024f2:	2301      	movs	r3, #1
 80024f4:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &l_GPIO_InitStruct_s);
 80024f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024fe:	4619      	mov	r1, r3
 8002500:	4610      	mov	r0, r2
 8002502:	f001 fc2f 	bl	8003d64 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	l_PSC_Value_u32 = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 8002506:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <Cdd_Servo_Driver_Init+0x21c>)
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd ffa7 	bl	800045c <__aeabi_ui2d>
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <Cdd_Servo_Driver_Init+0x220>)
 8002514:	f7fe f946 	bl	80007a4 <__aeabi_ddiv>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe fa28 	bl	8000974 <__aeabi_d2uiz>
 8002524:	4603      	mov	r3, r0
 8002526:	677b      	str	r3, [r7, #116]	; 0x74
	l_ARR_Value_u32 = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(l_PSC_Value_u32+1.0)))-1.0);
 8002528:	4b36      	ldr	r3, [pc, #216]	; (8002604 <Cdd_Servo_Driver_Init+0x21c>)
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd ff96 	bl	800045c <__aeabi_ui2d>
 8002530:	4604      	mov	r4, r0
 8002532:	460d      	mov	r5, r1
 8002534:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002536:	f7fd ff91 	bl	800045c <__aeabi_ui2d>
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <Cdd_Servo_Driver_Init+0x224>)
 8002540:	f7fd fe50 	bl	80001e4 <__adddf3>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <Cdd_Servo_Driver_Init+0x228>)
 8002552:	f7fd fffd 	bl	8000550 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fe f921 	bl	80007a4 <__aeabi_ddiv>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <Cdd_Servo_Driver_Init+0x224>)
 8002570:	f7fd fe36 	bl	80001e0 <__aeabi_dsub>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	f7fe f9fa 	bl	8000974 <__aeabi_d2uiz>
 8002580:	4603      	mov	r3, r0
 8002582:	673b      	str	r3, [r7, #112]	; 0x70

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 8002584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <Cdd_Servo_Driver_Init+0x22c>)
 800258a:	429a      	cmp	r2, r3
 800258c:	d10c      	bne.n	80025a8 <Cdd_Servo_Driver_Init+0x1c0>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 8002594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002598:	6193      	str	r3, [r2, #24]
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e04a      	b.n	800263e <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 80025a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d10c      	bne.n	80025cc <Cdd_Servo_Driver_Init+0x1e4>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	e038      	b.n	800263e <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 80025cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <Cdd_Servo_Driver_Init+0x230>)
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d122      	bne.n	800261c <Cdd_Servo_Driver_Init+0x234>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	61d3      	str	r3, [r2, #28]
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <Cdd_Servo_Driver_Init+0x208>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	e026      	b.n	800263e <Cdd_Servo_Driver_Init+0x256>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	48000400 	.word	0x48000400
 80025f8:	48000800 	.word	0x48000800
 80025fc:	48000c00 	.word	0x48000c00
 8002600:	48001000 	.word	0x48001000
 8002604:	044aa200 	.word	0x044aa200
 8002608:	41490000 	.word	0x41490000
 800260c:	3ff00000 	.word	0x3ff00000
 8002610:	40490000 	.word	0x40490000
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 800261c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002620:	4b45      	ldr	r3, [pc, #276]	; (8002738 <Cdd_Servo_Driver_Init+0x350>)
 8002622:	429a      	cmp	r2, r3
 8002624:	d10b      	bne.n	800263e <Cdd_Servo_Driver_Init+0x256>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002626:	4b45      	ldr	r3, [pc, #276]	; (800273c <Cdd_Servo_Driver_Init+0x354>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4a44      	ldr	r2, [pc, #272]	; (800273c <Cdd_Servo_Driver_Init+0x354>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	61d3      	str	r3, [r2, #28]
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <Cdd_Servo_Driver_Init+0x354>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
	}

	g_TimerHandler_s.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 800263e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002642:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 8002644:	601a      	str	r2, [r3, #0]
	g_TimerHandler_s.Init.Prescaler = l_PSC_Value_u32;
 8002646:	4a3e      	ldr	r2, [pc, #248]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 8002648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800264a:	6053      	str	r3, [r2, #4]
	g_TimerHandler_s.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
	g_TimerHandler_s.Init.Period = l_ARR_Value_u32;
 8002652:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 8002654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002656:	60d3      	str	r3, [r2, #12]
	g_TimerHandler_s.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
	g_TimerHandler_s.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&g_TimerHandler_s);
 8002664:	4836      	ldr	r0, [pc, #216]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 8002666:	f001 ff8b 	bl	8004580 <HAL_TIM_Base_Init>
	l_ClockSourceConfig_s.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_TIM_ConfigClockSource(&g_TimerHandler_s, &l_ClockSourceConfig_s);
 8002670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002674:	4619      	mov	r1, r3
 8002676:	4832      	ldr	r0, [pc, #200]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 8002678:	f002 fe28 	bl	80052cc <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&g_TimerHandler_s);
 800267c:	4830      	ldr	r0, [pc, #192]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 800267e:	f002 f847 	bl	8004710 <HAL_TIM_PWM_Init>
	l_MasterConfig_s.MasterOutputTrigger = TIM_TRGO_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	643b      	str	r3, [r7, #64]	; 0x40
	l_MasterConfig_s.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIMEx_MasterConfigSynchronization(&g_TimerHandler_s, &l_MasterConfig_s);
 800268a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800268e:	4619      	mov	r1, r3
 8002690:	482b      	ldr	r0, [pc, #172]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 8002692:	f003 fcbb 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
	l_ConfigOC_s.OCMode = TIM_OCMODE_PWM1;
 8002696:	2360      	movs	r3, #96	; 0x60
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
	l_ConfigOC_s.Pulse = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
	l_ConfigOC_s.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	l_ConfigOC_s.OCFastMode = TIM_OCFAST_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_ConfigChannel(&g_TimerHandler_s, &l_ConfigOC_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 80026a6:	2200      	movs	r2, #0
 80026a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	4824      	ldr	r0, [pc, #144]	; (8002740 <Cdd_Servo_Driver_Init+0x358>)
 80026b0:	f002 fcf8 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	g_SERVO_info_s.Period_Min_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MinPulse/20.0));
 80026b4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80026b6:	f7fd fed1 	bl	800045c <__aeabi_ui2d>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd feec 	bl	80004a0 <__aeabi_f2d>
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <Cdd_Servo_Driver_Init+0x35c>)
 80026ce:	f7fe f869 	bl	80007a4 <__aeabi_ddiv>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f7fd ff39 	bl	8000550 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe f945 	bl	8000974 <__aeabi_d2uiz>
 80026ea:	4603      	mov	r3, r0
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <Cdd_Servo_Driver_Init+0x360>)
 80026f0:	801a      	strh	r2, [r3, #0]
	g_SERVO_info_s.Period_Max_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 80026f2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80026f4:	f7fd feb2 	bl	800045c <__aeabi_ui2d>
 80026f8:	4604      	mov	r4, r0
 80026fa:	460d      	mov	r5, r1
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <Cdd_Servo_Driver_Init+0x364>)
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd fece 	bl	80004a0 <__aeabi_f2d>
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <Cdd_Servo_Driver_Init+0x35c>)
 800270a:	f7fe f84b 	bl	80007a4 <__aeabi_ddiv>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd ff1b 	bl	8000550 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe f927 	bl	8000974 <__aeabi_d2uiz>
 8002726:	4603      	mov	r3, r0
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <Cdd_Servo_Driver_Init+0x360>)
 800272c:	805a      	strh	r2, [r3, #2]
}
 800272e:	bf00      	nop
 8002730:	3778      	adds	r7, #120	; 0x78
 8002732:	46bd      	mov	sp, r7
 8002734:	bdb0      	pop	{r4, r5, r7, pc}
 8002736:	bf00      	nop
 8002738:	40000800 	.word	0x40000800
 800273c:	40021000 	.word	0x40021000
 8002740:	200000c4 	.word	0x200000c4
 8002744:	40340000 	.word	0x40340000
 8002748:	20000110 	.word	0x20000110
 800274c:	41a00000 	.word	0x41a00000

08002750 <Cdd_Servo_Init>:

void Cdd_Servo_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
	/*--------[ Start The PWM Channel ]-------*/
	HAL_TIM_PWM_Start(&g_TimerHandler_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8002754:	2300      	movs	r3, #0
 8002756:	4619      	mov	r1, r3
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <Cdd_Servo_Init+0x14>)
 800275a:	f002 f831 	bl	80047c0 <HAL_TIM_PWM_Start>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200000c4 	.word	0x200000c4

08002768 <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= g_SERVO_info_s.Period_Max_u16 && Pulse >= g_SERVO_info_s.Period_Min_u16)
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <Cdd_Servo_RawMove+0x30>)
 8002774:	885b      	ldrh	r3, [r3, #2]
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	429a      	cmp	r2, r3
 800277a:	d807      	bhi.n	800278c <Cdd_Servo_RawMove+0x24>
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <Cdd_Servo_RawMove+0x30>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <Cdd_Servo_RawMove+0x34>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	6013      	str	r3, [r2, #0]
	}
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000110 	.word	0x20000110
 800279c:	40000034 	.word	0x40000034

080027a0 <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <Cdd_Ultrasonic_Trigger>:
/**
  * @brief	Cdd_Ultrasonic module trigger measurement function
  * @return	None
  */
static void Cdd_Ultrasonic_Trigger(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	Rte_Call_TriggerUltrasonicMeasurement();
 80027b0:	f009 fd90 	bl	800c2d4 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <Cdd_Ultrasonic_ISR_CaptureCallback>:
  * @brief	Cdd_Ultrasonic capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	uint32 l_PS_u32 = 0UL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance) && (htim->Channel == g_Cdd_Ultrasonic_Info_s.ACTIV_CH))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a89      	ldr	r2, [pc, #548]	; (80029f0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f040 810b 	bne.w	80029e6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7f1a      	ldrb	r2, [r3, #28]
 80027d4:	4b87      	ldr	r3, [pc, #540]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80027d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027da:	429a      	cmp	r2, r3
 80027dc:	f040 8103 	bne.w	80029e6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
	{
		if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 0u)
 80027e0:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d166      	bne.n	80028b6 <Cdd_Ultrasonic_ISR_CaptureCallback+0xfe>
		{
			/* Capture T1 & Reverse The ICU Edge Polarity */
			g_Cdd_Ultrasonic_Info_s.T1 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 80027e8:	2300      	movs	r3, #0
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f002 fe37 	bl	8005460 <HAL_TIM_ReadCapturedValue>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4a7f      	ldr	r2, [pc, #508]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80027f6:	60d3      	str	r3, [r2, #12]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 1u;
 80027f8:	4b7e      	ldr	r3, [pc, #504]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <Cdd_Ultrasonic_ISR_CaptureCallback+0x5e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 020a 	bic.w	r2, r2, #10
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	e01f      	b.n	8002856 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8002816:	2300      	movs	r3, #0
 8002818:	2b04      	cmp	r3, #4
 800281a:	d108      	bne.n	800282e <Cdd_Ultrasonic_ISR_CaptureCallback+0x76>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e013      	b.n	8002856 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 800282e:	2300      	movs	r3, #0
 8002830:	2b08      	cmp	r3, #8
 8002832:	d108      	bne.n	8002846 <Cdd_Ultrasonic_ISR_CaptureCallback+0x8e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	e007      	b.n	8002856 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <Cdd_Ultrasonic_ISR_CaptureCallback+0xb6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0202 	orr.w	r2, r2, #2
 800286a:	621a      	str	r2, [r3, #32]
 800286c:	e01f      	b.n	80028ae <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 800286e:	2300      	movs	r3, #0
 8002870:	2b04      	cmp	r3, #4
 8002872:	d108      	bne.n	8002886 <Cdd_Ultrasonic_ISR_CaptureCallback+0xce>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	6213      	str	r3, [r2, #32]
 8002884:	e013      	b.n	80028ae <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8002886:	2300      	movs	r3, #0
 8002888:	2b08      	cmp	r3, #8
 800288a:	d108      	bne.n	800289e <Cdd_Ultrasonic_ISR_CaptureCallback+0xe6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	e007      	b.n	80028ae <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ac:	6213      	str	r3, [r2, #32]
			g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 80028ae:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	805a      	strh	r2, [r3, #2]
		else
		{
			/* Nothing to do */
		}
	}
}
 80028b4:	e097      	b.n	80029e6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
		else if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 1u)
 80028b6:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	f040 8093 	bne.w	80029e6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			l_PS_u32 = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 80028c0:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	60fb      	str	r3, [r7, #12]
			g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	4a4a      	ldr	r2, [pc, #296]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028cc:	6093      	str	r3, [r2, #8]
			g_Cdd_Ultrasonic_Info_s.T2 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 80028ce:	2300      	movs	r3, #0
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f002 fdc4 	bl	8005460 <HAL_TIM_ReadCapturedValue>
 80028d8:	4603      	mov	r3, r0
 80028da:	4a46      	ldr	r2, [pc, #280]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028dc:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.T2 += (g_Cdd_Ultrasonic_Info_s.TMR_OVC * (g_Cdd_Ultrasonic_Info_s.TMR_ARR+1u));
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028e4:	885b      	ldrh	r3, [r3, #2]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	4a3f      	ldr	r2, [pc, #252]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028f6:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.DIFF = g_Cdd_Ultrasonic_Info_s.T2 - g_Cdd_Ultrasonic_Info_s.T1;
 80028f8:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	4a3c      	ldr	r2, [pc, #240]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002904:	6153      	str	r3, [r2, #20]
			g_Cdd_Ultrasonic_Info_s.DISTANCE = (g_Cdd_Ultrasonic_Info_s.DIFF * CDD_ULTRASONIC_DISTANCE_SCALE_FACTOR_F32)/(c_Cdd_Ultrasonic_CfgType_s.TIM_CLK_MHz/(l_PS_u32+1u));
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f908 	bl	8000b20 <__aeabi_ui2f>
 8002910:	4603      	mov	r3, r0
 8002912:	4939      	ldr	r1, [pc, #228]	; (80029f8 <Cdd_Ultrasonic_ISR_CaptureCallback+0x240>)
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe f95b 	bl	8000bd0 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	461c      	mov	r4, r3
 800291e:	2248      	movs	r2, #72	; 0x48
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3301      	adds	r3, #1
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe f8f9 	bl	8000b20 <__aeabi_ui2f>
 800292e:	4603      	mov	r3, r0
 8002930:	4619      	mov	r1, r3
 8002932:	4620      	mov	r0, r4
 8002934:	f7fe fa00 	bl	8000d38 <__aeabi_fdiv>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800293e:	619a      	str	r2, [r3, #24]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 0u;
 8002940:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d108      	bne.n	800295e <Cdd_Ultrasonic_ISR_CaptureCallback+0x1a6>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 020a 	bic.w	r2, r2, #10
 800295a:	621a      	str	r2, [r3, #32]
 800295c:	e01f      	b.n	800299e <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 800295e:	2300      	movs	r3, #0
 8002960:	2b04      	cmp	r3, #4
 8002962:	d108      	bne.n	8002976 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1be>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	e013      	b.n	800299e <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8002976:	2300      	movs	r3, #0
 8002978:	2b08      	cmp	r3, #8
 800297a:	d108      	bne.n	800298e <Cdd_Ultrasonic_ISR_CaptureCallback+0x1d6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e007      	b.n	800299e <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1fa>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a12      	ldr	r2, [r2, #32]
 80029ae:	621a      	str	r2, [r3, #32]
}
 80029b0:	e019      	b.n	80029e6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d106      	bne.n	80029c6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x20e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	6213      	str	r3, [r2, #32]
}
 80029c4:	e00f      	b.n	80029e6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80029c6:	2300      	movs	r3, #0
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d106      	bne.n	80029da <Cdd_Ultrasonic_ISR_CaptureCallback+0x222>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	6213      	str	r3, [r2, #32]
}
 80029d8:	e005      	b.n	80029e6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	6213      	str	r3, [r2, #32]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40000400 	.word	0x40000400
 80029f4:	20000160 	.word	0x20000160
 80029f8:	3c8b4396 	.word	0x3c8b4396

080029fc <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	if(htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x28>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d105      	bne.n	8002a1a <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x1e>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_OVC++;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8002a10:	885b      	ldrh	r3, [r3, #2]
 8002a12:	3301      	adds	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8002a18:	805a      	strh	r2, [r3, #2]
	}
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40000400 	.word	0x40000400
 8002a28:	20000160 	.word	0x20000160

08002a2c <Cdd_Ultrasonic_Init>:
/**
  * @brief	Cdd_Ultrasonic module initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	if(TRUE == g_Cdd_Ultrasonic_DriverInitDone_b)
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <Cdd_Ultrasonic_Init+0x28>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10a      	bne.n	8002a4e <Cdd_Ultrasonic_Init+0x22>
	{
		/*--------[ Start The ICU Channel ]-------*/
		HAL_TIM_Base_Start_IT(&htim3);
 8002a38:	4807      	ldr	r0, [pc, #28]	; (8002a58 <Cdd_Ultrasonic_Init+0x2c>)
 8002a3a:	f001 fdf9 	bl	8004630 <HAL_TIM_Base_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <Cdd_Ultrasonic_Init+0x2c>)
 8002a44:	f002 f828 	bl	8004a98 <HAL_TIM_IC_Start_IT>
		/* Set initialization flag to done */
		g_Cdd_Ultrasonic_InitDone_b = TRUE;
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <Cdd_Ultrasonic_Init+0x30>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
	}
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000185 	.word	0x20000185
 8002a58:	20000114 	.word	0x20000114
 8002a5c:	20000184 	.word	0x20000184

08002a60 <Cdd_Ultrasonic_Driver_Init>:
/**
  * @brief	Cdd_Ultrasonic module driver initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Driver_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b096      	sub	sp, #88	; 0x58
 8002a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8002a66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]

    /*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOA)
 8002a9e:	4b6e      	ldr	r3, [pc, #440]	; (8002c58 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002aa0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aa4:	d10c      	bne.n	8002ac0 <Cdd_Ultrasonic_Driver_Init+0x60>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4a6c      	ldr	r2, [pc, #432]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	6153      	str	r3, [r2, #20]
 8002ab2:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	e042      	b.n	8002b46 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOB)
 8002ac0:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002ac2:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d10c      	bne.n	8002ae2 <Cdd_Ultrasonic_Driver_Init+0x82>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4a63      	ldr	r2, [pc, #396]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad2:	6153      	str	r3, [r2, #20]
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	e031      	b.n	8002b46 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOC)
 8002ae2:	4a5d      	ldr	r2, [pc, #372]	; (8002c58 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <Cdd_Ultrasonic_Driver_Init+0x200>)
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d10c      	bne.n	8002b04 <Cdd_Ultrasonic_Driver_Init+0xa4>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002af4:	6153      	str	r3, [r2, #20]
 8002af6:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	e020      	b.n	8002b46 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOD)
 8002b04:	4a54      	ldr	r2, [pc, #336]	; (8002c58 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <Cdd_Ultrasonic_Driver_Init+0x204>)
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d10c      	bne.n	8002b26 <Cdd_Ultrasonic_Driver_Init+0xc6>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b16:	6153      	str	r3, [r2, #20]
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	e00f      	b.n	8002b46 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOE)
 8002b26:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <Cdd_Ultrasonic_Driver_Init+0x208>)
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d10b      	bne.n	8002b46 <Cdd_Ultrasonic_Driver_Init+0xe6>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b2e:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	4a4a      	ldr	r2, [pc, #296]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b38:	6153      	str	r3, [r2, #20]
 8002b3a:	4b48      	ldr	r3, [pc, #288]	; (8002c5c <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
    }
    TRIG_GPIO_InitStruct.Pin = c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN;
 8002b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4a:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8002b58:	4a3f      	ldr	r2, [pc, #252]	; (8002c58 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002b5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f001 f8ff 	bl	8003d64 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	g_Cdd_Ultrasonic_Info_s.TMR_PSC = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	4a41      	ldr	r2, [pc, #260]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b6c:	6053      	str	r3, [r2, #4]
	g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b74:	6093      	str	r3, [r2, #8]
	g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	805a      	strh	r2, [r3, #2]
	g_Cdd_Ultrasonic_Info_s.HTIM = &htim3;
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b7e:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b80:	61da      	str	r2, [r3, #28]
	if(g_Cdd_Ultrasonic_Info_s.TMR_ARR == 0u)
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <Cdd_Ultrasonic_Driver_Init+0x132>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_ARR = 65535u;
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b90:	609a      	str	r2, [r3, #8]
	}
	if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_1)
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <Cdd_Ultrasonic_Driver_Init+0x142>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2020 	strb.w	r2, [r3, #32]
 8002ba0:	e016      	b.n	8002bd0 <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_2)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d104      	bne.n	8002bb2 <Cdd_Ultrasonic_Driver_Init+0x152>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]
 8002bb0:	e00e      	b.n	8002bd0 <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_3)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d104      	bne.n	8002bc2 <Cdd_Ultrasonic_Driver_Init+0x162>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002bba:	2204      	movs	r2, #4
 8002bbc:	f883 2020 	strb.w	r2, [r3, #32]
 8002bc0:	e006      	b.n	8002bd0 <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_4)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d103      	bne.n	8002bd0 <Cdd_Ultrasonic_Driver_Init+0x170>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002bca:	2208      	movs	r2, #8
 8002bcc:	f883 2020 	strb.w	r2, [r3, #32]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/
	htim3.Instance = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance;
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002bd2:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002bd4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = g_Cdd_Ultrasonic_Info_s.TMR_PSC;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002bdc:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = g_Cdd_Ultrasonic_Info_s.TMR_ARR;
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002bea:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 8002bf8:	481e      	ldr	r0, [pc, #120]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002bfa:	f001 fcc1 	bl	8004580 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8002c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c08:	4619      	mov	r1, r3
 8002c0a:	481a      	ldr	r0, [pc, #104]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c0c:	f002 fb5e 	bl	80052cc <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim3);
 8002c10:	4818      	ldr	r0, [pc, #96]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c12:	f001 fee1 	bl	80049d8 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8002c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c22:	4619      	mov	r1, r3
 8002c24:	4813      	ldr	r0, [pc, #76]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c26:	f003 f9f1 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f107 0318 	add.w	r3, r7, #24
 8002c40:	4619      	mov	r1, r3
 8002c42:	480c      	ldr	r0, [pc, #48]	; (8002c74 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002c44:	f002 f991 	bl	8004f6a <HAL_TIM_IC_ConfigChannel>
	/* Set driver initialization flag to done */
	g_Cdd_Ultrasonic_DriverInitDone_b = TRUE;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <Cdd_Ultrasonic_Driver_Init+0x218>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	3758      	adds	r7, #88	; 0x58
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	48000800 	.word	0x48000800
 8002c64:	48000c00 	.word	0x48000c00
 8002c68:	48001000 	.word	0x48001000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	20000160 	.word	0x20000160
 8002c74:	20000114 	.word	0x20000114
 8002c78:	20000185 	.word	0x20000185

08002c7c <Cdd_Ultrasonic_MainFunction>:
/**
  * @brief	Cdd_Ultrasonic module main function (runs in task)
  * @return	None
  */
void Cdd_Ultrasonic_MainFunction(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Cdd_Ultrasonic_InitDone_b)
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <Cdd_Ultrasonic_MainFunction+0x2c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10c      	bne.n	8002ca2 <Cdd_Ultrasonic_MainFunction+0x26>
	{
		/* Trigger measurement every 2nd cycle ( 20ms = 2 * task cycle ) */
		if(FALSE == g_Cdd_Ultrasonic_TriggerFlag_b)
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <Cdd_Ultrasonic_MainFunction+0x30>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <Cdd_Ultrasonic_MainFunction+0x1c>
		{
			/* Trigger measurement next cycle */
			g_Cdd_Ultrasonic_TriggerFlag_b = TRUE;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <Cdd_Ultrasonic_MainFunction+0x30>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
			/* Call trigger function */
			Cdd_Ultrasonic_Trigger();
		}
	}
}
 8002c96:	e004      	b.n	8002ca2 <Cdd_Ultrasonic_MainFunction+0x26>
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <Cdd_Ultrasonic_MainFunction+0x30>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
			Cdd_Ultrasonic_Trigger();
 8002c9e:	f7ff fd85 	bl	80027ac <Cdd_Ultrasonic_Trigger>
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000184 	.word	0x20000184
 8002cac:	20000186 	.word	0x20000186

08002cb0 <Cdd_Ultrasonic_ReadDistance>:
/**
  * @brief	Cdd_Ultrasonic module read distance function
  * @return	Last measured distance in centimeters
  */
float32 Cdd_Ultrasonic_ReadDistance(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
	float32 l_Distance_f32 = 0.0f;
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
	l_Distance_f32 = g_Cdd_Ultrasonic_Info_s.DISTANCE;
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <Cdd_Ultrasonic_ReadDistance+0x20>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	607b      	str	r3, [r7, #4]
	return l_Distance_f32;
 8002cc2:	687b      	ldr	r3, [r7, #4]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000160 	.word	0x20000160

08002cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief	Cdd_Ultrasonic external capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_CaptureCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fd6b 	bl	80027b8 <Cdd_Ultrasonic_ISR_CaptureCallback>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic external period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fe82 	bl	80029fc <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b09a      	sub	sp, #104	; 0x68
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e1e3      	b.n	800310c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d176      	bne.n	8002e44 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d152      	bne.n	8002e04 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f005 f9db 	bl	8008134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d13b      	bne.n	8002e04 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 ff83 	bl	8003c98 <ADC_Disable>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d12f      	bne.n	8002e04 <HAL_ADC_Init+0xe0>
 8002da4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d12b      	bne.n	8002e04 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db4:	f023 0302 	bic.w	r3, r3, #2
 8002db8:	f043 0202 	orr.w	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002dde:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <HAL_ADC_Init+0x308>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a92      	ldr	r2, [pc, #584]	; (8003030 <HAL_ADC_Init+0x30c>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0c9a      	lsrs	r2, r3, #18
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002df6:	e002      	b.n	8002dfe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f9      	bne.n	8002df8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e20:	d110      	bne.n	8002e44 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f023 0312 	bic.w	r3, r3, #18
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f040 8150 	bne.w	80030f2 <HAL_ADC_Init+0x3ce>
 8002e52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 814b 	bne.w	80030f2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 8143 	bne.w	80030f2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e74:	f043 0202 	orr.w	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e84:	d004      	beq.n	8002e90 <HAL_ADC_Init+0x16c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6a      	ldr	r2, [pc, #424]	; (8003034 <HAL_ADC_Init+0x310>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_Init+0x170>
 8002e90:	4b69      	ldr	r3, [pc, #420]	; (8003038 <HAL_ADC_Init+0x314>)
 8002e92:	e000      	b.n	8002e96 <HAL_ADC_Init+0x172>
 8002e94:	4b69      	ldr	r3, [pc, #420]	; (800303c <HAL_ADC_Init+0x318>)
 8002e96:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea0:	d102      	bne.n	8002ea8 <HAL_ADC_Init+0x184>
 8002ea2:	4b64      	ldr	r3, [pc, #400]	; (8003034 <HAL_ADC_Init+0x310>)
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e01a      	b.n	8002ede <HAL_ADC_Init+0x1ba>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a61      	ldr	r2, [pc, #388]	; (8003034 <HAL_ADC_Init+0x310>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d103      	bne.n	8002eba <HAL_ADC_Init+0x196>
 8002eb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e011      	b.n	8002ede <HAL_ADC_Init+0x1ba>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a60      	ldr	r2, [pc, #384]	; (8003040 <HAL_ADC_Init+0x31c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d102      	bne.n	8002eca <HAL_ADC_Init+0x1a6>
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_ADC_Init+0x320>)
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e009      	b.n	8002ede <HAL_ADC_Init+0x1ba>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5d      	ldr	r2, [pc, #372]	; (8003044 <HAL_ADC_Init+0x320>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d102      	bne.n	8002eda <HAL_ADC_Init+0x1b6>
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_ADC_Init+0x31c>)
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <HAL_ADC_Init+0x1ba>
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d108      	bne.n	8002efe <HAL_ADC_Init+0x1da>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_Init+0x1da>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_ADC_Init+0x1dc>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d11c      	bne.n	8002f3e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d107      	bne.n	8002f26 <HAL_ADC_Init+0x202>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Init+0x202>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_ADC_Init+0x204>
 8002f26:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7e5b      	ldrb	r3, [r3, #25]
 8002f42:	035b      	lsls	r3, r3, #13
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f48:	2a01      	cmp	r2, #1
 8002f4a:	d002      	beq.n	8002f52 <HAL_ADC_Init+0x22e>
 8002f4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f50:	e000      	b.n	8002f54 <HAL_ADC_Init+0x230>
 8002f52:	2200      	movs	r2, #0
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f64:	4313      	orrs	r3, r2
 8002f66:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d11b      	bne.n	8002faa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7e5b      	ldrb	r3, [r3, #25]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	045a      	lsls	r2, r3, #17
 8002f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8c:	e00d      	b.n	8002faa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d054      	beq.n	800305c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_ADC_Init+0x31c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_ADC_Init+0x2a2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_ADC_Init+0x320>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d140      	bne.n	8003048 <HAL_ADC_Init+0x324>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002fce:	d02a      	beq.n	8003026 <HAL_ADC_Init+0x302>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd8:	d022      	beq.n	8003020 <HAL_ADC_Init+0x2fc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002fe2:	d01a      	beq.n	800301a <HAL_ADC_Init+0x2f6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002fec:	d012      	beq.n	8003014 <HAL_ADC_Init+0x2f0>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002ff6:	d00a      	beq.n	800300e <HAL_ADC_Init+0x2ea>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8003000:	d002      	beq.n	8003008 <HAL_ADC_Init+0x2e4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	e023      	b.n	8003050 <HAL_ADC_Init+0x32c>
 8003008:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800300c:	e020      	b.n	8003050 <HAL_ADC_Init+0x32c>
 800300e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003012:	e01d      	b.n	8003050 <HAL_ADC_Init+0x32c>
 8003014:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003018:	e01a      	b.n	8003050 <HAL_ADC_Init+0x32c>
 800301a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301e:	e017      	b.n	8003050 <HAL_ADC_Init+0x32c>
 8003020:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003024:	e014      	b.n	8003050 <HAL_ADC_Init+0x32c>
 8003026:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800302a:	e011      	b.n	8003050 <HAL_ADC_Init+0x32c>
 800302c:	20000000 	.word	0x20000000
 8003030:	431bde83 	.word	0x431bde83
 8003034:	50000100 	.word	0x50000100
 8003038:	50000300 	.word	0x50000300
 800303c:	50000700 	.word	0x50000700
 8003040:	50000400 	.word	0x50000400
 8003044:	50000500 	.word	0x50000500
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003054:	4313      	orrs	r3, r2
 8003056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003058:	4313      	orrs	r3, r2
 800305a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d114      	bne.n	8003094 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7e1b      	ldrb	r3, [r3, #24]
 8003082:	039a      	lsls	r2, r3, #14
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4313      	orrs	r3, r2
 800308e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003090:	4313      	orrs	r3, r2
 8003092:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_ADC_Init+0x3f0>)
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80030a4:	430b      	orrs	r3, r1
 80030a6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d10c      	bne.n	80030ca <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f023 010f 	bic.w	r1, r3, #15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	e007      	b.n	80030da <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 020f 	bic.w	r2, r2, #15
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f023 0303 	bic.w	r3, r3, #3
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
 80030f0:	e00a      	b.n	8003108 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f023 0312 	bic.w	r3, r3, #18
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003108:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800310c:	4618      	mov	r0, r3
 800310e:	3768      	adds	r7, #104	; 0x68
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	fff0c007 	.word	0xfff0c007

08003118 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 80f7 	bne.w	8003326 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Start_DMA+0x2e>
 8003142:	2302      	movs	r3, #2
 8003144:	e0f2      	b.n	800332c <HAL_ADC_Start_DMA+0x214>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003156:	d004      	beq.n	8003162 <HAL_ADC_Start_DMA+0x4a>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a75      	ldr	r2, [pc, #468]	; (8003334 <HAL_ADC_Start_DMA+0x21c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d109      	bne.n	8003176 <HAL_ADC_Start_DMA+0x5e>
 8003162:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_ADC_Start_DMA+0x220>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e008      	b.n	8003188 <HAL_ADC_Start_DMA+0x70>
 8003176:	4b71      	ldr	r3, [pc, #452]	; (800333c <HAL_ADC_Start_DMA+0x224>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80c5 	beq.w	8003318 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fd1e 	bl	8003bd0 <ADC_Enable>
 8003194:	4603      	mov	r3, r0
 8003196:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 80b7 	bne.w	800330e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_Start_DMA+0xb0>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a5c      	ldr	r2, [pc, #368]	; (8003334 <HAL_ADC_Start_DMA+0x21c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d106      	bne.n	80031d6 <HAL_ADC_Start_DMA+0xbe>
 80031c8:	4b5b      	ldr	r3, [pc, #364]	; (8003338 <HAL_ADC_Start_DMA+0x220>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_ADC_Start_DMA+0xde>
 80031d4:	e005      	b.n	80031e2 <HAL_ADC_Start_DMA+0xca>
 80031d6:	4b59      	ldr	r3, [pc, #356]	; (800333c <HAL_ADC_Start_DMA+0x224>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_ADC_Start_DMA+0xde>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ea:	d004      	beq.n	80031f6 <HAL_ADC_Start_DMA+0xde>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a53      	ldr	r2, [pc, #332]	; (8003340 <HAL_ADC_Start_DMA+0x228>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d115      	bne.n	8003222 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d036      	beq.n	800327e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003218:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003220:	e02d      	b.n	800327e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003236:	d004      	beq.n	8003242 <HAL_ADC_Start_DMA+0x12a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_ADC_Start_DMA+0x21c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10a      	bne.n	8003258 <HAL_ADC_Start_DMA+0x140>
 8003242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e008      	b.n	800326a <HAL_ADC_Start_DMA+0x152>
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_ADC_Start_DMA+0x228>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003276:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d106      	bne.n	800329a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f023 0206 	bic.w	r2, r3, #6
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	645a      	str	r2, [r3, #68]	; 0x44
 8003298:	e002      	b.n	80032a0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	4a25      	ldr	r2, [pc, #148]	; (8003344 <HAL_ADC_Start_DMA+0x22c>)
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	4a24      	ldr	r2, [pc, #144]	; (8003348 <HAL_ADC_Start_DMA+0x230>)
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <HAL_ADC_Start_DMA+0x234>)
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	221c      	movs	r2, #28
 80032c6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0210 	orr.w	r2, r2, #16
 80032d6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3340      	adds	r3, #64	; 0x40
 80032f2:	4619      	mov	r1, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f000 ff4b 	bl	8004192 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0204 	orr.w	r2, r2, #4
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e00d      	b.n	800332a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003316:	e008      	b.n	800332a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003324:	e001      	b.n	800332a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	50000100 	.word	0x50000100
 8003338:	50000300 	.word	0x50000300
 800333c:	50000700 	.word	0x50000700
 8003340:	50000400 	.word	0x50000400
 8003344:	08003b05 	.word	0x08003b05
 8003348:	08003b7f 	.word	0x08003b7f
 800334c:	08003b9b 	.word	0x08003b9b

08003350 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b09b      	sub	sp, #108	; 0x6c
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x22>
 800336e:	2302      	movs	r3, #2
 8003370:	e2c8      	b.n	8003904 <HAL_ADC_ConfigChannel+0x5b4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 82ac 	bne.w	80038e2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d81c      	bhi.n	80033cc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	461a      	mov	r2, r3
 80033a6:	231f      	movs	r3, #31
 80033a8:	4093      	lsls	r3, r2
 80033aa:	43db      	mvns	r3, r3
 80033ac:	4019      	ands	r1, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa00 f203 	lsl.w	r2, r0, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ca:	e063      	b.n	8003494 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d81e      	bhi.n	8003412 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	3b1e      	subs	r3, #30
 80033e8:	221f      	movs	r2, #31
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	4019      	ands	r1, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	3b1e      	subs	r3, #30
 8003404:	fa00 f203 	lsl.w	r2, r0, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	635a      	str	r2, [r3, #52]	; 0x34
 8003410:	e040      	b.n	8003494 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b0e      	cmp	r3, #14
 8003418:	d81e      	bhi.n	8003458 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	3b3c      	subs	r3, #60	; 0x3c
 800342e:	221f      	movs	r2, #31
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	4019      	ands	r1, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	3b3c      	subs	r3, #60	; 0x3c
 800344a:	fa00 f203 	lsl.w	r2, r0, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
 8003456:	e01d      	b.n	8003494 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	3b5a      	subs	r3, #90	; 0x5a
 800346c:	221f      	movs	r2, #31
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	4019      	ands	r1, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	3b5a      	subs	r3, #90	; 0x5a
 8003488:	fa00 f203 	lsl.w	r2, r0, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 80e5 	bne.w	800366e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d91c      	bls.n	80034e6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	3b1e      	subs	r3, #30
 80034be:	2207      	movs	r2, #7
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4019      	ands	r1, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6898      	ldr	r0, [r3, #8]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	3b1e      	subs	r3, #30
 80034d8:	fa00 f203 	lsl.w	r2, r0, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
 80034e4:	e019      	b.n	800351a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6959      	ldr	r1, [r3, #20]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	2207      	movs	r2, #7
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	4019      	ands	r1, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6898      	ldr	r0, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	fa00 f203 	lsl.w	r2, r0, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	08db      	lsrs	r3, r3, #3
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	3b01      	subs	r3, #1
 8003538:	2b03      	cmp	r3, #3
 800353a:	d84f      	bhi.n	80035dc <HAL_ADC_ConfigChannel+0x28c>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_ADC_ConfigChannel+0x1f4>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003555 	.word	0x08003555
 8003548:	08003577 	.word	0x08003577
 800354c:	08003599 	.word	0x08003599
 8003550:	080035bb 	.word	0x080035bb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800355a:	4b99      	ldr	r3, [pc, #612]	; (80037c0 <HAL_ADC_ConfigChannel+0x470>)
 800355c:	4013      	ands	r3, r2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	0691      	lsls	r1, r2, #26
 8003564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003566:	430a      	orrs	r2, r1
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003574:	e07b      	b.n	800366e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800357c:	4b90      	ldr	r3, [pc, #576]	; (80037c0 <HAL_ADC_ConfigChannel+0x470>)
 800357e:	4013      	ands	r3, r2
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	0691      	lsls	r1, r2, #26
 8003586:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003588:	430a      	orrs	r2, r1
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003594:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003596:	e06a      	b.n	800366e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_ADC_ConfigChannel+0x470>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	0691      	lsls	r1, r2, #26
 80035a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035aa:	430a      	orrs	r2, r1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035b6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035b8:	e059      	b.n	800366e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035c0:	4b7f      	ldr	r3, [pc, #508]	; (80037c0 <HAL_ADC_ConfigChannel+0x470>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	0691      	lsls	r1, r2, #26
 80035ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035cc:	430a      	orrs	r2, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035d8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035da:	e048      	b.n	800366e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	069b      	lsls	r3, r3, #26
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d107      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	069b      	lsls	r3, r3, #26
 8003610:	429a      	cmp	r2, r3
 8003612:	d107      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003622:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	069b      	lsls	r3, r3, #26
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003646:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	069b      	lsls	r3, r3, #26
 8003658:	429a      	cmp	r2, r3
 800365a:	d107      	bne.n	800366c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800366a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800366c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_ADC_ConfigChannel+0x33e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x33e>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_ADC_ConfigChannel+0x340>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	f040 8131 	bne.w	80038f8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d00f      	beq.n	80036be <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43da      	mvns	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	400a      	ands	r2, r1
 80036b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80036bc:	e049      	b.n	8003752 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b09      	cmp	r3, #9
 80036de:	d91c      	bls.n	800371a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	3b1b      	subs	r3, #27
 80036f2:	2207      	movs	r2, #7
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	4019      	ands	r1, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	6898      	ldr	r0, [r3, #8]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	3b1b      	subs	r3, #27
 800370c:	fa00 f203 	lsl.w	r2, r0, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	619a      	str	r2, [r3, #24]
 8003718:	e01b      	b.n	8003752 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6959      	ldr	r1, [r3, #20]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	2207      	movs	r2, #7
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	4019      	ands	r1, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6898      	ldr	r0, [r3, #8]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	fa00 f203 	lsl.w	r2, r0, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800375a:	d004      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x416>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_ADC_ConfigChannel+0x474>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x41a>
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <HAL_ADC_ConfigChannel+0x478>)
 8003768:	e000      	b.n	800376c <HAL_ADC_ConfigChannel+0x41c>
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <HAL_ADC_ConfigChannel+0x47c>)
 800376c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b10      	cmp	r3, #16
 8003774:	d105      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800377e:	2b00      	cmp	r3, #0
 8003780:	d015      	beq.n	80037ae <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003786:	2b11      	cmp	r3, #17
 8003788:	d105      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800379a:	2b12      	cmp	r3, #18
 800379c:	f040 80ac 	bne.w	80038f8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80037a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 80a5 	bne.w	80038f8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b6:	d10b      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x480>
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <HAL_ADC_ConfigChannel+0x474>)
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e023      	b.n	8003806 <HAL_ADC_ConfigChannel+0x4b6>
 80037be:	bf00      	nop
 80037c0:	83fff000 	.word	0x83fff000
 80037c4:	50000100 	.word	0x50000100
 80037c8:	50000300 	.word	0x50000300
 80037cc:	50000700 	.word	0x50000700
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <HAL_ADC_ConfigChannel+0x5c0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d103      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x492>
 80037da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e011      	b.n	8003806 <HAL_ADC_ConfigChannel+0x4b6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4b      	ldr	r2, [pc, #300]	; (8003914 <HAL_ADC_ConfigChannel+0x5c4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d102      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x4a2>
 80037ec:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_ADC_ConfigChannel+0x5c8>)
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e009      	b.n	8003806 <HAL_ADC_ConfigChannel+0x4b6>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a48      	ldr	r2, [pc, #288]	; (8003918 <HAL_ADC_ConfigChannel+0x5c8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d102      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x4b2>
 80037fc:	4b45      	ldr	r3, [pc, #276]	; (8003914 <HAL_ADC_ConfigChannel+0x5c4>)
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e001      	b.n	8003806 <HAL_ADC_ConfigChannel+0x4b6>
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d108      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x4d6>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x4d6>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_ADC_ConfigChannel+0x4d8>
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d150      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800382c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d107      	bne.n	800384e <HAL_ADC_ConfigChannel+0x4fe>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x4fe>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_ADC_ConfigChannel+0x500>
 800384e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003850:	2b00      	cmp	r3, #0
 8003852:	d13c      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b10      	cmp	r3, #16
 800385a:	d11d      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x548>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003864:	d118      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800386e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003870:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003872:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_ADC_ConfigChannel+0x5cc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <HAL_ADC_ConfigChannel+0x5d0>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	0c9a      	lsrs	r2, r3, #18
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003888:	e002      	b.n	8003890 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3b01      	subs	r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f9      	bne.n	800388a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003896:	e02e      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b11      	cmp	r3, #17
 800389e:	d10b      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x568>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a8:	d106      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80038aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80038b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038b6:	e01e      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b12      	cmp	r3, #18
 80038be:	d11a      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80038c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038cc:	e013      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80038e0:	e00a      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80038f4:	e000      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038f6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003904:	4618      	mov	r0, r3
 8003906:	376c      	adds	r7, #108	; 0x6c
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	50000100 	.word	0x50000100
 8003914:	50000400 	.word	0x50000400
 8003918:	50000500 	.word	0x50000500
 800391c:	20000000 	.word	0x20000000
 8003920:	431bde83 	.word	0x431bde83

08003924 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003924:	b480      	push	{r7}
 8003926:	b099      	sub	sp, #100	; 0x64
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393c:	d102      	bne.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800393e:	4b6c      	ldr	r3, [pc, #432]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	e01a      	b.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a69      	ldr	r2, [pc, #420]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d103      	bne.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800394e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	e011      	b.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a66      	ldr	r2, [pc, #408]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d102      	bne.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003960:	4b65      	ldr	r3, [pc, #404]	; (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	e009      	b.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a63      	ldr	r2, [pc, #396]	; (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d102      	bne.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003970:	4b60      	ldr	r3, [pc, #384]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	e001      	b.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0b0      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800398e:	2302      	movs	r3, #2
 8003990:	e0a9      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 808d 	bne.w	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8086 	bne.w	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c0:	d004      	beq.n	80039cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80039ce:	e000      	b.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80039d0:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80039d2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d040      	beq.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80039dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039ee:	035b      	lsls	r3, r3, #13
 80039f0:	430b      	orrs	r3, r1
 80039f2:	431a      	orrs	r2, r3
 80039f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d108      	bne.n	8003a18 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d15c      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003a3a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d14b      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a48:	f023 030f 	bic.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	6811      	ldr	r1, [r2, #0]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	431a      	orrs	r2, r3
 8003a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a5a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5c:	e03c      	b.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a68:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d108      	bne.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d123      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d107      	bne.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003aac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d112      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003aba:	f023 030f 	bic.w	r3, r3, #15
 8003abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ac0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac2:	e009      	b.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003ad6:	e000      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ad8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3764      	adds	r7, #100	; 0x64
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	50000100 	.word	0x50000100
 8003af4:	50000400 	.word	0x50000400
 8003af8:	50000500 	.word	0x50000500
 8003afc:	50000300 	.word	0x50000300
 8003b00:	50000700 	.word	0x50000700

08003b04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d126      	bne.n	8003b6c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d115      	bne.n	8003b64 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d111      	bne.n	8003b64 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f007 fd49 	bl	800b5fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003b6a:	e004      	b.n	8003b76 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff f8b7 	bl	8002d00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f043 0204 	orr.w	r2, r3, #4
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff f8a6 	bl	8002d12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <ADC_Enable+0x2c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <ADC_Enable+0x2c>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <ADC_Enable+0x2e>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d143      	bne.n	8003c8a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <ADC_Enable+0xc4>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f043 0210 	orr.w	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e02f      	b.n	8003c8c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003c3c:	f004 f940 	bl	8007ec0 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c42:	e01b      	b.n	8003c7c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c44:	f004 f93c 	bl	8007ec0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d914      	bls.n	8003c7c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d00d      	beq.n	8003c7c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f043 0210 	orr.w	r2, r3, #16
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d1dc      	bne.n	8003c44 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	8000003f 	.word	0x8000003f

08003c98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d108      	bne.n	8003cc4 <ADC_Disable+0x2c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <ADC_Disable+0x2c>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <ADC_Disable+0x2e>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d047      	beq.n	8003d5a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 030d 	and.w	r3, r3, #13
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10f      	bne.n	8003cf8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0202 	orr.w	r2, r2, #2
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2203      	movs	r2, #3
 8003cee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003cf0:	f004 f8e6 	bl	8007ec0 <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cf6:	e029      	b.n	8003d4c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e023      	b.n	8003d5c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d14:	f004 f8d4 	bl	8007ec0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d914      	bls.n	8003d4c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d10d      	bne.n	8003d4c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f043 0210 	orr.w	r2, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e007      	b.n	8003d5c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d0dc      	beq.n	8003d14 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d72:	e160      	b.n	8004036 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8152 	beq.w	8004030 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d005      	beq.n	8003da4 <HAL_GPIO_Init+0x40>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d130      	bne.n	8003e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dda:	2201      	movs	r2, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0201 	and.w	r2, r3, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d017      	beq.n	8003e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d123      	bne.n	8003e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	08da      	lsrs	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3208      	adds	r2, #8
 8003e90:	6939      	ldr	r1, [r7, #16]
 8003e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80ac 	beq.w	8004030 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed8:	4b5e      	ldr	r3, [pc, #376]	; (8004054 <HAL_GPIO_Init+0x2f0>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4a5d      	ldr	r2, [pc, #372]	; (8004054 <HAL_GPIO_Init+0x2f0>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6193      	str	r3, [r2, #24]
 8003ee4:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <HAL_GPIO_Init+0x2f0>)
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ef0:	4a59      	ldr	r2, [pc, #356]	; (8004058 <HAL_GPIO_Init+0x2f4>)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	220f      	movs	r2, #15
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f1a:	d025      	beq.n	8003f68 <HAL_GPIO_Init+0x204>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_GPIO_Init+0x2f8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d01f      	beq.n	8003f64 <HAL_GPIO_Init+0x200>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a4e      	ldr	r2, [pc, #312]	; (8004060 <HAL_GPIO_Init+0x2fc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d019      	beq.n	8003f60 <HAL_GPIO_Init+0x1fc>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a4d      	ldr	r2, [pc, #308]	; (8004064 <HAL_GPIO_Init+0x300>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <HAL_GPIO_Init+0x1f8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a4c      	ldr	r2, [pc, #304]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00d      	beq.n	8003f58 <HAL_GPIO_Init+0x1f4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a4b      	ldr	r2, [pc, #300]	; (800406c <HAL_GPIO_Init+0x308>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d007      	beq.n	8003f54 <HAL_GPIO_Init+0x1f0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a4a      	ldr	r2, [pc, #296]	; (8004070 <HAL_GPIO_Init+0x30c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_GPIO_Init+0x1ec>
 8003f4c:	2306      	movs	r3, #6
 8003f4e:	e00c      	b.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f50:	2307      	movs	r3, #7
 8003f52:	e00a      	b.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f54:	2305      	movs	r3, #5
 8003f56:	e008      	b.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	e006      	b.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e004      	b.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e002      	b.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_GPIO_Init+0x206>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	f002 0203 	and.w	r2, r2, #3
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	4093      	lsls	r3, r2
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f7a:	4937      	ldr	r1, [pc, #220]	; (8004058 <HAL_GPIO_Init+0x2f4>)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	3302      	adds	r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f88:	4b3a      	ldr	r3, [pc, #232]	; (8004074 <HAL_GPIO_Init+0x310>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fac:	4a31      	ldr	r2, [pc, #196]	; (8004074 <HAL_GPIO_Init+0x310>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_GPIO_Init+0x310>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fd6:	4a27      	ldr	r2, [pc, #156]	; (8004074 <HAL_GPIO_Init+0x310>)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_GPIO_Init+0x310>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004000:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_GPIO_Init+0x310>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <HAL_GPIO_Init+0x310>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <HAL_GPIO_Init+0x310>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3301      	adds	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	f47f ae97 	bne.w	8003d74 <HAL_GPIO_Init+0x10>
  }
}
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	40010000 	.word	0x40010000
 800405c:	48000400 	.word	0x48000400
 8004060:	48000800 	.word	0x48000800
 8004064:	48000c00 	.word	0x48000c00
 8004068:	48001000 	.word	0x48001000
 800406c:	48001400 	.word	0x48001400
 8004070:	48001800 	.word	0x48001800
 8004074:	40010400 	.word	0x40010400

08004078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e001      	b.n	800409a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	807b      	strh	r3, [r7, #2]
 80040b2:	4613      	mov	r3, r2
 80040b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b6:	787b      	ldrb	r3, [r7, #1]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040c2:	e002      	b.n	80040ca <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040c4:	887a      	ldrh	r2, [r7, #2]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d006      	beq.n	80040f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f003 fe62 	bl	8007dbc <HAL_GPIO_EXTI_Callback>
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40010400 	.word	0x40010400

08004104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e037      	b.n	800418a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004130:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004134:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800413e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800414a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f9c1 	bl	80044f4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}  
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_DMA_Start_IT+0x20>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e04a      	b.n	8004248 <HAL_DMA_Start_IT+0xb6>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d13a      	bne.n	800423a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f956 	bl	800449a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 020e 	orr.w	r2, r2, #14
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e00f      	b.n	8004228 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 020a 	orr.w	r2, r2, #10
 8004216:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e005      	b.n	8004246 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004246:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800425e:	2b02      	cmp	r3, #2
 8004260:	d008      	beq.n	8004274 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2204      	movs	r2, #4
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e020      	b.n	80042b6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020e 	bic.w	r2, r2, #14
 8004282:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d005      	beq.n	80042e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e027      	b.n	8004332 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 020e 	bic.w	r2, r2, #14
 80042f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f202 	lsl.w	r2, r1, r2
 8004310:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
    } 
  }
  return status;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2204      	movs	r2, #4
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d024      	beq.n	80043ae <HAL_DMA_IRQHandler+0x72>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01f      	beq.n	80043ae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d107      	bne.n	800438c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0204 	bic.w	r2, r2, #4
 800438a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	2104      	movs	r1, #4
 8004396:	fa01 f202 	lsl.w	r2, r1, r2
 800439a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d06a      	beq.n	800447a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80043ac:	e065      	b.n	800447a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	2202      	movs	r2, #2
 80043b4:	409a      	lsls	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02c      	beq.n	8004418 <HAL_DMA_IRQHandler+0xdc>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d027      	beq.n	8004418 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020a 	bic.w	r2, r2, #10
 80043e4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	2102      	movs	r1, #2
 80043f8:	fa01 f202 	lsl.w	r2, r1, r2
 80043fc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d035      	beq.n	800447a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004416:	e030      	b.n	800447a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2208      	movs	r2, #8
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d028      	beq.n	800447a <HAL_DMA_IRQHandler+0x13e>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d023      	beq.n	800447a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 020e 	bic.w	r2, r2, #14
 8004440:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	2101      	movs	r1, #1
 800444c:	fa01 f202 	lsl.w	r2, r1, r2
 8004450:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
    }
  }
}  
 8004478:	e7ff      	b.n	800447a <HAL_DMA_IRQHandler+0x13e>
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	2101      	movs	r1, #1
 80044b2:	fa01 f202 	lsl.w	r2, r1, r2
 80044b6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d108      	bne.n	80044da <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044d8:	e007      	b.n	80044ea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	4b13      	ldr	r3, [pc, #76]	; (8004550 <DMA_CalcBaseAndBitshift+0x5c>)
 8004504:	429a      	cmp	r2, r3
 8004506:	d80f      	bhi.n	8004528 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <DMA_CalcBaseAndBitshift+0x60>)
 8004510:	4413      	add	r3, r2
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <DMA_CalcBaseAndBitshift+0x64>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	009a      	lsls	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0e      	ldr	r2, [pc, #56]	; (800455c <DMA_CalcBaseAndBitshift+0x68>)
 8004524:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004526:	e00e      	b.n	8004546 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <DMA_CalcBaseAndBitshift+0x6c>)
 8004530:	4413      	add	r3, r2
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <DMA_CalcBaseAndBitshift+0x64>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	009a      	lsls	r2, r3, #2
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <DMA_CalcBaseAndBitshift+0x70>)
 8004544:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	40020407 	.word	0x40020407
 8004554:	bffdfff8 	.word	0xbffdfff8
 8004558:	cccccccd 	.word	0xcccccccd
 800455c:	40020000 	.word	0x40020000
 8004560:	bffdfbf8 	.word	0xbffdfbf8
 8004564:	40020400 	.word	0x40020400

08004568 <Gpt_Init>:
#include "Gpt.h"

static boolean g_Gpt_InitDone_b = FALSE;

void Gpt_Init(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
	g_Gpt_InitDone_b = TRUE;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <Gpt_Init+0x14>)
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000187 	.word	0x20000187

08004580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e049      	b.n	8004626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f003 ff86 	bl	80084b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 ffae 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d001      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e04f      	b.n	80046e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d018      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <HAL_TIM_Base_Start_IT+0xd0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <HAL_TIM_Base_Start_IT+0xd4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <HAL_TIM_Base_Start_IT+0xd8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d115      	bne.n	80046d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4b17      	ldr	r3, [pc, #92]	; (800470c <HAL_TIM_Base_Start_IT+0xdc>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d015      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046be:	d011      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	e008      	b.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40000800 	.word	0x40000800
 8004700:	40013400 	.word	0x40013400
 8004704:	40014000 	.word	0x40014000
 8004708:	40015000 	.word	0x40015000
 800470c:	00010007 	.word	0x00010007

08004710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e049      	b.n	80047b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f003 ff1c 	bl	8008574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f000 fee6 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d109      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x24>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e03c      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d109      	bne.n	80047fe <HAL_TIM_PWM_Start+0x3e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	e02f      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d109      	bne.n	8004818 <HAL_TIM_PWM_Start+0x58>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e022      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d109      	bne.n	8004832 <HAL_TIM_PWM_Start+0x72>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e015      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d109      	bne.n	800484c <HAL_TIM_PWM_Start+0x8c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e008      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0a1      	b.n	80049aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xb6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	e023      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0xc6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004884:	e01b      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start+0xd6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004894:	e013      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_PWM_Start+0xe6>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a4:	e00b      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start+0xf6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b4:	e003      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2201      	movs	r2, #1
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fb7b 	bl	8005fc2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_TIM_PWM_Start+0x1f4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a37      	ldr	r2, [pc, #220]	; (80049b8 <HAL_TIM_PWM_Start+0x1f8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a35      	ldr	r2, [pc, #212]	; (80049bc <HAL_TIM_PWM_Start+0x1fc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a34      	ldr	r2, [pc, #208]	; (80049c0 <HAL_TIM_PWM_Start+0x200>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a32      	ldr	r2, [pc, #200]	; (80049c4 <HAL_TIM_PWM_Start+0x204>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a31      	ldr	r2, [pc, #196]	; (80049c8 <HAL_TIM_PWM_Start+0x208>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_TIM_PWM_Start+0x14c>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_TIM_PWM_Start+0x14e>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <HAL_TIM_PWM_Start+0x1f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d01d      	beq.n	8004968 <HAL_TIM_PWM_Start+0x1a8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d018      	beq.n	8004968 <HAL_TIM_PWM_Start+0x1a8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a24      	ldr	r2, [pc, #144]	; (80049cc <HAL_TIM_PWM_Start+0x20c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <HAL_TIM_PWM_Start+0x1a8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <HAL_TIM_PWM_Start+0x210>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00e      	beq.n	8004968 <HAL_TIM_PWM_Start+0x1a8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_TIM_PWM_Start+0x1f8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_TIM_PWM_Start+0x1a8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a18      	ldr	r2, [pc, #96]	; (80049bc <HAL_TIM_PWM_Start+0x1fc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIM_PWM_Start+0x1a8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <HAL_TIM_PWM_Start+0x208>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d115      	bne.n	8004994 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_TIM_PWM_Start+0x214>)
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b06      	cmp	r3, #6
 8004978:	d015      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x1e6>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d011      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004992:	e008      	b.n	80049a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e000      	b.n	80049a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40015000 	.word	0x40015000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	00010007 	.word	0x00010007

080049d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e049      	b.n	8004a7e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f841 	bl	8004a86 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 fd82 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_IC_Start_IT+0x1e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e023      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_IC_Start_IT+0x2e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e01b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0x3e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e013      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0x4e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e00b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0x5e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e003      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <HAL_TIM_IC_Start_IT+0x78>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e013      	b.n	8004b38 <HAL_TIM_IC_Start_IT+0xa0>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d104      	bne.n	8004b20 <HAL_TIM_IC_Start_IT+0x88>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e00b      	b.n	8004b38 <HAL_TIM_IC_Start_IT+0xa0>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d104      	bne.n	8004b30 <HAL_TIM_IC_Start_IT+0x98>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e003      	b.n	8004b38 <HAL_TIM_IC_Start_IT+0xa0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b3a:	7bbb      	ldrb	r3, [r7, #14]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d102      	bne.n	8004b46 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b40:	7b7b      	ldrb	r3, [r7, #13]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0dd      	b.n	8004d06 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_IC_Start_IT+0xc2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b58:	e023      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_IC_Start_IT+0xd2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b68:	e01b      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_IC_Start_IT+0xe2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b78:	e013      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_IC_Start_IT+0xf2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b88:	e00b      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_IC_Start_IT+0x102>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b98:	e003      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_IC_Start_IT+0x11a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb0:	e013      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x142>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0x12a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc0:	e00b      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x142>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start_IT+0x13a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd0:	e003      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x142>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d841      	bhi.n	8004c64 <HAL_TIM_IC_Start_IT+0x1cc>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <HAL_TIM_IC_Start_IT+0x150>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c65 	.word	0x08004c65
 8004bf0:	08004c65 	.word	0x08004c65
 8004bf4:	08004c65 	.word	0x08004c65
 8004bf8:	08004c2f 	.word	0x08004c2f
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004c65 	.word	0x08004c65
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c53 	.word	0x08004c53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0202 	orr.w	r2, r2, #2
 8004c2a:	60da      	str	r2, [r3, #12]
      break;
 8004c2c:	e01d      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0204 	orr.w	r2, r2, #4
 8004c3c:	60da      	str	r2, [r3, #12]
      break;
 8004c3e:	e014      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0208 	orr.w	r2, r2, #8
 8004c4e:	60da      	str	r2, [r3, #12]
      break;
 8004c50:	e00b      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0210 	orr.w	r2, r2, #16
 8004c60:	60da      	str	r2, [r3, #12]
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d149      	bne.n	8004d04 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2201      	movs	r2, #1
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 f9a2 	bl	8005fc2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_TIM_IC_Start_IT+0x278>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d01d      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_TIM_IC_Start_IT+0x27c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <HAL_TIM_IC_Start_IT+0x280>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_TIM_IC_Start_IT+0x284>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <HAL_TIM_IC_Start_IT+0x288>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <HAL_TIM_IC_Start_IT+0x28c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d115      	bne.n	8004cf0 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <HAL_TIM_IC_Start_IT+0x290>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d015      	beq.n	8004d02 <HAL_TIM_IC_Start_IT+0x26a>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d011      	beq.n	8004d02 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	e008      	b.n	8004d02 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d02:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40015000 	.word	0x40015000
 8004d28:	00010007 	.word	0x00010007

08004d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d122      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d11b      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0202 	mvn.w	r2, #2
 8004d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd ffb0 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fbb6 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fbbc 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d122      	bne.n	8004ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d11b      	bne.n	8004ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0204 	mvn.w	r2, #4
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fd ff86 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fb8c 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fb92 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d122      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d11b      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0208 	mvn.w	r2, #8
 8004e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2204      	movs	r2, #4
 8004e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fd ff5c 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fb62 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fb68 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d122      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d11b      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0210 	mvn.w	r2, #16
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fd ff32 	bl	8002cd4 <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fb38 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fb3e 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d10e      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d107      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0201 	mvn.w	r2, #1
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fd ff1d 	bl	8002cea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d10e      	bne.n	8004edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d107      	bne.n	8004edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 f92d 	bl	8006136 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eea:	d10e      	bne.n	8004f0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b80      	cmp	r3, #128	; 0x80
 8004ef8:	d107      	bne.n	8004f0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f001 f91f 	bl	8006148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d10e      	bne.n	8004f36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d107      	bne.n	8004f36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 faeb 	bl	800550c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d10e      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d107      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0220 	mvn.w	r2, #32
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 f8e1 	bl	8006124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e088      	b.n	800509a <HAL_TIM_IC_ConfigChannel+0x130>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11b      	bne.n	8004fce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f000 fe57 	bl	8005c58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699a      	ldr	r2, [r3, #24]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 020c 	bic.w	r2, r2, #12
 8004fb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6999      	ldr	r1, [r3, #24]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	619a      	str	r2, [r3, #24]
 8004fcc:	e060      	b.n	8005090 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d11c      	bne.n	800500e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f000 fed2 	bl	8005d8c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ff6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6999      	ldr	r1, [r3, #24]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	619a      	str	r2, [r3, #24]
 800500c:	e040      	b.n	8005090 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f000 ff1d 	bl	8005e62 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69da      	ldr	r2, [r3, #28]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 020c 	bic.w	r2, r2, #12
 8005036:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69d9      	ldr	r1, [r3, #28]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	61da      	str	r2, [r3, #28]
 800504a:	e021      	b.n	8005090 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d11c      	bne.n	800508c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f000 ff39 	bl	8005ed8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005074:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	021a      	lsls	r2, r3, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	61da      	str	r2, [r3, #28]
 800508a:	e001      	b.n	8005090 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005098:	7dfb      	ldrb	r3, [r7, #23]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050be:	2302      	movs	r3, #2
 80050c0:	e0ff      	b.n	80052c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b14      	cmp	r3, #20
 80050ce:	f200 80f0 	bhi.w	80052b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	0800512d 	.word	0x0800512d
 80050dc:	080052b3 	.word	0x080052b3
 80050e0:	080052b3 	.word	0x080052b3
 80050e4:	080052b3 	.word	0x080052b3
 80050e8:	0800516d 	.word	0x0800516d
 80050ec:	080052b3 	.word	0x080052b3
 80050f0:	080052b3 	.word	0x080052b3
 80050f4:	080052b3 	.word	0x080052b3
 80050f8:	080051af 	.word	0x080051af
 80050fc:	080052b3 	.word	0x080052b3
 8005100:	080052b3 	.word	0x080052b3
 8005104:	080052b3 	.word	0x080052b3
 8005108:	080051ef 	.word	0x080051ef
 800510c:	080052b3 	.word	0x080052b3
 8005110:	080052b3 	.word	0x080052b3
 8005114:	080052b3 	.word	0x080052b3
 8005118:	08005231 	.word	0x08005231
 800511c:	080052b3 	.word	0x080052b3
 8005120:	080052b3 	.word	0x080052b3
 8005124:	080052b3 	.word	0x080052b3
 8005128:	08005271 	.word	0x08005271
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fa90 	bl	8005658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0208 	orr.w	r2, r2, #8
 8005146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0204 	bic.w	r2, r2, #4
 8005156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6999      	ldr	r1, [r3, #24]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	619a      	str	r2, [r3, #24]
      break;
 800516a:	e0a5      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fb0a 	bl	800578c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6999      	ldr	r1, [r3, #24]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	619a      	str	r2, [r3, #24]
      break;
 80051ac:	e084      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fb7b 	bl	80058b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0208 	orr.w	r2, r2, #8
 80051c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0204 	bic.w	r2, r2, #4
 80051d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69d9      	ldr	r1, [r3, #28]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	61da      	str	r2, [r3, #28]
      break;
 80051ec:	e064      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fbed 	bl	80059d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69d9      	ldr	r1, [r3, #28]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	021a      	lsls	r2, r3, #8
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	61da      	str	r2, [r3, #28]
      break;
 800522e:	e043      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fc3a 	bl	8005ab0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0208 	orr.w	r2, r2, #8
 800524a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0204 	bic.w	r2, r2, #4
 800525a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800526e:	e023      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fc84 	bl	8005b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052b0:	e002      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
      break;
 80052b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop

080052cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_TIM_ConfigClockSource+0x1c>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e0b6      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x18a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800530a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005324:	d03e      	beq.n	80053a4 <HAL_TIM_ConfigClockSource+0xd8>
 8005326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532a:	f200 8087 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x170>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005332:	f000 8086 	beq.w	8005442 <HAL_TIM_ConfigClockSource+0x176>
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	d87f      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x170>
 800533c:	2b70      	cmp	r3, #112	; 0x70
 800533e:	d01a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0xaa>
 8005340:	2b70      	cmp	r3, #112	; 0x70
 8005342:	d87b      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x170>
 8005344:	2b60      	cmp	r3, #96	; 0x60
 8005346:	d050      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x11e>
 8005348:	2b60      	cmp	r3, #96	; 0x60
 800534a:	d877      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x170>
 800534c:	2b50      	cmp	r3, #80	; 0x50
 800534e:	d03c      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0xfe>
 8005350:	2b50      	cmp	r3, #80	; 0x50
 8005352:	d873      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x170>
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d058      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x13e>
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d86f      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x170>
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d064      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15e>
 8005360:	2b30      	cmp	r3, #48	; 0x30
 8005362:	d86b      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x170>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d060      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15e>
 8005368:	2b20      	cmp	r3, #32
 800536a:	d867      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x170>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05c      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15e>
 8005370:	2b10      	cmp	r3, #16
 8005372:	d05a      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x15e>
 8005374:	e062      	b.n	800543c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6899      	ldr	r1, [r3, #8]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f000 fdfd 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	609a      	str	r2, [r3, #8]
      break;
 80053a2:	e04f      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6899      	ldr	r1, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f000 fde6 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c6:	609a      	str	r2, [r3, #8]
      break;
 80053c8:	e03c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fcaa 	bl	8005d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2150      	movs	r1, #80	; 0x50
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fdb4 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 80053e8:	e02c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 fd04 	bl	8005e04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2160      	movs	r1, #96	; 0x60
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fda4 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 8005408:	e01c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	461a      	mov	r2, r3
 8005418:	f000 fc8a 	bl	8005d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2140      	movs	r1, #64	; 0x40
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fd94 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 8005428:	e00c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f000 fd8b 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 800543a:	e003      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	e000      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d831      	bhi.n	80054d8 <HAL_TIM_ReadCapturedValue+0x78>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054b1 	.word	0x080054b1
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054d9 	.word	0x080054d9
 8005488:	080054d9 	.word	0x080054d9
 800548c:	080054bb 	.word	0x080054bb
 8005490:	080054d9 	.word	0x080054d9
 8005494:	080054d9 	.word	0x080054d9
 8005498:	080054d9 	.word	0x080054d9
 800549c:	080054c5 	.word	0x080054c5
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	080054d9 	.word	0x080054d9
 80054a8:	080054d9 	.word	0x080054d9
 80054ac:	080054cf 	.word	0x080054cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	60fb      	str	r3, [r7, #12]

      break;
 80054b8:	e00f      	b.n	80054da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	60fb      	str	r3, [r7, #12]

      break;
 80054c2:	e00a      	b.n	80054da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	60fb      	str	r3, [r7, #12]

      break;
 80054cc:	e005      	b.n	80054da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	60fb      	str	r3, [r7, #12]

      break;
 80054d6:	e000      	b.n	80054da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80054d8:	bf00      	nop
  }

  return tmpreg;
 80054da:	68fb      	ldr	r3, [r7, #12]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop

080054e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
	...

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a41      	ldr	r2, [pc, #260]	; (8005638 <TIM_Base_SetConfig+0x118>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d00f      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3e      	ldr	r2, [pc, #248]	; (800563c <TIM_Base_SetConfig+0x11c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00b      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3d      	ldr	r2, [pc, #244]	; (8005640 <TIM_Base_SetConfig+0x120>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d007      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3c      	ldr	r2, [pc, #240]	; (8005644 <TIM_Base_SetConfig+0x124>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3b      	ldr	r2, [pc, #236]	; (8005648 <TIM_Base_SetConfig+0x128>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a30      	ldr	r2, [pc, #192]	; (8005638 <TIM_Base_SetConfig+0x118>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01f      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d01b      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2d      	ldr	r2, [pc, #180]	; (800563c <TIM_Base_SetConfig+0x11c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d017      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <TIM_Base_SetConfig+0x120>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2b      	ldr	r2, [pc, #172]	; (8005644 <TIM_Base_SetConfig+0x124>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2b      	ldr	r2, [pc, #172]	; (800564c <TIM_Base_SetConfig+0x12c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <TIM_Base_SetConfig+0x130>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a29      	ldr	r2, [pc, #164]	; (8005654 <TIM_Base_SetConfig+0x134>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a24      	ldr	r2, [pc, #144]	; (8005648 <TIM_Base_SetConfig+0x128>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a11      	ldr	r2, [pc, #68]	; (8005638 <TIM_Base_SetConfig+0x118>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <TIM_Base_SetConfig+0x100>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a12      	ldr	r2, [pc, #72]	; (8005644 <TIM_Base_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00f      	beq.n	8005620 <TIM_Base_SetConfig+0x100>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <TIM_Base_SetConfig+0x12c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00b      	beq.n	8005620 <TIM_Base_SetConfig+0x100>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a11      	ldr	r2, [pc, #68]	; (8005650 <TIM_Base_SetConfig+0x130>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_Base_SetConfig+0x100>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <TIM_Base_SetConfig+0x134>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0x100>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <TIM_Base_SetConfig+0x128>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d103      	bne.n	8005628 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	615a      	str	r2, [r3, #20]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40013400 	.word	0x40013400
 8005648:	40015000 	.word	0x40015000
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 0302 	bic.w	r3, r3, #2
 80056a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a30      	ldr	r2, [pc, #192]	; (8005774 <TIM_OC1_SetConfig+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <TIM_OC1_SetConfig+0x88>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a2f      	ldr	r2, [pc, #188]	; (8005778 <TIM_OC1_SetConfig+0x120>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00f      	beq.n	80056e0 <TIM_OC1_SetConfig+0x88>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a2e      	ldr	r2, [pc, #184]	; (800577c <TIM_OC1_SetConfig+0x124>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_OC1_SetConfig+0x88>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a2d      	ldr	r2, [pc, #180]	; (8005780 <TIM_OC1_SetConfig+0x128>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_OC1_SetConfig+0x88>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <TIM_OC1_SetConfig+0x12c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_OC1_SetConfig+0x88>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a2b      	ldr	r2, [pc, #172]	; (8005788 <TIM_OC1_SetConfig+0x130>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10c      	bne.n	80056fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0308 	bic.w	r3, r3, #8
 80056e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0304 	bic.w	r3, r3, #4
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <TIM_OC1_SetConfig+0x11c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <TIM_OC1_SetConfig+0xd2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <TIM_OC1_SetConfig+0x120>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00f      	beq.n	800572a <TIM_OC1_SetConfig+0xd2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <TIM_OC1_SetConfig+0x124>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_OC1_SetConfig+0xd2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <TIM_OC1_SetConfig+0x128>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_OC1_SetConfig+0xd2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <TIM_OC1_SetConfig+0x12c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_OC1_SetConfig+0xd2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <TIM_OC1_SetConfig+0x130>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40015000 	.word	0x40015000

0800578c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f023 0210 	bic.w	r2, r3, #16
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0320 	bic.w	r3, r3, #32
 80057da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <TIM_OC2_SetConfig+0x10c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_OC2_SetConfig+0x74>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2a      	ldr	r2, [pc, #168]	; (800589c <TIM_OC2_SetConfig+0x110>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC2_SetConfig+0x74>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a29      	ldr	r2, [pc, #164]	; (80058a0 <TIM_OC2_SetConfig+0x114>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10d      	bne.n	800581c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <TIM_OC2_SetConfig+0x10c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <TIM_OC2_SetConfig+0xc0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1d      	ldr	r2, [pc, #116]	; (800589c <TIM_OC2_SetConfig+0x110>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00f      	beq.n	800584c <TIM_OC2_SetConfig+0xc0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <TIM_OC2_SetConfig+0x118>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_OC2_SetConfig+0xc0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <TIM_OC2_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_OC2_SetConfig+0xc0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a1b      	ldr	r2, [pc, #108]	; (80058ac <TIM_OC2_SetConfig+0x120>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_OC2_SetConfig+0xc0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <TIM_OC2_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d113      	bne.n	8005874 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005852:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800585a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40013400 	.word	0x40013400
 80058a0:	40015000 	.word	0x40015000
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40014400 	.word	0x40014400
 80058ac:	40014800 	.word	0x40014800

080058b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <TIM_OC3_SetConfig+0x10c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_OC3_SetConfig+0x72>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <TIM_OC3_SetConfig+0x110>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC3_SetConfig+0x72>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_OC3_SetConfig+0x114>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10d      	bne.n	800593e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <TIM_OC3_SetConfig+0x10c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <TIM_OC3_SetConfig+0xbe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <TIM_OC3_SetConfig+0x110>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_OC3_SetConfig+0xbe>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <TIM_OC3_SetConfig+0x118>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_OC3_SetConfig+0xbe>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <TIM_OC3_SetConfig+0x11c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_OC3_SetConfig+0xbe>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <TIM_OC3_SetConfig+0x120>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_OC3_SetConfig+0xbe>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <TIM_OC3_SetConfig+0x114>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d113      	bne.n	8005996 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	621a      	str	r2, [r3, #32]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40015000 	.word	0x40015000
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800

080059d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	031b      	lsls	r3, r3, #12
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <TIM_OC4_SetConfig+0xc4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <TIM_OC4_SetConfig+0x8c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <TIM_OC4_SetConfig+0xc8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_OC4_SetConfig+0x8c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <TIM_OC4_SetConfig+0xcc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_OC4_SetConfig+0x8c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <TIM_OC4_SetConfig+0xd0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC4_SetConfig+0x8c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <TIM_OC4_SetConfig+0xd4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC4_SetConfig+0x8c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a14      	ldr	r2, [pc, #80]	; (8005aac <TIM_OC4_SetConfig+0xd8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	019b      	lsls	r3, r3, #6
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40013400 	.word	0x40013400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800
 8005aac:	40015000 	.word	0x40015000

08005ab0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005af4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <TIM_OC5_SetConfig+0xbc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <TIM_OC5_SetConfig+0x82>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <TIM_OC5_SetConfig+0xc0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_OC5_SetConfig+0x82>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <TIM_OC5_SetConfig+0xc4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_OC5_SetConfig+0x82>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <TIM_OC5_SetConfig+0xc8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_OC5_SetConfig+0x82>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <TIM_OC5_SetConfig+0xcc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_OC5_SetConfig+0x82>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a14      	ldr	r2, [pc, #80]	; (8005b80 <TIM_OC5_SetConfig+0xd0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d109      	bne.n	8005b46 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40013400 	.word	0x40013400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800
 8005b80:	40015000 	.word	0x40015000

08005b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	051b      	lsls	r3, r3, #20
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <TIM_OC6_SetConfig+0xbc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <TIM_OC6_SetConfig+0x84>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <TIM_OC6_SetConfig+0xc0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00f      	beq.n	8005c08 <TIM_OC6_SetConfig+0x84>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <TIM_OC6_SetConfig+0xc4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_OC6_SetConfig+0x84>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <TIM_OC6_SetConfig+0xc8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_OC6_SetConfig+0x84>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <TIM_OC6_SetConfig+0xcc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC6_SetConfig+0x84>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <TIM_OC6_SetConfig+0xd0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d109      	bne.n	8005c1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800
 8005c54:	40015000 	.word	0x40015000

08005c58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0201 	bic.w	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a25      	ldr	r2, [pc, #148]	; (8005d18 <TIM_TI1_SetConfig+0xc0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d017      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x5e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d013      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x5e>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <TIM_TI1_SetConfig+0xc4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00f      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x5e>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <TIM_TI1_SetConfig+0xc8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x5e>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4a20      	ldr	r2, [pc, #128]	; (8005d24 <TIM_TI1_SetConfig+0xcc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x5e>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <TIM_TI1_SetConfig+0xd0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x5e>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <TIM_TI1_SetConfig+0xd4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d101      	bne.n	8005cba <TIM_TI1_SetConfig+0x62>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <TIM_TI1_SetConfig+0x64>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	e003      	b.n	8005cda <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f023 030a 	bic.w	r3, r3, #10
 8005cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f003 030a 	and.w	r3, r3, #10
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40015000 	.word	0x40015000

08005d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 030a 	bic.w	r3, r3, #10
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f023 0210 	bic.w	r2, r3, #16
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	031b      	lsls	r3, r3, #12
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0210 	bic.w	r2, r3, #16
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	031b      	lsls	r3, r3, #12
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	621a      	str	r2, [r3, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	031b      	lsls	r3, r3, #12
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	031b      	lsls	r3, r3, #12
 8005f30:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f043 0307 	orr.w	r3, r3, #7
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	609a      	str	r2, [r3, #8]
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1a      	ldr	r2, [r3, #32]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	401a      	ands	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1a      	ldr	r2, [r3, #32]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	621a      	str	r2, [r3, #32]
}
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
	...

0800600c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006020:	2302      	movs	r3, #2
 8006022:	e06d      	b.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a30      	ldr	r2, [pc, #192]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2f      	ldr	r2, [pc, #188]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2d      	ldr	r2, [pc, #180]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d108      	bne.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006068:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1e      	ldr	r2, [pc, #120]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d01d      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d018      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a11      	ldr	r2, [pc, #68]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10c      	bne.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40013400 	.word	0x40013400
 8006114:	40015000 	.word	0x40015000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40014000 	.word	0x40014000

08006124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
	...

0800615c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e0a7      	b.n	80062be <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d12c      	bne.n	80061d4 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a50      	ldr	r2, [pc, #320]	; (80062c8 <HAL_I2C_Init+0x16c>)
 8006186:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a50      	ldr	r2, [pc, #320]	; (80062cc <HAL_I2C_Init+0x170>)
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a4f      	ldr	r2, [pc, #316]	; (80062d0 <HAL_I2C_Init+0x174>)
 8006192:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a4f      	ldr	r2, [pc, #316]	; (80062d4 <HAL_I2C_Init+0x178>)
 8006198:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a4e      	ldr	r2, [pc, #312]	; (80062d8 <HAL_I2C_Init+0x17c>)
 800619e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a4e      	ldr	r2, [pc, #312]	; (80062dc <HAL_I2C_Init+0x180>)
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a4d      	ldr	r2, [pc, #308]	; (80062e0 <HAL_I2C_Init+0x184>)
 80061aa:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a4d      	ldr	r2, [pc, #308]	; (80062e4 <HAL_I2C_Init+0x188>)
 80061b0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a4c      	ldr	r2, [pc, #304]	; (80062e8 <HAL_I2C_Init+0x18c>)
 80061b6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a4c      	ldr	r2, [pc, #304]	; (80062ec <HAL_I2C_Init+0x190>)
 80061bc:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a49      	ldr	r2, [pc, #292]	; (80062f0 <HAL_I2C_Init+0x194>)
 80061ca:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	; 0x24
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006208:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d107      	bne.n	8006222 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	e006      	b.n	8006230 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800622e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d104      	bne.n	8006242 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006240:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006264:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	08006705 	.word	0x08006705
 80062cc:	08006717 	.word	0x08006717
 80062d0:	08006729 	.word	0x08006729
 80062d4:	0800673b 	.word	0x0800673b
 80062d8:	08006767 	.word	0x08006767
 80062dc:	0800b69d 	.word	0x0800b69d
 80062e0:	0800b6bd 	.word	0x0800b6bd
 80062e4:	0800b6dd 	.word	0x0800b6dd
 80062e8:	08006779 	.word	0x08006779
 80062ec:	0800674d 	.word	0x0800674d
 80062f0:	080082e1 	.word	0x080082e1

080062f4 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	4608      	mov	r0, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	461a      	mov	r2, r3
 8006302:	4603      	mov	r3, r0
 8006304:	817b      	strh	r3, [r7, #10]
 8006306:	460b      	mov	r3, r1
 8006308:	813b      	strh	r3, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b20      	cmp	r3, #32
 8006318:	f040 80d5 	bne.w	80064c6 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_I2C_Mem_Write_DMA+0x34>
 8006322:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0c9      	b.n	80064c8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006342:	d101      	bne.n	8006348 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
 8006346:	e0bf      	b.n	80064c8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_I2C_Mem_Write_DMA+0x62>
 8006352:	2302      	movs	r3, #2
 8006354:	e0b8      	b.n	80064c8 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800635e:	f001 fdaf 	bl	8007ec0 <HAL_GetTick>
 8006362:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2221      	movs	r2, #33	; 0x21
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2240      	movs	r2, #64	; 0x40
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a51      	ldr	r2, [pc, #324]	; (80064d0 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 800638a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4a51      	ldr	r2, [pc, #324]	; (80064d4 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8006390:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2bff      	cmp	r3, #255	; 0xff
 800639a:	d906      	bls.n	80063aa <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	22ff      	movs	r2, #255	; 0xff
 80063a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80063a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	e007      	b.n	80063ba <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80063b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063b8:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 80063ba:	88f8      	ldrh	r0, [r7, #6]
 80063bc:	893a      	ldrh	r2, [r7, #8]
 80063be:	8979      	ldrh	r1, [r7, #10]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	2319      	movs	r3, #25
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	4603      	mov	r3, r0
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fca2 	bl	8006d14 <I2C_RequestMemoryWrite>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e072      	b.n	80064c8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d020      	beq.n	800642c <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	4a3a      	ldr	r2, [pc, #232]	; (80064d8 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80063f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	4a39      	ldr	r2, [pc, #228]	; (80064dc <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	2200      	movs	r2, #0
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	2200      	movs	r2, #0
 8006408:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800640e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3328      	adds	r3, #40	; 0x28
 8006416:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800641c:	f7fd feb9 	bl	8004192 <HAL_DMA_Start_IT>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d139      	bne.n	800649e <HAL_I2C_Mem_Write_DMA+0x1aa>
 800642a:	e013      	b.n	8006454 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006440:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e039      	b.n	80064c8 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006458:	b2da      	uxtb	r2, r3
 800645a:	8979      	ldrh	r1, [r7, #10]
 800645c:	2300      	movs	r3, #0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f001 fb2a 	bl	8007abc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006482:	2110      	movs	r1, #16
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f001 fb45 	bl	8007b14 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006498:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e014      	b.n	80064c8 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	f043 0210 	orr.w	r2, r3, #16
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3720      	adds	r7, #32
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	ffff0000 	.word	0xffff0000
 80064d4:	08006991 	.word	0x08006991
 80064d8:	08007739 	.word	0x08007739
 80064dc:	08007865 	.word	0x08007865

080064e0 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	817b      	strh	r3, [r7, #10]
 80064f2:	460b      	mov	r3, r1
 80064f4:	813b      	strh	r3, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b20      	cmp	r3, #32
 8006504:	f040 80d5 	bne.w	80066b2 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_I2C_Mem_Read_DMA+0x34>
 800650e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0c9      	b.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800652a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652e:	d101      	bne.n	8006534 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
 8006532:	e0bf      	b.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_I2C_Mem_Read_DMA+0x62>
 800653e:	2302      	movs	r3, #2
 8006540:	e0b8      	b.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800654a:	f001 fcb9 	bl	8007ec0 <HAL_GetTick>
 800654e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2222      	movs	r2, #34	; 0x22
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800656a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a51      	ldr	r2, [pc, #324]	; (80066bc <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8006576:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a51      	ldr	r2, [pc, #324]	; (80066c0 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 800657c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	2bff      	cmp	r3, #255	; 0xff
 8006586:	d906      	bls.n	8006596 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	22ff      	movs	r2, #255	; 0xff
 800658c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800658e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e007      	b.n	80065a6 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80065a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065a4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80065a6:	88f8      	ldrh	r0, [r7, #6]
 80065a8:	893a      	ldrh	r2, [r7, #8]
 80065aa:	8979      	ldrh	r1, [r7, #10]
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	2319      	movs	r3, #25
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4603      	mov	r3, r0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fc00 	bl	8006dbc <I2C_RequestMemoryRead>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e072      	b.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d020      	beq.n	8006618 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	4a3a      	ldr	r2, [pc, #232]	; (80066c4 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80065dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	4a39      	ldr	r2, [pc, #228]	; (80066c8 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	2200      	movs	r2, #0
 80065ec:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	2200      	movs	r2, #0
 80065f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	4619      	mov	r1, r3
 8006602:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006608:	f7fd fdc3 	bl	8004192 <HAL_DMA_Start_IT>
 800660c:	4603      	mov	r3, r0
 800660e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d139      	bne.n	800668a <HAL_I2C_Mem_Read_DMA+0x1aa>
 8006616:	e013      	b.n	8006640 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e039      	b.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006644:	b2da      	uxtb	r2, r3
 8006646:	8979      	ldrh	r1, [r7, #10]
 8006648:	4b20      	ldr	r3, [pc, #128]	; (80066cc <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 fa34 	bl	8007abc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800666e:	2110      	movs	r1, #16
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f001 fa4f 	bl	8007b14 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006684:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e014      	b.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f043 0210 	orr.w	r2, r3, #16
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80066b2:	2302      	movs	r3, #2
  }
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	ffff0000 	.word	0xffff0000
 80066c0:	08006991 	.word	0x08006991
 80066c4:	080077cf 	.word	0x080077cf
 80066c8:	08007865 	.word	0x08007865
 80066cc:	80002400 	.word	0x80002400

080066d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
  }
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr

08006716 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
 8006758:	4613      	mov	r3, r2
 800675a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <I2C_Slave_ISR_IT+0x24>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e0e1      	b.n	8006988 <I2C_Slave_ISR_IT+0x1e8>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80067e0:	6939      	ldr	r1, [r7, #16]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fd2c 	bl	8007240 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d04b      	beq.n	800688a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d046      	beq.n	800688a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d128      	bne.n	8006858 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b28      	cmp	r3, #40	; 0x28
 8006810:	d108      	bne.n	8006824 <I2C_Slave_ISR_IT+0x84>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006818:	d104      	bne.n	8006824 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800681a:	6939      	ldr	r1, [r7, #16]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fe19 	bl	8007454 <I2C_ITListenCplt>
 8006822:	e031      	b.n	8006888 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b29      	cmp	r3, #41	; 0x29
 800682e:	d10e      	bne.n	800684e <I2C_Slave_ISR_IT+0xae>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006836:	d00a      	beq.n	800684e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2210      	movs	r2, #16
 800683e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 ff56 	bl	80076f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 fbcf 	bl	8006fea <I2C_ITSlaveSeqCplt>
 800684c:	e01c      	b.n	8006888 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2210      	movs	r2, #16
 8006854:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006856:	e08f      	b.n	8006978 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2210      	movs	r2, #16
 800685e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	f043 0204 	orr.w	r2, r3, #4
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <I2C_Slave_ISR_IT+0xda>
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006878:	d17e      	bne.n	8006978 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fe3d 	bl	8007500 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006886:	e077      	b.n	8006978 <I2C_Slave_ISR_IT+0x1d8>
 8006888:	e076      	b.n	8006978 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d02f      	beq.n	80068f4 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800689a:	2b00      	cmp	r3, #0
 800689c:	d02a      	beq.n	80068f4 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d018      	beq.n	80068da <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d14b      	bne.n	800697c <I2C_Slave_ISR_IT+0x1dc>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068ea:	d047      	beq.n	800697c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 fb7c 	bl	8006fea <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80068f2:	e043      	b.n	800697c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006908:	6939      	ldr	r1, [r7, #16]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 faaa 	bl	8006e64 <I2C_ITAddrCplt>
 8006910:	e035      	b.n	800697e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d030      	beq.n	800697e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006922:	2b00      	cmp	r3, #0
 8006924:	d02b      	beq.n	800697e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d018      	beq.n	8006962 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	781a      	ldrb	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006960:	e00d      	b.n	800697e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006968:	d002      	beq.n	8006970 <I2C_Slave_ISR_IT+0x1d0>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 fb3a 	bl	8006fea <I2C_ITSlaveSeqCplt>
 8006976:	e002      	b.n	800697e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006978:	bf00      	nop
 800697a:	e000      	b.n	800697e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800697c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <I2C_Master_ISR_DMA+0x1a>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e0d9      	b.n	8006b5e <I2C_Master_ISR_DMA+0x1ce>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d016      	beq.n	80069ea <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d011      	beq.n	80069ea <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2210      	movs	r2, #16
 80069cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	f043 0204 	orr.w	r2, r3, #4
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069da:	2120      	movs	r1, #32
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f001 f899 	bl	8007b14 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fe85 	bl	80076f2 <I2C_Flush_TXDR>
 80069e8:	e0b4      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d071      	beq.n	8006ad8 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d06c      	beq.n	8006ad8 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d04e      	beq.n	8006ab6 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a24:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2bff      	cmp	r3, #255	; 0xff
 8006a2e:	d906      	bls.n	8006a3e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	22ff      	movs	r2, #255	; 0xff
 8006a34:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e010      	b.n	8006a60 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a50:	d003      	beq.n	8006a5a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e002      	b.n	8006a60 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a5e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	8a79      	ldrh	r1, [r7, #18]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f001 f824 	bl	8007abc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b22      	cmp	r3, #34	; 0x22
 8006a90:	d108      	bne.n	8006aa4 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aa0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006aa2:	e057      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006ab4:	e04e      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ac4:	d003      	beq.n	8006ace <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fa50 	bl	8006f6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006acc:	e042      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ace:	2140      	movs	r1, #64	; 0x40
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fd15 	bl	8007500 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006ad6:	e03d      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d028      	beq.n	8006b34 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d023      	beq.n	8006b34 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d119      	bne.n	8006b2a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b04:	d025      	beq.n	8006b52 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b0e:	d108      	bne.n	8006b22 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b1e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006b20:	e017      	b.n	8006b52 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fa22 	bl	8006f6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006b28:	e013      	b.n	8006b52 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b2a:	2140      	movs	r1, #64	; 0x40
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 fce7 	bl	8007500 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b32:	e00e      	b.n	8006b52 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 faac 	bl	80070a8 <I2C_ITMasterCplt>
 8006b50:	e000      	b.n	8006b54 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006b52:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b088      	sub	sp, #32
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <I2C_Slave_ISR_DMA+0x24>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e0bf      	b.n	8006d0a <I2C_Slave_ISR_DMA+0x1a4>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fb49 	bl	8007240 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8095 	beq.w	8006ce4 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 808f 	beq.w	8006ce4 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d104      	bne.n	8006bda <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d07d      	beq.n	8006cd6 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <I2C_Slave_ISR_DMA+0x96>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00c      	beq.n	8006c1e <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <I2C_Slave_ISR_DMA+0xb8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d128      	bne.n	8006c76 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b28      	cmp	r3, #40	; 0x28
 8006c2e:	d108      	bne.n	8006c42 <I2C_Slave_ISR_DMA+0xdc>
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c36:	d104      	bne.n	8006c42 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fc0a 	bl	8007454 <I2C_ITListenCplt>
 8006c40:	e048      	b.n	8006cd4 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b29      	cmp	r3, #41	; 0x29
 8006c4c:	d10e      	bne.n	8006c6c <I2C_Slave_ISR_DMA+0x106>
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c54:	d00a      	beq.n	8006c6c <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fd47 	bl	80076f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f9c0 	bl	8006fea <I2C_ITSlaveSeqCplt>
 8006c6a:	e033      	b.n	8006cd4 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2210      	movs	r2, #16
 8006c72:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006c74:	e034      	b.n	8006ce0 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c90:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <I2C_Slave_ISR_DMA+0x13a>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c9e:	d11f      	bne.n	8006ce0 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b21      	cmp	r3, #33	; 0x21
 8006ca4:	d002      	beq.n	8006cac <I2C_Slave_ISR_DMA+0x146>
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	2b29      	cmp	r3, #41	; 0x29
 8006caa:	d103      	bne.n	8006cb4 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2221      	movs	r2, #33	; 0x21
 8006cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb2:	e008      	b.n	8006cc6 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b22      	cmp	r3, #34	; 0x22
 8006cb8:	d002      	beq.n	8006cc0 <I2C_Slave_ISR_DMA+0x15a>
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cbe:	d102      	bne.n	8006cc6 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2222      	movs	r2, #34	; 0x22
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	4619      	mov	r1, r3
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fc17 	bl	8007500 <I2C_ITError>
      if (treatdmanack == 1U)
 8006cd2:	e005      	b.n	8006ce0 <I2C_Slave_ISR_DMA+0x17a>
 8006cd4:	e004      	b.n	8006ce0 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2210      	movs	r2, #16
 8006cdc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006cde:	e00f      	b.n	8006d00 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8006ce0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ce2:	e00d      	b.n	8006d00 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f8b2 	bl	8006e64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	817b      	strh	r3, [r7, #10]
 8006d26:	460b      	mov	r3, r1
 8006d28:	813b      	strh	r3, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	8979      	ldrh	r1, [r7, #10]
 8006d34:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <I2C_RequestMemoryWrite+0xa4>)
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 febd 	bl	8007abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	69b9      	ldr	r1, [r7, #24]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fe01 	bl	800794e <I2C_WaitOnTXISFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e02c      	b.n	8006db0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d105      	bne.n	8006d68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d5c:	893b      	ldrh	r3, [r7, #8]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	629a      	str	r2, [r3, #40]	; 0x28
 8006d66:	e015      	b.n	8006d94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d68:	893b      	ldrh	r3, [r7, #8]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	69b9      	ldr	r1, [r7, #24]
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fde7 	bl	800794e <I2C_WaitOnTXISFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e012      	b.n	8006db0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d8a:	893b      	ldrh	r3, [r7, #8]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2180      	movs	r1, #128	; 0x80
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fd95 	bl	80078ce <I2C_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	80002000 	.word	0x80002000

08006dbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	817b      	strh	r3, [r7, #10]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	813b      	strh	r3, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	8979      	ldrh	r1, [r7, #10]
 8006ddc:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <I2C_RequestMemoryRead+0xa4>)
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	2300      	movs	r3, #0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fe6a 	bl	8007abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	69b9      	ldr	r1, [r7, #24]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fdae 	bl	800794e <I2C_WaitOnTXISFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e02c      	b.n	8006e56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d105      	bne.n	8006e0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e02:	893b      	ldrh	r3, [r7, #8]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e0c:	e015      	b.n	8006e3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e0e:	893b      	ldrh	r3, [r7, #8]
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	69b9      	ldr	r1, [r7, #24]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fd94 	bl	800794e <I2C_WaitOnTXISFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e012      	b.n	8006e56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e30:	893b      	ldrh	r3, [r7, #8]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2200      	movs	r2, #0
 8006e42:	2140      	movs	r1, #64	; 0x40
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fd42 	bl	80078ce <I2C_WaitOnFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	80002000 	.word	0x80002000

08006e64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e7a:	2b28      	cmp	r3, #40	; 0x28
 8006e7c:	d16a      	bne.n	8006f54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006e9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eaa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006eb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d138      	bne.n	8006f34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ec2:	897b      	ldrh	r3, [r7, #10]
 8006ec4:	09db      	lsrs	r3, r3, #7
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	89bb      	ldrh	r3, [r7, #12]
 8006eca:	4053      	eors	r3, r2
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f003 0306 	and.w	r3, r3, #6
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11c      	bne.n	8006f10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006ed6:	897b      	ldrh	r3, [r7, #10]
 8006ed8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d13b      	bne.n	8006f64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	89ba      	ldrh	r2, [r7, #12]
 8006f08:	7bf9      	ldrb	r1, [r7, #15]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f0e:	e029      	b.n	8006f64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006f10:	893b      	ldrh	r3, [r7, #8]
 8006f12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fe5d 	bl	8007bd8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	89ba      	ldrh	r2, [r7, #12]
 8006f2c:	7bf9      	ldrb	r1, [r7, #15]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
}
 8006f32:	e017      	b.n	8006f64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fe4d 	bl	8007bd8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	89ba      	ldrh	r2, [r7, #12]
 8006f4c:	7bf9      	ldrb	r1, [r7, #15]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
}
 8006f52:	e007      	b.n	8006f64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2208      	movs	r2, #8
 8006f5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006f64:	bf00      	nop
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b21      	cmp	r3, #33	; 0x21
 8006f86:	d116      	bne.n	8006fb6 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2211      	movs	r2, #17
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fe1a 	bl	8007bd8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fb4:	e015      	b.n	8006fe2 <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2212      	movs	r2, #18
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006fca:	2102      	movs	r1, #2
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fe03 	bl	8007bd8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d008      	beq.n	800701e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e00c      	b.n	8007038 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007036:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b29      	cmp	r3, #41	; 0x29
 8007042:	d113      	bne.n	800706c <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2228      	movs	r2, #40	; 0x28
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2221      	movs	r2, #33	; 0x21
 8007050:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007052:	2101      	movs	r1, #1
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fdbf 	bl	8007bd8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 800706a:	e018      	b.n	800709e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b2a      	cmp	r3, #42	; 0x2a
 8007076:	d112      	bne.n	800709e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2228      	movs	r2, #40	; 0x28
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2222      	movs	r2, #34	; 0x22
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007086:	2102      	movs	r1, #2
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fda5 	bl	8007bd8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2220      	movs	r2, #32
 80070bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b21      	cmp	r3, #33	; 0x21
 80070c8:	d107      	bne.n	80070da <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070ca:	2101      	movs	r1, #1
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fd83 	bl	8007bd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2211      	movs	r2, #17
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
 80070d8:	e00c      	b.n	80070f4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b22      	cmp	r3, #34	; 0x22
 80070e4:	d106      	bne.n	80070f4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070e6:	2102      	movs	r1, #2
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fd75 	bl	8007bd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2212      	movs	r2, #18
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6859      	ldr	r1, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b4e      	ldr	r3, [pc, #312]	; (8007238 <I2C_ITMasterCplt+0x190>)
 8007100:	400b      	ands	r3, r1
 8007102:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a4b      	ldr	r2, [pc, #300]	; (800723c <I2C_ITMasterCplt+0x194>)
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f003 0310 	and.w	r3, r3, #16
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2210      	movs	r2, #16
 8007120:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	f043 0204 	orr.w	r2, r3, #4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b60      	cmp	r3, #96	; 0x60
 8007138:	d10a      	bne.n	8007150 <I2C_ITMasterCplt+0xa8>
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	b2db      	uxtb	r3, r3
 800714c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800714e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 face 	bl	80076f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b60      	cmp	r3, #96	; 0x60
 8007166:	d002      	beq.n	800716e <I2C_ITMasterCplt+0xc6>
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d006      	beq.n	800717c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f9c3 	bl	8007500 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800717a:	e058      	b.n	800722e <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b21      	cmp	r3, #33	; 0x21
 8007186:	d126      	bne.n	80071d6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b40      	cmp	r3, #64	; 0x40
 80071a0:	d10c      	bne.n	80071bc <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
}
 80071ba:	e038      	b.n	800722e <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
}
 80071d4:	e02b      	b.n	800722e <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b22      	cmp	r3, #34	; 0x22
 80071e0:	d125      	bne.n	800722e <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d10c      	bne.n	8007216 <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
}
 8007214:	e00b      	b.n	800722e <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	fe00e800 	.word	0xfe00e800
 800723c:	ffff0000 	.word	0xffff0000

08007240 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2220      	movs	r2, #32
 8007264:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	2b21      	cmp	r3, #33	; 0x21
 800726a:	d002      	beq.n	8007272 <I2C_ITSlaveCplt+0x32>
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	2b29      	cmp	r3, #41	; 0x29
 8007270:	d108      	bne.n	8007284 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007272:	f248 0101 	movw	r1, #32769	; 0x8001
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fcae 	bl	8007bd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2221      	movs	r2, #33	; 0x21
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
 8007282:	e00d      	b.n	80072a0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	2b22      	cmp	r3, #34	; 0x22
 8007288:	d002      	beq.n	8007290 <I2C_ITSlaveCplt+0x50>
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b2a      	cmp	r3, #42	; 0x2a
 800728e:	d107      	bne.n	80072a0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007290:	f248 0102 	movw	r1, #32770	; 0x8002
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fc9f 	bl	8007bd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2222      	movs	r2, #34	; 0x22
 800729e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b64      	ldr	r3, [pc, #400]	; (800744c <I2C_ITSlaveCplt+0x20c>)
 80072bc:	400b      	ands	r3, r1
 80072be:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa16 	bl	80076f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d013      	beq.n	80072f8 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01f      	beq.n	8007328 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072f6:	e017      	b.n	8007328 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d012      	beq.n	8007328 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007310:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d006      	beq.n	8007328 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d020      	beq.n	8007374 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f023 0304 	bic.w	r3, r3, #4
 8007338:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00c      	beq.n	8007374 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	f043 0204 	orr.w	r2, r3, #4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f8aa 	bl	8007500 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b28      	cmp	r3, #40	; 0x28
 80073b6:	d144      	bne.n	8007442 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f84a 	bl	8007454 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073c0:	e03f      	b.n	8007442 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073ca:	d015      	beq.n	80073f8 <I2C_ITSlaveCplt+0x1b8>
    I2C_ITSlaveSeqCplt(hi2c);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fe0c 	bl	8006fea <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1e      	ldr	r2, [pc, #120]	; (8007450 <I2C_ITSlaveCplt+0x210>)
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
}
 80073f6:	e024      	b.n	8007442 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b22      	cmp	r3, #34	; 0x22
 8007402:	d10f      	bne.n	8007424 <I2C_ITSlaveCplt+0x1e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
}
 8007422:	e00e      	b.n	8007442 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	fe00e800 	.word	0xfe00e800
 8007450:	ffff0000 	.word	0xffff0000

08007454 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a26      	ldr	r2, [pc, #152]	; (80074fc <I2C_ITListenCplt+0xa8>)
 8007462:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f003 0304 	and.w	r3, r3, #4
 8007486:	2b00      	cmp	r3, #0
 8007488:	d022      	beq.n	80074d0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d012      	beq.n	80074d0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c8:	f043 0204 	orr.w	r2, r3, #4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80074d0:	f248 0103 	movw	r1, #32771	; 0x8003
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb7f 	bl	8007bd8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2210      	movs	r2, #16
 80074e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	ffff0000 	.word	0xffff0000

08007500 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a5d      	ldr	r2, [pc, #372]	; (8007694 <I2C_ITError+0x194>)
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b28      	cmp	r3, #40	; 0x28
 8007536:	d005      	beq.n	8007544 <I2C_ITError+0x44>
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b29      	cmp	r3, #41	; 0x29
 800753c:	d002      	beq.n	8007544 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	2b2a      	cmp	r3, #42	; 0x2a
 8007542:	d10b      	bne.n	800755c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007544:	2103      	movs	r1, #3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fb46 	bl	8007bd8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2228      	movs	r2, #40	; 0x28
 8007550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a50      	ldr	r2, [pc, #320]	; (8007698 <I2C_ITError+0x198>)
 8007558:	635a      	str	r2, [r3, #52]	; 0x34
 800755a:	e011      	b.n	8007580 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800755c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb39 	bl	8007bd8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b60      	cmp	r3, #96	; 0x60
 8007570:	d003      	beq.n	800757a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d039      	beq.n	8007602 <I2C_ITError+0x102>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b11      	cmp	r3, #17
 8007592:	d002      	beq.n	800759a <I2C_ITError+0x9a>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b21      	cmp	r3, #33	; 0x21
 8007598:	d133      	bne.n	8007602 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075a8:	d107      	bne.n	80075ba <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075b8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fc ff5f 	bl	8004482 <HAL_DMA_GetState>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d017      	beq.n	80075fa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	4a33      	ldr	r2, [pc, #204]	; (800769c <I2C_ITError+0x19c>)
 80075d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fc fe6e 	bl	80042c0 <HAL_DMA_Abort_IT>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d04d      	beq.n	8007686 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075f4:	4610      	mov	r0, r2
 80075f6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075f8:	e045      	b.n	8007686 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f850 	bl	80076a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007600:	e041      	b.n	8007686 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d039      	beq.n	800767e <I2C_ITError+0x17e>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b12      	cmp	r3, #18
 800760e:	d002      	beq.n	8007616 <I2C_ITError+0x116>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b22      	cmp	r3, #34	; 0x22
 8007614:	d133      	bne.n	800767e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007624:	d107      	bne.n	8007636 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007634:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763a:	4618      	mov	r0, r3
 800763c:	f7fc ff21 	bl	8004482 <HAL_DMA_GetState>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	d017      	beq.n	8007676 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	4a14      	ldr	r2, [pc, #80]	; (800769c <I2C_ITError+0x19c>)
 800764c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	4618      	mov	r0, r3
 800765c:	f7fc fe30 	bl	80042c0 <HAL_DMA_Abort_IT>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d011      	beq.n	800768a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007674:	e009      	b.n	800768a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f812 	bl	80076a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800767c:	e005      	b.n	800768a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f80e 	bl	80076a0 <I2C_TreatErrorCallback>
  }
}
 8007684:	e002      	b.n	800768c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800768a:	bf00      	nop
}
 800768c:	bf00      	nop
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	ffff0000 	.word	0xffff0000
 8007698:	080067a1 	.word	0x080067a1
 800769c:	08007893 	.word	0x08007893

080076a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b60      	cmp	r3, #96	; 0x60
 80076b2:	d10f      	bne.n	80076d4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076d2:	e00a      	b.n	80076ea <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
}
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d103      	bne.n	8007710 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2200      	movs	r2, #0
 800770e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b01      	cmp	r3, #1
 800771c:	d007      	beq.n	800772e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0201 	orr.w	r2, r2, #1
 800772c:	619a      	str	r2, [r3, #24]
  }
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007754:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007760:	2120      	movs	r1, #32
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f9d6 	bl	8007b14 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007768:	e02d      	b.n	80077c6 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007772:	441a      	add	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2bff      	cmp	r3, #255	; 0xff
 8007780:	d903      	bls.n	800778a <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	851a      	strh	r2, [r3, #40]	; 0x28
 8007788:	e004      	b.n	8007794 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	4619      	mov	r1, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3328      	adds	r3, #40	; 0x28
 80077a4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80077aa:	f7fc fcf2 	bl	8004192 <HAL_DMA_Start_IT>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80077b4:	2110      	movs	r1, #16
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff fea2 	bl	8007500 <I2C_ITError>
}
 80077bc:	e003      	b.n	80077c6 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80077be:	2140      	movs	r1, #64	; 0x40
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f9a7 	bl	8007b14 <I2C_Enable_IRQ>
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077ea:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80077f6:	2120      	movs	r1, #32
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f98b 	bl	8007b14 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80077fe:	e02d      	b.n	800785c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007808:	441a      	add	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29b      	uxth	r3, r3
 8007814:	2bff      	cmp	r3, #255	; 0xff
 8007816:	d903      	bls.n	8007820 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	851a      	strh	r2, [r3, #40]	; 0x28
 800781e:	e004      	b.n	800782a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	4619      	mov	r1, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007840:	f7fc fca7 	bl	8004192 <HAL_DMA_Start_IT>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800784a:	2110      	movs	r1, #16
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7ff fe57 	bl	8007500 <I2C_ITError>
}
 8007852:	e003      	b.n	800785c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007854:	2140      	movs	r1, #64	; 0x40
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f95c 	bl	8007b14 <I2C_Enable_IRQ>
}
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007880:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007882:	2110      	movs	r1, #16
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fe3b 	bl	8007500 <I2C_ITError>
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	2200      	movs	r2, #0
 80078ae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078bc:	2200      	movs	r2, #0
 80078be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff feed 	bl	80076a0 <I2C_TreatErrorCallback>
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	4613      	mov	r3, r2
 80078dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078de:	e022      	b.n	8007926 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d01e      	beq.n	8007926 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e8:	f000 faea 	bl	8007ec0 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d302      	bcc.n	80078fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d113      	bne.n	8007926 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007902:	f043 0220 	orr.w	r2, r3, #32
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2220      	movs	r2, #32
 800790e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e00f      	b.n	8007946 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4013      	ands	r3, r2
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	429a      	cmp	r2, r3
 8007934:	bf0c      	ite	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	2300      	movne	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	429a      	cmp	r2, r3
 8007942:	d0cd      	beq.n	80078e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800795a:	e02c      	b.n	80079b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f835 	bl	80079d0 <I2C_IsAcknowledgeFailed>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e02a      	b.n	80079c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d01e      	beq.n	80079b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007978:	f000 faa2 	bl	8007ec0 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	429a      	cmp	r2, r3
 8007986:	d302      	bcc.n	800798e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d113      	bne.n	80079b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e007      	b.n	80079c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d1cb      	bne.n	800795c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b10      	cmp	r3, #16
 80079e8:	d161      	bne.n	8007aae <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079f8:	d02b      	beq.n	8007a52 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a08:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a0a:	e022      	b.n	8007a52 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d01e      	beq.n	8007a52 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a14:	f000 fa54 	bl	8007ec0 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d302      	bcc.n	8007a2a <I2C_IsAcknowledgeFailed+0x5a>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d113      	bne.n	8007a52 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	f043 0220 	orr.w	r2, r3, #32
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e02e      	b.n	8007ab0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	d1d5      	bne.n	8007a0c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2210      	movs	r2, #16
 8007a66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fe3e 	bl	80076f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6859      	ldr	r1, [r3, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <I2C_IsAcknowledgeFailed+0xe8>)
 8007a82:	400b      	ands	r3, r1
 8007a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	f043 0204 	orr.w	r2, r3, #4
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e000      	b.n	8007ab0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	fe00e800 	.word	0xfe00e800

08007abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	607b      	str	r3, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	817b      	strh	r3, [r7, #10]
 8007aca:	4613      	mov	r3, r2
 8007acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	0d5b      	lsrs	r3, r3, #21
 8007ad8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007adc:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <I2C_TransferConfig+0x54>)
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	ea02 0103 	and.w	r1, r2, r3
 8007ae6:	897b      	ldrh	r3, [r7, #10]
 8007ae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007aec:	7a7b      	ldrb	r3, [r7, #9]
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	431a      	orrs	r2, r3
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr
 8007b10:	03ff63ff 	.word	0x03ff63ff

08007b14 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b28:	4a29      	ldr	r2, [pc, #164]	; (8007bd0 <I2C_Enable_IRQ+0xbc>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d004      	beq.n	8007b38 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007b32:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <I2C_Enable_IRQ+0xc0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d11d      	bne.n	8007b74 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	da03      	bge.n	8007b48 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007b46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b48:	887b      	ldrh	r3, [r7, #2]
 8007b4a:	2b10      	cmp	r3, #16
 8007b4c:	d103      	bne.n	8007b56 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007b54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b56:	887b      	ldrh	r3, [r7, #2]
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d103      	bne.n	8007b64 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b64:	887b      	ldrh	r3, [r7, #2]
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d125      	bne.n	8007bb6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b70:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b72:	e020      	b.n	8007bb6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	da03      	bge.n	8007b84 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007b82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b84:	887b      	ldrh	r3, [r7, #2]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007b94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b96:	887b      	ldrh	r3, [r7, #2]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007ba6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	d103      	bne.n	8007bb6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f043 0320 	orr.w	r3, r3, #32
 8007bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6819      	ldr	r1, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	601a      	str	r2, [r3, #0]
}
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr
 8007bd0:	08006991 	.word	0x08006991
 8007bd4:	08006b67 	.word	0x08006b67

08007bd8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007be8:	887b      	ldrh	r3, [r7, #2]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00f      	beq.n	8007c12 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007bf8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c06:	2b28      	cmp	r3, #40	; 0x28
 8007c08:	d003      	beq.n	8007c12 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007c10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c12:	887b      	ldrh	r3, [r7, #2]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00f      	beq.n	8007c3c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007c22:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c30:	2b28      	cmp	r3, #40	; 0x28
 8007c32:	d003      	beq.n	8007c3c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007c3a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da03      	bge.n	8007c4c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007c4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c4c:	887b      	ldrh	r3, [r7, #2]
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d103      	bne.n	8007c5a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007c58:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c5a:	887b      	ldrh	r3, [r7, #2]
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d103      	bne.n	8007c68 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f043 0320 	orr.w	r3, r3, #32
 8007c66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c68:	887b      	ldrh	r3, [r7, #2]
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	d103      	bne.n	8007c76 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c74:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6819      	ldr	r1, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	43da      	mvns	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	400a      	ands	r2, r1
 8007c86:	601a      	str	r2, [r3, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	d138      	bne.n	8007d1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e032      	b.n	8007d1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2224      	movs	r2, #36	; 0x24
 8007cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0201 	bic.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ce4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6819      	ldr	r1, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0201 	orr.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e000      	b.n	8007d1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
  }
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr

08007d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d139      	bne.n	8007db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e033      	b.n	8007db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2224      	movs	r2, #36	; 0x24
 8007d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0201 	bic.w	r2, r2, #1
 8007d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	e000      	b.n	8007db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007db0:	2302      	movs	r3, #2
  }
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bc80      	pop	{r7}
 8007dba:	4770      	bx	lr

08007dbc <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dcc:	d10e      	bne.n	8007dec <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8007dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007dd2:	4808      	ldr	r0, [pc, #32]	; (8007df4 <HAL_GPIO_EXTI_Callback+0x38>)
 8007dd4:	f7fc f950 	bl	8004078 <HAL_GPIO_ReadPin>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d103      	bne.n	8007de6 <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 8007dde:	2001      	movs	r0, #1
 8007de0:	f004 fab2 	bl	800c348 <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8007de4:	e002      	b.n	8007dec <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 8007de6:	2000      	movs	r0, #0
 8007de8:	f004 faae 	bl	800c348 <Rte_Write_PC13_Pin_State>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	48000800 	.word	0x48000800

08007df8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007dfc:	bf00      	nop
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e08:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <HAL_Init+0x28>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a07      	ldr	r2, [pc, #28]	; (8007e2c <HAL_Init+0x28>)
 8007e0e:	f043 0310 	orr.w	r3, r3, #16
 8007e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e14:	2003      	movs	r0, #3
 8007e16:	f000 f929 	bl	800806c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e1a:	200f      	movs	r0, #15
 8007e1c:	f000 f808 	bl	8007e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e20:	f000 f966 	bl	80080f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	40022000 	.word	0x40022000

08007e30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e38:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <HAL_InitTick+0x60>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	4b15      	ldr	r3, [pc, #84]	; (8007e94 <HAL_InitTick+0x64>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	4619      	mov	r1, r3
 8007e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f941 	bl	80080d6 <HAL_SYSTICK_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e014      	b.n	8007e88 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b0f      	cmp	r3, #15
 8007e62:	d810      	bhi.n	8007e86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e64:	2200      	movs	r2, #0
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	f000 f909 	bl	8008082 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007e70:	2200      	movs	r2, #0
 8007e72:	210f      	movs	r1, #15
 8007e74:	f06f 0001 	mvn.w	r0, #1
 8007e78:	f000 f903 	bl	8008082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e7c:	4a06      	ldr	r2, [pc, #24]	; (8007e98 <HAL_InitTick+0x68>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e000      	b.n	8007e88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000000 	.word	0x20000000
 8007e94:	20000008 	.word	0x20000008
 8007e98:	20000004 	.word	0x20000004

08007e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <HAL_IncTick+0x1c>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <HAL_IncTick+0x20>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4413      	add	r3, r2
 8007eac:	4a03      	ldr	r2, [pc, #12]	; (8007ebc <HAL_IncTick+0x20>)
 8007eae:	6013      	str	r3, [r2, #0]
}
 8007eb0:	bf00      	nop
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr
 8007eb8:	20000008 	.word	0x20000008
 8007ebc:	20000188 	.word	0x20000188

08007ec0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  return uwTick;  
 8007ec4:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <HAL_GetTick+0x10>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr
 8007ed0:	20000188 	.word	0x20000188

08007ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <__NVIC_SetPriorityGrouping+0x44>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f06:	4a04      	ldr	r2, [pc, #16]	; (8007f18 <__NVIC_SetPriorityGrouping+0x44>)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	60d3      	str	r3, [r2, #12]
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	e000ed00 	.word	0xe000ed00

08007f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <__NVIC_GetPriorityGrouping+0x18>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	0a1b      	lsrs	r3, r3, #8
 8007f26:	f003 0307 	and.w	r3, r3, #7
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bc80      	pop	{r7}
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	e000ed00 	.word	0xe000ed00

08007f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	db0b      	blt.n	8007f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	f003 021f 	and.w	r2, r3, #31
 8007f50:	4906      	ldr	r1, [pc, #24]	; (8007f6c <__NVIC_EnableIRQ+0x34>)
 8007f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	2001      	movs	r0, #1
 8007f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr
 8007f6c:	e000e100 	.word	0xe000e100

08007f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db0a      	blt.n	8007f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	490c      	ldr	r1, [pc, #48]	; (8007fbc <__NVIC_SetPriority+0x4c>)
 8007f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8e:	0112      	lsls	r2, r2, #4
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	440b      	add	r3, r1
 8007f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f98:	e00a      	b.n	8007fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	4908      	ldr	r1, [pc, #32]	; (8007fc0 <__NVIC_SetPriority+0x50>)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	3b04      	subs	r3, #4
 8007fa8:	0112      	lsls	r2, r2, #4
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	440b      	add	r3, r1
 8007fae:	761a      	strb	r2, [r3, #24]
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	e000e100 	.word	0xe000e100
 8007fc0:	e000ed00 	.word	0xe000ed00

08007fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b089      	sub	sp, #36	; 0x24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f1c3 0307 	rsb	r3, r3, #7
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	bf28      	it	cs
 8007fe2:	2304      	movcs	r3, #4
 8007fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	2b06      	cmp	r3, #6
 8007fec:	d902      	bls.n	8007ff4 <NVIC_EncodePriority+0x30>
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3b03      	subs	r3, #3
 8007ff2:	e000      	b.n	8007ff6 <NVIC_EncodePriority+0x32>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8008002:	43da      	mvns	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	401a      	ands	r2, r3
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800800c:	f04f 31ff 	mov.w	r1, #4294967295
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	fa01 f303 	lsl.w	r3, r1, r3
 8008016:	43d9      	mvns	r1, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800801c:	4313      	orrs	r3, r2
         );
}
 800801e:	4618      	mov	r0, r3
 8008020:	3724      	adds	r7, #36	; 0x24
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3b01      	subs	r3, #1
 8008034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008038:	d301      	bcc.n	800803e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800803a:	2301      	movs	r3, #1
 800803c:	e00f      	b.n	800805e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800803e:	4a0a      	ldr	r2, [pc, #40]	; (8008068 <SysTick_Config+0x40>)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3b01      	subs	r3, #1
 8008044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008046:	210f      	movs	r1, #15
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	f7ff ff90 	bl	8007f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <SysTick_Config+0x40>)
 8008052:	2200      	movs	r2, #0
 8008054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008056:	4b04      	ldr	r3, [pc, #16]	; (8008068 <SysTick_Config+0x40>)
 8008058:	2207      	movs	r2, #7
 800805a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	e000e010 	.word	0xe000e010

0800806c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ff2d 	bl	8007ed4 <__NVIC_SetPriorityGrouping>
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	4603      	mov	r3, r0
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008094:	f7ff ff42 	bl	8007f1c <__NVIC_GetPriorityGrouping>
 8008098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	6978      	ldr	r0, [r7, #20]
 80080a0:	f7ff ff90 	bl	8007fc4 <NVIC_EncodePriority>
 80080a4:	4602      	mov	r2, r0
 80080a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080aa:	4611      	mov	r1, r2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff ff5f 	bl	8007f70 <__NVIC_SetPriority>
}
 80080b2:	bf00      	nop
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	4603      	mov	r3, r0
 80080c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff ff35 	bl	8007f38 <__NVIC_EnableIRQ>
}
 80080ce:	bf00      	nop
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff ffa2 	bl	8008028 <SysTick_Config>
 80080e4:	4603      	mov	r3, r0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080f6:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <HAL_MspInit+0x40>)
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	4a0d      	ldr	r2, [pc, #52]	; (8008130 <HAL_MspInit+0x40>)
 80080fc:	f043 0301 	orr.w	r3, r3, #1
 8008100:	6193      	str	r3, [r2, #24]
 8008102:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <HAL_MspInit+0x40>)
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800810e:	4b08      	ldr	r3, [pc, #32]	; (8008130 <HAL_MspInit+0x40>)
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	4a07      	ldr	r2, [pc, #28]	; (8008130 <HAL_MspInit+0x40>)
 8008114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008118:	61d3      	str	r3, [r2, #28]
 800811a:	4b05      	ldr	r3, [pc, #20]	; (8008130 <HAL_MspInit+0x40>)
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr
 8008130:	40021000 	.word	0x40021000

08008134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08c      	sub	sp, #48	; 0x30
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813c:	f107 031c 	add.w	r3, r7, #28
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	60da      	str	r2, [r3, #12]
 800814a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008154:	d156      	bne.n	8008204 <HAL_ADC_MspInit+0xd0>



  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8008156:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <HAL_ADC_MspInit+0x190>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	4a59      	ldr	r2, [pc, #356]	; (80082c4 <HAL_ADC_MspInit+0x190>)
 800815e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8008160:	4b58      	ldr	r3, [pc, #352]	; (80082c4 <HAL_ADC_MspInit+0x190>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d10b      	bne.n	8008180 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008168:	4b57      	ldr	r3, [pc, #348]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	4a56      	ldr	r2, [pc, #344]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 800816e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008172:	6153      	str	r3, [r2, #20]
 8008174:	4b54      	ldr	r3, [pc, #336]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	69bb      	ldr	r3, [r7, #24]
    }



    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008180:	4b51      	ldr	r3, [pc, #324]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	4a50      	ldr	r2, [pc, #320]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 8008186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800818a:	6153      	str	r3, [r2, #20]
 800818c:	4b4e      	ldr	r3, [pc, #312]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008194:	617b      	str	r3, [r7, #20]
 8008196:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008198:	2301      	movs	r3, #1
 800819a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800819c:	2303      	movs	r3, #3
 800819e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081a4:	f107 031c 	add.w	r3, r7, #28
 80081a8:	4619      	mov	r1, r3
 80081aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081ae:	f7fb fdd9 	bl	8003d64 <HAL_GPIO_Init>



    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80081b2:	4b46      	ldr	r3, [pc, #280]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081b4:	4a46      	ldr	r2, [pc, #280]	; (80082d0 <HAL_ADC_MspInit+0x19c>)
 80081b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081b8:	4b44      	ldr	r3, [pc, #272]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80081be:	4b43      	ldr	r3, [pc, #268]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80081c4:	4b41      	ldr	r3, [pc, #260]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80081ca:	4b40      	ldr	r3, [pc, #256]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80081d2:	4b3e      	ldr	r3, [pc, #248]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80081da:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081dc:	2220      	movs	r2, #32
 80081de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80081e0:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80081e6:	4839      	ldr	r0, [pc, #228]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081e8:	f7fb ff8c 	bl	8004104 <HAL_DMA_Init>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_ADC_MspInit+0xc2>
    {
      Msp_Error_Handler();
 80081f2:	f000 fa61 	bl	80086b8 <Msp_Error_Handler>
    }



    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a34      	ldr	r2, [pc, #208]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
 80081fc:	4a33      	ldr	r2, [pc, #204]	; (80082cc <HAL_ADC_MspInit+0x198>)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END ADC2_MspInit 1 */
  }



}
 8008202:	e05a      	b.n	80082ba <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a32      	ldr	r2, [pc, #200]	; (80082d4 <HAL_ADC_MspInit+0x1a0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d155      	bne.n	80082ba <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800820e:	4b2d      	ldr	r3, [pc, #180]	; (80082c4 <HAL_ADC_MspInit+0x190>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	4a2b      	ldr	r2, [pc, #172]	; (80082c4 <HAL_ADC_MspInit+0x190>)
 8008216:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8008218:	4b2a      	ldr	r3, [pc, #168]	; (80082c4 <HAL_ADC_MspInit+0x190>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d10b      	bne.n	8008238 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008220:	4b29      	ldr	r3, [pc, #164]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	4a28      	ldr	r2, [pc, #160]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 8008226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822a:	6153      	str	r3, [r2, #20]
 800822c:	4b26      	ldr	r3, [pc, #152]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008238:	4b23      	ldr	r3, [pc, #140]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	4a22      	ldr	r2, [pc, #136]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 800823e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008242:	6153      	str	r3, [r2, #20]
 8008244:	4b20      	ldr	r3, [pc, #128]	; (80082c8 <HAL_ADC_MspInit+0x194>)
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008250:	2310      	movs	r3, #16
 8008252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008254:	2303      	movs	r3, #3
 8008256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008258:	2300      	movs	r3, #0
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800825c:	f107 031c 	add.w	r3, r7, #28
 8008260:	4619      	mov	r1, r3
 8008262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008266:	f7fb fd7d 	bl	8003d64 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800826a:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 800826c:	4a1b      	ldr	r2, [pc, #108]	; (80082dc <HAL_ADC_MspInit+0x1a8>)
 800826e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008270:	4b19      	ldr	r3, [pc, #100]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 8008272:	2200      	movs	r2, #0
 8008274:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 8008278:	2200      	movs	r2, #0
 800827a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800827c:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 800827e:	2280      	movs	r2, #128	; 0x80
 8008280:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008282:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 8008284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008288:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 800828c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008290:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8008292:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 8008294:	2220      	movs	r2, #32
 8008296:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008298:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 800829a:	2200      	movs	r2, #0
 800829c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800829e:	480e      	ldr	r0, [pc, #56]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 80082a0:	f7fb ff30 	bl	8004104 <HAL_DMA_Init>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_ADC_MspInit+0x17a>
      Msp_Error_Handler();
 80082aa:	f000 fa05 	bl	80086b8 <Msp_Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38
 80082b4:	4a08      	ldr	r2, [pc, #32]	; (80082d8 <HAL_ADC_MspInit+0x1a4>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80082ba:	bf00      	nop
 80082bc:	3730      	adds	r7, #48	; 0x30
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	2000018c 	.word	0x2000018c
 80082c8:	40021000 	.word	0x40021000
 80082cc:	200001e4 	.word	0x200001e4
 80082d0:	40020008 	.word	0x40020008
 80082d4:	50000100 	.word	0x50000100
 80082d8:	20000278 	.word	0x20000278
 80082dc:	40020408 	.word	0x40020408

080082e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	; 0x28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082e8:	f107 0314 	add.w	r3, r7, #20
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	605a      	str	r2, [r3, #4]
 80082f2:	609a      	str	r2, [r3, #8]
 80082f4:	60da      	str	r2, [r3, #12]
 80082f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a41      	ldr	r2, [pc, #260]	; (8008404 <HAL_I2C_MspInit+0x124>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d17c      	bne.n	80083fc <HAL_I2C_MspInit+0x11c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008302:	4b41      	ldr	r3, [pc, #260]	; (8008408 <HAL_I2C_MspInit+0x128>)
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	4a40      	ldr	r2, [pc, #256]	; (8008408 <HAL_I2C_MspInit+0x128>)
 8008308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800830c:	6153      	str	r3, [r2, #20]
 800830e:	4b3e      	ldr	r3, [pc, #248]	; (8008408 <HAL_I2C_MspInit+0x128>)
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800831a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800831e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008320:	2312      	movs	r3, #18
 8008322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008328:	2303      	movs	r3, #3
 800832a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800832c:	2304      	movs	r3, #4
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	4619      	mov	r1, r3
 8008336:	4835      	ldr	r0, [pc, #212]	; (800840c <HAL_I2C_MspInit+0x12c>)
 8008338:	f7fb fd14 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800833c:	4b32      	ldr	r3, [pc, #200]	; (8008408 <HAL_I2C_MspInit+0x128>)
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	4a31      	ldr	r2, [pc, #196]	; (8008408 <HAL_I2C_MspInit+0x128>)
 8008342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008346:	61d3      	str	r3, [r2, #28]
 8008348:	4b2f      	ldr	r3, [pc, #188]	; (8008408 <HAL_I2C_MspInit+0x128>)
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8008354:	4b2e      	ldr	r3, [pc, #184]	; (8008410 <HAL_I2C_MspInit+0x130>)
 8008356:	4a2f      	ldr	r2, [pc, #188]	; (8008414 <HAL_I2C_MspInit+0x134>)
 8008358:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800835a:	4b2d      	ldr	r3, [pc, #180]	; (8008410 <HAL_I2C_MspInit+0x130>)
 800835c:	2200      	movs	r2, #0
 800835e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008360:	4b2b      	ldr	r3, [pc, #172]	; (8008410 <HAL_I2C_MspInit+0x130>)
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008366:	4b2a      	ldr	r3, [pc, #168]	; (8008410 <HAL_I2C_MspInit+0x130>)
 8008368:	2280      	movs	r2, #128	; 0x80
 800836a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800836c:	4b28      	ldr	r3, [pc, #160]	; (8008410 <HAL_I2C_MspInit+0x130>)
 800836e:	2200      	movs	r2, #0
 8008370:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008372:	4b27      	ldr	r3, [pc, #156]	; (8008410 <HAL_I2C_MspInit+0x130>)
 8008374:	2200      	movs	r2, #0
 8008376:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008378:	4b25      	ldr	r3, [pc, #148]	; (8008410 <HAL_I2C_MspInit+0x130>)
 800837a:	2200      	movs	r2, #0
 800837c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800837e:	4b24      	ldr	r3, [pc, #144]	; (8008410 <HAL_I2C_MspInit+0x130>)
 8008380:	2200      	movs	r2, #0
 8008382:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8008384:	4822      	ldr	r0, [pc, #136]	; (8008410 <HAL_I2C_MspInit+0x130>)
 8008386:	f7fb febd 	bl	8004104 <HAL_DMA_Init>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_I2C_MspInit+0xb4>
    {
    	Msp_Error_Handler();
 8008390:	f000 f992 	bl	80086b8 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a1e      	ldr	r2, [pc, #120]	; (8008410 <HAL_I2C_MspInit+0x130>)
 8008398:	63da      	str	r2, [r3, #60]	; 0x3c
 800839a:	4a1d      	ldr	r2, [pc, #116]	; (8008410 <HAL_I2C_MspInit+0x130>)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80083a0:	4b1d      	ldr	r3, [pc, #116]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083a2:	4a1e      	ldr	r2, [pc, #120]	; (800841c <HAL_I2C_MspInit+0x13c>)
 80083a4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80083a6:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083a8:	2210      	movs	r2, #16
 80083aa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083ac:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80083b2:	4b19      	ldr	r3, [pc, #100]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083b4:	2280      	movs	r2, #128	; 0x80
 80083b6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80083b8:	4b17      	ldr	r3, [pc, #92]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80083be:	4b16      	ldr	r3, [pc, #88]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80083c4:	4b14      	ldr	r3, [pc, #80]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80083ca:	4b13      	ldr	r3, [pc, #76]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80083d0:	4811      	ldr	r0, [pc, #68]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083d2:	f7fb fe97 	bl	8004104 <HAL_DMA_Init>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <HAL_I2C_MspInit+0x100>
    {
    	Msp_Error_Handler();
 80083dc:	f000 f96c 	bl	80086b8 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a0d      	ldr	r2, [pc, #52]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38
 80083e6:	4a0c      	ldr	r2, [pc, #48]	; (8008418 <HAL_I2C_MspInit+0x138>)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	201f      	movs	r0, #31
 80083f2:	f7ff fe46 	bl	8008082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80083f6:	201f      	movs	r0, #31
 80083f8:	f7ff fe5f 	bl	80080ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80083fc:	bf00      	nop
 80083fe:	3728      	adds	r7, #40	; 0x28
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	40005400 	.word	0x40005400
 8008408:	40021000 	.word	0x40021000
 800840c:	48000400 	.word	0x48000400
 8008410:	20000338 	.word	0x20000338
 8008414:	40020080 	.word	0x40020080
 8008418:	2000037c 	.word	0x2000037c
 800841c:	4002006c 	.word	0x4002006c

08008420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	; 0x28
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008428:	f107 0314 	add.w	r3, r7, #20
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	609a      	str	r2, [r3, #8]
 8008434:	60da      	str	r2, [r3, #12]
 8008436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1b      	ldr	r2, [pc, #108]	; (80084ac <HAL_SPI_MspInit+0x8c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d130      	bne.n	80084a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008442:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <HAL_SPI_MspInit+0x90>)
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	4a1a      	ldr	r2, [pc, #104]	; (80084b0 <HAL_SPI_MspInit+0x90>)
 8008448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844c:	61d3      	str	r3, [r2, #28]
 800844e:	4b18      	ldr	r3, [pc, #96]	; (80084b0 <HAL_SPI_MspInit+0x90>)
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800845a:	4b15      	ldr	r3, [pc, #84]	; (80084b0 <HAL_SPI_MspInit+0x90>)
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <HAL_SPI_MspInit+0x90>)
 8008460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008464:	6153      	str	r3, [r2, #20]
 8008466:	4b12      	ldr	r3, [pc, #72]	; (80084b0 <HAL_SPI_MspInit+0x90>)
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008472:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008478:	2302      	movs	r3, #2
 800847a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847c:	2300      	movs	r3, #0
 800847e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008480:	2303      	movs	r3, #3
 8008482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008484:	2306      	movs	r3, #6
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	4619      	mov	r1, r3
 800848e:	4809      	ldr	r0, [pc, #36]	; (80084b4 <HAL_SPI_MspInit+0x94>)
 8008490:	f7fb fc68 	bl	8003d64 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8008494:	2200      	movs	r2, #0
 8008496:	2100      	movs	r1, #0
 8008498:	2033      	movs	r0, #51	; 0x33
 800849a:	f7ff fdf2 	bl	8008082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800849e:	2033      	movs	r0, #51	; 0x33
 80084a0:	f7ff fe0b 	bl	80080ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80084a4:	bf00      	nop
 80084a6:	3728      	adds	r7, #40	; 0x28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40003c00 	.word	0x40003c00
 80084b0:	40021000 	.word	0x40021000
 80084b4:	48000800 	.word	0x48000800

080084b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	; 0x28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	611a      	str	r2, [r3, #16]
	if(htim_base->Instance==TIM3)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a24      	ldr	r2, [pc, #144]	; (8008568 <HAL_TIM_Base_MspInit+0xb0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d131      	bne.n	800853e <HAL_TIM_Base_MspInit+0x86>
	{
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 80084da:	4b24      	ldr	r3, [pc, #144]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	4a23      	ldr	r2, [pc, #140]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 80084e0:	f043 0302 	orr.w	r3, r3, #2
 80084e4:	61d3      	str	r3, [r2, #28]
 80084e6:	4b21      	ldr	r3, [pc, #132]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80084f2:	4b1e      	ldr	r3, [pc, #120]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	4a1d      	ldr	r2, [pc, #116]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 80084f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084fc:	6153      	str	r3, [r2, #20]
 80084fe:	4b1b      	ldr	r3, [pc, #108]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
		/**TIM3 GPIO Configuration
		PA6     ------> TIM3_CH1
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 800850a:	2340      	movs	r3, #64	; 0x40
 800850c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800850e:	2302      	movs	r3, #2
 8008510:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008516:	2300      	movs	r3, #0
 8008518:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800851a:	2302      	movs	r3, #2
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800851e:	f107 0314 	add.w	r3, r7, #20
 8008522:	4619      	mov	r1, r3
 8008524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008528:	f7fb fc1c 	bl	8003d64 <HAL_GPIO_Init>

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800852c:	2200      	movs	r2, #0
 800852e:	2100      	movs	r1, #0
 8008530:	201d      	movs	r0, #29
 8008532:	f7ff fda6 	bl	8008082 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008536:	201d      	movs	r0, #29
 8008538:	f7ff fdbf 	bl	80080ba <HAL_NVIC_EnableIRQ>
	  }
	else
	{

	}
}
 800853c:	e010      	b.n	8008560 <HAL_TIM_Base_MspInit+0xa8>
	else if(htim_base->Instance==TIM4)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a0b      	ldr	r2, [pc, #44]	; (8008570 <HAL_TIM_Base_MspInit+0xb8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10b      	bne.n	8008560 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8008548:	4b08      	ldr	r3, [pc, #32]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	4a07      	ldr	r2, [pc, #28]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 800854e:	f043 0304 	orr.w	r3, r3, #4
 8008552:	61d3      	str	r3, [r2, #28]
 8008554:	4b05      	ldr	r3, [pc, #20]	; (800856c <HAL_TIM_Base_MspInit+0xb4>)
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
}
 8008560:	bf00      	nop
 8008562:	3728      	adds	r7, #40	; 0x28
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	40000400 	.word	0x40000400
 800856c:	40021000 	.word	0x40021000
 8008570:	40000800 	.word	0x40000800

08008574 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <HAL_TIM_PWM_MspInit+0x34>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d10b      	bne.n	800859e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008586:	4b09      	ldr	r3, [pc, #36]	; (80085ac <HAL_TIM_PWM_MspInit+0x38>)
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	4a08      	ldr	r2, [pc, #32]	; (80085ac <HAL_TIM_PWM_MspInit+0x38>)
 800858c:	f043 0304 	orr.w	r3, r3, #4
 8008590:	61d3      	str	r3, [r2, #28]
 8008592:	4b06      	ldr	r3, [pc, #24]	; (80085ac <HAL_TIM_PWM_MspInit+0x38>)
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800859e:	bf00      	nop
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr
 80085a8:	40000800 	.word	0x40000800
 80085ac:	40021000 	.word	0x40021000

080085b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b8:	f107 030c 	add.w	r3, r7, #12
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	605a      	str	r2, [r3, #4]
 80085c2:	609a      	str	r2, [r3, #8]
 80085c4:	60da      	str	r2, [r3, #12]
 80085c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a11      	ldr	r2, [pc, #68]	; (8008614 <HAL_TIM_MspPostInit+0x64>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d11b      	bne.n	800860a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085d2:	4b11      	ldr	r3, [pc, #68]	; (8008618 <HAL_TIM_MspPostInit+0x68>)
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	4a10      	ldr	r2, [pc, #64]	; (8008618 <HAL_TIM_MspPostInit+0x68>)
 80085d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085dc:	6153      	str	r3, [r2, #20]
 80085de:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <HAL_TIM_MspPostInit+0x68>)
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085e6:	60bb      	str	r3, [r7, #8]
 80085e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085ea:	23c0      	movs	r3, #192	; 0xc0
 80085ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ee:	2302      	movs	r3, #2
 80085f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80085fa:	2302      	movs	r3, #2
 80085fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085fe:	f107 030c 	add.w	r3, r7, #12
 8008602:	4619      	mov	r1, r3
 8008604:	4805      	ldr	r0, [pc, #20]	; (800861c <HAL_TIM_MspPostInit+0x6c>)
 8008606:	f7fb fbad 	bl	8003d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800860a:	bf00      	nop
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40000800 	.word	0x40000800
 8008618:	40021000 	.word	0x40021000
 800861c:	48000400 	.word	0x48000400

08008620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008628:	f107 0314 	add.w	r3, r7, #20
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	605a      	str	r2, [r3, #4]
 8008632:	609a      	str	r2, [r3, #8]
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1b      	ldr	r2, [pc, #108]	; (80086ac <HAL_UART_MspInit+0x8c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d12f      	bne.n	80086a2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008642:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <HAL_UART_MspInit+0x90>)
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	4a1a      	ldr	r2, [pc, #104]	; (80086b0 <HAL_UART_MspInit+0x90>)
 8008648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800864c:	6193      	str	r3, [r2, #24]
 800864e:	4b18      	ldr	r3, [pc, #96]	; (80086b0 <HAL_UART_MspInit+0x90>)
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <HAL_UART_MspInit+0x90>)
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <HAL_UART_MspInit+0x90>)
 8008660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008664:	6153      	str	r3, [r2, #20]
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <HAL_UART_MspInit+0x90>)
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008672:	2330      	movs	r3, #48	; 0x30
 8008674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008676:	2302      	movs	r3, #2
 8008678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800867e:	2303      	movs	r3, #3
 8008680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008682:	2307      	movs	r3, #7
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008686:	f107 0314 	add.w	r3, r7, #20
 800868a:	4619      	mov	r1, r3
 800868c:	4809      	ldr	r0, [pc, #36]	; (80086b4 <HAL_UART_MspInit+0x94>)
 800868e:	f7fb fb69 	bl	8003d64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008692:	2200      	movs	r2, #0
 8008694:	2100      	movs	r1, #0
 8008696:	2025      	movs	r0, #37	; 0x25
 8008698:	f7ff fcf3 	bl	8008082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800869c:	2025      	movs	r0, #37	; 0x25
 800869e:	f7ff fd0c 	bl	80080ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 0 */


  }

}
 80086a2:	bf00      	nop
 80086a4:	3728      	adds	r7, #40	; 0x28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	40013800 	.word	0x40013800
 80086b0:	40021000 	.word	0x40021000
 80086b4:	48000800 	.word	0x48000800

080086b8 <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80086bc:	b672      	cpsid	i
}
 80086be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80086c0:	e7fe      	b.n	80086c0 <Msp_Error_Handler+0x8>
	...

080086c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80086d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d102      	bne.n	80086ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f001 b83a 	b.w	800975e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 816f 	beq.w	80089de <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008700:	4bb5      	ldr	r3, [pc, #724]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f003 030c 	and.w	r3, r3, #12
 8008708:	2b04      	cmp	r3, #4
 800870a:	d00c      	beq.n	8008726 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800870c:	4bb2      	ldr	r3, [pc, #712]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f003 030c 	and.w	r3, r3, #12
 8008714:	2b08      	cmp	r3, #8
 8008716:	d15c      	bne.n	80087d2 <HAL_RCC_OscConfig+0x10e>
 8008718:	4baf      	ldr	r3, [pc, #700]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008724:	d155      	bne.n	80087d2 <HAL_RCC_OscConfig+0x10e>
 8008726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800872a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800872e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008732:	fa93 f3a3 	rbit	r3, r3
 8008736:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800873a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800873e:	fab3 f383 	clz	r3, r3
 8008742:	b2db      	uxtb	r3, r3
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f043 0301 	orr.w	r3, r3, #1
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b01      	cmp	r3, #1
 8008750:	d102      	bne.n	8008758 <HAL_RCC_OscConfig+0x94>
 8008752:	4ba1      	ldr	r3, [pc, #644]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	e015      	b.n	8008784 <HAL_RCC_OscConfig+0xc0>
 8008758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800875c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008760:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008764:	fa93 f3a3 	rbit	r3, r3
 8008768:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800876c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008770:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008774:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008778:	fa93 f3a3 	rbit	r3, r3
 800877c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008780:	4b95      	ldr	r3, [pc, #596]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008788:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800878c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008790:	fa92 f2a2 	rbit	r2, r2
 8008794:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008798:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800879c:	fab2 f282 	clz	r2, r2
 80087a0:	b2d2      	uxtb	r2, r2
 80087a2:	f042 0220 	orr.w	r2, r2, #32
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	f002 021f 	and.w	r2, r2, #31
 80087ac:	2101      	movs	r1, #1
 80087ae:	fa01 f202 	lsl.w	r2, r1, r2
 80087b2:	4013      	ands	r3, r2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8111 	beq.w	80089dc <HAL_RCC_OscConfig+0x318>
 80087ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f040 8108 	bne.w	80089dc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f000 bfc6 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e2:	d106      	bne.n	80087f2 <HAL_RCC_OscConfig+0x12e>
 80087e4:	4b7c      	ldr	r3, [pc, #496]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a7b      	ldr	r2, [pc, #492]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 80087ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	e036      	b.n	8008860 <HAL_RCC_OscConfig+0x19c>
 80087f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10c      	bne.n	800881c <HAL_RCC_OscConfig+0x158>
 8008802:	4b75      	ldr	r3, [pc, #468]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a74      	ldr	r2, [pc, #464]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	4b72      	ldr	r3, [pc, #456]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a71      	ldr	r2, [pc, #452]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	e021      	b.n	8008860 <HAL_RCC_OscConfig+0x19c>
 800881c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008820:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800882c:	d10c      	bne.n	8008848 <HAL_RCC_OscConfig+0x184>
 800882e:	4b6a      	ldr	r3, [pc, #424]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a69      	ldr	r2, [pc, #420]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	4b67      	ldr	r3, [pc, #412]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a66      	ldr	r2, [pc, #408]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	e00b      	b.n	8008860 <HAL_RCC_OscConfig+0x19c>
 8008848:	4b63      	ldr	r3, [pc, #396]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a62      	ldr	r2, [pc, #392]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 800884e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	4b60      	ldr	r3, [pc, #384]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a5f      	ldr	r2, [pc, #380]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 800885a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800885e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008864:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d059      	beq.n	8008924 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008870:	f7ff fb26 	bl	8007ec0 <HAL_GetTick>
 8008874:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008878:	e00a      	b.n	8008890 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800887a:	f7ff fb21 	bl	8007ec0 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b64      	cmp	r3, #100	; 0x64
 8008888:	d902      	bls.n	8008890 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	f000 bf67 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
 8008890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008894:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008898:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800889c:	fa93 f3a3 	rbit	r3, r3
 80088a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80088a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088a8:	fab3 f383 	clz	r3, r3
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d102      	bne.n	80088c2 <HAL_RCC_OscConfig+0x1fe>
 80088bc:	4b46      	ldr	r3, [pc, #280]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	e015      	b.n	80088ee <HAL_RCC_OscConfig+0x22a>
 80088c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80088ce:	fa93 f3a3 	rbit	r3, r3
 80088d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80088d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80088de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80088e2:	fa93 f3a3 	rbit	r3, r3
 80088e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80088ea:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80088f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80088f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80088fa:	fa92 f2a2 	rbit	r2, r2
 80088fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008902:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008906:	fab2 f282 	clz	r2, r2
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	f042 0220 	orr.w	r2, r2, #32
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	f002 021f 	and.w	r2, r2, #31
 8008916:	2101      	movs	r1, #1
 8008918:	fa01 f202 	lsl.w	r2, r1, r2
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0ab      	beq.n	800887a <HAL_RCC_OscConfig+0x1b6>
 8008922:	e05c      	b.n	80089de <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008924:	f7ff facc 	bl	8007ec0 <HAL_GetTick>
 8008928:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800892c:	e00a      	b.n	8008944 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800892e:	f7ff fac7 	bl	8007ec0 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b64      	cmp	r3, #100	; 0x64
 800893c:	d902      	bls.n	8008944 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	f000 bf0d 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
 8008944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008948:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800894c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008950:	fa93 f3a3 	rbit	r3, r3
 8008954:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008958:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800895c:	fab3 f383 	clz	r3, r3
 8008960:	b2db      	uxtb	r3, r3
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	b2db      	uxtb	r3, r3
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b01      	cmp	r3, #1
 800896e:	d102      	bne.n	8008976 <HAL_RCC_OscConfig+0x2b2>
 8008970:	4b19      	ldr	r3, [pc, #100]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	e015      	b.n	80089a2 <HAL_RCC_OscConfig+0x2de>
 8008976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800897a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800897e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008982:	fa93 f3a3 	rbit	r3, r3
 8008986:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800898a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800898e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008992:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008996:	fa93 f3a3 	rbit	r3, r3
 800899a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800899e:	4b0e      	ldr	r3, [pc, #56]	; (80089d8 <HAL_RCC_OscConfig+0x314>)
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80089a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80089aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80089ae:	fa92 f2a2 	rbit	r2, r2
 80089b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80089b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80089ba:	fab2 f282 	clz	r2, r2
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	f042 0220 	orr.w	r2, r2, #32
 80089c4:	b2d2      	uxtb	r2, r2
 80089c6:	f002 021f 	and.w	r2, r2, #31
 80089ca:	2101      	movs	r1, #1
 80089cc:	fa01 f202 	lsl.w	r2, r1, r2
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1ab      	bne.n	800892e <HAL_RCC_OscConfig+0x26a>
 80089d6:	e002      	b.n	80089de <HAL_RCC_OscConfig+0x31a>
 80089d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 817f 	beq.w	8008cf2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80089f4:	4ba7      	ldr	r3, [pc, #668]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f003 030c 	and.w	r3, r3, #12
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00c      	beq.n	8008a1a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008a00:	4ba4      	ldr	r3, [pc, #656]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f003 030c 	and.w	r3, r3, #12
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d173      	bne.n	8008af4 <HAL_RCC_OscConfig+0x430>
 8008a0c:	4ba1      	ldr	r3, [pc, #644]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a18:	d16c      	bne.n	8008af4 <HAL_RCC_OscConfig+0x430>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a20:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008a24:	fa93 f3a3 	rbit	r3, r3
 8008a28:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8008a2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a30:	fab3 f383 	clz	r3, r3
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	095b      	lsrs	r3, r3, #5
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d102      	bne.n	8008a4a <HAL_RCC_OscConfig+0x386>
 8008a44:	4b93      	ldr	r3, [pc, #588]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	e013      	b.n	8008a72 <HAL_RCC_OscConfig+0x3ae>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a50:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008a54:	fa93 f3a3 	rbit	r3, r3
 8008a58:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008a62:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008a66:	fa93 f3a3 	rbit	r3, r3
 8008a6a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008a6e:	4b89      	ldr	r3, [pc, #548]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	2202      	movs	r2, #2
 8008a74:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008a78:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008a7c:	fa92 f2a2 	rbit	r2, r2
 8008a80:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008a84:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008a88:	fab2 f282 	clz	r2, r2
 8008a8c:	b2d2      	uxtb	r2, r2
 8008a8e:	f042 0220 	orr.w	r2, r2, #32
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	f002 021f 	and.w	r2, r2, #31
 8008a98:	2101      	movs	r1, #1
 8008a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <HAL_RCC_OscConfig+0x3f6>
 8008aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008aa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d002      	beq.n	8008aba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f000 be52 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aba:	4b76      	ldr	r3, [pc, #472]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ac6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	21f8      	movs	r1, #248	; 0xf8
 8008ad0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ad4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008ad8:	fa91 f1a1 	rbit	r1, r1
 8008adc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008ae0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008ae4:	fab1 f181 	clz	r1, r1
 8008ae8:	b2c9      	uxtb	r1, r1
 8008aea:	408b      	lsls	r3, r1
 8008aec:	4969      	ldr	r1, [pc, #420]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008af2:	e0fe      	b.n	8008cf2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008af8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8088 	beq.w	8008c16 <HAL_RCC_OscConfig+0x552>
 8008b06:	2301      	movs	r3, #1
 8008b08:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b0c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008b10:	fa93 f3a3 	rbit	r3, r3
 8008b14:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008b18:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b1c:	fab3 f383 	clz	r3, r3
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008b26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	2301      	movs	r3, #1
 8008b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b32:	f7ff f9c5 	bl	8007ec0 <HAL_GetTick>
 8008b36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b3a:	e00a      	b.n	8008b52 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b3c:	f7ff f9c0 	bl	8007ec0 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d902      	bls.n	8008b52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	f000 be06 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
 8008b52:	2302      	movs	r3, #2
 8008b54:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b58:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008b5c:	fa93 f3a3 	rbit	r3, r3
 8008b60:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8008b64:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b68:	fab3 f383 	clz	r3, r3
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d102      	bne.n	8008b82 <HAL_RCC_OscConfig+0x4be>
 8008b7c:	4b45      	ldr	r3, [pc, #276]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	e013      	b.n	8008baa <HAL_RCC_OscConfig+0x4e6>
 8008b82:	2302      	movs	r3, #2
 8008b84:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b88:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008b8c:	fa93 f3a3 	rbit	r3, r3
 8008b90:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008b94:	2302      	movs	r3, #2
 8008b96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008b9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008b9e:	fa93 f3a3 	rbit	r3, r3
 8008ba2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008ba6:	4b3b      	ldr	r3, [pc, #236]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	2202      	movs	r2, #2
 8008bac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008bb0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008bb4:	fa92 f2a2 	rbit	r2, r2
 8008bb8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8008bbc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008bc0:	fab2 f282 	clz	r2, r2
 8008bc4:	b2d2      	uxtb	r2, r2
 8008bc6:	f042 0220 	orr.w	r2, r2, #32
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	f002 021f 	and.w	r2, r2, #31
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0af      	beq.n	8008b3c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bdc:	4b2d      	ldr	r3, [pc, #180]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008be8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	21f8      	movs	r1, #248	; 0xf8
 8008bf2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bf6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008bfa:	fa91 f1a1 	rbit	r1, r1
 8008bfe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8008c02:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008c06:	fab1 f181 	clz	r1, r1
 8008c0a:	b2c9      	uxtb	r1, r1
 8008c0c:	408b      	lsls	r3, r1
 8008c0e:	4921      	ldr	r1, [pc, #132]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	600b      	str	r3, [r1, #0]
 8008c14:	e06d      	b.n	8008cf2 <HAL_RCC_OscConfig+0x62e>
 8008c16:	2301      	movs	r3, #1
 8008c18:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008c20:	fa93 f3a3 	rbit	r3, r3
 8008c24:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8008c28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c2c:	fab3 f383 	clz	r3, r3
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008c36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c42:	f7ff f93d 	bl	8007ec0 <HAL_GetTick>
 8008c46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c4a:	e00a      	b.n	8008c62 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c4c:	f7ff f938 	bl	8007ec0 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d902      	bls.n	8008c62 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	f000 bd7e 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
 8008c62:	2302      	movs	r3, #2
 8008c64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c6c:	fa93 f3a3 	rbit	r3, r3
 8008c70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8008c74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c78:	fab3 f383 	clz	r3, r3
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	095b      	lsrs	r3, r3, #5
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f043 0301 	orr.w	r3, r3, #1
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d105      	bne.n	8008c98 <HAL_RCC_OscConfig+0x5d4>
 8008c8c:	4b01      	ldr	r3, [pc, #4]	; (8008c94 <HAL_RCC_OscConfig+0x5d0>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	e016      	b.n	8008cc0 <HAL_RCC_OscConfig+0x5fc>
 8008c92:	bf00      	nop
 8008c94:	40021000 	.word	0x40021000
 8008c98:	2302      	movs	r3, #2
 8008c9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca2:	fa93 f3a3 	rbit	r3, r3
 8008ca6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008caa:	2302      	movs	r3, #2
 8008cac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008cb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008cb4:	fa93 f3a3 	rbit	r3, r3
 8008cb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008cbc:	4bbf      	ldr	r3, [pc, #764]	; (8008fbc <HAL_RCC_OscConfig+0x8f8>)
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008cc6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008cca:	fa92 f2a2 	rbit	r2, r2
 8008cce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8008cd2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008cd6:	fab2 f282 	clz	r2, r2
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	f042 0220 	orr.w	r2, r2, #32
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	f002 021f 	and.w	r2, r2, #31
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8008cec:	4013      	ands	r3, r2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1ac      	bne.n	8008c4c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008cf6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8113 	beq.w	8008f2e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d07c      	beq.n	8008e12 <HAL_RCC_OscConfig+0x74e>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d22:	fa93 f3a3 	rbit	r3, r3
 8008d26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8008d2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d2e:	fab3 f383 	clz	r3, r3
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	4ba2      	ldr	r3, [pc, #648]	; (8008fc0 <HAL_RCC_OscConfig+0x8fc>)
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	2301      	movs	r3, #1
 8008d40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d42:	f7ff f8bd 	bl	8007ec0 <HAL_GetTick>
 8008d46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d4a:	e00a      	b.n	8008d62 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d4c:	f7ff f8b8 	bl	8007ec0 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d902      	bls.n	8008d62 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	f000 bcfe 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
 8008d62:	2302      	movs	r3, #2
 8008d64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d6c:	fa93 f2a3 	rbit	r2, r3
 8008d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d82:	2202      	movs	r2, #2
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	fa93 f2a3 	rbit	r2, r3
 8008d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008da2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008da6:	2202      	movs	r2, #2
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	fa93 f2a3 	rbit	r2, r3
 8008db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008dc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dc2:	4b7e      	ldr	r3, [pc, #504]	; (8008fbc <HAL_RCC_OscConfig+0x8f8>)
 8008dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dce:	2102      	movs	r1, #2
 8008dd0:	6019      	str	r1, [r3, #0]
 8008dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	fa93 f1a3 	rbit	r1, r3
 8008de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008de4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008de8:	6019      	str	r1, [r3, #0]
  return result;
 8008dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	fab3 f383 	clz	r3, r3
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 031f 	and.w	r3, r3, #31
 8008e04:	2101      	movs	r1, #1
 8008e06:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d09d      	beq.n	8008d4c <HAL_RCC_OscConfig+0x688>
 8008e10:	e08d      	b.n	8008f2e <HAL_RCC_OscConfig+0x86a>
 8008e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	fa93 f2a3 	rbit	r2, r3
 8008e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e34:	601a      	str	r2, [r3, #0]
  return result;
 8008e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e3e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e40:	fab3 f383 	clz	r3, r3
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	4b5d      	ldr	r3, [pc, #372]	; (8008fc0 <HAL_RCC_OscConfig+0x8fc>)
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e54:	f7ff f834 	bl	8007ec0 <HAL_GetTick>
 8008e58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e5c:	e00a      	b.n	8008e74 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e5e:	f7ff f82f 	bl	8007ec0 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d902      	bls.n	8008e74 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	f000 bc75 	b.w	800975e <HAL_RCC_OscConfig+0x109a>
 8008e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	fa93 f2a3 	rbit	r2, r3
 8008e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	fa93 f2a3 	rbit	r2, r3
 8008eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ec0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ecc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	fa93 f2a3 	rbit	r2, r3
 8008ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008ede:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ee0:	4b36      	ldr	r3, [pc, #216]	; (8008fbc <HAL_RCC_OscConfig+0x8f8>)
 8008ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ee8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008eec:	2102      	movs	r1, #2
 8008eee:	6019      	str	r1, [r3, #0]
 8008ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ef4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	fa93 f1a3 	rbit	r1, r3
 8008efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f02:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008f06:	6019      	str	r1, [r3, #0]
  return result;
 8008f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	fab3 f383 	clz	r3, r3
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	f003 031f 	and.w	r3, r3, #31
 8008f22:	2101      	movs	r1, #1
 8008f24:	fa01 f303 	lsl.w	r3, r1, r3
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d197      	bne.n	8008e5e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 81a5 	beq.w	800928e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f4a:	4b1c      	ldr	r3, [pc, #112]	; (8008fbc <HAL_RCC_OscConfig+0x8f8>)
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d116      	bne.n	8008f84 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f56:	4b19      	ldr	r3, [pc, #100]	; (8008fbc <HAL_RCC_OscConfig+0x8f8>)
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	4a18      	ldr	r2, [pc, #96]	; (8008fbc <HAL_RCC_OscConfig+0x8f8>)
 8008f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f60:	61d3      	str	r3, [r2, #28]
 8008f62:	4b16      	ldr	r3, [pc, #88]	; (8008fbc <HAL_RCC_OscConfig+0x8f8>)
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <HAL_RCC_OscConfig+0x900>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d121      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f90:	4b0c      	ldr	r3, [pc, #48]	; (8008fc4 <HAL_RCC_OscConfig+0x900>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a0b      	ldr	r2, [pc, #44]	; (8008fc4 <HAL_RCC_OscConfig+0x900>)
 8008f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f9c:	f7fe ff90 	bl	8007ec0 <HAL_GetTick>
 8008fa0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fa4:	e010      	b.n	8008fc8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fa6:	f7fe ff8b 	bl	8007ec0 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b64      	cmp	r3, #100	; 0x64
 8008fb4:	d908      	bls.n	8008fc8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e3d1      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	10908120 	.word	0x10908120
 8008fc4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fc8:	4b8d      	ldr	r3, [pc, #564]	; (8009200 <HAL_RCC_OscConfig+0xb3c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0e8      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d106      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x92e>
 8008fe4:	4b87      	ldr	r3, [pc, #540]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	4a86      	ldr	r2, [pc, #536]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8008fea:	f043 0301 	orr.w	r3, r3, #1
 8008fee:	6213      	str	r3, [r2, #32]
 8008ff0:	e035      	b.n	800905e <HAL_RCC_OscConfig+0x99a>
 8008ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ff6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10c      	bne.n	800901c <HAL_RCC_OscConfig+0x958>
 8009002:	4b80      	ldr	r3, [pc, #512]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	4a7f      	ldr	r2, [pc, #508]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	6213      	str	r3, [r2, #32]
 800900e:	4b7d      	ldr	r3, [pc, #500]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	4a7c      	ldr	r2, [pc, #496]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009014:	f023 0304 	bic.w	r3, r3, #4
 8009018:	6213      	str	r3, [r2, #32]
 800901a:	e020      	b.n	800905e <HAL_RCC_OscConfig+0x99a>
 800901c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009020:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2b05      	cmp	r3, #5
 800902a:	d10c      	bne.n	8009046 <HAL_RCC_OscConfig+0x982>
 800902c:	4b75      	ldr	r3, [pc, #468]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	4a74      	ldr	r2, [pc, #464]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009032:	f043 0304 	orr.w	r3, r3, #4
 8009036:	6213      	str	r3, [r2, #32]
 8009038:	4b72      	ldr	r3, [pc, #456]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	4a71      	ldr	r2, [pc, #452]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 800903e:	f043 0301 	orr.w	r3, r3, #1
 8009042:	6213      	str	r3, [r2, #32]
 8009044:	e00b      	b.n	800905e <HAL_RCC_OscConfig+0x99a>
 8009046:	4b6f      	ldr	r3, [pc, #444]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	4a6e      	ldr	r2, [pc, #440]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 800904c:	f023 0301 	bic.w	r3, r3, #1
 8009050:	6213      	str	r3, [r2, #32]
 8009052:	4b6c      	ldr	r3, [pc, #432]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	4a6b      	ldr	r2, [pc, #428]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009058:	f023 0304 	bic.w	r3, r3, #4
 800905c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800905e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009062:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 8081 	beq.w	8009172 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009070:	f7fe ff26 	bl	8007ec0 <HAL_GetTick>
 8009074:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009078:	e00b      	b.n	8009092 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800907a:	f7fe ff21 	bl	8007ec0 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	f241 3288 	movw	r2, #5000	; 0x1388
 800908a:	4293      	cmp	r3, r2
 800908c:	d901      	bls.n	8009092 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e365      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
 8009092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009096:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800909a:	2202      	movs	r2, #2
 800909c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800909e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	fa93 f2a3 	rbit	r2, r3
 80090ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80090be:	2202      	movs	r2, #2
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	fa93 f2a3 	rbit	r2, r3
 80090d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80090d8:	601a      	str	r2, [r3, #0]
  return result;
 80090da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80090e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090e4:	fab3 f383 	clz	r3, r3
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	095b      	lsrs	r3, r3, #5
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	f043 0302 	orr.w	r3, r3, #2
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d102      	bne.n	80090fe <HAL_RCC_OscConfig+0xa3a>
 80090f8:	4b42      	ldr	r3, [pc, #264]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	e013      	b.n	8009126 <HAL_RCC_OscConfig+0xa62>
 80090fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009102:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009106:	2202      	movs	r2, #2
 8009108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800910a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800910e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	fa93 f2a3 	rbit	r2, r3
 8009118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800911c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	4b38      	ldr	r3, [pc, #224]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800912a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800912e:	2102      	movs	r1, #2
 8009130:	6011      	str	r1, [r2, #0]
 8009132:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009136:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	fa92 f1a2 	rbit	r1, r2
 8009140:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009144:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8009148:	6011      	str	r1, [r2, #0]
  return result;
 800914a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800914e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	fab2 f282 	clz	r2, r2
 8009158:	b2d2      	uxtb	r2, r2
 800915a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	f002 021f 	and.w	r2, r2, #31
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f202 	lsl.w	r2, r1, r2
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d084      	beq.n	800907a <HAL_RCC_OscConfig+0x9b6>
 8009170:	e083      	b.n	800927a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009172:	f7fe fea5 	bl	8007ec0 <HAL_GetTick>
 8009176:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800917a:	e00b      	b.n	8009194 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800917c:	f7fe fea0 	bl	8007ec0 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	4293      	cmp	r3, r2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e2e4      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
 8009194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009198:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800919c:	2202      	movs	r2, #2
 800919e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	fa93 f2a3 	rbit	r2, r3
 80091ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80091c0:	2202      	movs	r2, #2
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	fa93 f2a3 	rbit	r2, r3
 80091d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80091da:	601a      	str	r2, [r3, #0]
  return result;
 80091dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091e0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80091e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091e6:	fab3 f383 	clz	r3, r3
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	095b      	lsrs	r3, r3, #5
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	f043 0302 	orr.w	r3, r3, #2
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d106      	bne.n	8009208 <HAL_RCC_OscConfig+0xb44>
 80091fa:	4b02      	ldr	r3, [pc, #8]	; (8009204 <HAL_RCC_OscConfig+0xb40>)
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	e017      	b.n	8009230 <HAL_RCC_OscConfig+0xb6c>
 8009200:	40007000 	.word	0x40007000
 8009204:	40021000 	.word	0x40021000
 8009208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800920c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009210:	2202      	movs	r2, #2
 8009212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009218:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	fa93 f2a3 	rbit	r2, r3
 8009222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009226:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	4bb3      	ldr	r3, [pc, #716]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009234:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009238:	2102      	movs	r1, #2
 800923a:	6011      	str	r1, [r2, #0]
 800923c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009240:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009244:	6812      	ldr	r2, [r2, #0]
 8009246:	fa92 f1a2 	rbit	r1, r2
 800924a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800924e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8009252:	6011      	str	r1, [r2, #0]
  return result;
 8009254:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009258:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	fab2 f282 	clz	r2, r2
 8009262:	b2d2      	uxtb	r2, r2
 8009264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	f002 021f 	and.w	r2, r2, #31
 800926e:	2101      	movs	r1, #1
 8009270:	fa01 f202 	lsl.w	r2, r1, r2
 8009274:	4013      	ands	r3, r2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d180      	bne.n	800917c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800927a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800927e:	2b01      	cmp	r3, #1
 8009280:	d105      	bne.n	800928e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009282:	4b9e      	ldr	r3, [pc, #632]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	4a9d      	ldr	r2, [pc, #628]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 8009288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800928c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800928e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 825e 	beq.w	800975c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092a0:	4b96      	ldr	r3, [pc, #600]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f003 030c 	and.w	r3, r3, #12
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	f000 821f 	beq.w	80096ec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	f040 8170 	bne.w	80095a0 <HAL_RCC_OscConfig+0xedc>
 80092c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80092c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	fa93 f2a3 	rbit	r2, r3
 80092dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80092e4:	601a      	str	r2, [r3, #0]
  return result;
 80092e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80092ee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f0:	fab3 f383 	clz	r3, r3
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80092fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	461a      	mov	r2, r3
 8009302:	2300      	movs	r3, #0
 8009304:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009306:	f7fe fddb 	bl	8007ec0 <HAL_GetTick>
 800930a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800930e:	e009      	b.n	8009324 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009310:	f7fe fdd6 	bl	8007ec0 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e21c      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
 8009324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009328:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800932c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009336:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	fa93 f2a3 	rbit	r2, r3
 8009340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009344:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009348:	601a      	str	r2, [r3, #0]
  return result;
 800934a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800934e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009352:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009354:	fab3 f383 	clz	r3, r3
 8009358:	b2db      	uxtb	r3, r3
 800935a:	095b      	lsrs	r3, r3, #5
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f043 0301 	orr.w	r3, r3, #1
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b01      	cmp	r3, #1
 8009366:	d102      	bne.n	800936e <HAL_RCC_OscConfig+0xcaa>
 8009368:	4b64      	ldr	r3, [pc, #400]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	e027      	b.n	80093be <HAL_RCC_OscConfig+0xcfa>
 800936e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009372:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800937a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800937c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009380:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	fa93 f2a3 	rbit	r2, r3
 800938a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800938e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009398:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800939c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	fa93 f2a3 	rbit	r2, r3
 80093b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	4b50      	ldr	r3, [pc, #320]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80093c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80093c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80093ca:	6011      	str	r1, [r2, #0]
 80093cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80093d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80093d4:	6812      	ldr	r2, [r2, #0]
 80093d6:	fa92 f1a2 	rbit	r1, r2
 80093da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80093de:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80093e2:	6011      	str	r1, [r2, #0]
  return result;
 80093e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80093e8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	fab2 f282 	clz	r2, r2
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	f042 0220 	orr.w	r2, r2, #32
 80093f8:	b2d2      	uxtb	r2, r2
 80093fa:	f002 021f 	and.w	r2, r2, #31
 80093fe:	2101      	movs	r1, #1
 8009400:	fa01 f202 	lsl.w	r2, r1, r2
 8009404:	4013      	ands	r3, r2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d182      	bne.n	8009310 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800940a:	4b3c      	ldr	r3, [pc, #240]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	f023 020f 	bic.w	r2, r3, #15
 8009412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009416:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	4937      	ldr	r1, [pc, #220]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 8009420:	4313      	orrs	r3, r2
 8009422:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009424:	4b35      	ldr	r3, [pc, #212]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800942c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009430:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6a19      	ldr	r1, [r3, #32]
 8009438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800943c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	430b      	orrs	r3, r1
 8009446:	492d      	ldr	r1, [pc, #180]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 8009448:	4313      	orrs	r3, r2
 800944a:	604b      	str	r3, [r1, #4]
 800944c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009450:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800945a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800945e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	fa93 f2a3 	rbit	r2, r3
 8009468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800946c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009470:	601a      	str	r2, [r3, #0]
  return result;
 8009472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009476:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800947a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800947c:	fab3 f383 	clz	r3, r3
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009486:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	461a      	mov	r2, r3
 800948e:	2301      	movs	r3, #1
 8009490:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009492:	f7fe fd15 	bl	8007ec0 <HAL_GetTick>
 8009496:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800949a:	e009      	b.n	80094b0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800949c:	f7fe fd10 	bl	8007ec0 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d901      	bls.n	80094b0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e156      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
 80094b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094b4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80094b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	fa93 f2a3 	rbit	r2, r3
 80094cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80094d4:	601a      	str	r2, [r3, #0]
  return result;
 80094d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80094de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80094e0:	fab3 f383 	clz	r3, r3
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d105      	bne.n	8009500 <HAL_RCC_OscConfig+0xe3c>
 80094f4:	4b01      	ldr	r3, [pc, #4]	; (80094fc <HAL_RCC_OscConfig+0xe38>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	e02a      	b.n	8009550 <HAL_RCC_OscConfig+0xe8c>
 80094fa:	bf00      	nop
 80094fc:	40021000 	.word	0x40021000
 8009500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009504:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800950c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009512:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	fa93 f2a3 	rbit	r2, r3
 800951c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009520:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800952a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800952e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009538:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	fa93 f2a3 	rbit	r2, r3
 8009542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009546:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	4b86      	ldr	r3, [pc, #536]	; (8009768 <HAL_RCC_OscConfig+0x10a4>)
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009554:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009558:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009562:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	fa92 f1a2 	rbit	r1, r2
 800956c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009570:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009574:	6011      	str	r1, [r2, #0]
  return result;
 8009576:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800957a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	fab2 f282 	clz	r2, r2
 8009584:	b2d2      	uxtb	r2, r2
 8009586:	f042 0220 	orr.w	r2, r2, #32
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	f002 021f 	and.w	r2, r2, #31
 8009590:	2101      	movs	r1, #1
 8009592:	fa01 f202 	lsl.w	r2, r1, r2
 8009596:	4013      	ands	r3, r2
 8009598:	2b00      	cmp	r3, #0
 800959a:	f43f af7f 	beq.w	800949c <HAL_RCC_OscConfig+0xdd8>
 800959e:	e0dd      	b.n	800975c <HAL_RCC_OscConfig+0x1098>
 80095a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80095a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	fa93 f2a3 	rbit	r2, r3
 80095bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095c0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80095c4:	601a      	str	r2, [r3, #0]
  return result;
 80095c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80095ce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095d0:	fab3 f383 	clz	r3, r3
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80095da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	461a      	mov	r2, r3
 80095e2:	2300      	movs	r3, #0
 80095e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095e6:	f7fe fc6b 	bl	8007ec0 <HAL_GetTick>
 80095ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095ee:	e009      	b.n	8009604 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095f0:	f7fe fc66 	bl	8007ec0 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d901      	bls.n	8009604 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e0ac      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
 8009604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009608:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800960c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009616:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	fa93 f2a3 	rbit	r2, r3
 8009620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009624:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009628:	601a      	str	r2, [r3, #0]
  return result;
 800962a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800962e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009632:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009634:	fab3 f383 	clz	r3, r3
 8009638:	b2db      	uxtb	r3, r3
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b01      	cmp	r3, #1
 8009646:	d102      	bne.n	800964e <HAL_RCC_OscConfig+0xf8a>
 8009648:	4b47      	ldr	r3, [pc, #284]	; (8009768 <HAL_RCC_OscConfig+0x10a4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	e027      	b.n	800969e <HAL_RCC_OscConfig+0xfda>
 800964e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009652:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800965a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009660:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	fa93 f2a3 	rbit	r2, r3
 800966a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800966e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009678:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800967c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009686:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	fa93 f2a3 	rbit	r2, r3
 8009690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009694:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	4b33      	ldr	r3, [pc, #204]	; (8009768 <HAL_RCC_OscConfig+0x10a4>)
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80096a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80096a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80096aa:	6011      	str	r1, [r2, #0]
 80096ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80096b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	fa92 f1a2 	rbit	r1, r2
 80096ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80096be:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80096c2:	6011      	str	r1, [r2, #0]
  return result;
 80096c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80096c8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	fab2 f282 	clz	r2, r2
 80096d2:	b2d2      	uxtb	r2, r2
 80096d4:	f042 0220 	orr.w	r2, r2, #32
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	f002 021f 	and.w	r2, r2, #31
 80096de:	2101      	movs	r1, #1
 80096e0:	fa01 f202 	lsl.w	r2, r1, r2
 80096e4:	4013      	ands	r3, r2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d182      	bne.n	80095f0 <HAL_RCC_OscConfig+0xf2c>
 80096ea:	e037      	b.n	800975c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e02e      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009700:	4b19      	ldr	r3, [pc, #100]	; (8009768 <HAL_RCC_OscConfig+0x10a4>)
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8009708:	4b17      	ldr	r3, [pc, #92]	; (8009768 <HAL_RCC_OscConfig+0x10a4>)
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009710:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009714:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8009718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800971c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	429a      	cmp	r2, r3
 8009726:	d117      	bne.n	8009758 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009728:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800972c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009734:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800973c:	429a      	cmp	r2, r3
 800973e:	d10b      	bne.n	8009758 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8009740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009744:	f003 020f 	and.w	r2, r3, #15
 8009748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800974c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009754:	429a      	cmp	r2, r3
 8009756:	d001      	beq.n	800975c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	40021000 	.word	0x40021000

0800976c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b09e      	sub	sp, #120	; 0x78
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e162      	b.n	8009a4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009784:	4b90      	ldr	r3, [pc, #576]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d910      	bls.n	80097b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009792:	4b8d      	ldr	r3, [pc, #564]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f023 0207 	bic.w	r2, r3, #7
 800979a:	498b      	ldr	r1, [pc, #556]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	4313      	orrs	r3, r2
 80097a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097a2:	4b89      	ldr	r3, [pc, #548]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d001      	beq.n	80097b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e14a      	b.n	8009a4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d008      	beq.n	80097d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097c0:	4b82      	ldr	r3, [pc, #520]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	497f      	ldr	r1, [pc, #508]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 80dc 	beq.w	8009998 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d13c      	bne.n	8009862 <HAL_RCC_ClockConfig+0xf6>
 80097e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097f0:	fa93 f3a3 	rbit	r3, r3
 80097f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80097f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097f8:	fab3 f383 	clz	r3, r3
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	095b      	lsrs	r3, r3, #5
 8009800:	b2db      	uxtb	r3, r3
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b01      	cmp	r3, #1
 800980a:	d102      	bne.n	8009812 <HAL_RCC_ClockConfig+0xa6>
 800980c:	4b6f      	ldr	r3, [pc, #444]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	e00f      	b.n	8009832 <HAL_RCC_ClockConfig+0xc6>
 8009812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009816:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800981a:	fa93 f3a3 	rbit	r3, r3
 800981e:	667b      	str	r3, [r7, #100]	; 0x64
 8009820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009824:	663b      	str	r3, [r7, #96]	; 0x60
 8009826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009828:	fa93 f3a3 	rbit	r3, r3
 800982c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800982e:	4b67      	ldr	r3, [pc, #412]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009836:	65ba      	str	r2, [r7, #88]	; 0x58
 8009838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800983a:	fa92 f2a2 	rbit	r2, r2
 800983e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009840:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009842:	fab2 f282 	clz	r2, r2
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	f042 0220 	orr.w	r2, r2, #32
 800984c:	b2d2      	uxtb	r2, r2
 800984e:	f002 021f 	and.w	r2, r2, #31
 8009852:	2101      	movs	r1, #1
 8009854:	fa01 f202 	lsl.w	r2, r1, r2
 8009858:	4013      	ands	r3, r2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d17b      	bne.n	8009956 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e0f3      	b.n	8009a4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d13c      	bne.n	80098e4 <HAL_RCC_ClockConfig+0x178>
 800986a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800986e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009872:	fa93 f3a3 	rbit	r3, r3
 8009876:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800987a:	fab3 f383 	clz	r3, r3
 800987e:	b2db      	uxtb	r3, r3
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f043 0301 	orr.w	r3, r3, #1
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b01      	cmp	r3, #1
 800988c:	d102      	bne.n	8009894 <HAL_RCC_ClockConfig+0x128>
 800988e:	4b4f      	ldr	r3, [pc, #316]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	e00f      	b.n	80098b4 <HAL_RCC_ClockConfig+0x148>
 8009894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009898:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800989a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800989c:	fa93 f3a3 	rbit	r3, r3
 80098a0:	647b      	str	r3, [r7, #68]	; 0x44
 80098a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098a6:	643b      	str	r3, [r7, #64]	; 0x40
 80098a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098aa:	fa93 f3a3 	rbit	r3, r3
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098b0:	4b46      	ldr	r3, [pc, #280]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80098b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80098ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098bc:	fa92 f2a2 	rbit	r2, r2
 80098c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80098c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098c4:	fab2 f282 	clz	r2, r2
 80098c8:	b2d2      	uxtb	r2, r2
 80098ca:	f042 0220 	orr.w	r2, r2, #32
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	f002 021f 	and.w	r2, r2, #31
 80098d4:	2101      	movs	r1, #1
 80098d6:	fa01 f202 	lsl.w	r2, r1, r2
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d13a      	bne.n	8009956 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e0b2      	b.n	8009a4a <HAL_RCC_ClockConfig+0x2de>
 80098e4:	2302      	movs	r3, #2
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	fa93 f3a3 	rbit	r3, r3
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098f2:	fab3 f383 	clz	r3, r3
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	095b      	lsrs	r3, r3, #5
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f043 0301 	orr.w	r3, r3, #1
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b01      	cmp	r3, #1
 8009904:	d102      	bne.n	800990c <HAL_RCC_ClockConfig+0x1a0>
 8009906:	4b31      	ldr	r3, [pc, #196]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	e00d      	b.n	8009928 <HAL_RCC_ClockConfig+0x1bc>
 800990c:	2302      	movs	r3, #2
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	fa93 f3a3 	rbit	r3, r3
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
 8009918:	2302      	movs	r3, #2
 800991a:	623b      	str	r3, [r7, #32]
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	fa93 f3a3 	rbit	r3, r3
 8009922:	61fb      	str	r3, [r7, #28]
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	2202      	movs	r2, #2
 800992a:	61ba      	str	r2, [r7, #24]
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	fa92 f2a2 	rbit	r2, r2
 8009932:	617a      	str	r2, [r7, #20]
  return result;
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	fab2 f282 	clz	r2, r2
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	f042 0220 	orr.w	r2, r2, #32
 8009940:	b2d2      	uxtb	r2, r2
 8009942:	f002 021f 	and.w	r2, r2, #31
 8009946:	2101      	movs	r1, #1
 8009948:	fa01 f202 	lsl.w	r2, r1, r2
 800994c:	4013      	ands	r3, r2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e079      	b.n	8009a4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009956:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f023 0203 	bic.w	r2, r3, #3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	491a      	ldr	r1, [pc, #104]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 8009964:	4313      	orrs	r3, r2
 8009966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009968:	f7fe faaa 	bl	8007ec0 <HAL_GetTick>
 800996c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800996e:	e00a      	b.n	8009986 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009970:	f7fe faa6 	bl	8007ec0 <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	f241 3288 	movw	r2, #5000	; 0x1388
 800997e:	4293      	cmp	r3, r2
 8009980:	d901      	bls.n	8009986 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e061      	b.n	8009a4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009986:	4b11      	ldr	r3, [pc, #68]	; (80099cc <HAL_RCC_ClockConfig+0x260>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f003 020c 	and.w	r2, r3, #12
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	429a      	cmp	r2, r3
 8009996:	d1eb      	bne.n	8009970 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009998:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0307 	and.w	r3, r3, #7
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d214      	bcs.n	80099d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099a6:	4b08      	ldr	r3, [pc, #32]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f023 0207 	bic.w	r2, r3, #7
 80099ae:	4906      	ldr	r1, [pc, #24]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099b6:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <HAL_RCC_ClockConfig+0x25c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d005      	beq.n	80099d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e040      	b.n	8009a4a <HAL_RCC_ClockConfig+0x2de>
 80099c8:	40022000 	.word	0x40022000
 80099cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d008      	beq.n	80099ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099dc:	4b1d      	ldr	r3, [pc, #116]	; (8009a54 <HAL_RCC_ClockConfig+0x2e8>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	491a      	ldr	r1, [pc, #104]	; (8009a54 <HAL_RCC_ClockConfig+0x2e8>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0308 	and.w	r3, r3, #8
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d009      	beq.n	8009a0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099fa:	4b16      	ldr	r3, [pc, #88]	; (8009a54 <HAL_RCC_ClockConfig+0x2e8>)
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	4912      	ldr	r1, [pc, #72]	; (8009a54 <HAL_RCC_ClockConfig+0x2e8>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009a0e:	f000 f829 	bl	8009a64 <HAL_RCC_GetSysClockFreq>
 8009a12:	4601      	mov	r1, r0
 8009a14:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <HAL_RCC_ClockConfig+0x2e8>)
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a1c:	22f0      	movs	r2, #240	; 0xf0
 8009a1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	fa92 f2a2 	rbit	r2, r2
 8009a26:	60fa      	str	r2, [r7, #12]
  return result;
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	fab2 f282 	clz	r2, r2
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	40d3      	lsrs	r3, r2
 8009a32:	4a09      	ldr	r2, [pc, #36]	; (8009a58 <HAL_RCC_ClockConfig+0x2ec>)
 8009a34:	5cd3      	ldrb	r3, [r2, r3]
 8009a36:	fa21 f303 	lsr.w	r3, r1, r3
 8009a3a:	4a08      	ldr	r2, [pc, #32]	; (8009a5c <HAL_RCC_ClockConfig+0x2f0>)
 8009a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8009a3e:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <HAL_RCC_ClockConfig+0x2f4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe f9f4 	bl	8007e30 <HAL_InitTick>
  
  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3778      	adds	r7, #120	; 0x78
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	40021000 	.word	0x40021000
 8009a58:	0800c7bc 	.word	0x0800c7bc
 8009a5c:	20000000 	.word	0x20000000
 8009a60:	20000004 	.word	0x20000004

08009a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b08b      	sub	sp, #44	; 0x2c
 8009a68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	2300      	movs	r3, #0
 8009a70:	61bb      	str	r3, [r7, #24]
 8009a72:	2300      	movs	r3, #0
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
 8009a76:	2300      	movs	r3, #0
 8009a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009a7e:	4b2a      	ldr	r3, [pc, #168]	; (8009b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	f003 030c 	and.w	r3, r3, #12
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d002      	beq.n	8009a94 <HAL_RCC_GetSysClockFreq+0x30>
 8009a8e:	2b08      	cmp	r3, #8
 8009a90:	d003      	beq.n	8009a9a <HAL_RCC_GetSysClockFreq+0x36>
 8009a92:	e03f      	b.n	8009b14 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009a94:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8009a96:	623b      	str	r3, [r7, #32]
      break;
 8009a98:	e03f      	b.n	8009b1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009aa0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009aa4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	fa92 f2a2 	rbit	r2, r2
 8009aac:	607a      	str	r2, [r7, #4]
  return result;
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	fab2 f282 	clz	r2, r2
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	40d3      	lsrs	r3, r2
 8009ab8:	4a1d      	ldr	r2, [pc, #116]	; (8009b30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009aba:	5cd3      	ldrb	r3, [r2, r3]
 8009abc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009abe:	4b1a      	ldr	r3, [pc, #104]	; (8009b28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	f003 030f 	and.w	r3, r3, #15
 8009ac6:	220f      	movs	r2, #15
 8009ac8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	fa92 f2a2 	rbit	r2, r2
 8009ad0:	60fa      	str	r2, [r7, #12]
  return result;
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	fab2 f282 	clz	r2, r2
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	40d3      	lsrs	r3, r2
 8009adc:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009ade:	5cd3      	ldrb	r3, [r2, r3]
 8009ae0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009aec:	4a0f      	ldr	r2, [pc, #60]	; (8009b2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	fb02 f303 	mul.w	r3, r2, r3
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24
 8009afc:	e007      	b.n	8009b0e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009afe:	4a0b      	ldr	r2, [pc, #44]	; (8009b2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	fb02 f303 	mul.w	r3, r2, r3
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	623b      	str	r3, [r7, #32]
      break;
 8009b12:	e002      	b.n	8009b1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8009b16:	623b      	str	r3, [r7, #32]
      break;
 8009b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	372c      	adds	r7, #44	; 0x2c
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc80      	pop	{r7}
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	40021000 	.word	0x40021000
 8009b2c:	007a1200 	.word	0x007a1200
 8009b30:	0800c7d4 	.word	0x0800c7d4
 8009b34:	0800c7e4 	.word	0x0800c7e4

08009b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b3c:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bc80      	pop	{r7}
 8009b46:	4770      	bx	lr
 8009b48:	20000000 	.word	0x20000000

08009b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009b52:	f7ff fff1 	bl	8009b38 <HAL_RCC_GetHCLKFreq>
 8009b56:	4601      	mov	r1, r0
 8009b58:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009b64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	fa92 f2a2 	rbit	r2, r2
 8009b6c:	603a      	str	r2, [r7, #0]
  return result;
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	fab2 f282 	clz	r2, r2
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	40d3      	lsrs	r3, r2
 8009b78:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8009b7a:	5cd3      	ldrb	r3, [r2, r3]
 8009b7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40021000 	.word	0x40021000
 8009b8c:	0800c7cc 	.word	0x0800c7cc

08009b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009b96:	f7ff ffcf 	bl	8009b38 <HAL_RCC_GetHCLKFreq>
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	4b0b      	ldr	r3, [pc, #44]	; (8009bcc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009ba4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009ba8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	fa92 f2a2 	rbit	r2, r2
 8009bb0:	603a      	str	r2, [r7, #0]
  return result;
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	fab2 f282 	clz	r2, r2
 8009bb8:	b2d2      	uxtb	r2, r2
 8009bba:	40d3      	lsrs	r3, r2
 8009bbc:	4a04      	ldr	r2, [pc, #16]	; (8009bd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009bbe:	5cd3      	ldrb	r3, [r2, r3]
 8009bc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	0800c7cc 	.word	0x0800c7cc

08009bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b092      	sub	sp, #72	; 0x48
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 80d4 	beq.w	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bf8:	4b4e      	ldr	r3, [pc, #312]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10e      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c04:	4b4b      	ldr	r3, [pc, #300]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	4a4a      	ldr	r2, [pc, #296]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c0e:	61d3      	str	r3, [r2, #28]
 8009c10:	4b48      	ldr	r3, [pc, #288]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c18:	60bb      	str	r3, [r7, #8]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c22:	4b45      	ldr	r3, [pc, #276]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d118      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c2e:	4b42      	ldr	r3, [pc, #264]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a41      	ldr	r2, [pc, #260]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c3a:	f7fe f941 	bl	8007ec0 <HAL_GetTick>
 8009c3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c40:	e008      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c42:	f7fe f93d 	bl	8007ec0 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b64      	cmp	r3, #100	; 0x64
 8009c4e:	d901      	bls.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e1d6      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c54:	4b38      	ldr	r3, [pc, #224]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0f0      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009c60:	4b34      	ldr	r3, [pc, #208]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 8084 	beq.w	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d07c      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c80:	4b2c      	ldr	r3, [pc, #176]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	fa93 f3a3 	rbit	r3, r3
 8009c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c9a:	fab3 f383 	clz	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	2301      	movs	r3, #1
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb6:	fa93 f3a3 	rbit	r3, r3
 8009cba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009cbe:	fab3 f383 	clz	r3, r3
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4b1d      	ldr	r3, [pc, #116]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	461a      	mov	r2, r3
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009cd2:	4a18      	ldr	r2, [pc, #96]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d04b      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ce2:	f7fe f8ed 	bl	8007ec0 <HAL_GetTick>
 8009ce6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ce8:	e00a      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cea:	f7fe f8e9 	bl	8007ec0 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d901      	bls.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e180      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009d00:	2302      	movs	r3, #2
 8009d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	fa93 f3a3 	rbit	r3, r3
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	623b      	str	r3, [r7, #32]
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	fa93 f3a3 	rbit	r3, r3
 8009d16:	61fb      	str	r3, [r7, #28]
  return result;
 8009d18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d1a:	fab3 f383 	clz	r3, r3
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	095b      	lsrs	r3, r3, #5
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d108      	bne.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009d2e:	4b01      	ldr	r3, [pc, #4]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	e00d      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009d34:	40021000 	.word	0x40021000
 8009d38:	40007000 	.word	0x40007000
 8009d3c:	10908100 	.word	0x10908100
 8009d40:	2302      	movs	r3, #2
 8009d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	fa93 f3a3 	rbit	r3, r3
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	4b9a      	ldr	r3, [pc, #616]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2202      	movs	r2, #2
 8009d52:	613a      	str	r2, [r7, #16]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	fa92 f2a2 	rbit	r2, r2
 8009d5a:	60fa      	str	r2, [r7, #12]
  return result;
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	fab2 f282 	clz	r2, r2
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	f002 021f 	and.w	r2, r2, #31
 8009d6e:	2101      	movs	r1, #1
 8009d70:	fa01 f202 	lsl.w	r2, r1, r2
 8009d74:	4013      	ands	r3, r2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0b7      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009d7a:	4b8f      	ldr	r3, [pc, #572]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	498c      	ldr	r1, [pc, #560]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009d8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d105      	bne.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d94:	4b88      	ldr	r3, [pc, #544]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	4a87      	ldr	r2, [pc, #540]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d008      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009dac:	4b82      	ldr	r3, [pc, #520]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	f023 0203 	bic.w	r2, r3, #3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	497f      	ldr	r1, [pc, #508]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d008      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009dca:	4b7b      	ldr	r3, [pc, #492]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	4978      	ldr	r1, [pc, #480]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d008      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009de8:	4b73      	ldr	r3, [pc, #460]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	4970      	ldr	r1, [pc, #448]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d008      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009e06:	4b6c      	ldr	r3, [pc, #432]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0a:	f023 0210 	bic.w	r2, r3, #16
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	4969      	ldr	r1, [pc, #420]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d008      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009e24:	4b64      	ldr	r3, [pc, #400]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e30:	4961      	ldr	r1, [pc, #388]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d008      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009e42:	4b5d      	ldr	r3, [pc, #372]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e46:	f023 0220 	bic.w	r2, r3, #32
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	495a      	ldr	r1, [pc, #360]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d008      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e60:	4b55      	ldr	r3, [pc, #340]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e64:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	4952      	ldr	r1, [pc, #328]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0308 	and.w	r3, r3, #8
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d008      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e7e:	4b4e      	ldr	r3, [pc, #312]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	494b      	ldr	r1, [pc, #300]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e9c:	4b46      	ldr	r3, [pc, #280]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	4943      	ldr	r1, [pc, #268]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d008      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009eba:	4b3f      	ldr	r3, [pc, #252]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec6:	493c      	ldr	r1, [pc, #240]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d008      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ed8:	4b37      	ldr	r3, [pc, #220]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	4934      	ldr	r1, [pc, #208]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d008      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009ef6:	4b30      	ldr	r3, [pc, #192]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	492d      	ldr	r1, [pc, #180]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d008      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009f14:	4b28      	ldr	r3, [pc, #160]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f20:	4925      	ldr	r1, [pc, #148]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8009f32:	4b21      	ldr	r3, [pc, #132]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	491e      	ldr	r1, [pc, #120]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d008      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8009f50:	4b19      	ldr	r3, [pc, #100]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	4916      	ldr	r1, [pc, #88]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d008      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8009f6e:	4b12      	ldr	r3, [pc, #72]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	490f      	ldr	r1, [pc, #60]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f98:	4907      	ldr	r1, [pc, #28]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00c      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8009faa:	4b03      	ldr	r3, [pc, #12]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	e002      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009fb6:	bf00      	nop
 8009fb8:	40021000 	.word	0x40021000
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fbe:	4913      	ldr	r1, [pc, #76]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d008      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009fd0:	4b0e      	ldr	r3, [pc, #56]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fdc:	490b      	ldr	r1, [pc, #44]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d008      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8009fee:	4b07      	ldr	r3, [pc, #28]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffa:	4904      	ldr	r1, [pc, #16]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3748      	adds	r7, #72	; 0x48
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	40021000 	.word	0x40021000

0800a010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a014:	e7fe      	b.n	800a014 <NMI_Handler+0x4>

0800a016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a016:	b480      	push	{r7}
 800a018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a01a:	e7fe      	b.n	800a01a <HardFault_Handler+0x4>

0800a01c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a020:	e7fe      	b.n	800a020 <MemManage_Handler+0x4>

0800a022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a022:	b480      	push	{r7}
 800a024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a026:	e7fe      	b.n	800a026 <BusFault_Handler+0x4>

0800a028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a028:	b480      	push	{r7}
 800a02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a02c:	e7fe      	b.n	800a02c <UsageFault_Handler+0x4>

0800a02e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a02e:	b480      	push	{r7}
 800a030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a032:	bf00      	nop
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr

0800a03a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a03a:	b480      	push	{r7}
 800a03c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a03e:	bf00      	nop
 800a040:	46bd      	mov	sp, r7
 800a042:	bc80      	pop	{r7}
 800a044:	4770      	bx	lr
	...

0800a048 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a04c:	4802      	ldr	r0, [pc, #8]	; (800a058 <DMA1_Channel1_IRQHandler+0x10>)
 800a04e:	f7fa f975 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a052:	bf00      	nop
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200001e4 	.word	0x200001e4

0800a05c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a060:	4802      	ldr	r0, [pc, #8]	; (800a06c <DMA1_Channel6_IRQHandler+0x10>)
 800a062:	f7fa f96b 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800a066:	bf00      	nop
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	2000037c 	.word	0x2000037c

0800a070 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a074:	4802      	ldr	r0, [pc, #8]	; (800a080 <DMA1_Channel7_IRQHandler+0x10>)
 800a076:	f7fa f961 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800a07a:	bf00      	nop
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000338 	.word	0x20000338

0800a084 <DMA2_Channel1_IRQHandler>:

void DMA2_Channel1_IRQHandler(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a088:	4802      	ldr	r0, [pc, #8]	; (800a094 <DMA2_Channel1_IRQHandler+0x10>)
 800a08a:	f7fa f957 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a08e:	bf00      	nop
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20000278 	.word	0x20000278

0800a098 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a09c:	4802      	ldr	r0, [pc, #8]	; (800a0a8 <TIM3_IRQHandler+0x10>)
 800a09e:	f7fa fe45 	bl	8004d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a0a2:	bf00      	nop
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20000114 	.word	0x20000114

0800a0ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a0b0:	4802      	ldr	r0, [pc, #8]	; (800a0bc <I2C1_EV_IRQHandler+0x10>)
 800a0b2:	f7fc fb0d 	bl	80066d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a0b6:	bf00      	nop
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200002bc 	.word	0x200002bc

0800a0c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a0c4:	4802      	ldr	r0, [pc, #8]	; (800a0d0 <USART1_IRQHandler+0x10>)
 800a0c6:	f000 fa9b 	bl	800a600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a0ca:	bf00      	nop
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	2000044c 	.word	0x2000044c

0800a0d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800a0d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a0dc:	f7f9 fffa 	bl	80040d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a0e0:	bf00      	nop
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a0e8:	4802      	ldr	r0, [pc, #8]	; (800a0f4 <SPI3_IRQHandler+0x10>)
 800a0ea:	f000 f8e7 	bl	800a2bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a0ee:	bf00      	nop
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	200003c0 	.word	0x200003c0

0800a0f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e0c1      	b.n	800a28e <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d108      	bne.n	800a124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a11a:	d009      	beq.n	800a130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	61da      	str	r2, [r3, #28]
 800a122:	e005      	b.n	800a130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d12a      	bne.n	800a198 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a52      	ldr	r2, [pc, #328]	; (800a298 <HAL_SPI_Init+0x1a0>)
 800a14e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a52      	ldr	r2, [pc, #328]	; (800a29c <HAL_SPI_Init+0x1a4>)
 800a154:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a51      	ldr	r2, [pc, #324]	; (800a2a0 <HAL_SPI_Init+0x1a8>)
 800a15a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a51      	ldr	r2, [pc, #324]	; (800a2a4 <HAL_SPI_Init+0x1ac>)
 800a160:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a50      	ldr	r2, [pc, #320]	; (800a2a8 <HAL_SPI_Init+0x1b0>)
 800a166:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a50      	ldr	r2, [pc, #320]	; (800a2ac <HAL_SPI_Init+0x1b4>)
 800a16c:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a4f      	ldr	r2, [pc, #316]	; (800a2b0 <HAL_SPI_Init+0x1b8>)
 800a172:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a4f      	ldr	r2, [pc, #316]	; (800a2b4 <HAL_SPI_Init+0x1bc>)
 800a178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a182:	2b00      	cmp	r3, #0
 800a184:	d103      	bne.n	800a18e <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a4b      	ldr	r2, [pc, #300]	; (800a2b8 <HAL_SPI_Init+0x1c0>)
 800a18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1b8:	d902      	bls.n	800a1c0 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	e002      	b.n	800a1c6 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1ce:	d007      	beq.n	800a1e0 <HAL_SPI_Init+0xe8>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1d8:	d002      	beq.n	800a1e0 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a222:	ea42 0103 	orr.w	r1, r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	0c1b      	lsrs	r3, r3, #16
 800a23c:	f003 0204 	and.w	r2, r3, #4
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	f003 0310 	and.w	r3, r3, #16
 800a248:	431a      	orrs	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	431a      	orrs	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a25c:	ea42 0103 	orr.w	r1, r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69da      	ldr	r2, [r3, #28]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a27c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	0800a4a9 	.word	0x0800a4a9
 800a29c:	0800a4bb 	.word	0x0800a4bb
 800a2a0:	0800a4cd 	.word	0x0800a4cd
 800a2a4:	0800a4df 	.word	0x0800a4df
 800a2a8:	0800a4f1 	.word	0x0800a4f1
 800a2ac:	0800a503 	.word	0x0800a503
 800a2b0:	0800a515 	.word	0x0800a515
 800a2b4:	0800a527 	.word	0x0800a527
 800a2b8:	08008421 	.word	0x08008421

0800a2bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10e      	bne.n	800a2fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d009      	beq.n	800a2fc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	4798      	blx	r3
    return;
 800a2fa:	e0cf      	b.n	800a49c <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d009      	beq.n	800a31a <HAL_SPI_IRQHandler+0x5e>
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d004      	beq.n	800a31a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	4798      	blx	r3
    return;
 800a318:	e0c0      	b.n	800a49c <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <HAL_SPI_IRQHandler+0x7e>
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d105      	bne.n	800a33a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 80b1 	beq.w	800a49c <HAL_SPI_IRQHandler+0x1e0>
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	f003 0320 	and.w	r3, r3, #32
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80ab 	beq.w	800a49c <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d023      	beq.n	800a398 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d011      	beq.n	800a380 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a360:	f043 0204 	orr.w	r2, r3, #4
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a368:	2300      	movs	r3, #0
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	e00b      	b.n	800a398 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a380:	2300      	movs	r3, #0
 800a382:	613b      	str	r3, [r7, #16]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	613b      	str	r3, [r7, #16]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	613b      	str	r3, [r7, #16]
 800a394:	693b      	ldr	r3, [r7, #16]
        return;
 800a396:	e081      	b.n	800a49c <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d014      	beq.n	800a3cc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3a6:	f043 0201 	orr.w	r2, r3, #1
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	60fb      	str	r3, [r7, #12]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00c      	beq.n	800a3f0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3da:	f043 0208 	orr.w	r2, r3, #8
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60bb      	str	r3, [r7, #8]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	60bb      	str	r3, [r7, #8]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d050      	beq.n	800a49a <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a406:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f003 0302 	and.w	r3, r3, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d104      	bne.n	800a424 <HAL_SPI_IRQHandler+0x168>
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d034      	beq.n	800a48e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 0203 	bic.w	r2, r2, #3
 800a432:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d011      	beq.n	800a460 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a440:	4a18      	ldr	r2, [pc, #96]	; (800a4a4 <HAL_SPI_IRQHandler+0x1e8>)
 800a442:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a448:	4618      	mov	r0, r3
 800a44a:	f7f9 ff39 	bl	80042c0 <HAL_DMA_Abort_IT>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d005      	beq.n	800a460 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a464:	2b00      	cmp	r3, #0
 800a466:	d017      	beq.n	800a498 <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46c:	4a0d      	ldr	r2, [pc, #52]	; (800a4a4 <HAL_SPI_IRQHandler+0x1e8>)
 800a46e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a474:	4618      	mov	r0, r3
 800a476:	f7f9 ff23 	bl	80042c0 <HAL_DMA_Abort_IT>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00b      	beq.n	800a498 <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a484:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a48c:	e004      	b.n	800a498 <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a496:	e000      	b.n	800a49a <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 800a498:	bf00      	nop
    return;
 800a49a:	bf00      	nop
  }
}
 800a49c:	3720      	adds	r7, #32
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	0800a539 	.word	0x0800a539

0800a4a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc80      	pop	{r7}
 800a4b8:	4770      	bx	lr

0800a4ba <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bc80      	pop	{r7}
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr

0800a4de <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bc80      	pop	{r7}
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bc80      	pop	{r7}
 800a500:	4770      	bx	lr

0800a502 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	bc80      	pop	{r7}
 800a512:	4770      	bx	lr

0800a514 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	bc80      	pop	{r7}
 800a524:	4770      	bx	lr

0800a526 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	bc80      	pop	{r7}
 800a536:	4770      	bx	lr

0800a538 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a55c:	bf00      	nop
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e040      	b.n	800a5f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7fe f84a 	bl	8008620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2224      	movs	r2, #36	; 0x24
 800a590:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 0201 	bic.w	r2, r2, #1
 800a5a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fb28 	bl	800abf8 <UART_SetConfig>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e022      	b.n	800a5f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fcf2 	bl	800afa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689a      	ldr	r2, [r3, #8]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f042 0201 	orr.w	r2, r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fd78 	bl	800b0e6 <UART_CheckIdleState>
 800a5f6:	4603      	mov	r3, r0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b0ba      	sub	sp, #232	; 0xe8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a626:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a62a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a62e:	4013      	ands	r3, r2
 800a630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d115      	bne.n	800a668 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a640:	f003 0320 	and.w	r3, r3, #32
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00f      	beq.n	800a668 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b00      	cmp	r3, #0
 800a652:	d009      	beq.n	800a668 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 82a3 	beq.w	800aba4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
      }
      return;
 800a666:	e29d      	b.n	800aba4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 8117 	beq.w	800a8a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a67e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a682:	4b85      	ldr	r3, [pc, #532]	; (800a898 <HAL_UART_IRQHandler+0x298>)
 800a684:	4013      	ands	r3, r2
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 810a 	beq.w	800a8a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	2b00      	cmp	r3, #0
 800a696:	d011      	beq.n	800a6bc <HAL_UART_IRQHandler+0xbc>
 800a698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00b      	beq.n	800a6bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6b2:	f043 0201 	orr.w	r2, r3, #1
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c0:	f003 0302 	and.w	r3, r3, #2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d011      	beq.n	800a6ec <HAL_UART_IRQHandler+0xec>
 800a6c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2202      	movs	r2, #2
 800a6da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6e2:	f043 0204 	orr.w	r2, r3, #4
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d011      	beq.n	800a71c <HAL_UART_IRQHandler+0x11c>
 800a6f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00b      	beq.n	800a71c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2204      	movs	r2, #4
 800a70a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a712:	f043 0202 	orr.w	r2, r3, #2
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a720:	f003 0308 	and.w	r3, r3, #8
 800a724:	2b00      	cmp	r3, #0
 800a726:	d017      	beq.n	800a758 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b00      	cmp	r3, #0
 800a732:	d105      	bne.n	800a740 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a738:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2208      	movs	r2, #8
 800a746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a74e:	f043 0208 	orr.w	r2, r3, #8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a75c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a760:	2b00      	cmp	r3, #0
 800a762:	d012      	beq.n	800a78a <HAL_UART_IRQHandler+0x18a>
 800a764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00c      	beq.n	800a78a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a780:	f043 0220 	orr.w	r2, r3, #32
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 8209 	beq.w	800aba8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00d      	beq.n	800a7be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7a6:	f003 0320 	and.w	r3, r3, #32
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d007      	beq.n	800a7be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d2:	2b40      	cmp	r3, #64	; 0x40
 800a7d4:	d005      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d04f      	beq.n	800a882 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fd8c 	bl	800b300 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d141      	bne.n	800a87a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a804:	e853 3f00 	ldrex	r3, [r3]
 800a808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a80c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3308      	adds	r3, #8
 800a81e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a82e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1d9      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a846:	2b00      	cmp	r3, #0
 800a848:	d013      	beq.n	800a872 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84e:	4a13      	ldr	r2, [pc, #76]	; (800a89c <HAL_UART_IRQHandler+0x29c>)
 800a850:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a856:	4618      	mov	r0, r3
 800a858:	f7f9 fd32 	bl	80042c0 <HAL_DMA_Abort_IT>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d017      	beq.n	800a892 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a870:	e00f      	b.n	800a892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f9ab 	bl	800abce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a878:	e00b      	b.n	800a892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f9a7 	bl	800abce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a880:	e007      	b.n	800a892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f9a3 	bl	800abce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a890:	e18a      	b.n	800aba8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a892:	bf00      	nop
    return;
 800a894:	e188      	b.n	800aba8 <HAL_UART_IRQHandler+0x5a8>
 800a896:	bf00      	nop
 800a898:	04000120 	.word	0x04000120
 800a89c:	0800b3c5 	.word	0x0800b3c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	f040 8143 	bne.w	800ab30 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ae:	f003 0310 	and.w	r3, r3, #16
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 813c 	beq.w	800ab30 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8bc:	f003 0310 	and.w	r3, r3, #16
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 8135 	beq.w	800ab30 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d8:	2b40      	cmp	r3, #64	; 0x40
 800a8da:	f040 80b1 	bne.w	800aa40 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 815c 	beq.w	800abac <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a8fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8fe:	429a      	cmp	r2, r3
 800a900:	f080 8154 	bcs.w	800abac <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a90a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	2b20      	cmp	r3, #32
 800a916:	f000 8085 	beq.w	800aa24 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a92e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a948:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a950:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a954:	e841 2300 	strex	r3, r2, [r1]
 800a958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1da      	bne.n	800a91a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3308      	adds	r3, #8
 800a96a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a96e:	e853 3f00 	ldrex	r3, [r3]
 800a972:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a976:	f023 0301 	bic.w	r3, r3, #1
 800a97a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a988:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a98c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a990:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a99a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e1      	bne.n	800a964 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e3      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9f4:	f023 0310 	bic.w	r3, r3, #16
 800a9f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa06:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa0e:	e841 2300 	strex	r3, r2, [r1]
 800aa12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1e4      	bne.n	800a9e4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f9 fc16 	bl	8004250 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f8d1 	bl	800abe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa3e:	e0b5      	b.n	800abac <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 80a7 	beq.w	800abb0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800aa62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 80a2 	beq.w	800abb0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa8e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e4      	bne.n	800aa6c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	623b      	str	r3, [r7, #32]
   return(result);
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aac6:	633a      	str	r2, [r7, #48]	; 0x30
 800aac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aace:	e841 2300 	strex	r3, r2, [r1]
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1e3      	bne.n	800aaa2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2220      	movs	r2, #32
 800aade:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	e853 3f00 	ldrex	r3, [r3]
 800aaf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f023 0310 	bic.w	r3, r3, #16
 800ab00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab0e:	61fb      	str	r3, [r7, #28]
 800ab10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	69b9      	ldr	r1, [r7, #24]
 800ab14:	69fa      	ldr	r2, [r7, #28]
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e4      	bne.n	800aaec <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f859 	bl	800abe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab2e:	e03f      	b.n	800abb0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <HAL_UART_IRQHandler+0x55a>
 800ab3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d008      	beq.n	800ab5a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ab50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fc76 	bl	800b444 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab58:	e02d      	b.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ab5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00e      	beq.n	800ab84 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ab66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d008      	beq.n	800ab84 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d01c      	beq.n	800abb4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	4798      	blx	r3
    }
    return;
 800ab82:	e017      	b.n	800abb4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d012      	beq.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
 800ab90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00c      	beq.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fc27 	bl	800b3f0 <UART_EndTransmit_IT>
    return;
 800aba2:	e008      	b.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
      return;
 800aba4:	bf00      	nop
 800aba6:	e006      	b.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
    return;
 800aba8:	bf00      	nop
 800abaa:	e004      	b.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
      return;
 800abac:	bf00      	nop
 800abae:	e002      	b.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
      return;
 800abb0:	bf00      	nop
 800abb2:	e000      	b.n	800abb6 <HAL_UART_IRQHandler+0x5b6>
    return;
 800abb4:	bf00      	nop
  }

}
 800abb6:	37e8      	adds	r7, #232	; 0xe8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	bc80      	pop	{r7}
 800abcc:	4770      	bx	lr

0800abce <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	bc80      	pop	{r7}
 800abde:	4770      	bx	lr

0800abe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr
	...

0800abf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	431a      	orrs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	4b92      	ldr	r3, [pc, #584]	; (800ae6c <UART_SetConfig+0x274>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	6979      	ldr	r1, [r7, #20]
 800ac2c:	430b      	orrs	r3, r1
 800ac2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a80      	ldr	r2, [pc, #512]	; (800ae70 <UART_SetConfig+0x278>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d120      	bne.n	800acb6 <UART_SetConfig+0xbe>
 800ac74:	4b7f      	ldr	r3, [pc, #508]	; (800ae74 <UART_SetConfig+0x27c>)
 800ac76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d817      	bhi.n	800acb0 <UART_SetConfig+0xb8>
 800ac80:	a201      	add	r2, pc, #4	; (adr r2, 800ac88 <UART_SetConfig+0x90>)
 800ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800ac99 	.word	0x0800ac99
 800ac8c:	0800aca5 	.word	0x0800aca5
 800ac90:	0800acab 	.word	0x0800acab
 800ac94:	0800ac9f 	.word	0x0800ac9f
 800ac98:	2301      	movs	r3, #1
 800ac9a:	77fb      	strb	r3, [r7, #31]
 800ac9c:	e0b5      	b.n	800ae0a <UART_SetConfig+0x212>
 800ac9e:	2302      	movs	r3, #2
 800aca0:	77fb      	strb	r3, [r7, #31]
 800aca2:	e0b2      	b.n	800ae0a <UART_SetConfig+0x212>
 800aca4:	2304      	movs	r3, #4
 800aca6:	77fb      	strb	r3, [r7, #31]
 800aca8:	e0af      	b.n	800ae0a <UART_SetConfig+0x212>
 800acaa:	2308      	movs	r3, #8
 800acac:	77fb      	strb	r3, [r7, #31]
 800acae:	e0ac      	b.n	800ae0a <UART_SetConfig+0x212>
 800acb0:	2310      	movs	r3, #16
 800acb2:	77fb      	strb	r3, [r7, #31]
 800acb4:	e0a9      	b.n	800ae0a <UART_SetConfig+0x212>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a6f      	ldr	r2, [pc, #444]	; (800ae78 <UART_SetConfig+0x280>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d124      	bne.n	800ad0a <UART_SetConfig+0x112>
 800acc0:	4b6c      	ldr	r3, [pc, #432]	; (800ae74 <UART_SetConfig+0x27c>)
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800acc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800accc:	d011      	beq.n	800acf2 <UART_SetConfig+0xfa>
 800acce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acd2:	d817      	bhi.n	800ad04 <UART_SetConfig+0x10c>
 800acd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd8:	d011      	beq.n	800acfe <UART_SetConfig+0x106>
 800acda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acde:	d811      	bhi.n	800ad04 <UART_SetConfig+0x10c>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <UART_SetConfig+0xf4>
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace8:	d006      	beq.n	800acf8 <UART_SetConfig+0x100>
 800acea:	e00b      	b.n	800ad04 <UART_SetConfig+0x10c>
 800acec:	2300      	movs	r3, #0
 800acee:	77fb      	strb	r3, [r7, #31]
 800acf0:	e08b      	b.n	800ae0a <UART_SetConfig+0x212>
 800acf2:	2302      	movs	r3, #2
 800acf4:	77fb      	strb	r3, [r7, #31]
 800acf6:	e088      	b.n	800ae0a <UART_SetConfig+0x212>
 800acf8:	2304      	movs	r3, #4
 800acfa:	77fb      	strb	r3, [r7, #31]
 800acfc:	e085      	b.n	800ae0a <UART_SetConfig+0x212>
 800acfe:	2308      	movs	r3, #8
 800ad00:	77fb      	strb	r3, [r7, #31]
 800ad02:	e082      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad04:	2310      	movs	r3, #16
 800ad06:	77fb      	strb	r3, [r7, #31]
 800ad08:	e07f      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a5b      	ldr	r2, [pc, #364]	; (800ae7c <UART_SetConfig+0x284>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d124      	bne.n	800ad5e <UART_SetConfig+0x166>
 800ad14:	4b57      	ldr	r3, [pc, #348]	; (800ae74 <UART_SetConfig+0x27c>)
 800ad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ad1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ad20:	d011      	beq.n	800ad46 <UART_SetConfig+0x14e>
 800ad22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ad26:	d817      	bhi.n	800ad58 <UART_SetConfig+0x160>
 800ad28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ad2c:	d011      	beq.n	800ad52 <UART_SetConfig+0x15a>
 800ad2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ad32:	d811      	bhi.n	800ad58 <UART_SetConfig+0x160>
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <UART_SetConfig+0x148>
 800ad38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad3c:	d006      	beq.n	800ad4c <UART_SetConfig+0x154>
 800ad3e:	e00b      	b.n	800ad58 <UART_SetConfig+0x160>
 800ad40:	2300      	movs	r3, #0
 800ad42:	77fb      	strb	r3, [r7, #31]
 800ad44:	e061      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad46:	2302      	movs	r3, #2
 800ad48:	77fb      	strb	r3, [r7, #31]
 800ad4a:	e05e      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad4c:	2304      	movs	r3, #4
 800ad4e:	77fb      	strb	r3, [r7, #31]
 800ad50:	e05b      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad52:	2308      	movs	r3, #8
 800ad54:	77fb      	strb	r3, [r7, #31]
 800ad56:	e058      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad58:	2310      	movs	r3, #16
 800ad5a:	77fb      	strb	r3, [r7, #31]
 800ad5c:	e055      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a47      	ldr	r2, [pc, #284]	; (800ae80 <UART_SetConfig+0x288>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d124      	bne.n	800adb2 <UART_SetConfig+0x1ba>
 800ad68:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <UART_SetConfig+0x27c>)
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ad70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad74:	d011      	beq.n	800ad9a <UART_SetConfig+0x1a2>
 800ad76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad7a:	d817      	bhi.n	800adac <UART_SetConfig+0x1b4>
 800ad7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad80:	d011      	beq.n	800ada6 <UART_SetConfig+0x1ae>
 800ad82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad86:	d811      	bhi.n	800adac <UART_SetConfig+0x1b4>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <UART_SetConfig+0x19c>
 800ad8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad90:	d006      	beq.n	800ada0 <UART_SetConfig+0x1a8>
 800ad92:	e00b      	b.n	800adac <UART_SetConfig+0x1b4>
 800ad94:	2300      	movs	r3, #0
 800ad96:	77fb      	strb	r3, [r7, #31]
 800ad98:	e037      	b.n	800ae0a <UART_SetConfig+0x212>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	77fb      	strb	r3, [r7, #31]
 800ad9e:	e034      	b.n	800ae0a <UART_SetConfig+0x212>
 800ada0:	2304      	movs	r3, #4
 800ada2:	77fb      	strb	r3, [r7, #31]
 800ada4:	e031      	b.n	800ae0a <UART_SetConfig+0x212>
 800ada6:	2308      	movs	r3, #8
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e02e      	b.n	800ae0a <UART_SetConfig+0x212>
 800adac:	2310      	movs	r3, #16
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e02b      	b.n	800ae0a <UART_SetConfig+0x212>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a33      	ldr	r2, [pc, #204]	; (800ae84 <UART_SetConfig+0x28c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d124      	bne.n	800ae06 <UART_SetConfig+0x20e>
 800adbc:	4b2d      	ldr	r3, [pc, #180]	; (800ae74 <UART_SetConfig+0x27c>)
 800adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800adc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800adc8:	d011      	beq.n	800adee <UART_SetConfig+0x1f6>
 800adca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800adce:	d817      	bhi.n	800ae00 <UART_SetConfig+0x208>
 800add0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800add4:	d011      	beq.n	800adfa <UART_SetConfig+0x202>
 800add6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adda:	d811      	bhi.n	800ae00 <UART_SetConfig+0x208>
 800addc:	2b00      	cmp	r3, #0
 800adde:	d003      	beq.n	800ade8 <UART_SetConfig+0x1f0>
 800ade0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ade4:	d006      	beq.n	800adf4 <UART_SetConfig+0x1fc>
 800ade6:	e00b      	b.n	800ae00 <UART_SetConfig+0x208>
 800ade8:	2300      	movs	r3, #0
 800adea:	77fb      	strb	r3, [r7, #31]
 800adec:	e00d      	b.n	800ae0a <UART_SetConfig+0x212>
 800adee:	2302      	movs	r3, #2
 800adf0:	77fb      	strb	r3, [r7, #31]
 800adf2:	e00a      	b.n	800ae0a <UART_SetConfig+0x212>
 800adf4:	2304      	movs	r3, #4
 800adf6:	77fb      	strb	r3, [r7, #31]
 800adf8:	e007      	b.n	800ae0a <UART_SetConfig+0x212>
 800adfa:	2308      	movs	r3, #8
 800adfc:	77fb      	strb	r3, [r7, #31]
 800adfe:	e004      	b.n	800ae0a <UART_SetConfig+0x212>
 800ae00:	2310      	movs	r3, #16
 800ae02:	77fb      	strb	r3, [r7, #31]
 800ae04:	e001      	b.n	800ae0a <UART_SetConfig+0x212>
 800ae06:	2310      	movs	r3, #16
 800ae08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae12:	d16c      	bne.n	800aeee <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800ae14:	7ffb      	ldrb	r3, [r7, #31]
 800ae16:	2b08      	cmp	r3, #8
 800ae18:	d838      	bhi.n	800ae8c <UART_SetConfig+0x294>
 800ae1a:	a201      	add	r2, pc, #4	; (adr r2, 800ae20 <UART_SetConfig+0x228>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800ae45 	.word	0x0800ae45
 800ae24:	0800ae4d 	.word	0x0800ae4d
 800ae28:	0800ae55 	.word	0x0800ae55
 800ae2c:	0800ae8d 	.word	0x0800ae8d
 800ae30:	0800ae5b 	.word	0x0800ae5b
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800ae63 	.word	0x0800ae63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae44:	f7fe fe82 	bl	8009b4c <HAL_RCC_GetPCLK1Freq>
 800ae48:	61b8      	str	r0, [r7, #24]
        break;
 800ae4a:	e024      	b.n	800ae96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae4c:	f7fe fea0 	bl	8009b90 <HAL_RCC_GetPCLK2Freq>
 800ae50:	61b8      	str	r0, [r7, #24]
        break;
 800ae52:	e020      	b.n	800ae96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <UART_SetConfig+0x290>)
 800ae56:	61bb      	str	r3, [r7, #24]
        break;
 800ae58:	e01d      	b.n	800ae96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae5a:	f7fe fe03 	bl	8009a64 <HAL_RCC_GetSysClockFreq>
 800ae5e:	61b8      	str	r0, [r7, #24]
        break;
 800ae60:	e019      	b.n	800ae96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae66:	61bb      	str	r3, [r7, #24]
        break;
 800ae68:	e015      	b.n	800ae96 <UART_SetConfig+0x29e>
 800ae6a:	bf00      	nop
 800ae6c:	efff69f3 	.word	0xefff69f3
 800ae70:	40013800 	.word	0x40013800
 800ae74:	40021000 	.word	0x40021000
 800ae78:	40004400 	.word	0x40004400
 800ae7c:	40004800 	.word	0x40004800
 800ae80:	40004c00 	.word	0x40004c00
 800ae84:	40005000 	.word	0x40005000
 800ae88:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	77bb      	strb	r3, [r7, #30]
        break;
 800ae94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d075      	beq.n	800af88 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	005a      	lsls	r2, r3, #1
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	085b      	lsrs	r3, r3, #1
 800aea6:	441a      	add	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	2b0f      	cmp	r3, #15
 800aeb8:	d916      	bls.n	800aee8 <UART_SetConfig+0x2f0>
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec0:	d212      	bcs.n	800aee8 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	f023 030f 	bic.w	r3, r3, #15
 800aeca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	085b      	lsrs	r3, r3, #1
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	f003 0307 	and.w	r3, r3, #7
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	89fb      	ldrh	r3, [r7, #14]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	89fa      	ldrh	r2, [r7, #14]
 800aee4:	60da      	str	r2, [r3, #12]
 800aee6:	e04f      	b.n	800af88 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	77bb      	strb	r3, [r7, #30]
 800aeec:	e04c      	b.n	800af88 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aeee:	7ffb      	ldrb	r3, [r7, #31]
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d828      	bhi.n	800af46 <UART_SetConfig+0x34e>
 800aef4:	a201      	add	r2, pc, #4	; (adr r2, 800aefc <UART_SetConfig+0x304>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af21 	.word	0x0800af21
 800af00:	0800af29 	.word	0x0800af29
 800af04:	0800af31 	.word	0x0800af31
 800af08:	0800af47 	.word	0x0800af47
 800af0c:	0800af37 	.word	0x0800af37
 800af10:	0800af47 	.word	0x0800af47
 800af14:	0800af47 	.word	0x0800af47
 800af18:	0800af47 	.word	0x0800af47
 800af1c:	0800af3f 	.word	0x0800af3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af20:	f7fe fe14 	bl	8009b4c <HAL_RCC_GetPCLK1Freq>
 800af24:	61b8      	str	r0, [r7, #24]
        break;
 800af26:	e013      	b.n	800af50 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af28:	f7fe fe32 	bl	8009b90 <HAL_RCC_GetPCLK2Freq>
 800af2c:	61b8      	str	r0, [r7, #24]
        break;
 800af2e:	e00f      	b.n	800af50 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af30:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <UART_SetConfig+0x3a8>)
 800af32:	61bb      	str	r3, [r7, #24]
        break;
 800af34:	e00c      	b.n	800af50 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af36:	f7fe fd95 	bl	8009a64 <HAL_RCC_GetSysClockFreq>
 800af3a:	61b8      	str	r0, [r7, #24]
        break;
 800af3c:	e008      	b.n	800af50 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af42:	61bb      	str	r3, [r7, #24]
        break;
 800af44:	e004      	b.n	800af50 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	77bb      	strb	r3, [r7, #30]
        break;
 800af4e:	bf00      	nop
    }

    if (pclk != 0U)
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d018      	beq.n	800af88 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	085a      	lsrs	r2, r3, #1
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	441a      	add	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	fbb2 f3f3 	udiv	r3, r2, r3
 800af68:	b29b      	uxth	r3, r3
 800af6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2b0f      	cmp	r3, #15
 800af70:	d908      	bls.n	800af84 <UART_SetConfig+0x38c>
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af78:	d204      	bcs.n	800af84 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	60da      	str	r2, [r3, #12]
 800af82:	e001      	b.n	800af88 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800af94:	7fbb      	ldrb	r3, [r7, #30]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3720      	adds	r7, #32
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	007a1200 	.word	0x007a1200

0800afa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	f003 0308 	and.w	r3, r3, #8
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b038:	f003 0310 	and.w	r3, r3, #16
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	f003 0320 	and.w	r3, r3, #32
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00a      	beq.n	800b078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d01a      	beq.n	800b0ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0a2:	d10a      	bne.n	800b0ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	605a      	str	r2, [r3, #4]
  }
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr

0800b0e6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b086      	sub	sp, #24
 800b0ea:	af02      	add	r7, sp, #8
 800b0ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0f6:	f7fc fee3 	bl	8007ec0 <HAL_GetTick>
 800b0fa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0308 	and.w	r3, r3, #8
 800b106:	2b08      	cmp	r3, #8
 800b108:	d10e      	bne.n	800b128 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b10a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f82d 	bl	800b178 <UART_WaitOnFlagUntilTimeout>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e023      	b.n	800b170 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b04      	cmp	r3, #4
 800b134:	d10e      	bne.n	800b154 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b136:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f817 	bl	800b178 <UART_WaitOnFlagUntilTimeout>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b150:	2303      	movs	r3, #3
 800b152:	e00d      	b.n	800b170 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2220      	movs	r2, #32
 800b158:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2220      	movs	r2, #32
 800b15e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b09c      	sub	sp, #112	; 0x70
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	4613      	mov	r3, r2
 800b186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b188:	e0a5      	b.n	800b2d6 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b18a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b190:	f000 80a1 	beq.w	800b2d6 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b194:	f7fc fe94 	bl	8007ec0 <HAL_GetTick>
 800b198:	4602      	mov	r2, r0
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d302      	bcc.n	800b1aa <UART_WaitOnFlagUntilTimeout+0x32>
 800b1a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d13e      	bne.n	800b228 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1be:	667b      	str	r3, [r7, #100]	; 0x64
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1d0:	e841 2300 	strex	r3, r2, [r1]
 800b1d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1e6      	bne.n	800b1aa <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	f023 0301 	bic.w	r3, r3, #1
 800b1f2:	663b      	str	r3, [r7, #96]	; 0x60
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1fc:	64ba      	str	r2, [r7, #72]	; 0x48
 800b1fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e5      	bne.n	800b1dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2220      	movs	r2, #32
 800b214:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2220      	movs	r2, #32
 800b21a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e067      	b.n	800b2f8 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0304 	and.w	r3, r3, #4
 800b232:	2b00      	cmp	r3, #0
 800b234:	d04f      	beq.n	800b2d6 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	69db      	ldr	r3, [r3, #28]
 800b23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b244:	d147      	bne.n	800b2d6 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b24e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b264:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b26e:	637b      	str	r3, [r7, #52]	; 0x34
 800b270:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e6      	bne.n	800b250 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3308      	adds	r3, #8
 800b288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	613b      	str	r3, [r7, #16]
   return(result);
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f023 0301 	bic.w	r3, r3, #1
 800b298:	66bb      	str	r3, [r7, #104]	; 0x68
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2a2:	623a      	str	r2, [r7, #32]
 800b2a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	69f9      	ldr	r1, [r7, #28]
 800b2a8:	6a3a      	ldr	r2, [r7, #32]
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e5      	bne.n	800b282 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e010      	b.n	800b2f8 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	69da      	ldr	r2, [r3, #28]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4013      	ands	r3, r2
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	bf0c      	ite	eq
 800b2e6:	2301      	moveq	r3, #1
 800b2e8:	2300      	movne	r3, #0
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	f43f af4a 	beq.w	800b18a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3770      	adds	r7, #112	; 0x70
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b300:	b480      	push	{r7}
 800b302:	b095      	sub	sp, #84	; 0x54
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b310:	e853 3f00 	ldrex	r3, [r3]
 800b314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b31c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b326:	643b      	str	r3, [r7, #64]	; 0x40
 800b328:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b32c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e6      	bne.n	800b308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3308      	adds	r3, #8
 800b340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	61fb      	str	r3, [r7, #28]
   return(result);
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	f023 0301 	bic.w	r3, r3, #1
 800b350:	64bb      	str	r3, [r7, #72]	; 0x48
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3308      	adds	r3, #8
 800b358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b35a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b35c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e5      	bne.n	800b33a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b372:	2b01      	cmp	r3, #1
 800b374:	d118      	bne.n	800b3a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	e853 3f00 	ldrex	r3, [r3]
 800b382:	60bb      	str	r3, [r7, #8]
   return(result);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f023 0310 	bic.w	r3, r3, #16
 800b38a:	647b      	str	r3, [r7, #68]	; 0x44
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	461a      	mov	r2, r3
 800b392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b394:	61bb      	str	r3, [r7, #24]
 800b396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b398:	6979      	ldr	r1, [r7, #20]
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	e841 2300 	strex	r3, r2, [r1]
 800b3a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1e6      	bne.n	800b376 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2220      	movs	r2, #32
 800b3ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b3ba:	bf00      	nop
 800b3bc:	3754      	adds	r7, #84	; 0x54
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bc80      	pop	{r7}
 800b3c2:	4770      	bx	lr

0800b3c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7ff fbf3 	bl	800abce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3e8:	bf00      	nop
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b088      	sub	sp, #32
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	e853 3f00 	ldrex	r3, [r3]
 800b404:	60bb      	str	r3, [r7, #8]
   return(result);
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b40c:	61fb      	str	r3, [r7, #28]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	61bb      	str	r3, [r7, #24]
 800b418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41a:	6979      	ldr	r1, [r7, #20]
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	e841 2300 	strex	r3, r2, [r1]
 800b422:	613b      	str	r3, [r7, #16]
   return(result);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e6      	bne.n	800b3f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2220      	movs	r2, #32
 800b42e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7ff fbc0 	bl	800abbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b43c:	bf00      	nop
 800b43e:	3720      	adds	r7, #32
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	bc80      	pop	{r7}
 800b454:	4770      	bx	lr
	...

0800b458 <Ea_Init>:
/**
  * @brief	Ea module initialization function
  * @return	None
  */
void Ea_Init(void)
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Ea_InitDone_b = TRUE;
 800b45c:	4b03      	ldr	r3, [pc, #12]	; (800b46c <Ea_Init+0x14>)
 800b45e:	2201      	movs	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]
}
 800b462:	bf00      	nop
 800b464:	46bd      	mov	sp, r7
 800b466:	bc80      	pop	{r7}
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	20000190 	.word	0x20000190

0800b470 <Ea_Read>:
  * @param	BlockId		ID of the block to be read
  * @param  data		Pointer to the buffer where read data is stored
  * @return	None
  */
void Ea_Read(uint16 Block_Id, uint8 *data)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af02      	add	r7, sp, #8
 800b476:	4603      	mov	r3, r0
 800b478:	6039      	str	r1, [r7, #0]
 800b47a:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800b47c:	88fb      	ldrh	r3, [r7, #6]
 800b47e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b482:	d20b      	bcs.n	800b49c <Ea_Read+0x2c>
	{
		HAL_I2C_Mem_Read_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800b484:	88fb      	ldrh	r3, [r7, #6]
 800b486:	015b      	lsls	r3, r3, #5
 800b488:	b29a      	uxth	r2, r3
 800b48a:	2320      	movs	r3, #32
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	2302      	movs	r3, #2
 800b494:	21a0      	movs	r1, #160	; 0xa0
 800b496:	4803      	ldr	r0, [pc, #12]	; (800b4a4 <Ea_Read+0x34>)
 800b498:	f7fb f822 	bl	80064e0 <HAL_I2C_Mem_Read_DMA>
	}
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	200002bc 	.word	0x200002bc

0800b4a8 <Ea_Write>:
  * @param	BlockId		ID of the block to be written
  * @param  data		Pointer to the data to be written
  * @return	None
  */
void Ea_Write(uint16 Block_Id, uint8 *data)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	6039      	str	r1, [r7, #0]
 800b4b2:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800b4b4:	88fb      	ldrh	r3, [r7, #6]
 800b4b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4ba:	d20b      	bcs.n	800b4d4 <Ea_Write+0x2c>
	{
		HAL_I2C_Mem_Write_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	015b      	lsls	r3, r3, #5
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	2320      	movs	r3, #32
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	21a0      	movs	r1, #160	; 0xa0
 800b4ce:	4803      	ldr	r0, [pc, #12]	; (800b4dc <Ea_Write+0x34>)
 800b4d0:	f7fa ff10 	bl	80062f4 <HAL_I2C_Mem_Write_DMA>
	}
}
 800b4d4:	bf00      	nop
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	200002bc 	.word	0x200002bc

0800b4e0 <NvM_Init>:
/**
  * @brief	NvM module initialization function
  * @return	None
  */
void NvM_Init(void)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
	g_NvM_State_e = NVM_STATE_INIT;
 800b4e4:	4b04      	ldr	r3, [pc, #16]	; (800b4f8 <NvM_Init+0x18>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
	/* Set initialization flag to done */
	g_NvM_InitDone_b = TRUE;
 800b4ea:	4b04      	ldr	r3, [pc, #16]	; (800b4fc <NvM_Init+0x1c>)
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	701a      	strb	r2, [r3, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bc80      	pop	{r7}
 800b4f6:	4770      	bx	lr
 800b4f8:	20000192 	.word	0x20000192
 800b4fc:	20000191 	.word	0x20000191

0800b500 <NvM_MainFunction>:
/**
  * @brief	NvM module main function (runs in task)
  * @return	None
  */
void NvM_MainFunction(void)
{
 800b500:	b480      	push	{r7}
 800b502:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_NvM_InitDone_b)
 800b504:	4b0e      	ldr	r3, [pc, #56]	; (800b540 <NvM_MainFunction+0x40>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d015      	beq.n	800b538 <NvM_MainFunction+0x38>
	{
		switch(g_NvM_State_e)
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <NvM_MainFunction+0x44>)
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b04      	cmp	r3, #4
 800b512:	dc0e      	bgt.n	800b532 <NvM_MainFunction+0x32>
 800b514:	2b02      	cmp	r3, #2
 800b516:	da08      	bge.n	800b52a <NvM_MainFunction+0x2a>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <NvM_MainFunction+0x22>
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d00a      	beq.n	800b536 <NvM_MainFunction+0x36>
			case NVM_STATE_SHUTDOWN:
			case NVM_STATE_ERROR:
			default:
			{

			}break;
 800b520:	e007      	b.n	800b532 <NvM_MainFunction+0x32>
				g_NvM_State_e = NVM_STATE_READALL;
 800b522:	4b08      	ldr	r3, [pc, #32]	; (800b544 <NvM_MainFunction+0x44>)
 800b524:	2204      	movs	r2, #4
 800b526:	701a      	strb	r2, [r3, #0]
			}break;
 800b528:	e006      	b.n	800b538 <NvM_MainFunction+0x38>
				g_NvM_State_e = NVM_STATE_READY;
 800b52a:	4b06      	ldr	r3, [pc, #24]	; (800b544 <NvM_MainFunction+0x44>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	701a      	strb	r2, [r3, #0]
			}break;
 800b530:	e002      	b.n	800b538 <NvM_MainFunction+0x38>
			}break;
 800b532:	bf00      	nop
 800b534:	e000      	b.n	800b538 <NvM_MainFunction+0x38>
			}break;
 800b536:	bf00      	nop
		}
	}
}
 800b538:	bf00      	nop
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bc80      	pop	{r7}
 800b53e:	4770      	bx	lr
 800b540:	20000191 	.word	0x20000191
 800b544:	20000192 	.word	0x20000192

0800b548 <NvM_WriteBlock>:
  * @param	BlockId		ID of the block to be written
  * @param  NvM_SrcPtr	Pointer to the data to be written
  * @return	None
  */
void NvM_WriteBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	6039      	str	r1, [r7, #0]
 800b552:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block write function */
	Ea_Write(BlockId, NvM_SrcPtr);
 800b554:	88fb      	ldrh	r3, [r7, #6]
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff ffa5 	bl	800b4a8 <Ea_Write>
}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <NvM_ReadBlock>:
  * @param	BlockId		ID of the block to be read
  * @param  NvM_SrcPtr	Pointer to the data to be read
  * @return	None
  */
void NvM_ReadBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	4603      	mov	r3, r0
 800b56e:	6039      	str	r1, [r7, #0]
 800b570:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block read function */
	Ea_Read(BlockId, NvM_SrcPtr);
 800b572:	88fb      	ldrh	r3, [r7, #6]
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff ff7a 	bl	800b470 <Ea_Read>
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <BswM_Init>:
static void MX_I2C1_Init(void);
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);

void BswM_Init(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 800b588:	f000 f8b8 	bl	800b6fc <SystemClock_Config>
	MX_DMA_Init();
 800b58c:	f000 f91c 	bl	800b7c8 <MX_DMA_Init>
	MX_GPIO_Init();
 800b590:	f000 faec 	bl	800bb6c <MX_GPIO_Init>
	MX_ADC1_Init();
 800b594:	f000 f95a 	bl	800b84c <MX_ADC1_Init>
	MX_ADC2_Init();
 800b598:	f000 f9c8 	bl	800b92c <MX_ADC2_Init>
	MX_I2C1_Init();
 800b59c:	f000 fa38 	bl	800ba10 <MX_I2C1_Init>
	MX_SPI3_Init();
 800b5a0:	f000 fa76 	bl	800ba90 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 800b5a4:	f000 fab2 	bl	800bb0c <MX_USART1_UART_Init>
	Gpt_Init();
 800b5a8:	f7f8 ffde 	bl	8004568 <Gpt_Init>

	/* Init Cdd drivers */
	Cdd_Servo_Driver_Init();
 800b5ac:	f7f6 ff1c 	bl	80023e8 <Cdd_Servo_Driver_Init>
	Cdd_Ultrasonic_Driver_Init();
 800b5b0:	f7f7 fa56 	bl	8002a60 <Cdd_Ultrasonic_Driver_Init>
	Cdd_DCMotor_Driver_Init();
 800b5b4:	f7f6 fbf5 	bl	8001da2 <Cdd_DCMotor_Driver_Init>
	/* Init system services */
	Tm_Init();
 800b5b8:	f000 fde0 	bl	800c17c <Tm_Init>

}
 800b5bc:	bf00      	nop
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc1_val, adc1_len);
 800b5c4:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <BswM_MainFunction+0x24>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4907      	ldr	r1, [pc, #28]	; (800b5e8 <BswM_MainFunction+0x28>)
 800b5cc:	4807      	ldr	r0, [pc, #28]	; (800b5ec <BswM_MainFunction+0x2c>)
 800b5ce:	f7f7 fda3 	bl	8003118 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32 *)adc2_val, adc2_len);
 800b5d2:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <BswM_MainFunction+0x30>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4906      	ldr	r1, [pc, #24]	; (800b5f4 <BswM_MainFunction+0x34>)
 800b5da:	4807      	ldr	r0, [pc, #28]	; (800b5f8 <BswM_MainFunction+0x38>)
 800b5dc:	f7f7 fd9c 	bl	8003118 <HAL_ADC_Start_DMA>

}
 800b5e0:	bf00      	nop
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	2000000c 	.word	0x2000000c
 800b5e8:	200004d0 	.word	0x200004d0
 800b5ec:	20000194 	.word	0x20000194
 800b5f0:	20000010 	.word	0x20000010
 800b5f4:	200004d4 	.word	0x200004d4
 800b5f8:	20000228 	.word	0x20000228

0800b5fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	if(hadc == &hadc1)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a1e      	ldr	r2, [pc, #120]	; (800b680 <HAL_ADC_ConvCpltCallback+0x84>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d118      	bne.n	800b63e <HAL_ADC_ConvCpltCallback+0x42>
	{
		ADC_AN0_Voltage = (uint16)((adc1_val[0]*3300u)/4095u);
 800b60c:	4b1d      	ldr	r3, [pc, #116]	; (800b684 <HAL_ADC_ConvCpltCallback+0x88>)
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	b29b      	uxth	r3, r3
 800b612:	461a      	mov	r2, r3
 800b614:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b618:	fb03 f202 	mul.w	r2, r3, r2
 800b61c:	4b1a      	ldr	r3, [pc, #104]	; (800b688 <HAL_ADC_ConvCpltCallback+0x8c>)
 800b61e:	fba3 1302 	umull	r1, r3, r3, r2
 800b622:	1ad2      	subs	r2, r2, r3
 800b624:	0852      	lsrs	r2, r2, #1
 800b626:	4413      	add	r3, r2
 800b628:	0adb      	lsrs	r3, r3, #11
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	4b17      	ldr	r3, [pc, #92]	; (800b68c <HAL_ADC_ConvCpltCallback+0x90>)
 800b62e:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 800b630:	4b16      	ldr	r3, [pc, #88]	; (800b68c <HAL_ADC_ConvCpltCallback+0x90>)
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	b29b      	uxth	r3, r3
 800b636:	4618      	mov	r0, r3
 800b638:	f000 ff54 	bl	800c4e4 <Rte_Write_AN0_Voltage_u16>
	}
	else
	{

	}
}
 800b63c:	e01b      	b.n	800b676 <HAL_ADC_ConvCpltCallback+0x7a>
	else if(hadc == &hadc2)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a13      	ldr	r2, [pc, #76]	; (800b690 <HAL_ADC_ConvCpltCallback+0x94>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d117      	bne.n	800b676 <HAL_ADC_ConvCpltCallback+0x7a>
		ADC_AN2_Voltage = (uint16)((adc2_val[0]*3300u)/4095u);
 800b646:	4b13      	ldr	r3, [pc, #76]	; (800b694 <HAL_ADC_ConvCpltCallback+0x98>)
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b652:	fb03 f202 	mul.w	r2, r3, r2
 800b656:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <HAL_ADC_ConvCpltCallback+0x8c>)
 800b658:	fba3 1302 	umull	r1, r3, r3, r2
 800b65c:	1ad2      	subs	r2, r2, r3
 800b65e:	0852      	lsrs	r2, r2, #1
 800b660:	4413      	add	r3, r2
 800b662:	0adb      	lsrs	r3, r3, #11
 800b664:	b29a      	uxth	r2, r3
 800b666:	4b0c      	ldr	r3, [pc, #48]	; (800b698 <HAL_ADC_ConvCpltCallback+0x9c>)
 800b668:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN2_Voltage_u16(ADC_AN2_Voltage);
 800b66a:	4b0b      	ldr	r3, [pc, #44]	; (800b698 <HAL_ADC_ConvCpltCallback+0x9c>)
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	4618      	mov	r0, r3
 800b672:	f000 ff5b 	bl	800c52c <Rte_Write_AN2_Voltage_u16>
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20000194 	.word	0x20000194
 800b684:	200004d0 	.word	0x200004d0
 800b688:	00100101 	.word	0x00100101
 800b68c:	200004d2 	.word	0x200004d2
 800b690:	20000228 	.word	0x20000228
 800b694:	200004d4 	.word	0x200004d4
 800b698:	200004d6 	.word	0x200004d6

0800b69c <HAL_I2C_MemTxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
	I2cTxCnt++;
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	4a03      	ldr	r2, [pc, #12]	; (800b6b8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800b6ac:	6013      	str	r3, [r2, #0]
}
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bc80      	pop	{r7}
 800b6b6:	4770      	bx	lr
 800b6b8:	200004dc 	.word	0x200004dc

0800b6bc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
	I2cRxCnt++;
 800b6c4:	4b04      	ldr	r3, [pc, #16]	; (800b6d8 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	4a03      	ldr	r2, [pc, #12]	; (800b6d8 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800b6cc:	6013      	str	r3, [r2, #0]
}
 800b6ce:	bf00      	nop
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bc80      	pop	{r7}
 800b6d6:	4770      	bx	lr
 800b6d8:	200004d8 	.word	0x200004d8

0800b6dc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7fb f850 	bl	800678a <HAL_I2C_GetError>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b04      	cmp	r3, #4
 800b6ee:	d001      	beq.n	800b6f4 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 800b6f0:	f000 fad4 	bl	800bc9c <Error_Handler>
  }
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b0a6      	sub	sp, #152	; 0x98
 800b700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b702:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b706:	2228      	movs	r2, #40	; 0x28
 800b708:	2100      	movs	r1, #0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 fff4 	bl	800c6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b710:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	605a      	str	r2, [r3, #4]
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	60da      	str	r2, [r3, #12]
 800b71e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b720:	1d3b      	adds	r3, r7, #4
 800b722:	2258      	movs	r2, #88	; 0x58
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f000 ffe6 	bl	800c6f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b72c:	2302      	movs	r3, #2
 800b72e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b730:	2301      	movs	r3, #1
 800b732:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b734:	2310      	movs	r3, #16
 800b736:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b73a:	2302      	movs	r3, #2
 800b73c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800b748:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800b74c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b750:	2300      	movs	r3, #0
 800b752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b756:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fc ffb2 	bl	80086c4 <HAL_RCC_OscConfig>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800b766:	f000 fa99 	bl	800bc9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b76a:	230f      	movs	r3, #15
 800b76c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b76e:	2302      	movs	r3, #2
 800b770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b772:	2300      	movs	r3, #0
 800b774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b77a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b77c:	2300      	movs	r3, #0
 800b77e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b780:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b784:	2102      	movs	r1, #2
 800b786:	4618      	mov	r0, r3
 800b788:	f7fd fff0 	bl	800976c <HAL_RCC_ClockConfig>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800b792:	f000 fa83 	bl	800bc9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800b796:	23a3      	movs	r3, #163	; 0xa3
 800b798:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800b7a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b7ac:	1d3b      	adds	r3, r7, #4
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fe fa10 	bl	8009bd4 <HAL_RCCEx_PeriphCLKConfig>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800b7ba:	f000 fa6f 	bl	800bc9c <Error_Handler>
  }
}
 800b7be:	bf00      	nop
 800b7c0:	3798      	adds	r7, #152	; 0x98
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
	...

0800b7c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800b7ce:	4b1e      	ldr	r3, [pc, #120]	; (800b848 <MX_DMA_Init+0x80>)
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	4a1d      	ldr	r2, [pc, #116]	; (800b848 <MX_DMA_Init+0x80>)
 800b7d4:	f043 0301 	orr.w	r3, r3, #1
 800b7d8:	6153      	str	r3, [r2, #20]
 800b7da:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <MX_DMA_Init+0x80>)
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800b7e6:	4b18      	ldr	r3, [pc, #96]	; (800b848 <MX_DMA_Init+0x80>)
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	4a17      	ldr	r2, [pc, #92]	; (800b848 <MX_DMA_Init+0x80>)
 800b7ec:	f043 0302 	orr.w	r3, r3, #2
 800b7f0:	6153      	str	r3, [r2, #20]
 800b7f2:	4b15      	ldr	r3, [pc, #84]	; (800b848 <MX_DMA_Init+0x80>)
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	f003 0302 	and.w	r3, r3, #2
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	683b      	ldr	r3, [r7, #0]
	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800b7fe:	2200      	movs	r2, #0
 800b800:	2100      	movs	r1, #0
 800b802:	200b      	movs	r0, #11
 800b804:	f7fc fc3d 	bl	8008082 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800b808:	200b      	movs	r0, #11
 800b80a:	f7fc fc56 	bl	80080ba <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800b80e:	2200      	movs	r2, #0
 800b810:	2100      	movs	r1, #0
 800b812:	2010      	movs	r0, #16
 800b814:	f7fc fc35 	bl	8008082 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800b818:	2010      	movs	r0, #16
 800b81a:	f7fc fc4e 	bl	80080ba <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800b81e:	2200      	movs	r2, #0
 800b820:	2100      	movs	r1, #0
 800b822:	2011      	movs	r0, #17
 800b824:	f7fc fc2d 	bl	8008082 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800b828:	2011      	movs	r0, #17
 800b82a:	f7fc fc46 	bl	80080ba <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800b82e:	2200      	movs	r2, #0
 800b830:	2100      	movs	r1, #0
 800b832:	2038      	movs	r0, #56	; 0x38
 800b834:	f7fc fc25 	bl	8008082 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800b838:	2038      	movs	r0, #56	; 0x38
 800b83a:	f7fc fc3e 	bl	80080ba <HAL_NVIC_EnableIRQ>
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	40021000 	.word	0x40021000

0800b84c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08a      	sub	sp, #40	; 0x28
 800b850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800b852:	f107 031c 	add.w	r3, r7, #28
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	605a      	str	r2, [r3, #4]
 800b85c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800b85e:	1d3b      	adds	r3, r7, #4
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	609a      	str	r2, [r3, #8]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	611a      	str	r2, [r3, #16]
 800b86c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b86e:	4b2e      	ldr	r3, [pc, #184]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b870:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b874:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b876:	4b2c      	ldr	r3, [pc, #176]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b878:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b87c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b87e:	4b2a      	ldr	r3, [pc, #168]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b880:	2200      	movs	r2, #0
 800b882:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b884:	4b28      	ldr	r3, [pc, #160]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b886:	2200      	movs	r2, #0
 800b888:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b88a:	4b27      	ldr	r3, [pc, #156]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b890:	4b25      	ldr	r3, [pc, #148]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b892:	2200      	movs	r2, #0
 800b894:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b898:	4b23      	ldr	r3, [pc, #140]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b89e:	4b22      	ldr	r3, [pc, #136]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b8a4:	4b20      	ldr	r3, [pc, #128]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800b8aa:	4b1f      	ldr	r3, [pc, #124]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b8b0:	4b1d      	ldr	r3, [pc, #116]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b8b8:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b8be:	4b1a      	ldr	r3, [pc, #104]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800b8c4:	4b18      	ldr	r3, [pc, #96]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b8ca:	4817      	ldr	r0, [pc, #92]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8cc:	f7f7 fa2a 	bl	8002d24 <HAL_ADC_Init>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800b8d6:	f000 f9e1 	bl	800bc9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800b8de:	f107 031c 	add.w	r3, r7, #28
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4810      	ldr	r0, [pc, #64]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b8e6:	f7f8 f81d 	bl	8003924 <HAL_ADCEx_MultiModeConfigChannel>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800b8f0:	f000 f9d4 	bl	800bc9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b900:	2300      	movs	r3, #0
 800b902:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b90c:	1d3b      	adds	r3, r7, #4
 800b90e:	4619      	mov	r1, r3
 800b910:	4805      	ldr	r0, [pc, #20]	; (800b928 <MX_ADC1_Init+0xdc>)
 800b912:	f7f7 fd1d 	bl	8003350 <HAL_ADC_ConfigChannel>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800b91c:	f000 f9be 	bl	800bc9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b920:	bf00      	nop
 800b922:	3728      	adds	r7, #40	; 0x28
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000194 	.word	0x20000194

0800b92c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08a      	sub	sp, #40	; 0x28
 800b930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800b932:	f107 031c 	add.w	r3, r7, #28
 800b936:	2200      	movs	r2, #0
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	605a      	str	r2, [r3, #4]
 800b93c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800b93e:	1d3b      	adds	r3, r7, #4
 800b940:	2200      	movs	r2, #0
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	605a      	str	r2, [r3, #4]
 800b946:	609a      	str	r2, [r3, #8]
 800b948:	60da      	str	r2, [r3, #12]
 800b94a:	611a      	str	r2, [r3, #16]
 800b94c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800b94e:	4b2e      	ldr	r3, [pc, #184]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b950:	4a2e      	ldr	r2, [pc, #184]	; (800ba0c <MX_ADC2_Init+0xe0>)
 800b952:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b954:	4b2c      	ldr	r3, [pc, #176]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b956:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b95a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800b95c:	4b2a      	ldr	r3, [pc, #168]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b95e:	2200      	movs	r2, #0
 800b960:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b962:	4b29      	ldr	r3, [pc, #164]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b964:	2200      	movs	r2, #0
 800b966:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b968:	4b27      	ldr	r3, [pc, #156]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b96e:	4b26      	ldr	r3, [pc, #152]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b976:	4b24      	ldr	r3, [pc, #144]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b978:	2200      	movs	r2, #0
 800b97a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b97c:	4b22      	ldr	r3, [pc, #136]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b97e:	2201      	movs	r2, #1
 800b980:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b982:	4b21      	ldr	r3, [pc, #132]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b984:	2200      	movs	r2, #0
 800b986:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800b988:	4b1f      	ldr	r3, [pc, #124]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b98a:	2201      	movs	r2, #1
 800b98c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800b98e:	4b1e      	ldr	r3, [pc, #120]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b990:	2201      	movs	r2, #1
 800b992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b996:	4b1c      	ldr	r3, [pc, #112]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b998:	2204      	movs	r2, #4
 800b99a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800b99c:	4b1a      	ldr	r3, [pc, #104]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800b9a2:	4b19      	ldr	r3, [pc, #100]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800b9a8:	4817      	ldr	r0, [pc, #92]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b9aa:	f7f7 f9bb 	bl	8002d24 <HAL_ADC_Init>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 800b9b4:	f000 f972 	bl	800bc9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc2, &multimode) != HAL_OK)
 800b9bc:	f107 031c 	add.w	r3, r7, #28
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4811      	ldr	r0, [pc, #68]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b9c4:	f7f7 ffae 	bl	8003924 <HAL_ADCEx_MultiModeConfigChannel>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800b9ce:	f000 f965 	bl	800bc9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800b9ea:	1d3b      	adds	r3, r7, #4
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4806      	ldr	r0, [pc, #24]	; (800ba08 <MX_ADC2_Init+0xdc>)
 800b9f0:	f7f7 fcae 	bl	8003350 <HAL_ADC_ConfigChannel>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800b9fa:	f000 f94f 	bl	800bc9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800b9fe:	bf00      	nop
 800ba00:	3728      	adds	r7, #40	; 0x28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000228 	.word	0x20000228
 800ba0c:	50000100 	.word	0x50000100

0800ba10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 800ba14:	4b1b      	ldr	r3, [pc, #108]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba16:	4a1c      	ldr	r2, [pc, #112]	; (800ba88 <MX_I2C1_Init+0x78>)
 800ba18:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00702681;
 800ba1a:	4b1a      	ldr	r3, [pc, #104]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba1c:	4a1b      	ldr	r2, [pc, #108]	; (800ba8c <MX_I2C1_Init+0x7c>)
 800ba1e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 800ba20:	4b18      	ldr	r3, [pc, #96]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ba26:	4b17      	ldr	r3, [pc, #92]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ba2c:	4b15      	ldr	r3, [pc, #84]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800ba32:	4b14      	ldr	r3, [pc, #80]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ba38:	4b12      	ldr	r3, [pc, #72]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ba3e:	4b11      	ldr	r3, [pc, #68]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ba44:	4b0f      	ldr	r3, [pc, #60]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ba4a:	480e      	ldr	r0, [pc, #56]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba4c:	f7fa fb86 	bl	800615c <HAL_I2C_Init>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <MX_I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800ba56:	f000 f921 	bl	800bc9c <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	4809      	ldr	r0, [pc, #36]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba5e:	f7fc f918 	bl	8007c92 <HAL_I2CEx_ConfigAnalogFilter>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <MX_I2C1_Init+0x5c>
	  {
	    Error_Handler();
 800ba68:	f000 f918 	bl	800bc9c <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	4805      	ldr	r0, [pc, #20]	; (800ba84 <MX_I2C1_Init+0x74>)
 800ba70:	f7fc f959 	bl	8007d26 <HAL_I2CEx_ConfigDigitalFilter>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <MX_I2C1_Init+0x6e>
	  {
	    Error_Handler();
 800ba7a:	f000 f90f 	bl	800bc9c <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 800ba7e:	bf00      	nop
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	200002bc 	.word	0x200002bc
 800ba88:	40005400 	.word	0x40005400
 800ba8c:	00702681 	.word	0x00702681

0800ba90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ba94:	4b1b      	ldr	r3, [pc, #108]	; (800bb04 <MX_SPI3_Init+0x74>)
 800ba96:	4a1c      	ldr	r2, [pc, #112]	; (800bb08 <MX_SPI3_Init+0x78>)
 800ba98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ba9a:	4b1a      	ldr	r3, [pc, #104]	; (800bb04 <MX_SPI3_Init+0x74>)
 800ba9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800baa0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800baa2:	4b18      	ldr	r3, [pc, #96]	; (800bb04 <MX_SPI3_Init+0x74>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800baa8:	4b16      	ldr	r3, [pc, #88]	; (800bb04 <MX_SPI3_Init+0x74>)
 800baaa:	f44f 7240 	mov.w	r2, #768	; 0x300
 800baae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bab0:	4b14      	ldr	r3, [pc, #80]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bab6:	4b13      	ldr	r3, [pc, #76]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bab8:	2200      	movs	r2, #0
 800baba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800babc:	4b11      	ldr	r3, [pc, #68]	; (800bb04 <MX_SPI3_Init+0x74>)
 800babe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bac2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bac4:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800baca:	4b0e      	ldr	r3, [pc, #56]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bacc:	2200      	movs	r2, #0
 800bace:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800bad0:	4b0c      	ldr	r3, [pc, #48]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bad6:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bad8:	2200      	movs	r2, #0
 800bada:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800badc:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bade:	2207      	movs	r2, #7
 800bae0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bae2:	4b08      	ldr	r3, [pc, #32]	; (800bb04 <MX_SPI3_Init+0x74>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800bae8:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <MX_SPI3_Init+0x74>)
 800baea:	2208      	movs	r2, #8
 800baec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800baee:	4805      	ldr	r0, [pc, #20]	; (800bb04 <MX_SPI3_Init+0x74>)
 800baf0:	f7fe fb02 	bl	800a0f8 <HAL_SPI_Init>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800bafa:	f000 f8cf 	bl	800bc9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800bafe:	bf00      	nop
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	200003c0 	.word	0x200003c0
 800bb08:	40003c00 	.word	0x40003c00

0800bb0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800bb10:	4b14      	ldr	r3, [pc, #80]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb12:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <MX_USART1_UART_Init+0x5c>)
 800bb14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800bb16:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb18:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800bb1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bb1e:	4b11      	ldr	r3, [pc, #68]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bb24:	4b0f      	ldr	r3, [pc, #60]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bb2a:	4b0e      	ldr	r3, [pc, #56]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bb30:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb32:	220c      	movs	r2, #12
 800bb34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bb36:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bb3c:	4b09      	ldr	r3, [pc, #36]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bb42:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bb48:	4b06      	ldr	r3, [pc, #24]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bb4e:	4805      	ldr	r0, [pc, #20]	; (800bb64 <MX_USART1_UART_Init+0x58>)
 800bb50:	f7fe fd08 	bl	800a564 <HAL_UART_Init>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800bb5a:	f000 f89f 	bl	800bc9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800bb5e:	bf00      	nop
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	2000044c 	.word	0x2000044c
 800bb68:	40013800 	.word	0x40013800

0800bb6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb72:	f107 030c 	add.w	r3, r7, #12
 800bb76:	2200      	movs	r2, #0
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	605a      	str	r2, [r3, #4]
 800bb7c:	609a      	str	r2, [r3, #8]
 800bb7e:	60da      	str	r2, [r3, #12]
 800bb80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb82:	4b43      	ldr	r3, [pc, #268]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	4a42      	ldr	r2, [pc, #264]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bb88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb8c:	6153      	str	r3, [r2, #20]
 800bb8e:	4b40      	ldr	r3, [pc, #256]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb96:	60bb      	str	r3, [r7, #8]
 800bb98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb9a:	4b3d      	ldr	r3, [pc, #244]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	4a3c      	ldr	r2, [pc, #240]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bba4:	6153      	str	r3, [r2, #20]
 800bba6:	4b3a      	ldr	r3, [pc, #232]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbae:	607b      	str	r3, [r7, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bbb2:	4b37      	ldr	r3, [pc, #220]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	4a36      	ldr	r2, [pc, #216]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bbb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbbc:	6153      	str	r3, [r2, #20]
 800bbbe:	4b34      	ldr	r3, [pc, #208]	; (800bc90 <MX_GPIO_Init+0x124>)
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2120      	movs	r1, #32
 800bbce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bbd2:	f7f8 fa68 	bl	80040a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800bbd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bbdc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800bbe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800bbe6:	f107 030c 	add.w	r3, r7, #12
 800bbea:	4619      	mov	r1, r3
 800bbec:	4829      	ldr	r0, [pc, #164]	; (800bc94 <MX_GPIO_Init+0x128>)
 800bbee:	f7f8 f8b9 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800bbf2:	2340      	movs	r3, #64	; 0x40
 800bbf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bbfe:	f107 030c 	add.w	r3, r7, #12
 800bc02:	4619      	mov	r1, r3
 800bc04:	4823      	ldr	r0, [pc, #140]	; (800bc94 <MX_GPIO_Init+0x128>)
 800bc06:	f7f8 f8ad 	bl	8003d64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800bc0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800bc0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc10:	2301      	movs	r3, #1
 800bc12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc1c:	f107 030c 	add.w	r3, r7, #12
 800bc20:	4619      	mov	r1, r3
 800bc22:	481d      	ldr	r0, [pc, #116]	; (800bc98 <MX_GPIO_Init+0x12c>)
 800bc24:	f7f8 f89e 	bl	8003d64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3| GPIO_PIN_4;
 800bc28:	2318      	movs	r3, #24
 800bc2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc30:	2300      	movs	r3, #0
 800bc32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc34:	f107 030c 	add.w	r3, r7, #12
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4817      	ldr	r0, [pc, #92]	; (800bc98 <MX_GPIO_Init+0x12c>)
 800bc3c:	f7f8 f892 	bl	8003d64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7| GPIO_PIN_9;
 800bc40:	f44f 7320 	mov.w	r3, #640	; 0x280
 800bc44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc46:	2300      	movs	r3, #0
 800bc48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc4e:	f107 030c 	add.w	r3, r7, #12
 800bc52:	4619      	mov	r1, r3
 800bc54:	480f      	ldr	r0, [pc, #60]	; (800bc94 <MX_GPIO_Init+0x128>)
 800bc56:	f7f8 f885 	bl	8003d64 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin =  GPIO_PIN_2|GPIO_PIN_3;
 800bc5a:	230c      	movs	r3, #12
 800bc5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc66:	2300      	movs	r3, #0
 800bc68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc6a:	f107 030c 	add.w	r3, r7, #12
 800bc6e:	4619      	mov	r1, r3
 800bc70:	4808      	ldr	r0, [pc, #32]	; (800bc94 <MX_GPIO_Init+0x128>)
 800bc72:	f7f8 f877 	bl	8003d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800bc76:	2200      	movs	r2, #0
 800bc78:	2100      	movs	r1, #0
 800bc7a:	2028      	movs	r0, #40	; 0x28
 800bc7c:	f7fc fa01 	bl	8008082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800bc80:	2028      	movs	r0, #40	; 0x28
 800bc82:	f7fc fa1a 	bl	80080ba <HAL_NVIC_EnableIRQ>

}
 800bc86:	bf00      	nop
 800bc88:	3720      	adds	r7, #32
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	40021000 	.word	0x40021000
 800bc94:	48000800 	.word	0x48000800
 800bc98:	48000400 	.word	0x48000400

0800bc9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800bca0:	b672      	cpsid	i
}
 800bca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800bca4:	e7fe      	b.n	800bca4 <Error_Handler+0x8>

0800bca6 <EcuM_StartUp_One>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_One()
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 800bcaa:	f7fc f8ab 	bl	8007e04 <HAL_Init>
	BswM_Init();
 800bcae:	f7ff fc69 	bl	800b584 <BswM_Init>
}
 800bcb2:	bf00      	nop
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <EcuM_StartUp_Two>:

void EcuM_StartUp_Two()
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	af00      	add	r7, sp, #0

}
 800bcba:	bf00      	nop
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bc80      	pop	{r7}
 800bcc0:	4770      	bx	lr

0800bcc2 <EcuM_Init>:

int EcuM_Init(void)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	af00      	add	r7, sp, #0
	EcuM_StartUp_One();
 800bcc6:	f7ff ffee 	bl	800bca6 <EcuM_StartUp_One>
	/* Start Scheduler */
	Os_Start();
 800bcca:	f000 f803 	bl	800bcd4 <Os_Start>

	return 0;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <Os_Start>:

#include "Os.h"
#include "Os_scheduler.h"

void Os_Start()
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
	Os_Scheduler_Init();
 800bcd8:	f000 f8ba 	bl	800be50 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 800bcdc:	f000 f930 	bl	800bf40 <Os_Scheduler_Start>

	while(1)
 800bce0:	e7fe      	b.n	800bce0 <Os_Start+0xc>
	...

0800bce4 <SysTick_Handler>:
/**
  * @brief  SysTick IRQ Handler
  * @return None
  */
void SysTick_Handler(void)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	af00      	add	r7, sp, #0
	/* Increment general counter */
	HAL_IncTick();
 800bce8:	f7fc f8d8 	bl	8007e9c <HAL_IncTick>
	/* Reset counters if base counter reached maximum value */
	if(g_Os_BaseTimerISR_count_u32 == OS_BASETIMER_COUNT_MAX)
 800bcec:	4b40      	ldr	r3, [pc, #256]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f242 720f 	movw	r2, #9999	; 0x270f
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d112      	bne.n	800bd1e <SysTick_Handler+0x3a>
	{
		g_Os_BaseTimerISR_count_u32 = 0u;
 800bcf8:	4b3d      	ldr	r3, [pc, #244]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
		g_Os_5msTimerISR_count_u32 = 0u;
 800bcfe:	4b3d      	ldr	r3, [pc, #244]	; (800bdf4 <SysTick_Handler+0x110>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	601a      	str	r2, [r3, #0]
		g_Os_10msTimerISR_count_u32 = 0u;
 800bd04:	4b3c      	ldr	r3, [pc, #240]	; (800bdf8 <SysTick_Handler+0x114>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]
		g_Os_50msTimerISR_count_u32 = 0u;
 800bd0a:	4b3c      	ldr	r3, [pc, #240]	; (800bdfc <SysTick_Handler+0x118>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
		g_Os_100msTimerISR_count_u32 = 0u;
 800bd10:	4b3b      	ldr	r3, [pc, #236]	; (800be00 <SysTick_Handler+0x11c>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
		g_Os_500msTimerISR_count_u32 = 0u;
 800bd16:	4b3b      	ldr	r3, [pc, #236]	; (800be04 <SysTick_Handler+0x120>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	e004      	b.n	800bd28 <SysTick_Handler+0x44>
	}
	else
	{
		/* Increment base counter */
		g_Os_BaseTimerISR_count_u32++;
 800bd1e:	4b34      	ldr	r3, [pc, #208]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3301      	adds	r3, #1
 800bd24:	4a32      	ldr	r2, [pc, #200]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bd26:	6013      	str	r3, [r2, #0]
	}

	/* Check for 5ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 5) == 0u)
 800bd28:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bd2a:	6819      	ldr	r1, [r3, #0]
 800bd2c:	4b36      	ldr	r3, [pc, #216]	; (800be08 <SysTick_Handler+0x124>)
 800bd2e:	fba3 2301 	umull	r2, r3, r3, r1
 800bd32:	089a      	lsrs	r2, r3, #2
 800bd34:	4613      	mov	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	1aca      	subs	r2, r1, r3
 800bd3c:	2a00      	cmp	r2, #0
 800bd3e:	d104      	bne.n	800bd4a <SysTick_Handler+0x66>
	{
		/* Increment 5ms counter */
		g_Os_5msTimerISR_count_u32++;
 800bd40:	4b2c      	ldr	r3, [pc, #176]	; (800bdf4 <SysTick_Handler+0x110>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3301      	adds	r3, #1
 800bd46:	4a2b      	ldr	r2, [pc, #172]	; (800bdf4 <SysTick_Handler+0x110>)
 800bd48:	6013      	str	r3, [r2, #0]
	}

	/* Check for 10ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 10) == 0u)
 800bd4a:	4b29      	ldr	r3, [pc, #164]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bd4c:	6819      	ldr	r1, [r3, #0]
 800bd4e:	4b2e      	ldr	r3, [pc, #184]	; (800be08 <SysTick_Handler+0x124>)
 800bd50:	fba3 2301 	umull	r2, r3, r3, r1
 800bd54:	08da      	lsrs	r2, r3, #3
 800bd56:	4613      	mov	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	1aca      	subs	r2, r1, r3
 800bd60:	2a00      	cmp	r2, #0
 800bd62:	d104      	bne.n	800bd6e <SysTick_Handler+0x8a>
	{
		/* Increment 10ms counter */
		g_Os_10msTimerISR_count_u32++;
 800bd64:	4b24      	ldr	r3, [pc, #144]	; (800bdf8 <SysTick_Handler+0x114>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	4a23      	ldr	r2, [pc, #140]	; (800bdf8 <SysTick_Handler+0x114>)
 800bd6c:	6013      	str	r3, [r2, #0]
	}

	/* Check for 50ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 50) == 0u)
 800bd6e:	4b20      	ldr	r3, [pc, #128]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b26      	ldr	r3, [pc, #152]	; (800be0c <SysTick_Handler+0x128>)
 800bd74:	fba3 1302 	umull	r1, r3, r3, r2
 800bd78:	091b      	lsrs	r3, r3, #4
 800bd7a:	2132      	movs	r1, #50	; 0x32
 800bd7c:	fb01 f303 	mul.w	r3, r1, r3
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d104      	bne.n	800bd90 <SysTick_Handler+0xac>
	{
		/* Increment 50ms counter */
		g_Os_50msTimerISR_count_u32++;
 800bd86:	4b1d      	ldr	r3, [pc, #116]	; (800bdfc <SysTick_Handler+0x118>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	4a1b      	ldr	r2, [pc, #108]	; (800bdfc <SysTick_Handler+0x118>)
 800bd8e:	6013      	str	r3, [r2, #0]
	}

	/* Check for 100ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 100) == 0u)
 800bd90:	4b17      	ldr	r3, [pc, #92]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	4b1d      	ldr	r3, [pc, #116]	; (800be0c <SysTick_Handler+0x128>)
 800bd96:	fba3 1302 	umull	r1, r3, r3, r2
 800bd9a:	095b      	lsrs	r3, r3, #5
 800bd9c:	2164      	movs	r1, #100	; 0x64
 800bd9e:	fb01 f303 	mul.w	r3, r1, r3
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d104      	bne.n	800bdb2 <SysTick_Handler+0xce>
	{
		/* Increment 100ms counter */
		g_Os_100msTimerISR_count_u32++;
 800bda8:	4b15      	ldr	r3, [pc, #84]	; (800be00 <SysTick_Handler+0x11c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3301      	adds	r3, #1
 800bdae:	4a14      	ldr	r2, [pc, #80]	; (800be00 <SysTick_Handler+0x11c>)
 800bdb0:	6013      	str	r3, [r2, #0]
	}

	/* Check for 500ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 500) == 0u)
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <SysTick_Handler+0x10c>)
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	4b16      	ldr	r3, [pc, #88]	; (800be10 <SysTick_Handler+0x12c>)
 800bdb8:	fba3 1302 	umull	r1, r3, r3, r2
 800bdbc:	095b      	lsrs	r3, r3, #5
 800bdbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bdc2:	fb01 f303 	mul.w	r3, r1, r3
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d104      	bne.n	800bdd6 <SysTick_Handler+0xf2>
	{
		/* Increment 500ms counter */
		g_Os_500msTimerISR_count_u32++;
 800bdcc:	4b0d      	ldr	r3, [pc, #52]	; (800be04 <SysTick_Handler+0x120>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	4a0c      	ldr	r2, [pc, #48]	; (800be04 <SysTick_Handler+0x120>)
 800bdd4:	6013      	str	r3, [r2, #0]
	}

	/* Call PendSV_Handler for context switch */
	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800bdd6:	4b0f      	ldr	r3, [pc, #60]	; (800be14 <SysTick_Handler+0x130>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d105      	bne.n	800bdec <SysTick_Handler+0x108>
	{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800bde0:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <SysTick_Handler+0x134>)
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	4a0c      	ldr	r2, [pc, #48]	; (800be18 <SysTick_Handler+0x134>)
 800bde6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdea:	6053      	str	r3, [r2, #4]
	}
}
 800bdec:	bf00      	nop
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	200014ac 	.word	0x200014ac
 800bdf4:	200014b0 	.word	0x200014b0
 800bdf8:	200014b4 	.word	0x200014b4
 800bdfc:	200014b8 	.word	0x200014b8
 800be00:	200014bc 	.word	0x200014bc
 800be04:	200014c0 	.word	0x200014c0
 800be08:	cccccccd 	.word	0xcccccccd
 800be0c:	51eb851f 	.word	0x51eb851f
 800be10:	10624dd3 	.word	0x10624dd3
 800be14:	200014ec 	.word	0x200014ec
 800be18:	e000ed00 	.word	0xe000ed00

0800be1c <PendSV_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 800be1c:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 800be1e:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 800be20:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800be22:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 800be24:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 800be26:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 800be28:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800be2a:	4808      	ldr	r0, [pc, #32]	; (800be4c <PendSV_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 800be2c:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 800be2e:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 800be30:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 800be32:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 800be34:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 800be36:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 800be38:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 800be3a:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800be3c:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800be3e:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800be40:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800be42:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 800be44:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 800be46:	b662      	cpsie	i
    __asm("BX      LR");
 800be48:	4770      	bx	lr

}
 800be4a:	bf00      	nop
 800be4c:	20000508 	.word	0x20000508

0800be50 <Os_Scheduler_Init>:
/**
  * @brief  OS Scheduler initialization function
  * @return None
  */
void Os_Scheduler_Init()
{
 800be50:	b480      	push	{r7}
 800be52:	af00      	add	r7, sp, #0
	/* Enter critical section: Disable interrupts */
	__asm("CPSID   I");
 800be54:	b672      	cpsid	i
	/* Make the Task Control Block linked list circular */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8];
 800be56:	4b29      	ldr	r3, [pc, #164]	; (800befc <Os_Scheduler_Init+0xac>)
 800be58:	4a29      	ldr	r2, [pc, #164]	; (800bf00 <Os_Scheduler_Init+0xb0>)
 800be5a:	605a      	str	r2, [r3, #4]
	g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8];
 800be5c:	4b27      	ldr	r3, [pc, #156]	; (800befc <Os_Scheduler_Init+0xac>)
 800be5e:	4a29      	ldr	r2, [pc, #164]	; (800bf04 <Os_Scheduler_Init+0xb4>)
 800be60:	60da      	str	r2, [r3, #12]
	g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8];
 800be62:	4b26      	ldr	r3, [pc, #152]	; (800befc <Os_Scheduler_Init+0xac>)
 800be64:	4a28      	ldr	r2, [pc, #160]	; (800bf08 <Os_Scheduler_Init+0xb8>)
 800be66:	615a      	str	r2, [r3, #20]
	g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8];
 800be68:	4b24      	ldr	r3, [pc, #144]	; (800befc <Os_Scheduler_Init+0xac>)
 800be6a:	4a28      	ldr	r2, [pc, #160]	; (800bf0c <Os_Scheduler_Init+0xbc>)
 800be6c:	61da      	str	r2, [r3, #28]
	g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800be6e:	4b23      	ldr	r3, [pc, #140]	; (800befc <Os_Scheduler_Init+0xac>)
 800be70:	4a22      	ldr	r2, [pc, #136]	; (800befc <Os_Scheduler_Init+0xac>)
 800be72:	625a      	str	r2, [r3, #36]	; 0x24
	/* Setup stack for initialization (master) task */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-16];
 800be74:	4b21      	ldr	r3, [pc, #132]	; (800befc <Os_Scheduler_Init+0xac>)
 800be76:	4a26      	ldr	r2, [pc, #152]	; (800bf10 <Os_Scheduler_Init+0xc0>)
 800be78:	601a      	str	r2, [r3, #0]
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800be7a:	4b26      	ldr	r3, [pc, #152]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800be7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be80:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_TaskMaster_0);
 800be84:	4a24      	ldr	r2, [pc, #144]	; (800bf18 <Os_Scheduler_Init+0xc8>)
 800be86:	4b23      	ldr	r3, [pc, #140]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800be88:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	/* Setup stack for 10ms task */
    g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-16];
 800be8c:	4b1b      	ldr	r3, [pc, #108]	; (800befc <Os_Scheduler_Init+0xac>)
 800be8e:	4a23      	ldr	r2, [pc, #140]	; (800bf1c <Os_Scheduler_Init+0xcc>)
 800be90:	609a      	str	r2, [r3, #8]
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800be92:	4b20      	ldr	r3, [pc, #128]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800be94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be98:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task10ms_0);
 800be9c:	4a20      	ldr	r2, [pc, #128]	; (800bf20 <Os_Scheduler_Init+0xd0>)
 800be9e:	4b1d      	ldr	r3, [pc, #116]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800bea0:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
	/* Setup stack for 50ms task */
    g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-16];
 800bea4:	4b15      	ldr	r3, [pc, #84]	; (800befc <Os_Scheduler_Init+0xac>)
 800bea6:	4a1f      	ldr	r2, [pc, #124]	; (800bf24 <Os_Scheduler_Init+0xd4>)
 800bea8:	611a      	str	r2, [r3, #16]
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800beaa:	4b1a      	ldr	r3, [pc, #104]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800beac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800beb0:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task50ms_0);
 800beb4:	4a1c      	ldr	r2, [pc, #112]	; (800bf28 <Os_Scheduler_Init+0xd8>)
 800beb6:	4b17      	ldr	r3, [pc, #92]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800beb8:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
	/* Setup stack for 100ms task */
    g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-16];
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <Os_Scheduler_Init+0xac>)
 800bebe:	4a1b      	ldr	r2, [pc, #108]	; (800bf2c <Os_Scheduler_Init+0xdc>)
 800bec0:	619a      	str	r2, [r3, #24]
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800bec2:	4b14      	ldr	r3, [pc, #80]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800bec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bec8:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task100ms_0);
 800becc:	4a18      	ldr	r2, [pc, #96]	; (800bf30 <Os_Scheduler_Init+0xe0>)
 800bece:	4b11      	ldr	r3, [pc, #68]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800bed0:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78
	/* Setup stack for 500ms task */
    g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-16];
 800bed4:	4b09      	ldr	r3, [pc, #36]	; (800befc <Os_Scheduler_Init+0xac>)
 800bed6:	4a17      	ldr	r2, [pc, #92]	; (800bf34 <Os_Scheduler_Init+0xe4>)
 800bed8:	621a      	str	r2, [r3, #32]
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800beda:	4b0e      	ldr	r3, [pc, #56]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800bedc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bee0:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task500ms_0);
 800bee4:	4a14      	ldr	r2, [pc, #80]	; (800bf38 <Os_Scheduler_Init+0xe8>)
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <Os_Scheduler_Init+0xc4>)
 800bee8:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
    /* Set the current task control block to point to init task */
    g_Os_CurrentTaskBlock_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800beec:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <Os_Scheduler_Init+0xec>)
 800beee:	4a03      	ldr	r2, [pc, #12]	; (800befc <Os_Scheduler_Init+0xac>)
 800bef0:	601a      	str	r2, [r3, #0]
    /* Leave critical section: Enable interrupts */
    __asm("CPSIE   I ");
 800bef2:	b662      	cpsie	i
}
 800bef4:	bf00      	nop
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bc80      	pop	{r7}
 800befa:	4770      	bx	lr
 800befc:	200004e0 	.word	0x200004e0
 800bf00:	200004e8 	.word	0x200004e8
 800bf04:	200004f0 	.word	0x200004f0
 800bf08:	200004f8 	.word	0x200004f8
 800bf0c:	20000500 	.word	0x20000500
 800bf10:	200007ec 	.word	0x200007ec
 800bf14:	2000050c 	.word	0x2000050c
 800bf18:	0800bf6d 	.word	0x0800bf6d
 800bf1c:	20000b0c 	.word	0x20000b0c
 800bf20:	0800bff5 	.word	0x0800bff5
 800bf24:	20000e2c 	.word	0x20000e2c
 800bf28:	0800c045 	.word	0x0800c045
 800bf2c:	2000114c 	.word	0x2000114c
 800bf30:	0800c095 	.word	0x0800c095
 800bf34:	2000146c 	.word	0x2000146c
 800bf38:	0800c0e5 	.word	0x0800c0e5
 800bf3c:	20000508 	.word	0x20000508

0800bf40 <Os_Scheduler_Start>:
  * @return None
  */
__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800bf40:	4809      	ldr	r0, [pc, #36]	; (800bf68 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 800bf42:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 800bf44:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 800bf46:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 800bf48:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800bf4a:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800bf4c:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800bf4e:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800bf50:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 800bf52:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 800bf54:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800bf56:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800bf58:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 800bf5a:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 800bf5c:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 800bf5e:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 800bf60:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 800bf62:	b662      	cpsie	i
    __asm("BX      LR");
 800bf64:	4770      	bx	lr
}
 800bf66:	bf00      	nop
 800bf68:	20000508 	.word	0x20000508

0800bf6c <Os_Scheduler_TaskMaster_0>:
/**
  * @brief  Initialization task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_TaskMaster_0(void)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	af00      	add	r7, sp, #0
    while(1)
    {
    	/* Wait for context switch of master task */
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800bf70:	bf00      	nop
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <Os_Scheduler_TaskMaster_0+0x78>)
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	4b1c      	ldr	r3, [pc, #112]	; (800bfe8 <Os_Scheduler_TaskMaster_0+0x7c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d0f9      	beq.n	800bf72 <Os_Scheduler_TaskMaster_0+0x6>
    	{
    	}
    	Os_Task5ms_0_cnt++;
 800bf7e:	4b1b      	ldr	r3, [pc, #108]	; (800bfec <Os_Scheduler_TaskMaster_0+0x80>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	4a19      	ldr	r2, [pc, #100]	; (800bfec <Os_Scheduler_TaskMaster_0+0x80>)
 800bf86:	6013      	str	r3, [r2, #0]
    	g_Os_Task5ms_count_u32 = g_Os_5msTimerISR_count_u32;
 800bf88:	4b17      	ldr	r3, [pc, #92]	; (800bfe8 <Os_Scheduler_TaskMaster_0+0x7c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a15      	ldr	r2, [pc, #84]	; (800bfe4 <Os_Scheduler_TaskMaster_0+0x78>)
 800bf8e:	6013      	str	r3, [r2, #0]

    	/* Check Os state */
    	switch (g_OS_State_e)
 800bf90:	4b17      	ldr	r3, [pc, #92]	; (800bff0 <Os_Scheduler_TaskMaster_0+0x84>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b05      	cmp	r3, #5
 800bf98:	d822      	bhi.n	800bfe0 <Os_Scheduler_TaskMaster_0+0x74>
 800bf9a:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <Os_Scheduler_TaskMaster_0+0x34>)
 800bf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa0:	0800bfb9 	.word	0x0800bfb9
 800bfa4:	0800bfc1 	.word	0x0800bfc1
 800bfa8:	0800bfcd 	.word	0x0800bfcd
 800bfac:	0800bfcd 	.word	0x0800bfcd
 800bfb0:	0800bfd5 	.word	0x0800bfd5
 800bfb4:	0800bfe1 	.word	0x0800bfe1
    	{
    		case OS_STATE_RESET_E:
    		{
    			g_OS_State_e = OS_STATE_INIT_E;
 800bfb8:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <Os_Scheduler_TaskMaster_0+0x84>)
 800bfba:	2201      	movs	r2, #1
 800bfbc:	701a      	strb	r2, [r3, #0]
    		} break;
 800bfbe:	e010      	b.n	800bfe2 <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_INIT_E:
    		{
    			OS_TASK_CALL(Os_Task_Master(), g_Os_dwt_Master_f32);
 800bfc0:	f000 f8b8 	bl	800c134 <Os_Task_Master>
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800bfc4:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <Os_Scheduler_TaskMaster_0+0x84>)
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	701a      	strb	r2, [r3, #0]
    		} break;
 800bfca:	e00a      	b.n	800bfe2 <Os_Scheduler_TaskMaster_0+0x76>
    			//g_OS_State_e = OS_STATE_RUNNING_E;
    		}
    		case OS_STATE_RUNNING_E:
    		{
    			/* TODO: add task activate/suspend here */
    			g_OS_State_e = OS_STATE_RUNNING_E;
 800bfcc:	4b08      	ldr	r3, [pc, #32]	; (800bff0 <Os_Scheduler_TaskMaster_0+0x84>)
 800bfce:	2203      	movs	r2, #3
 800bfd0:	701a      	strb	r2, [r3, #0]
    		} break;
 800bfd2:	e006      	b.n	800bfe2 <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_SHUTDOWN_E:
    		{
    			/* TODO: Addc condition to get here */
    			OS_TASK_CALL(Os_Task_Shutdown(), g_Os_dwt_Shutdown_f32);
 800bfd4:	f000 f8cc 	bl	800c170 <Os_Task_Shutdown>
    			/* TODO: move to reset state */
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800bfd8:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <Os_Scheduler_TaskMaster_0+0x84>)
 800bfda:	2202      	movs	r2, #2
 800bfdc:	701a      	strb	r2, [r3, #0]
    		} break;
 800bfde:	e000      	b.n	800bfe2 <Os_Scheduler_TaskMaster_0+0x76>
    			/* NvM write all, write error */
    		} break;
    		default:
    		{

    		} break;
 800bfe0:	bf00      	nop
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800bfe2:	e7c5      	b.n	800bf70 <Os_Scheduler_TaskMaster_0+0x4>
 800bfe4:	200014c8 	.word	0x200014c8
 800bfe8:	200014b0 	.word	0x200014b0
 800bfec:	200014c4 	.word	0x200014c4
 800bff0:	200014ec 	.word	0x200014ec

0800bff4 <Os_Scheduler_Task10ms_0>:
/**
  * @brief  Periodic 10ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task10ms_0(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800bff8:	4b0e      	ldr	r3, [pc, #56]	; (800c034 <Os_Scheduler_Task10ms_0+0x40>)
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d112      	bne.n	800c028 <Os_Scheduler_Task10ms_0+0x34>
    	{
			while(g_Os_Task10ms_count_u32 == g_Os_10msTimerISR_count_u32)
 800c002:	bf00      	nop
 800c004:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <Os_Scheduler_Task10ms_0+0x44>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <Os_Scheduler_Task10ms_0+0x48>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d0f9      	beq.n	800c004 <Os_Scheduler_Task10ms_0+0x10>
			{

			}
			Os_Task10ms_0_cnt++;
 800c010:	4b0b      	ldr	r3, [pc, #44]	; (800c040 <Os_Scheduler_Task10ms_0+0x4c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3301      	adds	r3, #1
 800c016:	4a0a      	ldr	r2, [pc, #40]	; (800c040 <Os_Scheduler_Task10ms_0+0x4c>)
 800c018:	6013      	str	r3, [r2, #0]
			g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800c01a:	4b08      	ldr	r3, [pc, #32]	; (800c03c <Os_Scheduler_Task10ms_0+0x48>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a06      	ldr	r2, [pc, #24]	; (800c038 <Os_Scheduler_Task10ms_0+0x44>)
 800c020:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_10ms(), g_Os_dwt_10ms_f32);
 800c022:	f000 f88d 	bl	800c140 <Os_Task_10ms>
 800c026:	e7e7      	b.n	800bff8 <Os_Scheduler_Task10ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800c028:	4b04      	ldr	r3, [pc, #16]	; (800c03c <Os_Scheduler_Task10ms_0+0x48>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a02      	ldr	r2, [pc, #8]	; (800c038 <Os_Scheduler_Task10ms_0+0x44>)
 800c02e:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c030:	e7e2      	b.n	800bff8 <Os_Scheduler_Task10ms_0+0x4>
 800c032:	bf00      	nop
 800c034:	200014ec 	.word	0x200014ec
 800c038:	200014d0 	.word	0x200014d0
 800c03c:	200014b4 	.word	0x200014b4
 800c040:	200014cc 	.word	0x200014cc

0800c044 <Os_Scheduler_Task50ms_0>:
/**
  * @brief  Periodic 50ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task50ms_0(void)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c048:	4b0e      	ldr	r3, [pc, #56]	; (800c084 <Os_Scheduler_Task50ms_0+0x40>)
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d112      	bne.n	800c078 <Os_Scheduler_Task50ms_0+0x34>
    	{
			while(g_Os_Task50ms_count_u32 == g_Os_50msTimerISR_count_u32)
 800c052:	bf00      	nop
 800c054:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <Os_Scheduler_Task50ms_0+0x44>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <Os_Scheduler_Task50ms_0+0x48>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d0f9      	beq.n	800c054 <Os_Scheduler_Task50ms_0+0x10>
			{

			}
			Os_Task50ms_0_cnt++;
 800c060:	4b0b      	ldr	r3, [pc, #44]	; (800c090 <Os_Scheduler_Task50ms_0+0x4c>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	4a0a      	ldr	r2, [pc, #40]	; (800c090 <Os_Scheduler_Task50ms_0+0x4c>)
 800c068:	6013      	str	r3, [r2, #0]
			g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800c06a:	4b08      	ldr	r3, [pc, #32]	; (800c08c <Os_Scheduler_Task50ms_0+0x48>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a06      	ldr	r2, [pc, #24]	; (800c088 <Os_Scheduler_Task50ms_0+0x44>)
 800c070:	6013      	str	r3, [r2, #0]
			OS_TASK_CALL(Os_Task_50ms(), g_Os_dwt_50ms_f32);
 800c072:	f000 f86b 	bl	800c14c <Os_Task_50ms>
 800c076:	e7e7      	b.n	800c048 <Os_Scheduler_Task50ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800c078:	4b04      	ldr	r3, [pc, #16]	; (800c08c <Os_Scheduler_Task50ms_0+0x48>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a02      	ldr	r2, [pc, #8]	; (800c088 <Os_Scheduler_Task50ms_0+0x44>)
 800c07e:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c080:	e7e2      	b.n	800c048 <Os_Scheduler_Task50ms_0+0x4>
 800c082:	bf00      	nop
 800c084:	200014ec 	.word	0x200014ec
 800c088:	200014d8 	.word	0x200014d8
 800c08c:	200014b8 	.word	0x200014b8
 800c090:	200014d4 	.word	0x200014d4

0800c094 <Os_Scheduler_Task100ms_0>:
/**
  * @brief  Periodic 100ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task100ms_0(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c098:	4b0e      	ldr	r3, [pc, #56]	; (800c0d4 <Os_Scheduler_Task100ms_0+0x40>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d112      	bne.n	800c0c8 <Os_Scheduler_Task100ms_0+0x34>
    	{
			while(g_Os_Task100ms_count_u32 == g_Os_100msTimerISR_count_u32)
 800c0a2:	bf00      	nop
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	; (800c0d8 <Os_Scheduler_Task100ms_0+0x44>)
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	4b0c      	ldr	r3, [pc, #48]	; (800c0dc <Os_Scheduler_Task100ms_0+0x48>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d0f9      	beq.n	800c0a4 <Os_Scheduler_Task100ms_0+0x10>
			{

			}
			Os_Task100ms_0_cnt++;
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <Os_Scheduler_Task100ms_0+0x4c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	4a0a      	ldr	r2, [pc, #40]	; (800c0e0 <Os_Scheduler_Task100ms_0+0x4c>)
 800c0b8:	6013      	str	r3, [r2, #0]
			g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800c0ba:	4b08      	ldr	r3, [pc, #32]	; (800c0dc <Os_Scheduler_Task100ms_0+0x48>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a06      	ldr	r2, [pc, #24]	; (800c0d8 <Os_Scheduler_Task100ms_0+0x44>)
 800c0c0:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_100ms(), g_Os_dwt_100ms_f32);
 800c0c2:	f000 f849 	bl	800c158 <Os_Task_100ms>
 800c0c6:	e7e7      	b.n	800c098 <Os_Scheduler_Task100ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800c0c8:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <Os_Scheduler_Task100ms_0+0x48>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a02      	ldr	r2, [pc, #8]	; (800c0d8 <Os_Scheduler_Task100ms_0+0x44>)
 800c0ce:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c0d0:	e7e2      	b.n	800c098 <Os_Scheduler_Task100ms_0+0x4>
 800c0d2:	bf00      	nop
 800c0d4:	200014ec 	.word	0x200014ec
 800c0d8:	200014e0 	.word	0x200014e0
 800c0dc:	200014bc 	.word	0x200014bc
 800c0e0:	200014dc 	.word	0x200014dc

0800c0e4 <Os_Scheduler_Task500ms_0>:
/**
  * @brief  Periodic 500ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task500ms_0(void)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c0e8:	4b0e      	ldr	r3, [pc, #56]	; (800c124 <Os_Scheduler_Task500ms_0+0x40>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d112      	bne.n	800c118 <Os_Scheduler_Task500ms_0+0x34>
    	{
			while(g_Os_Task500ms_count_u32 == g_Os_500msTimerISR_count_u32)
 800c0f2:	bf00      	nop
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <Os_Scheduler_Task500ms_0+0x44>)
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	4b0c      	ldr	r3, [pc, #48]	; (800c12c <Os_Scheduler_Task500ms_0+0x48>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d0f9      	beq.n	800c0f4 <Os_Scheduler_Task500ms_0+0x10>
			{

			}
			Os_Task500ms_0_cnt++;
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <Os_Scheduler_Task500ms_0+0x4c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3301      	adds	r3, #1
 800c106:	4a0a      	ldr	r2, [pc, #40]	; (800c130 <Os_Scheduler_Task500ms_0+0x4c>)
 800c108:	6013      	str	r3, [r2, #0]
			g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800c10a:	4b08      	ldr	r3, [pc, #32]	; (800c12c <Os_Scheduler_Task500ms_0+0x48>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a06      	ldr	r2, [pc, #24]	; (800c128 <Os_Scheduler_Task500ms_0+0x44>)
 800c110:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_500ms(), g_Os_dwt_500ms_f32);
 800c112:	f000 f827 	bl	800c164 <Os_Task_500ms>
 800c116:	e7e7      	b.n	800c0e8 <Os_Scheduler_Task500ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800c118:	4b04      	ldr	r3, [pc, #16]	; (800c12c <Os_Scheduler_Task500ms_0+0x48>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a02      	ldr	r2, [pc, #8]	; (800c128 <Os_Scheduler_Task500ms_0+0x44>)
 800c11e:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c120:	e7e2      	b.n	800c0e8 <Os_Scheduler_Task500ms_0+0x4>
 800c122:	bf00      	nop
 800c124:	200014ec 	.word	0x200014ec
 800c128:	200014e8 	.word	0x200014e8
 800c12c:	200014c0 	.word	0x200014c0
 800c130:	200014e4 	.word	0x200014e4

0800c134 <Os_Task_Master>:

#include "Os_task.h"
#include "Rte_Os.h"

TASK(Master)()
{
 800c134:	b580      	push	{r7, lr}
 800c136:	af00      	add	r7, sp, #0
	Rte_Os_Task_Master();
 800c138:	f000 f872 	bl	800c220 <Rte_Task_Master>
}
 800c13c:	bf00      	nop
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <Os_Task_10ms>:

TASK(10ms)()
{
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 800c144:	f000 f890 	bl	800c268 <Rte_Task_10ms>
}
 800c148:	bf00      	nop
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <Os_Task_50ms>:

TASK(50ms)()
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 800c150:	f000 f89e 	bl	800c290 <Rte_Task_50ms>
}
 800c154:	bf00      	nop
 800c156:	bd80      	pop	{r7, pc}

0800c158 <Os_Task_100ms>:

TASK(100ms)()
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 800c15c:	f000 f8a0 	bl	800c2a0 <Rte_Task_100ms>
}
 800c160:	bf00      	nop
 800c162:	bd80      	pop	{r7, pc}

0800c164 <Os_Task_500ms>:

TASK(500ms)()
{
 800c164:	b580      	push	{r7, lr}
 800c166:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 800c168:	f000 f8a6 	bl	800c2b8 <Rte_Task_500ms>
}
 800c16c:	bf00      	nop
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <Os_Task_Shutdown>:

TASK(Shutdown)()
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0
	Rte_Os_Task_Shutdown();
 800c174:	f000 f8a6 	bl	800c2c4 <Rte_Task_Shutdown>
}
 800c178:	bf00      	nop
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0

}
 800c180:	bf00      	nop
 800c182:	46bd      	mov	sp, r7
 800c184:	bc80      	pop	{r7}
 800c186:	4770      	bx	lr

0800c188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c188:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c1c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c18c:	480d      	ldr	r0, [pc, #52]	; (800c1c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800c18e:	490e      	ldr	r1, [pc, #56]	; (800c1c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c190:	4a0e      	ldr	r2, [pc, #56]	; (800c1cc <LoopForever+0xe>)
  movs r3, #0
 800c192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c194:	e002      	b.n	800c19c <LoopCopyDataInit>

0800c196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c19a:	3304      	adds	r3, #4

0800c19c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c19c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c19e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c1a0:	d3f9      	bcc.n	800c196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c1a2:	4a0b      	ldr	r2, [pc, #44]	; (800c1d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c1a4:	4c0b      	ldr	r4, [pc, #44]	; (800c1d4 <LoopForever+0x16>)
  movs r3, #0
 800c1a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c1a8:	e001      	b.n	800c1ae <LoopFillZerobss>

0800c1aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c1aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c1ac:	3204      	adds	r2, #4

0800c1ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c1ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c1b0:	d3fb      	bcc.n	800c1aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c1b2:	f7fb fe21 	bl	8007df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c1b6:	f000 faa7 	bl	800c708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 800c1ba:	f7ff fd82 	bl	800bcc2 <EcuM_Init>

0800c1be <LoopForever>:

LoopForever:
    b LoopForever
 800c1be:	e7fe      	b.n	800c1be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c1c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800c1c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c1c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800c1cc:	0800c7fc 	.word	0x0800c7fc
  ldr r2, =_sbss
 800c1d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800c1d4:	200015b4 	.word	0x200015b4

0800c1d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c1d8:	e7fe      	b.n	800c1d8 <ADC1_2_IRQHandler>

0800c1da <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 800c1da:	b480      	push	{r7}
 800c1dc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c1de:	b672      	cpsid	i
}
 800c1e0:	bf00      	nop
	__disable_irq();
}
 800c1e2:	bf00      	nop
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bc80      	pop	{r7}
 800c1e8:	4770      	bx	lr

0800c1ea <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800c1ee:	b662      	cpsie	i
}
 800c1f0:	bf00      	nop
	__enable_irq();
}
 800c1f2:	bf00      	nop
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bc80      	pop	{r7}
 800c1f8:	4770      	bx	lr
	...

0800c1fc <Rte_Init>:

void Rte_Init(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800c200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c204:	4804      	ldr	r0, [pc, #16]	; (800c218 <Rte_Init+0x1c>)
 800c206:	f7f7 ff37 	bl	8004078 <HAL_GPIO_ReadPin>
 800c20a:	4603      	mov	r3, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	4b03      	ldr	r3, [pc, #12]	; (800c21c <Rte_Init+0x20>)
 800c210:	701a      	strb	r2, [r3, #0]
}
 800c212:	bf00      	nop
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	48000800 	.word	0x48000800
 800c21c:	200014ed 	.word	0x200014ed

0800c220 <Rte_Task_Master>:

/* Os Tasks*/
/* Init task */
void Rte_Task_Master(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 800c224:	f7ff fd47 	bl	800bcb6 <EcuM_StartUp_Two>

	/* Bsw stacks init */
	NvM_Init();
 800c228:	f7ff f95a 	bl	800b4e0 <NvM_Init>
	Ea_Init();
 800c22c:	f7ff f914 	bl	800b458 <Ea_Init>
	/* Rte init */
	Rte_Init();
 800c230:	f7ff ffe4 	bl	800c1fc <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 800c234:	f7f6 fa8c 	bl	8002750 <Cdd_Servo_Init>
	Cdd_Ultrasonic_Init();
 800c238:	f7f6 fbf8 	bl	8002a2c <Cdd_Ultrasonic_Init>
	Cdd_DCMotor_Init();
 800c23c:	f7f5 fdbc 	bl	8001db8 <Cdd_DCMotor_Init>
	/* Asw init */
	Access_Init();
 800c240:	f7f4 feac 	bl	8000f9c <Access_Init>
	Engine_Init();
 800c244:	f7f5 fada 	bl	80017fc <Engine_Init>
	Brakes_Init();
 800c248:	f7f4 ffbe 	bl	80011c8 <Brakes_Init>
	Steering_Init();
 800c24c:	f7f5 fd7a 	bl	8001d44 <Steering_Init>
	Blinker_Init();
 800c250:	f7f5 fca6 	bl	8001ba0 <Blinker_Init>
	FrontLights_Init();
 800c254:	f7f5 fd40 	bl	8001cd8 <FrontLights_Init>
	InteriorLights_Init();
 800c258:	f7f5 fd50 	bl	8001cfc <InteriorLights_Init>
	RearLights_Init();
 800c25c:	f7f5 fd60 	bl	8001d20 <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 800c260:	f7f5 fc0c 	bl	8001a7c <LED_Init>

	/* Add new ASW init functions here */
}
 800c264:	bf00      	nop
 800c266:	bd80      	pop	{r7, pc}

0800c268 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 800c26c:	f7ff f9a8 	bl	800b5c0 <BswM_MainFunction>
	NvM_MainFunction();
 800c270:	f7ff f946 	bl	800b500 <NvM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 800c274:	f7f6 fa94 	bl	80027a0 <Cdd_Servo_MainFunction>
	Cdd_Ultrasonic_MainFunction();
 800c278:	f7f6 fd00 	bl	8002c7c <Cdd_Ultrasonic_MainFunction>
	/* ASW */
	Access_MainFunction();
 800c27c:	f7f4 fe9a 	bl	8000fb4 <Access_MainFunction>
	Engine_MainFunction();
 800c280:	f7f5 fac8 	bl	8001814 <Engine_MainFunction>
	Brakes_MainFunction();
 800c284:	f7f4 ffd4 	bl	8001230 <Brakes_MainFunction>
	Steering_MainFunction();
 800c288:	f7f5 fd68 	bl	8001d5c <Steering_MainFunction>

}
 800c28c:	bf00      	nop
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 800c294:	f7f5 fc16 	bl	8001ac4 <LED_MainFunction>
	Cdd_DCMotor_MainFunction();
 800c298:	f7f6 f8a0 	bl	80023dc <Cdd_DCMotor_MainFunction>
}
 800c29c:	bf00      	nop
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 800c2a4:	f7f5 fc9a 	bl	8001bdc <Blinker_MainFunction>
	FrontLights_MainFunction();
 800c2a8:	f7f5 fd22 	bl	8001cf0 <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 800c2ac:	f7f5 fd32 	bl	8001d14 <InteriorLights_MainFunction>
	RearLights_MainFunction();
 800c2b0:	f7f5 fd42 	bl	8001d38 <RearLights_MainFunction>
}
 800c2b4:	bf00      	nop
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0

	/* UART test section. TODO: remove */

}
 800c2bc:	bf00      	nop
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bc80      	pop	{r7}
 800c2c2:	4770      	bx	lr

0800c2c4 <Rte_Task_Shutdown>:

void Rte_Task_Shutdown(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	af00      	add	r7, sp, #0
	/* ASW Shutdown callbacks */
	LED_Shutdown();
 800c2c8:	f7f5 fc5a 	bl	8001b80 <LED_Shutdown>
	Brakes_Shutdown();
 800c2cc:	f7f4 fff8 	bl	80012c0 <Brakes_Shutdown>

	/* BSW Shutdown callbacks */
}
 800c2d0:	bf00      	nop
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>:
/* CDD interfaces: Ultrasonic */
/* Cdd_Ultrasonic: Trigger measurement */
void Rte_Call_Cdd_Ultrasonic_TriggerMeasurement(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_SET);
 800c2d8:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a0a      	ldr	r2, [pc, #40]	; (800c308 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c2de:	8891      	ldrh	r1, [r2, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f7 fedf 	bl	80040a6 <HAL_GPIO_WritePin>
	__asm("NOP");
 800c2e8:	bf00      	nop
	__asm("NOP");
 800c2ea:	bf00      	nop
	__asm("NOP");
 800c2ec:	bf00      	nop
	__asm("NOP");
 800c2ee:	bf00      	nop
	__asm("NOP");
 800c2f0:	bf00      	nop
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_RESET);
 800c2f2:	4b05      	ldr	r3, [pc, #20]	; (800c308 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a04      	ldr	r2, [pc, #16]	; (800c308 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c2f8:	8891      	ldrh	r1, [r2, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7f7 fed2 	bl	80040a6 <HAL_GPIO_WritePin>
}
 800c302:	bf00      	nop
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	0800c7a8 	.word	0x0800c7a8

0800c30c <Rte_Read_Cdd_Ultrasonic_Distance_f32>:

/* Cdd_Ultrasonic: Read distance */
void Rte_Read_Cdd_Ultrasonic_Distance_f32(float32 *distance)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
	*distance = Cdd_Ultrasonic_ReadDistance();
 800c314:	f7f6 fccc 	bl	8002cb0 <Cdd_Ultrasonic_ReadDistance>
 800c318:	4602      	mov	r2, r0
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	601a      	str	r2, [r3, #0]
}
 800c31e:	bf00      	nop
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 800c330:	4b04      	ldr	r3, [pc, #16]	; (800c344 <Rte_Read_PC13_Pin_State+0x1c>)
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	b2da      	uxtb	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	701a      	strb	r2, [r3, #0]
}
 800c33a:	bf00      	nop
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	bc80      	pop	{r7}
 800c342:	4770      	bx	lr
 800c344:	200014ed 	.word	0x200014ed

0800c348 <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 800c352:	4a04      	ldr	r2, [pc, #16]	; (800c364 <Rte_Write_PC13_Pin_State+0x1c>)
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	7013      	strb	r3, [r2, #0]
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bc80      	pop	{r7}
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	200014ed 	.word	0x200014ed

0800c368 <Rte_Read_PC6_Pin_State>:

/* Read PC6 pin state - joystick switch */
void Rte_Read_PC6_Pin_State(uint8 *state)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
	*state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 800c370:	2140      	movs	r1, #64	; 0x40
 800c372:	4805      	ldr	r0, [pc, #20]	; (800c388 <Rte_Read_PC6_Pin_State+0x20>)
 800c374:	f7f7 fe80 	bl	8004078 <HAL_GPIO_ReadPin>
 800c378:	4603      	mov	r3, r0
 800c37a:	461a      	mov	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	701a      	strb	r2, [r3, #0]
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	48000800 	.word	0x48000800

0800c38c <Rte_Read_g_CollisionWarning_Status>:

void Rte_Read_g_CollisionWarning_Status(uint8 *status)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
	*status = g_Rte_CollisionWarning_Status_u8;
 800c394:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <Rte_Read_g_CollisionWarning_Status+0x1c>)
 800c396:	781a      	ldrb	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	701a      	strb	r2, [r3, #0]
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bc80      	pop	{r7}
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	200014f2 	.word	0x200014f2

0800c3ac <Rte_Write_g_CollisionWarning_Status>:

void Rte_Write_g_CollisionWarning_Status(uint8 status)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	71fb      	strb	r3, [r7, #7]
	g_Rte_CollisionWarning_Status_u8 = status;
 800c3b6:	4a04      	ldr	r2, [pc, #16]	; (800c3c8 <Rte_Write_g_CollisionWarning_Status+0x1c>)
 800c3b8:	79fb      	ldrb	r3, [r7, #7]
 800c3ba:	7013      	strb	r3, [r2, #0]
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bc80      	pop	{r7}
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	200014f2 	.word	0x200014f2

0800c3cc <Rte_Read_DIO_Autobrakes_State_b>:

void Rte_Read_DIO_Autobrakes_State_b(boolean *state)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
	*state = g_Rte_Autobrakes_Status_b;
 800c3d4:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <Rte_Read_DIO_Autobrakes_State_b+0x1c>)
 800c3d6:	781a      	ldrb	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	701a      	strb	r2, [r3, #0]
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bc80      	pop	{r7}
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	200014f3 	.word	0x200014f3

0800c3ec <Rte_Write_PC_2>:

/* Write PC2 pin state */
void Rte_Write_PC_2(boolean state)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800c3f6:	79fb      	ldrb	r3, [r7, #7]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d105      	bne.n	800c408 <Rte_Write_PC_2+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2104      	movs	r1, #4
 800c400:	4806      	ldr	r0, [pc, #24]	; (800c41c <Rte_Write_PC_2+0x30>)
 800c402:	f7f7 fe50 	bl	80040a6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
	}
}
 800c406:	e004      	b.n	800c412 <Rte_Write_PC_2+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800c408:	2201      	movs	r2, #1
 800c40a:	2104      	movs	r1, #4
 800c40c:	4803      	ldr	r0, [pc, #12]	; (800c41c <Rte_Write_PC_2+0x30>)
 800c40e:	f7f7 fe4a 	bl	80040a6 <HAL_GPIO_WritePin>
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	48000800 	.word	0x48000800

0800c420 <Rte_Write_PC_3>:

/* Write PC3 pin state */
void Rte_Write_PC_3(boolean state)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d105      	bne.n	800c43c <Rte_Write_PC_3+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800c430:	2200      	movs	r2, #0
 800c432:	2108      	movs	r1, #8
 800c434:	4806      	ldr	r0, [pc, #24]	; (800c450 <Rte_Write_PC_3+0x30>)
 800c436:	f7f7 fe36 	bl	80040a6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800c43a:	e004      	b.n	800c446 <Rte_Write_PC_3+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800c43c:	2201      	movs	r2, #1
 800c43e:	2108      	movs	r1, #8
 800c440:	4803      	ldr	r0, [pc, #12]	; (800c450 <Rte_Write_PC_3+0x30>)
 800c442:	f7f7 fe30 	bl	80040a6 <HAL_GPIO_WritePin>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	48000800 	.word	0x48000800

0800c454 <Rte_Write_DIO_Autobrakes_State_b>:

/* Write PC6 pin state */
void Rte_Write_DIO_Autobrakes_State_b(boolean state)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	71fb      	strb	r3, [r7, #7]
	g_Rte_Autobrakes_Status_b = state;
 800c45e:	4a04      	ldr	r2, [pc, #16]	; (800c470 <Rte_Write_DIO_Autobrakes_State_b+0x1c>)
 800c460:	79fb      	ldrb	r3, [r7, #7]
 800c462:	7013      	strb	r3, [r2, #0]
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}
	*/
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	bc80      	pop	{r7}
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	200014f3 	.word	0x200014f3

0800c474 <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 800c47e:	88fb      	ldrh	r3, [r7, #6]
 800c480:	4618      	mov	r0, r3
 800c482:	f7f6 f971 	bl	8002768 <Cdd_Servo_RawMove>
}
 800c486:	bf00      	nop
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <Rte_Read_NvM_Block>:

void Rte_Read_NvM_Block(uint16 blockID, uint8 *data)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	6039      	str	r1, [r7, #0]
 800c49a:	80fb      	strh	r3, [r7, #6]
	/* TODO:	- remove direct read <- should be done by ReadAll
	 * 			- add block update after write
	 */
	NvM_ReadBlock(blockID, Rte_NvM_RAM_Block[blockID]);
 800c49c:	88fb      	ldrh	r3, [r7, #6]
 800c49e:	015b      	lsls	r3, r3, #5
 800c4a0:	4a07      	ldr	r2, [pc, #28]	; (800c4c0 <Rte_Read_NvM_Block+0x30>)
 800c4a2:	441a      	add	r2, r3
 800c4a4:	88fb      	ldrh	r3, [r7, #6]
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff f85c 	bl	800b566 <NvM_ReadBlock>
	data = &Rte_NvM_RAM_Block[blockID][0u];
 800c4ae:	88fb      	ldrh	r3, [r7, #6]
 800c4b0:	015b      	lsls	r3, r3, #5
 800c4b2:	4a03      	ldr	r2, [pc, #12]	; (800c4c0 <Rte_Read_NvM_Block+0x30>)
 800c4b4:	4413      	add	r3, r2
 800c4b6:	603b      	str	r3, [r7, #0]
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	200014f4 	.word	0x200014f4

0800c4c4 <Rte_Write_NvM_Block>:

void Rte_Write_NvM_Block(uint16 blockID, uint8 *data)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	6039      	str	r1, [r7, #0]
 800c4ce:	80fb      	strh	r3, [r7, #6]
	NvM_WriteBlock(blockID, data);
 800c4d0:	88fb      	ldrh	r3, [r7, #6]
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff f837 	bl	800b548 <NvM_WriteBlock>
}
 800c4da:	bf00      	nop
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 800c4ee:	4a04      	ldr	r2, [pc, #16]	; (800c500 <Rte_Write_AN0_Voltage_u16+0x1c>)
 800c4f0:	88fb      	ldrh	r3, [r7, #6]
 800c4f2:	8013      	strh	r3, [r2, #0]
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bc80      	pop	{r7}
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	200014ee 	.word	0x200014ee

0800c504 <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800c50c:	f7ff fe65 	bl	800c1da <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 800c510:	4b05      	ldr	r3, [pc, #20]	; (800c528 <Rte_Read_AN0_Voltage_u16+0x24>)
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	b29a      	uxth	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800c51a:	f7ff fe66 	bl	800c1ea <Rte_Call_LeaveProtectedSection>
}
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	200014ee 	.word	0x200014ee

0800c52c <Rte_Write_AN2_Voltage_u16>:

void Rte_Write_AN2_Voltage_u16(uint16 voltage)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN2_Voltage = voltage;
 800c536:	4a04      	ldr	r2, [pc, #16]	; (800c548 <Rte_Write_AN2_Voltage_u16+0x1c>)
 800c538:	88fb      	ldrh	r3, [r7, #6]
 800c53a:	8013      	strh	r3, [r2, #0]
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	bc80      	pop	{r7}
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	200014f0 	.word	0x200014f0

0800c54c <Rte_Read_AN2_Voltage_u16>:

void Rte_Read_AN2_Voltage_u16(uint16 *voltage)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800c554:	f7ff fe41 	bl	800c1da <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN2_Voltage;
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <Rte_Read_AN2_Voltage_u16+0x24>)
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800c562:	f7ff fe42 	bl	800c1ea <Rte_Call_LeaveProtectedSection>
}
 800c566:	bf00      	nop
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	200014f0 	.word	0x200014f0

0800c574 <Rte_Read_Remote_D0>:

void Rte_Read_Remote_D0(uint8 *status)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 800c57c:	2180      	movs	r1, #128	; 0x80
 800c57e:	4805      	ldr	r0, [pc, #20]	; (800c594 <Rte_Read_Remote_D0+0x20>)
 800c580:	f7f7 fd7a 	bl	8004078 <HAL_GPIO_ReadPin>
 800c584:	4603      	mov	r3, r0
 800c586:	461a      	mov	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	701a      	strb	r2, [r3, #0]
}
 800c58c:	bf00      	nop
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	48000800 	.word	0x48000800

0800c598 <Rte_Read_Remote_D1>:

void Rte_Read_Remote_D1(uint8 *status)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800c5a0:	2108      	movs	r1, #8
 800c5a2:	4805      	ldr	r0, [pc, #20]	; (800c5b8 <Rte_Read_Remote_D1+0x20>)
 800c5a4:	f7f7 fd68 	bl	8004078 <HAL_GPIO_ReadPin>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	701a      	strb	r2, [r3, #0]
}
 800c5b0:	bf00      	nop
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	48000400 	.word	0x48000400

0800c5bc <Rte_Read_Remote_D2>:

void Rte_Read_Remote_D2(uint8 *status)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 800c5c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c5c8:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <Rte_Read_Remote_D2+0x24>)
 800c5ca:	f7f7 fd55 	bl	8004078 <HAL_GPIO_ReadPin>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	701a      	strb	r2, [r3, #0]
}
 800c5d6:	bf00      	nop
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	48000800 	.word	0x48000800

0800c5e4 <Rte_Read_Remote_D3>:

void Rte_Read_Remote_D3(uint8 *status)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800c5ec:	2110      	movs	r1, #16
 800c5ee:	4805      	ldr	r0, [pc, #20]	; (800c604 <Rte_Read_Remote_D3+0x20>)
 800c5f0:	f7f7 fd42 	bl	8004078 <HAL_GPIO_ReadPin>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	701a      	strb	r2, [r3, #0]
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	48000400 	.word	0x48000400

0800c608 <Rte_Write_PB_13>:

/* Write Green pin state */
void Rte_Write_PB_13(boolean state)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d106      	bne.n	800c626 <Rte_Write_PB_13+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_SET);
 800c618:	2201      	movs	r2, #1
 800c61a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c61e:	4807      	ldr	r0, [pc, #28]	; (800c63c <Rte_Write_PB_13+0x34>)
 800c620:	f7f7 fd41 	bl	80040a6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
	}
}
 800c624:	e005      	b.n	800c632 <Rte_Write_PB_13+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
 800c626:	2200      	movs	r2, #0
 800c628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c62c:	4803      	ldr	r0, [pc, #12]	; (800c63c <Rte_Write_PB_13+0x34>)
 800c62e:	f7f7 fd3a 	bl	80040a6 <HAL_GPIO_WritePin>
}
 800c632:	bf00      	nop
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	48000400 	.word	0x48000400

0800c640 <Rte_Write_PB_14>:

/* Write Yellow pin state */
void Rte_Write_PB_14(boolean state)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d106      	bne.n	800c65e <Rte_Write_PB_14+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_SET);
 800c650:	2201      	movs	r2, #1
 800c652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c656:	4807      	ldr	r0, [pc, #28]	; (800c674 <Rte_Write_PB_14+0x34>)
 800c658:	f7f7 fd25 	bl	80040a6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
	}
}
 800c65c:	e005      	b.n	800c66a <Rte_Write_PB_14+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
 800c65e:	2200      	movs	r2, #0
 800c660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c664:	4803      	ldr	r0, [pc, #12]	; (800c674 <Rte_Write_PB_14+0x34>)
 800c666:	f7f7 fd1e 	bl	80040a6 <HAL_GPIO_WritePin>
}
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	48000400 	.word	0x48000400

0800c678 <Rte_Write_PB_15>:

/* Write Red pin state */
void Rte_Write_PB_15(boolean state)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d106      	bne.n	800c696 <Rte_Write_PB_15+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_SET);
 800c688:	2201      	movs	r2, #1
 800c68a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c68e:	4807      	ldr	r0, [pc, #28]	; (800c6ac <Rte_Write_PB_15+0x34>)
 800c690:	f7f7 fd09 	bl	80040a6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
	}
}
 800c694:	e005      	b.n	800c6a2 <Rte_Write_PB_15+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
 800c696:	2200      	movs	r2, #0
 800c698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c69c:	4803      	ldr	r0, [pc, #12]	; (800c6ac <Rte_Write_PB_15+0x34>)
 800c69e:	f7f7 fd02 	bl	80040a6 <HAL_GPIO_WritePin>
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	48000400 	.word	0x48000400

0800c6b0 <Rte_Call_DCMotor_Set_Speed>:
{
	DC_MOTOR_Start(au8_MOTOR_Instance, au8_DIR, au8_SPEED);
}

void Rte_Call_DCMotor_Set_Speed(uint8 au8_MOTOR_Instance, uint8 au8_SPEED)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	460a      	mov	r2, r1
 800c6ba:	71fb      	strb	r3, [r7, #7]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	71bb      	strb	r3, [r7, #6]
	DC_MOTOR_Set_Speed(au8_MOTOR_Instance, au8_SPEED);
 800c6c0:	79ba      	ldrb	r2, [r7, #6]
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7f5 fde4 	bl	8002294 <DC_MOTOR_Set_Speed>
}
 800c6cc:	bf00      	nop
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <Rte_Call_DCMotor_Set_Dir>:

void Rte_Call_DCMotor_Set_Dir(uint8 au8_MOTOR_Instance, uint8 au8_DIR)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	460a      	mov	r2, r1
 800c6de:	71fb      	strb	r3, [r7, #7]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	71bb      	strb	r3, [r7, #6]
	DC_MOTOR_Set_Dir(au8_MOTOR_Instance, au8_DIR);
 800c6e4:	79ba      	ldrb	r2, [r7, #6]
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7f5 fe22 	bl	8002334 <DC_MOTOR_Set_Dir>
}
 800c6f0:	bf00      	nop
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <memset>:
 800c6f8:	4402      	add	r2, r0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d100      	bne.n	800c702 <memset+0xa>
 800c700:	4770      	bx	lr
 800c702:	f803 1b01 	strb.w	r1, [r3], #1
 800c706:	e7f9      	b.n	800c6fc <memset+0x4>

0800c708 <__libc_init_array>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	4d0d      	ldr	r5, [pc, #52]	; (800c740 <__libc_init_array+0x38>)
 800c70c:	4c0d      	ldr	r4, [pc, #52]	; (800c744 <__libc_init_array+0x3c>)
 800c70e:	1b64      	subs	r4, r4, r5
 800c710:	10a4      	asrs	r4, r4, #2
 800c712:	2600      	movs	r6, #0
 800c714:	42a6      	cmp	r6, r4
 800c716:	d109      	bne.n	800c72c <__libc_init_array+0x24>
 800c718:	4d0b      	ldr	r5, [pc, #44]	; (800c748 <__libc_init_array+0x40>)
 800c71a:	4c0c      	ldr	r4, [pc, #48]	; (800c74c <__libc_init_array+0x44>)
 800c71c:	f000 f818 	bl	800c750 <_init>
 800c720:	1b64      	subs	r4, r4, r5
 800c722:	10a4      	asrs	r4, r4, #2
 800c724:	2600      	movs	r6, #0
 800c726:	42a6      	cmp	r6, r4
 800c728:	d105      	bne.n	800c736 <__libc_init_array+0x2e>
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c730:	4798      	blx	r3
 800c732:	3601      	adds	r6, #1
 800c734:	e7ee      	b.n	800c714 <__libc_init_array+0xc>
 800c736:	f855 3b04 	ldr.w	r3, [r5], #4
 800c73a:	4798      	blx	r3
 800c73c:	3601      	adds	r6, #1
 800c73e:	e7f2      	b.n	800c726 <__libc_init_array+0x1e>
 800c740:	0800c7f4 	.word	0x0800c7f4
 800c744:	0800c7f4 	.word	0x0800c7f4
 800c748:	0800c7f4 	.word	0x0800c7f4
 800c74c:	0800c7f8 	.word	0x0800c7f8

0800c750 <_init>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	bf00      	nop
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr

0800c75c <_fini>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	bf00      	nop
 800c760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c762:	bc08      	pop	{r3}
 800c764:	469e      	mov	lr, r3
 800c766:	4770      	bx	lr
