
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d7c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f48  08007f48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007f48  08007f48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f48  08007f48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f48  08007f48  00017f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000ce0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cec  20000cec  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0d1  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003650  00000000  00000000  0003b107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  0003e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001598  00000000  00000000  0003fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b04  00000000  00000000  00041470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002302c  00000000  00000000  00064f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38d7  00000000  00000000  00087fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b877  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060b8  00000000  00000000  0015b8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007ef8 	.word	0x08007ef8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08007ef8 	.word	0x08007ef8

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Access_InitDone_b = TRUE;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <Access_Init+0x14>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000028 	.word	0x20000028

080009c8 <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Access_InitDone_b)
	{

	}
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Brakes_InitDone_b = TRUE;
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <Brakes_Init+0x14>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000029 	.word	0x20000029

080009ec <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Brakes_InitDone_b)
	{

	}
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Engine_InitDone_b = TRUE;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <Engine_Init+0x14>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000002a 	.word	0x2000002a

08000a10 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Engine_InitDone_b)
	{

	}
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(LED_Pulse_u16 >= LED_FADE_MAX_PULSE)
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <LED_UpdatePulseDirection+0x2c>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000a28:	d302      	bcc.n	8000a30 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <LED_UpdatePulseDirection+0x30>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(LED_Pulse_u16 <= LED_FADE_MIN_PULSE)
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <LED_UpdatePulseDirection+0x2c>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a38:	d802      	bhi.n	8000a40 <LED_UpdatePulseDirection+0x24>
	{
		/* Switch pulse direction to upward */
		LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP;
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <LED_UpdatePulseDirection+0x30>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
	}
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	2000002e 	.word	0x2000002e
 8000a4c:	20000030 	.word	0x20000030

08000a50 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP == LED_Pulse_Direction_u8)
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <LED_UpdatePulseWidth+0x48>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10c      	bne.n	8000a76 <LED_UpdatePulseWidth+0x26>
	{
		if(LED_Pulse_u16 <= LED_FADE_MAX_PULSE)
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <LED_UpdatePulseWidth+0x4c>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000a64:	d813      	bhi.n	8000a8e <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			LED_Pulse_u16 = LED_Pulse_u16+LED_FADE_PULSE_STEP;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <LED_UpdatePulseWidth+0x4c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <LED_UpdatePulseWidth+0x4c>)
 8000a72:	801a      	strh	r2, [r3, #0]
 8000a74:	e00b      	b.n	8000a8e <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(LED_Pulse_u16 >= LED_FADE_PULSE_STEP)
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LED_UpdatePulseWidth+0x4c>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000a7e:	d306      	bcc.n	8000a8e <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			LED_Pulse_u16 = LED_Pulse_u16-LED_FADE_PULSE_STEP;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <LED_UpdatePulseWidth+0x4c>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <LED_UpdatePulseWidth+0x4c>)
 8000a8c:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 8000a8e:	f7ff ffc5 	bl	8000a1c <LED_UpdatePulseDirection>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000030 	.word	0x20000030
 8000a9c:	2000002e 	.word	0x2000002e

08000aa0 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(0u);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f007 f9ed 	bl	8007e84 <Rte_Cdd_Servo_RawMove>
	/* Set initialization flag to done */
	LED_InitDone_b = TRUE;
 8000aaa:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <LED_Init+0x14>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000002b 	.word	0x2000002b

08000ab8 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == LED_InitDone_b)
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <LED_MainFunction+0x2c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10d      	bne.n	8000ae0 <LED_MainFunction+0x28>
	{
		/* Read the blue button state */
		Rte_Read_Button_State(&LED_ButtonState_b);
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <LED_MainFunction+0x30>)
 8000ac6:	f007 f9bd 	bl	8007e44 <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(TRUE == (boolean)LED_ButtonState_b)
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <LED_MainFunction+0x30>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d106      	bne.n	8000ae0 <LED_MainFunction+0x28>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8000ad2:	f7ff ffbd 	bl	8000a50 <LED_UpdatePulseWidth>
			/* Call the servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(LED_Pulse_u16);
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <LED_MainFunction+0x34>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 f9d2 	bl	8007e84 <Rte_Cdd_Servo_RawMove>
		else
		{
			/* Stop fading */
		}
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000002b 	.word	0x2000002b
 8000ae8:	2000002c 	.word	0x2000002c
 8000aec:	2000002e 	.word	0x2000002e

08000af0 <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Steering_InitDone_b = TRUE;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <Steering_Init+0x14>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000031 	.word	0x20000031

08000b08 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Steering_InitDone_b)
	{

	}
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <Cdd_Servo_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Init(void)
{
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b0b2      	sub	sp, #200	; 0xc8
 8000b18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000b44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32 ARR_Value = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam.SERVO_GPIO == GPIOA)
 8000b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6c:	d10c      	bne.n	8000b88 <Cdd_Servo_Init+0x74>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b70      	ldr	r3, [pc, #448]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a6f      	ldr	r2, [pc, #444]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b6d      	ldr	r3, [pc, #436]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	e046      	b.n	8000c16 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOB)
 8000b88:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b8c:	4b69      	ldr	r3, [pc, #420]	; (8000d34 <Cdd_Servo_Init+0x220>)
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d10c      	bne.n	8000bac <Cdd_Servo_Init+0x98>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b67      	ldr	r3, [pc, #412]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a66      	ldr	r2, [pc, #408]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b64      	ldr	r3, [pc, #400]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	e034      	b.n	8000c16 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOC)
 8000bac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb0:	4b61      	ldr	r3, [pc, #388]	; (8000d38 <Cdd_Servo_Init+0x224>)
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d10c      	bne.n	8000bd0 <Cdd_Servo_Init+0xbc>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b5e      	ldr	r3, [pc, #376]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a5d      	ldr	r2, [pc, #372]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b5b      	ldr	r3, [pc, #364]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	e022      	b.n	8000c16 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOD)
 8000bd0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bd4:	4b59      	ldr	r3, [pc, #356]	; (8000d3c <Cdd_Servo_Init+0x228>)
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d10c      	bne.n	8000bf4 <Cdd_Servo_Init+0xe0>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b55      	ldr	r3, [pc, #340]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a54      	ldr	r2, [pc, #336]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	e010      	b.n	8000c16 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOE)
 8000bf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bf8:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <Cdd_Servo_Init+0x22c>)
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d10b      	bne.n	8000c16 <Cdd_Servo_Init+0x102>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a4b      	ldr	r2, [pc, #300]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam.SERVO_PIN;
 8000c16:	2320      	movs	r3, #32
 8000c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(SERVO_CfgParam.SERVO_GPIO, &GPIO_InitStruct);
 8000c2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f001 fb29 	bl	8002290 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32) (SERVO_CfgParam.TIM_CLK / 3276800.0);
 8000c3e:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <Cdd_Servo_Init+0x230>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fc09 	bl	8000458 <__aeabi_ui2d>
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b3f      	ldr	r3, [pc, #252]	; (8000d48 <Cdd_Servo_Init+0x234>)
 8000c4c:	f7ff fda8 	bl	80007a0 <__aeabi_ddiv>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	f7ff fe8a 	bl	8000970 <__aeabi_d2uiz>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32) ((SERVO_CfgParam.TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <Cdd_Servo_Init+0x230>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fbf7 	bl	8000458 <__aeabi_ui2d>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	460d      	mov	r5, r1
 8000c6e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000c72:	f7ff fbf1 	bl	8000458 <__aeabi_ui2d>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <Cdd_Servo_Init+0x238>)
 8000c7c:	f7ff fab0 	bl	80001e0 <__adddf3>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <Cdd_Servo_Init+0x23c>)
 8000c8e:	f7ff fc5d 	bl	800054c <__aeabi_dmul>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4620      	mov	r0, r4
 8000c98:	4629      	mov	r1, r5
 8000c9a:	f7ff fd81 	bl	80007a0 <__aeabi_ddiv>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <Cdd_Servo_Init+0x238>)
 8000cac:	f7ff fa96 	bl	80001dc <__aeabi_dsub>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f7ff fe5a 	bl	8000970 <__aeabi_d2uiz>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam.TIM_Instance == TIM1)
 8000cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <Cdd_Servo_Init+0x240>)
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d10c      	bne.n	8000ce6 <Cdd_Servo_Init+0x1d2>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000cd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	e04b      	b.n	8000d7e <Cdd_Servo_Init+0x26a>
	}
	else if(SERVO_CfgParam.TIM_Instance == TIM2)
 8000ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cee:	d10c      	bne.n	8000d0a <Cdd_Servo_Init+0x1f6>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	61d3      	str	r3, [r2, #28]
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	e039      	b.n	8000d7e <Cdd_Servo_Init+0x26a>
	}
	else if(SERVO_CfgParam.TIM_Instance == TIM3)
 8000d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <Cdd_Servo_Init+0x244>)
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d123      	bne.n	8000d5c <Cdd_Servo_Init+0x248>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	61d3      	str	r3, [r2, #28]
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <Cdd_Servo_Init+0x21c>)
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	e027      	b.n	8000d7e <Cdd_Servo_Init+0x26a>
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	48000c00 	.word	0x48000c00
 8000d40:	48001000 	.word	0x48001000
 8000d44:	044aa200 	.word	0x044aa200
 8000d48:	41490000 	.word	0x41490000
 8000d4c:	3ff00000 	.word	0x3ff00000
 8000d50:	40490000 	.word	0x40490000
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam.TIM_Instance == TIM4)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d60:	4b4e      	ldr	r3, [pc, #312]	; (8000e9c <Cdd_Servo_Init+0x388>)
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d10b      	bne.n	8000d7e <Cdd_Servo_Init+0x26a>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <Cdd_Servo_Init+0x38c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <Cdd_Servo_Init+0x38c>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <Cdd_Servo_Init+0x38c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
	}

	htim.Instance = SERVO_CfgParam.TIM_Instance;
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Prescaler = PSC_Value;
 8000d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Period = ARR_Value;
 8000d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_Base_Init(&htim);
 8000d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fdd2 	bl	800294a <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000dae:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fa2d 	bl	8003218 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fe88 	bl	8002ad8 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000dd4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 ff5e 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de4:	2360      	movs	r3, #96	; 0x60
 8000de6:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dec:	2300      	movs	r3, #0
 8000dee:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam.PWM_TIM_CH);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 f8f5 	bl	8002ff0 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info.Period_Min = (uint16) (ARR_Value * (SERVO_CfgParam.MinPulse/20.0));
 8000e06:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000e0a:	f7ff fb25 	bl	8000458 <__aeabi_ui2d>
 8000e0e:	4604      	mov	r4, r0
 8000e10:	460d      	mov	r5, r1
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fb40 	bl	800049c <__aeabi_f2d>
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <Cdd_Servo_Init+0x390>)
 8000e22:	f7ff fcbd 	bl	80007a0 <__aeabi_ddiv>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	f7ff fb8d 	bl	800054c <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fd99 	bl	8000970 <__aeabi_d2uiz>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <Cdd_Servo_Init+0x394>)
 8000e44:	801a      	strh	r2, [r3, #0]
	gs_SERVO_info.Period_Max = (uint16) (ARR_Value * (SERVO_CfgParam.MaxPulse/20.0));
 8000e46:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000e4a:	f7ff fb05 	bl	8000458 <__aeabi_ui2d>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	460d      	mov	r5, r1
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <Cdd_Servo_Init+0x398>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fb21 	bl	800049c <__aeabi_f2d>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <Cdd_Servo_Init+0x390>)
 8000e60:	f7ff fc9e 	bl	80007a0 <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4620      	mov	r0, r4
 8000e6a:	4629      	mov	r1, r5
 8000e6c:	f7ff fb6e 	bl	800054c <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f7ff fd7a 	bl	8000970 <__aeabi_d2uiz>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <Cdd_Servo_Init+0x394>)
 8000e82:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam.PWM_TIM_CH);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fe83 	bl	8002b98 <HAL_TIM_PWM_Start>
}
 8000e92:	bf00      	nop
 8000e94:	37c8      	adds	r7, #200	; 0xc8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000800 	.word	0x40000800
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40340000 	.word	0x40340000
 8000ea8:	20000034 	.word	0x20000034
 8000eac:	41a00000 	.word	0x41a00000

08000eb0 <Cdd_Servo_RawMove>:
	*(SERVO_CfgParam.TIM_CCRx) = Pulse;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= gs_SERVO_info.Period_Max && Pulse >= gs_SERVO_info.Period_Min)
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <Cdd_Servo_RawMove+0x30>)
 8000ebc:	885b      	ldrh	r3, [r3, #2]
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d807      	bhi.n	8000ed4 <Cdd_Servo_RawMove+0x24>
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <Cdd_Servo_RawMove+0x30>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d302      	bcc.n	8000ed4 <Cdd_Servo_RawMove+0x24>
	{
		*(SERVO_CfgParam.TIM_CCRx) = Pulse;
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <Cdd_Servo_RawMove+0x34>)
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	6013      	str	r3, [r2, #0]
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000034 	.word	0x20000034
 8000ee4:	40000034 	.word	0x40000034

08000ee8 <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(Angle--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0a2      	sub	sp, #136	; 0x88
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __IO uint32_t wait_loop_index = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e210      	b.n	8001380 <HAL_ADC_Init+0x444>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f040 808e 	bne.w	800108e <HAL_ADC_Init+0x152>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d169      	bne.n	800104e <HAL_ADC_Init+0x112>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a92      	ldr	r2, [pc, #584]	; (80011e0 <HAL_ADC_Init+0x2a4>)
 8000f98:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a91      	ldr	r2, [pc, #580]	; (80011e4 <HAL_ADC_Init+0x2a8>)
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a91      	ldr	r2, [pc, #580]	; (80011e8 <HAL_ADC_Init+0x2ac>)
 8000fa4:	659a      	str	r2, [r3, #88]	; 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a90      	ldr	r2, [pc, #576]	; (80011ec <HAL_ADC_Init+0x2b0>)
 8000faa:	65da      	str	r2, [r3, #92]	; 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a90      	ldr	r2, [pc, #576]	; (80011f0 <HAL_ADC_Init+0x2b4>)
 8000fb0:	661a      	str	r2, [r3, #96]	; 0x60
    
    if (hadc->MspInitCallback == NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <HAL_ADC_Init+0x84>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a8d      	ldr	r2, [pc, #564]	; (80011f4 <HAL_ADC_Init+0x2b8>)
 8000fbe:	665a      	str	r2, [r3, #100]	; 0x64
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d13b      	bne.n	800104e <HAL_ADC_Init+0x112>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f001 f8f4 	bl	80021c4 <ADC_Disable>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d12f      	bne.n	800104e <HAL_ADC_Init+0x112>
 8000fee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d12b      	bne.n	800104e <HAL_ADC_Init+0x112>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ffe:	f023 0302 	bic.w	r3, r3, #2
 8001002:	f043 0202 	orr.w	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001018:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001028:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800102a:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <HAL_ADC_Init+0x2bc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a73      	ldr	r2, [pc, #460]	; (80011fc <HAL_ADC_Init+0x2c0>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9a      	lsrs	r2, r3, #18
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001040:	e002      	b.n	8001048 <HAL_ADC_Init+0x10c>
          {
            wait_loop_index--;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f9      	bne.n	8001042 <HAL_ADC_Init+0x106>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800106a:	d110      	bne.n	800108e <HAL_ADC_Init+0x152>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f023 0312 	bic.w	r3, r3, #18
 8001074:	f043 0210 	orr.w	r2, r3, #16
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	f043 0201 	orr.w	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 8165 	bne.w	8001366 <HAL_ADC_Init+0x42a>
 800109c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f040 8160 	bne.w	8001366 <HAL_ADC_Init+0x42a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f040 8158 	bne.w	8001366 <HAL_ADC_Init+0x42a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010be:	f043 0202 	orr.w	r2, r3, #2
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ce:	d004      	beq.n	80010da <HAL_ADC_Init+0x19e>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <HAL_ADC_Init+0x2c4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Init+0x1a2>
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_ADC_Init+0x2c8>)
 80010dc:	e000      	b.n	80010e0 <HAL_ADC_Init+0x1a4>
 80010de:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <HAL_ADC_Init+0x2cc>)
 80010e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ea:	d102      	bne.n	80010f2 <HAL_ADC_Init+0x1b6>
 80010ec:	4b44      	ldr	r3, [pc, #272]	; (8001200 <HAL_ADC_Init+0x2c4>)
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e01a      	b.n	8001128 <HAL_ADC_Init+0x1ec>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <HAL_ADC_Init+0x2c4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d103      	bne.n	8001104 <HAL_ADC_Init+0x1c8>
 80010fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	e011      	b.n	8001128 <HAL_ADC_Init+0x1ec>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <HAL_ADC_Init+0x2d0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d102      	bne.n	8001114 <HAL_ADC_Init+0x1d8>
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <HAL_ADC_Init+0x2d4>)
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	e009      	b.n	8001128 <HAL_ADC_Init+0x1ec>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a3d      	ldr	r2, [pc, #244]	; (8001210 <HAL_ADC_Init+0x2d4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d102      	bne.n	8001124 <HAL_ADC_Init+0x1e8>
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_ADC_Init+0x2d0>)
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	e001      	b.n	8001128 <HAL_ADC_Init+0x1ec>
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d108      	bne.n	8001148 <HAL_ADC_Init+0x20c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_ADC_Init+0x20c>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_ADC_Init+0x20e>
 8001148:	2300      	movs	r3, #0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d11c      	bne.n	8001188 <HAL_ADC_Init+0x24c>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800114e:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001150:	2b00      	cmp	r3, #0
 8001152:	d010      	beq.n	8001176 <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d107      	bne.n	8001170 <HAL_ADC_Init+0x234>
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADC_Init+0x234>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_ADC_Init+0x236>
 8001170:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <HAL_ADC_Init+0x24c>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	431a      	orrs	r2, r3
 8001184:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001186:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e5b      	ldrb	r3, [r3, #25]
 800118c:	035b      	lsls	r3, r3, #13
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001192:	2a01      	cmp	r2, #1
 8001194:	d002      	beq.n	800119c <HAL_ADC_Init+0x260>
 8001196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800119a:	e000      	b.n	800119e <HAL_ADC_Init+0x262>
 800119c:	2200      	movs	r2, #0
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80011b0:	4313      	orrs	r3, r2
 80011b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d137      	bne.n	8001230 <HAL_ADC_Init+0x2f4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e5b      	ldrb	r3, [r3, #25]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d125      	bne.n	8001214 <HAL_ADC_Init+0x2d8>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	3b01      	subs	r3, #1
 80011ce:	045a      	lsls	r2, r3, #17
 80011d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011d4:	4313      	orrs	r3, r2
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011de:	e027      	b.n	8001230 <HAL_ADC_Init+0x2f4>
 80011e0:	08000ef5 	.word	0x08000ef5
 80011e4:	08000f07 	.word	0x08000f07
 80011e8:	08000f19 	.word	0x08000f19
 80011ec:	08000f2b 	.word	0x08000f2b
 80011f0:	080019bd 	.word	0x080019bd
 80011f4:	080044ed 	.word	0x080044ed
 80011f8:	20000000 	.word	0x20000000
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	50000100 	.word	0x50000100
 8001204:	50000300 	.word	0x50000300
 8001208:	50000700 	.word	0x50000700
 800120c:	50000400 	.word	0x50000400
 8001210:	50000500 	.word	0x50000500
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800121c:	f043 0220 	orr.w	r2, r3, #32
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	f043 0201 	orr.w	r2, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	2b01      	cmp	r3, #1
 8001236:	d048      	beq.n	80012ca <HAL_ADC_Init+0x38e>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_ADC_Init+0x44c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d004      	beq.n	800124c <HAL_ADC_Init+0x310>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_ADC_Init+0x450>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d132      	bne.n	80012b2 <HAL_ADC_Init+0x376>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001254:	d02a      	beq.n	80012ac <HAL_ADC_Init+0x370>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125e:	d022      	beq.n	80012a6 <HAL_ADC_Init+0x36a>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001268:	d01a      	beq.n	80012a0 <HAL_ADC_Init+0x364>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001272:	d012      	beq.n	800129a <HAL_ADC_Init+0x35e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800127c:	d00a      	beq.n	8001294 <HAL_ADC_Init+0x358>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001286:	d002      	beq.n	800128e <HAL_ADC_Init+0x352>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	e015      	b.n	80012ba <HAL_ADC_Init+0x37e>
 800128e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001292:	e012      	b.n	80012ba <HAL_ADC_Init+0x37e>
 8001294:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001298:	e00f      	b.n	80012ba <HAL_ADC_Init+0x37e>
 800129a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800129e:	e00c      	b.n	80012ba <HAL_ADC_Init+0x37e>
 80012a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a4:	e009      	b.n	80012ba <HAL_ADC_Init+0x37e>
 80012a6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012aa:	e006      	b.n	80012ba <HAL_ADC_Init+0x37e>
 80012ac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012b0:	e003      	b.n	80012ba <HAL_ADC_Init+0x37e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012be:	4313      	orrs	r3, r2
 80012c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80012c4:	4313      	orrs	r3, r2
 80012c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d116      	bne.n	8001306 <HAL_ADC_Init+0x3ca>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012e6:	f023 0302 	bic.w	r3, r3, #2
 80012ea:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e1b      	ldrb	r3, [r3, #24]
 80012f0:	039a      	lsls	r2, r3, #14
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001300:	4313      	orrs	r3, r2
 8001302:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_ADC_Init+0x454>)
 800130e:	4013      	ands	r3, r2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001318:	430b      	orrs	r3, r1
 800131a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d10c      	bne.n	800133e <HAL_ADC_Init+0x402>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f023 010f 	bic.w	r1, r3, #15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	1e5a      	subs	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
 800133c:	e007      	b.n	800134e <HAL_ADC_Init+0x412>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 020f 	bic.w	r2, r2, #15
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f023 0303 	bic.w	r3, r3, #3
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
 8001364:	e00a      	b.n	800137c <HAL_ADC_Init+0x440>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f023 0312 	bic.w	r3, r3, #18
 800136e:	f043 0210 	orr.w	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001376:	2301      	movs	r3, #1
 8001378:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800137c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8001380:	4618      	mov	r0, r3
 8001382:	3788      	adds	r7, #136	; 0x88
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	50000400 	.word	0x50000400
 800138c:	50000500 	.word	0x50000500
 8001390:	fff0c007 	.word	0xfff0c007

08001394 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d106      	bne.n	80013c4 <HAL_ADC_IRQHandler+0x30>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d00f      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	f040 80c1 	bne.w	8001556 <HAL_ADC_IRQHandler+0x1c2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b08      	cmp	r3, #8
 80013e0:	f040 80b9 	bne.w	8001556 <HAL_ADC_IRQHandler+0x1c2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001404:	d004      	beq.n	8001410 <HAL_ADC_IRQHandler+0x7c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a8f      	ldr	r2, [pc, #572]	; (8001648 <HAL_ADC_IRQHandler+0x2b4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d106      	bne.n	800141e <HAL_ADC_IRQHandler+0x8a>
 8001410:	4b8e      	ldr	r3, [pc, #568]	; (800164c <HAL_ADC_IRQHandler+0x2b8>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 031f 	and.w	r3, r3, #31
 8001418:	2b00      	cmp	r3, #0
 800141a:	d03e      	beq.n	800149a <HAL_ADC_IRQHandler+0x106>
 800141c:	e005      	b.n	800142a <HAL_ADC_IRQHandler+0x96>
 800141e:	4b8c      	ldr	r3, [pc, #560]	; (8001650 <HAL_ADC_IRQHandler+0x2bc>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	2b00      	cmp	r3, #0
 8001428:	d037      	beq.n	800149a <HAL_ADC_IRQHandler+0x106>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001432:	d004      	beq.n	800143e <HAL_ADC_IRQHandler+0xaa>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a83      	ldr	r2, [pc, #524]	; (8001648 <HAL_ADC_IRQHandler+0x2b4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d106      	bne.n	800144c <HAL_ADC_IRQHandler+0xb8>
 800143e:	4b83      	ldr	r3, [pc, #524]	; (800164c <HAL_ADC_IRQHandler+0x2b8>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	2b05      	cmp	r3, #5
 8001448:	d027      	beq.n	800149a <HAL_ADC_IRQHandler+0x106>
 800144a:	e005      	b.n	8001458 <HAL_ADC_IRQHandler+0xc4>
 800144c:	4b80      	ldr	r3, [pc, #512]	; (8001650 <HAL_ADC_IRQHandler+0x2bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2b05      	cmp	r3, #5
 8001456:	d020      	beq.n	800149a <HAL_ADC_IRQHandler+0x106>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001460:	d004      	beq.n	800146c <HAL_ADC_IRQHandler+0xd8>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a78      	ldr	r2, [pc, #480]	; (8001648 <HAL_ADC_IRQHandler+0x2b4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d106      	bne.n	800147a <HAL_ADC_IRQHandler+0xe6>
 800146c:	4b77      	ldr	r3, [pc, #476]	; (800164c <HAL_ADC_IRQHandler+0x2b8>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	2b09      	cmp	r3, #9
 8001476:	d010      	beq.n	800149a <HAL_ADC_IRQHandler+0x106>
 8001478:	e005      	b.n	8001486 <HAL_ADC_IRQHandler+0xf2>
 800147a:	4b75      	ldr	r3, [pc, #468]	; (8001650 <HAL_ADC_IRQHandler+0x2bc>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	2b09      	cmp	r3, #9
 8001484:	d009      	beq.n	800149a <HAL_ADC_IRQHandler+0x106>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800148e:	d004      	beq.n	800149a <HAL_ADC_IRQHandler+0x106>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a6f      	ldr	r2, [pc, #444]	; (8001654 <HAL_ADC_IRQHandler+0x2c0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d104      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e00f      	b.n	80014c4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ac:	d004      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x124>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_ADC_IRQHandler+0x2b4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d102      	bne.n	80014be <HAL_ADC_IRQHandler+0x12a>
 80014b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014bc:	e000      	b.n	80014c0 <HAL_ADC_IRQHandler+0x12c>
 80014be:	4b65      	ldr	r3, [pc, #404]	; (8001654 <HAL_ADC_IRQHandler+0x2c0>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d139      	bne.n	8001546 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d134      	bne.n	8001546 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d12d      	bne.n	8001546 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d11a      	bne.n	800152e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 020c 	bic.w	r2, r2, #12
 8001506:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d112      	bne.n	8001546 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	641a      	str	r2, [r3, #64]	; 0x40
 800152c:	e00b      	b.n	8001546 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f043 0210 	orr.w	r2, r3, #16
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b20      	cmp	r3, #32
 8001562:	d106      	bne.n	8001572 <HAL_ADC_IRQHandler+0x1de>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b20      	cmp	r3, #32
 8001570:	d00f      	beq.n	8001592 <HAL_ADC_IRQHandler+0x1fe>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	f040 8145 	bne.w	800180c <HAL_ADC_IRQHandler+0x478>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158c:	2b40      	cmp	r3, #64	; 0x40
 800158e:	f040 813d 	bne.w	800180c <HAL_ADC_IRQHandler+0x478>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x21e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a26      	ldr	r2, [pc, #152]	; (8001648 <HAL_ADC_IRQHandler+0x2b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d106      	bne.n	80015c0 <HAL_ADC_IRQHandler+0x22c>
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_ADC_IRQHandler+0x2b8>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03e      	beq.n	800163c <HAL_ADC_IRQHandler+0x2a8>
 80015be:	e005      	b.n	80015cc <HAL_ADC_IRQHandler+0x238>
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_ADC_IRQHandler+0x2bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d037      	beq.n	800163c <HAL_ADC_IRQHandler+0x2a8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_IRQHandler+0x24c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <HAL_ADC_IRQHandler+0x2b4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d106      	bne.n	80015ee <HAL_ADC_IRQHandler+0x25a>
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_ADC_IRQHandler+0x2b8>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d027      	beq.n	800163c <HAL_ADC_IRQHandler+0x2a8>
 80015ec:	e005      	b.n	80015fa <HAL_ADC_IRQHandler+0x266>
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_ADC_IRQHandler+0x2bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d020      	beq.n	800163c <HAL_ADC_IRQHandler+0x2a8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001602:	d004      	beq.n	800160e <HAL_ADC_IRQHandler+0x27a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_ADC_IRQHandler+0x2b4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d106      	bne.n	800161c <HAL_ADC_IRQHandler+0x288>
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_ADC_IRQHandler+0x2b8>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	2b09      	cmp	r3, #9
 8001618:	d010      	beq.n	800163c <HAL_ADC_IRQHandler+0x2a8>
 800161a:	e005      	b.n	8001628 <HAL_ADC_IRQHandler+0x294>
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_ADC_IRQHandler+0x2bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	2b09      	cmp	r3, #9
 8001626:	d009      	beq.n	800163c <HAL_ADC_IRQHandler+0x2a8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001630:	d004      	beq.n	800163c <HAL_ADC_IRQHandler+0x2a8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_ADC_IRQHandler+0x2c0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d10d      	bne.n	8001658 <HAL_ADC_IRQHandler+0x2c4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	e018      	b.n	8001678 <HAL_ADC_IRQHandler+0x2e4>
 8001646:	bf00      	nop
 8001648:	50000100 	.word	0x50000100
 800164c:	50000300 	.word	0x50000300
 8001650:	50000700 	.word	0x50000700
 8001654:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001660:	d004      	beq.n	800166c <HAL_ADC_IRQHandler+0x2d8>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a5b      	ldr	r2, [pc, #364]	; (80017d4 <HAL_ADC_IRQHandler+0x440>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <HAL_ADC_IRQHandler+0x2de>
 800166c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001670:	e000      	b.n	8001674 <HAL_ADC_IRQHandler+0x2e0>
 8001672:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <HAL_ADC_IRQHandler+0x444>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80ba 	bne.w	80017fc <HAL_ADC_IRQHandler+0x468>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00d      	beq.n	80016ae <HAL_ADC_IRQHandler+0x31a>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 80ad 	bne.w	80017fc <HAL_ADC_IRQHandler+0x468>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 80a7 	bne.w	80017fc <HAL_ADC_IRQHandler+0x468>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	2b40      	cmp	r3, #64	; 0x40
 80016ba:	f040 809f 	bne.w	80017fc <HAL_ADC_IRQHandler+0x468>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c6:	d004      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x33e>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <HAL_ADC_IRQHandler+0x440>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d106      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x34c>
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_ADC_IRQHandler+0x448>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d03e      	beq.n	800175c <HAL_ADC_IRQHandler+0x3c8>
 80016de:	e005      	b.n	80016ec <HAL_ADC_IRQHandler+0x358>
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <HAL_ADC_IRQHandler+0x44c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d037      	beq.n	800175c <HAL_ADC_IRQHandler+0x3c8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f4:	d004      	beq.n	8001700 <HAL_ADC_IRQHandler+0x36c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <HAL_ADC_IRQHandler+0x440>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d106      	bne.n	800170e <HAL_ADC_IRQHandler+0x37a>
 8001700:	4b36      	ldr	r3, [pc, #216]	; (80017dc <HAL_ADC_IRQHandler+0x448>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2b06      	cmp	r3, #6
 800170a:	d027      	beq.n	800175c <HAL_ADC_IRQHandler+0x3c8>
 800170c:	e005      	b.n	800171a <HAL_ADC_IRQHandler+0x386>
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_ADC_IRQHandler+0x44c>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2b06      	cmp	r3, #6
 8001718:	d020      	beq.n	800175c <HAL_ADC_IRQHandler+0x3c8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001722:	d004      	beq.n	800172e <HAL_ADC_IRQHandler+0x39a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <HAL_ADC_IRQHandler+0x440>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d106      	bne.n	800173c <HAL_ADC_IRQHandler+0x3a8>
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_ADC_IRQHandler+0x448>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2b07      	cmp	r3, #7
 8001738:	d010      	beq.n	800175c <HAL_ADC_IRQHandler+0x3c8>
 800173a:	e005      	b.n	8001748 <HAL_ADC_IRQHandler+0x3b4>
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_ADC_IRQHandler+0x44c>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2b07      	cmp	r3, #7
 8001746:	d009      	beq.n	800175c <HAL_ADC_IRQHandler+0x3c8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001750:	d004      	beq.n	800175c <HAL_ADC_IRQHandler+0x3c8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_ADC_IRQHandler+0x444>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d104      	bne.n	8001766 <HAL_ADC_IRQHandler+0x3d2>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e00f      	b.n	8001786 <HAL_ADC_IRQHandler+0x3f2>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176e:	d004      	beq.n	800177a <HAL_ADC_IRQHandler+0x3e6>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_ADC_IRQHandler+0x440>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d102      	bne.n	8001780 <HAL_ADC_IRQHandler+0x3ec>
 800177a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800177e:	e000      	b.n	8001782 <HAL_ADC_IRQHandler+0x3ee>
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_ADC_IRQHandler+0x444>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d135      	bne.n	80017fc <HAL_ADC_IRQHandler+0x468>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d122      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x450>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017ac:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11a      	bne.n	80017fc <HAL_ADC_IRQHandler+0x468>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
 80017d2:	e013      	b.n	80017fc <HAL_ADC_IRQHandler+0x468>
 80017d4:	50000100 	.word	0x50000100
 80017d8:	50000400 	.word	0x50000400
 80017dc:	50000300 	.word	0x50000300
 80017e0:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0210 	orr.w	r2, r3, #16
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f043 0201 	orr.w	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2260      	movs	r2, #96	; 0x60
 800180a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	2b80      	cmp	r3, #128	; 0x80
 8001818:	d114      	bne.n	8001844 <HAL_ADC_IRQHandler+0x4b0>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001824:	2b80      	cmp	r3, #128	; 0x80
 8001826:	d10d      	bne.n	8001844 <HAL_ADC_IRQHandler+0x4b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001852:	d115      	bne.n	8001880 <HAL_ADC_IRQHandler+0x4ec>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001862:	d10d      	bne.n	8001880 <HAL_ADC_IRQHandler+0x4ec>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f8b5 	bl	80019e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800188a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188e:	d115      	bne.n	80018bc <HAL_ADC_IRQHandler+0x528>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189e:	d10d      	bne.n	80018bc <HAL_ADC_IRQHandler+0x528>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8a0 	bl	80019f2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ba:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b10      	cmp	r3, #16
 80018c8:	d14a      	bne.n	8001960 <HAL_ADC_IRQHandler+0x5cc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d143      	bne.n	8001960 <HAL_ADC_IRQHandler+0x5cc>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d102      	bne.n	80018e6 <HAL_ADC_IRQHandler+0x552>
    {
      overrun_error = 1U;
 80018e0:	2301      	movs	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e025      	b.n	8001932 <HAL_ADC_IRQHandler+0x59e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ee:	d004      	beq.n	80018fa <HAL_ADC_IRQHandler+0x566>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2e      	ldr	r2, [pc, #184]	; (80019b0 <HAL_ADC_IRQHandler+0x61c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_IRQHandler+0x56a>
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_ADC_IRQHandler+0x620>)
 80018fc:	e000      	b.n	8001900 <HAL_ADC_IRQHandler+0x56c>
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_ADC_IRQHandler+0x624>)
 8001900:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_ADC_IRQHandler+0x58e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10a      	bne.n	8001932 <HAL_ADC_IRQHandler+0x59e>
        {
          overrun_error = 1U;  
 800191c:	2301      	movs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e007      	b.n	8001932 <HAL_ADC_IRQHandler+0x59e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_ADC_IRQHandler+0x59e>
        {
          overrun_error = 1U;  
 800192e:	2301      	movs	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d10f      	bne.n	8001958 <HAL_ADC_IRQHandler+0x5c4>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f043 0202 	orr.w	r2, r3, #2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196e:	d11b      	bne.n	80019a8 <HAL_ADC_IRQHandler+0x614>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d113      	bne.n	80019a8 <HAL_ADC_IRQHandler+0x614>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f043 0208 	orr.w	r2, r3, #8
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f813 	bl	80019ce <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	50000100 	.word	0x50000100
 80019b4:	50000300 	.word	0x50000300
 80019b8:	50000700 	.word	0x50000700

080019bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b0a3      	sub	sp, #140	; 0x8c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x22>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e2ce      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x5c0>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 82b2 	bne.w	8001fa2 <HAL_ADC_ConfigChannel+0x59e>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d81c      	bhi.n	8001a80 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	461a      	mov	r2, r3
 8001a5a:	231f      	movs	r3, #31
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4019      	ands	r1, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa00 f203 	lsl.w	r2, r0, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7e:	e063      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	d81e      	bhi.n	8001ac6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	3b1e      	subs	r3, #30
 8001a9c:	221f      	movs	r2, #31
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4019      	ands	r1, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	3b1e      	subs	r3, #30
 8001ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac4:	e040      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b0e      	cmp	r3, #14
 8001acc:	d81e      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	3b3c      	subs	r3, #60	; 0x3c
 8001ae2:	221f      	movs	r2, #31
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4019      	ands	r1, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	3b3c      	subs	r3, #60	; 0x3c
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38
 8001b0a:	e01d      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	3b5a      	subs	r3, #90	; 0x5a
 8001b20:	221f      	movs	r2, #31
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4019      	ands	r1, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	3b5a      	subs	r3, #90	; 0x5a
 8001b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 80e9 	bne.w	8001d2a <HAL_ADC_ConfigChannel+0x326>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d91c      	bls.n	8001b9a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6999      	ldr	r1, [r3, #24]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4019      	ands	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6898      	ldr	r0, [r3, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b1e      	subs	r3, #30
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	619a      	str	r2, [r3, #24]
 8001b98:	e019      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6959      	ldr	r1, [r3, #20]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4019      	ands	r1, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6898      	ldr	r0, [r3, #8]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d852      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0x294>
 8001bf2:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf8:	08001c09 	.word	0x08001c09
 8001bfc:	08001c2d 	.word	0x08001c2d
 8001c00:	08001c51 	.word	0x08001c51
 8001c04:	08001c75 	.word	0x08001c75
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c0e:	4b9c      	ldr	r3, [pc, #624]	; (8001e80 <HAL_ADC_ConfigChannel+0x47c>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	0691      	lsls	r1, r2, #26
 8001c18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c28:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c2a:	e081      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c32:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <HAL_ADC_ConfigChannel+0x47c>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	0691      	lsls	r1, r2, #26
 8001c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c40:	430a      	orrs	r2, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c4c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c4e:	e06f      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x32c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c56:	4b8a      	ldr	r3, [pc, #552]	; (8001e80 <HAL_ADC_ConfigChannel+0x47c>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	0691      	lsls	r1, r2, #26
 8001c60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c64:	430a      	orrs	r2, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c70:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c72:	e05d      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c7a:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_ADC_ConfigChannel+0x47c>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	0691      	lsls	r1, r2, #26
 8001c84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c94:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c96:	e04b      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x32c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	069b      	lsls	r3, r3, #26
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x2b8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d107      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x2dc>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cde:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	069b      	lsls	r3, r3, #26
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x300>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d02:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	069b      	lsls	r3, r3, #26
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d10a      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x32a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d26:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d28:	e001      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x32a>
    }

  }
 8001d2a:	bf00      	nop
 8001d2c:	e000      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x32c>
      break;
 8001d2e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x34c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x34c>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x34e>
 8001d50:	2300      	movs	r3, #0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8130 	bne.w	8001fb8 <HAL_ADC_ConfigChannel+0x5b4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d00f      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x37c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	400a      	ands	r2, r1
 8001d7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d7e:	e049      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x410>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b09      	cmp	r3, #9
 8001da0:	d91c      	bls.n	8001ddc <HAL_ADC_ConfigChannel+0x3d8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6999      	ldr	r1, [r3, #24]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	3b1b      	subs	r3, #27
 8001db4:	2207      	movs	r2, #7
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4019      	ands	r1, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6898      	ldr	r0, [r3, #8]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b1b      	subs	r3, #27
 8001dce:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	619a      	str	r2, [r3, #24]
 8001dda:	e01b      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x410>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6959      	ldr	r1, [r3, #20]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	2207      	movs	r2, #7
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4019      	ands	r1, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6898      	ldr	r0, [r3, #8]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1c:	d004      	beq.n	8001e28 <HAL_ADC_ConfigChannel+0x424>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_ADC_ConfigChannel+0x480>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x428>
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_ADC_ConfigChannel+0x484>)
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x42a>
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_ADC_ConfigChannel+0x488>)
 8001e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b10      	cmp	r3, #16
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x440>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d015      	beq.n	8001e70 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e48:	2b11      	cmp	r3, #17
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x454>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e5c:	2b12      	cmp	r3, #18
 8001e5e:	f040 80ab 	bne.w	8001fb8 <HAL_ADC_ConfigChannel+0x5b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 80a4 	bne.w	8001fb8 <HAL_ADC_ConfigChannel+0x5b4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x48c>
 8001e7a:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_ADC_ConfigChannel+0x480>)
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e022      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x4c2>
 8001e80:	83fff000 	.word	0x83fff000
 8001e84:	50000100 	.word	0x50000100
 8001e88:	50000300 	.word	0x50000300
 8001e8c:	50000700 	.word	0x50000700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a4e      	ldr	r2, [pc, #312]	; (8001fd0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d103      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x49e>
 8001e9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e011      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x4c2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d102      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x4ae>
 8001eac:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <HAL_ADC_ConfigChannel+0x5d4>)
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e009      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x4c2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <HAL_ADC_ConfigChannel+0x5d4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d102      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x4be>
 8001ebc:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e001      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x4c2>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x4e2>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x4e2>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x4e4>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d150      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x58a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001eec:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d010      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0x510>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x50a>
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x50a>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x50c>
 8001f0e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d13c      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x58a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d11d      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x554>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f24:	d118      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x554>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f30:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_ADC_ConfigChannel+0x5d8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <HAL_ADC_ConfigChannel+0x5dc>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	0c9a      	lsrs	r2, r3, #18
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001f48:	e002      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x54c>
          {
            wait_loop_index--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f9      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x546>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f56:	e02e      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x5b2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b11      	cmp	r3, #17
 8001f5e:	d10b      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x574>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x574>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f74:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f76:	e01e      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x5b2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b12      	cmp	r3, #18
 8001f7e:	d11a      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x5b2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f8a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f8c:	e013      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x5b2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f043 0220 	orr.w	r2, r3, #32
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001fa0:	e00a      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x5b4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x5b4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fb6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fc0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	378c      	adds	r7, #140	; 0x8c
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	50000100 	.word	0x50000100
 8001fd4:	50000400 	.word	0x50000400
 8001fd8:	50000500 	.word	0x50000500
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b0a1      	sub	sp, #132	; 0x84
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffc:	d102      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ffe:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e01a      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a69      	ldr	r2, [pc, #420]	; (80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d103      	bne.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800200e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e011      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a66      	ldr	r2, [pc, #408]	; (80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d102      	bne.n	8002026 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002020:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e009      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d102      	bne.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002030:	4b60      	ldr	r3, [pc, #384]	; (80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e001      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b0      	b.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800204e:	2302      	movs	r3, #2
 8002050:	e0a9      	b.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 808d 	bne.w	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8086 	bne.w	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002080:	d004      	beq.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800208e:	e000      	b.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002092:	67bb      	str	r3, [r7, #120]	; 0x78
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d040      	beq.n	800211e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800209c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ae:	035b      	lsls	r3, r3, #13
 80020b0:	430b      	orrs	r3, r1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80020d8:	2300      	movs	r3, #0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d15c      	bne.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80020fa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d14b      	bne.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002108:	f023 030f 	bic.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	6811      	ldr	r1, [r2, #0]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	6892      	ldr	r2, [r2, #8]
 8002114:	430a      	orrs	r2, r1
 8002116:	431a      	orrs	r2, r3
 8002118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800211a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800211c:	e03c      	b.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800211e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002128:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d108      	bne.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800214a:	2300      	movs	r3, #0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d123      	bne.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800216c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d112      	bne.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800217a:	f023 030f 	bic.w	r3, r3, #15
 800217e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002180:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002182:	e009      	b.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002196:	e000      	b.n	800219a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002198:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
} 
 80021a6:	4618      	mov	r0, r3
 80021a8:	3784      	adds	r7, #132	; 0x84
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	50000100 	.word	0x50000100
 80021b4:	50000400 	.word	0x50000400
 80021b8:	50000500 	.word	0x50000500
 80021bc:	50000300 	.word	0x50000300
 80021c0:	50000700 	.word	0x50000700

080021c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d108      	bne.n	80021f0 <ADC_Disable+0x2c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <ADC_Disable+0x2c>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <ADC_Disable+0x2e>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d047      	beq.n	8002286 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030d 	and.w	r3, r3, #13
 8002200:	2b01      	cmp	r3, #1
 8002202:	d10f      	bne.n	8002224 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0202 	orr.w	r2, r2, #2
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2203      	movs	r2, #3
 800221a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800221c:	f002 f82c 	bl	8004278 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002222:	e029      	b.n	8002278 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f043 0210 	orr.w	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e023      	b.n	8002288 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002240:	f002 f81a 	bl	8004278 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d914      	bls.n	8002278 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10d      	bne.n	8002278 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e007      	b.n	8002288 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d0dc      	beq.n	8002240 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	e160      	b.n	8002562 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8152 	beq.w	800255c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d005      	beq.n	80022d0 <HAL_GPIO_Init+0x40>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d130      	bne.n	8002332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002306:	2201      	movs	r2, #1
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 0201 	and.w	r2, r3, #1
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b03      	cmp	r3, #3
 800233c:	d017      	beq.n	800236e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d123      	bne.n	80023c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80ac 	beq.w	800255c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002404:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800241c:	4a59      	ldr	r2, [pc, #356]	; (8002584 <HAL_GPIO_Init+0x2f4>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002446:	d025      	beq.n	8002494 <HAL_GPIO_Init+0x204>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4f      	ldr	r2, [pc, #316]	; (8002588 <HAL_GPIO_Init+0x2f8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d01f      	beq.n	8002490 <HAL_GPIO_Init+0x200>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a4e      	ldr	r2, [pc, #312]	; (800258c <HAL_GPIO_Init+0x2fc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d019      	beq.n	800248c <HAL_GPIO_Init+0x1fc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4d      	ldr	r2, [pc, #308]	; (8002590 <HAL_GPIO_Init+0x300>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_GPIO_Init+0x1f8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a4c      	ldr	r2, [pc, #304]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_GPIO_Init+0x1f4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_GPIO_Init+0x308>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <HAL_GPIO_Init+0x1f0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a4a      	ldr	r2, [pc, #296]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_GPIO_Init+0x1ec>
 8002478:	2306      	movs	r3, #6
 800247a:	e00c      	b.n	8002496 <HAL_GPIO_Init+0x206>
 800247c:	2307      	movs	r3, #7
 800247e:	e00a      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002480:	2305      	movs	r3, #5
 8002482:	e008      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002484:	2304      	movs	r3, #4
 8002486:	e006      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002488:	2303      	movs	r3, #3
 800248a:	e004      	b.n	8002496 <HAL_GPIO_Init+0x206>
 800248c:	2302      	movs	r3, #2
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002494:	2300      	movs	r3, #0
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	f002 0203 	and.w	r2, r2, #3
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4093      	lsls	r3, r2
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a6:	4937      	ldr	r1, [pc, #220]	; (8002584 <HAL_GPIO_Init+0x2f4>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002502:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_GPIO_Init+0x310>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_GPIO_Init+0x310>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	f47f ae97 	bne.w	80022a0 <HAL_GPIO_Init+0x10>
  }
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40010000 	.word	0x40010000
 8002588:	48000400 	.word	0x48000400
 800258c:	48000800 	.word	0x48000800
 8002590:	48000c00 	.word	0x48000c00
 8002594:	48001000 	.word	0x48001000
 8002598:	48001400 	.word	0x48001400
 800259c:	48001800 	.word	0x48001800
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	807b      	strh	r3, [r7, #2]
 80025de:	4613      	mov	r3, r2
 80025e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e2:	787b      	ldrb	r3, [r7, #1]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fdc0 	bl	80041a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800263e:	2b02      	cmp	r3, #2
 8002640:	d008      	beq.n	8002654 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2204      	movs	r2, #4
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e020      	b.n	8002696 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 020e 	bic.w	r2, r2, #14
 8002662:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d005      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2204      	movs	r2, #4
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e027      	b.n	8002712 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 020e 	bic.w	r2, r2, #14
 80026d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
    } 
  }
  return status;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <Gpt_Init>:

static void Gpt_TIM3_Init(void);
static void Gpt_Error_Handler(void);

void Gpt_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	Gpt_TIM3_Init();
 8002720:	f000 f8c0 	bl	80028a4 <Gpt_TIM3_Init>
	Gpt_InitDone = 1u;
 8002724:	4b02      	ldr	r3, [pc, #8]	; (8002730 <Gpt_Init+0x14>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200000a0 	.word	0x200000a0

08002734 <Gpt_TIM3_Start_IT>:

void Gpt_TIM3_Start_IT(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	if(1u == Gpt_InitDone)
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <Gpt_TIM3_Start_IT+0x18>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d102      	bne.n	8002746 <Gpt_TIM3_Start_IT+0x12>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <Gpt_TIM3_Start_IT+0x1c>)
 8002742:	f000 f959 	bl	80029f8 <HAL_TIM_Base_Start_IT>
	}
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200000a0 	.word	0x200000a0
 8002750:	20000054 	.word	0x20000054

08002754 <HAL_TIM_PeriodElapsedCallback>:
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	//TODO: Remove and redirect timer callback
	if(tim3_count == 9999)
 800275c:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f242 720f 	movw	r2, #9999	; 0x270f
 8002764:	4293      	cmp	r3, r2
 8002766:	d115      	bne.n	8002794 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim3_count = 0u;
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
		tim3_5count = 0u;
 800276e:	4b44      	ldr	r3, [pc, #272]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
		tim3_10count = 0u;
 8002774:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
		tim3_20count = 0u;
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
		tim3_50count = 0u;
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
		tim3_100count = 0u;
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
		tim3_500count = 0u;
 800278c:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e004      	b.n	800279e <HAL_TIM_PeriodElapsedCallback+0x4a>
	}
	else
	{
		tim3_count++;
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	4a38      	ldr	r2, [pc, #224]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800279c:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 5) == 0u)
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027a4:	fba3 2301 	umull	r2, r3, r3, r1
 80027a8:	089a      	lsrs	r2, r3, #2
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	1aca      	subs	r2, r1, r3
 80027b2:	2a00      	cmp	r2, #0
 80027b4:	d104      	bne.n	80027c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		tim3_5count++;
 80027b6:	4b32      	ldr	r3, [pc, #200]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a30      	ldr	r2, [pc, #192]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80027be:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 10) == 0u)
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027c6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	1aca      	subs	r2, r1, r3
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d104      	bne.n	80027e4 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		tim3_10count++;
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	4a28      	ldr	r2, [pc, #160]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80027e2:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 20) == 0u)
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80027ea:	fba3 2301 	umull	r2, r3, r3, r1
 80027ee:	091a      	lsrs	r2, r3, #4
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	1aca      	subs	r2, r1, r3
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d104      	bne.n	8002808 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		tim3_20count++;
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a20      	ldr	r2, [pc, #128]	; (8002888 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002806:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 50) == 0u)
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800280e:	fba3 1302 	umull	r1, r3, r3, r2
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	2132      	movs	r1, #50	; 0x32
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		tim3_50count++;
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4a19      	ldr	r2, [pc, #100]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002828:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 100) == 0u)
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002830:	fba3 1302 	umull	r1, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	2164      	movs	r1, #100	; 0x64
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_TIM_PeriodElapsedCallback+0xf8>
	{
		tim3_100count++;
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800284a:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 500) == 0u)
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002852:	fba3 1302 	umull	r1, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <HAL_TIM_PeriodElapsedCallback+0x11c>
	{
		tim3_500count++;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800286e:	6013      	str	r3, [r2, #0]
	}
	//HAL_IncTick();
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000038 	.word	0x20000038
 8002880:	2000003c 	.word	0x2000003c
 8002884:	20000040 	.word	0x20000040
 8002888:	20000044 	.word	0x20000044
 800288c:	20000048 	.word	0x20000048
 8002890:	2000004c 	.word	0x2000004c
 8002894:	20000050 	.word	0x20000050
 8002898:	cccccccd 	.word	0xcccccccd
 800289c:	51eb851f 	.word	0x51eb851f
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <Gpt_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void Gpt_TIM3_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <Gpt_TIM3_Init+0x94>)
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <Gpt_TIM3_Init+0x98>)
 80028c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <Gpt_TIM3_Init+0x94>)
 80028ca:	220a      	movs	r2, #10
 80028cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <Gpt_TIM3_Init+0x94>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <Gpt_TIM3_Init+0x94>)
 80028d6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80028da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <Gpt_TIM3_Init+0x94>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <Gpt_TIM3_Init+0x94>)
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028e8:	4813      	ldr	r0, [pc, #76]	; (8002938 <Gpt_TIM3_Init+0x94>)
 80028ea:	f000 f82e 	bl	800294a <HAL_TIM_Base_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <Gpt_TIM3_Init+0x54>
  {
	  Gpt_Error_Handler();
 80028f4:	f000 f824 	bl	8002940 <Gpt_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4619      	mov	r1, r3
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <Gpt_TIM3_Init+0x94>)
 8002906:	f000 fc87 	bl	8003218 <HAL_TIM_ConfigClockSource>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <Gpt_TIM3_Init+0x70>
  {
	  Gpt_Error_Handler();
 8002910:	f000 f816 	bl	8002940 <Gpt_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <Gpt_TIM3_Init+0x94>)
 8002922:	f001 f9bd 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <Gpt_TIM3_Init+0x8c>
  {
	  Gpt_Error_Handler();
 800292c:	f000 f808 	bl	8002940 <Gpt_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000054 	.word	0x20000054
 800293c:	40000400 	.word	0x40000400

08002940 <Gpt_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Gpt_Error_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002944:	b672      	cpsid	i
}
 8002946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002948:	e7fe      	b.n	8002948 <Gpt_Error_Handler+0x8>

0800294a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e049      	b.n	80029f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f001 fe99 	bl	80046a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 fd33 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d001      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e04f      	b.n	8002ab0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a23      	ldr	r2, [pc, #140]	; (8002abc <HAL_TIM_Base_Start_IT+0xc4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x76>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3a:	d018      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x76>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x76>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x76>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x76>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x76>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d115      	bne.n	8002a9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d015      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0xb4>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a86:	d011      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a98:	e008      	b.n	8002aac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40013400 	.word	0x40013400
 8002acc:	40014000 	.word	0x40014000
 8002ad0:	40015000 	.word	0x40015000
 8002ad4:	00010007 	.word	0x00010007

08002ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e049      	b.n	8002b7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f841 	bl	8002b86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 fc6c 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_TIM_PWM_Start+0x24>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e03c      	b.n	8002c36 <HAL_TIM_PWM_Start+0x9e>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d109      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x3e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	e02f      	b.n	8002c36 <HAL_TIM_PWM_Start+0x9e>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d109      	bne.n	8002bf0 <HAL_TIM_PWM_Start+0x58>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e022      	b.n	8002c36 <HAL_TIM_PWM_Start+0x9e>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	d109      	bne.n	8002c0a <HAL_TIM_PWM_Start+0x72>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e015      	b.n	8002c36 <HAL_TIM_PWM_Start+0x9e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d109      	bne.n	8002c24 <HAL_TIM_PWM_Start+0x8c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e008      	b.n	8002c36 <HAL_TIM_PWM_Start+0x9e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0a1      	b.n	8002d82 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_PWM_Start+0xb6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c4c:	e023      	b.n	8002c96 <HAL_TIM_PWM_Start+0xfe>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0xc6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c5c:	e01b      	b.n	8002c96 <HAL_TIM_PWM_Start+0xfe>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xd6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c6c:	e013      	b.n	8002c96 <HAL_TIM_PWM_Start+0xfe>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0xe6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c7c:	e00b      	b.n	8002c96 <HAL_TIM_PWM_Start+0xfe>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_PWM_Start+0xf6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8c:	e003      	b.n	8002c96 <HAL_TIM_PWM_Start+0xfe>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 ffda 	bl	8003c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a38      	ldr	r2, [pc, #224]	; (8002d8c <HAL_TIM_PWM_Start+0x1f4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d018      	beq.n	8002ce0 <HAL_TIM_PWM_Start+0x148>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a37      	ldr	r2, [pc, #220]	; (8002d90 <HAL_TIM_PWM_Start+0x1f8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_TIM_PWM_Start+0x148>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a35      	ldr	r2, [pc, #212]	; (8002d94 <HAL_TIM_PWM_Start+0x1fc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_TIM_PWM_Start+0x148>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a34      	ldr	r2, [pc, #208]	; (8002d98 <HAL_TIM_PWM_Start+0x200>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIM_PWM_Start+0x148>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a32      	ldr	r2, [pc, #200]	; (8002d9c <HAL_TIM_PWM_Start+0x204>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIM_PWM_Start+0x148>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <HAL_TIM_PWM_Start+0x208>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_PWM_Start+0x14c>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_TIM_PWM_Start+0x14e>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_TIM_PWM_Start+0x1f4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d01d      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1a8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0c:	d018      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1a8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_TIM_PWM_Start+0x20c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1a8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_TIM_PWM_Start+0x210>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00e      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1a8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <HAL_TIM_PWM_Start+0x1f8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1a8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_TIM_PWM_Start+0x1fc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1a8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_TIM_PWM_Start+0x208>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d115      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_TIM_PWM_Start+0x214>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d015      	beq.n	8002d7e <HAL_TIM_PWM_Start+0x1e6>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d011      	beq.n	8002d7e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6a:	e008      	b.n	8002d7e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e000      	b.n	8002d80 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40013400 	.word	0x40013400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800
 8002da0:	40015000 	.word	0x40015000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	00010007 	.word	0x00010007

08002db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0202 	mvn.w	r2, #2
 8002ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fae2 	bl	80033bc <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fad5 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fae4 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0204 	mvn.w	r2, #4
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fab8 	bl	80033bc <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 faab 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 faba 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0208 	mvn.w	r2, #8
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2204      	movs	r2, #4
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa8e 	bl	80033bc <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa81 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fa90 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0210 	mvn.w	r2, #16
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2208      	movs	r2, #8
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fa64 	bl	80033bc <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa57 	bl	80033aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa66 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10e      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0201 	mvn.w	r2, #1
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fc10 	bl	8002754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b80      	cmp	r3, #128	; 0x80
 8002f40:	d10e      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d107      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 ff35 	bl	8003dca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d10e      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d107      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 ff27 	bl	8003ddc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d10e      	bne.n	8002fba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d107      	bne.n	8002fba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fa13 	bl	80033e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d10e      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d107      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f06f 0220 	mvn.w	r2, #32
 8002fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fee9 	bl	8003db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800300a:	2302      	movs	r3, #2
 800300c:	e0ff      	b.n	800320e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b14      	cmp	r3, #20
 800301a:	f200 80f0 	bhi.w	80031fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003079 	.word	0x08003079
 8003028:	080031ff 	.word	0x080031ff
 800302c:	080031ff 	.word	0x080031ff
 8003030:	080031ff 	.word	0x080031ff
 8003034:	080030b9 	.word	0x080030b9
 8003038:	080031ff 	.word	0x080031ff
 800303c:	080031ff 	.word	0x080031ff
 8003040:	080031ff 	.word	0x080031ff
 8003044:	080030fb 	.word	0x080030fb
 8003048:	080031ff 	.word	0x080031ff
 800304c:	080031ff 	.word	0x080031ff
 8003050:	080031ff 	.word	0x080031ff
 8003054:	0800313b 	.word	0x0800313b
 8003058:	080031ff 	.word	0x080031ff
 800305c:	080031ff 	.word	0x080031ff
 8003060:	080031ff 	.word	0x080031ff
 8003064:	0800317d 	.word	0x0800317d
 8003068:	080031ff 	.word	0x080031ff
 800306c:	080031ff 	.word	0x080031ff
 8003070:	080031ff 	.word	0x080031ff
 8003074:	080031bd 	.word	0x080031bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fa54 	bl	800352c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0208 	orr.w	r2, r2, #8
 8003092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0204 	bic.w	r2, r2, #4
 80030a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6999      	ldr	r1, [r3, #24]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	619a      	str	r2, [r3, #24]
      break;
 80030b6:	e0a5      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 face 	bl	8003660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6999      	ldr	r1, [r3, #24]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	021a      	lsls	r2, r3, #8
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	619a      	str	r2, [r3, #24]
      break;
 80030f8:	e084      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fb3f 	bl	8003784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0208 	orr.w	r2, r2, #8
 8003114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0204 	bic.w	r2, r2, #4
 8003124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69d9      	ldr	r1, [r3, #28]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	61da      	str	r2, [r3, #28]
      break;
 8003138:	e064      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fbb1 	bl	80038a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69d9      	ldr	r1, [r3, #28]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	021a      	lsls	r2, r3, #8
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	61da      	str	r2, [r3, #28]
      break;
 800317a:	e043      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fbfe 	bl	8003984 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031ba:	e023      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fc48 	bl	8003a58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031fc:	e002      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
      break;
 8003202:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop

08003218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIM_ConfigClockSource+0x1c>
 8003230:	2302      	movs	r3, #2
 8003232:	e0b6      	b.n	80033a2 <HAL_TIM_ConfigClockSource+0x18a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800325e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003270:	d03e      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0xd8>
 8003272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003276:	f200 8087 	bhi.w	8003388 <HAL_TIM_ConfigClockSource+0x170>
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327e:	f000 8086 	beq.w	800338e <HAL_TIM_ConfigClockSource+0x176>
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d87f      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
 8003288:	2b70      	cmp	r3, #112	; 0x70
 800328a:	d01a      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xaa>
 800328c:	2b70      	cmp	r3, #112	; 0x70
 800328e:	d87b      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
 8003290:	2b60      	cmp	r3, #96	; 0x60
 8003292:	d050      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x11e>
 8003294:	2b60      	cmp	r3, #96	; 0x60
 8003296:	d877      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
 8003298:	2b50      	cmp	r3, #80	; 0x50
 800329a:	d03c      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0xfe>
 800329c:	2b50      	cmp	r3, #80	; 0x50
 800329e:	d873      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d058      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x13e>
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d86f      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
 80032a8:	2b30      	cmp	r3, #48	; 0x30
 80032aa:	d064      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x15e>
 80032ac:	2b30      	cmp	r3, #48	; 0x30
 80032ae:	d86b      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d060      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x15e>
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d867      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d05c      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x15e>
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d05a      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x15e>
 80032c0:	e062      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6899      	ldr	r1, [r3, #8]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f000 fca2 	bl	8003c1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	609a      	str	r2, [r3, #8]
      break;
 80032ee:	e04f      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f000 fc8b 	bl	8003c1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003312:	609a      	str	r2, [r3, #8]
      break;
 8003314:	e03c      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	461a      	mov	r2, r3
 8003324:	f000 fc02 	bl	8003b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2150      	movs	r1, #80	; 0x50
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fc59 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 8003334:	e02c      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	461a      	mov	r2, r3
 8003344:	f000 fc20 	bl	8003b88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2160      	movs	r1, #96	; 0x60
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fc49 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 8003354:	e01c      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	461a      	mov	r2, r3
 8003364:	f000 fbe2 	bl	8003b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fc39 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 8003374:	e00c      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f000 fc30 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 8003386:	e003      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e000      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800338e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
	...

080033f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a41      	ldr	r2, [pc, #260]	; (800350c <TIM_Base_SetConfig+0x118>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003412:	d00f      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3e      	ldr	r2, [pc, #248]	; (8003510 <TIM_Base_SetConfig+0x11c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3d      	ldr	r2, [pc, #244]	; (8003514 <TIM_Base_SetConfig+0x120>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <TIM_Base_SetConfig+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3b      	ldr	r2, [pc, #236]	; (800351c <TIM_Base_SetConfig+0x128>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d108      	bne.n	8003446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a30      	ldr	r2, [pc, #192]	; (800350c <TIM_Base_SetConfig+0x118>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01f      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d01b      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <TIM_Base_SetConfig+0x11c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d017      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <TIM_Base_SetConfig+0x120>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <TIM_Base_SetConfig+0x124>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00f      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2b      	ldr	r2, [pc, #172]	; (8003520 <TIM_Base_SetConfig+0x12c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00b      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <TIM_Base_SetConfig+0x130>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a29      	ldr	r2, [pc, #164]	; (8003528 <TIM_Base_SetConfig+0x134>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_Base_SetConfig+0x9a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a24      	ldr	r2, [pc, #144]	; (800351c <TIM_Base_SetConfig+0x128>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d108      	bne.n	80034a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a11      	ldr	r2, [pc, #68]	; (800350c <TIM_Base_SetConfig+0x118>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <TIM_Base_SetConfig+0x100>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0x100>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <TIM_Base_SetConfig+0x12c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0x100>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a11      	ldr	r2, [pc, #68]	; (8003524 <TIM_Base_SetConfig+0x130>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0x100>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a10      	ldr	r2, [pc, #64]	; (8003528 <TIM_Base_SetConfig+0x134>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0x100>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <TIM_Base_SetConfig+0x128>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d103      	bne.n	80034fc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	615a      	str	r2, [r3, #20]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40013400 	.word	0x40013400
 800351c:	40015000 	.word	0x40015000
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800

0800352c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0302 	bic.w	r3, r3, #2
 8003578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a30      	ldr	r2, [pc, #192]	; (8003648 <TIM_OC1_SetConfig+0x11c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d013      	beq.n	80035b4 <TIM_OC1_SetConfig+0x88>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a2f      	ldr	r2, [pc, #188]	; (800364c <TIM_OC1_SetConfig+0x120>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00f      	beq.n	80035b4 <TIM_OC1_SetConfig+0x88>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a2e      	ldr	r2, [pc, #184]	; (8003650 <TIM_OC1_SetConfig+0x124>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00b      	beq.n	80035b4 <TIM_OC1_SetConfig+0x88>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <TIM_OC1_SetConfig+0x128>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_OC1_SetConfig+0x88>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	; (8003658 <TIM_OC1_SetConfig+0x12c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_OC1_SetConfig+0x88>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a2b      	ldr	r2, [pc, #172]	; (800365c <TIM_OC1_SetConfig+0x130>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10c      	bne.n	80035ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0308 	bic.w	r3, r3, #8
 80035ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <TIM_OC1_SetConfig+0x11c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <TIM_OC1_SetConfig+0xd2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <TIM_OC1_SetConfig+0x120>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00f      	beq.n	80035fe <TIM_OC1_SetConfig+0xd2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <TIM_OC1_SetConfig+0x124>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_OC1_SetConfig+0xd2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <TIM_OC1_SetConfig+0x128>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d007      	beq.n	80035fe <TIM_OC1_SetConfig+0xd2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <TIM_OC1_SetConfig+0x12c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_OC1_SetConfig+0xd2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <TIM_OC1_SetConfig+0x130>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d111      	bne.n	8003622 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40013400 	.word	0x40013400
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	40015000 	.word	0x40015000

08003660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 0210 	bic.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0320 	bic.w	r3, r3, #32
 80036ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a2b      	ldr	r2, [pc, #172]	; (800376c <TIM_OC2_SetConfig+0x10c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_OC2_SetConfig+0x74>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <TIM_OC2_SetConfig+0x110>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC2_SetConfig+0x74>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <TIM_OC2_SetConfig+0x114>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d10d      	bne.n	80036f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a1e      	ldr	r2, [pc, #120]	; (800376c <TIM_OC2_SetConfig+0x10c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <TIM_OC2_SetConfig+0xc0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <TIM_OC2_SetConfig+0x110>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00f      	beq.n	8003720 <TIM_OC2_SetConfig+0xc0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <TIM_OC2_SetConfig+0x118>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <TIM_OC2_SetConfig+0xc0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <TIM_OC2_SetConfig+0x11c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_OC2_SetConfig+0xc0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <TIM_OC2_SetConfig+0x120>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_OC2_SetConfig+0xc0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a16      	ldr	r2, [pc, #88]	; (8003774 <TIM_OC2_SetConfig+0x114>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d113      	bne.n	8003748 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003726:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800372e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40013400 	.word	0x40013400
 8003774:	40015000 	.word	0x40015000
 8003778:	40014000 	.word	0x40014000
 800377c:	40014400 	.word	0x40014400
 8003780:	40014800 	.word	0x40014800

08003784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <TIM_OC3_SetConfig+0x10c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_OC3_SetConfig+0x72>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <TIM_OC3_SetConfig+0x110>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_OC3_SetConfig+0x72>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a29      	ldr	r2, [pc, #164]	; (8003898 <TIM_OC3_SetConfig+0x114>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10d      	bne.n	8003812 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003810:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <TIM_OC3_SetConfig+0x10c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <TIM_OC3_SetConfig+0xbe>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <TIM_OC3_SetConfig+0x110>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00f      	beq.n	8003842 <TIM_OC3_SetConfig+0xbe>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <TIM_OC3_SetConfig+0x118>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00b      	beq.n	8003842 <TIM_OC3_SetConfig+0xbe>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <TIM_OC3_SetConfig+0x11c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <TIM_OC3_SetConfig+0xbe>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <TIM_OC3_SetConfig+0x120>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC3_SetConfig+0xbe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a16      	ldr	r2, [pc, #88]	; (8003898 <TIM_OC3_SetConfig+0x114>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d113      	bne.n	800386a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40013400 	.word	0x40013400
 8003898:	40015000 	.word	0x40015000
 800389c:	40014000 	.word	0x40014000
 80038a0:	40014400 	.word	0x40014400
 80038a4:	40014800 	.word	0x40014800

080038a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a19      	ldr	r2, [pc, #100]	; (800396c <TIM_OC4_SetConfig+0xc4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <TIM_OC4_SetConfig+0x8c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <TIM_OC4_SetConfig+0xc8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00f      	beq.n	8003934 <TIM_OC4_SetConfig+0x8c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <TIM_OC4_SetConfig+0xcc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00b      	beq.n	8003934 <TIM_OC4_SetConfig+0x8c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <TIM_OC4_SetConfig+0xd0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_OC4_SetConfig+0x8c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a15      	ldr	r2, [pc, #84]	; (800397c <TIM_OC4_SetConfig+0xd4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_OC4_SetConfig+0x8c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <TIM_OC4_SetConfig+0xd8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d109      	bne.n	8003948 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800393a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40013400 	.word	0x40013400
 8003974:	40014000 	.word	0x40014000
 8003978:	40014400 	.word	0x40014400
 800397c:	40014800 	.word	0x40014800
 8003980:	40015000 	.word	0x40015000

08003984 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <TIM_OC5_SetConfig+0xbc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <TIM_OC5_SetConfig+0x82>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <TIM_OC5_SetConfig+0xc0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00f      	beq.n	8003a06 <TIM_OC5_SetConfig+0x82>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <TIM_OC5_SetConfig+0xc4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <TIM_OC5_SetConfig+0x82>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <TIM_OC5_SetConfig+0xc8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <TIM_OC5_SetConfig+0x82>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <TIM_OC5_SetConfig+0xcc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_OC5_SetConfig+0x82>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <TIM_OC5_SetConfig+0xd0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d109      	bne.n	8003a1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40013400 	.word	0x40013400
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40014400 	.word	0x40014400
 8003a50:	40014800 	.word	0x40014800
 8003a54:	40015000 	.word	0x40015000

08003a58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	051b      	lsls	r3, r3, #20
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <TIM_OC6_SetConfig+0xbc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <TIM_OC6_SetConfig+0x84>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <TIM_OC6_SetConfig+0xc0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00f      	beq.n	8003adc <TIM_OC6_SetConfig+0x84>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <TIM_OC6_SetConfig+0xc4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_OC6_SetConfig+0x84>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <TIM_OC6_SetConfig+0xc8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_OC6_SetConfig+0x84>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <TIM_OC6_SetConfig+0xcc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_OC6_SetConfig+0x84>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <TIM_OC6_SetConfig+0xd0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d109      	bne.n	8003af0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	029b      	lsls	r3, r3, #10
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800
 8003b28:	40015000 	.word	0x40015000

08003b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0201 	bic.w	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 030a 	bic.w	r3, r3, #10
 8003b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 0210 	bic.w	r2, r3, #16
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	031b      	lsls	r3, r3, #12
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f043 0307 	orr.w	r3, r3, #7
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b087      	sub	sp, #28
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	021a      	lsls	r2, r3, #8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	609a      	str	r2, [r3, #8]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e06d      	b.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a30      	ldr	r2, [pc, #192]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01d      	beq.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d34:	d018      	beq.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00e      	beq.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a11      	ldr	r2, [pc, #68]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10c      	bne.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40013400 	.word	0x40013400
 8003da8:	40015000 	.word	0x40015000
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40014000 	.word	0x40014000

08003db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0a7      	b.n	8003f52 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d12c      	bne.n	8003e68 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a50      	ldr	r2, [pc, #320]	; (8003f5c <HAL_I2C_Init+0x16c>)
 8003e1a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a50      	ldr	r2, [pc, #320]	; (8003f60 <HAL_I2C_Init+0x170>)
 8003e20:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4f      	ldr	r2, [pc, #316]	; (8003f64 <HAL_I2C_Init+0x174>)
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a4f      	ldr	r2, [pc, #316]	; (8003f68 <HAL_I2C_Init+0x178>)
 8003e2c:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4e      	ldr	r2, [pc, #312]	; (8003f6c <HAL_I2C_Init+0x17c>)
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <HAL_I2C_Init+0x180>)
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4d      	ldr	r2, [pc, #308]	; (8003f74 <HAL_I2C_Init+0x184>)
 8003e3e:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a4d      	ldr	r2, [pc, #308]	; (8003f78 <HAL_I2C_Init+0x188>)
 8003e44:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4c      	ldr	r2, [pc, #304]	; (8003f7c <HAL_I2C_Init+0x18c>)
 8003e4a:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a4c      	ldr	r2, [pc, #304]	; (8003f80 <HAL_I2C_Init+0x190>)
 8003e50:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <HAL_I2C_Init+0x194>)
 8003e5e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	e006      	b.n	8003ec4 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d104      	bne.n	8003ed6 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	08003fbd 	.word	0x08003fbd
 8003f60:	08003fcf 	.word	0x08003fcf
 8003f64:	08003fe1 	.word	0x08003fe1
 8003f68:	08003ff3 	.word	0x08003ff3
 8003f6c:	0800401f 	.word	0x0800401f
 8003f70:	08004031 	.word	0x08004031
 8003f74:	08004043 	.word	0x08004043
 8003f78:	08004055 	.word	0x08004055
 8003f7c:	08004067 	.word	0x08004067
 8003f80:	08004005 	.word	0x08004005
 8003f84:	08004579 	.word	0x08004579

08003f88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
 8004010:	4613      	mov	r3, r2
 8004012:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	d138      	bne.n	8004100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004098:	2302      	movs	r3, #2
 800409a:	e032      	b.n	8004102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b20      	cmp	r3, #32
 8004120:	d139      	bne.n	8004196 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800412c:	2302      	movs	r3, #2
 800412e:	e033      	b.n	8004198 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800415e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d10e      	bne.n	80041d4 <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80041b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041ba:	4808      	ldr	r0, [pc, #32]	; (80041dc <HAL_GPIO_EXTI_Callback+0x38>)
 80041bc:	f7fe f9f2 	bl	80025a4 <HAL_GPIO_ReadPin>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d103      	bne.n	80041ce <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 80041c6:	2001      	movs	r0, #1
 80041c8:	f003 fe4c 	bl	8007e64 <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 80041cc:	e002      	b.n	80041d4 <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f003 fe48 	bl	8007e64 <Rte_Write_PC13_Pin_State>
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	48000800 	.word	0x48000800

080041e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <HAL_Init+0x28>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a07      	ldr	r2, [pc, #28]	; (8004214 <HAL_Init+0x28>)
 80041f6:	f043 0310 	orr.w	r3, r3, #16
 80041fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041fc:	2003      	movs	r0, #3
 80041fe:	f000 f911 	bl	8004424 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004202:	200f      	movs	r0, #15
 8004204:	f000 f808 	bl	8004218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004208:	f000 f94e 	bl	80044a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40022000 	.word	0x40022000

08004218 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_InitTick+0x54>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <HAL_InitTick+0x58>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800422e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f929 	bl	800448e <HAL_SYSTICK_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e00e      	b.n	8004264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b0f      	cmp	r3, #15
 800424a:	d80a      	bhi.n	8004262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800424c:	2200      	movs	r2, #0
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	f000 f8f1 	bl	800443a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004258:	4a06      	ldr	r2, [pc, #24]	; (8004274 <HAL_InitTick+0x5c>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000000 	.word	0x20000000
 8004270:	20000008 	.word	0x20000008
 8004274:	20000004 	.word	0x20000004

08004278 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return uwTick;  
 800427c:	4b02      	ldr	r3, [pc, #8]	; (8004288 <HAL_GetTick+0x10>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	200000a4 	.word	0x200000a4

0800428c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042a8:	4013      	ands	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	60d3      	str	r3, [r2, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <__NVIC_GetPriorityGrouping+0x18>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f003 0307 	and.w	r3, r3, #7
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	db0b      	blt.n	800431a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	4906      	ldr	r1, [pc, #24]	; (8004324 <__NVIC_EnableIRQ+0x34>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2001      	movs	r0, #1
 8004312:	fa00 f202 	lsl.w	r2, r0, r2
 8004316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	e000e100 	.word	0xe000e100

08004328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004338:	2b00      	cmp	r3, #0
 800433a:	db0a      	blt.n	8004352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	490c      	ldr	r1, [pc, #48]	; (8004374 <__NVIC_SetPriority+0x4c>)
 8004342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004346:	0112      	lsls	r2, r2, #4
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	440b      	add	r3, r1
 800434c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004350:	e00a      	b.n	8004368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	4908      	ldr	r1, [pc, #32]	; (8004378 <__NVIC_SetPriority+0x50>)
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	3b04      	subs	r3, #4
 8004360:	0112      	lsls	r2, r2, #4
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	440b      	add	r3, r1
 8004366:	761a      	strb	r2, [r3, #24]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000e100 	.word	0xe000e100
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f1c3 0307 	rsb	r3, r3, #7
 8004396:	2b04      	cmp	r3, #4
 8004398:	bf28      	it	cs
 800439a:	2304      	movcs	r3, #4
 800439c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d902      	bls.n	80043ac <NVIC_EncodePriority+0x30>
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3b03      	subs	r3, #3
 80043aa:	e000      	b.n	80043ae <NVIC_EncodePriority+0x32>
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43da      	mvns	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	401a      	ands	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c4:	f04f 31ff 	mov.w	r1, #4294967295
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	fa01 f303 	lsl.w	r3, r1, r3
 80043ce:	43d9      	mvns	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d4:	4313      	orrs	r3, r2
         );
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3724      	adds	r7, #36	; 0x24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f0:	d301      	bcc.n	80043f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00f      	b.n	8004416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <SysTick_Config+0x40>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fe:	210f      	movs	r1, #15
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f7ff ff90 	bl	8004328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <SysTick_Config+0x40>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <SysTick_Config+0x40>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	e000e010 	.word	0xe000e010

08004424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff2d 	bl	800428c <__NVIC_SetPriorityGrouping>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800444c:	f7ff ff42 	bl	80042d4 <__NVIC_GetPriorityGrouping>
 8004450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f7ff ff90 	bl	800437c <NVIC_EncodePriority>
 800445c:	4602      	mov	r2, r0
 800445e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff5f 	bl	8004328 <__NVIC_SetPriority>
}
 800446a:	bf00      	nop
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	4603      	mov	r3, r0
 800447a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff35 	bl	80042f0 <__NVIC_EnableIRQ>
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ffa2 	bl	80043e0 <SysTick_Config>
 800449c:	4603      	mov	r3, r0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_MspInit+0x40>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <HAL_MspInit+0x40>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6193      	str	r3, [r2, #24]
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_MspInit+0x40>)
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_MspInit+0x40>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <HAL_MspInit+0x40>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	61d3      	str	r3, [r2, #28]
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_MspInit+0x40>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450c:	d12b      	bne.n	8004566 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800450e:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_ADC_MspInit+0x84>)
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_ADC_MspInit+0x84>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6153      	str	r3, [r2, #20]
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_ADC_MspInit+0x84>)
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_ADC_MspInit+0x84>)
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4a11      	ldr	r2, [pc, #68]	; (8004570 <HAL_ADC_MspInit+0x84>)
 800452c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004530:	6153      	str	r3, [r2, #20]
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_ADC_MspInit+0x84>)
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800453e:	2301      	movs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004542:	2303      	movs	r3, #3
 8004544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800454a:	f107 0314 	add.w	r3, r7, #20
 800454e:	4619      	mov	r1, r3
 8004550:	4808      	ldr	r0, [pc, #32]	; (8004574 <HAL_ADC_MspInit+0x88>)
 8004552:	f7fd fe9d 	bl	8002290 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004556:	2200      	movs	r2, #0
 8004558:	2100      	movs	r1, #0
 800455a:	2012      	movs	r0, #18
 800455c:	f7ff ff6d 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004560:	2012      	movs	r0, #18
 8004562:	f7ff ff86 	bl	8004472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004566:	bf00      	nop
 8004568:	3728      	adds	r7, #40	; 0x28
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	48000800 	.word	0x48000800

08004578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <HAL_I2C_MspInit+0x8c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d130      	bne.n	80045fc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800459a:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_I2C_MspInit+0x90>)
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <HAL_I2C_MspInit+0x90>)
 80045a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a4:	6153      	str	r3, [r2, #20]
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_I2C_MspInit+0x90>)
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045b8:	2312      	movs	r3, #18
 80045ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045c0:	2303      	movs	r3, #3
 80045c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045c4:	2304      	movs	r3, #4
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	4619      	mov	r1, r3
 80045ce:	480f      	ldr	r0, [pc, #60]	; (800460c <HAL_I2C_MspInit+0x94>)
 80045d0:	f7fd fe5e 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <HAL_I2C_MspInit+0x90>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <HAL_I2C_MspInit+0x90>)
 80045da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045de:	61d3      	str	r3, [r2, #28]
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_I2C_MspInit+0x90>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045ec:	2200      	movs	r2, #0
 80045ee:	2100      	movs	r1, #0
 80045f0:	201f      	movs	r0, #31
 80045f2:	f7ff ff22 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80045f6:	201f      	movs	r0, #31
 80045f8:	f7ff ff3b 	bl	8004472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80045fc:	bf00      	nop
 80045fe:	3728      	adds	r7, #40	; 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40005400 	.word	0x40005400
 8004608:	40021000 	.word	0x40021000
 800460c:	48000400 	.word	0x48000400

08004610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004618:	f107 0314 	add.w	r3, r7, #20
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1b      	ldr	r2, [pc, #108]	; (800469c <HAL_SPI_MspInit+0x8c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d130      	bne.n	8004694 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004632:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <HAL_SPI_MspInit+0x90>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <HAL_SPI_MspInit+0x90>)
 8004638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463c:	61d3      	str	r3, [r2, #28]
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_SPI_MspInit+0x90>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_SPI_MspInit+0x90>)
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <HAL_SPI_MspInit+0x90>)
 8004650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004654:	6153      	str	r3, [r2, #20]
 8004656:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_SPI_MspInit+0x90>)
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004662:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004668:	2302      	movs	r3, #2
 800466a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004670:	2303      	movs	r3, #3
 8004672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004674:	2306      	movs	r3, #6
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	4619      	mov	r1, r3
 800467e:	4809      	ldr	r0, [pc, #36]	; (80046a4 <HAL_SPI_MspInit+0x94>)
 8004680:	f7fd fe06 	bl	8002290 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004684:	2200      	movs	r2, #0
 8004686:	2100      	movs	r1, #0
 8004688:	2033      	movs	r0, #51	; 0x33
 800468a:	f7ff fed6 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800468e:	2033      	movs	r0, #51	; 0x33
 8004690:	f7ff feef 	bl	8004472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004694:	bf00      	nop
 8004696:	3728      	adds	r7, #40	; 0x28
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40003c00 	.word	0x40003c00
 80046a0:	40021000 	.word	0x40021000
 80046a4:	48000800 	.word	0x48000800

080046a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <HAL_TIM_Base_MspInit+0x44>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d113      	bne.n	80046e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <HAL_TIM_Base_MspInit+0x48>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <HAL_TIM_Base_MspInit+0x48>)
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	61d3      	str	r3, [r2, #28]
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <HAL_TIM_Base_MspInit+0x48>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2100      	movs	r1, #0
 80046d6:	201d      	movs	r0, #29
 80046d8:	f7ff feaf 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046dc:	201d      	movs	r0, #29
 80046de:	f7ff fec8 	bl	8004472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	; 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 031c 	add.w	r3, r7, #28
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a36      	ldr	r2, [pc, #216]	; (80047ec <HAL_UART_MspInit+0xf8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d130      	bne.n	8004778 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004716:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	4a35      	ldr	r2, [pc, #212]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 800471c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004720:	6193      	str	r3, [r2, #24]
 8004722:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800472e:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004738:	6153      	str	r3, [r2, #20]
 800473a:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004746:	2330      	movs	r3, #48	; 0x30
 8004748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004752:	2303      	movs	r3, #3
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004756:	2307      	movs	r3, #7
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800475a:	f107 031c 	add.w	r3, r7, #28
 800475e:	4619      	mov	r1, r3
 8004760:	4824      	ldr	r0, [pc, #144]	; (80047f4 <HAL_UART_MspInit+0x100>)
 8004762:	f7fd fd95 	bl	8002290 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004766:	2200      	movs	r2, #0
 8004768:	2100      	movs	r1, #0
 800476a:	2025      	movs	r0, #37	; 0x25
 800476c:	f7ff fe65 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004770:	2025      	movs	r0, #37	; 0x25
 8004772:	f7ff fe7e 	bl	8004472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004776:	e035      	b.n	80047e4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <HAL_UART_MspInit+0x104>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d130      	bne.n	80047e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004782:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478c:	61d3      	str	r3, [r2, #28]
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	6153      	str	r3, [r2, #20]
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_UART_MspInit+0xfc>)
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047b2:	230c      	movs	r3, #12
 80047b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b6:	2302      	movs	r3, #2
 80047b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047be:	2303      	movs	r3, #3
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047c2:	2307      	movs	r3, #7
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c6:	f107 031c 	add.w	r3, r7, #28
 80047ca:	4619      	mov	r1, r3
 80047cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047d0:	f7fd fd5e 	bl	8002290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047d4:	2200      	movs	r2, #0
 80047d6:	2100      	movs	r1, #0
 80047d8:	2026      	movs	r0, #38	; 0x26
 80047da:	f7ff fe2e 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047de:	2026      	movs	r0, #38	; 0x26
 80047e0:	f7ff fe47 	bl	8004472 <HAL_NVIC_EnableIRQ>
}
 80047e4:	bf00      	nop
 80047e6:	3730      	adds	r7, #48	; 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40021000 	.word	0x40021000
 80047f4:	48000800 	.word	0x48000800
 80047f8:	40004400 	.word	0x40004400

080047fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004802:	af00      	add	r7, sp, #0
 8004804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004808:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800480c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004812:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f001 b83a 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004826:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 816f 	beq.w	8004b16 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004838:	4bb5      	ldr	r3, [pc, #724]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b04      	cmp	r3, #4
 8004842:	d00c      	beq.n	800485e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004844:	4bb2      	ldr	r3, [pc, #712]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b08      	cmp	r3, #8
 800484e:	d15c      	bne.n	800490a <HAL_RCC_OscConfig+0x10e>
 8004850:	4baf      	ldr	r3, [pc, #700]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485c:	d155      	bne.n	800490a <HAL_RCC_OscConfig+0x10e>
 800485e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004862:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004872:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d102      	bne.n	8004890 <HAL_RCC_OscConfig+0x94>
 800488a:	4ba1      	ldr	r3, [pc, #644]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	e015      	b.n	80048bc <HAL_RCC_OscConfig+0xc0>
 8004890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004894:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800489c:	fa93 f3a3 	rbit	r3, r3
 80048a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80048a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048a8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80048ac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80048b8:	4b95      	ldr	r3, [pc, #596]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048c0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80048c4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80048c8:	fa92 f2a2 	rbit	r2, r2
 80048cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80048d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80048d4:	fab2 f282 	clz	r2, r2
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	f042 0220 	orr.w	r2, r2, #32
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	f002 021f 	and.w	r2, r2, #31
 80048e4:	2101      	movs	r1, #1
 80048e6:	fa01 f202 	lsl.w	r2, r1, r2
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8111 	beq.w	8004b14 <HAL_RCC_OscConfig+0x318>
 80048f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 8108 	bne.w	8004b14 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f000 bfc6 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x12e>
 800491c:	4b7c      	ldr	r3, [pc, #496]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a7b      	ldr	r2, [pc, #492]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e036      	b.n	8004998 <HAL_RCC_OscConfig+0x19c>
 800492a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0x158>
 800493a:	4b75      	ldr	r3, [pc, #468]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a74      	ldr	r2, [pc, #464]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b72      	ldr	r3, [pc, #456]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a71      	ldr	r2, [pc, #452]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 800494c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e021      	b.n	8004998 <HAL_RCC_OscConfig+0x19c>
 8004954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004958:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x184>
 8004966:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a69      	ldr	r2, [pc, #420]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 800496c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a66      	ldr	r2, [pc, #408]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e00b      	b.n	8004998 <HAL_RCC_OscConfig+0x19c>
 8004980:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a62      	ldr	r2, [pc, #392]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5f      	ldr	r2, [pc, #380]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004996:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800499c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d059      	beq.n	8004a5c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7ff fc66 	bl	8004278 <HAL_GetTick>
 80049ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b2:	f7ff fc61 	bl	8004278 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d902      	bls.n	80049c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	f000 bf67 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
 80049c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049cc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80049dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d102      	bne.n	80049fa <HAL_RCC_OscConfig+0x1fe>
 80049f4:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	e015      	b.n	8004a26 <HAL_RCC_OscConfig+0x22a>
 80049fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004a16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004a22:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a2a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004a2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004a32:	fa92 f2a2 	rbit	r2, r2
 8004a36:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004a3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a3e:	fab2 f282 	clz	r2, r2
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	f042 0220 	orr.w	r2, r2, #32
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	f002 021f 	and.w	r2, r2, #31
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f202 	lsl.w	r2, r1, r2
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ab      	beq.n	80049b2 <HAL_RCC_OscConfig+0x1b6>
 8004a5a:	e05c      	b.n	8004b16 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7ff fc0c 	bl	8004278 <HAL_GetTick>
 8004a60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a66:	f7ff fc07 	bl	8004278 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d902      	bls.n	8004a7c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	f000 bf0d 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
 8004a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a80:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004a90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_RCC_OscConfig+0x2b2>
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	e015      	b.n	8004ada <HAL_RCC_OscConfig+0x2de>
 8004aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ab2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ac6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004aca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_RCC_OscConfig+0x314>)
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ade:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004ae2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004ae6:	fa92 f2a2 	rbit	r2, r2
 8004aea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004aee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004af2:	fab2 f282 	clz	r2, r2
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	f042 0220 	orr.w	r2, r2, #32
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	f002 021f 	and.w	r2, r2, #31
 8004b02:	2101      	movs	r1, #1
 8004b04:	fa01 f202 	lsl.w	r2, r1, r2
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1ab      	bne.n	8004a66 <HAL_RCC_OscConfig+0x26a>
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_OscConfig+0x31a>
 8004b10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 817f 	beq.w	8004e2a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b2c:	4ba7      	ldr	r3, [pc, #668]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00c      	beq.n	8004b52 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b38:	4ba4      	ldr	r3, [pc, #656]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d173      	bne.n	8004c2c <HAL_RCC_OscConfig+0x430>
 8004b44:	4ba1      	ldr	r3, [pc, #644]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b50:	d16c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x430>
 8004b52:	2302      	movs	r3, #2
 8004b54:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004b5c:	fa93 f3a3 	rbit	r3, r3
 8004b60:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004b64:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b68:	fab3 f383 	clz	r3, r3
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d102      	bne.n	8004b82 <HAL_RCC_OscConfig+0x386>
 8004b7c:	4b93      	ldr	r3, [pc, #588]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	e013      	b.n	8004baa <HAL_RCC_OscConfig+0x3ae>
 8004b82:	2302      	movs	r3, #2
 8004b84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004b8c:	fa93 f3a3 	rbit	r3, r3
 8004b90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004b94:	2302      	movs	r3, #2
 8004b96:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b9a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004b9e:	fa93 f3a3 	rbit	r3, r3
 8004ba2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ba6:	4b89      	ldr	r3, [pc, #548]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	2202      	movs	r2, #2
 8004bac:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004bb0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004bb4:	fa92 f2a2 	rbit	r2, r2
 8004bb8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004bbc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004bc0:	fab2 f282 	clz	r2, r2
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	f042 0220 	orr.w	r2, r2, #32
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	f002 021f 	and.w	r2, r2, #31
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x3f6>
 8004bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d002      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f000 be52 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf2:	4b76      	ldr	r3, [pc, #472]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	21f8      	movs	r1, #248	; 0xf8
 8004c08:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004c10:	fa91 f1a1 	rbit	r1, r1
 8004c14:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004c18:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004c1c:	fab1 f181 	clz	r1, r1
 8004c20:	b2c9      	uxtb	r1, r1
 8004c22:	408b      	lsls	r3, r1
 8004c24:	4969      	ldr	r1, [pc, #420]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e0fe      	b.n	8004e2a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8088 	beq.w	8004d4e <HAL_RCC_OscConfig+0x552>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c44:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004c50:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c54:	fab3 f383 	clz	r3, r3
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	461a      	mov	r2, r3
 8004c66:	2301      	movs	r3, #1
 8004c68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7ff fb05 	bl	8004278 <HAL_GetTick>
 8004c6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c74:	f7ff fb00 	bl	8004278 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d902      	bls.n	8004c8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	f000 be06 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c90:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004c94:	fa93 f3a3 	rbit	r3, r3
 8004c98:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004c9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	fab3 f383 	clz	r3, r3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d102      	bne.n	8004cba <HAL_RCC_OscConfig+0x4be>
 8004cb4:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	e013      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4e6>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cc4:	fa93 f3a3 	rbit	r3, r3
 8004cc8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004cd2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004ce8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004cec:	fa92 f2a2 	rbit	r2, r2
 8004cf0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004cf4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004cf8:	fab2 f282 	clz	r2, r2
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	f042 0220 	orr.w	r2, r2, #32
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	f002 021f 	and.w	r2, r2, #31
 8004d08:	2101      	movs	r1, #1
 8004d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0af      	beq.n	8004c74 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d14:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	21f8      	movs	r1, #248	; 0xf8
 8004d2a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004d32:	fa91 f1a1 	rbit	r1, r1
 8004d36:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004d3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004d3e:	fab1 f181 	clz	r1, r1
 8004d42:	b2c9      	uxtb	r1, r1
 8004d44:	408b      	lsls	r3, r1
 8004d46:	4921      	ldr	r1, [pc, #132]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]
 8004d4c:	e06d      	b.n	8004e2a <HAL_RCC_OscConfig+0x62e>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004d60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	461a      	mov	r2, r3
 8004d76:	2300      	movs	r3, #0
 8004d78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7ff fa7d 	bl	8004278 <HAL_GetTick>
 8004d7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d84:	f7ff fa78 	bl	8004278 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d902      	bls.n	8004d9a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	f000 bd7e 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004dac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db0:	fab3 f383 	clz	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x5d4>
 8004dc4:	4b01      	ldr	r3, [pc, #4]	; (8004dcc <HAL_RCC_OscConfig+0x5d0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	e016      	b.n	8004df8 <HAL_RCC_OscConfig+0x5fc>
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004de2:	2302      	movs	r3, #2
 8004de4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004de8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004df4:	4bbf      	ldr	r3, [pc, #764]	; (80050f4 <HAL_RCC_OscConfig+0x8f8>)
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004dfe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004e02:	fa92 f2a2 	rbit	r2, r2
 8004e06:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004e0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004e0e:	fab2 f282 	clz	r2, r2
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	f042 0220 	orr.w	r2, r2, #32
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	f002 021f 	and.w	r2, r2, #31
 8004e1e:	2101      	movs	r1, #1
 8004e20:	fa01 f202 	lsl.w	r2, r1, r2
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ac      	bne.n	8004d84 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8113 	beq.w	8005066 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d07c      	beq.n	8004f4a <HAL_RCC_OscConfig+0x74e>
 8004e50:	2301      	movs	r3, #1
 8004e52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004e62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4ba2      	ldr	r3, [pc, #648]	; (80050f8 <HAL_RCC_OscConfig+0x8fc>)
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	461a      	mov	r2, r3
 8004e76:	2301      	movs	r3, #1
 8004e78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7ff f9fd 	bl	8004278 <HAL_GetTick>
 8004e7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e84:	f7ff f9f8 	bl	8004278 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d902      	bls.n	8004e9a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	f000 bcfe 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea4:	fa93 f2a3 	rbit	r2, r3
 8004ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eba:	2202      	movs	r2, #2
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	fa93 f2a3 	rbit	r2, r3
 8004ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ede:	2202      	movs	r2, #2
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	fa93 f2a3 	rbit	r2, r3
 8004ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ef8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004efa:	4b7e      	ldr	r3, [pc, #504]	; (80050f4 <HAL_RCC_OscConfig+0x8f8>)
 8004efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f06:	2102      	movs	r1, #2
 8004f08:	6019      	str	r1, [r3, #0]
 8004f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	fa93 f1a3 	rbit	r1, r3
 8004f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f20:	6019      	str	r1, [r3, #0]
  return result;
 8004f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	fab3 f383 	clz	r3, r3
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d09d      	beq.n	8004e84 <HAL_RCC_OscConfig+0x688>
 8004f48:	e08d      	b.n	8005066 <HAL_RCC_OscConfig+0x86a>
 8004f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	fa93 f2a3 	rbit	r2, r3
 8004f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f6c:	601a      	str	r2, [r3, #0]
  return result;
 8004f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f76:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4b5d      	ldr	r3, [pc, #372]	; (80050f8 <HAL_RCC_OscConfig+0x8fc>)
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8c:	f7ff f974 	bl	8004278 <HAL_GetTick>
 8004f90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f96:	f7ff f96f 	bl	8004278 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d902      	bls.n	8004fac <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	f000 bc75 	b.w	8005896 <HAL_RCC_OscConfig+0x109a>
 8004fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fbc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fd8:	2202      	movs	r2, #2
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	fa93 f2a3 	rbit	r2, r3
 8004fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ff8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005004:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	fa93 f2a3 	rbit	r2, r3
 800500e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005012:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005016:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <HAL_RCC_OscConfig+0x8f8>)
 800501a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800501c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005020:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005024:	2102      	movs	r1, #2
 8005026:	6019      	str	r1, [r3, #0]
 8005028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	fa93 f1a3 	rbit	r1, r3
 8005036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800503a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800503e:	6019      	str	r1, [r3, #0]
  return result;
 8005040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005044:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d197      	bne.n	8004f96 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800506a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 81a5 	beq.w	80053c6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005082:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <HAL_RCC_OscConfig+0x8f8>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508e:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <HAL_RCC_OscConfig+0x8f8>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	4a18      	ldr	r2, [pc, #96]	; (80050f4 <HAL_RCC_OscConfig+0x8f8>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	61d3      	str	r3, [r2, #28]
 800509a:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <HAL_RCC_OscConfig+0x8f8>)
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80050a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <HAL_RCC_OscConfig+0x900>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d121      	bne.n	800510c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <HAL_RCC_OscConfig+0x900>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <HAL_RCC_OscConfig+0x900>)
 80050ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d4:	f7ff f8d0 	bl	8004278 <HAL_GetTick>
 80050d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	e010      	b.n	8005100 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050de:	f7ff f8cb 	bl	8004278 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	; 0x64
 80050ec:	d908      	bls.n	8005100 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e3d1      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
 80050f2:	bf00      	nop
 80050f4:	40021000 	.word	0x40021000
 80050f8:	10908120 	.word	0x10908120
 80050fc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005100:	4b8d      	ldr	r3, [pc, #564]	; (8005338 <HAL_RCC_OscConfig+0xb3c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0e8      	beq.n	80050de <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800510c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005110:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x92e>
 800511c:	4b87      	ldr	r3, [pc, #540]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4a86      	ldr	r2, [pc, #536]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6213      	str	r3, [r2, #32]
 8005128:	e035      	b.n	8005196 <HAL_RCC_OscConfig+0x99a>
 800512a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800512e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x958>
 800513a:	4b80      	ldr	r3, [pc, #512]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	4a7f      	ldr	r2, [pc, #508]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6213      	str	r3, [r2, #32]
 8005146:	4b7d      	ldr	r3, [pc, #500]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	4a7c      	ldr	r2, [pc, #496]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	6213      	str	r3, [r2, #32]
 8005152:	e020      	b.n	8005196 <HAL_RCC_OscConfig+0x99a>
 8005154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005158:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b05      	cmp	r3, #5
 8005162:	d10c      	bne.n	800517e <HAL_RCC_OscConfig+0x982>
 8005164:	4b75      	ldr	r3, [pc, #468]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4a74      	ldr	r2, [pc, #464]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 800516a:	f043 0304 	orr.w	r3, r3, #4
 800516e:	6213      	str	r3, [r2, #32]
 8005170:	4b72      	ldr	r3, [pc, #456]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	4a71      	ldr	r2, [pc, #452]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6213      	str	r3, [r2, #32]
 800517c:	e00b      	b.n	8005196 <HAL_RCC_OscConfig+0x99a>
 800517e:	4b6f      	ldr	r3, [pc, #444]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a6e      	ldr	r2, [pc, #440]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	6213      	str	r3, [r2, #32]
 800518a:	4b6c      	ldr	r3, [pc, #432]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	4a6b      	ldr	r2, [pc, #428]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800519a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8081 	beq.w	80052aa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a8:	f7ff f866 	bl	8004278 <HAL_GetTick>
 80051ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	e00b      	b.n	80051ca <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7ff f861 	bl	8004278 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e365      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
 80051ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80051d2:	2202      	movs	r2, #2
 80051d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	fa93 f2a3 	rbit	r2, r3
 80051e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051f6:	2202      	movs	r2, #2
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	fa93 f2a3 	rbit	r2, r3
 8005208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800520c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005210:	601a      	str	r2, [r3, #0]
  return result;
 8005212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005216:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800521a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521c:	fab3 f383 	clz	r3, r3
 8005220:	b2db      	uxtb	r3, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f043 0302 	orr.w	r3, r3, #2
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d102      	bne.n	8005236 <HAL_RCC_OscConfig+0xa3a>
 8005230:	4b42      	ldr	r3, [pc, #264]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	e013      	b.n	800525e <HAL_RCC_OscConfig+0xa62>
 8005236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800523a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800523e:	2202      	movs	r2, #2
 8005240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005246:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	fa93 f2a3 	rbit	r2, r3
 8005250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005254:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005262:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005266:	2102      	movs	r1, #2
 8005268:	6011      	str	r1, [r2, #0]
 800526a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800526e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	fa92 f1a2 	rbit	r1, r2
 8005278:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800527c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005280:	6011      	str	r1, [r2, #0]
  return result;
 8005282:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005286:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	fab2 f282 	clz	r2, r2
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	f002 021f 	and.w	r2, r2, #31
 800529c:	2101      	movs	r1, #1
 800529e:	fa01 f202 	lsl.w	r2, r1, r2
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d084      	beq.n	80051b2 <HAL_RCC_OscConfig+0x9b6>
 80052a8:	e083      	b.n	80053b2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7fe ffe5 	bl	8004278 <HAL_GetTick>
 80052ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b2:	e00b      	b.n	80052cc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fe ffe0 	bl	8004278 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e2e4      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
 80052cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80052d4:	2202      	movs	r2, #2
 80052d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	fa93 f2a3 	rbit	r2, r3
 80052e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052f8:	2202      	movs	r2, #2
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005300:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	fa93 f2a3 	rbit	r2, r3
 800530a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800530e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005312:	601a      	str	r2, [r3, #0]
  return result;
 8005314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005318:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800531c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d106      	bne.n	8005340 <HAL_RCC_OscConfig+0xb44>
 8005332:	4b02      	ldr	r3, [pc, #8]	; (800533c <HAL_RCC_OscConfig+0xb40>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	e017      	b.n	8005368 <HAL_RCC_OscConfig+0xb6c>
 8005338:	40007000 	.word	0x40007000
 800533c:	40021000 	.word	0x40021000
 8005340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005344:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005348:	2202      	movs	r2, #2
 800534a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005350:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	fa93 f2a3 	rbit	r2, r3
 800535a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800535e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	4bb3      	ldr	r3, [pc, #716]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800536c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005370:	2102      	movs	r1, #2
 8005372:	6011      	str	r1, [r2, #0]
 8005374:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005378:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	fa92 f1a2 	rbit	r1, r2
 8005382:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005386:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800538a:	6011      	str	r1, [r2, #0]
  return result;
 800538c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005390:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	fab2 f282 	clz	r2, r2
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	f002 021f 	and.w	r2, r2, #31
 80053a6:	2101      	movs	r1, #1
 80053a8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d180      	bne.n	80052b4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053b2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d105      	bne.n	80053c6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ba:	4b9e      	ldr	r3, [pc, #632]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4a9d      	ldr	r2, [pc, #628]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 80053c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 825e 	beq.w	8005894 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053d8:	4b96      	ldr	r3, [pc, #600]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 030c 	and.w	r3, r3, #12
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	f000 821f 	beq.w	8005824 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	f040 8170 	bne.w	80056d8 <HAL_RCC_OscConfig+0xedc>
 80053f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800540a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	fa93 f2a3 	rbit	r2, r3
 8005414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005418:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800541c:	601a      	str	r2, [r3, #0]
  return result;
 800541e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005422:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005426:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005428:	fab3 f383 	clz	r3, r3
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005432:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	461a      	mov	r2, r3
 800543a:	2300      	movs	r3, #0
 800543c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fe ff1b 	bl	8004278 <HAL_GetTick>
 8005442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005446:	e009      	b.n	800545c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005448:	f7fe ff16 	bl	8004278 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e21c      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
 800545c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005460:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800546e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	fa93 f2a3 	rbit	r2, r3
 8005478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800547c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005480:	601a      	str	r2, [r3, #0]
  return result;
 8005482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005486:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800548a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d102      	bne.n	80054a6 <HAL_RCC_OscConfig+0xcaa>
 80054a0:	4b64      	ldr	r3, [pc, #400]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	e027      	b.n	80054f6 <HAL_RCC_OscConfig+0xcfa>
 80054a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	fa93 f2a3 	rbit	r2, r3
 80054c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80054d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	fa93 f2a3 	rbit	r2, r3
 80054e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ec:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	4b50      	ldr	r3, [pc, #320]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005502:	6011      	str	r1, [r2, #0]
 8005504:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005508:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	fa92 f1a2 	rbit	r1, r2
 8005512:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005516:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800551a:	6011      	str	r1, [r2, #0]
  return result;
 800551c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005520:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	fab2 f282 	clz	r2, r2
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	f042 0220 	orr.w	r2, r2, #32
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	f002 021f 	and.w	r2, r2, #31
 8005536:	2101      	movs	r1, #1
 8005538:	fa01 f202 	lsl.w	r2, r1, r2
 800553c:	4013      	ands	r3, r2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d182      	bne.n	8005448 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005542:	4b3c      	ldr	r3, [pc, #240]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f023 020f 	bic.w	r2, r3, #15
 800554a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800554e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	4937      	ldr	r1, [pc, #220]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 8005558:	4313      	orrs	r3, r2
 800555a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800555c:	4b35      	ldr	r3, [pc, #212]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005568:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a19      	ldr	r1, [r3, #32]
 8005570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005574:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	430b      	orrs	r3, r1
 800557e:	492d      	ldr	r1, [pc, #180]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
 8005584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005588:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800558c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005596:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	fa93 f2a3 	rbit	r2, r3
 80055a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80055a8:	601a      	str	r2, [r3, #0]
  return result;
 80055aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80055b2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b4:	fab3 f383 	clz	r3, r3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	461a      	mov	r2, r3
 80055c6:	2301      	movs	r3, #1
 80055c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fe fe55 	bl	8004278 <HAL_GetTick>
 80055ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055d2:	e009      	b.n	80055e8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fe fe50 	bl	8004278 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e156      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
 80055e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80055f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055fa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	fa93 f2a3 	rbit	r2, r3
 8005604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005608:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800560c:	601a      	str	r2, [r3, #0]
  return result;
 800560e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005612:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005618:	fab3 f383 	clz	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d105      	bne.n	8005638 <HAL_RCC_OscConfig+0xe3c>
 800562c:	4b01      	ldr	r3, [pc, #4]	; (8005634 <HAL_RCC_OscConfig+0xe38>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	e02a      	b.n	8005688 <HAL_RCC_OscConfig+0xe8c>
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000
 8005638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800563c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800564a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	fa93 f2a3 	rbit	r2, r3
 8005654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005658:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005662:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005670:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	fa93 f2a3 	rbit	r2, r3
 800567a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800567e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	4b86      	ldr	r3, [pc, #536]	; (80058a0 <HAL_RCC_OscConfig+0x10a4>)
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800568c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005690:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800569a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	fa92 f1a2 	rbit	r1, r2
 80056a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056a8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80056ac:	6011      	str	r1, [r2, #0]
  return result;
 80056ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056b2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	fab2 f282 	clz	r2, r2
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	f042 0220 	orr.w	r2, r2, #32
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	f002 021f 	and.w	r2, r2, #31
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f202 	lsl.w	r2, r1, r2
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f43f af7f 	beq.w	80055d4 <HAL_RCC_OscConfig+0xdd8>
 80056d6:	e0dd      	b.n	8005894 <HAL_RCC_OscConfig+0x1098>
 80056d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80056e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	fa93 f2a3 	rbit	r2, r3
 80056f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056fc:	601a      	str	r2, [r3, #0]
  return result;
 80056fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005702:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005706:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005708:	fab3 f383 	clz	r3, r3
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	461a      	mov	r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fe fdab 	bl	8004278 <HAL_GetTick>
 8005722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005726:	e009      	b.n	800573c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005728:	f7fe fda6 	bl	8004278 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e0ac      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
 800573c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005740:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800574e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f2a3 	rbit	r2, r3
 8005758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800575c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005760:	601a      	str	r2, [r3, #0]
  return result;
 8005762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005766:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800576a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d102      	bne.n	8005786 <HAL_RCC_OscConfig+0xf8a>
 8005780:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_OscConfig+0x10a4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	e027      	b.n	80057d6 <HAL_RCC_OscConfig+0xfda>
 8005786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800578a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800578e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005798:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	fa93 f2a3 	rbit	r2, r3
 80057a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057b0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80057b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	fa93 f2a3 	rbit	r2, r3
 80057c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057cc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <HAL_RCC_OscConfig+0x10a4>)
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80057da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80057de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057e2:	6011      	str	r1, [r2, #0]
 80057e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80057e8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	fa92 f1a2 	rbit	r1, r2
 80057f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80057f6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80057fa:	6011      	str	r1, [r2, #0]
  return result;
 80057fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005800:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	fab2 f282 	clz	r2, r2
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	f042 0220 	orr.w	r2, r2, #32
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	f002 021f 	and.w	r2, r2, #31
 8005816:	2101      	movs	r1, #1
 8005818:	fa01 f202 	lsl.w	r2, r1, r2
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d182      	bne.n	8005728 <HAL_RCC_OscConfig+0xf2c>
 8005822:	e037      	b.n	8005894 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005828:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e02e      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_RCC_OscConfig+0x10a4>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005840:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <HAL_RCC_OscConfig+0x10a4>)
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005848:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800584c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005854:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	429a      	cmp	r2, r3
 800585e:	d117      	bne.n	8005890 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005860:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005864:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800586c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005874:	429a      	cmp	r2, r3
 8005876:	d10b      	bne.n	8005890 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800587c:	f003 020f 	and.w	r2, r3, #15
 8005880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005884:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40021000 	.word	0x40021000

080058a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b09e      	sub	sp, #120	; 0x78
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e162      	b.n	8005b82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058bc:	4b90      	ldr	r3, [pc, #576]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d910      	bls.n	80058ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b8d      	ldr	r3, [pc, #564]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 0207 	bic.w	r2, r3, #7
 80058d2:	498b      	ldr	r1, [pc, #556]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e14a      	b.n	8005b82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f8:	4b82      	ldr	r3, [pc, #520]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	497f      	ldr	r1, [pc, #508]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80dc 	beq.w	8005ad0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d13c      	bne.n	800599a <HAL_RCC_ClockConfig+0xf6>
 8005920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005924:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005928:	fa93 f3a3 	rbit	r3, r3
 800592c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005930:	fab3 f383 	clz	r3, r3
 8005934:	b2db      	uxtb	r3, r3
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	b2db      	uxtb	r3, r3
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d102      	bne.n	800594a <HAL_RCC_ClockConfig+0xa6>
 8005944:	4b6f      	ldr	r3, [pc, #444]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	e00f      	b.n	800596a <HAL_RCC_ClockConfig+0xc6>
 800594a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800594e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005952:	fa93 f3a3 	rbit	r3, r3
 8005956:	667b      	str	r3, [r7, #100]	; 0x64
 8005958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800595c:	663b      	str	r3, [r7, #96]	; 0x60
 800595e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005960:	fa93 f3a3 	rbit	r3, r3
 8005964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005966:	4b67      	ldr	r3, [pc, #412]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800596e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005972:	fa92 f2a2 	rbit	r2, r2
 8005976:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800597a:	fab2 f282 	clz	r2, r2
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	f042 0220 	orr.w	r2, r2, #32
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	f002 021f 	and.w	r2, r2, #31
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d17b      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e0f3      	b.n	8005b82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d13c      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x178>
 80059a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059aa:	fa93 f3a3 	rbit	r3, r3
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b2:	fab3 f383 	clz	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d102      	bne.n	80059cc <HAL_RCC_ClockConfig+0x128>
 80059c6:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	e00f      	b.n	80059ec <HAL_RCC_ClockConfig+0x148>
 80059cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d4:	fa93 f3a3 	rbit	r3, r3
 80059d8:	647b      	str	r3, [r7, #68]	; 0x44
 80059da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059de:	643b      	str	r3, [r7, #64]	; 0x40
 80059e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e2:	fa93 f3a3 	rbit	r3, r3
 80059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e8:	4b46      	ldr	r3, [pc, #280]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80059f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f4:	fa92 f2a2 	rbit	r2, r2
 80059f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80059fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059fc:	fab2 f282 	clz	r2, r2
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	f042 0220 	orr.w	r2, r2, #32
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	f002 021f 	and.w	r2, r2, #31
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d13a      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0b2      	b.n	8005b82 <HAL_RCC_ClockConfig+0x2de>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	fa93 f3a3 	rbit	r3, r3
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2a:	fab3 f383 	clz	r3, r3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d102      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x1a0>
 8005a3e:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	e00d      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1bc>
 8005a44:	2302      	movs	r3, #2
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	fa93 f3a3 	rbit	r3, r3
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	2302      	movs	r3, #2
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	fa93 f3a3 	rbit	r3, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	4b29      	ldr	r3, [pc, #164]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2202      	movs	r2, #2
 8005a62:	61ba      	str	r2, [r7, #24]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	fa92 f2a2 	rbit	r2, r2
 8005a6a:	617a      	str	r2, [r7, #20]
  return result;
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	fab2 f282 	clz	r2, r2
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	f042 0220 	orr.w	r2, r2, #32
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	f002 021f 	and.w	r2, r2, #31
 8005a7e:	2101      	movs	r1, #1
 8005a80:	fa01 f202 	lsl.w	r2, r1, r2
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e079      	b.n	8005b82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	491a      	ldr	r1, [pc, #104]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa0:	f7fe fbea 	bl	8004278 <HAL_GetTick>
 8005aa4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa6:	e00a      	b.n	8005abe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa8:	f7fe fbe6 	bl	8004278 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e061      	b.n	8005b82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <HAL_RCC_ClockConfig+0x260>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 020c 	and.w	r2, r3, #12
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d1eb      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d214      	bcs.n	8005b08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 0207 	bic.w	r2, r3, #7
 8005ae6:	4906      	ldr	r1, [pc, #24]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aee:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <HAL_RCC_ClockConfig+0x25c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d005      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e040      	b.n	8005b82 <HAL_RCC_ClockConfig+0x2de>
 8005b00:	40022000 	.word	0x40022000
 8005b04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b14:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_RCC_ClockConfig+0x2e8>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	491a      	ldr	r1, [pc, #104]	; (8005b8c <HAL_RCC_ClockConfig+0x2e8>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b32:	4b16      	ldr	r3, [pc, #88]	; (8005b8c <HAL_RCC_ClockConfig+0x2e8>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4912      	ldr	r1, [pc, #72]	; (8005b8c <HAL_RCC_ClockConfig+0x2e8>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b46:	f000 f829 	bl	8005b9c <HAL_RCC_GetSysClockFreq>
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <HAL_RCC_ClockConfig+0x2e8>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b54:	22f0      	movs	r2, #240	; 0xf0
 8005b56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	fa92 f2a2 	rbit	r2, r2
 8005b5e:	60fa      	str	r2, [r7, #12]
  return result;
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	fab2 f282 	clz	r2, r2
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	40d3      	lsrs	r3, r2
 8005b6a:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <HAL_RCC_ClockConfig+0x2ec>)
 8005b6c:	5cd3      	ldrb	r3, [r2, r3]
 8005b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b72:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <HAL_RCC_ClockConfig+0x2f0>)
 8005b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <HAL_RCC_ClockConfig+0x2f4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fb4c 	bl	8004218 <HAL_InitTick>
  
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3778      	adds	r7, #120	; 0x78
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	08007f10 	.word	0x08007f10
 8005b94:	20000000 	.word	0x20000000
 8005b98:	20000004 	.word	0x20000004

08005b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b08b      	sub	sp, #44	; 0x2c
 8005ba0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x30>
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x36>
 8005bca:	e03f      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005bce:	623b      	str	r3, [r7, #32]
      break;
 8005bd0:	e03f      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005bd8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005bdc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	fa92 f2a2 	rbit	r2, r2
 8005be4:	607a      	str	r2, [r7, #4]
  return result;
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	fab2 f282 	clz	r2, r2
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	40d3      	lsrs	r3, r2
 8005bf0:	4a1d      	ldr	r2, [pc, #116]	; (8005c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bf2:	5cd3      	ldrb	r3, [r2, r3]
 8005bf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	; (8005c60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	220f      	movs	r2, #15
 8005c00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	fa92 f2a2 	rbit	r2, r2
 8005c08:	60fa      	str	r2, [r7, #12]
  return result;
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	fab2 f282 	clz	r2, r2
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	40d3      	lsrs	r3, r2
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c16:	5cd3      	ldrb	r3, [r2, r3]
 8005c18:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	e007      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c36:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	fb02 f303 	mul.w	r3, r2, r3
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	623b      	str	r3, [r7, #32]
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c4e:	623b      	str	r3, [r7, #32]
      break;
 8005c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c52:	6a3b      	ldr	r3, [r7, #32]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	372c      	adds	r7, #44	; 0x2c
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000
 8005c64:	007a1200 	.word	0x007a1200
 8005c68:	08007f28 	.word	0x08007f28
 8005c6c:	08007f38 	.word	0x08007f38

08005c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c74:	4b02      	ldr	r3, [pc, #8]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	20000000 	.word	0x20000000

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c8a:	f7ff fff1 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005c8e:	4601      	mov	r1, r0
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c98:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	fa92 f2a2 	rbit	r2, r2
 8005ca4:	603a      	str	r2, [r7, #0]
  return result;
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	fab2 f282 	clz	r2, r2
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	40d3      	lsrs	r3, r2
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005cb2:	5cd3      	ldrb	r3, [r2, r3]
 8005cb4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	08007f20 	.word	0x08007f20

08005cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005cce:	f7ff ffcf 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005cdc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005ce0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	fa92 f2a2 	rbit	r2, r2
 8005ce8:	603a      	str	r2, [r7, #0]
  return result;
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	fab2 f282 	clz	r2, r2
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	40d3      	lsrs	r3, r2
 8005cf4:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005cf6:	5cd3      	ldrb	r3, [r2, r3]
 8005cf8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	08007f20 	.word	0x08007f20

08005d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b092      	sub	sp, #72	; 0x48
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80d4 	beq.w	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d30:	4b4e      	ldr	r3, [pc, #312]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10e      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3c:	4b4b      	ldr	r3, [pc, #300]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4a4a      	ldr	r2, [pc, #296]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d46:	61d3      	str	r3, [r2, #28]
 8005d48:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d118      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d66:	4b42      	ldr	r3, [pc, #264]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a41      	ldr	r2, [pc, #260]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d72:	f7fe fa81 	bl	8004278 <HAL_GetTick>
 8005d76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d78:	e008      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7a:	f7fe fa7d 	bl	8004278 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b64      	cmp	r3, #100	; 0x64
 8005d86:	d901      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e1d6      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d98:	4b34      	ldr	r3, [pc, #208]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8084 	beq.w	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d07c      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db8:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	fa93 f3a3 	rbit	r3, r3
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dd2:	fab3 f383 	clz	r3, r3
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b26      	ldr	r3, [pc, #152]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	461a      	mov	r2, r3
 8005de2:	2301      	movs	r3, #1
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	fa93 f3a3 	rbit	r3, r3
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005df6:	fab3 f383 	clz	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e0a:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d04b      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1a:	f7fe fa2d 	bl	8004278 <HAL_GetTick>
 8005e1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e20:	e00a      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e22:	f7fe fa29 	bl	8004278 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e180      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	fa93 f3a3 	rbit	r3, r3
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
 8005e44:	2302      	movs	r3, #2
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	fa93 f3a3 	rbit	r3, r3
 8005e4e:	61fb      	str	r3, [r7, #28]
  return result;
 8005e50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e52:	fab3 f383 	clz	r3, r3
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d108      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005e66:	4b01      	ldr	r3, [pc, #4]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	e00d      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	40007000 	.word	0x40007000
 8005e74:	10908100 	.word	0x10908100
 8005e78:	2302      	movs	r3, #2
 8005e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	fa93 f3a3 	rbit	r3, r3
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	4b9a      	ldr	r3, [pc, #616]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2202      	movs	r2, #2
 8005e8a:	613a      	str	r2, [r7, #16]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	fa92 f2a2 	rbit	r2, r2
 8005e92:	60fa      	str	r2, [r7, #12]
  return result;
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	fab2 f282 	clz	r2, r2
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	f002 021f 	and.w	r2, r2, #31
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0b7      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005eb2:	4b8f      	ldr	r3, [pc, #572]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	498c      	ldr	r1, [pc, #560]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ecc:	4b88      	ldr	r3, [pc, #544]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4a87      	ldr	r2, [pc, #540]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee4:	4b82      	ldr	r3, [pc, #520]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	f023 0203 	bic.w	r2, r3, #3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	497f      	ldr	r1, [pc, #508]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d008      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f02:	4b7b      	ldr	r3, [pc, #492]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4978      	ldr	r1, [pc, #480]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f20:	4b73      	ldr	r3, [pc, #460]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	4970      	ldr	r1, [pc, #448]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f3e:	4b6c      	ldr	r3, [pc, #432]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	f023 0210 	bic.w	r2, r3, #16
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	4969      	ldr	r1, [pc, #420]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005f5c:	4b64      	ldr	r3, [pc, #400]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	4961      	ldr	r1, [pc, #388]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f7a:	4b5d      	ldr	r3, [pc, #372]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f023 0220 	bic.w	r2, r3, #32
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	495a      	ldr	r1, [pc, #360]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f98:	4b55      	ldr	r3, [pc, #340]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	4952      	ldr	r1, [pc, #328]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d008      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fb6:	4b4e      	ldr	r3, [pc, #312]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	494b      	ldr	r1, [pc, #300]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fd4:	4b46      	ldr	r3, [pc, #280]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	4943      	ldr	r1, [pc, #268]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ff2:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	493c      	ldr	r1, [pc, #240]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006010:	4b37      	ldr	r3, [pc, #220]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	4934      	ldr	r1, [pc, #208]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800601e:	4313      	orrs	r3, r2
 8006020:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800602e:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	492d      	ldr	r1, [pc, #180]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800603c:	4313      	orrs	r3, r2
 800603e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800604c:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006058:	4925      	ldr	r1, [pc, #148]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800605a:	4313      	orrs	r3, r2
 800605c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800606a:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	491e      	ldr	r1, [pc, #120]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006078:	4313      	orrs	r3, r2
 800607a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006088:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	4916      	ldr	r1, [pc, #88]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006096:	4313      	orrs	r3, r2
 8006098:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80060a6:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	490f      	ldr	r1, [pc, #60]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d0:	4907      	ldr	r1, [pc, #28]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80060e2:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	e002      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f6:	4913      	ldr	r1, [pc, #76]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006114:	490b      	ldr	r1, [pc, #44]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006116:	4313      	orrs	r3, r2
 8006118:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	4904      	ldr	r1, [pc, #16]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006134:	4313      	orrs	r3, r2
 8006136:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3748      	adds	r7, #72	; 0x48
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40021000 	.word	0x40021000

08006148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800614c:	e7fe      	b.n	800614c <NMI_Handler+0x4>

0800614e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800614e:	b480      	push	{r7}
 8006150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006152:	e7fe      	b.n	8006152 <HardFault_Handler+0x4>

08006154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006158:	e7fe      	b.n	8006158 <MemManage_Handler+0x4>

0800615a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800615a:	b480      	push	{r7}
 800615c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800615e:	e7fe      	b.n	800615e <BusFault_Handler+0x4>

08006160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006164:	e7fe      	b.n	8006164 <UsageFault_Handler+0x4>

08006166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006166:	b480      	push	{r7}
 8006168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006172:	b480      	push	{r7}
 8006174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr

0800617e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800617e:	b480      	push	{r7}
 8006180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr
	...

0800618c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006190:	4802      	ldr	r0, [pc, #8]	; (800619c <ADC1_2_IRQHandler+0x10>)
 8006192:	f7fb f8ff 	bl	8001394 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006196:	bf00      	nop
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200000a8 	.word	0x200000a8

080061a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80061a4:	4802      	ldr	r0, [pc, #8]	; (80061b0 <TIM3_IRQHandler+0x10>)
 80061a6:	f7fc fe03 	bl	8002db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000054 	.word	0x20000054

080061b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80061b8:	4802      	ldr	r0, [pc, #8]	; (80061c4 <I2C1_EV_IRQHandler+0x10>)
 80061ba:	f7fd fee5 	bl	8003f88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000114 	.word	0x20000114

080061c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061cc:	4802      	ldr	r0, [pc, #8]	; (80061d8 <USART1_IRQHandler+0x10>)
 80061ce:	f000 faaf 	bl	8006730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	2000021c 	.word	0x2000021c

080061dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061e0:	4802      	ldr	r0, [pc, #8]	; (80061ec <USART2_IRQHandler+0x10>)
 80061e2:	f000 faa5 	bl	8006730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80061e6:	bf00      	nop
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200002a0 	.word	0x200002a0

080061f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80061f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80061f8:	f7fc fa02 	bl	8002600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80061fc:	bf00      	nop
 80061fe:	bd80      	pop	{r7, pc}

08006200 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8006204:	4802      	ldr	r0, [pc, #8]	; (8006210 <SPI3_IRQHandler+0x10>)
 8006206:	f000 f8e7 	bl	80063d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800620a:	bf00      	nop
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000190 	.word	0x20000190

08006214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0c1      	b.n	80063aa <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006236:	d009      	beq.n	800624c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	61da      	str	r2, [r3, #28]
 800623e:	e005      	b.n	800624c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d12a      	bne.n	80062b4 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a52      	ldr	r2, [pc, #328]	; (80063b4 <HAL_SPI_Init+0x1a0>)
 800626a:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a52      	ldr	r2, [pc, #328]	; (80063b8 <HAL_SPI_Init+0x1a4>)
 8006270:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a51      	ldr	r2, [pc, #324]	; (80063bc <HAL_SPI_Init+0x1a8>)
 8006276:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a51      	ldr	r2, [pc, #324]	; (80063c0 <HAL_SPI_Init+0x1ac>)
 800627c:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a50      	ldr	r2, [pc, #320]	; (80063c4 <HAL_SPI_Init+0x1b0>)
 8006282:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a50      	ldr	r2, [pc, #320]	; (80063c8 <HAL_SPI_Init+0x1b4>)
 8006288:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a4f      	ldr	r2, [pc, #316]	; (80063cc <HAL_SPI_Init+0x1b8>)
 800628e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a4f      	ldr	r2, [pc, #316]	; (80063d0 <HAL_SPI_Init+0x1bc>)
 8006294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a4b      	ldr	r2, [pc, #300]	; (80063d4 <HAL_SPI_Init+0x1c0>)
 80062a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062d4:	d902      	bls.n	80062dc <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e002      	b.n	80062e2 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80062ea:	d007      	beq.n	80062fc <HAL_SPI_Init+0xe8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062f4:	d002      	beq.n	80062fc <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	ea42 0103 	orr.w	r1, r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	f003 0204 	and.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006378:	ea42 0103 	orr.w	r1, r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006398:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	080065d9 	.word	0x080065d9
 80063b8:	080065eb 	.word	0x080065eb
 80063bc:	080065fd 	.word	0x080065fd
 80063c0:	0800660f 	.word	0x0800660f
 80063c4:	08006621 	.word	0x08006621
 80063c8:	08006633 	.word	0x08006633
 80063cc:	08006645 	.word	0x08006645
 80063d0:	08006657 	.word	0x08006657
 80063d4:	08004611 	.word	0x08004611

080063d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	099b      	lsrs	r3, r3, #6
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10f      	bne.n	800641c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	099b      	lsrs	r3, r3, #6
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
    return;
 800641a:	e0d8      	b.n	80065ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <HAL_SPI_IRQHandler+0x66>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	09db      	lsrs	r3, r3, #7
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
    return;
 800643c:	e0c7      	b.n	80065ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10c      	bne.n	8006464 <HAL_SPI_IRQHandler+0x8c>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	099b      	lsrs	r3, r3, #6
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80b5 	beq.w	80065ce <HAL_SPI_IRQHandler+0x1f6>
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80ae 	beq.w	80065ce <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	099b      	lsrs	r3, r3, #6
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d023      	beq.n	80064c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b03      	cmp	r3, #3
 8006488:	d011      	beq.n	80064ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648e:	f043 0204 	orr.w	r2, r3, #4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	e00b      	b.n	80064c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	693b      	ldr	r3, [r7, #16]
        return;
 80064c4:	e083      	b.n	80065ce <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d014      	beq.n	80064fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d6:	f043 0201 	orr.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650c:	f043 0208 	orr.w	r2, r3, #8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006514:	2300      	movs	r3, #0
 8006516:	60bb      	str	r3, [r7, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006526:	2b00      	cmp	r3, #0
 8006528:	d050      	beq.n	80065cc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006538:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <HAL_SPI_IRQHandler+0x17e>
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d034      	beq.n	80065c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0203 	bic.w	r2, r2, #3
 8006564:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656a:	2b00      	cmp	r3, #0
 800656c:	d011      	beq.n	8006592 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006572:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <HAL_SPI_IRQHandler+0x1fc>)
 8006574:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	4618      	mov	r0, r3
 800657c:	f7fc f890 	bl	80026a0 <HAL_DMA_Abort_IT>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	2b00      	cmp	r3, #0
 8006598:	d017      	beq.n	80065ca <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	4a0d      	ldr	r2, [pc, #52]	; (80065d4 <HAL_SPI_IRQHandler+0x1fc>)
 80065a0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fc f87a 	bl	80026a0 <HAL_DMA_Abort_IT>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80065be:	e004      	b.n	80065ca <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80065c8:	e000      	b.n	80065cc <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80065ca:	bf00      	nop
    return;
 80065cc:	bf00      	nop
  }
}
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	08006669 	.word	0x08006669

080065d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr

080065ea <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr

0800660e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr

08006632 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr

08006644 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr

08006656 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr

08006668 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e040      	b.n	8006728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fe f81c 	bl	80046f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	; 0x24
 80066c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fb28 	bl	8006d28 <UART_SetConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e022      	b.n	8006728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fcf2 	bl	80070d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fd78 	bl	8007216 <UART_CheckIdleState>
 8006726:	4603      	mov	r3, r0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b0ba      	sub	sp, #232	; 0xe8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006756:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800675a:	f640 030f 	movw	r3, #2063	; 0x80f
 800675e:	4013      	ands	r3, r2
 8006760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d115      	bne.n	8006798 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00f      	beq.n	8006798 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 82a3 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
      }
      return;
 8006796:	e29d      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8117 	beq.w	80069d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80067b2:	4b85      	ldr	r3, [pc, #532]	; (80069c8 <HAL_UART_IRQHandler+0x298>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 810a 	beq.w	80069d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d011      	beq.n	80067ec <HAL_UART_IRQHandler+0xbc>
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2201      	movs	r2, #1
 80067da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d011      	beq.n	800681c <HAL_UART_IRQHandler+0xec>
 80067f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2202      	movs	r2, #2
 800680a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006812:	f043 0204 	orr.w	r2, r3, #4
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d011      	beq.n	800684c <HAL_UART_IRQHandler+0x11c>
 8006828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2204      	movs	r2, #4
 800683a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006842:	f043 0202 	orr.w	r2, r3, #2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800684c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d017      	beq.n	8006888 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006868:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2208      	movs	r2, #8
 8006876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800687e:	f043 0208 	orr.w	r2, r3, #8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006890:	2b00      	cmp	r3, #0
 8006892:	d012      	beq.n	80068ba <HAL_UART_IRQHandler+0x18a>
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8209 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d005      	beq.n	8006912 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800690a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800690e:	2b00      	cmp	r3, #0
 8006910:	d04f      	beq.n	80069b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fd8c 	bl	8007430 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b40      	cmp	r3, #64	; 0x40
 8006924:	d141      	bne.n	80069aa <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800693c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800695e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800696a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1d9      	bne.n	8006926 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	2b00      	cmp	r3, #0
 8006978:	d013      	beq.n	80069a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	4a13      	ldr	r2, [pc, #76]	; (80069cc <HAL_UART_IRQHandler+0x29c>)
 8006980:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	4618      	mov	r0, r3
 8006988:	f7fb fe8a 	bl	80026a0 <HAL_DMA_Abort_IT>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d017      	beq.n	80069c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a0:	e00f      	b.n	80069c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f9ab 	bl	8006cfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a8:	e00b      	b.n	80069c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9a7 	bl	8006cfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b0:	e007      	b.n	80069c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9a3 	bl	8006cfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80069c0:	e18a      	b.n	8006cd8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c2:	bf00      	nop
    return;
 80069c4:	e188      	b.n	8006cd8 <HAL_UART_IRQHandler+0x5a8>
 80069c6:	bf00      	nop
 80069c8:	04000120 	.word	0x04000120
 80069cc:	080074f5 	.word	0x080074f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	f040 8143 	bne.w	8006c60 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 813c 	beq.w	8006c60 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8135 	beq.w	8006c60 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2210      	movs	r2, #16
 80069fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	f040 80b1 	bne.w	8006b70 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 815c 	beq.w	8006cdc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	f080 8154 	bcs.w	8006cdc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	f000 8085 	beq.w	8006b54 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1da      	bne.n	8006a4a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ab8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006abc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ac0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e1      	bne.n	8006a94 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3308      	adds	r3, #8
 8006af0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006af4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e3      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b24:	f023 0310 	bic.w	r3, r3, #16
 8006b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b36:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e4      	bne.n	8006b14 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fb fd6e 	bl	8002630 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f8d1 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b6e:	e0b5      	b.n	8006cdc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80a7 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006b92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80a2 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e4      	bne.n	8006b9c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	623b      	str	r3, [r7, #32]
   return(result);
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e3      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f023 0310 	bic.w	r3, r3, #16
 8006c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	69b9      	ldr	r1, [r7, #24]
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e4      	bne.n	8006c1c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f859 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c5e:	e03f      	b.n	8006ce0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <HAL_UART_IRQHandler+0x55a>
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fc76 	bl	8007574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c88:	e02d      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01c      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
    }
    return;
 8006cb2:	e017      	b.n	8006ce4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d012      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fc27 	bl	8007520 <UART_EndTransmit_IT>
    return;
 8006cd2:	e008      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006cd4:	bf00      	nop
 8006cd6:	e006      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006cd8:	bf00      	nop
 8006cda:	e004      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006cdc:	bf00      	nop
 8006cde:	e002      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006ce4:	bf00      	nop
  }

}
 8006ce6:	37e8      	adds	r7, #232	; 0xe8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
	...

08006d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b92      	ldr	r3, [pc, #584]	; (8006f9c <UART_SetConfig+0x274>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	6979      	ldr	r1, [r7, #20]
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a80      	ldr	r2, [pc, #512]	; (8006fa0 <UART_SetConfig+0x278>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d120      	bne.n	8006de6 <UART_SetConfig+0xbe>
 8006da4:	4b7f      	ldr	r3, [pc, #508]	; (8006fa4 <UART_SetConfig+0x27c>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d817      	bhi.n	8006de0 <UART_SetConfig+0xb8>
 8006db0:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <UART_SetConfig+0x90>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006dd5 	.word	0x08006dd5
 8006dc0:	08006ddb 	.word	0x08006ddb
 8006dc4:	08006dcf 	.word	0x08006dcf
 8006dc8:	2301      	movs	r3, #1
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e0b5      	b.n	8006f3a <UART_SetConfig+0x212>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e0b2      	b.n	8006f3a <UART_SetConfig+0x212>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e0af      	b.n	8006f3a <UART_SetConfig+0x212>
 8006dda:	2308      	movs	r3, #8
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e0ac      	b.n	8006f3a <UART_SetConfig+0x212>
 8006de0:	2310      	movs	r3, #16
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e0a9      	b.n	8006f3a <UART_SetConfig+0x212>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6f      	ldr	r2, [pc, #444]	; (8006fa8 <UART_SetConfig+0x280>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d124      	bne.n	8006e3a <UART_SetConfig+0x112>
 8006df0:	4b6c      	ldr	r3, [pc, #432]	; (8006fa4 <UART_SetConfig+0x27c>)
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dfc:	d011      	beq.n	8006e22 <UART_SetConfig+0xfa>
 8006dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e02:	d817      	bhi.n	8006e34 <UART_SetConfig+0x10c>
 8006e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e08:	d011      	beq.n	8006e2e <UART_SetConfig+0x106>
 8006e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e0e:	d811      	bhi.n	8006e34 <UART_SetConfig+0x10c>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <UART_SetConfig+0xf4>
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e18:	d006      	beq.n	8006e28 <UART_SetConfig+0x100>
 8006e1a:	e00b      	b.n	8006e34 <UART_SetConfig+0x10c>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e08b      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e22:	2302      	movs	r3, #2
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e088      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e085      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e082      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e34:	2310      	movs	r3, #16
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e07f      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a5b      	ldr	r2, [pc, #364]	; (8006fac <UART_SetConfig+0x284>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d124      	bne.n	8006e8e <UART_SetConfig+0x166>
 8006e44:	4b57      	ldr	r3, [pc, #348]	; (8006fa4 <UART_SetConfig+0x27c>)
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e50:	d011      	beq.n	8006e76 <UART_SetConfig+0x14e>
 8006e52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e56:	d817      	bhi.n	8006e88 <UART_SetConfig+0x160>
 8006e58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e5c:	d011      	beq.n	8006e82 <UART_SetConfig+0x15a>
 8006e5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e62:	d811      	bhi.n	8006e88 <UART_SetConfig+0x160>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <UART_SetConfig+0x148>
 8006e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e6c:	d006      	beq.n	8006e7c <UART_SetConfig+0x154>
 8006e6e:	e00b      	b.n	8006e88 <UART_SetConfig+0x160>
 8006e70:	2300      	movs	r3, #0
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e061      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e76:	2302      	movs	r3, #2
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e05e      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e05b      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e82:	2308      	movs	r3, #8
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e058      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e055      	b.n	8006f3a <UART_SetConfig+0x212>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a47      	ldr	r2, [pc, #284]	; (8006fb0 <UART_SetConfig+0x288>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d124      	bne.n	8006ee2 <UART_SetConfig+0x1ba>
 8006e98:	4b42      	ldr	r3, [pc, #264]	; (8006fa4 <UART_SetConfig+0x27c>)
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ea4:	d011      	beq.n	8006eca <UART_SetConfig+0x1a2>
 8006ea6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eaa:	d817      	bhi.n	8006edc <UART_SetConfig+0x1b4>
 8006eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eb0:	d011      	beq.n	8006ed6 <UART_SetConfig+0x1ae>
 8006eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eb6:	d811      	bhi.n	8006edc <UART_SetConfig+0x1b4>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <UART_SetConfig+0x19c>
 8006ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec0:	d006      	beq.n	8006ed0 <UART_SetConfig+0x1a8>
 8006ec2:	e00b      	b.n	8006edc <UART_SetConfig+0x1b4>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e037      	b.n	8006f3a <UART_SetConfig+0x212>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e034      	b.n	8006f3a <UART_SetConfig+0x212>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e031      	b.n	8006f3a <UART_SetConfig+0x212>
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	77fb      	strb	r3, [r7, #31]
 8006eda:	e02e      	b.n	8006f3a <UART_SetConfig+0x212>
 8006edc:	2310      	movs	r3, #16
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e02b      	b.n	8006f3a <UART_SetConfig+0x212>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a33      	ldr	r2, [pc, #204]	; (8006fb4 <UART_SetConfig+0x28c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d124      	bne.n	8006f36 <UART_SetConfig+0x20e>
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <UART_SetConfig+0x27c>)
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ef4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ef8:	d011      	beq.n	8006f1e <UART_SetConfig+0x1f6>
 8006efa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006efe:	d817      	bhi.n	8006f30 <UART_SetConfig+0x208>
 8006f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f04:	d011      	beq.n	8006f2a <UART_SetConfig+0x202>
 8006f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f0a:	d811      	bhi.n	8006f30 <UART_SetConfig+0x208>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <UART_SetConfig+0x1f0>
 8006f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f14:	d006      	beq.n	8006f24 <UART_SetConfig+0x1fc>
 8006f16:	e00b      	b.n	8006f30 <UART_SetConfig+0x208>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e00d      	b.n	8006f3a <UART_SetConfig+0x212>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e00a      	b.n	8006f3a <UART_SetConfig+0x212>
 8006f24:	2304      	movs	r3, #4
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e007      	b.n	8006f3a <UART_SetConfig+0x212>
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e004      	b.n	8006f3a <UART_SetConfig+0x212>
 8006f30:	2310      	movs	r3, #16
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e001      	b.n	8006f3a <UART_SetConfig+0x212>
 8006f36:	2310      	movs	r3, #16
 8006f38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f42:	d16c      	bne.n	800701e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006f44:	7ffb      	ldrb	r3, [r7, #31]
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d838      	bhi.n	8006fbc <UART_SetConfig+0x294>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <UART_SetConfig+0x228>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	08006fbd 	.word	0x08006fbd
 8006f60:	08006f8b 	.word	0x08006f8b
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006fbd 	.word	0x08006fbd
 8006f70:	08006f93 	.word	0x08006f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f74:	f7fe fe86 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8006f78:	61b8      	str	r0, [r7, #24]
        break;
 8006f7a:	e024      	b.n	8006fc6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fe fea4 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 8006f80:	61b8      	str	r0, [r7, #24]
        break;
 8006f82:	e020      	b.n	8006fc6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <UART_SetConfig+0x290>)
 8006f86:	61bb      	str	r3, [r7, #24]
        break;
 8006f88:	e01d      	b.n	8006fc6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8a:	f7fe fe07 	bl	8005b9c <HAL_RCC_GetSysClockFreq>
 8006f8e:	61b8      	str	r0, [r7, #24]
        break;
 8006f90:	e019      	b.n	8006fc6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f96:	61bb      	str	r3, [r7, #24]
        break;
 8006f98:	e015      	b.n	8006fc6 <UART_SetConfig+0x29e>
 8006f9a:	bf00      	nop
 8006f9c:	efff69f3 	.word	0xefff69f3
 8006fa0:	40013800 	.word	0x40013800
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	40004400 	.word	0x40004400
 8006fac:	40004800 	.word	0x40004800
 8006fb0:	40004c00 	.word	0x40004c00
 8006fb4:	40005000 	.word	0x40005000
 8006fb8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	77bb      	strb	r3, [r7, #30]
        break;
 8006fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d075      	beq.n	80070b8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	005a      	lsls	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	441a      	add	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b0f      	cmp	r3, #15
 8006fe8:	d916      	bls.n	8007018 <UART_SetConfig+0x2f0>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff0:	d212      	bcs.n	8007018 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f023 030f 	bic.w	r3, r3, #15
 8006ffa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	b29b      	uxth	r3, r3
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	b29a      	uxth	r2, r3
 8007008:	89fb      	ldrh	r3, [r7, #14]
 800700a:	4313      	orrs	r3, r2
 800700c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	89fa      	ldrh	r2, [r7, #14]
 8007014:	60da      	str	r2, [r3, #12]
 8007016:	e04f      	b.n	80070b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	77bb      	strb	r3, [r7, #30]
 800701c:	e04c      	b.n	80070b8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800701e:	7ffb      	ldrb	r3, [r7, #31]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d828      	bhi.n	8007076 <UART_SetConfig+0x34e>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0x304>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	08007051 	.word	0x08007051
 8007030:	08007059 	.word	0x08007059
 8007034:	08007061 	.word	0x08007061
 8007038:	08007077 	.word	0x08007077
 800703c:	08007067 	.word	0x08007067
 8007040:	08007077 	.word	0x08007077
 8007044:	08007077 	.word	0x08007077
 8007048:	08007077 	.word	0x08007077
 800704c:	0800706f 	.word	0x0800706f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007050:	f7fe fe18 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8007054:	61b8      	str	r0, [r7, #24]
        break;
 8007056:	e013      	b.n	8007080 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007058:	f7fe fe36 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 800705c:	61b8      	str	r0, [r7, #24]
        break;
 800705e:	e00f      	b.n	8007080 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007060:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <UART_SetConfig+0x3a8>)
 8007062:	61bb      	str	r3, [r7, #24]
        break;
 8007064:	e00c      	b.n	8007080 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007066:	f7fe fd99 	bl	8005b9c <HAL_RCC_GetSysClockFreq>
 800706a:	61b8      	str	r0, [r7, #24]
        break;
 800706c:	e008      	b.n	8007080 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007072:	61bb      	str	r3, [r7, #24]
        break;
 8007074:	e004      	b.n	8007080 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	77bb      	strb	r3, [r7, #30]
        break;
 800707e:	bf00      	nop
    }

    if (pclk != 0U)
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d018      	beq.n	80070b8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	085a      	lsrs	r2, r3, #1
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	441a      	add	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	b29b      	uxth	r3, r3
 800709a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b0f      	cmp	r3, #15
 80070a0:	d908      	bls.n	80070b4 <UART_SetConfig+0x38c>
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d204      	bcs.n	80070b4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	e001      	b.n	80070b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3720      	adds	r7, #32
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	007a1200 	.word	0x007a1200

080070d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01a      	beq.n	80071ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d2:	d10a      	bne.n	80071ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
  }
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b086      	sub	sp, #24
 800721a:	af02      	add	r7, sp, #8
 800721c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007226:	f7fd f827 	bl	8004278 <HAL_GetTick>
 800722a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b08      	cmp	r3, #8
 8007238:	d10e      	bne.n	8007258 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800723a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f82d 	bl	80072a8 <UART_WaitOnFlagUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e023      	b.n	80072a0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b04      	cmp	r3, #4
 8007264:	d10e      	bne.n	8007284 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f817 	bl	80072a8 <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e00d      	b.n	80072a0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b09c      	sub	sp, #112	; 0x70
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b8:	e0a5      	b.n	8007406 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	f000 80a1 	beq.w	8007406 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c4:	f7fc ffd8 	bl	8004278 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d302      	bcc.n	80072da <UART_WaitOnFlagUntilTimeout+0x32>
 80072d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d13e      	bne.n	8007358 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072ee:	667b      	str	r3, [r7, #100]	; 0x64
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e6      	bne.n	80072da <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	663b      	str	r3, [r7, #96]	; 0x60
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800732c:	64ba      	str	r2, [r7, #72]	; 0x48
 800732e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800733a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e067      	b.n	8007428 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d04f      	beq.n	8007406 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007374:	d147      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800737e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
 80073a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	613b      	str	r3, [r7, #16]
   return(result);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073d2:	623a      	str	r2, [r7, #32]
 80073d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	69f9      	ldr	r1, [r7, #28]
 80073d8:	6a3a      	ldr	r2, [r7, #32]
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	61bb      	str	r3, [r7, #24]
   return(result);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e010      	b.n	8007428 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4013      	ands	r3, r2
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	429a      	cmp	r2, r3
 8007414:	bf0c      	ite	eq
 8007416:	2301      	moveq	r3, #1
 8007418:	2300      	movne	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	429a      	cmp	r2, r3
 8007422:	f43f af4a 	beq.w	80072ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3770      	adds	r7, #112	; 0x70
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b095      	sub	sp, #84	; 0x54
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800744c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007456:	643b      	str	r3, [r7, #64]	; 0x40
 8007458:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800745c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e6      	bne.n	8007438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3308      	adds	r3, #8
 8007470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	61fb      	str	r3, [r7, #28]
   return(result);
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f023 0301 	bic.w	r3, r3, #1
 8007480:	64bb      	str	r3, [r7, #72]	; 0x48
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800748a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800748c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e5      	bne.n	800746a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d118      	bne.n	80074d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f023 0310 	bic.w	r3, r3, #16
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	613b      	str	r3, [r7, #16]
   return(result);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e6      	bne.n	80074a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074ea:	bf00      	nop
 80074ec:	3754      	adds	r7, #84	; 0x54
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fbf3 	bl	8006cfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	60bb      	str	r3, [r7, #8]
   return(result);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6979      	ldr	r1, [r7, #20]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	613b      	str	r3, [r7, #16]
   return(result);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e6      	bne.n	8007528 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fbc0 	bl	8006cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800756c:	bf00      	nop
 800756e:	3720      	adds	r7, #32
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr

08007586 <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 800758a:	f000 f818 	bl	80075be <SystemClock_Config>
	MX_GPIO_Init();
 800758e:	f000 f9c9 	bl	8007924 <MX_GPIO_Init>
	MX_ADC1_Init();
 8007592:	f000 f879 	bl	8007688 <MX_ADC1_Init>
	MX_I2C1_Init();
 8007596:	f000 f8e7 	bl	8007768 <MX_I2C1_Init>
	MX_SPI3_Init();
 800759a:	f000 f925 	bl	80077e8 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 800759e:	f000 f961 	bl	8007864 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80075a2:	f000 f98f 	bl	80078c4 <MX_USART2_UART_Init>
	Gpt_Init();
 80075a6:	f7fb f8b9 	bl	800271c <Gpt_Init>

	/* Init system services */
	Tm_Init();
 80075aa:	f000 fbc5 	bl	8007d38 <Tm_Init>
}
 80075ae:	bf00      	nop
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 80075b2:	b480      	push	{r7}
 80075b4:	af00      	add	r7, sp, #0

}
 80075b6:	bf00      	nop
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b0a6      	sub	sp, #152	; 0x98
 80075c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80075c8:	2228      	movs	r2, #40	; 0x28
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fc8b 	bl	8007ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	609a      	str	r2, [r3, #8]
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80075e2:	1d3b      	adds	r3, r7, #4
 80075e4:	2258      	movs	r2, #88	; 0x58
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fc7d 	bl	8007ee8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80075ee:	2302      	movs	r3, #2
 80075f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075f2:	2301      	movs	r3, #1
 80075f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80075f6:	2310      	movs	r3, #16
 80075f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075fc:	2302      	movs	r3, #2
 80075fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800760a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800760e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8007612:	2300      	movs	r3, #0
 8007614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007618:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd f8ed 	bl	80047fc <HAL_RCC_OscConfig>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8007628:	f000 f9d0 	bl	80079cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800762c:	230f      	movs	r3, #15
 800762e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007630:	2302      	movs	r3, #2
 8007632:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007634:	2300      	movs	r3, #0
 8007636:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800763c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800763e:	2300      	movs	r3, #0
 8007640:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007642:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe f92b 	bl	80058a4 <HAL_RCC_ClockConfig>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007654:	f000 f9ba 	bl	80079cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8007658:	23a3      	movs	r3, #163	; 0xa3
 800765a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007660:	2300      	movs	r3, #0
 8007662:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8007664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800766a:	2310      	movs	r3, #16
 800766c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800766e:	1d3b      	adds	r3, r7, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fb4b 	bl	8005d0c <HAL_RCCEx_PeriphCLKConfig>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800767c:	f000 f9a6 	bl	80079cc <Error_Handler>
  }
}
 8007680:	bf00      	nop
 8007682:	3798      	adds	r7, #152	; 0x98
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800768e:	f107 031c 	add.w	r3, r7, #28
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	605a      	str	r2, [r3, #4]
 8007698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	609a      	str	r2, [r3, #8]
 80076a4:	60da      	str	r2, [r3, #12]
 80076a6:	611a      	str	r2, [r3, #16]
 80076a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80076aa:	4b2e      	ldr	r3, [pc, #184]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80076b2:	4b2c      	ldr	r3, [pc, #176]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80076b8:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80076be:	4b29      	ldr	r3, [pc, #164]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80076c4:	4b27      	ldr	r3, [pc, #156]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80076ca:	4b26      	ldr	r3, [pc, #152]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80076d8:	4b22      	ldr	r3, [pc, #136]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076da:	2201      	movs	r2, #1
 80076dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80076de:	4b21      	ldr	r3, [pc, #132]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80076e4:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80076ea:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076f4:	2204      	movs	r2, #4
 80076f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <MX_ADC1_Init+0xdc>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <MX_ADC1_Init+0xdc>)
 8007700:	2200      	movs	r2, #0
 8007702:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007704:	4817      	ldr	r0, [pc, #92]	; (8007764 <MX_ADC1_Init+0xdc>)
 8007706:	f7f9 fc19 	bl	8000f3c <HAL_ADC_Init>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8007710:	f000 f95c 	bl	80079cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007714:	2300      	movs	r3, #0
 8007716:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007718:	f107 031c 	add.w	r3, r7, #28
 800771c:	4619      	mov	r1, r3
 800771e:	4811      	ldr	r0, [pc, #68]	; (8007764 <MX_ADC1_Init+0xdc>)
 8007720:	f7fa fc60 	bl	8001fe4 <HAL_ADCEx_MultiModeConfigChannel>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800772a:	f000 f94f 	bl	80079cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800772e:	2306      	movs	r3, #6
 8007730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007732:	2301      	movs	r3, #1
 8007734:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800773e:	2300      	movs	r3, #0
 8007740:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	4619      	mov	r1, r3
 800774a:	4806      	ldr	r0, [pc, #24]	; (8007764 <MX_ADC1_Init+0xdc>)
 800774c:	f7fa f95a 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8007756:	f000 f939 	bl	80079cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800775a:	bf00      	nop
 800775c:	3728      	adds	r7, #40	; 0x28
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200000a8 	.word	0x200000a8

08007768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800776c:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <MX_I2C1_Init+0x74>)
 800776e:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <MX_I2C1_Init+0x78>)
 8007770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8007772:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <MX_I2C1_Init+0x74>)
 8007774:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <MX_I2C1_Init+0x7c>)
 8007776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007778:	4b18      	ldr	r3, [pc, #96]	; (80077dc <MX_I2C1_Init+0x74>)
 800777a:	2200      	movs	r2, #0
 800777c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800777e:	4b17      	ldr	r3, [pc, #92]	; (80077dc <MX_I2C1_Init+0x74>)
 8007780:	2201      	movs	r2, #1
 8007782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007784:	4b15      	ldr	r3, [pc, #84]	; (80077dc <MX_I2C1_Init+0x74>)
 8007786:	2200      	movs	r2, #0
 8007788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800778a:	4b14      	ldr	r3, [pc, #80]	; (80077dc <MX_I2C1_Init+0x74>)
 800778c:	2200      	movs	r2, #0
 800778e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007790:	4b12      	ldr	r3, [pc, #72]	; (80077dc <MX_I2C1_Init+0x74>)
 8007792:	2200      	movs	r2, #0
 8007794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007796:	4b11      	ldr	r3, [pc, #68]	; (80077dc <MX_I2C1_Init+0x74>)
 8007798:	2200      	movs	r2, #0
 800779a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800779c:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <MX_I2C1_Init+0x74>)
 800779e:	2200      	movs	r2, #0
 80077a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077a2:	480e      	ldr	r0, [pc, #56]	; (80077dc <MX_I2C1_Init+0x74>)
 80077a4:	f7fc fb24 	bl	8003df0 <HAL_I2C_Init>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077ae:	f000 f90d 	bl	80079cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077b2:	2100      	movs	r1, #0
 80077b4:	4809      	ldr	r0, [pc, #36]	; (80077dc <MX_I2C1_Init+0x74>)
 80077b6:	f7fc fc5f 	bl	8004078 <HAL_I2CEx_ConfigAnalogFilter>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80077c0:	f000 f904 	bl	80079cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80077c4:	2100      	movs	r1, #0
 80077c6:	4805      	ldr	r0, [pc, #20]	; (80077dc <MX_I2C1_Init+0x74>)
 80077c8:	f7fc fca0 	bl	800410c <HAL_I2CEx_ConfigDigitalFilter>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80077d2:	f000 f8fb 	bl	80079cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80077d6:	bf00      	nop
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000114 	.word	0x20000114
 80077e0:	40005400 	.word	0x40005400
 80077e4:	00702681 	.word	0x00702681

080077e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80077ec:	4b1b      	ldr	r3, [pc, #108]	; (800785c <MX_SPI3_Init+0x74>)
 80077ee:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <MX_SPI3_Init+0x78>)
 80077f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80077f2:	4b1a      	ldr	r3, [pc, #104]	; (800785c <MX_SPI3_Init+0x74>)
 80077f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80077f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <MX_SPI3_Init+0x74>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8007800:	4b16      	ldr	r3, [pc, #88]	; (800785c <MX_SPI3_Init+0x74>)
 8007802:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007806:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007808:	4b14      	ldr	r3, [pc, #80]	; (800785c <MX_SPI3_Init+0x74>)
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <MX_SPI3_Init+0x74>)
 8007810:	2200      	movs	r2, #0
 8007812:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <MX_SPI3_Init+0x74>)
 8007816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <MX_SPI3_Init+0x74>)
 800781e:	2200      	movs	r2, #0
 8007820:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007822:	4b0e      	ldr	r3, [pc, #56]	; (800785c <MX_SPI3_Init+0x74>)
 8007824:	2200      	movs	r2, #0
 8007826:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <MX_SPI3_Init+0x74>)
 800782a:	2200      	movs	r2, #0
 800782c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800782e:	4b0b      	ldr	r3, [pc, #44]	; (800785c <MX_SPI3_Init+0x74>)
 8007830:	2200      	movs	r2, #0
 8007832:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007834:	4b09      	ldr	r3, [pc, #36]	; (800785c <MX_SPI3_Init+0x74>)
 8007836:	2207      	movs	r2, #7
 8007838:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800783a:	4b08      	ldr	r3, [pc, #32]	; (800785c <MX_SPI3_Init+0x74>)
 800783c:	2200      	movs	r2, #0
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007840:	4b06      	ldr	r3, [pc, #24]	; (800785c <MX_SPI3_Init+0x74>)
 8007842:	2208      	movs	r2, #8
 8007844:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007846:	4805      	ldr	r0, [pc, #20]	; (800785c <MX_SPI3_Init+0x74>)
 8007848:	f7fe fce4 	bl	8006214 <HAL_SPI_Init>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007852:	f000 f8bb 	bl	80079cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007856:	bf00      	nop
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000190 	.word	0x20000190
 8007860:	40003c00 	.word	0x40003c00

08007864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007868:	4b14      	ldr	r3, [pc, #80]	; (80078bc <MX_USART1_UART_Init+0x58>)
 800786a:	4a15      	ldr	r2, [pc, #84]	; (80078c0 <MX_USART1_UART_Init+0x5c>)
 800786c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <MX_USART1_UART_Init+0x58>)
 8007870:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007876:	4b11      	ldr	r3, [pc, #68]	; (80078bc <MX_USART1_UART_Init+0x58>)
 8007878:	2200      	movs	r2, #0
 800787a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <MX_USART1_UART_Init+0x58>)
 800787e:	2200      	movs	r2, #0
 8007880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <MX_USART1_UART_Init+0x58>)
 8007884:	2200      	movs	r2, #0
 8007886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <MX_USART1_UART_Init+0x58>)
 800788a:	220c      	movs	r2, #12
 800788c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <MX_USART1_UART_Init+0x58>)
 8007890:	2200      	movs	r2, #0
 8007892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <MX_USART1_UART_Init+0x58>)
 8007896:	2200      	movs	r2, #0
 8007898:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800789a:	4b08      	ldr	r3, [pc, #32]	; (80078bc <MX_USART1_UART_Init+0x58>)
 800789c:	2200      	movs	r2, #0
 800789e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <MX_USART1_UART_Init+0x58>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80078a6:	4805      	ldr	r0, [pc, #20]	; (80078bc <MX_USART1_UART_Init+0x58>)
 80078a8:	f7fe fef4 	bl	8006694 <HAL_UART_Init>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80078b2:	f000 f88b 	bl	80079cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078b6:	bf00      	nop
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	2000021c 	.word	0x2000021c
 80078c0:	40013800 	.word	0x40013800

080078c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80078c8:	4b14      	ldr	r3, [pc, #80]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <MX_USART2_UART_Init+0x5c>)
 80078cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80078d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80078d6:	4b11      	ldr	r3, [pc, #68]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078d8:	2200      	movs	r2, #0
 80078da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80078dc:	4b0f      	ldr	r3, [pc, #60]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078de:	2200      	movs	r2, #0
 80078e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80078e2:	4b0e      	ldr	r3, [pc, #56]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078ea:	220c      	movs	r2, #12
 80078ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80078f4:	4b09      	ldr	r3, [pc, #36]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <MX_USART2_UART_Init+0x58>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007900:	4b06      	ldr	r3, [pc, #24]	; (800791c <MX_USART2_UART_Init+0x58>)
 8007902:	2200      	movs	r2, #0
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007906:	4805      	ldr	r0, [pc, #20]	; (800791c <MX_USART2_UART_Init+0x58>)
 8007908:	f7fe fec4 	bl	8006694 <HAL_UART_Init>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8007912:	f000 f85b 	bl	80079cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007916:	bf00      	nop
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200002a0 	.word	0x200002a0
 8007920:	40004400 	.word	0x40004400

08007924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800792a:	f107 030c 	add.w	r3, r7, #12
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	605a      	str	r2, [r3, #4]
 8007934:	609a      	str	r2, [r3, #8]
 8007936:	60da      	str	r2, [r3, #12]
 8007938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800793a:	4b22      	ldr	r3, [pc, #136]	; (80079c4 <MX_GPIO_Init+0xa0>)
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <MX_GPIO_Init+0xa0>)
 8007940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007944:	6153      	str	r3, [r2, #20]
 8007946:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <MX_GPIO_Init+0xa0>)
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007952:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <MX_GPIO_Init+0xa0>)
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	4a1b      	ldr	r2, [pc, #108]	; (80079c4 <MX_GPIO_Init+0xa0>)
 8007958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795c:	6153      	str	r3, [r2, #20]
 800795e:	4b19      	ldr	r3, [pc, #100]	; (80079c4 <MX_GPIO_Init+0xa0>)
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007966:	607b      	str	r3, [r7, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800796a:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <MX_GPIO_Init+0xa0>)
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <MX_GPIO_Init+0xa0>)
 8007970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007974:	6153      	str	r3, [r2, #20]
 8007976:	4b13      	ldr	r3, [pc, #76]	; (80079c4 <MX_GPIO_Init+0xa0>)
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007982:	2200      	movs	r2, #0
 8007984:	2120      	movs	r1, #32
 8007986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800798a:	f7fa fe22 	bl	80025d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800798e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007994:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8007998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	4619      	mov	r1, r3
 80079a4:	4808      	ldr	r0, [pc, #32]	; (80079c8 <MX_GPIO_Init+0xa4>)
 80079a6:	f7fa fc73 	bl	8002290 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80079aa:	2200      	movs	r2, #0
 80079ac:	2100      	movs	r1, #0
 80079ae:	2028      	movs	r0, #40	; 0x28
 80079b0:	f7fc fd43 	bl	800443a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80079b4:	2028      	movs	r0, #40	; 0x28
 80079b6:	f7fc fd5c 	bl	8004472 <HAL_NVIC_EnableIRQ>

}
 80079ba:	bf00      	nop
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40021000 	.word	0x40021000
 80079c8:	48000800 	.word	0x48000800

080079cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80079d0:	b672      	cpsid	i
}
 80079d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80079d4:	e7fe      	b.n	80079d4 <Error_Handler+0x8>

080079d6 <EcuM_StartUp_Two>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_Two()
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 80079da:	f7fc fc07 	bl	80041ec <HAL_Init>
	BswM_Init();
 80079de:	f7ff fdd2 	bl	8007586 <BswM_Init>
}
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <EcuM_Init>:

int EcuM_Init(void)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	af00      	add	r7, sp, #0

	Os_Task_StartUp();
 80079ea:	f000 f97b 	bl	8007ce4 <Os_Task_StartUp>

	/* Start Scheduler */
	Os_Start();
 80079ee:	f000 f803 	bl	80079f8 <Os_Start>

	return 0;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <Os_Start>:
#include "Os_scheduler.h"
#include "Os_task.h"


void Os_Start()
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
	Os_Task_StartUp_0();
 80079fc:	f000 f8c4 	bl	8007b88 <Os_Task_StartUp_0>
	Os_Scheduler_Init();
 8007a00:	f000 f81e 	bl	8007a40 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 8007a04:	f000 f8aa 	bl	8007b5c <Os_Scheduler_Start>

	while(1)
 8007a08:	e7fe      	b.n	8007a08 <Os_Start+0x10>
	...

08007a0c <SysTick_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 8007a0c:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 8007a0e:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 8007a10:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 8007a12:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 8007a14:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 8007a16:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 8007a18:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =pCurntTcb");
 8007a1a:	4808      	ldr	r0, [pc, #32]	; (8007a3c <SysTick_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 8007a1c:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 8007a1e:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 8007a20:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 8007a22:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 8007a24:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 8007a26:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 8007a28:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 8007a2a:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8007a2c:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8007a2e:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8007a30:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8007a32:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 8007a34:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 8007a36:	b662      	cpsie	i
    __asm("BX      LR");
 8007a38:	4770      	bx	lr

}
 8007a3a:	bf00      	nop
 8007a3c:	20000354 	.word	0x20000354

08007a40 <Os_Scheduler_Init>:

void Os_Scheduler_Init()
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
	/// Enter critical section
	/// Disable interrupts
	__asm("CPSID   I");
 8007a44:	b672      	cpsid	i
	/// Make the TCB linked list circular
	tcbs[0].nextPt = &tcbs[1];
 8007a46:	4b31      	ldr	r3, [pc, #196]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a48:	4a31      	ldr	r2, [pc, #196]	; (8007b10 <Os_Scheduler_Init+0xd0>)
 8007a4a:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 8007a4c:	4b2f      	ldr	r3, [pc, #188]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a4e:	4a31      	ldr	r2, [pc, #196]	; (8007b14 <Os_Scheduler_Init+0xd4>)
 8007a50:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[3];
 8007a52:	4b2e      	ldr	r3, [pc, #184]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a54:	4a30      	ldr	r2, [pc, #192]	; (8007b18 <Os_Scheduler_Init+0xd8>)
 8007a56:	615a      	str	r2, [r3, #20]
	tcbs[3].nextPt = &tcbs[4];
 8007a58:	4b2c      	ldr	r3, [pc, #176]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a5a:	4a30      	ldr	r2, [pc, #192]	; (8007b1c <Os_Scheduler_Init+0xdc>)
 8007a5c:	61da      	str	r2, [r3, #28]
	tcbs[4].nextPt = &tcbs[5];
 8007a5e:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a60:	4a2f      	ldr	r2, [pc, #188]	; (8007b20 <Os_Scheduler_Init+0xe0>)
 8007a62:	625a      	str	r2, [r3, #36]	; 0x24
	tcbs[5].nextPt = &tcbs[0];
 8007a64:	4b29      	ldr	r3, [pc, #164]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a66:	4a29      	ldr	r2, [pc, #164]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a68:	62da      	str	r2, [r3, #44]	; 0x2c

	/// Setup stack for task0

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
	tcbs[0].stackPt = &TCB_STACK[0][STACKSIZE-16];
 8007a6a:	4b28      	ldr	r3, [pc, #160]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <Os_Scheduler_Init+0xe4>)
 8007a6e:	601a      	str	r2, [r3, #0]
	/// Set the 'T' bit in stacked xPSR to '1' to notify processor
	/// on exception return about the thumb state. V6-m and V7-m cores
	/// can only support thumb state hence this should be always set
	/// to '1'.
	TCB_STACK[0][STACKSIZE-1] = 0x01000000;
 8007a70:	4b2d      	ldr	r3, [pc, #180]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a76:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	/// Set the stacked PC to point to the task
	TCB_STACK[0][STACKSIZE-2] = (int32_t)(Task5ms_0);
 8007a7a:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <Os_Scheduler_Init+0xec>)
 8007a7c:	4b2a      	ldr	r3, [pc, #168]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007a7e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

	/// Setup stack for task1

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
    tcbs[1].stackPt = &TCB_STACK[1][STACKSIZE-16];
 8007a82:	4b22      	ldr	r3, [pc, #136]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a84:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <Os_Scheduler_Init+0xf0>)
 8007a86:	609a      	str	r2, [r3, #8]
    /// Set the 'T' bit in stacked xPSR to '1' to notify processor
    /// on exception return about the thumb state. V6-m and V7-m cores
    /// can only support thumb state hence this should be always set
    /// to '1'.
    TCB_STACK[1][STACKSIZE-1] = 0x01000000;
 8007a88:	4b27      	ldr	r3, [pc, #156]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a8e:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    /// Set the stacked PC to point to the task
    TCB_STACK[1][STACKSIZE-2] = (int32_t)(Task10ms_0);
 8007a92:	4a28      	ldr	r2, [pc, #160]	; (8007b34 <Os_Scheduler_Init+0xf4>)
 8007a94:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007a96:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


    tcbs[2].stackPt = &TCB_STACK[2][STACKSIZE-16];
 8007a9a:	4b1c      	ldr	r3, [pc, #112]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <Os_Scheduler_Init+0xf8>)
 8007a9e:	611a      	str	r2, [r3, #16]
    TCB_STACK[2][STACKSIZE-1] = 0x01000000;
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007aa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007aa6:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
    TCB_STACK[2][STACKSIZE-2] = (int32_t)(Task20ms_0);
 8007aaa:	4a24      	ldr	r2, [pc, #144]	; (8007b3c <Os_Scheduler_Init+0xfc>)
 8007aac:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007aae:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8

    tcbs[3].stackPt = &TCB_STACK[3][STACKSIZE-16];
 8007ab2:	4b16      	ldr	r3, [pc, #88]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007ab4:	4a22      	ldr	r2, [pc, #136]	; (8007b40 <Os_Scheduler_Init+0x100>)
 8007ab6:	619a      	str	r2, [r3, #24]
    TCB_STACK[3][STACKSIZE-1] = 0x01000000;
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007abe:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    TCB_STACK[3][STACKSIZE-2] = (int32_t)(Task50ms_0);
 8007ac2:	4a20      	ldr	r2, [pc, #128]	; (8007b44 <Os_Scheduler_Init+0x104>)
 8007ac4:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007ac6:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638

    tcbs[4].stackPt = &TCB_STACK[4][STACKSIZE-16];
 8007aca:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007acc:	4a1e      	ldr	r2, [pc, #120]	; (8007b48 <Os_Scheduler_Init+0x108>)
 8007ace:	621a      	str	r2, [r3, #32]
    TCB_STACK[4][STACKSIZE-1] = 0x01000000;
 8007ad0:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ad6:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
    TCB_STACK[4][STACKSIZE-2] = (int32_t)(Task100ms_0);
 8007ada:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <Os_Scheduler_Init+0x10c>)
 8007adc:	4b12      	ldr	r3, [pc, #72]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007ade:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8

    tcbs[5].stackPt = &TCB_STACK[5][STACKSIZE-16];
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007ae4:	4a1a      	ldr	r2, [pc, #104]	; (8007b50 <Os_Scheduler_Init+0x110>)
 8007ae6:	629a      	str	r2, [r3, #40]	; 0x28
    TCB_STACK[5][STACKSIZE-1] = 0x01000000;
 8007ae8:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007aee:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    TCB_STACK[5][STACKSIZE-2] = (int32_t)(Task500ms_0);
 8007af2:	4a18      	ldr	r2, [pc, #96]	; (8007b54 <Os_Scheduler_Init+0x114>)
 8007af4:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <Os_Scheduler_Init+0xe8>)
 8007af6:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958

    /// Make current tcb pointer point to task0
    pCurntTcb = &tcbs[0];
 8007afa:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <Os_Scheduler_Init+0x118>)
 8007afc:	4a03      	ldr	r2, [pc, #12]	; (8007b0c <Os_Scheduler_Init+0xcc>)
 8007afe:	601a      	str	r2, [r3, #0]
    /// Enable interrupts
    __asm("CPSIE   I ");
 8007b00:	b662      	cpsie	i
}
 8007b02:	bf00      	nop
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000324 	.word	0x20000324
 8007b10:	2000032c 	.word	0x2000032c
 8007b14:	20000334 	.word	0x20000334
 8007b18:	2000033c 	.word	0x2000033c
 8007b1c:	20000344 	.word	0x20000344
 8007b20:	2000034c 	.word	0x2000034c
 8007b24:	200004a8 	.word	0x200004a8
 8007b28:	20000358 	.word	0x20000358
 8007b2c:	08007b95 	.word	0x08007b95
 8007b30:	20000638 	.word	0x20000638
 8007b34:	08007bcd 	.word	0x08007bcd
 8007b38:	200007c8 	.word	0x200007c8
 8007b3c:	08007c05 	.word	0x08007c05
 8007b40:	20000958 	.word	0x20000958
 8007b44:	08007c3d 	.word	0x08007c3d
 8007b48:	20000ae8 	.word	0x20000ae8
 8007b4c:	08007c75 	.word	0x08007c75
 8007b50:	20000c78 	.word	0x20000c78
 8007b54:	08007cad 	.word	0x08007cad
 8007b58:	20000354 	.word	0x20000354

08007b5c <Os_Scheduler_Start>:


__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =pCurntTcb");
 8007b5c:	4809      	ldr	r0, [pc, #36]	; (8007b84 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 8007b5e:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 8007b60:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 8007b62:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 8007b64:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8007b66:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8007b68:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8007b6a:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8007b6c:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 8007b6e:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 8007b70:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 8007b72:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 8007b74:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 8007b76:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 8007b78:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 8007b7a:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 8007b7c:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 8007b7e:	b662      	cpsie	i
    __asm("BX      LR");
 8007b80:	4770      	bx	lr
}
 8007b82:	bf00      	nop
 8007b84:	20000354 	.word	0x20000354

08007b88 <Os_Task_StartUp_0>:

void Os_Task_StartUp_0()
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
	Os_Task_StartUp();
 8007b8c:	f000 f8aa 	bl	8007ce4 <Os_Task_StartUp>
}
 8007b90:	bf00      	nop
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <Task5ms_0>:

volatile void Task5ms_0()
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task5ms_cnt == tim3_5count)
 8007b98:	bf00      	nop
 8007b9a:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <Task5ms_0+0x2c>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <Task5ms_0+0x30>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d0f9      	beq.n	8007b9a <Task5ms_0+0x6>
    	{

    	}
   		Os_Task5ms_0_cnt++;
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <Task5ms_0+0x34>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3301      	adds	r3, #1
 8007bac:	4a06      	ldr	r2, [pc, #24]	; (8007bc8 <Task5ms_0+0x34>)
 8007bae:	6013      	str	r3, [r2, #0]
    	task5ms_cnt = tim3_5count;
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <Task5ms_0+0x30>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a02      	ldr	r2, [pc, #8]	; (8007bc0 <Task5ms_0+0x2c>)
 8007bb6:	6013      	str	r3, [r2, #0]

    	Os_Task_5ms();
 8007bb8:	f000 f89a 	bl	8007cf0 <Os_Task_5ms>
    	while(task5ms_cnt == tim3_5count)
 8007bbc:	e7ec      	b.n	8007b98 <Task5ms_0+0x4>
 8007bbe:	bf00      	nop
 8007bc0:	20000cbc 	.word	0x20000cbc
 8007bc4:	2000003c 	.word	0x2000003c
 8007bc8:	20000cb8 	.word	0x20000cb8

08007bcc <Task10ms_0>:
    }
}

volatile void Task10ms_0()
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task10ms_cnt == tim3_10count)
 8007bd0:	bf00      	nop
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <Task10ms_0+0x2c>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <Task10ms_0+0x30>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d0f9      	beq.n	8007bd2 <Task10ms_0+0x6>
    	{

    	}
   		Os_Task10ms_0_cnt++;
 8007bde:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <Task10ms_0+0x34>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	4a06      	ldr	r2, [pc, #24]	; (8007c00 <Task10ms_0+0x34>)
 8007be6:	6013      	str	r3, [r2, #0]
    	task10ms_cnt = tim3_10count;
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <Task10ms_0+0x30>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a02      	ldr	r2, [pc, #8]	; (8007bf8 <Task10ms_0+0x2c>)
 8007bee:	6013      	str	r3, [r2, #0]

    	Os_Task_10ms();
 8007bf0:	f000 f884 	bl	8007cfc <Os_Task_10ms>
    	while(task10ms_cnt == tim3_10count)
 8007bf4:	e7ec      	b.n	8007bd0 <Task10ms_0+0x4>
 8007bf6:	bf00      	nop
 8007bf8:	20000cc4 	.word	0x20000cc4
 8007bfc:	20000040 	.word	0x20000040
 8007c00:	20000cc0 	.word	0x20000cc0

08007c04 <Task20ms_0>:
    }
}

volatile void Task20ms_0()
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task20ms_cnt == tim3_20count)
 8007c08:	bf00      	nop
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <Task20ms_0+0x2c>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <Task20ms_0+0x30>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d0f9      	beq.n	8007c0a <Task20ms_0+0x6>
    	{

    	}
   		Os_Task20ms_0_cnt++;
 8007c16:	4b08      	ldr	r3, [pc, #32]	; (8007c38 <Task20ms_0+0x34>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	4a06      	ldr	r2, [pc, #24]	; (8007c38 <Task20ms_0+0x34>)
 8007c1e:	6013      	str	r3, [r2, #0]
    	task20ms_cnt = tim3_20count;
 8007c20:	4b04      	ldr	r3, [pc, #16]	; (8007c34 <Task20ms_0+0x30>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a02      	ldr	r2, [pc, #8]	; (8007c30 <Task20ms_0+0x2c>)
 8007c26:	6013      	str	r3, [r2, #0]

    	Os_Task_20ms();
 8007c28:	f000 f86e 	bl	8007d08 <Os_Task_20ms>
    	while(task20ms_cnt == tim3_20count)
 8007c2c:	e7ec      	b.n	8007c08 <Task20ms_0+0x4>
 8007c2e:	bf00      	nop
 8007c30:	20000ccc 	.word	0x20000ccc
 8007c34:	20000044 	.word	0x20000044
 8007c38:	20000cc8 	.word	0x20000cc8

08007c3c <Task50ms_0>:
    }
}


volatile void Task50ms_0()
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task50ms_cnt == tim3_50count)
 8007c40:	bf00      	nop
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <Task50ms_0+0x2c>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <Task50ms_0+0x30>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d0f9      	beq.n	8007c42 <Task50ms_0+0x6>
    	{

    	}
   		Os_Task50ms_0_cnt++;
 8007c4e:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <Task50ms_0+0x34>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3301      	adds	r3, #1
 8007c54:	4a06      	ldr	r2, [pc, #24]	; (8007c70 <Task50ms_0+0x34>)
 8007c56:	6013      	str	r3, [r2, #0]
    	task50ms_cnt = tim3_50count;
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <Task50ms_0+0x30>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a02      	ldr	r2, [pc, #8]	; (8007c68 <Task50ms_0+0x2c>)
 8007c5e:	6013      	str	r3, [r2, #0]

    	Os_Task_50ms();
 8007c60:	f000 f858 	bl	8007d14 <Os_Task_50ms>
    	while(task50ms_cnt == tim3_50count)
 8007c64:	e7ec      	b.n	8007c40 <Task50ms_0+0x4>
 8007c66:	bf00      	nop
 8007c68:	20000cd4 	.word	0x20000cd4
 8007c6c:	20000048 	.word	0x20000048
 8007c70:	20000cd0 	.word	0x20000cd0

08007c74 <Task100ms_0>:
    }
}


volatile void Task100ms_0()
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task100ms_cnt == tim3_100count)
 8007c78:	bf00      	nop
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <Task100ms_0+0x2c>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <Task100ms_0+0x30>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d0f9      	beq.n	8007c7a <Task100ms_0+0x6>
    	{

    	}
   		Os_Task100ms_0_cnt++;
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <Task100ms_0+0x34>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	4a06      	ldr	r2, [pc, #24]	; (8007ca8 <Task100ms_0+0x34>)
 8007c8e:	6013      	str	r3, [r2, #0]
    	task100ms_cnt = tim3_100count;
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <Task100ms_0+0x30>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a02      	ldr	r2, [pc, #8]	; (8007ca0 <Task100ms_0+0x2c>)
 8007c96:	6013      	str	r3, [r2, #0]

    	Os_Task_100ms();
 8007c98:	f000 f842 	bl	8007d20 <Os_Task_100ms>
    	while(task100ms_cnt == tim3_100count)
 8007c9c:	e7ec      	b.n	8007c78 <Task100ms_0+0x4>
 8007c9e:	bf00      	nop
 8007ca0:	20000cdc 	.word	0x20000cdc
 8007ca4:	2000004c 	.word	0x2000004c
 8007ca8:	20000cd8 	.word	0x20000cd8

08007cac <Task500ms_0>:
    }
}


volatile void Task500ms_0()
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task500ms_cnt == tim3_500count)
 8007cb0:	bf00      	nop
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <Task500ms_0+0x2c>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <Task500ms_0+0x30>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d0f9      	beq.n	8007cb2 <Task500ms_0+0x6>
    	{

    	}
   		Os_Task500ms_0_cnt++;
 8007cbe:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <Task500ms_0+0x34>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4a06      	ldr	r2, [pc, #24]	; (8007ce0 <Task500ms_0+0x34>)
 8007cc6:	6013      	str	r3, [r2, #0]
    	task500ms_cnt = tim3_500count;
 8007cc8:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <Task500ms_0+0x30>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a02      	ldr	r2, [pc, #8]	; (8007cd8 <Task500ms_0+0x2c>)
 8007cce:	6013      	str	r3, [r2, #0]

    	Os_Task_500ms();
 8007cd0:	f000 f82c 	bl	8007d2c <Os_Task_500ms>
    	while(task500ms_cnt == tim3_500count)
 8007cd4:	e7ec      	b.n	8007cb0 <Task500ms_0+0x4>
 8007cd6:	bf00      	nop
 8007cd8:	20000ce4 	.word	0x20000ce4
 8007cdc:	20000050 	.word	0x20000050
 8007ce0:	20000ce0 	.word	0x20000ce0

08007ce4 <Os_Task_StartUp>:

#include "Cdd_Servo.h"
#include "LED.h"

TASK(StartUp)()
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
	Rte_Os_Task_StartUp();
 8007ce8:	f000 f868 	bl	8007dbc <Rte_Task_StartUp>
}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <Os_Task_5ms>:

TASK(5ms)()
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
	Rte_Os_Task_5ms();
 8007cf4:	f000 f876 	bl	8007de4 <Rte_Task_5ms>
}
 8007cf8:	bf00      	nop
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <Os_Task_10ms>:

TASK(10ms)()
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 8007d00:	f000 f876 	bl	8007df0 <Rte_Task_10ms>
}
 8007d04:	bf00      	nop
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <Os_Task_20ms>:

TASK(20ms)()
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
	Rte_Os_Task_20ms();
 8007d0c:	f000 f882 	bl	8007e14 <Rte_Task_20ms>
}
 8007d10:	bf00      	nop
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <Os_Task_50ms>:

TASK(50ms)()
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 8007d18:	f000 f882 	bl	8007e20 <Rte_Task_50ms>
}
 8007d1c:	bf00      	nop
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <Os_Task_100ms>:

TASK(100ms)()
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 8007d24:	f000 f882 	bl	8007e2c <Rte_Task_100ms>
}
 8007d28:	bf00      	nop
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <Os_Task_500ms>:

TASK(500ms)()
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 8007d30:	f000 f882 	bl	8007e38 <Rte_Task_500ms>
}
 8007d34:	bf00      	nop
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	Gpt_TIM3_Start_IT();
 8007d3c:	f7fa fcfa 	bl	8002734 <Gpt_TIM3_Start_IT>
}
 8007d40:	bf00      	nop
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d48:	480d      	ldr	r0, [pc, #52]	; (8007d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8007d4a:	490e      	ldr	r1, [pc, #56]	; (8007d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007d4c:	4a0e      	ldr	r2, [pc, #56]	; (8007d88 <LoopForever+0xe>)
  movs r3, #0
 8007d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d50:	e002      	b.n	8007d58 <LoopCopyDataInit>

08007d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d56:	3304      	adds	r3, #4

08007d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d5c:	d3f9      	bcc.n	8007d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d5e:	4a0b      	ldr	r2, [pc, #44]	; (8007d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007d60:	4c0b      	ldr	r4, [pc, #44]	; (8007d90 <LoopForever+0x16>)
  movs r3, #0
 8007d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d64:	e001      	b.n	8007d6a <LoopFillZerobss>

08007d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d68:	3204      	adds	r2, #4

08007d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d6c:	d3fb      	bcc.n	8007d66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d6e:	f7fc fa37 	bl	80041e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d72:	f000 f895 	bl	8007ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 8007d76:	f7ff fe36 	bl	80079e6 <EcuM_Init>

08007d7a <LoopForever>:

LoopForever:
    b LoopForever
 8007d7a:	e7fe      	b.n	8007d7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007d7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8007d88:	08007f50 	.word	0x08007f50
  ldr r2, =_sbss
 8007d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8007d90:	20000cec 	.word	0x20000cec

08007d94 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007d94:	e7fe      	b.n	8007d94 <ADC3_IRQHandler>
	...

08007d98 <Rte_Init>:
#include "LED.h"

static volatile uint8 Int_ButtonState = 0;

void Rte_Init(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8007d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007da0:	4804      	ldr	r0, [pc, #16]	; (8007db4 <Rte_Init+0x1c>)
 8007da2:	f7fa fbff 	bl	80025a4 <HAL_GPIO_ReadPin>
 8007da6:	4603      	mov	r3, r0
 8007da8:	461a      	mov	r2, r3
 8007daa:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <Rte_Init+0x20>)
 8007dac:	701a      	strb	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	48000800 	.word	0x48000800
 8007db8:	20000ce8 	.word	0x20000ce8

08007dbc <Rte_Task_StartUp>:

/* Os Tasks*/
/* Init task */
void Rte_Task_StartUp(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 8007dc0:	f7ff fe09 	bl	80079d6 <EcuM_StartUp_Two>

	/* Bsw stacks init */

	/* Rte init */
	Rte_Init();
 8007dc4:	f7ff ffe8 	bl	8007d98 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 8007dc8:	f7f8 fea4 	bl	8000b14 <Cdd_Servo_Init>
	/* Asw init */
	Access_Init();
 8007dcc:	f7f8 fdf0 	bl	80009b0 <Access_Init>
	Engine_Init();
 8007dd0:	f7f8 fe12 	bl	80009f8 <Engine_Init>
	Brakes_Init();
 8007dd4:	f7f8 fdfe 	bl	80009d4 <Brakes_Init>
	Steering_Init();
 8007dd8:	f7f8 fe8a 	bl	8000af0 <Steering_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 8007ddc:	f7f8 fe60 	bl	8000aa0 <LED_Init>
}
 8007de0:	bf00      	nop
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <Rte_Task_5ms>:

/* Periodic tasks */
void Rte_Task_5ms(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0

}
 8007de8:	bf00      	nop
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 8007df4:	f7ff fbdd 	bl	80075b2 <BswM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 8007df8:	f7f9 f876 	bl	8000ee8 <Cdd_Servo_MainFunction>
	/* ASW */
	Access_MainFunction();
 8007dfc:	f7f8 fde4 	bl	80009c8 <Access_MainFunction>
	Engine_MainFunction();
 8007e00:	f7f8 fe06 	bl	8000a10 <Engine_MainFunction>
	Brakes_MainFunction();
 8007e04:	f7f8 fdf2 	bl	80009ec <Brakes_MainFunction>
	Steering_MainFunction();
 8007e08:	f7f8 fe7e 	bl	8000b08 <Steering_MainFunction>
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 8007e0c:	f7f8 fe54 	bl	8000ab8 <LED_MainFunction>
}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <Rte_Task_20ms>:

void Rte_Task_20ms(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0

}
 8007e18:	bf00      	nop
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0

}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0

}
 8007e30:	bf00      	nop
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr

08007e38 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0

}
 8007e3c:	bf00      	nop
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <Rte_Read_PC13_Pin_State+0x1c>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	701a      	strb	r2, [r3, #0]
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr
 8007e60:	20000ce8 	.word	0x20000ce8

08007e64 <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <Rte_Write_PC13_Pin_State+0x1c>)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	7013      	strb	r3, [r2, #0]
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000ce8 	.word	0x20000ce8

08007e84 <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7f9 f80d 	bl	8000eb0 <Cdd_Servo_RawMove>
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	; (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	; (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f000 f820 	bl	8007ef8 <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	08007f48 	.word	0x08007f48
 8007edc:	08007f48 	.word	0x08007f48
 8007ee0:	08007f48 	.word	0x08007f48
 8007ee4:	08007f4c 	.word	0x08007f4c

08007ee8 <memset>:
 8007ee8:	4402      	add	r2, r0
 8007eea:	4603      	mov	r3, r0
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d100      	bne.n	8007ef2 <memset+0xa>
 8007ef0:	4770      	bx	lr
 8007ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef6:	e7f9      	b.n	8007eec <memset+0x4>

08007ef8 <_init>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr

08007f04 <_fini>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr
