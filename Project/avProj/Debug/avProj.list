
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a33c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a550  0800a550  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a550  0800a550  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a550  0800a550  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a550  0800a550  0001a550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a554  0800a554  0001a554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000141c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001494  20001494  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c36d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d42  00000000  00000000  0003c40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  00040158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001688  00000000  00000000  00041a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e8b  00000000  00000000  000430c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261d5  00000000  00000000  00067f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d808f  00000000  00000000  0008e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001661af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006828  00000000  00000000  00166200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4c4 	.word	0x0800a4c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800a4c4 	.word	0x0800a4c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <Access_Init+0x14>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000094 	.word	0x20000094

08000a84 <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <Brakes_Init+0x14>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000095 	.word	0x20000095

08000aa8 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Brakes_InitDone_b)
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <Brakes_MainFunction+0x18>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d102      	bne.n	8000aba <Brakes_MainFunction+0x12>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_u16);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <Brakes_MainFunction+0x1c>)
 8000ab6:	f009 f853 	bl	8009b60 <Rte_Read_AN0_Voltage_u16>
	}
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000095 	.word	0x20000095
 8000ac4:	20000096 	.word	0x20000096

08000ac8 <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <Engine_Init+0x14>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
	{

	}
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE_U16)
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <LED_UpdatePulseDirection+0x2c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000af8:	d302      	bcc.n	8000b00 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN_U8;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <LED_UpdatePulseDirection+0x30>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE_U16)
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LED_UpdatePulseDirection+0x2c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b08:	d802      	bhi.n	8000b10 <LED_UpdatePulseDirection+0x24>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <LED_UpdatePulseDirection+0x30>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	2000009c 	.word	0x2000009c
 8000b1c:	2000009e 	.word	0x2000009e

08000b20 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP_U8 == g_LED_Pulse_Direction_u8)
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <LED_UpdatePulseWidth+0x48>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10c      	bne.n	8000b46 <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE_U16)
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000b34:	d813      	bhi.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16+LED_FADE_PULSE_STEP_U16;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b42:	801a      	strh	r2, [r3, #0]
 8000b44:	e00b      	b.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP_U16)
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000b4e:	d306      	bcc.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16-LED_FADE_PULSE_STEP_U16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b5c:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 8000b5e:	f7ff ffc5 	bl	8000aec <LED_UpdatePulseDirection>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000009e 	.word	0x2000009e
 8000b6c:	2000009c 	.word	0x2000009c

08000b70 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(0u);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f008 ffc9 	bl	8009b0c <Rte_Cdd_Servo_RawMove>
	/* Read LED NvM block */
	Rte_Read_NvM_LED_Block(g_LED_NvMBlock_a);
 8000b7a:	4804      	ldr	r0, [pc, #16]	; (8000b8c <LED_Init+0x1c>)
 8000b7c:	f008 ffd3 	bl	8009b26 <Rte_Read_NvM_Block_0>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <LED_Init+0x20>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000a0 	.word	0x200000a0
 8000b90:	20000099 	.word	0x20000099

08000b94 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_LED_InitDone_b)
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <LED_MainFunction+0x2c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10d      	bne.n	8000bbc <LED_MainFunction+0x28>
	{
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <LED_MainFunction+0x30>)
 8000ba2:	f008 ff93 	bl	8009acc <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(TRUE == (boolean)g_LED_ButtonState_b)
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <LED_MainFunction+0x30>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d106      	bne.n	8000bbc <LED_MainFunction+0x28>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8000bae:	f7ff ffb7 	bl	8000b20 <LED_UpdatePulseWidth>
			/* Call the servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <LED_MainFunction+0x34>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f008 ffa8 	bl	8009b0c <Rte_Cdd_Servo_RawMove>
		else
		{
			/* Stop fading */
		}
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000099 	.word	0x20000099
 8000bc4:	2000009a 	.word	0x2000009a
 8000bc8:	2000009c 	.word	0x2000009c

08000bcc <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <Blinker_Init+0x14>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200000c0 	.word	0x200000c0

08000be4 <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
	{

	}
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <FrontLights_Init+0x14>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000c1 	.word	0x200000c1

08000c08 <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <InteriorLights_Init+0x14>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000c2 	.word	0x200000c2

08000c2c <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <RearLights_Init+0x14>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200000c3 	.word	0x200000c3

08000c50 <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <Steering_Init+0x14>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200000c4 	.word	0x200000c4

08000c74 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <Cdd_Servo_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Init(void)
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b0b2      	sub	sp, #200	; 0xc8
 8000c84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32 ARR_Value = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 8000cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd8:	d10c      	bne.n	8000cf4 <Cdd_Servo_Init+0x74>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a6f      	ldr	r2, [pc, #444]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b6d      	ldr	r3, [pc, #436]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	e046      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 8000cf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf8:	4b69      	ldr	r3, [pc, #420]	; (8000ea0 <Cdd_Servo_Init+0x220>)
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d10c      	bne.n	8000d18 <Cdd_Servo_Init+0x98>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a66      	ldr	r2, [pc, #408]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	e034      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 8000d18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d1c:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <Cdd_Servo_Init+0x224>)
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10c      	bne.n	8000d3c <Cdd_Servo_Init+0xbc>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b5e      	ldr	r3, [pc, #376]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a5d      	ldr	r2, [pc, #372]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	e022      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 8000d3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d40:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <Cdd_Servo_Init+0x228>)
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d10c      	bne.n	8000d60 <Cdd_Servo_Init+0xe0>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a54      	ldr	r2, [pc, #336]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	e010      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 8000d60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d64:	4b51      	ldr	r3, [pc, #324]	; (8000eac <Cdd_Servo_Init+0x22c>)
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d10b      	bne.n	8000d82 <Cdd_Servo_Init+0x102>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b49      	ldr	r3, [pc, #292]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    }
	GPIO_InitStruct.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 8000d82:	2320      	movs	r3, #32
 8000d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &GPIO_InitStruct);
 8000d9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da2:	4619      	mov	r1, r3
 8000da4:	4610      	mov	r0, r2
 8000da6:	f001 f98f 	bl	80020c8 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <Cdd_Servo_Init+0x230>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fbb1 	bl	8000514 <__aeabi_ui2d>
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <Cdd_Servo_Init+0x234>)
 8000db8:	f7ff fd50 	bl	800085c <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fe32 	bl	8000a2c <__aeabi_d2uiz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Cdd_Servo_Init+0x230>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb9f 	bl	8000514 <__aeabi_ui2d>
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	460d      	mov	r5, r1
 8000dda:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000dde:	f7ff fb99 	bl	8000514 <__aeabi_ui2d>
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <Cdd_Servo_Init+0x238>)
 8000de8:	f7ff fa58 	bl	800029c <__adddf3>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <Cdd_Servo_Init+0x23c>)
 8000dfa:	f7ff fc05 	bl	8000608 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4620      	mov	r0, r4
 8000e04:	4629      	mov	r1, r5
 8000e06:	f7ff fd29 	bl	800085c <__aeabi_ddiv>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <Cdd_Servo_Init+0x238>)
 8000e18:	f7ff fa3e 	bl	8000298 <__aeabi_dsub>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fe02 	bl	8000a2c <__aeabi_d2uiz>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <Cdd_Servo_Init+0x240>)
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d10c      	bne.n	8000e52 <Cdd_Servo_Init+0x1d2>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	e04b      	b.n	8000eea <Cdd_Servo_Init+0x26a>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5a:	d10c      	bne.n	8000e76 <Cdd_Servo_Init+0x1f6>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	e039      	b.n	8000eea <Cdd_Servo_Init+0x26a>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <Cdd_Servo_Init+0x244>)
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d123      	bne.n	8000ec8 <Cdd_Servo_Init+0x248>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	61d3      	str	r3, [r2, #28]
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	e027      	b.n	8000eea <Cdd_Servo_Init+0x26a>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	044aa200 	.word	0x044aa200
 8000eb4:	41490000 	.word	0x41490000
 8000eb8:	3ff00000 	.word	0x3ff00000
 8000ebc:	40490000 	.word	0x40490000
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <Cdd_Servo_Init+0x388>)
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d10b      	bne.n	8000eea <Cdd_Servo_Init+0x26a>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <Cdd_Servo_Init+0x38c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	; (800100c <Cdd_Servo_Init+0x38c>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <Cdd_Servo_Init+0x38c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
	}

	htim.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 8000eea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Prescaler = PSC_Value;
 8000ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Period = ARR_Value;
 8000efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_Base_Init(&htim);
 8000f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fdde 	bl	8002ace <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000f1a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 fa39 	bl	800339c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fe94 	bl	8002c5c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000f40:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 ff6a 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	; 0x60
 8000f52:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 f901 	bl	8003174 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info_s.Period_Min_u16 = (uint16) (ARR_Value * (c_SERVO_CfgParam_s.MinPulse/20.0));
 8000f72:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000f76:	f7ff facd 	bl	8000514 <__aeabi_ui2d>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fae8 	bl	8000558 <__aeabi_f2d>
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <Cdd_Servo_Init+0x390>)
 8000f8e:	f7ff fc65 	bl	800085c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f7ff fb35 	bl	8000608 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fd41 	bl	8000a2c <__aeabi_d2uiz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <Cdd_Servo_Init+0x394>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	gs_SERVO_info_s.Period_Max_u16 = (uint16) (ARR_Value * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 8000fb2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000fb6:	f7ff faad 	bl	8000514 <__aeabi_ui2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <Cdd_Servo_Init+0x398>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fac9 	bl	8000558 <__aeabi_f2d>
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <Cdd_Servo_Init+0x390>)
 8000fcc:	f7ff fc46 	bl	800085c <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	f7ff fb16 	bl	8000608 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fd22 	bl	8000a2c <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Cdd_Servo_Init+0x394>)
 8000fee:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fe8f 	bl	8002d1c <HAL_TIM_PWM_Start>
}
 8000ffe:	bf00      	nop
 8001000:	37c8      	adds	r7, #200	; 0xc8
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	40000800 	.word	0x40000800
 800100c:	40021000 	.word	0x40021000
 8001010:	40340000 	.word	0x40340000
 8001014:	200000c8 	.word	0x200000c8
 8001018:	41a00000 	.word	0x41a00000

0800101c <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= gs_SERVO_info_s.Period_Max_u16 && Pulse >= gs_SERVO_info_s.Period_Min_u16)
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <Cdd_Servo_RawMove+0x30>)
 8001028:	885b      	ldrh	r3, [r3, #2]
 800102a:	88fa      	ldrh	r2, [r7, #6]
 800102c:	429a      	cmp	r2, r3
 800102e:	d807      	bhi.n	8001040 <Cdd_Servo_RawMove+0x24>
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <Cdd_Servo_RawMove+0x30>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	88fa      	ldrh	r2, [r7, #6]
 8001036:	429a      	cmp	r2, r3
 8001038:	d302      	bcc.n	8001040 <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <Cdd_Servo_RawMove+0x34>)
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	6013      	str	r3, [r2, #0]
	}
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200000c8 	.word	0x200000c8
 8001050:	40000034 	.word	0x40000034

08001054 <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09a      	sub	sp, #104	; 0x68
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e1e3      	b.n	800146c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d176      	bne.n	80011a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d152      	bne.n	8001164 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f004 fdc3 	bl	8005c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d13b      	bne.n	8001164 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 ff85 	bl	8001ffc <ADC_Disable>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12f      	bne.n	8001164 <HAL_ADC_Init+0xe0>
 8001104:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001108:	2b00      	cmp	r3, #0
 800110a:	d12b      	bne.n	8001164 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001114:	f023 0302 	bic.w	r3, r3, #2
 8001118:	f043 0202 	orr.w	r2, r3, #2
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800112e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800113e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <HAL_ADC_Init+0x308>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a92      	ldr	r2, [pc, #584]	; (8001390 <HAL_ADC_Init+0x30c>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9a      	lsrs	r2, r3, #18
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001156:	e002      	b.n	800115e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3b01      	subs	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f9      	bne.n	8001158 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800117c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001180:	d110      	bne.n	80011a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f023 0312 	bic.w	r3, r3, #18
 800118a:	f043 0210 	orr.w	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f040 8150 	bne.w	8001452 <HAL_ADC_Init+0x3ce>
 80011b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 814b 	bne.w	8001452 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 8143 	bne.w	8001452 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011d4:	f043 0202 	orr.w	r2, r3, #2
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_Init+0x16c>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <HAL_ADC_Init+0x310>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_ADC_Init+0x170>
 80011f0:	4b69      	ldr	r3, [pc, #420]	; (8001398 <HAL_ADC_Init+0x314>)
 80011f2:	e000      	b.n	80011f6 <HAL_ADC_Init+0x172>
 80011f4:	4b69      	ldr	r3, [pc, #420]	; (800139c <HAL_ADC_Init+0x318>)
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001200:	d102      	bne.n	8001208 <HAL_ADC_Init+0x184>
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <HAL_ADC_Init+0x310>)
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e01a      	b.n	800123e <HAL_ADC_Init+0x1ba>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a61      	ldr	r2, [pc, #388]	; (8001394 <HAL_ADC_Init+0x310>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d103      	bne.n	800121a <HAL_ADC_Init+0x196>
 8001212:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e011      	b.n	800123e <HAL_ADC_Init+0x1ba>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a60      	ldr	r2, [pc, #384]	; (80013a0 <HAL_ADC_Init+0x31c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d102      	bne.n	800122a <HAL_ADC_Init+0x1a6>
 8001224:	4b5f      	ldr	r3, [pc, #380]	; (80013a4 <HAL_ADC_Init+0x320>)
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e009      	b.n	800123e <HAL_ADC_Init+0x1ba>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a5d      	ldr	r2, [pc, #372]	; (80013a4 <HAL_ADC_Init+0x320>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d102      	bne.n	800123a <HAL_ADC_Init+0x1b6>
 8001234:	4b5a      	ldr	r3, [pc, #360]	; (80013a0 <HAL_ADC_Init+0x31c>)
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e001      	b.n	800123e <HAL_ADC_Init+0x1ba>
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_ADC_Init+0x1da>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x1da>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_ADC_Init+0x1dc>
 800125e:	2300      	movs	r3, #0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11c      	bne.n	800129e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001264:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d010      	beq.n	800128c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d107      	bne.n	8001286 <HAL_ADC_Init+0x202>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_ADC_Init+0x202>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_ADC_Init+0x204>
 8001286:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001288:	2b00      	cmp	r3, #0
 800128a:	d108      	bne.n	800129e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800128c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	431a      	orrs	r2, r3
 800129a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7e5b      	ldrb	r3, [r3, #25]
 80012a2:	035b      	lsls	r3, r3, #13
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012a8:	2a01      	cmp	r2, #1
 80012aa:	d002      	beq.n	80012b2 <HAL_ADC_Init+0x22e>
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	e000      	b.n	80012b4 <HAL_ADC_Init+0x230>
 80012b2:	2200      	movs	r2, #0
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c4:	4313      	orrs	r3, r2
 80012c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d11b      	bne.n	800130a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	3b01      	subs	r3, #1
 80012e0:	045a      	lsls	r2, r3, #17
 80012e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012e4:	4313      	orrs	r3, r2
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	663b      	str	r3, [r7, #96]	; 0x60
 80012ec:	e00d      	b.n	800130a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	2b01      	cmp	r3, #1
 8001310:	d054      	beq.n	80013bc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <HAL_ADC_Init+0x31c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d004      	beq.n	8001326 <HAL_ADC_Init+0x2a2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_ADC_Init+0x320>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d140      	bne.n	80013a8 <HAL_ADC_Init+0x324>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800132e:	d02a      	beq.n	8001386 <HAL_ADC_Init+0x302>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001338:	d022      	beq.n	8001380 <HAL_ADC_Init+0x2fc>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001342:	d01a      	beq.n	800137a <HAL_ADC_Init+0x2f6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800134c:	d012      	beq.n	8001374 <HAL_ADC_Init+0x2f0>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001356:	d00a      	beq.n	800136e <HAL_ADC_Init+0x2ea>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001360:	d002      	beq.n	8001368 <HAL_ADC_Init+0x2e4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	e023      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001368:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800136c:	e020      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 800136e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001372:	e01d      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001374:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001378:	e01a      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 800137a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137e:	e017      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001380:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001384:	e014      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001386:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800138a:	e011      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 800138c:	20000000 	.word	0x20000000
 8001390:	431bde83 	.word	0x431bde83
 8001394:	50000100 	.word	0x50000100
 8001398:	50000300 	.word	0x50000300
 800139c:	50000700 	.word	0x50000700
 80013a0:	50000400 	.word	0x50000400
 80013a4:	50000500 	.word	0x50000500
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013b4:	4313      	orrs	r3, r2
 80013b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013b8:	4313      	orrs	r3, r2
 80013ba:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d114      	bne.n	80013f4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013d8:	f023 0302 	bic.w	r3, r3, #2
 80013dc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7e1b      	ldrb	r3, [r3, #24]
 80013e2:	039a      	lsls	r2, r3, #14
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4313      	orrs	r3, r2
 80013ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f0:	4313      	orrs	r3, r2
 80013f2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_ADC_Init+0x3f0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001404:	430b      	orrs	r3, r1
 8001406:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10c      	bne.n	800142a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f023 010f 	bic.w	r1, r3, #15
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
 8001428:	e007      	b.n	800143a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 020f 	bic.w	r2, r2, #15
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
 8001450:	e00a      	b.n	8001468 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f023 0312 	bic.w	r3, r3, #18
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800146c:	4618      	mov	r0, r3
 800146e:	3768      	adds	r7, #104	; 0x68
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	fff0c007 	.word	0xfff0c007

08001478 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80f7 	bne.w	8001686 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Start_DMA+0x2e>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e0f2      	b.n	800168c <HAL_ADC_Start_DMA+0x214>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b6:	d004      	beq.n	80014c2 <HAL_ADC_Start_DMA+0x4a>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a75      	ldr	r2, [pc, #468]	; (8001694 <HAL_ADC_Start_DMA+0x21c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d109      	bne.n	80014d6 <HAL_ADC_Start_DMA+0x5e>
 80014c2:	4b75      	ldr	r3, [pc, #468]	; (8001698 <HAL_ADC_Start_DMA+0x220>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	e008      	b.n	80014e8 <HAL_ADC_Start_DMA+0x70>
 80014d6:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_ADC_Start_DMA+0x224>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80c5 	beq.w	8001678 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fd20 	bl	8001f34 <ADC_Enable>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 80b7 	bne.w	800166e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151c:	d004      	beq.n	8001528 <HAL_ADC_Start_DMA+0xb0>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a5c      	ldr	r2, [pc, #368]	; (8001694 <HAL_ADC_Start_DMA+0x21c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d106      	bne.n	8001536 <HAL_ADC_Start_DMA+0xbe>
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_ADC_Start_DMA+0x220>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b00      	cmp	r3, #0
 8001532:	d010      	beq.n	8001556 <HAL_ADC_Start_DMA+0xde>
 8001534:	e005      	b.n	8001542 <HAL_ADC_Start_DMA+0xca>
 8001536:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_ADC_Start_DMA+0x224>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_ADC_Start_DMA+0xde>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Start_DMA+0xde>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <HAL_ADC_Start_DMA+0x228>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d115      	bne.n	8001582 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d036      	beq.n	80015de <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001578:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001580:	e02d      	b.n	80015de <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001596:	d004      	beq.n	80015a2 <HAL_ADC_Start_DMA+0x12a>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3d      	ldr	r2, [pc, #244]	; (8001694 <HAL_ADC_Start_DMA+0x21c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10a      	bne.n	80015b8 <HAL_ADC_Start_DMA+0x140>
 80015a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e008      	b.n	80015ca <HAL_ADC_Start_DMA+0x152>
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_ADC_Start_DMA+0x228>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f023 0206 	bic.w	r2, r3, #6
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
 80015f8:	e002      	b.n	8001600 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <HAL_ADC_Start_DMA+0x22c>)
 800160e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <HAL_ADC_Start_DMA+0x230>)
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161c:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_ADC_Start_DMA+0x234>)
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	221c      	movs	r2, #28
 8001626:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0210 	orr.w	r2, r2, #16
 8001636:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3340      	adds	r3, #64	; 0x40
 8001652:	4619      	mov	r1, r3
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f000 ff4d 	bl	80024f6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0204 	orr.w	r2, r2, #4
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	e00d      	b.n	800168a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001676:	e008      	b.n	800168a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001684:	e001      	b.n	800168a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001686:	2302      	movs	r3, #2
 8001688:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800168a:	7dfb      	ldrb	r3, [r7, #23]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	50000100 	.word	0x50000100
 8001698:	50000300 	.word	0x50000300
 800169c:	50000700 	.word	0x50000700
 80016a0:	50000400 	.word	0x50000400
 80016a4:	08001e69 	.word	0x08001e69
 80016a8:	08001ee3 	.word	0x08001ee3
 80016ac:	08001eff 	.word	0x08001eff

080016b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b09b      	sub	sp, #108	; 0x6c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x22>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e2ca      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x5b8>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 82ae 	bne.w	8001c46 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d81c      	bhi.n	800172c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	461a      	mov	r2, r3
 8001706:	231f      	movs	r3, #31
 8001708:	4093      	lsls	r3, r2
 800170a:	43db      	mvns	r3, r3
 800170c:	4019      	ands	r1, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa00 f203 	lsl.w	r2, r0, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
 800172a:	e063      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d81e      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	3b1e      	subs	r3, #30
 8001748:	221f      	movs	r2, #31
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	4019      	ands	r1, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	3b1e      	subs	r3, #30
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
 8001770:	e040      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b0e      	cmp	r3, #14
 8001778:	d81e      	bhi.n	80017b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	3b3c      	subs	r3, #60	; 0x3c
 800178e:	221f      	movs	r2, #31
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	3b3c      	subs	r3, #60	; 0x3c
 80017aa:	fa00 f203 	lsl.w	r2, r0, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
 80017b6:	e01d      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	3b5a      	subs	r3, #90	; 0x5a
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4019      	ands	r1, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	3b5a      	subs	r3, #90	; 0x5a
 80017e8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80e5 	bne.w	80019ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d91c      	bls.n	8001846 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6999      	ldr	r1, [r3, #24]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	3b1e      	subs	r3, #30
 800181e:	2207      	movs	r2, #7
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	4019      	ands	r1, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6898      	ldr	r0, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	3b1e      	subs	r3, #30
 8001838:	fa00 f203 	lsl.w	r2, r0, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e019      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6959      	ldr	r1, [r3, #20]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	3b01      	subs	r3, #1
 8001898:	2b03      	cmp	r3, #3
 800189a:	d84f      	bhi.n	800193c <HAL_ADC_ConfigChannel+0x28c>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018d7 	.word	0x080018d7
 80018ac:	080018f9 	.word	0x080018f9
 80018b0:	0800191b 	.word	0x0800191b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ba:	4b9a      	ldr	r3, [pc, #616]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 80018bc:	4013      	ands	r3, r2
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	0691      	lsls	r1, r2, #26
 80018c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c6:	430a      	orrs	r2, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018d2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018d4:	e07e      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018dc:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	0691      	lsls	r1, r2, #26
 80018e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018e8:	430a      	orrs	r2, r1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018f4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018f6:	e06d      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 8001900:	4013      	ands	r3, r2
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	0691      	lsls	r1, r2, #26
 8001908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800190a:	430a      	orrs	r2, r1
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001916:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001918:	e05c      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001920:	4b80      	ldr	r3, [pc, #512]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	0691      	lsls	r1, r2, #26
 800192a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800192c:	430a      	orrs	r2, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001938:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800193a:	e04b      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	069b      	lsls	r3, r3, #26
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800195e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	069b      	lsls	r3, r3, #26
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001982:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800198a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	069b      	lsls	r3, r3, #26
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019a6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	069b      	lsls	r3, r3, #26
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10a      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019cc:	e001      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019d2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x344>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x344>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x346>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 8130 	bne.w	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d00f      	beq.n	8001a24 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a22:	e049      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b09      	cmp	r3, #9
 8001a44:	d91c      	bls.n	8001a80 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6999      	ldr	r1, [r3, #24]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	3b1b      	subs	r3, #27
 8001a58:	2207      	movs	r2, #7
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4019      	ands	r1, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6898      	ldr	r0, [r3, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b1b      	subs	r3, #27
 8001a72:	fa00 f203 	lsl.w	r2, r0, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	619a      	str	r2, [r3, #24]
 8001a7e:	e01b      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6959      	ldr	r1, [r3, #20]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	2207      	movs	r2, #7
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4019      	ands	r1, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6898      	ldr	r0, [r3, #8]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac0:	d004      	beq.n	8001acc <HAL_ADC_ConfigChannel+0x41c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_ADC_ConfigChannel+0x478>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x420>
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_ADC_ConfigChannel+0x47c>)
 8001ace:	e000      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x422>
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_ADC_ConfigChannel+0x480>)
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d015      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aec:	2b11      	cmp	r3, #17
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b00:	2b12      	cmp	r3, #18
 8001b02:	f040 80ab 	bne.w	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 80a4 	bne.w	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1c:	d10a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x484>
 8001b1e:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_ADC_ConfigChannel+0x478>)
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e022      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b24:	83fff000 	.word	0x83fff000
 8001b28:	50000100 	.word	0x50000100
 8001b2c:	50000300 	.word	0x50000300
 8001b30:	50000700 	.word	0x50000700
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d103      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x496>
 8001b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e011      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d102      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x4a6>
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_ADC_ConfigChannel+0x5cc>)
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e009      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_ADC_ConfigChannel+0x5cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d102      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x4b6>
 8001b60:	4b45      	ldr	r3, [pc, #276]	; (8001c78 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e001      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d108      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x4da>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x4da>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4dc>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d150      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x502>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x502>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x504>
 8001bb2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d13c      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d11d      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x54c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d118      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9a      	lsrs	r2, r3, #18
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bfa:	e02e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x56c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0c:	d106      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c18:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c1a:	e01e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b12      	cmp	r3, #18
 8001c22:	d11a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c30:	e013      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c44:	e00a      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f043 0220 	orr.w	r2, r3, #32
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c58:	e000      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c5a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	376c      	adds	r7, #108	; 0x6c
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	50000100 	.word	0x50000100
 8001c78:	50000400 	.word	0x50000400
 8001c7c:	50000500 	.word	0x50000500
 8001c80:	20000000 	.word	0x20000000
 8001c84:	431bde83 	.word	0x431bde83

08001c88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b099      	sub	sp, #100	; 0x64
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca0:	d102      	bne.n	8001ca8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ca2:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	e01a      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d103      	bne.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	e011      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d102      	bne.n	8001cca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	e009      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001cd4:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	e001      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b0      	b.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e0a9      	b.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 808d 	bne.w	8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8086 	bne.w	8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d24:	d004      	beq.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d32:	e000      	b.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d36:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d040      	beq.n	8001dc2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d52:	035b      	lsls	r3, r3, #13
 8001d54:	430b      	orrs	r3, r1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d5a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d15c      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d9e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d14b      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dac:	f023 030f 	bic.w	r3, r3, #15
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	6892      	ldr	r2, [r2, #8]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dbe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dc0:	e03c      	b.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dcc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d123      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e10:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d112      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e1e:	f023 030f 	bic.w	r3, r3, #15
 8001e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e24:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e26:	e009      	b.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e3a:	e000      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e3c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3764      	adds	r7, #100	; 0x64
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	50000100 	.word	0x50000100
 8001e58:	50000400 	.word	0x50000400
 8001e5c:	50000500 	.word	0x50000500
 8001e60:	50000300 	.word	0x50000300
 8001e64:	50000700 	.word	0x50000700

08001e68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d126      	bne.n	8001ed0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d115      	bne.n	8001ec8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f007 f8e1 	bl	8009090 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ece:	e004      	b.n	8001eda <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff f8b5 	bl	8001060 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff f8a4 	bl	8001072 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <ADC_Enable+0x2c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <ADC_Enable+0x2c>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <ADC_Enable+0x2e>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d143      	bne.n	8001fee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <ADC_Enable+0xc4>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f043 0210 	orr.w	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e02f      	b.n	8001ff0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fa0:	f003 fd26 	bl	80059f0 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fa6:	e01b      	b.n	8001fe0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fa8:	f003 fd22 	bl	80059f0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d914      	bls.n	8001fe0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d00d      	beq.n	8001fe0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e007      	b.n	8001ff0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d1dc      	bne.n	8001fa8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	8000003f 	.word	0x8000003f

08001ffc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <ADC_Disable+0x2c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <ADC_Disable+0x2c>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <ADC_Disable+0x2e>
 8002028:	2300      	movs	r3, #0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d047      	beq.n	80020be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030d 	and.w	r3, r3, #13
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10f      	bne.n	800205c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0202 	orr.w	r2, r2, #2
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2203      	movs	r2, #3
 8002052:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002054:	f003 fccc 	bl	80059f0 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800205a:	e029      	b.n	80020b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f043 0210 	orr.w	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e023      	b.n	80020c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002078:	f003 fcba 	bl	80059f0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d914      	bls.n	80020b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10d      	bne.n	80020b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e007      	b.n	80020c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d0dc      	beq.n	8002078 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	e160      	b.n	800239a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8152 	beq.w	8002394 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_GPIO_Init+0x40>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d130      	bne.n	800216a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0201 	and.w	r2, r3, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b03      	cmp	r3, #3
 8002174:	d017      	beq.n	80021a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d123      	bne.n	80021fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80ac 	beq.w	8002394 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223c:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <HAL_GPIO_Init+0x2f0>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <HAL_GPIO_Init+0x2f0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <HAL_GPIO_Init+0x2f0>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002254:	4a59      	ldr	r2, [pc, #356]	; (80023bc <HAL_GPIO_Init+0x2f4>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800227e:	d025      	beq.n	80022cc <HAL_GPIO_Init+0x204>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x2f8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d01f      	beq.n	80022c8 <HAL_GPIO_Init+0x200>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_GPIO_Init+0x2fc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d019      	beq.n	80022c4 <HAL_GPIO_Init+0x1fc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x300>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <HAL_GPIO_Init+0x1f8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_GPIO_Init+0x304>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00d      	beq.n	80022bc <HAL_GPIO_Init+0x1f4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_GPIO_Init+0x308>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <HAL_GPIO_Init+0x1f0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a4a      	ldr	r2, [pc, #296]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_GPIO_Init+0x1ec>
 80022b0:	2306      	movs	r3, #6
 80022b2:	e00c      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022b4:	2307      	movs	r3, #7
 80022b6:	e00a      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022b8:	2305      	movs	r3, #5
 80022ba:	e008      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022bc:	2304      	movs	r3, #4
 80022be:	e006      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022c0:	2303      	movs	r3, #3
 80022c2:	e004      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022cc:	2300      	movs	r3, #0
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	4093      	lsls	r3, r2
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_GPIO_Init+0x2f4>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_GPIO_Init+0x310>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002316:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800233a:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <HAL_GPIO_Init+0x310>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002364:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_GPIO_Init+0x310>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f ae97 	bne.w	80020d8 <HAL_GPIO_Init+0x10>
  }
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010000 	.word	0x40010000
 80023c0:	48000400 	.word	0x48000400
 80023c4:	48000800 	.word	0x48000800
 80023c8:	48000c00 	.word	0x48000c00
 80023cc:	48001000 	.word	0x48001000
 80023d0:	48001400 	.word	0x48001400
 80023d4:	48001800 	.word	0x48001800
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]
 8002416:	4613      	mov	r3, r2
 8002418:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800241a:	787b      	ldrb	r3, [r7, #1]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002420:	887a      	ldrh	r2, [r7, #2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002426:	e002      	b.n	800242e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fa48 	bl	80058ec <HAL_GPIO_EXTI_Callback>
  }
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e037      	b.n	80024ee <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002494:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002498:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f9c1 	bl	8002858 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}  
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_DMA_Start_IT+0x20>
 8002512:	2302      	movs	r3, #2
 8002514:	e04a      	b.n	80025ac <HAL_DMA_Start_IT+0xb6>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002524:	2b01      	cmp	r3, #1
 8002526:	d13a      	bne.n	800259e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f956 	bl	80027fe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 020e 	orr.w	r2, r2, #14
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e00f      	b.n	800258c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 020a 	orr.w	r2, r2, #10
 800257a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e005      	b.n	80025aa <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
} 
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d008      	beq.n	80025d8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2204      	movs	r2, #4
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e020      	b.n	800261a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 020e 	bic.w	r2, r2, #14
 80025e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f202 	lsl.w	r2, r1, r2
 8002606:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002636:	2b02      	cmp	r3, #2
 8002638:	d005      	beq.n	8002646 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e027      	b.n	8002696 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 020e 	bic.w	r2, r2, #14
 8002654:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
    } 
  }
  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d024      	beq.n	8002712 <HAL_DMA_IRQHandler+0x72>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01f      	beq.n	8002712 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	2104      	movs	r1, #4
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d06a      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002710:	e065      	b.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2202      	movs	r2, #2
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02c      	beq.n	800277c <HAL_DMA_IRQHandler+0xdc>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d027      	beq.n	800277c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 020a 	bic.w	r2, r2, #10
 8002748:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	2102      	movs	r1, #2
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d035      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800277a:	e030      	b.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2208      	movs	r2, #8
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d028      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d023      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 020e 	bic.w	r2, r2, #14
 80027a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
    }
  }
}  
 80027dc:	e7ff      	b.n	80027de <HAL_DMA_IRQHandler+0x13e>
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d108      	bne.n	800283e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800283c:	e007      	b.n	800284e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	60da      	str	r2, [r3, #12]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <DMA_CalcBaseAndBitshift+0x5c>)
 8002868:	429a      	cmp	r2, r3
 800286a:	d80f      	bhi.n	800288c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <DMA_CalcBaseAndBitshift+0x60>)
 8002874:	4413      	add	r3, r2
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <DMA_CalcBaseAndBitshift+0x64>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002888:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800288a:	e00e      	b.n	80028aa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002894:	4413      	add	r3, r2
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <DMA_CalcBaseAndBitshift+0x64>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	009a      	lsls	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <DMA_CalcBaseAndBitshift+0x70>)
 80028a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40020407 	.word	0x40020407
 80028b8:	bffdfff8 	.word	0xbffdfff8
 80028bc:	cccccccd 	.word	0xcccccccd
 80028c0:	40020000 	.word	0x40020000
 80028c4:	bffdfbf8 	.word	0xbffdfbf8
 80028c8:	40020400 	.word	0x40020400

080028cc <Gpt_Init>:

static void Gpt_TIM3_Init(void);
static void Gpt_Error_Handler(void);

void Gpt_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	Gpt_TIM3_Init();
 80028d0:	f000 f8aa 	bl	8002a28 <Gpt_TIM3_Init>
	Gpt_InitDone = 1u;
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <Gpt_Init+0x14>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000130 	.word	0x20000130

080028e4 <Gpt_TIM3_Start_IT>:

void Gpt_TIM3_Start_IT(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	if(1u == Gpt_InitDone)
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <Gpt_TIM3_Start_IT+0x18>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d102      	bne.n	80028f6 <Gpt_TIM3_Start_IT+0x12>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <Gpt_TIM3_Start_IT+0x1c>)
 80028f2:	f000 f943 	bl	8002b7c <HAL_TIM_Base_Start_IT>
	}
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000130 	.word	0x20000130
 8002900:	200000e4 	.word	0x200000e4

08002904 <HAL_TIM_PeriodElapsedCallback>:
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	/* Increment HAL counter */
	HAL_IncTick();
 800290c:	f003 f85e 	bl	80059cc <HAL_IncTick>
	//TODO: Remove and redirect timer callback
	if(tim3_count == 9999)
 8002910:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f242 720f 	movw	r2, #9999	; 0x270f
 8002918:	4293      	cmp	r3, r2
 800291a:	d112      	bne.n	8002942 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		tim3_count = 0u;
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
		tim3_5count = 0u;
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
		tim3_10count = 0u;
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
		tim3_50count = 0u;
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
		tim3_100count = 0u;
 8002934:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
		tim3_500count = 0u;
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e004      	b.n	800294c <HAL_TIM_PeriodElapsedCallback+0x48>
	}
	else
	{
		tim3_count++;
 8002942:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800294a:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 5) == 0u)
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002952:	fba3 2301 	umull	r2, r3, r3, r1
 8002956:	089a      	lsrs	r2, r3, #2
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	1aca      	subs	r2, r1, r3
 8002960:	2a00      	cmp	r2, #0
 8002962:	d104      	bne.n	800296e <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		tim3_5count++;
 8002964:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800296c:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 10) == 0u)
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002974:	fba3 2301 	umull	r2, r3, r3, r1
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	1aca      	subs	r2, r1, r3
 8002984:	2a00      	cmp	r2, #0
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		tim3_10count++;
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002990:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 50) == 0u)
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002998:	fba3 1302 	umull	r1, r3, r3, r2
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	2132      	movs	r1, #50	; 0x32
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		tim3_50count++;
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80029b2:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 100) == 0u)
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80029ba:	fba3 1302 	umull	r1, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2164      	movs	r1, #100	; 0x64
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_PeriodElapsedCallback+0xd2>
	{
		tim3_100count++;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80029d4:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 500) == 0u)
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80029dc:	fba3 1302 	umull	r1, r3, r3, r2
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PeriodElapsedCallback+0xf6>
	{
		tim3_500count++;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80029f8:	6013      	str	r3, [r2, #0]
	}
	//HAL_IncTick();
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200000cc 	.word	0x200000cc
 8002a08:	200000d0 	.word	0x200000d0
 8002a0c:	200000d4 	.word	0x200000d4
 8002a10:	200000d8 	.word	0x200000d8
 8002a14:	200000dc 	.word	0x200000dc
 8002a18:	200000e0 	.word	0x200000e0
 8002a1c:	cccccccd 	.word	0xcccccccd
 8002a20:	51eb851f 	.word	0x51eb851f
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <Gpt_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void Gpt_TIM3_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <Gpt_TIM3_Init+0x98>)
 8002a4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a4e:	220a      	movs	r2, #10
 8002a50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a5a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002a5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a6c:	4813      	ldr	r0, [pc, #76]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a6e:	f000 f82e 	bl	8002ace <HAL_TIM_Base_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <Gpt_TIM3_Init+0x54>
  {
	  Gpt_Error_Handler();
 8002a78:	f000 f824 	bl	8002ac4 <Gpt_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	4619      	mov	r1, r3
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002a8a:	f000 fc87 	bl	800339c <HAL_TIM_ConfigClockSource>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <Gpt_TIM3_Init+0x70>
  {
	  Gpt_Error_Handler();
 8002a94:	f000 f816 	bl	8002ac4 <Gpt_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <Gpt_TIM3_Init+0x94>)
 8002aa6:	f001 f9bd 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <Gpt_TIM3_Init+0x8c>
  {
	  Gpt_Error_Handler();
 8002ab0:	f000 f808 	bl	8002ac4 <Gpt_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200000e4 	.word	0x200000e4
 8002ac0:	40000400 	.word	0x40000400

08002ac4 <Gpt_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Gpt_Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002acc:	e7fe      	b.n	8002acc <Gpt_Error_Handler+0x8>

08002ace <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e049      	b.n	8002b74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f003 fa09 	bl	8005f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f000 fd33 	bl	8003578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d001      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04f      	b.n	8002c34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d018      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x76>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d115      	bne.n	8002c1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d015      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0a:	d011      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	e008      	b.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e000      	b.n	8002c32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40013400 	.word	0x40013400
 8002c50:	40014000 	.word	0x40014000
 8002c54:	40015000 	.word	0x40015000
 8002c58:	00010007 	.word	0x00010007

08002c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e049      	b.n	8002d02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f841 	bl	8002d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f000 fc6c 	bl	8003578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_TIM_PWM_Start+0x24>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e03c      	b.n	8002dba <HAL_TIM_PWM_Start+0x9e>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d109      	bne.n	8002d5a <HAL_TIM_PWM_Start+0x3e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e02f      	b.n	8002dba <HAL_TIM_PWM_Start+0x9e>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d109      	bne.n	8002d74 <HAL_TIM_PWM_Start+0x58>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e022      	b.n	8002dba <HAL_TIM_PWM_Start+0x9e>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d109      	bne.n	8002d8e <HAL_TIM_PWM_Start+0x72>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	e015      	b.n	8002dba <HAL_TIM_PWM_Start+0x9e>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d109      	bne.n	8002da8 <HAL_TIM_PWM_Start+0x8c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e008      	b.n	8002dba <HAL_TIM_PWM_Start+0x9e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0a1      	b.n	8002f06 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_PWM_Start+0xb6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd0:	e023      	b.n	8002e1a <HAL_TIM_PWM_Start+0xfe>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_PWM_Start+0xc6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de0:	e01b      	b.n	8002e1a <HAL_TIM_PWM_Start+0xfe>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_PWM_Start+0xd6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df0:	e013      	b.n	8002e1a <HAL_TIM_PWM_Start+0xfe>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Start+0xe6>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e00:	e00b      	b.n	8002e1a <HAL_TIM_PWM_Start+0xfe>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start+0xf6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e10:	e003      	b.n	8002e1a <HAL_TIM_PWM_Start+0xfe>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 ffda 	bl	8003ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a38      	ldr	r2, [pc, #224]	; (8002f10 <HAL_TIM_PWM_Start+0x1f4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x148>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a37      	ldr	r2, [pc, #220]	; (8002f14 <HAL_TIM_PWM_Start+0x1f8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x148>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <HAL_TIM_PWM_Start+0x1fc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x148>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <HAL_TIM_PWM_Start+0x200>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x148>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_TIM_PWM_Start+0x204>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x148>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <HAL_TIM_PWM_Start+0x208>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_TIM_PWM_Start+0x14c>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_TIM_PWM_Start+0x14e>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <HAL_TIM_PWM_Start+0x1f4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d01d      	beq.n	8002ec4 <HAL_TIM_PWM_Start+0x1a8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d018      	beq.n	8002ec4 <HAL_TIM_PWM_Start+0x1a8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <HAL_TIM_PWM_Start+0x20c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_TIM_PWM_Start+0x1a8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_TIM_PWM_Start+0x210>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_TIM_PWM_Start+0x1a8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_TIM_PWM_Start+0x1f8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_TIM_PWM_Start+0x1a8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_TIM_PWM_Start+0x1fc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_TIM_PWM_Start+0x1a8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_TIM_PWM_Start+0x208>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d115      	bne.n	8002ef0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_TIM_PWM_Start+0x214>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d015      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x1e6>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d011      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eee:	e008      	b.n	8002f02 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e000      	b.n	8002f04 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40013400 	.word	0x40013400
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800
 8002f24:	40015000 	.word	0x40015000
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	00010007 	.word	0x00010007

08002f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0202 	mvn.w	r2, #2
 8002f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fae2 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fad5 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fae4 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0204 	mvn.w	r2, #4
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fab8 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 faab 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 faba 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0208 	mvn.w	r2, #8
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2204      	movs	r2, #4
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa8e 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa81 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fa90 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b10      	cmp	r3, #16
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b10      	cmp	r3, #16
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0210 	mvn.w	r2, #16
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2208      	movs	r2, #8
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa64 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa57 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fa66 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0201 	mvn.w	r2, #1
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fc26 	bl	8002904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 ff35 	bl	8003f4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f2:	d10e      	bne.n	8003112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d107      	bne.n	8003112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800310a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 ff27 	bl	8003f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d10e      	bne.n	800313e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d107      	bne.n	800313e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fa13 	bl	8003564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b20      	cmp	r3, #32
 800314a:	d10e      	bne.n	800316a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0220 	mvn.w	r2, #32
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fee9 	bl	8003f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0ff      	b.n	8003392 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b14      	cmp	r3, #20
 800319e:	f200 80f0 	bhi.w	8003382 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031fd 	.word	0x080031fd
 80031ac:	08003383 	.word	0x08003383
 80031b0:	08003383 	.word	0x08003383
 80031b4:	08003383 	.word	0x08003383
 80031b8:	0800323d 	.word	0x0800323d
 80031bc:	08003383 	.word	0x08003383
 80031c0:	08003383 	.word	0x08003383
 80031c4:	08003383 	.word	0x08003383
 80031c8:	0800327f 	.word	0x0800327f
 80031cc:	08003383 	.word	0x08003383
 80031d0:	08003383 	.word	0x08003383
 80031d4:	08003383 	.word	0x08003383
 80031d8:	080032bf 	.word	0x080032bf
 80031dc:	08003383 	.word	0x08003383
 80031e0:	08003383 	.word	0x08003383
 80031e4:	08003383 	.word	0x08003383
 80031e8:	08003301 	.word	0x08003301
 80031ec:	08003383 	.word	0x08003383
 80031f0:	08003383 	.word	0x08003383
 80031f4:	08003383 	.word	0x08003383
 80031f8:	08003341 	.word	0x08003341
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fa54 	bl	80036b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0208 	orr.w	r2, r2, #8
 8003216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0204 	bic.w	r2, r2, #4
 8003226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6999      	ldr	r1, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	619a      	str	r2, [r3, #24]
      break;
 800323a:	e0a5      	b.n	8003388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 face 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6999      	ldr	r1, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	021a      	lsls	r2, r3, #8
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	619a      	str	r2, [r3, #24]
      break;
 800327c:	e084      	b.n	8003388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fb3f 	bl	8003908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0208 	orr.w	r2, r2, #8
 8003298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0204 	bic.w	r2, r2, #4
 80032a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69d9      	ldr	r1, [r3, #28]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]
      break;
 80032bc:	e064      	b.n	8003388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fbb1 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	021a      	lsls	r2, r3, #8
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	61da      	str	r2, [r3, #28]
      break;
 80032fe:	e043      	b.n	8003388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fbfe 	bl	8003b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0208 	orr.w	r2, r2, #8
 800331a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0204 	bic.w	r2, r2, #4
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800333e:	e023      	b.n	8003388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fc48 	bl	8003bdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003380:	e002      	b.n	8003388 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	75fb      	strb	r3, [r7, #23]
      break;
 8003386:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003390:	7dfb      	ldrb	r3, [r7, #23]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop

0800339c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIM_ConfigClockSource+0x1c>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e0b6      	b.n	8003526 <HAL_TIM_ConfigClockSource+0x18a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f4:	d03e      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0xd8>
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	f200 8087 	bhi.w	800350c <HAL_TIM_ConfigClockSource+0x170>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	f000 8086 	beq.w	8003512 <HAL_TIM_ConfigClockSource+0x176>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	d87f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d01a      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0xaa>
 8003410:	2b70      	cmp	r3, #112	; 0x70
 8003412:	d87b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 8003414:	2b60      	cmp	r3, #96	; 0x60
 8003416:	d050      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x11e>
 8003418:	2b60      	cmp	r3, #96	; 0x60
 800341a:	d877      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800341c:	2b50      	cmp	r3, #80	; 0x50
 800341e:	d03c      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xfe>
 8003420:	2b50      	cmp	r3, #80	; 0x50
 8003422:	d873      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d058      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x13e>
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d86f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800342c:	2b30      	cmp	r3, #48	; 0x30
 800342e:	d064      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003430:	2b30      	cmp	r3, #48	; 0x30
 8003432:	d86b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d060      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d867      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x170>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05c      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d05a      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15e>
 8003444:	e062      	b.n	800350c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f000 fca2 	bl	8003d9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
      break;
 8003472:	e04f      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f000 fc8b 	bl	8003d9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003496:	609a      	str	r2, [r3, #8]
      break;
 8003498:	e03c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 fc02 	bl	8003cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2150      	movs	r1, #80	; 0x50
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fc59 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 80034b8:	e02c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 fc20 	bl	8003d0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2160      	movs	r1, #96	; 0x60
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fc49 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 80034d8:	e01c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 fbe2 	bl	8003cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fc39 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 80034f8:	e00c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f000 fc30 	bl	8003d6a <TIM_ITRx_SetConfig>
      break;
 800350a:	e003      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e000      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a41      	ldr	r2, [pc, #260]	; (8003690 <TIM_Base_SetConfig+0x118>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003596:	d00f      	beq.n	80035b8 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3e      	ldr	r2, [pc, #248]	; (8003694 <TIM_Base_SetConfig+0x11c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3d      	ldr	r2, [pc, #244]	; (8003698 <TIM_Base_SetConfig+0x120>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3c      	ldr	r2, [pc, #240]	; (800369c <TIM_Base_SetConfig+0x124>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3b      	ldr	r2, [pc, #236]	; (80036a0 <TIM_Base_SetConfig+0x128>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d108      	bne.n	80035ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a30      	ldr	r2, [pc, #192]	; (8003690 <TIM_Base_SetConfig+0x118>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d8:	d01b      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <TIM_Base_SetConfig+0x11c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d017      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <TIM_Base_SetConfig+0x120>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	; (800369c <TIM_Base_SetConfig+0x124>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <TIM_Base_SetConfig+0x12c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <TIM_Base_SetConfig+0x130>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <TIM_Base_SetConfig+0x134>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <TIM_Base_SetConfig+0x128>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <TIM_Base_SetConfig+0x118>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <TIM_Base_SetConfig+0x100>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <TIM_Base_SetConfig+0x124>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <TIM_Base_SetConfig+0x100>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <TIM_Base_SetConfig+0x12c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_Base_SetConfig+0x100>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <TIM_Base_SetConfig+0x130>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_Base_SetConfig+0x100>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <TIM_Base_SetConfig+0x134>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_Base_SetConfig+0x100>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <TIM_Base_SetConfig+0x128>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	615a      	str	r2, [r3, #20]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800
 800369c:	40013400 	.word	0x40013400
 80036a0:	40015000 	.word	0x40015000
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800

080036b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0201 	bic.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f023 0302 	bic.w	r3, r3, #2
 80036fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a30      	ldr	r2, [pc, #192]	; (80037cc <TIM_OC1_SetConfig+0x11c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <TIM_OC1_SetConfig+0x88>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <TIM_OC1_SetConfig+0x120>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00f      	beq.n	8003738 <TIM_OC1_SetConfig+0x88>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a2e      	ldr	r2, [pc, #184]	; (80037d4 <TIM_OC1_SetConfig+0x124>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_OC1_SetConfig+0x88>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a2d      	ldr	r2, [pc, #180]	; (80037d8 <TIM_OC1_SetConfig+0x128>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_OC1_SetConfig+0x88>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a2c      	ldr	r2, [pc, #176]	; (80037dc <TIM_OC1_SetConfig+0x12c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_OC1_SetConfig+0x88>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <TIM_OC1_SetConfig+0x130>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d10c      	bne.n	8003752 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0308 	bic.w	r3, r3, #8
 800373e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <TIM_OC1_SetConfig+0x11c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <TIM_OC1_SetConfig+0xd2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <TIM_OC1_SetConfig+0x120>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00f      	beq.n	8003782 <TIM_OC1_SetConfig+0xd2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <TIM_OC1_SetConfig+0x124>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <TIM_OC1_SetConfig+0xd2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <TIM_OC1_SetConfig+0x128>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <TIM_OC1_SetConfig+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <TIM_OC1_SetConfig+0x12c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_OC1_SetConfig+0xd2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <TIM_OC1_SetConfig+0x130>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d111      	bne.n	80037a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40013400 	.word	0x40013400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800
 80037e0:	40015000 	.word	0x40015000

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0320 	bic.w	r3, r3, #32
 8003832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <TIM_OC2_SetConfig+0x10c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_OC2_SetConfig+0x74>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <TIM_OC2_SetConfig+0x110>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_OC2_SetConfig+0x74>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <TIM_OC2_SetConfig+0x114>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10d      	bne.n	8003874 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <TIM_OC2_SetConfig+0x10c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <TIM_OC2_SetConfig+0xc0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <TIM_OC2_SetConfig+0x110>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00f      	beq.n	80038a4 <TIM_OC2_SetConfig+0xc0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <TIM_OC2_SetConfig+0x118>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <TIM_OC2_SetConfig+0xc0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <TIM_OC2_SetConfig+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_OC2_SetConfig+0xc0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <TIM_OC2_SetConfig+0x120>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_OC2_SetConfig+0xc0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC2_SetConfig+0x114>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d113      	bne.n	80038cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038aa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40013400 	.word	0x40013400
 80038f8:	40015000 	.word	0x40015000
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800

08003908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <TIM_OC3_SetConfig+0x10c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_OC3_SetConfig+0x72>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <TIM_OC3_SetConfig+0x110>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_OC3_SetConfig+0x72>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <TIM_OC3_SetConfig+0x114>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10d      	bne.n	8003996 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003994:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <TIM_OC3_SetConfig+0x10c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <TIM_OC3_SetConfig+0xbe>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <TIM_OC3_SetConfig+0x110>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00f      	beq.n	80039c6 <TIM_OC3_SetConfig+0xbe>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <TIM_OC3_SetConfig+0x118>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <TIM_OC3_SetConfig+0xbe>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <TIM_OC3_SetConfig+0x11c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_OC3_SetConfig+0xbe>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <TIM_OC3_SetConfig+0x120>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_OC3_SetConfig+0xbe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <TIM_OC3_SetConfig+0x114>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d113      	bne.n	80039ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40013400 	.word	0x40013400
 8003a1c:	40015000 	.word	0x40015000
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	031b      	lsls	r3, r3, #12
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <TIM_OC4_SetConfig+0xc4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <TIM_OC4_SetConfig+0x8c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <TIM_OC4_SetConfig+0xc8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00f      	beq.n	8003ab8 <TIM_OC4_SetConfig+0x8c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <TIM_OC4_SetConfig+0xcc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_OC4_SetConfig+0x8c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <TIM_OC4_SetConfig+0xd0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_OC4_SetConfig+0x8c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <TIM_OC4_SetConfig+0xd4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_OC4_SetConfig+0x8c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <TIM_OC4_SetConfig+0xd8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d109      	bne.n	8003acc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800
 8003b04:	40015000 	.word	0x40015000

08003b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <TIM_OC5_SetConfig+0xbc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <TIM_OC5_SetConfig+0x82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <TIM_OC5_SetConfig+0xc0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <TIM_OC5_SetConfig+0x82>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <TIM_OC5_SetConfig+0xc4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_OC5_SetConfig+0x82>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <TIM_OC5_SetConfig+0xc8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_OC5_SetConfig+0x82>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <TIM_OC5_SetConfig+0xcc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_OC5_SetConfig+0x82>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <TIM_OC5_SetConfig+0xd0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d109      	bne.n	8003b9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	621a      	str	r2, [r3, #32]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800
 8003bd8:	40015000 	.word	0x40015000

08003bdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	051b      	lsls	r3, r3, #20
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <TIM_OC6_SetConfig+0xbc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <TIM_OC6_SetConfig+0x84>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <TIM_OC6_SetConfig+0xc0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00f      	beq.n	8003c60 <TIM_OC6_SetConfig+0x84>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a17      	ldr	r2, [pc, #92]	; (8003ca0 <TIM_OC6_SetConfig+0xc4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <TIM_OC6_SetConfig+0x84>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <TIM_OC6_SetConfig+0xc8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_OC6_SetConfig+0x84>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <TIM_OC6_SetConfig+0xcc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_OC6_SetConfig+0x84>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a14      	ldr	r2, [pc, #80]	; (8003cac <TIM_OC6_SetConfig+0xd0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d109      	bne.n	8003c74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	029b      	lsls	r3, r3, #10
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40013400 	.word	0x40013400
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800
 8003cac:	40015000 	.word	0x40015000

08003cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 030a 	bic.w	r3, r3, #10
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f023 0210 	bic.w	r2, r3, #16
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	031b      	lsls	r3, r3, #12
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	621a      	str	r2, [r3, #32]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f043 0307 	orr.w	r3, r3, #7
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b087      	sub	sp, #28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	021a      	lsls	r2, r3, #8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	609a      	str	r2, [r3, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	2201      	movs	r2, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1a      	ldr	r2, [r3, #32]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	401a      	ands	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	fa01 f303 	lsl.w	r3, r1, r3
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e06d      	b.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a30      	ldr	r2, [pc, #192]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2f      	ldr	r2, [pc, #188]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d018      	beq.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1a      	ldr	r2, [pc, #104]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d10c      	bne.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	40015000 	.word	0x40015000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40014000 	.word	0x40014000

08003f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
	...

08003f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0a7      	b.n	80040d6 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d12c      	bne.n	8003fec <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a50      	ldr	r2, [pc, #320]	; (80040e0 <HAL_I2C_Init+0x16c>)
 8003f9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a50      	ldr	r2, [pc, #320]	; (80040e4 <HAL_I2C_Init+0x170>)
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4f      	ldr	r2, [pc, #316]	; (80040e8 <HAL_I2C_Init+0x174>)
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a4f      	ldr	r2, [pc, #316]	; (80040ec <HAL_I2C_Init+0x178>)
 8003fb0:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4e      	ldr	r2, [pc, #312]	; (80040f0 <HAL_I2C_Init+0x17c>)
 8003fb6:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a4e      	ldr	r2, [pc, #312]	; (80040f4 <HAL_I2C_Init+0x180>)
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4d      	ldr	r2, [pc, #308]	; (80040f8 <HAL_I2C_Init+0x184>)
 8003fc2:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a4d      	ldr	r2, [pc, #308]	; (80040fc <HAL_I2C_Init+0x188>)
 8003fc8:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4c      	ldr	r2, [pc, #304]	; (8004100 <HAL_I2C_Init+0x18c>)
 8003fce:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a4c      	ldr	r2, [pc, #304]	; (8004104 <HAL_I2C_Init+0x190>)
 8003fd4:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a49      	ldr	r2, [pc, #292]	; (8004108 <HAL_I2C_Init+0x194>)
 8003fe2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004010:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004020:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e006      	b.n	8004048 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004046:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d104      	bne.n	800405a <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004058:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69d9      	ldr	r1, [r3, #28]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	08004331 	.word	0x08004331
 80040e4:	08004343 	.word	0x08004343
 80040e8:	08004355 	.word	0x08004355
 80040ec:	08004367 	.word	0x08004367
 80040f0:	08004393 	.word	0x08004393
 80040f4:	080090dd 	.word	0x080090dd
 80040f8:	080090fd 	.word	0x080090fd
 80040fc:	0800911d 	.word	0x0800911d
 8004100:	080043a5 	.word	0x080043a5
 8004104:	08004379 	.word	0x08004379
 8004108:	08005d35 	.word	0x08005d35

0800410c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	817b      	strh	r3, [r7, #10]
 800411e:	460b      	mov	r3, r1
 8004120:	813b      	strh	r3, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b20      	cmp	r3, #32
 8004130:	f040 80d5 	bne.w	80042de <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_I2C_Mem_Read_DMA+0x34>
 800413a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0c9      	b.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415a:	d101      	bne.n	8004160 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
 800415e:	e0bf      	b.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_I2C_Mem_Read_DMA+0x62>
 800416a:	2302      	movs	r3, #2
 800416c:	e0b8      	b.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004176:	f001 fc3b 	bl	80059f0 <HAL_GetTick>
 800417a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2222      	movs	r2, #34	; 0x22
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2240      	movs	r2, #64	; 0x40
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a51      	ldr	r2, [pc, #324]	; (80042e8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a51      	ldr	r2, [pc, #324]	; (80042ec <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2bff      	cmp	r3, #255	; 0xff
 80041b2:	d906      	bls.n	80041c2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	22ff      	movs	r2, #255	; 0xff
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80041ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e007      	b.n	80041d2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80041cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80041d2:	88f8      	ldrh	r0, [r7, #6]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	8979      	ldrh	r1, [r7, #10]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	2319      	movs	r3, #25
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4603      	mov	r3, r0
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fbc8 	bl	8004978 <I2C_RequestMemoryRead>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e072      	b.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d020      	beq.n	8004244 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	4a3a      	ldr	r2, [pc, #232]	; (80042f0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8004208:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8004210:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	2200      	movs	r2, #0
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	2200      	movs	r2, #0
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	4619      	mov	r1, r3
 800422e:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004234:	f7fe f95f 	bl	80024f6 <HAL_DMA_Start_IT>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d139      	bne.n	80042b6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8004242:	e013      	b.n	800426c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e039      	b.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	b2da      	uxtb	r2, r3
 8004272:	8979      	ldrh	r1, [r7, #10]
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f001 f9b6 	bl	80055ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800429a:	2110      	movs	r1, #16
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f001 f9d1 	bl	8005644 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e014      	b.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f043 0210 	orr.w	r2, r3, #16
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	ffff0000 	.word	0xffff0000
 80042ec:	080045d3 	.word	0x080045d3
 80042f0:	08005301 	.word	0x08005301
 80042f4:	08005397 	.word	0x08005397
 80042f8:	80002400 	.word	0x80002400

080042fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
  }
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
 8004384:	4613      	mov	r3, r2
 8004386:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <I2C_Slave_ISR_IT+0x24>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e0ec      	b.n	80045ca <I2C_Slave_ISR_IT+0x1fe>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004410:	6939      	ldr	r1, [r7, #16]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fcf6 	bl	8004e04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d04d      	beq.n	80044c0 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800442c:	2b00      	cmp	r3, #0
 800442e:	d047      	beq.n	80044c0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d128      	bne.n	800448c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b28      	cmp	r3, #40	; 0x28
 8004444:	d108      	bne.n	8004458 <I2C_Slave_ISR_IT+0x8c>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800444c:	d104      	bne.n	8004458 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800444e:	6939      	ldr	r1, [r7, #16]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fde3 	bl	800501c <I2C_ITListenCplt>
 8004456:	e032      	b.n	80044be <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b29      	cmp	r3, #41	; 0x29
 8004462:	d10e      	bne.n	8004482 <I2C_Slave_ISR_IT+0xb6>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800446a:	d00a      	beq.n	8004482 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2210      	movs	r2, #16
 8004472:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 ff20 	bl	80052ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fb93 	bl	8004ba6 <I2C_ITSlaveSeqCplt>
 8004480:	e01d      	b.n	80044be <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2210      	movs	r2, #16
 8004488:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800448a:	e096      	b.n	80045ba <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2210      	movs	r2, #16
 8004492:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <I2C_Slave_ISR_IT+0xe4>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044ac:	f040 8085 	bne.w	80045ba <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	4619      	mov	r1, r3
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fe06 	bl	80050c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80044bc:	e07d      	b.n	80045ba <I2C_Slave_ISR_IT+0x1ee>
 80044be:	e07c      	b.n	80045ba <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d030      	beq.n	800452e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02a      	beq.n	800452e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d018      	beq.n	8004514 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d14f      	bne.n	80045be <I2C_Slave_ISR_IT+0x1f2>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004524:	d04b      	beq.n	80045be <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fb3d 	bl	8004ba6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800452c:	e047      	b.n	80045be <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	08db      	lsrs	r3, r3, #3
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fa69 	bl	8004a20 <I2C_ITAddrCplt>
 800454e:	e037      	b.n	80045c0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d031      	beq.n	80045c0 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02b      	beq.n	80045c0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80045a2:	e00d      	b.n	80045c0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045aa:	d002      	beq.n	80045b2 <I2C_Slave_ISR_IT+0x1e6>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 faf7 	bl	8004ba6 <I2C_ITSlaveSeqCplt>
 80045b8:	e002      	b.n	80045c0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80045be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af02      	add	r7, sp, #8
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <I2C_Master_ISR_DMA+0x1a>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e0e1      	b.n	80047b0 <I2C_Master_ISR_DMA+0x1de>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d017      	beq.n	8004630 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004608:	2b00      	cmp	r3, #0
 800460a:	d011      	beq.n	8004630 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2210      	movs	r2, #16
 8004612:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f043 0204 	orr.w	r2, r3, #4
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004620:	2120      	movs	r1, #32
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f001 f80e 	bl	8005644 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fe46 	bl	80052ba <I2C_Flush_TXDR>
 800462e:	e0ba      	b.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	09db      	lsrs	r3, r3, #7
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d072      	beq.n	8004722 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004644:	2b00      	cmp	r3, #0
 8004646:	d06c      	beq.n	8004722 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004656:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04e      	beq.n	8004700 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2bff      	cmp	r3, #255	; 0xff
 8004678:	d906      	bls.n	8004688 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	22ff      	movs	r2, #255	; 0xff
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e010      	b.n	80046aa <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800469a:	d003      	beq.n	80046a4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	e002      	b.n	80046aa <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80046a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046a8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	8a79      	ldrh	r1, [r7, #18]
 80046b2:	2300      	movs	r3, #0
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 ff97 	bl	80055ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b22      	cmp	r3, #34	; 0x22
 80046da:	d108      	bne.n	80046ee <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80046ec:	e05b      	b.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80046fe:	e052      	b.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470e:	d003      	beq.n	8004718 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fa09 	bl	8004b28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004716:	e046      	b.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004718:	2140      	movs	r1, #64	; 0x40
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fcd4 	bl	80050c8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004720:	e041      	b.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d029      	beq.n	8004782 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004736:	2b00      	cmp	r3, #0
 8004738:	d023      	beq.n	8004782 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d119      	bne.n	8004778 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004752:	d027      	beq.n	80047a4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800475c:	d108      	bne.n	8004770 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800476e:	e019      	b.n	80047a4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f9d9 	bl	8004b28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004776:	e015      	b.n	80047a4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004778:	2140      	movs	r1, #64	; 0x40
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fca4 	bl	80050c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004780:	e010      	b.n	80047a4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fa63 	bl	8004c68 <I2C_ITMasterCplt>
 80047a2:	e000      	b.n	80047a6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80047a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <I2C_Slave_ISR_DMA+0x24>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0c9      	b.n	8004970 <I2C_Slave_ISR_DMA+0x1b8>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d009      	beq.n	8004804 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fb00 	bl	8004e04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 809a 	beq.w	8004946 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8093 	beq.w	8004946 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0b9b      	lsrs	r3, r3, #14
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d105      	bne.n	8004838 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0bdb      	lsrs	r3, r3, #15
 8004830:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004834:	2b00      	cmp	r3, #0
 8004836:	d07f      	beq.n	8004938 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	0bdb      	lsrs	r3, r3, #15
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004858:	2301      	movs	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0b9b      	lsrs	r3, r3, #14
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800487c:	2301      	movs	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d128      	bne.n	80048d8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b28      	cmp	r3, #40	; 0x28
 8004890:	d108      	bne.n	80048a4 <I2C_Slave_ISR_DMA+0xec>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004898:	d104      	bne.n	80048a4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fbbd 	bl	800501c <I2C_ITListenCplt>
 80048a2:	e048      	b.n	8004936 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b29      	cmp	r3, #41	; 0x29
 80048ae:	d10e      	bne.n	80048ce <I2C_Slave_ISR_DMA+0x116>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b6:	d00a      	beq.n	80048ce <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fcfa 	bl	80052ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f96d 	bl	8004ba6 <I2C_ITSlaveSeqCplt>
 80048cc:	e033      	b.n	8004936 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2210      	movs	r2, #16
 80048d4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80048d6:	e034      	b.n	8004942 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2210      	movs	r2, #16
 80048de:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <I2C_Slave_ISR_DMA+0x14a>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004900:	d11f      	bne.n	8004942 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b21      	cmp	r3, #33	; 0x21
 8004906:	d002      	beq.n	800490e <I2C_Slave_ISR_DMA+0x156>
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b29      	cmp	r3, #41	; 0x29
 800490c:	d103      	bne.n	8004916 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2221      	movs	r2, #33	; 0x21
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
 8004914:	e008      	b.n	8004928 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b22      	cmp	r3, #34	; 0x22
 800491a:	d002      	beq.n	8004922 <I2C_Slave_ISR_DMA+0x16a>
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b2a      	cmp	r3, #42	; 0x2a
 8004920:	d102      	bne.n	8004928 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2222      	movs	r2, #34	; 0x22
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	4619      	mov	r1, r3
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fbca 	bl	80050c8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004934:	e005      	b.n	8004942 <I2C_Slave_ISR_DMA+0x18a>
 8004936:	e004      	b.n	8004942 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2210      	movs	r2, #16
 800493e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004940:	e011      	b.n	8004966 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004942:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004944:	e00f      	b.n	8004966 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f85d 	bl	8004a20 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	8979      	ldrh	r1, [r7, #10]
 8004998:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <I2C_RequestMemoryRead+0xa4>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fe24 	bl	80055ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	69b9      	ldr	r1, [r7, #24]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fd69 	bl	8005480 <I2C_WaitOnTXISFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e02c      	b.n	8004a12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049be:	893b      	ldrh	r3, [r7, #8]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28
 80049c8:	e015      	b.n	80049f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ca:	893b      	ldrh	r3, [r7, #8]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	69b9      	ldr	r1, [r7, #24]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fd4f 	bl	8005480 <I2C_WaitOnTXISFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e012      	b.n	8004a12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ec:	893b      	ldrh	r3, [r7, #8]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2140      	movs	r1, #64	; 0x40
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fcfd 	bl	8005400 <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	80002000 	.word	0x80002000

08004a20 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a36:	2b28      	cmp	r3, #40	; 0x28
 8004a38:	d16a      	bne.n	8004b10 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a58:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a66:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a74:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d138      	bne.n	8004af0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	09db      	lsrs	r3, r3, #7
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	89bb      	ldrh	r3, [r7, #12]
 8004a86:	4053      	eors	r3, r2
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f003 0306 	and.w	r3, r3, #6
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11c      	bne.n	8004acc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d13b      	bne.n	8004b20 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	89ba      	ldrh	r2, [r7, #12]
 8004ac4:	7bf9      	ldrb	r1, [r7, #15]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004aca:	e029      	b.n	8004b20 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fe17 	bl	8005708 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	89ba      	ldrh	r2, [r7, #12]
 8004ae8:	7bf9      	ldrb	r1, [r7, #15]
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
}
 8004aee:	e017      	b.n	8004b20 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fe07 	bl	8005708 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	89ba      	ldrh	r2, [r7, #12]
 8004b08:	7bf9      	ldrb	r1, [r7, #15]
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
}
 8004b0e:	e007      	b.n	8004b20 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2208      	movs	r2, #8
 8004b16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b21      	cmp	r3, #33	; 0x21
 8004b42:	d116      	bne.n	8004b72 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2211      	movs	r2, #17
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b58:	2101      	movs	r1, #1
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fdd4 	bl	8005708 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b70:	e015      	b.n	8004b9e <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2212      	movs	r2, #18
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b86:	2102      	movs	r1, #2
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fdbd 	bl	8005708 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0b9b      	lsrs	r3, r3, #14
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e00d      	b.n	8004bf8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	0bdb      	lsrs	r3, r3, #15
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b29      	cmp	r3, #41	; 0x29
 8004c02:	d113      	bne.n	8004c2c <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2228      	movs	r2, #40	; 0x28
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2221      	movs	r2, #33	; 0x21
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c12:	2101      	movs	r1, #1
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fd77 	bl	8005708 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c2a:	e018      	b.n	8004c5e <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b2a      	cmp	r3, #42	; 0x2a
 8004c36:	d112      	bne.n	8004c5e <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2228      	movs	r2, #40	; 0x28
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2222      	movs	r2, #34	; 0x22
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c46:	2102      	movs	r1, #2
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fd5d 	bl	8005708 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b21      	cmp	r3, #33	; 0x21
 8004c88:	d107      	bne.n	8004c9a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fd3b 	bl	8005708 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2211      	movs	r2, #17
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
 8004c98:	e00c      	b.n	8004cb4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b22      	cmp	r3, #34	; 0x22
 8004ca4:	d106      	bne.n	8004cb4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fd2d 	bl	8005708 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2212      	movs	r2, #18
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b4f      	ldr	r3, [pc, #316]	; (8004dfc <I2C_ITMasterCplt+0x194>)
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a4c      	ldr	r2, [pc, #304]	; (8004e00 <I2C_ITMasterCplt+0x198>)
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	f043 0204 	orr.w	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b60      	cmp	r3, #96	; 0x60
 8004cfa:	d10b      	bne.n	8004d14 <I2C_ITMasterCplt+0xac>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	089b      	lsrs	r3, r3, #2
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004d12:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fad0 	bl	80052ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d002      	beq.n	8004d32 <I2C_ITMasterCplt+0xca>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f9c5 	bl	80050c8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d3e:	e058      	b.n	8004df2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b21      	cmp	r3, #33	; 0x21
 8004d4a:	d126      	bne.n	8004d9a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d10c      	bne.n	8004d80 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
}
 8004d7e:	e038      	b.n	8004df2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
}
 8004d98:	e02b      	b.n	8004df2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b22      	cmp	r3, #34	; 0x22
 8004da4:	d125      	bne.n	8004df2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d10c      	bne.n	8004dda <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
}
 8004dd8:	e00b      	b.n	8004df2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
}
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	fe00e800 	.word	0xfe00e800
 8004e00:	ffff0000 	.word	0xffff0000

08004e04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e20:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2220      	movs	r2, #32
 8004e28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b21      	cmp	r3, #33	; 0x21
 8004e2e:	d002      	beq.n	8004e36 <I2C_ITSlaveCplt+0x32>
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b29      	cmp	r3, #41	; 0x29
 8004e34:	d108      	bne.n	8004e48 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e36:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fc64 	bl	8005708 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2221      	movs	r2, #33	; 0x21
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
 8004e46:	e00d      	b.n	8004e64 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b22      	cmp	r3, #34	; 0x22
 8004e4c:	d002      	beq.n	8004e54 <I2C_ITSlaveCplt+0x50>
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b2a      	cmp	r3, #42	; 0x2a
 8004e52:	d107      	bne.n	8004e64 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e54:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc55 	bl	8005708 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2222      	movs	r2, #34	; 0x22
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b65      	ldr	r3, [pc, #404]	; (8005014 <I2C_ITSlaveCplt+0x210>)
 8004e80:	400b      	ands	r3, r1
 8004e82:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fa18 	bl	80052ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	0b9b      	lsrs	r3, r3, #14
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d013      	beq.n	8004ebe <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ea4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d020      	beq.n	8004ef0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ebc:	e018      	b.n	8004ef0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	0bdb      	lsrs	r3, r3, #15
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d012      	beq.n	8004ef0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	089b      	lsrs	r3, r3, #2
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4c:	f043 0204 	orr.w	r2, r3, #4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d010      	beq.n	8004f8c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f8a9 	bl	80050c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b28      	cmp	r3, #40	; 0x28
 8004f80:	d144      	bne.n	800500c <I2C_ITSlaveCplt+0x208>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f82:	6979      	ldr	r1, [r7, #20]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f849 	bl	800501c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f8a:	e03f      	b.n	800500c <I2C_ITSlaveCplt+0x208>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f94:	d015      	beq.n	8004fc2 <I2C_ITSlaveCplt+0x1be>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fe05 	bl	8004ba6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <I2C_ITSlaveCplt+0x214>)
 8004fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
}
 8004fc0:	e024      	b.n	800500c <I2C_ITSlaveCplt+0x208>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b22      	cmp	r3, #34	; 0x22
 8004fcc:	d10f      	bne.n	8004fee <I2C_ITSlaveCplt+0x1ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
}
 8004fec:	e00e      	b.n	800500c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
}
 800500c:	bf00      	nop
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	fe00e800 	.word	0xfe00e800
 8005018:	ffff0000 	.word	0xffff0000

0800501c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a26      	ldr	r2, [pc, #152]	; (80050c4 <I2C_ITListenCplt+0xa8>)
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d022      	beq.n	800509a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d012      	beq.n	800509a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f043 0204 	orr.w	r2, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800509a:	f248 0103 	movw	r1, #32771	; 0x8003
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fb32 	bl	8005708 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2210      	movs	r2, #16
 80050aa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	ffff0000 	.word	0xffff0000

080050c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a5d      	ldr	r2, [pc, #372]	; (800525c <I2C_ITError+0x194>)
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	2b28      	cmp	r3, #40	; 0x28
 80050fe:	d005      	beq.n	800510c <I2C_ITError+0x44>
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b29      	cmp	r3, #41	; 0x29
 8005104:	d002      	beq.n	800510c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b2a      	cmp	r3, #42	; 0x2a
 800510a:	d10b      	bne.n	8005124 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800510c:	2103      	movs	r1, #3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fafa 	bl	8005708 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2228      	movs	r2, #40	; 0x28
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a50      	ldr	r2, [pc, #320]	; (8005260 <I2C_ITError+0x198>)
 8005120:	635a      	str	r2, [r3, #52]	; 0x34
 8005122:	e011      	b.n	8005148 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005124:	f248 0103 	movw	r1, #32771	; 0x8003
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 faed 	bl	8005708 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b60      	cmp	r3, #96	; 0x60
 8005138:	d003      	beq.n	8005142 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d039      	beq.n	80051ca <I2C_ITError+0x102>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b11      	cmp	r3, #17
 800515a:	d002      	beq.n	8005162 <I2C_ITError+0x9a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b21      	cmp	r3, #33	; 0x21
 8005160:	d133      	bne.n	80051ca <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005170:	d107      	bne.n	8005182 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005180:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd fb2d 	bl	80027e6 <HAL_DMA_GetState>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d017      	beq.n	80051c2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	4a33      	ldr	r2, [pc, #204]	; (8005264 <I2C_ITError+0x19c>)
 8005198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd fa3c 	bl	8002624 <HAL_DMA_Abort_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d04d      	beq.n	800524e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051c0:	e045      	b.n	800524e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f850 	bl	8005268 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051c8:	e041      	b.n	800524e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d039      	beq.n	8005246 <I2C_ITError+0x17e>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b12      	cmp	r3, #18
 80051d6:	d002      	beq.n	80051de <I2C_ITError+0x116>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b22      	cmp	r3, #34	; 0x22
 80051dc:	d133      	bne.n	8005246 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ec:	d107      	bne.n	80051fe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	4618      	mov	r0, r3
 8005204:	f7fd faef 	bl	80027e6 <HAL_DMA_GetState>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d017      	beq.n	800523e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	4a14      	ldr	r2, [pc, #80]	; (8005264 <I2C_ITError+0x19c>)
 8005214:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd f9fe 	bl	8002624 <HAL_DMA_Abort_IT>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d011      	beq.n	8005252 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005238:	4610      	mov	r0, r2
 800523a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800523c:	e009      	b.n	8005252 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f812 	bl	8005268 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005244:	e005      	b.n	8005252 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f80e 	bl	8005268 <I2C_TreatErrorCallback>
  }
}
 800524c:	e002      	b.n	8005254 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005252:	bf00      	nop
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	ffff0000 	.word	0xffff0000
 8005260:	080043cd 	.word	0x080043cd
 8005264:	080053c5 	.word	0x080053c5

08005268 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d10f      	bne.n	800529c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800529a:	e00a      	b.n	80052b2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d103      	bne.n	80052d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d007      	beq.n	80052f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	619a      	str	r2, [r3, #24]
  }
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800531c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005328:	2120      	movs	r1, #32
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f98a 	bl	8005644 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005330:	e02d      	b.n	800538e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	2bff      	cmp	r3, #255	; 0xff
 8005348:	d903      	bls.n	8005352 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	22ff      	movs	r2, #255	; 0xff
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005350:	e004      	b.n	800535c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3324      	adds	r3, #36	; 0x24
 8005366:	4619      	mov	r1, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005372:	f7fd f8c0 	bl	80024f6 <HAL_DMA_Start_IT>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800537c:	2110      	movs	r1, #16
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff fea2 	bl	80050c8 <I2C_ITError>
}
 8005384:	e003      	b.n	800538e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005386:	2140      	movs	r1, #64	; 0x40
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f95b 	bl	8005644 <I2C_Enable_IRQ>
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80053b4:	2110      	movs	r1, #16
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fe86 	bl	80050c8 <I2C_ITError>
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	2200      	movs	r2, #0
 80053e0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	2200      	movs	r2, #0
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff ff38 	bl	8005268 <I2C_TreatErrorCallback>
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005410:	e022      	b.n	8005458 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d01e      	beq.n	8005458 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f000 fae9 	bl	80059f0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d113      	bne.n	8005458 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e00f      	b.n	8005478 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	429a      	cmp	r2, r3
 8005474:	d0cd      	beq.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800548c:	e02c      	b.n	80054e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f834 	bl	8005500 <I2C_IsAcknowledgeFailed>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e02a      	b.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d01e      	beq.n	80054e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f000 faa1 	bl	80059f0 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d113      	bne.n	80054e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e007      	b.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d1cb      	bne.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b10      	cmp	r3, #16
 8005518:	d161      	bne.n	80055de <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005528:	d02b      	beq.n	8005582 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005538:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	e022      	b.n	8005582 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d01e      	beq.n	8005582 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005544:	f000 fa54 	bl	80059f0 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <I2C_IsAcknowledgeFailed+0x5a>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d113      	bne.n	8005582 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	f043 0220 	orr.w	r2, r3, #32
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e02e      	b.n	80055e0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d1d5      	bne.n	800553c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2210      	movs	r2, #16
 8005596:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2220      	movs	r2, #32
 800559e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff fe8a 	bl	80052ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <I2C_IsAcknowledgeFailed+0xe8>)
 80055b2:	400b      	ands	r3, r1
 80055b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	fe00e800 	.word	0xfe00e800

080055ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	460b      	mov	r3, r1
 80055f8:	817b      	strh	r3, [r7, #10]
 80055fa:	4613      	mov	r3, r2
 80055fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	0d5b      	lsrs	r3, r3, #21
 8005608:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <I2C_TransferConfig+0x54>)
 800560e:	430b      	orrs	r3, r1
 8005610:	43db      	mvns	r3, r3
 8005612:	ea02 0103 	and.w	r1, r2, r3
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800561c:	7a7b      	ldrb	r3, [r7, #9]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	431a      	orrs	r2, r3
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	03ff63ff 	.word	0x03ff63ff

08005644 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	4a29      	ldr	r2, [pc, #164]	; (8005700 <I2C_Enable_IRQ+0xbc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005662:	4a28      	ldr	r2, [pc, #160]	; (8005704 <I2C_Enable_IRQ+0xc0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d11d      	bne.n	80056a4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005668:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800566c:	2b00      	cmp	r3, #0
 800566e:	da03      	bge.n	8005678 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005676:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005678:	887b      	ldrh	r3, [r7, #2]
 800567a:	2b10      	cmp	r3, #16
 800567c:	d103      	bne.n	8005686 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005684:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005686:	887b      	ldrh	r3, [r7, #2]
 8005688:	2b20      	cmp	r3, #32
 800568a:	d103      	bne.n	8005694 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005692:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d125      	bne.n	80056e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056a2:	e020      	b.n	80056e6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	da03      	bge.n	80056b4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056b4:	887b      	ldrh	r3, [r7, #2]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80056c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80056d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056d8:	887b      	ldrh	r3, [r7, #2]
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d103      	bne.n	80056e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f043 0320 	orr.w	r3, r3, #32
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6819      	ldr	r1, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	080045d3 	.word	0x080045d3
 8005704:	080047b9 	.word	0x080047b9

08005708 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005718:	887b      	ldrh	r3, [r7, #2]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00f      	beq.n	8005742 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005728:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005736:	2b28      	cmp	r3, #40	; 0x28
 8005738:	d003      	beq.n	8005742 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005740:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005742:	887b      	ldrh	r3, [r7, #2]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00f      	beq.n	800576c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005752:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005760:	2b28      	cmp	r3, #40	; 0x28
 8005762:	d003      	beq.n	800576c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800576a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800576c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005770:	2b00      	cmp	r3, #0
 8005772:	da03      	bge.n	800577c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800577a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800577c:	887b      	ldrh	r3, [r7, #2]
 800577e:	2b10      	cmp	r3, #16
 8005780:	d103      	bne.n	800578a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800578a:	887b      	ldrh	r3, [r7, #2]
 800578c:	2b20      	cmp	r3, #32
 800578e:	d103      	bne.n	8005798 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f043 0320 	orr.w	r3, r3, #32
 8005796:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005798:	887b      	ldrh	r3, [r7, #2]
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d103      	bne.n	80057a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6819      	ldr	r1, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	43da      	mvns	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	400a      	ands	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d138      	bne.n	800584a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e032      	b.n	800584c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2224      	movs	r2, #36	; 0x24
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005814:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6819      	ldr	r1, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800584a:	2302      	movs	r3, #2
  }
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b20      	cmp	r3, #32
 800586a:	d139      	bne.n	80058e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005876:	2302      	movs	r3, #2
 8005878:	e033      	b.n	80058e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2224      	movs	r2, #36	; 0x24
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058e0:	2302      	movs	r3, #2
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr

080058ec <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fc:	d10e      	bne.n	800591c <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80058fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005902:	4808      	ldr	r0, [pc, #32]	; (8005924 <HAL_GPIO_EXTI_Callback+0x38>)
 8005904:	f7fc fd6a 	bl	80023dc <HAL_GPIO_ReadPin>
 8005908:	4603      	mov	r3, r0
 800590a:	2b01      	cmp	r3, #1
 800590c:	d103      	bne.n	8005916 <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 800590e:	2001      	movs	r0, #1
 8005910:	f004 f8ec 	bl	8009aec <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8005914:	e002      	b.n	800591c <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 8005916:	2000      	movs	r0, #0
 8005918:	f004 f8e8 	bl	8009aec <Rte_Write_PC13_Pin_State>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	48000800 	.word	0x48000800

08005928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800592c:	bf00      	nop
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005938:	4b08      	ldr	r3, [pc, #32]	; (800595c <HAL_Init+0x28>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a07      	ldr	r2, [pc, #28]	; (800595c <HAL_Init+0x28>)
 800593e:	f043 0310 	orr.w	r3, r3, #16
 8005942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005944:	2003      	movs	r0, #3
 8005946:	f000 f929 	bl	8005b9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800594a:	200f      	movs	r0, #15
 800594c:	f000 f808 	bl	8005960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005950:	f000 f966 	bl	8005c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40022000 	.word	0x40022000

08005960 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_InitTick+0x60>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_InitTick+0x64>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	4619      	mov	r1, r3
 8005972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005976:	fbb3 f3f1 	udiv	r3, r3, r1
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f941 	bl	8005c06 <HAL_SYSTICK_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e014      	b.n	80059b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d810      	bhi.n	80059b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005994:	2200      	movs	r2, #0
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	f000 f909 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80059a0:	2200      	movs	r2, #0
 80059a2:	210f      	movs	r1, #15
 80059a4:	f06f 0001 	mvn.w	r0, #1
 80059a8:	f000 f903 	bl	8005bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059ac:	4a06      	ldr	r2, [pc, #24]	; (80059c8 <HAL_InitTick+0x68>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e000      	b.n	80059b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000000 	.word	0x20000000
 80059c4:	20000008 	.word	0x20000008
 80059c8:	20000004 	.word	0x20000004

080059cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_IncTick+0x1c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_IncTick+0x20>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4413      	add	r3, r2
 80059dc:	4a03      	ldr	r2, [pc, #12]	; (80059ec <HAL_IncTick+0x20>)
 80059de:	6013      	str	r3, [r2, #0]
}
 80059e0:	bf00      	nop
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	20000008 	.word	0x20000008
 80059ec:	20000134 	.word	0x20000134

080059f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80059f4:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <HAL_GetTick+0x10>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr
 8005a00:	20000134 	.word	0x20000134

08005a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <__NVIC_SetPriorityGrouping+0x44>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a20:	4013      	ands	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <__NVIC_SetPriorityGrouping+0x44>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	60d3      	str	r3, [r2, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <__NVIC_GetPriorityGrouping+0x18>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	f003 0307 	and.w	r3, r3, #7
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	db0b      	blt.n	8005a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	f003 021f 	and.w	r2, r3, #31
 8005a80:	4906      	ldr	r1, [pc, #24]	; (8005a9c <__NVIC_EnableIRQ+0x34>)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	2001      	movs	r0, #1
 8005a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr
 8005a9c:	e000e100 	.word	0xe000e100

08005aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	6039      	str	r1, [r7, #0]
 8005aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db0a      	blt.n	8005aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	490c      	ldr	r1, [pc, #48]	; (8005aec <__NVIC_SetPriority+0x4c>)
 8005aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005abe:	0112      	lsls	r2, r2, #4
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ac8:	e00a      	b.n	8005ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4908      	ldr	r1, [pc, #32]	; (8005af0 <__NVIC_SetPriority+0x50>)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	3b04      	subs	r3, #4
 8005ad8:	0112      	lsls	r2, r2, #4
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	440b      	add	r3, r1
 8005ade:	761a      	strb	r2, [r3, #24]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	e000e100 	.word	0xe000e100
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f1c3 0307 	rsb	r3, r3, #7
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	bf28      	it	cs
 8005b12:	2304      	movcs	r3, #4
 8005b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d902      	bls.n	8005b24 <NVIC_EncodePriority+0x30>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3b03      	subs	r3, #3
 8005b22:	e000      	b.n	8005b26 <NVIC_EncodePriority+0x32>
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b28:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43da      	mvns	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	401a      	ands	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	43d9      	mvns	r1, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b4c:	4313      	orrs	r3, r2
         );
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3724      	adds	r7, #36	; 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b68:	d301      	bcc.n	8005b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e00f      	b.n	8005b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <SysTick_Config+0x40>)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b76:	210f      	movs	r1, #15
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	f7ff ff90 	bl	8005aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <SysTick_Config+0x40>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b86:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <SysTick_Config+0x40>)
 8005b88:	2207      	movs	r2, #7
 8005b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	e000e010 	.word	0xe000e010

08005b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff2d 	bl	8005a04 <__NVIC_SetPriorityGrouping>
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	4603      	mov	r3, r0
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bc4:	f7ff ff42 	bl	8005a4c <__NVIC_GetPriorityGrouping>
 8005bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	6978      	ldr	r0, [r7, #20]
 8005bd0:	f7ff ff90 	bl	8005af4 <NVIC_EncodePriority>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff ff5f 	bl	8005aa0 <__NVIC_SetPriority>
}
 8005be2:	bf00      	nop
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff ff35 	bl	8005a68 <__NVIC_EnableIRQ>
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff ffa2 	bl	8005b58 <SysTick_Config>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c26:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <HAL_MspInit+0x40>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <HAL_MspInit+0x40>)
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	6193      	str	r3, [r2, #24]
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_MspInit+0x40>)
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <HAL_MspInit+0x40>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	4a07      	ldr	r2, [pc, #28]	; (8005c60 <HAL_MspInit+0x40>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c48:	61d3      	str	r3, [r2, #28]
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <HAL_MspInit+0x40>)
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	40021000 	.word	0x40021000

08005c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	611a      	str	r2, [r3, #16]
	  if(hadc->Instance==ADC1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c84:	d14c      	bne.n	8005d20 <HAL_ADC_MspInit+0xbc>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */

	  /* USER CODE END ADC1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_ADC12_CLK_ENABLE();
 8005c86:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <HAL_ADC_MspInit+0xc4>)
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	4a27      	ldr	r2, [pc, #156]	; (8005d28 <HAL_ADC_MspInit+0xc4>)
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c90:	6153      	str	r3, [r2, #20]
 8005c92:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <HAL_ADC_MspInit+0xc4>)
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c9e:	4b22      	ldr	r3, [pc, #136]	; (8005d28 <HAL_ADC_MspInit+0xc4>)
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <HAL_ADC_MspInit+0xc4>)
 8005ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca8:	6153      	str	r3, [r2, #20]
 8005caa:	4b1f      	ldr	r3, [pc, #124]	; (8005d28 <HAL_ADC_MspInit+0xc4>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
	    /**ADC1 GPIO Configuration
	    PA0     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc2:	f107 0314 	add.w	r3, r7, #20
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ccc:	f7fc f9fc 	bl	80020c8 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA1_Channel1;
 8005cd0:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005cd2:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <HAL_ADC_MspInit+0xcc>)
 8005cd4:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cee:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cf6:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	61da      	str	r2, [r3, #28]
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d04:	4809      	ldr	r0, [pc, #36]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005d06:	f7fc fbaf 	bl	8002468 <HAL_DMA_Init>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_ADC_MspInit+0xb0>
	    {
	    	Msp_Error_Handler();
 8005d10:	f000 f9a6 	bl	8006060 <Msp_Error_Handler>
	    }

	    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a05      	ldr	r2, [pc, #20]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
 8005d1a:	4a04      	ldr	r2, [pc, #16]	; (8005d2c <HAL_ADC_MspInit+0xc8>)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6253      	str	r3, [r2, #36]	; 0x24

	  /* USER CODE BEGIN ADC1_MspInit 1 */

	  /* USER CODE END ADC1_MspInit 1 */
	  }
}
 8005d20:	bf00      	nop
 8005d22:	3728      	adds	r7, #40	; 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	20000190 	.word	0x20000190
 8005d30:	40020008 	.word	0x40020008

08005d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a41      	ldr	r2, [pc, #260]	; (8005e58 <HAL_I2C_MspInit+0x124>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d17c      	bne.n	8005e50 <HAL_I2C_MspInit+0x11c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <HAL_I2C_MspInit+0x128>)
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	4a40      	ldr	r2, [pc, #256]	; (8005e5c <HAL_I2C_MspInit+0x128>)
 8005d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d60:	6153      	str	r3, [r2, #20]
 8005d62:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <HAL_I2C_MspInit+0x128>)
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d74:	2312      	movs	r3, #18
 8005d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d80:	2304      	movs	r3, #4
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4835      	ldr	r0, [pc, #212]	; (8005e60 <HAL_I2C_MspInit+0x12c>)
 8005d8c:	f7fc f99c 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d90:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <HAL_I2C_MspInit+0x128>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4a31      	ldr	r2, [pc, #196]	; (8005e5c <HAL_I2C_MspInit+0x128>)
 8005d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d9a:	61d3      	str	r3, [r2, #28]
 8005d9c:	4b2f      	ldr	r3, [pc, #188]	; (8005e5c <HAL_I2C_MspInit+0x128>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8005da8:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005daa:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <HAL_I2C_MspInit+0x134>)
 8005dac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dae:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005db4:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dba:	4b2a      	ldr	r3, [pc, #168]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005dbc:	2280      	movs	r2, #128	; 0x80
 8005dbe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dc0:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dc6:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005dcc:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005dd2:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005dd8:	4822      	ldr	r0, [pc, #136]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005dda:	f7fc fb45 	bl	8002468 <HAL_DMA_Init>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_I2C_MspInit+0xb4>
    {
    	Msp_Error_Handler();
 8005de4:	f000 f93c 	bl	8006060 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005dec:	63da      	str	r2, [r3, #60]	; 0x3c
 8005dee:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <HAL_I2C_MspInit+0x130>)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005df4:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005df6:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <HAL_I2C_MspInit+0x13c>)
 8005df8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e00:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e0c:	4b17      	ldr	r3, [pc, #92]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e12:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005e18:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005e24:	4811      	ldr	r0, [pc, #68]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e26:	f7fc fb1f 	bl	8002468 <HAL_DMA_Init>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_MspInit+0x100>
    {
    	Msp_Error_Handler();
 8005e30:	f000 f916 	bl	8006060 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a0d      	ldr	r2, [pc, #52]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
 8005e3a:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <HAL_I2C_MspInit+0x138>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005e40:	2200      	movs	r2, #0
 8005e42:	2100      	movs	r1, #0
 8005e44:	201f      	movs	r0, #31
 8005e46:	f7ff feb4 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005e4a:	201f      	movs	r0, #31
 8005e4c:	f7ff fecd 	bl	8005bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e50:	bf00      	nop
 8005e52:	3728      	adds	r7, #40	; 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40005400 	.word	0x40005400
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	48000400 	.word	0x48000400
 8005e64:	20000250 	.word	0x20000250
 8005e68:	40020080 	.word	0x40020080
 8005e6c:	20000294 	.word	0x20000294
 8005e70:	4002006c 	.word	0x4002006c

08005e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	; 0x28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_SPI_MspInit+0x8c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d130      	bne.n	8005ef8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005e96:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <HAL_SPI_MspInit+0x90>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <HAL_SPI_MspInit+0x90>)
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	61d3      	str	r3, [r2, #28]
 8005ea2:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <HAL_SPI_MspInit+0x90>)
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <HAL_SPI_MspInit+0x90>)
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <HAL_SPI_MspInit+0x90>)
 8005eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eb8:	6153      	str	r3, [r2, #20]
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_SPI_MspInit+0x90>)
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005ec6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005ed8:	2306      	movs	r3, #6
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005edc:	f107 0314 	add.w	r3, r7, #20
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4809      	ldr	r0, [pc, #36]	; (8005f08 <HAL_SPI_MspInit+0x94>)
 8005ee4:	f7fc f8f0 	bl	80020c8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2100      	movs	r1, #0
 8005eec:	2033      	movs	r0, #51	; 0x33
 8005eee:	f7ff fe60 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005ef2:	2033      	movs	r0, #51	; 0x33
 8005ef4:	f7ff fe79 	bl	8005bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005ef8:	bf00      	nop
 8005efa:	3728      	adds	r7, #40	; 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40003c00 	.word	0x40003c00
 8005f04:	40021000 	.word	0x40021000
 8005f08:	48000800 	.word	0x48000800

08005f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a0d      	ldr	r2, [pc, #52]	; (8005f50 <HAL_TIM_Base_MspInit+0x44>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d113      	bne.n	8005f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <HAL_TIM_Base_MspInit+0x48>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <HAL_TIM_Base_MspInit+0x48>)
 8005f24:	f043 0302 	orr.w	r3, r3, #2
 8005f28:	61d3      	str	r3, [r2, #28]
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_TIM_Base_MspInit+0x48>)
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005f36:	2200      	movs	r2, #0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	201d      	movs	r0, #29
 8005f3c:	f7ff fe39 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005f40:	201d      	movs	r0, #29
 8005f42:	f7ff fe52 	bl	8005bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40021000 	.word	0x40021000

08005f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f60:	f107 031c 	add.w	r3, r7, #28
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a36      	ldr	r2, [pc, #216]	; (8006050 <HAL_UART_MspInit+0xf8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d130      	bne.n	8005fdc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	4a35      	ldr	r2, [pc, #212]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f84:	6193      	str	r3, [r2, #24]
 8005f86:	4b33      	ldr	r3, [pc, #204]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f92:	4b30      	ldr	r3, [pc, #192]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4a2f      	ldr	r2, [pc, #188]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9c:	6153      	str	r3, [r2, #20]
 8005f9e:	4b2d      	ldr	r3, [pc, #180]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005faa:	2330      	movs	r3, #48	; 0x30
 8005fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005fba:	2307      	movs	r3, #7
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fbe:	f107 031c 	add.w	r3, r7, #28
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4824      	ldr	r0, [pc, #144]	; (8006058 <HAL_UART_MspInit+0x100>)
 8005fc6:	f7fc f87f 	bl	80020c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2100      	movs	r1, #0
 8005fce:	2025      	movs	r0, #37	; 0x25
 8005fd0:	f7ff fdef 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005fd4:	2025      	movs	r0, #37	; 0x25
 8005fd6:	f7ff fe08 	bl	8005bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005fda:	e035      	b.n	8006048 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1e      	ldr	r2, [pc, #120]	; (800605c <HAL_UART_MspInit+0x104>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d130      	bne.n	8006048 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fe6:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff0:	61d3      	str	r3, [r2, #28]
 8005ff2:	4b18      	ldr	r3, [pc, #96]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	4a14      	ldr	r2, [pc, #80]	; (8006054 <HAL_UART_MspInit+0xfc>)
 8006004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006008:	6153      	str	r3, [r2, #20]
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <HAL_UART_MspInit+0xfc>)
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006016:	230c      	movs	r3, #12
 8006018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601a:	2302      	movs	r3, #2
 800601c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006022:	2303      	movs	r3, #3
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006026:	2307      	movs	r3, #7
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800602a:	f107 031c 	add.w	r3, r7, #28
 800602e:	4619      	mov	r1, r3
 8006030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006034:	f7fc f848 	bl	80020c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006038:	2200      	movs	r2, #0
 800603a:	2100      	movs	r1, #0
 800603c:	2026      	movs	r0, #38	; 0x26
 800603e:	f7ff fdb8 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006042:	2026      	movs	r0, #38	; 0x26
 8006044:	f7ff fdd1 	bl	8005bea <HAL_NVIC_EnableIRQ>
}
 8006048:	bf00      	nop
 800604a:	3730      	adds	r7, #48	; 0x30
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40013800 	.word	0x40013800
 8006054:	40021000 	.word	0x40021000
 8006058:	48000800 	.word	0x48000800
 800605c:	40004400 	.word	0x40004400

08006060 <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006064:	b672      	cpsid	i
}
 8006066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006068:	e7fe      	b.n	8006068 <Msp_Error_Handler+0x8>
	...

0800606c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006072:	af00      	add	r7, sp, #0
 8006074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800607c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800607e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006082:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f001 b83a 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006096:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 816f 	beq.w	8006386 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80060a8:	4bb5      	ldr	r3, [pc, #724]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f003 030c 	and.w	r3, r3, #12
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d00c      	beq.n	80060ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060b4:	4bb2      	ldr	r3, [pc, #712]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d15c      	bne.n	800617a <HAL_RCC_OscConfig+0x10e>
 80060c0:	4baf      	ldr	r3, [pc, #700]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80060c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060cc:	d155      	bne.n	800617a <HAL_RCC_OscConfig+0x10e>
 80060ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80060da:	fa93 f3a3 	rbit	r3, r3
 80060de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e6:	fab3 f383 	clz	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d102      	bne.n	8006100 <HAL_RCC_OscConfig+0x94>
 80060fa:	4ba1      	ldr	r3, [pc, #644]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	e015      	b.n	800612c <HAL_RCC_OscConfig+0xc0>
 8006100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006104:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800610c:	fa93 f3a3 	rbit	r3, r3
 8006110:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006118:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800611c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006120:	fa93 f3a3 	rbit	r3, r3
 8006124:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006128:	4b95      	ldr	r3, [pc, #596]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006130:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006134:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8006138:	fa92 f2a2 	rbit	r2, r2
 800613c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8006140:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006144:	fab2 f282 	clz	r2, r2
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	f042 0220 	orr.w	r2, r2, #32
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	f002 021f 	and.w	r2, r2, #31
 8006154:	2101      	movs	r1, #1
 8006156:	fa01 f202 	lsl.w	r2, r1, r2
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8111 	beq.w	8006384 <HAL_RCC_OscConfig+0x318>
 8006162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 8108 	bne.w	8006384 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f000 bfc6 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800617a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800617e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618a:	d106      	bne.n	800619a <HAL_RCC_OscConfig+0x12e>
 800618c:	4b7c      	ldr	r3, [pc, #496]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7b      	ldr	r2, [pc, #492]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	e036      	b.n	8006208 <HAL_RCC_OscConfig+0x19c>
 800619a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800619e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCC_OscConfig+0x158>
 80061aa:	4b75      	ldr	r3, [pc, #468]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a74      	ldr	r2, [pc, #464]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b72      	ldr	r3, [pc, #456]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a71      	ldr	r2, [pc, #452]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e021      	b.n	8006208 <HAL_RCC_OscConfig+0x19c>
 80061c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCC_OscConfig+0x184>
 80061d6:	4b6a      	ldr	r3, [pc, #424]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a69      	ldr	r2, [pc, #420]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b67      	ldr	r3, [pc, #412]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a66      	ldr	r2, [pc, #408]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e00b      	b.n	8006208 <HAL_RCC_OscConfig+0x19c>
 80061f0:	4b63      	ldr	r3, [pc, #396]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a62      	ldr	r2, [pc, #392]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	4b60      	ldr	r3, [pc, #384]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5f      	ldr	r2, [pc, #380]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 8006202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006206:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800620c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d059      	beq.n	80062cc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006218:	f7ff fbea 	bl	80059f0 <HAL_GetTick>
 800621c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006220:	e00a      	b.n	8006238 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006222:	f7ff fbe5 	bl	80059f0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d902      	bls.n	8006238 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	f000 bf67 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
 8006238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800623c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006240:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006244:	fa93 f3a3 	rbit	r3, r3
 8006248:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800624c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006250:	fab3 f383 	clz	r3, r3
 8006254:	b2db      	uxtb	r3, r3
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	b2db      	uxtb	r3, r3
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d102      	bne.n	800626a <HAL_RCC_OscConfig+0x1fe>
 8006264:	4b46      	ldr	r3, [pc, #280]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	e015      	b.n	8006296 <HAL_RCC_OscConfig+0x22a>
 800626a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800626e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800627e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006282:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006286:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006292:	4b3b      	ldr	r3, [pc, #236]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800629a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800629e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80062a2:	fa92 f2a2 	rbit	r2, r2
 80062a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80062aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80062ae:	fab2 f282 	clz	r2, r2
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	f042 0220 	orr.w	r2, r2, #32
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	f002 021f 	and.w	r2, r2, #31
 80062be:	2101      	movs	r1, #1
 80062c0:	fa01 f202 	lsl.w	r2, r1, r2
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ab      	beq.n	8006222 <HAL_RCC_OscConfig+0x1b6>
 80062ca:	e05c      	b.n	8006386 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7ff fb90 	bl	80059f0 <HAL_GetTick>
 80062d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d4:	e00a      	b.n	80062ec <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d6:	f7ff fb8b 	bl	80059f0 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	; 0x64
 80062e4:	d902      	bls.n	80062ec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	f000 bf0d 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
 80062ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80062f8:	fa93 f3a3 	rbit	r3, r3
 80062fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8006300:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006304:	fab3 f383 	clz	r3, r3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d102      	bne.n	800631e <HAL_RCC_OscConfig+0x2b2>
 8006318:	4b19      	ldr	r3, [pc, #100]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	e015      	b.n	800634a <HAL_RCC_OscConfig+0x2de>
 800631e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006322:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006326:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800632a:	fa93 f3a3 	rbit	r3, r3
 800632e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006336:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800633a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800633e:	fa93 f3a3 	rbit	r3, r3
 8006342:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006346:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <HAL_RCC_OscConfig+0x314>)
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800634e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006352:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006356:	fa92 f2a2 	rbit	r2, r2
 800635a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800635e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006362:	fab2 f282 	clz	r2, r2
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	f042 0220 	orr.w	r2, r2, #32
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	f002 021f 	and.w	r2, r2, #31
 8006372:	2101      	movs	r1, #1
 8006374:	fa01 f202 	lsl.w	r2, r1, r2
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1ab      	bne.n	80062d6 <HAL_RCC_OscConfig+0x26a>
 800637e:	e002      	b.n	8006386 <HAL_RCC_OscConfig+0x31a>
 8006380:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800638a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 817f 	beq.w	800669a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800639c:	4ba7      	ldr	r3, [pc, #668]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00c      	beq.n	80063c2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80063a8:	4ba4      	ldr	r3, [pc, #656]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d173      	bne.n	800649c <HAL_RCC_OscConfig+0x430>
 80063b4:	4ba1      	ldr	r3, [pc, #644]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80063bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c0:	d16c      	bne.n	800649c <HAL_RCC_OscConfig+0x430>
 80063c2:	2302      	movs	r3, #2
 80063c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80063d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d8:	fab3 f383 	clz	r3, r3
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d102      	bne.n	80063f2 <HAL_RCC_OscConfig+0x386>
 80063ec:	4b93      	ldr	r3, [pc, #588]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	e013      	b.n	800641a <HAL_RCC_OscConfig+0x3ae>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80063fc:	fa93 f3a3 	rbit	r3, r3
 8006400:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006404:	2302      	movs	r3, #2
 8006406:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800640a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800640e:	fa93 f3a3 	rbit	r3, r3
 8006412:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006416:	4b89      	ldr	r3, [pc, #548]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2202      	movs	r2, #2
 800641c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006420:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006424:	fa92 f2a2 	rbit	r2, r2
 8006428:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800642c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006430:	fab2 f282 	clz	r2, r2
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	f042 0220 	orr.w	r2, r2, #32
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	f002 021f 	and.w	r2, r2, #31
 8006440:	2101      	movs	r1, #1
 8006442:	fa01 f202 	lsl.w	r2, r1, r2
 8006446:	4013      	ands	r3, r2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <HAL_RCC_OscConfig+0x3f6>
 800644c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006450:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d002      	beq.n	8006462 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f000 be52 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b76      	ldr	r3, [pc, #472]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800646e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	21f8      	movs	r1, #248	; 0xf8
 8006478:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006480:	fa91 f1a1 	rbit	r1, r1
 8006484:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006488:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800648c:	fab1 f181 	clz	r1, r1
 8006490:	b2c9      	uxtb	r1, r1
 8006492:	408b      	lsls	r3, r1
 8006494:	4969      	ldr	r1, [pc, #420]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649a:	e0fe      	b.n	800669a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800649c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8088 	beq.w	80065be <HAL_RCC_OscConfig+0x552>
 80064ae:	2301      	movs	r3, #1
 80064b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80064b8:	fa93 f3a3 	rbit	r3, r3
 80064bc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80064c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c4:	fab3 f383 	clz	r3, r3
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	461a      	mov	r2, r3
 80064d6:	2301      	movs	r3, #1
 80064d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064da:	f7ff fa89 	bl	80059f0 <HAL_GetTick>
 80064de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e2:	e00a      	b.n	80064fa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064e4:	f7ff fa84 	bl	80059f0 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d902      	bls.n	80064fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	f000 be06 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
 80064fa:	2302      	movs	r3, #2
 80064fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006500:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006504:	fa93 f3a3 	rbit	r3, r3
 8006508:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800650c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006510:	fab3 f383 	clz	r3, r3
 8006514:	b2db      	uxtb	r3, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d102      	bne.n	800652a <HAL_RCC_OscConfig+0x4be>
 8006524:	4b45      	ldr	r3, [pc, #276]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	e013      	b.n	8006552 <HAL_RCC_OscConfig+0x4e6>
 800652a:	2302      	movs	r3, #2
 800652c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006534:	fa93 f3a3 	rbit	r3, r3
 8006538:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800653c:	2302      	movs	r3, #2
 800653e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006542:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006546:	fa93 f3a3 	rbit	r3, r3
 800654a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800654e:	4b3b      	ldr	r3, [pc, #236]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	2202      	movs	r2, #2
 8006554:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006558:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800655c:	fa92 f2a2 	rbit	r2, r2
 8006560:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006564:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006568:	fab2 f282 	clz	r2, r2
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	f042 0220 	orr.w	r2, r2, #32
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	f002 021f 	and.w	r2, r2, #31
 8006578:	2101      	movs	r1, #1
 800657a:	fa01 f202 	lsl.w	r2, r1, r2
 800657e:	4013      	ands	r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0af      	beq.n	80064e4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006584:	4b2d      	ldr	r3, [pc, #180]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800658c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	21f8      	movs	r1, #248	; 0xf8
 800659a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80065a2:	fa91 f1a1 	rbit	r1, r1
 80065a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80065aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80065ae:	fab1 f181 	clz	r1, r1
 80065b2:	b2c9      	uxtb	r1, r1
 80065b4:	408b      	lsls	r3, r1
 80065b6:	4921      	ldr	r1, [pc, #132]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	600b      	str	r3, [r1, #0]
 80065bc:	e06d      	b.n	800669a <HAL_RCC_OscConfig+0x62e>
 80065be:	2301      	movs	r3, #1
 80065c0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80065c8:	fa93 f3a3 	rbit	r3, r3
 80065cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80065d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d4:	fab3 f383 	clz	r3, r3
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	461a      	mov	r2, r3
 80065e6:	2300      	movs	r3, #0
 80065e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7ff fa01 	bl	80059f0 <HAL_GetTick>
 80065ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065f2:	e00a      	b.n	800660a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f4:	f7ff f9fc 	bl	80059f0 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d902      	bls.n	800660a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	f000 bd7e 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
 800660a:	2302      	movs	r3, #2
 800660c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006610:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006614:	fa93 f3a3 	rbit	r3, r3
 8006618:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800661c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006620:	fab3 f383 	clz	r3, r3
 8006624:	b2db      	uxtb	r3, r3
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <HAL_RCC_OscConfig+0x5d4>
 8006634:	4b01      	ldr	r3, [pc, #4]	; (800663c <HAL_RCC_OscConfig+0x5d0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	e016      	b.n	8006668 <HAL_RCC_OscConfig+0x5fc>
 800663a:	bf00      	nop
 800663c:	40021000 	.word	0x40021000
 8006640:	2302      	movs	r3, #2
 8006642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800664a:	fa93 f3a3 	rbit	r3, r3
 800664e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006652:	2302      	movs	r3, #2
 8006654:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006658:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800665c:	fa93 f3a3 	rbit	r3, r3
 8006660:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006664:	4bbf      	ldr	r3, [pc, #764]	; (8006964 <HAL_RCC_OscConfig+0x8f8>)
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	2202      	movs	r2, #2
 800666a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800666e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006672:	fa92 f2a2 	rbit	r2, r2
 8006676:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800667a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800667e:	fab2 f282 	clz	r2, r2
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	f042 0220 	orr.w	r2, r2, #32
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	f002 021f 	and.w	r2, r2, #31
 800668e:	2101      	movs	r1, #1
 8006690:	fa01 f202 	lsl.w	r2, r1, r2
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1ac      	bne.n	80065f4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800669a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800669e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8113 	beq.w	80068d6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d07c      	beq.n	80067ba <HAL_RCC_OscConfig+0x74e>
 80066c0:	2301      	movs	r3, #1
 80066c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ca:	fa93 f3a3 	rbit	r3, r3
 80066ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80066d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066d6:	fab3 f383 	clz	r3, r3
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	4ba2      	ldr	r3, [pc, #648]	; (8006968 <HAL_RCC_OscConfig+0x8fc>)
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	461a      	mov	r2, r3
 80066e6:	2301      	movs	r3, #1
 80066e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ea:	f7ff f981 	bl	80059f0 <HAL_GetTick>
 80066ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066f2:	e00a      	b.n	800670a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066f4:	f7ff f97c 	bl	80059f0 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d902      	bls.n	800670a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	f000 bcfe 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
 800670a:	2302      	movs	r3, #2
 800670c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006714:	fa93 f2a3 	rbit	r2, r3
 8006718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800671c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672a:	2202      	movs	r2, #2
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	fa93 f2a3 	rbit	r2, r3
 800673c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800674a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800674e:	2202      	movs	r2, #2
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	fa93 f2a3 	rbit	r2, r3
 8006760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006764:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006768:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800676a:	4b7e      	ldr	r3, [pc, #504]	; (8006964 <HAL_RCC_OscConfig+0x8f8>)
 800676c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800676e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006772:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006776:	2102      	movs	r1, #2
 8006778:	6019      	str	r1, [r3, #0]
 800677a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800677e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	fa93 f1a3 	rbit	r1, r3
 8006788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800678c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006790:	6019      	str	r1, [r3, #0]
  return result;
 8006792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006796:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	fab3 f383 	clz	r3, r3
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2101      	movs	r1, #1
 80067ae:	fa01 f303 	lsl.w	r3, r1, r3
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d09d      	beq.n	80066f4 <HAL_RCC_OscConfig+0x688>
 80067b8:	e08d      	b.n	80068d6 <HAL_RCC_OscConfig+0x86a>
 80067ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	fa93 f2a3 	rbit	r2, r3
 80067d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80067dc:	601a      	str	r2, [r3, #0]
  return result;
 80067de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80067e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e8:	fab3 f383 	clz	r3, r3
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	4b5d      	ldr	r3, [pc, #372]	; (8006968 <HAL_RCC_OscConfig+0x8fc>)
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	461a      	mov	r2, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067fc:	f7ff f8f8 	bl	80059f0 <HAL_GetTick>
 8006800:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006804:	e00a      	b.n	800681c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006806:	f7ff f8f3 	bl	80059f0 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d902      	bls.n	800681c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	f000 bc75 	b.w	8007106 <HAL_RCC_OscConfig+0x109a>
 800681c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006820:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006824:	2202      	movs	r2, #2
 8006826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800682c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	fa93 f2a3 	rbit	r2, r3
 8006836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006848:	2202      	movs	r2, #2
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	fa93 f2a3 	rbit	r2, r3
 800685a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800685e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006868:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800686c:	2202      	movs	r2, #2
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006874:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	fa93 f2a3 	rbit	r2, r3
 800687e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006882:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006886:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006888:	4b36      	ldr	r3, [pc, #216]	; (8006964 <HAL_RCC_OscConfig+0x8f8>)
 800688a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800688c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006890:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006894:	2102      	movs	r1, #2
 8006896:	6019      	str	r1, [r3, #0]
 8006898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800689c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	fa93 f1a3 	rbit	r1, r3
 80068a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80068ae:	6019      	str	r1, [r3, #0]
  return result;
 80068b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	fab3 f383 	clz	r3, r3
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2101      	movs	r1, #1
 80068cc:	fa01 f303 	lsl.w	r3, r1, r3
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d197      	bne.n	8006806 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 81a5 	beq.w	8006c36 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f2:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <HAL_RCC_OscConfig+0x8f8>)
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d116      	bne.n	800692c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068fe:	4b19      	ldr	r3, [pc, #100]	; (8006964 <HAL_RCC_OscConfig+0x8f8>)
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	4a18      	ldr	r2, [pc, #96]	; (8006964 <HAL_RCC_OscConfig+0x8f8>)
 8006904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006908:	61d3      	str	r3, [r2, #28]
 800690a:	4b16      	ldr	r3, [pc, #88]	; (8006964 <HAL_RCC_OscConfig+0x8f8>)
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006920:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006924:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692c:	4b0f      	ldr	r3, [pc, #60]	; (800696c <HAL_RCC_OscConfig+0x900>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d121      	bne.n	800697c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <HAL_RCC_OscConfig+0x900>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0b      	ldr	r2, [pc, #44]	; (800696c <HAL_RCC_OscConfig+0x900>)
 800693e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006942:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006944:	f7ff f854 	bl	80059f0 <HAL_GetTick>
 8006948:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800694c:	e010      	b.n	8006970 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694e:	f7ff f84f 	bl	80059f0 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d908      	bls.n	8006970 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e3d1      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
 8006962:	bf00      	nop
 8006964:	40021000 	.word	0x40021000
 8006968:	10908120 	.word	0x10908120
 800696c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006970:	4b8d      	ldr	r3, [pc, #564]	; (8006ba8 <HAL_RCC_OscConfig+0xb3c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0e8      	beq.n	800694e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800697c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006980:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d106      	bne.n	800699a <HAL_RCC_OscConfig+0x92e>
 800698c:	4b87      	ldr	r3, [pc, #540]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	4a86      	ldr	r2, [pc, #536]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	6213      	str	r3, [r2, #32]
 8006998:	e035      	b.n	8006a06 <HAL_RCC_OscConfig+0x99a>
 800699a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800699e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCC_OscConfig+0x958>
 80069aa:	4b80      	ldr	r3, [pc, #512]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	4a7f      	ldr	r2, [pc, #508]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	6213      	str	r3, [r2, #32]
 80069b6:	4b7d      	ldr	r3, [pc, #500]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	4a7c      	ldr	r2, [pc, #496]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069bc:	f023 0304 	bic.w	r3, r3, #4
 80069c0:	6213      	str	r3, [r2, #32]
 80069c2:	e020      	b.n	8006a06 <HAL_RCC_OscConfig+0x99a>
 80069c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d10c      	bne.n	80069ee <HAL_RCC_OscConfig+0x982>
 80069d4:	4b75      	ldr	r3, [pc, #468]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	4a74      	ldr	r2, [pc, #464]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069da:	f043 0304 	orr.w	r3, r3, #4
 80069de:	6213      	str	r3, [r2, #32]
 80069e0:	4b72      	ldr	r3, [pc, #456]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	4a71      	ldr	r2, [pc, #452]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	6213      	str	r3, [r2, #32]
 80069ec:	e00b      	b.n	8006a06 <HAL_RCC_OscConfig+0x99a>
 80069ee:	4b6f      	ldr	r3, [pc, #444]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	4a6e      	ldr	r2, [pc, #440]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	6213      	str	r3, [r2, #32]
 80069fa:	4b6c      	ldr	r3, [pc, #432]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	4a6b      	ldr	r2, [pc, #428]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 8006a00:	f023 0304 	bic.w	r3, r3, #4
 8006a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8081 	beq.w	8006b1a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a18:	f7fe ffea 	bl	80059f0 <HAL_GetTick>
 8006a1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	e00b      	b.n	8006a3a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fe ffe5 	bl	80059f0 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e365      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
 8006a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006a42:	2202      	movs	r2, #2
 8006a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	fa93 f2a3 	rbit	r2, r3
 8006a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006a66:	2202      	movs	r2, #2
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	fa93 f2a3 	rbit	r2, r3
 8006a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006a80:	601a      	str	r2, [r3, #0]
  return result;
 8006a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a86:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006a8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a8c:	fab3 f383 	clz	r3, r3
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f043 0302 	orr.w	r3, r3, #2
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d102      	bne.n	8006aa6 <HAL_RCC_OscConfig+0xa3a>
 8006aa0:	4b42      	ldr	r3, [pc, #264]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	e013      	b.n	8006ace <HAL_RCC_OscConfig+0xa62>
 8006aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006aaa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006aae:	2202      	movs	r2, #2
 8006ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ab6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	fa93 f2a3 	rbit	r2, r3
 8006ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ac4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	4b38      	ldr	r3, [pc, #224]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ad2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	6011      	str	r1, [r2, #0]
 8006ada:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ade:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	fa92 f1a2 	rbit	r1, r2
 8006ae8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006aec:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006af0:	6011      	str	r1, [r2, #0]
  return result;
 8006af2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006af6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	fab2 f282 	clz	r2, r2
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	f002 021f 	and.w	r2, r2, #31
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d084      	beq.n	8006a22 <HAL_RCC_OscConfig+0x9b6>
 8006b18:	e083      	b.n	8006c22 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1a:	f7fe ff69 	bl	80059f0 <HAL_GetTick>
 8006b1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b22:	e00b      	b.n	8006b3c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b24:	f7fe ff64 	bl	80059f0 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e2e4      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
 8006b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006b44:	2202      	movs	r2, #2
 8006b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	fa93 f2a3 	rbit	r2, r3
 8006b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006b68:	2202      	movs	r2, #2
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	fa93 f2a3 	rbit	r2, r3
 8006b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006b82:	601a      	str	r2, [r3, #0]
  return result;
 8006b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b88:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006b8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8e:	fab3 f383 	clz	r3, r3
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f043 0302 	orr.w	r3, r3, #2
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCC_OscConfig+0xb44>
 8006ba2:	4b02      	ldr	r3, [pc, #8]	; (8006bac <HAL_RCC_OscConfig+0xb40>)
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	e017      	b.n	8006bd8 <HAL_RCC_OscConfig+0xb6c>
 8006ba8:	40007000 	.word	0x40007000
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bb4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006bb8:	2202      	movs	r2, #2
 8006bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bc0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	fa93 f2a3 	rbit	r2, r3
 8006bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	4bb3      	ldr	r3, [pc, #716]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006bdc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006be0:	2102      	movs	r1, #2
 8006be2:	6011      	str	r1, [r2, #0]
 8006be4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006be8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	fa92 f1a2 	rbit	r1, r2
 8006bf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006bf6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006bfa:	6011      	str	r1, [r2, #0]
  return result;
 8006bfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c00:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	fab2 f282 	clz	r2, r2
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	f002 021f 	and.w	r2, r2, #31
 8006c16:	2101      	movs	r1, #1
 8006c18:	fa01 f202 	lsl.w	r2, r1, r2
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d180      	bne.n	8006b24 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c22:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c2a:	4b9e      	ldr	r3, [pc, #632]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4a9d      	ldr	r2, [pc, #628]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c34:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 825e 	beq.w	8007104 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c48:	4b96      	ldr	r3, [pc, #600]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f003 030c 	and.w	r3, r3, #12
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	f000 821f 	beq.w	8007094 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	f040 8170 	bne.w	8006f48 <HAL_RCC_OscConfig+0xedc>
 8006c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c7a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	fa93 f2a3 	rbit	r2, r3
 8006c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c88:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006c8c:	601a      	str	r2, [r3, #0]
  return result;
 8006c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c92:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006c96:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c98:	fab3 f383 	clz	r3, r3
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006ca2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2300      	movs	r3, #0
 8006cac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cae:	f7fe fe9f 	bl	80059f0 <HAL_GetTick>
 8006cb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cb6:	e009      	b.n	8006ccc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb8:	f7fe fe9a 	bl	80059f0 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e21c      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
 8006ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cd0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cde:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	fa93 f2a3 	rbit	r2, r3
 8006ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006cf0:	601a      	str	r2, [r3, #0]
  return result;
 8006cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cf6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006cfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cfc:	fab3 f383 	clz	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d102      	bne.n	8006d16 <HAL_RCC_OscConfig+0xcaa>
 8006d10:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	e027      	b.n	8006d66 <HAL_RCC_OscConfig+0xcfa>
 8006d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d28:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	fa93 f2a3 	rbit	r2, r3
 8006d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d4e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	fa93 f2a3 	rbit	r2, r3
 8006d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d5c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	4b50      	ldr	r3, [pc, #320]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006d6e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d72:	6011      	str	r1, [r2, #0]
 8006d74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	fa92 f1a2 	rbit	r1, r2
 8006d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d86:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006d8a:	6011      	str	r1, [r2, #0]
  return result;
 8006d8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d90:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	fab2 f282 	clz	r2, r2
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	f042 0220 	orr.w	r2, r2, #32
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	f002 021f 	and.w	r2, r2, #31
 8006da6:	2101      	movs	r1, #1
 8006da8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d182      	bne.n	8006cb8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db2:	4b3c      	ldr	r3, [pc, #240]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	f023 020f 	bic.w	r2, r3, #15
 8006dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	4937      	ldr	r1, [pc, #220]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006dcc:	4b35      	ldr	r3, [pc, #212]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a19      	ldr	r1, [r3, #32]
 8006de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	430b      	orrs	r3, r1
 8006dee:	492d      	ldr	r1, [pc, #180]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	604b      	str	r3, [r1, #4]
 8006df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006df8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	fa93 f2a3 	rbit	r2, r3
 8006e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006e18:	601a      	str	r2, [r3, #0]
  return result;
 8006e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006e22:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e24:	fab3 f383 	clz	r3, r3
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	461a      	mov	r2, r3
 8006e36:	2301      	movs	r3, #1
 8006e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3a:	f7fe fdd9 	bl	80059f0 <HAL_GetTick>
 8006e3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e42:	e009      	b.n	8006e58 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fe fdd4 	bl	80059f0 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e156      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
 8006e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	fa93 f2a3 	rbit	r2, r3
 8006e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006e7c:	601a      	str	r2, [r3, #0]
  return result;
 8006e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006e86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e88:	fab3 f383 	clz	r3, r3
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d105      	bne.n	8006ea8 <HAL_RCC_OscConfig+0xe3c>
 8006e9c:	4b01      	ldr	r3, [pc, #4]	; (8006ea4 <HAL_RCC_OscConfig+0xe38>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	e02a      	b.n	8006ef8 <HAL_RCC_OscConfig+0xe8c>
 8006ea2:	bf00      	nop
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	fa93 f2a3 	rbit	r2, r3
 8006ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ec8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ed2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ee0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	fa93 f2a3 	rbit	r2, r3
 8006eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	4b86      	ldr	r3, [pc, #536]	; (8007110 <HAL_RCC_OscConfig+0x10a4>)
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006efc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006f00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006f0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	fa92 f1a2 	rbit	r1, r2
 8006f14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006f18:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006f1c:	6011      	str	r1, [r2, #0]
  return result;
 8006f1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006f22:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	fab2 f282 	clz	r2, r2
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	f042 0220 	orr.w	r2, r2, #32
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	f002 021f 	and.w	r2, r2, #31
 8006f38:	2101      	movs	r1, #1
 8006f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f43f af7f 	beq.w	8006e44 <HAL_RCC_OscConfig+0xdd8>
 8006f46:	e0dd      	b.n	8007104 <HAL_RCC_OscConfig+0x1098>
 8006f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	fa93 f2a3 	rbit	r2, r3
 8006f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006f6c:	601a      	str	r2, [r3, #0]
  return result;
 8006f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006f76:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f78:	fab3 f383 	clz	r3, r3
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f8e:	f7fe fd2f 	bl	80059f0 <HAL_GetTick>
 8006f92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f96:	e009      	b.n	8006fac <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f98:	f7fe fd2a 	bl	80059f0 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e0ac      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
 8006fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	fa93 f2a3 	rbit	r2, r3
 8006fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006fd0:	601a      	str	r2, [r3, #0]
  return result;
 8006fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006fda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fdc:	fab3 f383 	clz	r3, r3
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d102      	bne.n	8006ff6 <HAL_RCC_OscConfig+0xf8a>
 8006ff0:	4b47      	ldr	r3, [pc, #284]	; (8007110 <HAL_RCC_OscConfig+0x10a4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	e027      	b.n	8007046 <HAL_RCC_OscConfig+0xfda>
 8006ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ffa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007008:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	fa93 f2a3 	rbit	r2, r3
 8007012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007016:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007020:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800702e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	fa93 f2a3 	rbit	r2, r3
 8007038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800703c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	4b33      	ldr	r3, [pc, #204]	; (8007110 <HAL_RCC_OscConfig+0x10a4>)
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800704a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800704e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007052:	6011      	str	r1, [r2, #0]
 8007054:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007058:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	fa92 f1a2 	rbit	r1, r2
 8007062:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007066:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800706a:	6011      	str	r1, [r2, #0]
  return result;
 800706c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007070:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	fab2 f282 	clz	r2, r2
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	f042 0220 	orr.w	r2, r2, #32
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	f002 021f 	and.w	r2, r2, #31
 8007086:	2101      	movs	r1, #1
 8007088:	fa01 f202 	lsl.w	r2, r1, r2
 800708c:	4013      	ands	r3, r2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d182      	bne.n	8006f98 <HAL_RCC_OscConfig+0xf2c>
 8007092:	e037      	b.n	8007104 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007098:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e02e      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80070a8:	4b19      	ldr	r3, [pc, #100]	; (8007110 <HAL_RCC_OscConfig+0x10a4>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <HAL_RCC_OscConfig+0x10a4>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80070b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80070bc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80070c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d117      	bne.n	8007100 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80070d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80070d4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d10b      	bne.n	8007100 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80070e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070ec:	f003 020f 	and.w	r2, r3, #15
 80070f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d001      	beq.n	8007104 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40021000 	.word	0x40021000

08007114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b09e      	sub	sp, #120	; 0x78
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e162      	b.n	80073f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800712c:	4b90      	ldr	r3, [pc, #576]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d910      	bls.n	800715c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800713a:	4b8d      	ldr	r3, [pc, #564]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 0207 	bic.w	r2, r3, #7
 8007142:	498b      	ldr	r1, [pc, #556]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	4313      	orrs	r3, r2
 8007148:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714a:	4b89      	ldr	r3, [pc, #548]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e14a      	b.n	80073f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007168:	4b82      	ldr	r3, [pc, #520]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	497f      	ldr	r1, [pc, #508]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 8007176:	4313      	orrs	r3, r2
 8007178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80dc 	beq.w	8007340 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d13c      	bne.n	800720a <HAL_RCC_ClockConfig+0xf6>
 8007190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007194:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007198:	fa93 f3a3 	rbit	r3, r3
 800719c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800719e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071a0:	fab3 f383 	clz	r3, r3
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d102      	bne.n	80071ba <HAL_RCC_ClockConfig+0xa6>
 80071b4:	4b6f      	ldr	r3, [pc, #444]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	e00f      	b.n	80071da <HAL_RCC_ClockConfig+0xc6>
 80071ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071c2:	fa93 f3a3 	rbit	r3, r3
 80071c6:	667b      	str	r3, [r7, #100]	; 0x64
 80071c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071cc:	663b      	str	r3, [r7, #96]	; 0x60
 80071ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071d0:	fa93 f3a3 	rbit	r3, r3
 80071d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071d6:	4b67      	ldr	r3, [pc, #412]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071de:	65ba      	str	r2, [r7, #88]	; 0x58
 80071e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071e2:	fa92 f2a2 	rbit	r2, r2
 80071e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80071e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071ea:	fab2 f282 	clz	r2, r2
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	f042 0220 	orr.w	r2, r2, #32
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	f002 021f 	and.w	r2, r2, #31
 80071fa:	2101      	movs	r1, #1
 80071fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007200:	4013      	ands	r3, r2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d17b      	bne.n	80072fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e0f3      	b.n	80073f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d13c      	bne.n	800728c <HAL_RCC_ClockConfig+0x178>
 8007212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007216:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721a:	fa93 f3a3 	rbit	r3, r3
 800721e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007222:	fab3 f383 	clz	r3, r3
 8007226:	b2db      	uxtb	r3, r3
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b01      	cmp	r3, #1
 8007234:	d102      	bne.n	800723c <HAL_RCC_ClockConfig+0x128>
 8007236:	4b4f      	ldr	r3, [pc, #316]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	e00f      	b.n	800725c <HAL_RCC_ClockConfig+0x148>
 800723c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007240:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	fa93 f3a3 	rbit	r3, r3
 8007248:	647b      	str	r3, [r7, #68]	; 0x44
 800724a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800724e:	643b      	str	r3, [r7, #64]	; 0x40
 8007250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007252:	fa93 f3a3 	rbit	r3, r3
 8007256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007258:	4b46      	ldr	r3, [pc, #280]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007260:	63ba      	str	r2, [r7, #56]	; 0x38
 8007262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007264:	fa92 f2a2 	rbit	r2, r2
 8007268:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800726a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800726c:	fab2 f282 	clz	r2, r2
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	f042 0220 	orr.w	r2, r2, #32
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	f002 021f 	and.w	r2, r2, #31
 800727c:	2101      	movs	r1, #1
 800727e:	fa01 f202 	lsl.w	r2, r1, r2
 8007282:	4013      	ands	r3, r2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d13a      	bne.n	80072fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0b2      	b.n	80073f2 <HAL_RCC_ClockConfig+0x2de>
 800728c:	2302      	movs	r3, #2
 800728e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	fa93 f3a3 	rbit	r3, r3
 8007296:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729a:	fab3 f383 	clz	r3, r3
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d102      	bne.n	80072b4 <HAL_RCC_ClockConfig+0x1a0>
 80072ae:	4b31      	ldr	r3, [pc, #196]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	e00d      	b.n	80072d0 <HAL_RCC_ClockConfig+0x1bc>
 80072b4:	2302      	movs	r3, #2
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	fa93 f3a3 	rbit	r3, r3
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
 80072c0:	2302      	movs	r3, #2
 80072c2:	623b      	str	r3, [r7, #32]
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	fa93 f3a3 	rbit	r3, r3
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	4b29      	ldr	r3, [pc, #164]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2202      	movs	r2, #2
 80072d2:	61ba      	str	r2, [r7, #24]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	fa92 f2a2 	rbit	r2, r2
 80072da:	617a      	str	r2, [r7, #20]
  return result;
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	fab2 f282 	clz	r2, r2
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	f042 0220 	orr.w	r2, r2, #32
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	f002 021f 	and.w	r2, r2, #31
 80072ee:	2101      	movs	r1, #1
 80072f0:	fa01 f202 	lsl.w	r2, r1, r2
 80072f4:	4013      	ands	r3, r2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e079      	b.n	80073f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072fe:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f023 0203 	bic.w	r2, r3, #3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	491a      	ldr	r1, [pc, #104]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 800730c:	4313      	orrs	r3, r2
 800730e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007310:	f7fe fb6e 	bl	80059f0 <HAL_GetTick>
 8007314:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007316:	e00a      	b.n	800732e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007318:	f7fe fb6a 	bl	80059f0 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	f241 3288 	movw	r2, #5000	; 0x1388
 8007326:	4293      	cmp	r3, r2
 8007328:	d901      	bls.n	800732e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e061      	b.n	80073f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <HAL_RCC_ClockConfig+0x260>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f003 020c 	and.w	r2, r3, #12
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	429a      	cmp	r2, r3
 800733e:	d1eb      	bne.n	8007318 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007340:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d214      	bcs.n	8007378 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734e:	4b08      	ldr	r3, [pc, #32]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f023 0207 	bic.w	r2, r3, #7
 8007356:	4906      	ldr	r1, [pc, #24]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	4313      	orrs	r3, r2
 800735c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800735e:	4b04      	ldr	r3, [pc, #16]	; (8007370 <HAL_RCC_ClockConfig+0x25c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d005      	beq.n	8007378 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e040      	b.n	80073f2 <HAL_RCC_ClockConfig+0x2de>
 8007370:	40022000 	.word	0x40022000
 8007374:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007384:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <HAL_RCC_ClockConfig+0x2e8>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	491a      	ldr	r1, [pc, #104]	; (80073fc <HAL_RCC_ClockConfig+0x2e8>)
 8007392:	4313      	orrs	r3, r2
 8007394:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073a2:	4b16      	ldr	r3, [pc, #88]	; (80073fc <HAL_RCC_ClockConfig+0x2e8>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4912      	ldr	r1, [pc, #72]	; (80073fc <HAL_RCC_ClockConfig+0x2e8>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80073b6:	f000 f829 	bl	800740c <HAL_RCC_GetSysClockFreq>
 80073ba:	4601      	mov	r1, r0
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <HAL_RCC_ClockConfig+0x2e8>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c4:	22f0      	movs	r2, #240	; 0xf0
 80073c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	fa92 f2a2 	rbit	r2, r2
 80073ce:	60fa      	str	r2, [r7, #12]
  return result;
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	fab2 f282 	clz	r2, r2
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	40d3      	lsrs	r3, r2
 80073da:	4a09      	ldr	r2, [pc, #36]	; (8007400 <HAL_RCC_ClockConfig+0x2ec>)
 80073dc:	5cd3      	ldrb	r3, [r2, r3]
 80073de:	fa21 f303 	lsr.w	r3, r1, r3
 80073e2:	4a08      	ldr	r2, [pc, #32]	; (8007404 <HAL_RCC_ClockConfig+0x2f0>)
 80073e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <HAL_RCC_ClockConfig+0x2f4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fab8 	bl	8005960 <HAL_InitTick>
  
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3778      	adds	r7, #120	; 0x78
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40021000 	.word	0x40021000
 8007400:	0800a4e4 	.word	0x0800a4e4
 8007404:	20000000 	.word	0x20000000
 8007408:	20000004 	.word	0x20000004

0800740c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800740c:	b480      	push	{r7}
 800740e:	b08b      	sub	sp, #44	; 0x2c
 8007410:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	2300      	movs	r3, #0
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007426:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f003 030c 	and.w	r3, r3, #12
 8007432:	2b04      	cmp	r3, #4
 8007434:	d002      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0x30>
 8007436:	2b08      	cmp	r3, #8
 8007438:	d003      	beq.n	8007442 <HAL_RCC_GetSysClockFreq+0x36>
 800743a:	e03f      	b.n	80074bc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800743c:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800743e:	623b      	str	r3, [r7, #32]
      break;
 8007440:	e03f      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007448:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800744c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	fa92 f2a2 	rbit	r2, r2
 8007454:	607a      	str	r2, [r7, #4]
  return result;
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	fab2 f282 	clz	r2, r2
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	40d3      	lsrs	r3, r2
 8007460:	4a1d      	ldr	r2, [pc, #116]	; (80074d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007462:	5cd3      	ldrb	r3, [r2, r3]
 8007464:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007466:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	220f      	movs	r2, #15
 8007470:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	fa92 f2a2 	rbit	r2, r2
 8007478:	60fa      	str	r2, [r7, #12]
  return result;
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	fab2 f282 	clz	r2, r2
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	40d3      	lsrs	r3, r2
 8007484:	4a15      	ldr	r2, [pc, #84]	; (80074dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007486:	5cd3      	ldrb	r3, [r2, r3]
 8007488:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007494:	4a0f      	ldr	r2, [pc, #60]	; (80074d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	fbb2 f2f3 	udiv	r2, r2, r3
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
 80074a4:	e007      	b.n	80074b6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80074a6:	4a0b      	ldr	r2, [pc, #44]	; (80074d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	623b      	str	r3, [r7, #32]
      break;
 80074ba:	e002      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80074be:	623b      	str	r3, [r7, #32]
      break;
 80074c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074c2:	6a3b      	ldr	r3, [r7, #32]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	372c      	adds	r7, #44	; 0x2c
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40021000 	.word	0x40021000
 80074d4:	007a1200 	.word	0x007a1200
 80074d8:	0800a4fc 	.word	0x0800a4fc
 80074dc:	0800a50c 	.word	0x0800a50c

080074e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074e4:	4b02      	ldr	r3, [pc, #8]	; (80074f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80074e6:	681b      	ldr	r3, [r3, #0]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr
 80074f0:	20000000 	.word	0x20000000

080074f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80074fa:	f7ff fff1 	bl	80074e0 <HAL_RCC_GetHCLKFreq>
 80074fe:	4601      	mov	r1, r0
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007508:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800750c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	fa92 f2a2 	rbit	r2, r2
 8007514:	603a      	str	r2, [r7, #0]
  return result;
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	fab2 f282 	clz	r2, r2
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	40d3      	lsrs	r3, r2
 8007520:	4a04      	ldr	r2, [pc, #16]	; (8007534 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007522:	5cd3      	ldrb	r3, [r2, r3]
 8007524:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40021000 	.word	0x40021000
 8007534:	0800a4f4 	.word	0x0800a4f4

08007538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800753e:	f7ff ffcf 	bl	80074e0 <HAL_RCC_GetHCLKFreq>
 8007542:	4601      	mov	r1, r0
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800754c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007550:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	fa92 f2a2 	rbit	r2, r2
 8007558:	603a      	str	r2, [r7, #0]
  return result;
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	fab2 f282 	clz	r2, r2
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	40d3      	lsrs	r3, r2
 8007564:	4a04      	ldr	r2, [pc, #16]	; (8007578 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007566:	5cd3      	ldrb	r3, [r2, r3]
 8007568:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40021000 	.word	0x40021000
 8007578:	0800a4f4 	.word	0x0800a4f4

0800757c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b092      	sub	sp, #72	; 0x48
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800758c:	2300      	movs	r3, #0
 800758e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80d4 	beq.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075a0:	4b4e      	ldr	r3, [pc, #312]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10e      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ac:	4b4b      	ldr	r3, [pc, #300]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	4a4a      	ldr	r2, [pc, #296]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b6:	61d3      	str	r3, [r2, #28]
 80075b8:	4b48      	ldr	r3, [pc, #288]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c0:	60bb      	str	r3, [r7, #8]
 80075c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ca:	4b45      	ldr	r3, [pc, #276]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d118      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075d6:	4b42      	ldr	r3, [pc, #264]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a41      	ldr	r2, [pc, #260]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075e2:	f7fe fa05 	bl	80059f0 <HAL_GetTick>
 80075e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e8:	e008      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ea:	f7fe fa01 	bl	80059f0 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b64      	cmp	r3, #100	; 0x64
 80075f6:	d901      	bls.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e1d6      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075fc:	4b38      	ldr	r3, [pc, #224]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f0      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007608:	4b34      	ldr	r3, [pc, #208]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8084 	beq.w	8007722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007622:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007624:	429a      	cmp	r2, r3
 8007626:	d07c      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007628:	4b2c      	ldr	r3, [pc, #176]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	fa93 f3a3 	rbit	r3, r3
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007642:	fab3 f383 	clz	r3, r3
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	461a      	mov	r2, r3
 8007652:	2301      	movs	r3, #1
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800765a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	fa93 f3a3 	rbit	r3, r3
 8007662:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007666:	fab3 f383 	clz	r3, r3
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	461a      	mov	r2, r3
 8007676:	2300      	movs	r3, #0
 8007678:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800767a:	4a18      	ldr	r2, [pc, #96]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d04b      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800768a:	f7fe f9b1 	bl	80059f0 <HAL_GetTick>
 800768e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007690:	e00a      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007692:	f7fe f9ad 	bl	80059f0 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e180      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80076a8:	2302      	movs	r3, #2
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	fa93 f3a3 	rbit	r3, r3
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
 80076b4:	2302      	movs	r3, #2
 80076b6:	623b      	str	r3, [r7, #32]
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	fa93 f3a3 	rbit	r3, r3
 80076be:	61fb      	str	r3, [r7, #28]
  return result;
 80076c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c2:	fab3 f383 	clz	r3, r3
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d108      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80076d6:	4b01      	ldr	r3, [pc, #4]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	e00d      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80076dc:	40021000 	.word	0x40021000
 80076e0:	40007000 	.word	0x40007000
 80076e4:	10908100 	.word	0x10908100
 80076e8:	2302      	movs	r3, #2
 80076ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	fa93 f3a3 	rbit	r3, r3
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	4b9a      	ldr	r3, [pc, #616]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	2202      	movs	r2, #2
 80076fa:	613a      	str	r2, [r7, #16]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	fa92 f2a2 	rbit	r2, r2
 8007702:	60fa      	str	r2, [r7, #12]
  return result;
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	fab2 f282 	clz	r2, r2
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	f002 021f 	and.w	r2, r2, #31
 8007716:	2101      	movs	r1, #1
 8007718:	fa01 f202 	lsl.w	r2, r1, r2
 800771c:	4013      	ands	r3, r2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0b7      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007722:	4b8f      	ldr	r3, [pc, #572]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	498c      	ldr	r1, [pc, #560]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007730:	4313      	orrs	r3, r2
 8007732:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007734:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007738:	2b01      	cmp	r3, #1
 800773a:	d105      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800773c:	4b88      	ldr	r3, [pc, #544]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	4a87      	ldr	r2, [pc, #540]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007746:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007754:	4b82      	ldr	r3, [pc, #520]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	f023 0203 	bic.w	r2, r3, #3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	497f      	ldr	r1, [pc, #508]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007762:	4313      	orrs	r3, r2
 8007764:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d008      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007772:	4b7b      	ldr	r3, [pc, #492]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	4978      	ldr	r1, [pc, #480]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007780:	4313      	orrs	r3, r2
 8007782:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007790:	4b73      	ldr	r3, [pc, #460]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	4970      	ldr	r1, [pc, #448]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d008      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077ae:	4b6c      	ldr	r3, [pc, #432]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	f023 0210 	bic.w	r2, r3, #16
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	4969      	ldr	r1, [pc, #420]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d008      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80077cc:	4b64      	ldr	r3, [pc, #400]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d8:	4961      	ldr	r1, [pc, #388]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077ea:	4b5d      	ldr	r3, [pc, #372]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f023 0220 	bic.w	r2, r3, #32
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	495a      	ldr	r1, [pc, #360]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007808:	4b55      	ldr	r3, [pc, #340]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	4952      	ldr	r1, [pc, #328]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007816:	4313      	orrs	r3, r2
 8007818:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d008      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007826:	4b4e      	ldr	r3, [pc, #312]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	494b      	ldr	r1, [pc, #300]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007834:	4313      	orrs	r3, r2
 8007836:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007844:	4b46      	ldr	r3, [pc, #280]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	4943      	ldr	r1, [pc, #268]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007852:	4313      	orrs	r3, r2
 8007854:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007862:	4b3f      	ldr	r3, [pc, #252]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	493c      	ldr	r1, [pc, #240]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007870:	4313      	orrs	r3, r2
 8007872:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007880:	4b37      	ldr	r3, [pc, #220]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	4934      	ldr	r1, [pc, #208]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800788e:	4313      	orrs	r3, r2
 8007890:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800789e:	4b30      	ldr	r3, [pc, #192]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	492d      	ldr	r1, [pc, #180]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80078bc:	4b28      	ldr	r3, [pc, #160]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c8:	4925      	ldr	r1, [pc, #148]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d008      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80078da:	4b21      	ldr	r3, [pc, #132]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	491e      	ldr	r1, [pc, #120]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80078f8:	4b19      	ldr	r3, [pc, #100]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	4916      	ldr	r1, [pc, #88]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007906:	4313      	orrs	r3, r2
 8007908:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007916:	4b12      	ldr	r3, [pc, #72]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	490f      	ldr	r1, [pc, #60]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007924:	4313      	orrs	r3, r2
 8007926:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007934:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007940:	4907      	ldr	r1, [pc, #28]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007942:	4313      	orrs	r3, r2
 8007944:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00c      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007952:	4b03      	ldr	r3, [pc, #12]	; (8007960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	e002      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800795e:	bf00      	nop
 8007960:	40021000 	.word	0x40021000
 8007964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007966:	4913      	ldr	r1, [pc, #76]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007968:	4313      	orrs	r3, r2
 800796a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007978:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007984:	490b      	ldr	r1, [pc, #44]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007986:	4313      	orrs	r3, r2
 8007988:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a2:	4904      	ldr	r1, [pc, #16]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3748      	adds	r7, #72	; 0x48
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40021000 	.word	0x40021000

080079b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079bc:	e7fe      	b.n	80079bc <NMI_Handler+0x4>

080079be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079be:	b480      	push	{r7}
 80079c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079c2:	e7fe      	b.n	80079c2 <HardFault_Handler+0x4>

080079c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079c8:	e7fe      	b.n	80079c8 <MemManage_Handler+0x4>

080079ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079ca:	b480      	push	{r7}
 80079cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079ce:	e7fe      	b.n	80079ce <BusFault_Handler+0x4>

080079d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079d4:	e7fe      	b.n	80079d4 <UsageFault_Handler+0x4>

080079d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079d6:	b480      	push	{r7}
 80079d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079da:	bf00      	nop
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079e2:	b480      	push	{r7}
 80079e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079e6:	bf00      	nop
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr
	...

080079f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80079f4:	4802      	ldr	r0, [pc, #8]	; (8007a00 <DMA1_Channel1_IRQHandler+0x10>)
 80079f6:	f7fa fe53 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80079fa:	bf00      	nop
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000190 	.word	0x20000190

08007a04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007a08:	4802      	ldr	r0, [pc, #8]	; (8007a14 <DMA1_Channel6_IRQHandler+0x10>)
 8007a0a:	f7fa fe49 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8007a0e:	bf00      	nop
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000294 	.word	0x20000294

08007a18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007a1c:	4802      	ldr	r0, [pc, #8]	; (8007a28 <DMA1_Channel7_IRQHandler+0x10>)
 8007a1e:	f7fa fe3f 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000250 	.word	0x20000250

08007a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007a30:	4802      	ldr	r0, [pc, #8]	; (8007a3c <TIM3_IRQHandler+0x10>)
 8007a32:	f7fb fa7f 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007a36:	bf00      	nop
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	200000e4 	.word	0x200000e4

08007a40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007a44:	4802      	ldr	r0, [pc, #8]	; (8007a50 <I2C1_EV_IRQHandler+0x10>)
 8007a46:	f7fc fc59 	bl	80042fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007a4a:	bf00      	nop
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	200001d4 	.word	0x200001d4

08007a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007a58:	4802      	ldr	r0, [pc, #8]	; (8007a64 <USART1_IRQHandler+0x10>)
 8007a5a:	f000 fb79 	bl	8008150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007a5e:	bf00      	nop
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000364 	.word	0x20000364

08007a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007a6c:	4802      	ldr	r0, [pc, #8]	; (8007a78 <USART2_IRQHandler+0x10>)
 8007a6e:	f000 fb6f 	bl	8008150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007a72:	bf00      	nop
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200003e8 	.word	0x200003e8

08007a7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8007a80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007a84:	f7fa fcd8 	bl	8002438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007a88:	bf00      	nop
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8007a90:	4802      	ldr	r0, [pc, #8]	; (8007a9c <SPI3_IRQHandler+0x10>)
 8007a92:	f000 f91d 	bl	8007cd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8007a96:	bf00      	nop
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200002d8 	.word	0x200002d8

08007aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007aa8:	4a14      	ldr	r2, [pc, #80]	; (8007afc <_sbrk+0x5c>)
 8007aaa:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <_sbrk+0x60>)
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ab4:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <_sbrk+0x64>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007abc:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <_sbrk+0x64>)
 8007abe:	4a12      	ldr	r2, [pc, #72]	; (8007b08 <_sbrk+0x68>)
 8007ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007ac2:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <_sbrk+0x64>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d207      	bcs.n	8007ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ad0:	f002 f85a 	bl	8009b88 <__errno>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	220c      	movs	r2, #12
 8007ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007ada:	f04f 33ff 	mov.w	r3, #4294967295
 8007ade:	e009      	b.n	8007af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007ae0:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <_sbrk+0x64>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007ae6:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <_sbrk+0x64>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <_sbrk+0x64>)
 8007af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007af2:	68fb      	ldr	r3, [r7, #12]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20010000 	.word	0x20010000
 8007b00:	00000400 	.word	0x00000400
 8007b04:	20000138 	.word	0x20000138
 8007b08:	20001498 	.word	0x20001498

08007b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e0c1      	b.n	8007ca2 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b2e:	d009      	beq.n	8007b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	61da      	str	r2, [r3, #28]
 8007b36:	e005      	b.n	8007b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d12a      	bne.n	8007bac <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a52      	ldr	r2, [pc, #328]	; (8007cac <HAL_SPI_Init+0x1a0>)
 8007b62:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a52      	ldr	r2, [pc, #328]	; (8007cb0 <HAL_SPI_Init+0x1a4>)
 8007b68:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a51      	ldr	r2, [pc, #324]	; (8007cb4 <HAL_SPI_Init+0x1a8>)
 8007b6e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a51      	ldr	r2, [pc, #324]	; (8007cb8 <HAL_SPI_Init+0x1ac>)
 8007b74:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a50      	ldr	r2, [pc, #320]	; (8007cbc <HAL_SPI_Init+0x1b0>)
 8007b7a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a50      	ldr	r2, [pc, #320]	; (8007cc0 <HAL_SPI_Init+0x1b4>)
 8007b80:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a4f      	ldr	r2, [pc, #316]	; (8007cc4 <HAL_SPI_Init+0x1b8>)
 8007b86:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a4f      	ldr	r2, [pc, #316]	; (8007cc8 <HAL_SPI_Init+0x1bc>)
 8007b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a4b      	ldr	r2, [pc, #300]	; (8007ccc <HAL_SPI_Init+0x1c0>)
 8007b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bcc:	d902      	bls.n	8007bd4 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e002      	b.n	8007bda <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007be2:	d007      	beq.n	8007bf4 <HAL_SPI_Init+0xe8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bec:	d002      	beq.n	8007bf4 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c36:	ea42 0103 	orr.w	r1, r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	0c1b      	lsrs	r3, r3, #16
 8007c50:	f003 0204 	and.w	r2, r3, #4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c70:	ea42 0103 	orr.w	r1, r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	08007ed1 	.word	0x08007ed1
 8007cb0:	08007ee3 	.word	0x08007ee3
 8007cb4:	08007ef5 	.word	0x08007ef5
 8007cb8:	08007f07 	.word	0x08007f07
 8007cbc:	08007f19 	.word	0x08007f19
 8007cc0:	08007f2b 	.word	0x08007f2b
 8007cc4:	08007f3d 	.word	0x08007f3d
 8007cc8:	08007f4f 	.word	0x08007f4f
 8007ccc:	08005e75 	.word	0x08005e75

08007cd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	099b      	lsrs	r3, r3, #6
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10f      	bne.n	8007d14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	099b      	lsrs	r3, r3, #6
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
    return;
 8007d12:	e0d8      	b.n	8007ec6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <HAL_SPI_IRQHandler+0x66>
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	09db      	lsrs	r3, r3, #7
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d004      	beq.n	8007d36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
    return;
 8007d34:	e0c7      	b.n	8007ec6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	095b      	lsrs	r3, r3, #5
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10c      	bne.n	8007d5c <HAL_SPI_IRQHandler+0x8c>
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	099b      	lsrs	r3, r3, #6
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 80b5 	beq.w	8007ec6 <HAL_SPI_IRQHandler+0x1f6>
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80ae 	beq.w	8007ec6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	099b      	lsrs	r3, r3, #6
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d023      	beq.n	8007dbe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d011      	beq.n	8007da6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d86:	f043 0204 	orr.w	r2, r3, #4
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d8e:	2300      	movs	r3, #0
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	e00b      	b.n	8007dbe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	693b      	ldr	r3, [r7, #16]
        return;
 8007dbc:	e083      	b.n	8007ec6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d014      	beq.n	8007df4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dce:	f043 0201 	orr.w	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00c      	beq.n	8007e1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e04:	f043 0208 	orr.w	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60bb      	str	r3, [r7, #8]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d050      	beq.n	8007ec4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <HAL_SPI_IRQHandler+0x17e>
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d034      	beq.n	8007eb8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0203 	bic.w	r2, r2, #3
 8007e5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d011      	beq.n	8007e8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	4a18      	ldr	r2, [pc, #96]	; (8007ecc <HAL_SPI_IRQHandler+0x1fc>)
 8007e6c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fa fbd6 	bl	8002624 <HAL_DMA_Abort_IT>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d017      	beq.n	8007ec2 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e96:	4a0d      	ldr	r2, [pc, #52]	; (8007ecc <HAL_SPI_IRQHandler+0x1fc>)
 8007e98:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fa fbc0 	bl	8002624 <HAL_DMA_Abort_IT>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00b      	beq.n	8007ec2 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007eb6:	e004      	b.n	8007ec2 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ec0:	e000      	b.n	8007ec4 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8007ec2:	bf00      	nop
    return;
 8007ec4:	bf00      	nop
  }
}
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	08007f61 	.word	0x08007f61

08007ed0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr

08007f06 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr

08007f18 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bc80      	pop	{r7}
 8007f28:	4770      	bx	lr

08007f2a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr

08007f3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr

08007f4e <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bc80      	pop	{r7}
 8007f5e:	4770      	bx	lr

08007f60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e040      	b.n	8008020 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fd ffd2 	bl	8005f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2224      	movs	r2, #36	; 0x24
 8007fb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fbbc 	bl	8008748 <UART_SetConfig>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e022      	b.n	8008020 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fd86 	bl	8008af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0201 	orr.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fe0c 	bl	8008c36 <UART_CheckIdleState>
 800801e:	4603      	mov	r3, r0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	4613      	mov	r3, r2
 8008036:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800803c:	2b20      	cmp	r3, #32
 800803e:	f040 8082 	bne.w	8008146 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <HAL_UART_Transmit+0x26>
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e07a      	b.n	8008148 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_UART_Transmit+0x38>
 800805c:	2302      	movs	r3, #2
 800805e:	e073      	b.n	8008148 <HAL_UART_Transmit+0x120>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2221      	movs	r2, #33	; 0x21
 8008074:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008076:	f7fd fcbb 	bl	80059f0 <HAL_GetTick>
 800807a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	88fa      	ldrh	r2, [r7, #6]
 8008080:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	88fa      	ldrh	r2, [r7, #6]
 8008088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008094:	d108      	bne.n	80080a8 <HAL_UART_Transmit+0x80>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	e003      	b.n	80080b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80080b8:	e02d      	b.n	8008116 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2200      	movs	r2, #0
 80080c2:	2180      	movs	r1, #128	; 0x80
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fdff 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e039      	b.n	8008148 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	881a      	ldrh	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e6:	b292      	uxth	r2, r2
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	3302      	adds	r3, #2
 80080ee:	61bb      	str	r3, [r7, #24]
 80080f0:	e008      	b.n	8008104 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	781a      	ldrb	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	b292      	uxth	r2, r2
 80080fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	3301      	adds	r3, #1
 8008102:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1cb      	bne.n	80080ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2200      	movs	r2, #0
 800812a:	2140      	movs	r1, #64	; 0x40
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fdcb 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e005      	b.n	8008148 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008146:	2302      	movs	r3, #2
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3720      	adds	r7, #32
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b0ba      	sub	sp, #232	; 0xe8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008176:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800817a:	f640 030f 	movw	r3, #2063	; 0x80f
 800817e:	4013      	ands	r3, r2
 8008180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008188:	2b00      	cmp	r3, #0
 800818a:	d115      	bne.n	80081b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800818c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00f      	beq.n	80081b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 82a3 	beq.w	80086f4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
      }
      return;
 80081b6:	e29d      	b.n	80086f4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8117 	beq.w	80083f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80081c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80081ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80081d2:	4b85      	ldr	r3, [pc, #532]	; (80083e8 <HAL_UART_IRQHandler+0x298>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 810a 	beq.w	80083f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d011      	beq.n	800820c <HAL_UART_IRQHandler+0xbc>
 80081e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2201      	movs	r2, #1
 80081fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008202:	f043 0201 	orr.w	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800820c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d011      	beq.n	800823c <HAL_UART_IRQHandler+0xec>
 8008218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2202      	movs	r2, #2
 800822a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008232:	f043 0204 	orr.w	r2, r3, #4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800823c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d011      	beq.n	800826c <HAL_UART_IRQHandler+0x11c>
 8008248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2204      	movs	r2, #4
 800825a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008262:	f043 0202 	orr.w	r2, r3, #2
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d017      	beq.n	80082a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d105      	bne.n	8008290 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008288:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2208      	movs	r2, #8
 8008296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800829e:	f043 0208 	orr.w	r2, r3, #8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d012      	beq.n	80082da <HAL_UART_IRQHandler+0x18a>
 80082b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00c      	beq.n	80082da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d0:	f043 0220 	orr.w	r2, r3, #32
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8209 	beq.w	80086f8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80082e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00d      	beq.n	800830e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d007      	beq.n	800830e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d005      	beq.n	8008332 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800832a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800832e:	2b00      	cmp	r3, #0
 8008330:	d04f      	beq.n	80083d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fd8c 	bl	8008e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d141      	bne.n	80083ca <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3308      	adds	r3, #8
 800834c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800835c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800837e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800838a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1d9      	bne.n	8008346 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	2b00      	cmp	r3, #0
 8008398:	d013      	beq.n	80083c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839e:	4a13      	ldr	r2, [pc, #76]	; (80083ec <HAL_UART_IRQHandler+0x29c>)
 80083a0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fa f93c 	bl	8002624 <HAL_DMA_Abort_IT>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d017      	beq.n	80083e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c0:	e00f      	b.n	80083e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f9ab 	bl	800871e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c8:	e00b      	b.n	80083e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f9a7 	bl	800871e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d0:	e007      	b.n	80083e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f9a3 	bl	800871e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80083e0:	e18a      	b.n	80086f8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e2:	bf00      	nop
    return;
 80083e4:	e188      	b.n	80086f8 <HAL_UART_IRQHandler+0x5a8>
 80083e6:	bf00      	nop
 80083e8:	04000120 	.word	0x04000120
 80083ec:	08008f15 	.word	0x08008f15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	f040 8143 	bne.w	8008680 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 813c 	beq.w	8008680 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8135 	beq.w	8008680 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2210      	movs	r2, #16
 800841c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b40      	cmp	r3, #64	; 0x40
 800842a:	f040 80b1 	bne.w	8008590 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800843a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 815c 	beq.w	80086fc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800844a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800844e:	429a      	cmp	r2, r3
 8008450:	f080 8154 	bcs.w	80086fc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800845a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	2b20      	cmp	r3, #32
 8008466:	f000 8085 	beq.w	8008574 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800847e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008486:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008498:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1da      	bne.n	800846a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3308      	adds	r3, #8
 80084ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084c6:	f023 0301 	bic.w	r3, r3, #1
 80084ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e1      	bne.n	80084b4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008514:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008516:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800851a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e3      	bne.n	80084f0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008544:	f023 0310 	bic.w	r3, r3, #16
 8008548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008556:	65bb      	str	r3, [r7, #88]	; 0x58
 8008558:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800855c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e4      	bne.n	8008534 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856e:	4618      	mov	r0, r3
 8008570:	f7fa f820 	bl	80025b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008580:	b29b      	uxth	r3, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	b29b      	uxth	r3, r3
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f8d1 	bl	8008730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800858e:	e0b5      	b.n	80086fc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800859c:	b29b      	uxth	r3, r3
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 80a7 	beq.w	8008700 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80085b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 80a2 	beq.w	8008700 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085de:	647b      	str	r3, [r7, #68]	; 0x44
 80085e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e4      	bne.n	80085bc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	623b      	str	r3, [r7, #32]
   return(result);
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3308      	adds	r3, #8
 8008612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008616:	633a      	str	r2, [r7, #48]	; 0x30
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e3      	bne.n	80085f2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	60fb      	str	r3, [r7, #12]
   return(result);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f023 0310 	bic.w	r3, r3, #16
 8008650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	69b9      	ldr	r1, [r7, #24]
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	617b      	str	r3, [r7, #20]
   return(result);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e4      	bne.n	800863c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f859 	bl	8008730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800867e:	e03f      	b.n	8008700 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00e      	beq.n	80086aa <HAL_UART_IRQHandler+0x55a>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d008      	beq.n	80086aa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fc76 	bl	8008f94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086a8:	e02d      	b.n	8008706 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00e      	beq.n	80086d4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80086b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d008      	beq.n	80086d4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d01c      	beq.n	8008704 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
    }
    return;
 80086d2:	e017      	b.n	8008704 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d012      	beq.n	8008706 <HAL_UART_IRQHandler+0x5b6>
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00c      	beq.n	8008706 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fc27 	bl	8008f40 <UART_EndTransmit_IT>
    return;
 80086f2:	e008      	b.n	8008706 <HAL_UART_IRQHandler+0x5b6>
      return;
 80086f4:	bf00      	nop
 80086f6:	e006      	b.n	8008706 <HAL_UART_IRQHandler+0x5b6>
    return;
 80086f8:	bf00      	nop
 80086fa:	e004      	b.n	8008706 <HAL_UART_IRQHandler+0x5b6>
      return;
 80086fc:	bf00      	nop
 80086fe:	e002      	b.n	8008706 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008700:	bf00      	nop
 8008702:	e000      	b.n	8008706 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008704:	bf00      	nop
  }

}
 8008706:	37e8      	adds	r7, #232	; 0xe8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	bc80      	pop	{r7}
 800871c:	4770      	bx	lr

0800871e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
	...

08008748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	4313      	orrs	r3, r2
 800876a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4b92      	ldr	r3, [pc, #584]	; (80089bc <UART_SetConfig+0x274>)
 8008774:	4013      	ands	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	6979      	ldr	r1, [r7, #20]
 800877c:	430b      	orrs	r3, r1
 800877e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a80      	ldr	r2, [pc, #512]	; (80089c0 <UART_SetConfig+0x278>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d120      	bne.n	8008806 <UART_SetConfig+0xbe>
 80087c4:	4b7f      	ldr	r3, [pc, #508]	; (80089c4 <UART_SetConfig+0x27c>)
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d817      	bhi.n	8008800 <UART_SetConfig+0xb8>
 80087d0:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <UART_SetConfig+0x90>)
 80087d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d6:	bf00      	nop
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	080087f5 	.word	0x080087f5
 80087e0:	080087fb 	.word	0x080087fb
 80087e4:	080087ef 	.word	0x080087ef
 80087e8:	2301      	movs	r3, #1
 80087ea:	77fb      	strb	r3, [r7, #31]
 80087ec:	e0b5      	b.n	800895a <UART_SetConfig+0x212>
 80087ee:	2302      	movs	r3, #2
 80087f0:	77fb      	strb	r3, [r7, #31]
 80087f2:	e0b2      	b.n	800895a <UART_SetConfig+0x212>
 80087f4:	2304      	movs	r3, #4
 80087f6:	77fb      	strb	r3, [r7, #31]
 80087f8:	e0af      	b.n	800895a <UART_SetConfig+0x212>
 80087fa:	2308      	movs	r3, #8
 80087fc:	77fb      	strb	r3, [r7, #31]
 80087fe:	e0ac      	b.n	800895a <UART_SetConfig+0x212>
 8008800:	2310      	movs	r3, #16
 8008802:	77fb      	strb	r3, [r7, #31]
 8008804:	e0a9      	b.n	800895a <UART_SetConfig+0x212>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a6f      	ldr	r2, [pc, #444]	; (80089c8 <UART_SetConfig+0x280>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d124      	bne.n	800885a <UART_SetConfig+0x112>
 8008810:	4b6c      	ldr	r3, [pc, #432]	; (80089c4 <UART_SetConfig+0x27c>)
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008818:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800881c:	d011      	beq.n	8008842 <UART_SetConfig+0xfa>
 800881e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008822:	d817      	bhi.n	8008854 <UART_SetConfig+0x10c>
 8008824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008828:	d011      	beq.n	800884e <UART_SetConfig+0x106>
 800882a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800882e:	d811      	bhi.n	8008854 <UART_SetConfig+0x10c>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <UART_SetConfig+0xf4>
 8008834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008838:	d006      	beq.n	8008848 <UART_SetConfig+0x100>
 800883a:	e00b      	b.n	8008854 <UART_SetConfig+0x10c>
 800883c:	2300      	movs	r3, #0
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e08b      	b.n	800895a <UART_SetConfig+0x212>
 8008842:	2302      	movs	r3, #2
 8008844:	77fb      	strb	r3, [r7, #31]
 8008846:	e088      	b.n	800895a <UART_SetConfig+0x212>
 8008848:	2304      	movs	r3, #4
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	e085      	b.n	800895a <UART_SetConfig+0x212>
 800884e:	2308      	movs	r3, #8
 8008850:	77fb      	strb	r3, [r7, #31]
 8008852:	e082      	b.n	800895a <UART_SetConfig+0x212>
 8008854:	2310      	movs	r3, #16
 8008856:	77fb      	strb	r3, [r7, #31]
 8008858:	e07f      	b.n	800895a <UART_SetConfig+0x212>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a5b      	ldr	r2, [pc, #364]	; (80089cc <UART_SetConfig+0x284>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d124      	bne.n	80088ae <UART_SetConfig+0x166>
 8008864:	4b57      	ldr	r3, [pc, #348]	; (80089c4 <UART_SetConfig+0x27c>)
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800886c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008870:	d011      	beq.n	8008896 <UART_SetConfig+0x14e>
 8008872:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008876:	d817      	bhi.n	80088a8 <UART_SetConfig+0x160>
 8008878:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800887c:	d011      	beq.n	80088a2 <UART_SetConfig+0x15a>
 800887e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008882:	d811      	bhi.n	80088a8 <UART_SetConfig+0x160>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d003      	beq.n	8008890 <UART_SetConfig+0x148>
 8008888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800888c:	d006      	beq.n	800889c <UART_SetConfig+0x154>
 800888e:	e00b      	b.n	80088a8 <UART_SetConfig+0x160>
 8008890:	2300      	movs	r3, #0
 8008892:	77fb      	strb	r3, [r7, #31]
 8008894:	e061      	b.n	800895a <UART_SetConfig+0x212>
 8008896:	2302      	movs	r3, #2
 8008898:	77fb      	strb	r3, [r7, #31]
 800889a:	e05e      	b.n	800895a <UART_SetConfig+0x212>
 800889c:	2304      	movs	r3, #4
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	e05b      	b.n	800895a <UART_SetConfig+0x212>
 80088a2:	2308      	movs	r3, #8
 80088a4:	77fb      	strb	r3, [r7, #31]
 80088a6:	e058      	b.n	800895a <UART_SetConfig+0x212>
 80088a8:	2310      	movs	r3, #16
 80088aa:	77fb      	strb	r3, [r7, #31]
 80088ac:	e055      	b.n	800895a <UART_SetConfig+0x212>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a47      	ldr	r2, [pc, #284]	; (80089d0 <UART_SetConfig+0x288>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d124      	bne.n	8008902 <UART_SetConfig+0x1ba>
 80088b8:	4b42      	ldr	r3, [pc, #264]	; (80089c4 <UART_SetConfig+0x27c>)
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80088c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088c4:	d011      	beq.n	80088ea <UART_SetConfig+0x1a2>
 80088c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088ca:	d817      	bhi.n	80088fc <UART_SetConfig+0x1b4>
 80088cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088d0:	d011      	beq.n	80088f6 <UART_SetConfig+0x1ae>
 80088d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088d6:	d811      	bhi.n	80088fc <UART_SetConfig+0x1b4>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <UART_SetConfig+0x19c>
 80088dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e0:	d006      	beq.n	80088f0 <UART_SetConfig+0x1a8>
 80088e2:	e00b      	b.n	80088fc <UART_SetConfig+0x1b4>
 80088e4:	2300      	movs	r3, #0
 80088e6:	77fb      	strb	r3, [r7, #31]
 80088e8:	e037      	b.n	800895a <UART_SetConfig+0x212>
 80088ea:	2302      	movs	r3, #2
 80088ec:	77fb      	strb	r3, [r7, #31]
 80088ee:	e034      	b.n	800895a <UART_SetConfig+0x212>
 80088f0:	2304      	movs	r3, #4
 80088f2:	77fb      	strb	r3, [r7, #31]
 80088f4:	e031      	b.n	800895a <UART_SetConfig+0x212>
 80088f6:	2308      	movs	r3, #8
 80088f8:	77fb      	strb	r3, [r7, #31]
 80088fa:	e02e      	b.n	800895a <UART_SetConfig+0x212>
 80088fc:	2310      	movs	r3, #16
 80088fe:	77fb      	strb	r3, [r7, #31]
 8008900:	e02b      	b.n	800895a <UART_SetConfig+0x212>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a33      	ldr	r2, [pc, #204]	; (80089d4 <UART_SetConfig+0x28c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d124      	bne.n	8008956 <UART_SetConfig+0x20e>
 800890c:	4b2d      	ldr	r3, [pc, #180]	; (80089c4 <UART_SetConfig+0x27c>)
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008914:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008918:	d011      	beq.n	800893e <UART_SetConfig+0x1f6>
 800891a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800891e:	d817      	bhi.n	8008950 <UART_SetConfig+0x208>
 8008920:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008924:	d011      	beq.n	800894a <UART_SetConfig+0x202>
 8008926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800892a:	d811      	bhi.n	8008950 <UART_SetConfig+0x208>
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <UART_SetConfig+0x1f0>
 8008930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008934:	d006      	beq.n	8008944 <UART_SetConfig+0x1fc>
 8008936:	e00b      	b.n	8008950 <UART_SetConfig+0x208>
 8008938:	2300      	movs	r3, #0
 800893a:	77fb      	strb	r3, [r7, #31]
 800893c:	e00d      	b.n	800895a <UART_SetConfig+0x212>
 800893e:	2302      	movs	r3, #2
 8008940:	77fb      	strb	r3, [r7, #31]
 8008942:	e00a      	b.n	800895a <UART_SetConfig+0x212>
 8008944:	2304      	movs	r3, #4
 8008946:	77fb      	strb	r3, [r7, #31]
 8008948:	e007      	b.n	800895a <UART_SetConfig+0x212>
 800894a:	2308      	movs	r3, #8
 800894c:	77fb      	strb	r3, [r7, #31]
 800894e:	e004      	b.n	800895a <UART_SetConfig+0x212>
 8008950:	2310      	movs	r3, #16
 8008952:	77fb      	strb	r3, [r7, #31]
 8008954:	e001      	b.n	800895a <UART_SetConfig+0x212>
 8008956:	2310      	movs	r3, #16
 8008958:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008962:	d16c      	bne.n	8008a3e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8008964:	7ffb      	ldrb	r3, [r7, #31]
 8008966:	2b08      	cmp	r3, #8
 8008968:	d838      	bhi.n	80089dc <UART_SetConfig+0x294>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <UART_SetConfig+0x228>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	08008995 	.word	0x08008995
 8008974:	0800899d 	.word	0x0800899d
 8008978:	080089a5 	.word	0x080089a5
 800897c:	080089dd 	.word	0x080089dd
 8008980:	080089ab 	.word	0x080089ab
 8008984:	080089dd 	.word	0x080089dd
 8008988:	080089dd 	.word	0x080089dd
 800898c:	080089dd 	.word	0x080089dd
 8008990:	080089b3 	.word	0x080089b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008994:	f7fe fdae 	bl	80074f4 <HAL_RCC_GetPCLK1Freq>
 8008998:	61b8      	str	r0, [r7, #24]
        break;
 800899a:	e024      	b.n	80089e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800899c:	f7fe fdcc 	bl	8007538 <HAL_RCC_GetPCLK2Freq>
 80089a0:	61b8      	str	r0, [r7, #24]
        break;
 80089a2:	e020      	b.n	80089e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <UART_SetConfig+0x290>)
 80089a6:	61bb      	str	r3, [r7, #24]
        break;
 80089a8:	e01d      	b.n	80089e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089aa:	f7fe fd2f 	bl	800740c <HAL_RCC_GetSysClockFreq>
 80089ae:	61b8      	str	r0, [r7, #24]
        break;
 80089b0:	e019      	b.n	80089e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b6:	61bb      	str	r3, [r7, #24]
        break;
 80089b8:	e015      	b.n	80089e6 <UART_SetConfig+0x29e>
 80089ba:	bf00      	nop
 80089bc:	efff69f3 	.word	0xefff69f3
 80089c0:	40013800 	.word	0x40013800
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40004400 	.word	0x40004400
 80089cc:	40004800 	.word	0x40004800
 80089d0:	40004c00 	.word	0x40004c00
 80089d4:	40005000 	.word	0x40005000
 80089d8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	77bb      	strb	r3, [r7, #30]
        break;
 80089e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d075      	beq.n	8008ad8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	005a      	lsls	r2, r3, #1
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	085b      	lsrs	r3, r3, #1
 80089f6:	441a      	add	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2b0f      	cmp	r3, #15
 8008a08:	d916      	bls.n	8008a38 <UART_SetConfig+0x2f0>
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a10:	d212      	bcs.n	8008a38 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f023 030f 	bic.w	r3, r3, #15
 8008a1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	89fb      	ldrh	r3, [r7, #14]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	89fa      	ldrh	r2, [r7, #14]
 8008a34:	60da      	str	r2, [r3, #12]
 8008a36:	e04f      	b.n	8008ad8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	77bb      	strb	r3, [r7, #30]
 8008a3c:	e04c      	b.n	8008ad8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a3e:	7ffb      	ldrb	r3, [r7, #31]
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d828      	bhi.n	8008a96 <UART_SetConfig+0x34e>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0x304>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a71 	.word	0x08008a71
 8008a50:	08008a79 	.word	0x08008a79
 8008a54:	08008a81 	.word	0x08008a81
 8008a58:	08008a97 	.word	0x08008a97
 8008a5c:	08008a87 	.word	0x08008a87
 8008a60:	08008a97 	.word	0x08008a97
 8008a64:	08008a97 	.word	0x08008a97
 8008a68:	08008a97 	.word	0x08008a97
 8008a6c:	08008a8f 	.word	0x08008a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a70:	f7fe fd40 	bl	80074f4 <HAL_RCC_GetPCLK1Freq>
 8008a74:	61b8      	str	r0, [r7, #24]
        break;
 8008a76:	e013      	b.n	8008aa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a78:	f7fe fd5e 	bl	8007538 <HAL_RCC_GetPCLK2Freq>
 8008a7c:	61b8      	str	r0, [r7, #24]
        break;
 8008a7e:	e00f      	b.n	8008aa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a80:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <UART_SetConfig+0x3a8>)
 8008a82:	61bb      	str	r3, [r7, #24]
        break;
 8008a84:	e00c      	b.n	8008aa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a86:	f7fe fcc1 	bl	800740c <HAL_RCC_GetSysClockFreq>
 8008a8a:	61b8      	str	r0, [r7, #24]
        break;
 8008a8c:	e008      	b.n	8008aa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a92:	61bb      	str	r3, [r7, #24]
        break;
 8008a94:	e004      	b.n	8008aa0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	77bb      	strb	r3, [r7, #30]
        break;
 8008a9e:	bf00      	nop
    }

    if (pclk != 0U)
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d018      	beq.n	8008ad8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	085a      	lsrs	r2, r3, #1
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	441a      	add	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d908      	bls.n	8008ad4 <UART_SetConfig+0x38c>
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac8:	d204      	bcs.n	8008ad4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e001      	b.n	8008ad8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ae4:	7fbb      	ldrb	r3, [r7, #30]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	007a1200 	.word	0x007a1200

08008af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	f003 0308 	and.w	r3, r3, #8
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01a      	beq.n	8008c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bf2:	d10a      	bne.n	8008c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	605a      	str	r2, [r3, #4]
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr

08008c36 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af02      	add	r7, sp, #8
 8008c3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c46:	f7fc fed3 	bl	80059f0 <HAL_GetTick>
 8008c4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b08      	cmp	r3, #8
 8008c58:	d10e      	bne.n	8008c78 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f82d 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e023      	b.n	8008cc0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d10e      	bne.n	8008ca4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f817 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e00d      	b.n	8008cc0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b09c      	sub	sp, #112	; 0x70
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd8:	e0a5      	b.n	8008e26 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce0:	f000 80a1 	beq.w	8008e26 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ce4:	f7fc fe84 	bl	80059f0 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <UART_WaitOnFlagUntilTimeout+0x32>
 8008cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d13e      	bne.n	8008d78 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e6      	bne.n	8008cfa <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	663b      	str	r3, [r7, #96]	; 0x60
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e5      	bne.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e067      	b.n	8008e48 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d04f      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d94:	d147      	bne.n	8008e26 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e6      	bne.n	8008da0 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	613b      	str	r3, [r7, #16]
   return(result);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f023 0301 	bic.w	r3, r3, #1
 8008de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008df2:	623a      	str	r2, [r7, #32]
 8008df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	69f9      	ldr	r1, [r7, #28]
 8008df8:	6a3a      	ldr	r2, [r7, #32]
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e5      	bne.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e010      	b.n	8008e48 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	f43f af4a 	beq.w	8008cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3770      	adds	r7, #112	; 0x70
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b095      	sub	sp, #84	; 0x54
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e76:	643b      	str	r3, [r7, #64]	; 0x40
 8008e78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e6      	bne.n	8008e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d118      	bne.n	8008ef8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f023 0310 	bic.w	r3, r3, #16
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6979      	ldr	r1, [r7, #20]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e6      	bne.n	8008ec6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2220      	movs	r2, #32
 8008efc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008f0a:	bf00      	nop
 8008f0c:	3754      	adds	r7, #84	; 0x54
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr

08008f14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff fbf3 	bl	800871e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	61bb      	str	r3, [r7, #24]
 8008f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6979      	ldr	r1, [r7, #20]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	613b      	str	r3, [r7, #16]
   return(result);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e6      	bne.n	8008f48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff fbc0 	bl	800870c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f8c:	bf00      	nop
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr
	...

08008fa8 <Ea_Init>:
/**
  * @brief	Ea module initialization function
  * @return	None
  */
void Ea_Init(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Ea_InitDone_b = TRUE;
 8008fac:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <Ea_Init+0x14>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	701a      	strb	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	2000013c 	.word	0x2000013c

08008fc0 <Ea_Read>:
  * @param	BlockId		ID of the block to be read
  * @param  data		Pointer to the buffer where read data is stored
  * @return	None
  */
void Ea_Read(uint16 Block_Id, uint8 *data)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 8008fcc:	88fb      	ldrh	r3, [r7, #6]
 8008fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd2:	d20b      	bcs.n	8008fec <Ea_Read+0x2c>
	{
		HAL_I2C_Mem_Read_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	015b      	lsls	r3, r3, #5
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	2320      	movs	r3, #32
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	21a0      	movs	r1, #160	; 0xa0
 8008fe6:	4803      	ldr	r0, [pc, #12]	; (8008ff4 <Ea_Read+0x34>)
 8008fe8:	f7fb f890 	bl	800410c <HAL_I2C_Mem_Read_DMA>
	}
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200001d4 	.word	0x200001d4

08008ff8 <NvM_Init>:
/**
  * @brief	NvM module initialization function
  * @return	None
  */
void NvM_Init(void)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_NvM_InitDone_b = TRUE;
 8008ffc:	4b03      	ldr	r3, [pc, #12]	; (800900c <NvM_Init+0x14>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	701a      	strb	r2, [r3, #0]
}
 8009002:	bf00      	nop
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	2000013d 	.word	0x2000013d

08009010 <NvM_MainFunction>:
/**
  * @brief	NvM module main function (runs in task)
  * @return	None
  */
void NvM_MainFunction(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_NvM_InitDone_b)
	{

	}
}
 8009014:	bf00      	nop
 8009016:	46bd      	mov	sp, r7
 8009018:	bc80      	pop	{r7}
 800901a:	4770      	bx	lr

0800901c <NvM_ReadBlock>:
  * @param	BlockId		ID of the block to be read
  * @param  NvM_SrcPtr	Pointer to the data to be read
  * @return	None
  */
void NvM_ReadBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block read function */
	Ea_Read(BlockId, NvM_SrcPtr);
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff ffc7 	bl	8008fc0 <Ea_Read>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 800903e:	f000 f87d 	bl	800913c <SystemClock_Config>
	MX_DMA_Init();
 8009042:	f000 f8e1 	bl	8009208 <MX_DMA_Init>
	MX_GPIO_Init();
 8009046:	f000 fa5b 	bl	8009500 <MX_GPIO_Init>
	MX_ADC1_Init();
 800904a:	f000 f90b 	bl	8009264 <MX_ADC1_Init>
	MX_I2C1_Init();
 800904e:	f000 f979 	bl	8009344 <MX_I2C1_Init>
	MX_SPI3_Init();
 8009052:	f000 f9b7 	bl	80093c4 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8009056:	f000 f9f3 	bl	8009440 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800905a:	f000 fa21 	bl	80094a0 <MX_USART2_UART_Init>
	Gpt_Init();
 800905e:	f7f9 fc35 	bl	80028cc <Gpt_Init>

	/* Init system services */
	Tm_Init();
 8009062:	f000 fc67 	bl	8009934 <Tm_Init>

}
 8009066:	bf00      	nop
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc_val, adc_len);
 8009070:	4b04      	ldr	r3, [pc, #16]	; (8009084 <BswM_MainFunction+0x18>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	4904      	ldr	r1, [pc, #16]	; (8009088 <BswM_MainFunction+0x1c>)
 8009078:	4804      	ldr	r0, [pc, #16]	; (800908c <BswM_MainFunction+0x20>)
 800907a:	f7f8 f9fd 	bl	8001478 <HAL_ADC_Start_DMA>

}
 800907e:	bf00      	nop
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	2000000c 	.word	0x2000000c
 8009088:	2000046c 	.word	0x2000046c
 800908c:	20000140 	.word	0x20000140

08009090 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	ADC_AN0_Voltage = (uint16)((adc_val[0]*3300u)/4095u);
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <HAL_ADC_ConvCpltCallback+0x40>)
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80090a4:	fb03 f202 	mul.w	r2, r3, r2
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <HAL_ADC_ConvCpltCallback+0x44>)
 80090aa:	fba3 1302 	umull	r1, r3, r3, r2
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	0852      	lsrs	r2, r2, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	0adb      	lsrs	r3, r3, #11
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80090ba:	801a      	strh	r2, [r3, #0]
	Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <HAL_ADC_ConvCpltCallback+0x48>)
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fd3c 	bl	8009b40 <Rte_Write_AN0_Voltage_u16>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	2000046c 	.word	0x2000046c
 80090d4:	00100101 	.word	0x00100101
 80090d8:	2000046e 	.word	0x2000046e

080090dc <HAL_I2C_MemTxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	I2cTxCnt++;
 80090e4:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	4a03      	ldr	r2, [pc, #12]	; (80090f8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 80090ec:	6013      	str	r3, [r2, #0]
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bc80      	pop	{r7}
 80090f6:	4770      	bx	lr
 80090f8:	20000474 	.word	0x20000474

080090fc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	I2cRxCnt++;
 8009104:	4b04      	ldr	r3, [pc, #16]	; (8009118 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	4a03      	ldr	r2, [pc, #12]	; (8009118 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800910c:	6013      	str	r3, [r2, #0]
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr
 8009118:	20000470 	.word	0x20000470

0800911c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7fb f946 	bl	80043b6 <HAL_I2C_GetError>
 800912a:	4603      	mov	r3, r0
 800912c:	2b04      	cmp	r3, #4
 800912e:	d001      	beq.n	8009134 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8009130:	f000 fa3a 	bl	80095a8 <Error_Handler>
  }
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b0a6      	sub	sp, #152	; 0x98
 8009140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009142:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009146:	2228      	movs	r2, #40	; 0x28
 8009148:	2100      	movs	r1, #0
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fd46 	bl	8009bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009150:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	609a      	str	r2, [r3, #8]
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009160:	1d3b      	adds	r3, r7, #4
 8009162:	2258      	movs	r2, #88	; 0x58
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fd38 	bl	8009bdc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800916c:	2302      	movs	r3, #2
 800916e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009170:	2301      	movs	r3, #1
 8009172:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009174:	2310      	movs	r3, #16
 8009176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800917a:	2302      	movs	r3, #2
 800917c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8009188:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800918c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009190:	2300      	movs	r3, #0
 8009192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009196:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800919a:	4618      	mov	r0, r3
 800919c:	f7fc ff66 	bl	800606c <HAL_RCC_OscConfig>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80091a6:	f000 f9ff 	bl	80095a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091aa:	230f      	movs	r3, #15
 80091ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091ae:	2302      	movs	r3, #2
 80091b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80091b2:	2300      	movs	r3, #0
 80091b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80091b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80091bc:	2300      	movs	r3, #0
 80091be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80091c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091c4:	2102      	movs	r1, #2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fd ffa4 	bl	8007114 <HAL_RCC_ClockConfig>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80091d2:	f000 f9e9 	bl	80095a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80091d6:	23a3      	movs	r3, #163	; 0xa3
 80091d8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80091de:	2300      	movs	r3, #0
 80091e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80091e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80091e8:	2310      	movs	r3, #16
 80091ea:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80091ec:	1d3b      	adds	r3, r7, #4
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe f9c4 	bl	800757c <HAL_RCCEx_PeriphCLKConfig>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80091fa:	f000 f9d5 	bl	80095a8 <Error_Handler>
  }
}
 80091fe:	bf00      	nop
 8009200:	3798      	adds	r7, #152	; 0x98
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800920e:	4b14      	ldr	r3, [pc, #80]	; (8009260 <MX_DMA_Init+0x58>)
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	4a13      	ldr	r2, [pc, #76]	; (8009260 <MX_DMA_Init+0x58>)
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	6153      	str	r3, [r2, #20]
 800921a:	4b11      	ldr	r3, [pc, #68]	; (8009260 <MX_DMA_Init+0x58>)
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	607b      	str	r3, [r7, #4]
 8009224:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009226:	2200      	movs	r2, #0
 8009228:	2100      	movs	r1, #0
 800922a:	200b      	movs	r0, #11
 800922c:	f7fc fcc1 	bl	8005bb2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009230:	200b      	movs	r0, #11
 8009232:	f7fc fcda 	bl	8005bea <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009236:	2200      	movs	r2, #0
 8009238:	2100      	movs	r1, #0
 800923a:	2010      	movs	r0, #16
 800923c:	f7fc fcb9 	bl	8005bb2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009240:	2010      	movs	r0, #16
 8009242:	f7fc fcd2 	bl	8005bea <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	2011      	movs	r0, #17
 800924c:	f7fc fcb1 	bl	8005bb2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009250:	2011      	movs	r0, #17
 8009252:	f7fc fcca 	bl	8005bea <HAL_NVIC_EnableIRQ>
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40021000 	.word	0x40021000

08009264 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 800926a:	f107 031c 	add.w	r3, r7, #28
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	605a      	str	r2, [r3, #4]
 8009274:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8009276:	1d3b      	adds	r3, r7, #4
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	605a      	str	r2, [r3, #4]
 800927e:	609a      	str	r2, [r3, #8]
 8009280:	60da      	str	r2, [r3, #12]
 8009282:	611a      	str	r2, [r3, #16]
 8009284:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8009286:	4b2e      	ldr	r3, [pc, #184]	; (8009340 <MX_ADC1_Init+0xdc>)
 8009288:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800928c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800928e:	4b2c      	ldr	r3, [pc, #176]	; (8009340 <MX_ADC1_Init+0xdc>)
 8009290:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009294:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009296:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <MX_ADC1_Init+0xdc>)
 8009298:	2200      	movs	r2, #0
 800929a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800929c:	4b28      	ldr	r3, [pc, #160]	; (8009340 <MX_ADC1_Init+0xdc>)
 800929e:	2200      	movs	r2, #0
 80092a0:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 80092a2:	4b27      	ldr	r3, [pc, #156]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80092a8:	4b25      	ldr	r3, [pc, #148]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80092b0:	4b23      	ldr	r3, [pc, #140]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80092b6:	4b22      	ldr	r3, [pc, #136]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80092bc:	4b20      	ldr	r3, [pc, #128]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092be:	2200      	movs	r2, #0
 80092c0:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 80092c2:	4b1f      	ldr	r3, [pc, #124]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 80092c8:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80092d0:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092d2:	2204      	movs	r2, #4
 80092d4:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 80092d6:	4b1a      	ldr	r3, [pc, #104]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092d8:	2200      	movs	r2, #0
 80092da:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80092dc:	4b18      	ldr	r3, [pc, #96]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092de:	2200      	movs	r2, #0
 80092e0:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80092e2:	4817      	ldr	r0, [pc, #92]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092e4:	f7f7 fece 	bl	8001084 <HAL_ADC_Init>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <MX_ADC1_Init+0x8e>
	  {
	    Error_Handler();
 80092ee:	f000 f95b 	bl	80095a8 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80092f2:	2300      	movs	r3, #0
 80092f4:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80092f6:	f107 031c 	add.w	r3, r7, #28
 80092fa:	4619      	mov	r1, r3
 80092fc:	4810      	ldr	r0, [pc, #64]	; (8009340 <MX_ADC1_Init+0xdc>)
 80092fe:	f7f8 fcc3 	bl	8001c88 <HAL_ADCEx_MultiModeConfigChannel>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <MX_ADC1_Init+0xa8>
	  {
	    Error_Handler();
 8009308:	f000 f94e 	bl	80095a8 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800930c:	2301      	movs	r3, #1
 800930e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009310:	2301      	movs	r3, #1
 8009312:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009314:	2300      	movs	r3, #0
 8009316:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800931c:	2300      	movs	r3, #0
 800931e:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	4619      	mov	r1, r3
 8009328:	4805      	ldr	r0, [pc, #20]	; (8009340 <MX_ADC1_Init+0xdc>)
 800932a:	f7f8 f9c1 	bl	80016b0 <HAL_ADC_ConfigChannel>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_ADC1_Init+0xd4>
	  {
	    Error_Handler();
 8009334:	f000 f938 	bl	80095a8 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

}
 8009338:	bf00      	nop
 800933a:	3728      	adds	r7, #40	; 0x28
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000140 	.word	0x20000140

08009344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 8009348:	4b1b      	ldr	r3, [pc, #108]	; (80093b8 <MX_I2C1_Init+0x74>)
 800934a:	4a1c      	ldr	r2, [pc, #112]	; (80093bc <MX_I2C1_Init+0x78>)
 800934c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00702681;
 800934e:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <MX_I2C1_Init+0x74>)
 8009350:	4a1b      	ldr	r2, [pc, #108]	; (80093c0 <MX_I2C1_Init+0x7c>)
 8009352:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8009354:	4b18      	ldr	r3, [pc, #96]	; (80093b8 <MX_I2C1_Init+0x74>)
 8009356:	2200      	movs	r2, #0
 8009358:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800935a:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <MX_I2C1_Init+0x74>)
 800935c:	2201      	movs	r2, #1
 800935e:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009360:	4b15      	ldr	r3, [pc, #84]	; (80093b8 <MX_I2C1_Init+0x74>)
 8009362:	2200      	movs	r2, #0
 8009364:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <MX_I2C1_Init+0x74>)
 8009368:	2200      	movs	r2, #0
 800936a:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800936c:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <MX_I2C1_Init+0x74>)
 800936e:	2200      	movs	r2, #0
 8009370:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009372:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <MX_I2C1_Init+0x74>)
 8009374:	2200      	movs	r2, #0
 8009376:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009378:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <MX_I2C1_Init+0x74>)
 800937a:	2200      	movs	r2, #0
 800937c:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800937e:	480e      	ldr	r0, [pc, #56]	; (80093b8 <MX_I2C1_Init+0x74>)
 8009380:	f7fa fdf8 	bl	8003f74 <HAL_I2C_Init>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <MX_I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800938a:	f000 f90d 	bl	80095a8 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800938e:	2100      	movs	r1, #0
 8009390:	4809      	ldr	r0, [pc, #36]	; (80093b8 <MX_I2C1_Init+0x74>)
 8009392:	f7fc fa16 	bl	80057c2 <HAL_I2CEx_ConfigAnalogFilter>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <MX_I2C1_Init+0x5c>
	  {
	    Error_Handler();
 800939c:	f000 f904 	bl	80095a8 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80093a0:	2100      	movs	r1, #0
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <MX_I2C1_Init+0x74>)
 80093a4:	f7fc fa57 	bl	8005856 <HAL_I2CEx_ConfigDigitalFilter>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <MX_I2C1_Init+0x6e>
	  {
	    Error_Handler();
 80093ae:	f000 f8fb 	bl	80095a8 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 80093b2:	bf00      	nop
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200001d4 	.word	0x200001d4
 80093bc:	40005400 	.word	0x40005400
 80093c0:	00702681 	.word	0x00702681

080093c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80093c8:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <MX_SPI3_Init+0x74>)
 80093ca:	4a1c      	ldr	r2, [pc, #112]	; (800943c <MX_SPI3_Init+0x78>)
 80093cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80093ce:	4b1a      	ldr	r3, [pc, #104]	; (8009438 <MX_SPI3_Init+0x74>)
 80093d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80093d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80093d6:	4b18      	ldr	r3, [pc, #96]	; (8009438 <MX_SPI3_Init+0x74>)
 80093d8:	2200      	movs	r2, #0
 80093da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80093dc:	4b16      	ldr	r3, [pc, #88]	; (8009438 <MX_SPI3_Init+0x74>)
 80093de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80093e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80093e4:	4b14      	ldr	r3, [pc, #80]	; (8009438 <MX_SPI3_Init+0x74>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80093ea:	4b13      	ldr	r3, [pc, #76]	; (8009438 <MX_SPI3_Init+0x74>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <MX_SPI3_Init+0x74>)
 80093f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <MX_SPI3_Init+0x74>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80093fe:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <MX_SPI3_Init+0x74>)
 8009400:	2200      	movs	r2, #0
 8009402:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <MX_SPI3_Init+0x74>)
 8009406:	2200      	movs	r2, #0
 8009408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800940a:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <MX_SPI3_Init+0x74>)
 800940c:	2200      	movs	r2, #0
 800940e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009410:	4b09      	ldr	r3, [pc, #36]	; (8009438 <MX_SPI3_Init+0x74>)
 8009412:	2207      	movs	r2, #7
 8009414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009416:	4b08      	ldr	r3, [pc, #32]	; (8009438 <MX_SPI3_Init+0x74>)
 8009418:	2200      	movs	r2, #0
 800941a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <MX_SPI3_Init+0x74>)
 800941e:	2208      	movs	r2, #8
 8009420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009422:	4805      	ldr	r0, [pc, #20]	; (8009438 <MX_SPI3_Init+0x74>)
 8009424:	f7fe fb72 	bl	8007b0c <HAL_SPI_Init>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800942e:	f000 f8bb 	bl	80095a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009432:	bf00      	nop
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	200002d8 	.word	0x200002d8
 800943c:	40003c00 	.word	0x40003c00

08009440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009444:	4b14      	ldr	r3, [pc, #80]	; (8009498 <MX_USART1_UART_Init+0x58>)
 8009446:	4a15      	ldr	r2, [pc, #84]	; (800949c <MX_USART1_UART_Init+0x5c>)
 8009448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800944a:	4b13      	ldr	r3, [pc, #76]	; (8009498 <MX_USART1_UART_Init+0x58>)
 800944c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8009450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009452:	4b11      	ldr	r3, [pc, #68]	; (8009498 <MX_USART1_UART_Init+0x58>)
 8009454:	2200      	movs	r2, #0
 8009456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009458:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <MX_USART1_UART_Init+0x58>)
 800945a:	2200      	movs	r2, #0
 800945c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800945e:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <MX_USART1_UART_Init+0x58>)
 8009460:	2200      	movs	r2, #0
 8009462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009464:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <MX_USART1_UART_Init+0x58>)
 8009466:	220c      	movs	r2, #12
 8009468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800946a:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <MX_USART1_UART_Init+0x58>)
 800946c:	2200      	movs	r2, #0
 800946e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009470:	4b09      	ldr	r3, [pc, #36]	; (8009498 <MX_USART1_UART_Init+0x58>)
 8009472:	2200      	movs	r2, #0
 8009474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009476:	4b08      	ldr	r3, [pc, #32]	; (8009498 <MX_USART1_UART_Init+0x58>)
 8009478:	2200      	movs	r2, #0
 800947a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <MX_USART1_UART_Init+0x58>)
 800947e:	2200      	movs	r2, #0
 8009480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009482:	4805      	ldr	r0, [pc, #20]	; (8009498 <MX_USART1_UART_Init+0x58>)
 8009484:	f7fe fd82 	bl	8007f8c <HAL_UART_Init>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800948e:	f000 f88b 	bl	80095a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009492:	bf00      	nop
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20000364 	.word	0x20000364
 800949c:	40013800 	.word	0x40013800

080094a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80094a4:	4b14      	ldr	r3, [pc, #80]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094a6:	4a15      	ldr	r2, [pc, #84]	; (80094fc <MX_USART2_UART_Init+0x5c>)
 80094a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80094aa:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80094b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80094b2:	4b11      	ldr	r3, [pc, #68]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80094b8:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80094be:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094c6:	220c      	movs	r2, #12
 80094c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80094ca:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80094d0:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80094d6:	4b08      	ldr	r3, [pc, #32]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094d8:	2200      	movs	r2, #0
 80094da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80094dc:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094de:	2200      	movs	r2, #0
 80094e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80094e2:	4805      	ldr	r0, [pc, #20]	; (80094f8 <MX_USART2_UART_Init+0x58>)
 80094e4:	f7fe fd52 	bl	8007f8c <HAL_UART_Init>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80094ee:	f000 f85b 	bl	80095a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80094f2:	bf00      	nop
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	200003e8 	.word	0x200003e8
 80094fc:	40004400 	.word	0x40004400

08009500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009506:	f107 030c 	add.w	r3, r7, #12
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	605a      	str	r2, [r3, #4]
 8009510:	609a      	str	r2, [r3, #8]
 8009512:	60da      	str	r2, [r3, #12]
 8009514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009516:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <MX_GPIO_Init+0xa0>)
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	4a21      	ldr	r2, [pc, #132]	; (80095a0 <MX_GPIO_Init+0xa0>)
 800951c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009520:	6153      	str	r3, [r2, #20]
 8009522:	4b1f      	ldr	r3, [pc, #124]	; (80095a0 <MX_GPIO_Init+0xa0>)
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800952a:	60bb      	str	r3, [r7, #8]
 800952c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800952e:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <MX_GPIO_Init+0xa0>)
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	4a1b      	ldr	r2, [pc, #108]	; (80095a0 <MX_GPIO_Init+0xa0>)
 8009534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009538:	6153      	str	r3, [r2, #20]
 800953a:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <MX_GPIO_Init+0xa0>)
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009542:	607b      	str	r3, [r7, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009546:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <MX_GPIO_Init+0xa0>)
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	4a15      	ldr	r2, [pc, #84]	; (80095a0 <MX_GPIO_Init+0xa0>)
 800954c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009550:	6153      	str	r3, [r2, #20]
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <MX_GPIO_Init+0xa0>)
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800955e:	2200      	movs	r2, #0
 8009560:	2120      	movs	r1, #32
 8009562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009566:	f7f8 ff50 	bl	800240a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800956a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800956e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009570:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800957a:	f107 030c 	add.w	r3, r7, #12
 800957e:	4619      	mov	r1, r3
 8009580:	4808      	ldr	r0, [pc, #32]	; (80095a4 <MX_GPIO_Init+0xa4>)
 8009582:	f7f8 fda1 	bl	80020c8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009586:	2200      	movs	r2, #0
 8009588:	2100      	movs	r1, #0
 800958a:	2028      	movs	r0, #40	; 0x28
 800958c:	f7fc fb11 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009590:	2028      	movs	r0, #40	; 0x28
 8009592:	f7fc fb2a 	bl	8005bea <HAL_NVIC_EnableIRQ>

}
 8009596:	bf00      	nop
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	40021000 	.word	0x40021000
 80095a4:	48000800 	.word	0x48000800

080095a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80095ac:	b672      	cpsid	i
}
 80095ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80095b0:	e7fe      	b.n	80095b0 <Error_Handler+0x8>

080095b2 <EcuM_StartUp_One>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_One()
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 80095b6:	f7fc f9bd 	bl	8005934 <HAL_Init>
	BswM_Init();
 80095ba:	f7ff fd3e 	bl	800903a <BswM_Init>
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <EcuM_StartUp_Two>:

void EcuM_StartUp_Two()
{
 80095c2:	b480      	push	{r7}
 80095c4:	af00      	add	r7, sp, #0

}
 80095c6:	bf00      	nop
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr

080095ce <EcuM_Init>:

int EcuM_Init(void)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	af00      	add	r7, sp, #0
	EcuM_StartUp_One();
 80095d2:	f7ff ffee 	bl	80095b2 <EcuM_StartUp_One>
	/* Start Scheduler */
	Os_Start();
 80095d6:	f000 f803 	bl	80095e0 <Os_Start>

	return 0;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	bd80      	pop	{r7, pc}

080095e0 <Os_Start>:

#include "Os.h"
#include "Os_scheduler.h"

void Os_Start()
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
	Os_Scheduler_Init();
 80095e4:	f000 f848 	bl	8009678 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 80095e8:	f000 f8be 	bl	8009768 <Os_Scheduler_Start>

	while(1)
 80095ec:	e7fe      	b.n	80095ec <Os_Start+0xc>
	...

080095f0 <Os_TaskMaster_WaitForContextSwitch>:
OS_VAR volatile Os_Scheduler_State_t g_OS_State_e = OS_STATE_RESET;

static void Os_TaskMaster_WaitForContextSwitch(void);

static void Os_TaskMaster_WaitForContextSwitch(void)
{
 80095f0:	b480      	push	{r7}
 80095f2:	af00      	add	r7, sp, #0
	while(task5ms_cnt == tim3_5count)
 80095f4:	bf00      	nop
 80095f6:	4b09      	ldr	r3, [pc, #36]	; (800961c <Os_TaskMaster_WaitForContextSwitch+0x2c>)
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <Os_TaskMaster_WaitForContextSwitch+0x30>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d0f9      	beq.n	80095f6 <Os_TaskMaster_WaitForContextSwitch+0x6>
	{

	}
	Os_Task5ms_0_cnt++;
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <Os_TaskMaster_WaitForContextSwitch+0x34>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	4a06      	ldr	r2, [pc, #24]	; (8009624 <Os_TaskMaster_WaitForContextSwitch+0x34>)
 800960a:	6013      	str	r3, [r2, #0]
	task5ms_cnt = tim3_5count;
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <Os_TaskMaster_WaitForContextSwitch+0x30>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a02      	ldr	r2, [pc, #8]	; (800961c <Os_TaskMaster_WaitForContextSwitch+0x2c>)
 8009612:	6013      	str	r3, [r2, #0]
}
 8009614:	bf00      	nop
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr
 800961c:	20001448 	.word	0x20001448
 8009620:	200000d0 	.word	0x200000d0
 8009624:	20001444 	.word	0x20001444

08009628 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800962c:	f7fc f9ce 	bl	80059cc <HAL_IncTick>
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8009630:	4b03      	ldr	r3, [pc, #12]	; (8009640 <SysTick_Handler+0x18>)
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	4a02      	ldr	r2, [pc, #8]	; (8009640 <SysTick_Handler+0x18>)
 8009636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800963a:	6053      	str	r3, [r2, #4]
}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}
 8009640:	e000ed00 	.word	0xe000ed00

08009644 <PendSV_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 8009644:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 8009646:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 8009648:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800964a:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 800964c:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 800964e:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 8009650:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =pCurntTcb");
 8009652:	4808      	ldr	r0, [pc, #32]	; (8009674 <PendSV_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 8009654:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 8009656:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 8009658:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 800965a:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 800965c:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 800965e:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 8009660:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 8009662:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8009664:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8009666:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8009668:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800966a:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 800966c:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 800966e:	b662      	cpsie	i
    __asm("BX      LR");
 8009670:	4770      	bx	lr

}
 8009672:	bf00      	nop
 8009674:	200004a0 	.word	0x200004a0

08009678 <Os_Scheduler_Init>:

void Os_Scheduler_Init()
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
	/// Enter critical section
	/// Disable interrupts
	__asm("CPSID   I");
 800967c:	b672      	cpsid	i
	/// Make the TCB linked list circular
	tcbs[0].nextPt = &tcbs[1];
 800967e:	4b29      	ldr	r3, [pc, #164]	; (8009724 <Os_Scheduler_Init+0xac>)
 8009680:	4a29      	ldr	r2, [pc, #164]	; (8009728 <Os_Scheduler_Init+0xb0>)
 8009682:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 8009684:	4b27      	ldr	r3, [pc, #156]	; (8009724 <Os_Scheduler_Init+0xac>)
 8009686:	4a29      	ldr	r2, [pc, #164]	; (800972c <Os_Scheduler_Init+0xb4>)
 8009688:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[3];
 800968a:	4b26      	ldr	r3, [pc, #152]	; (8009724 <Os_Scheduler_Init+0xac>)
 800968c:	4a28      	ldr	r2, [pc, #160]	; (8009730 <Os_Scheduler_Init+0xb8>)
 800968e:	615a      	str	r2, [r3, #20]
	tcbs[3].nextPt = &tcbs[4];
 8009690:	4b24      	ldr	r3, [pc, #144]	; (8009724 <Os_Scheduler_Init+0xac>)
 8009692:	4a28      	ldr	r2, [pc, #160]	; (8009734 <Os_Scheduler_Init+0xbc>)
 8009694:	61da      	str	r2, [r3, #28]
	tcbs[4].nextPt = &tcbs[0];
 8009696:	4b23      	ldr	r3, [pc, #140]	; (8009724 <Os_Scheduler_Init+0xac>)
 8009698:	4a22      	ldr	r2, [pc, #136]	; (8009724 <Os_Scheduler_Init+0xac>)
 800969a:	625a      	str	r2, [r3, #36]	; 0x24

	/// Setup stack for task0

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
	tcbs[0].stackPt = &TCB_STACK[0][OS_TASK_STACKSIZE-16];
 800969c:	4b21      	ldr	r3, [pc, #132]	; (8009724 <Os_Scheduler_Init+0xac>)
 800969e:	4a26      	ldr	r2, [pc, #152]	; (8009738 <Os_Scheduler_Init+0xc0>)
 80096a0:	601a      	str	r2, [r3, #0]
	/// Set the 'T' bit in stacked xPSR to '1' to notify processor
	/// on exception return about the thumb state. V6-m and V7-m cores
	/// can only support thumb state hence this should be always set
	/// to '1'.
	TCB_STACK[0][OS_TASK_STACKSIZE-1] = 0x01000000;
 80096a2:	4b26      	ldr	r3, [pc, #152]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096a8:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	/// Set the stacked PC to point to the task
	TCB_STACK[0][OS_TASK_STACKSIZE-2] = (int32_t)(Os_Task_Master_0);
 80096ac:	4a24      	ldr	r2, [pc, #144]	; (8009740 <Os_Scheduler_Init+0xc8>)
 80096ae:	4b23      	ldr	r3, [pc, #140]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096b0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	/// Setup stack for task1

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
    tcbs[1].stackPt = &TCB_STACK[1][OS_TASK_STACKSIZE-16];
 80096b4:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <Os_Scheduler_Init+0xac>)
 80096b6:	4a23      	ldr	r2, [pc, #140]	; (8009744 <Os_Scheduler_Init+0xcc>)
 80096b8:	609a      	str	r2, [r3, #8]
    /// Set the 'T' bit in stacked xPSR to '1' to notify processor
    /// on exception return about the thumb state. V6-m and V7-m cores
    /// can only support thumb state hence this should be always set
    /// to '1'.
    TCB_STACK[1][OS_TASK_STACKSIZE-1] = 0x01000000;
 80096ba:	4b20      	ldr	r3, [pc, #128]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096c0:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    /// Set the stacked PC to point to the task
    TCB_STACK[1][OS_TASK_STACKSIZE-2] = (int32_t)(Task10ms_0);
 80096c4:	4a20      	ldr	r2, [pc, #128]	; (8009748 <Os_Scheduler_Init+0xd0>)
 80096c6:	4b1d      	ldr	r3, [pc, #116]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096c8:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638


    tcbs[2].stackPt = &TCB_STACK[2][OS_TASK_STACKSIZE-16];
 80096cc:	4b15      	ldr	r3, [pc, #84]	; (8009724 <Os_Scheduler_Init+0xac>)
 80096ce:	4a1f      	ldr	r2, [pc, #124]	; (800974c <Os_Scheduler_Init+0xd4>)
 80096d0:	611a      	str	r2, [r3, #16]
    TCB_STACK[2][OS_TASK_STACKSIZE-1] = 0x01000000;
 80096d2:	4b1a      	ldr	r3, [pc, #104]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096d8:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    TCB_STACK[2][OS_TASK_STACKSIZE-2] = (int32_t)(Task50ms_0);
 80096dc:	4a1c      	ldr	r2, [pc, #112]	; (8009750 <Os_Scheduler_Init+0xd8>)
 80096de:	4b17      	ldr	r3, [pc, #92]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096e0:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958

    tcbs[3].stackPt = &TCB_STACK[3][OS_TASK_STACKSIZE-16];
 80096e4:	4b0f      	ldr	r3, [pc, #60]	; (8009724 <Os_Scheduler_Init+0xac>)
 80096e6:	4a1b      	ldr	r2, [pc, #108]	; (8009754 <Os_Scheduler_Init+0xdc>)
 80096e8:	619a      	str	r2, [r3, #24]
    TCB_STACK[3][OS_TASK_STACKSIZE-1] = 0x01000000;
 80096ea:	4b14      	ldr	r3, [pc, #80]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096f0:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    TCB_STACK[3][OS_TASK_STACKSIZE-2] = (int32_t)(Task100ms_0);
 80096f4:	4a18      	ldr	r2, [pc, #96]	; (8009758 <Os_Scheduler_Init+0xe0>)
 80096f6:	4b11      	ldr	r3, [pc, #68]	; (800973c <Os_Scheduler_Init+0xc4>)
 80096f8:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78

    tcbs[4].stackPt = &TCB_STACK[4][OS_TASK_STACKSIZE-16];
 80096fc:	4b09      	ldr	r3, [pc, #36]	; (8009724 <Os_Scheduler_Init+0xac>)
 80096fe:	4a17      	ldr	r2, [pc, #92]	; (800975c <Os_Scheduler_Init+0xe4>)
 8009700:	621a      	str	r2, [r3, #32]
    TCB_STACK[4][OS_TASK_STACKSIZE-1] = 0x01000000;
 8009702:	4b0e      	ldr	r3, [pc, #56]	; (800973c <Os_Scheduler_Init+0xc4>)
 8009704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009708:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    TCB_STACK[4][OS_TASK_STACKSIZE-2] = (int32_t)(Task500ms_0);
 800970c:	4a14      	ldr	r2, [pc, #80]	; (8009760 <Os_Scheduler_Init+0xe8>)
 800970e:	4b0b      	ldr	r3, [pc, #44]	; (800973c <Os_Scheduler_Init+0xc4>)
 8009710:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98

    /// Make current tcb pointer point to task0
    pCurntTcb = &tcbs[0];
 8009714:	4b13      	ldr	r3, [pc, #76]	; (8009764 <Os_Scheduler_Init+0xec>)
 8009716:	4a03      	ldr	r2, [pc, #12]	; (8009724 <Os_Scheduler_Init+0xac>)
 8009718:	601a      	str	r2, [r3, #0]
    /// Enable interrupts
    __asm("CPSIE   I ");
 800971a:	b662      	cpsie	i
}
 800971c:	bf00      	nop
 800971e:	46bd      	mov	sp, r7
 8009720:	bc80      	pop	{r7}
 8009722:	4770      	bx	lr
 8009724:	20000478 	.word	0x20000478
 8009728:	20000480 	.word	0x20000480
 800972c:	20000488 	.word	0x20000488
 8009730:	20000490 	.word	0x20000490
 8009734:	20000498 	.word	0x20000498
 8009738:	20000784 	.word	0x20000784
 800973c:	200004a4 	.word	0x200004a4
 8009740:	08009795 	.word	0x08009795
 8009744:	20000aa4 	.word	0x20000aa4
 8009748:	080097e9 	.word	0x080097e9
 800974c:	20000dc4 	.word	0x20000dc4
 8009750:	0800982d 	.word	0x0800982d
 8009754:	200010e4 	.word	0x200010e4
 8009758:	08009871 	.word	0x08009871
 800975c:	20001404 	.word	0x20001404
 8009760:	080098b5 	.word	0x080098b5
 8009764:	200004a0 	.word	0x200004a0

08009768 <Os_Scheduler_Start>:


__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =pCurntTcb");
 8009768:	4809      	ldr	r0, [pc, #36]	; (8009790 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 800976a:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 800976c:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 800976e:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 8009770:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8009772:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8009774:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8009776:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8009778:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 800977a:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 800977c:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800977e:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 8009780:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 8009782:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 8009784:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 8009786:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 8009788:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 800978a:	b662      	cpsie	i
    __asm("BX      LR");
 800978c:	4770      	bx	lr
}
 800978e:	bf00      	nop
 8009790:	200004a0 	.word	0x200004a0

08009794 <Os_Task_Master_0>:
/**
  * @brief  Initialization task
  * @return None
  */
void Os_Task_Master_0()
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
    while(1)
    {
    	/* Wait for context switch of master task */
    	Os_TaskMaster_WaitForContextSwitch();
 8009798:	f7ff ff2a 	bl	80095f0 <Os_TaskMaster_WaitForContextSwitch>
    	/* Check Os state */
    	switch (g_OS_State_e)
 800979c:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <Os_Task_Master_0+0x50>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d81c      	bhi.n	80097e0 <Os_Task_Master_0+0x4c>
 80097a6:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <Os_Task_Master_0+0x18>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097c5 	.word	0x080097c5
 80097b0:	080097cd 	.word	0x080097cd
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	080097e1 	.word	0x080097e1
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097e1 	.word	0x080097e1
    	{
    		case OS_STATE_RESET:
    		{
    			g_OS_State_e = OS_STATE_INIT;
 80097c4:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <Os_Task_Master_0+0x50>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	701a      	strb	r2, [r3, #0]
    		} break;
 80097ca:	e00a      	b.n	80097e2 <Os_Task_Master_0+0x4e>
    		case OS_STATE_INIT:
    		{
    			Os_Task_Master();
 80097cc:	f000 f894 	bl	80098f8 <Os_Task_Master>
    			g_OS_State_e = OS_STATE_NVMREAD;
 80097d0:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <Os_Task_Master_0+0x50>)
 80097d2:	2202      	movs	r2, #2
 80097d4:	701a      	strb	r2, [r3, #0]
    		} break;
 80097d6:	e004      	b.n	80097e2 <Os_Task_Master_0+0x4e>
    		case OS_STATE_NVMREAD:
    		{
    			/* Todo: preform readall here */
    			g_OS_State_e = OS_STATE_RUNNING;
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <Os_Task_Master_0+0x50>)
 80097da:	2203      	movs	r2, #3
 80097dc:	701a      	strb	r2, [r3, #0]
    		} break;
 80097de:	e000      	b.n	80097e2 <Os_Task_Master_0+0x4e>
    			/* NvM write all, write error */
    		} break;
    		default:
    		{

    		} break;
 80097e0:	bf00      	nop
    	Os_TaskMaster_WaitForContextSwitch();
 80097e2:	e7d9      	b.n	8009798 <Os_Task_Master_0+0x4>
 80097e4:	2000146c 	.word	0x2000146c

080097e8 <Task10ms_0>:
/**
  * @brief  Periodic 10ms task
  * @return None
  */
volatile void Task10ms_0()
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 80097ec:	4b0b      	ldr	r3, [pc, #44]	; (800981c <Task10ms_0+0x34>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d1fa      	bne.n	80097ec <Task10ms_0+0x4>
    	{
			while(task10ms_cnt == tim3_10count)
 80097f6:	bf00      	nop
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <Task10ms_0+0x38>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <Task10ms_0+0x3c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d0f9      	beq.n	80097f8 <Task10ms_0+0x10>
			{

			}
			Os_Task10ms_0_cnt++;
 8009804:	4b08      	ldr	r3, [pc, #32]	; (8009828 <Task10ms_0+0x40>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3301      	adds	r3, #1
 800980a:	4a07      	ldr	r2, [pc, #28]	; (8009828 <Task10ms_0+0x40>)
 800980c:	6013      	str	r3, [r2, #0]
			task10ms_cnt = tim3_10count;
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <Task10ms_0+0x3c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a03      	ldr	r2, [pc, #12]	; (8009820 <Task10ms_0+0x38>)
 8009814:	6013      	str	r3, [r2, #0]

			Os_Task_10ms();
 8009816:	f000 f875 	bl	8009904 <Os_Task_10ms>
    	if(OS_STATE_RUNNING == g_OS_State_e)
 800981a:	e7e7      	b.n	80097ec <Task10ms_0+0x4>
 800981c:	2000146c 	.word	0x2000146c
 8009820:	20001450 	.word	0x20001450
 8009824:	200000d4 	.word	0x200000d4
 8009828:	2000144c 	.word	0x2000144c

0800982c <Task50ms_0>:
/**
  * @brief  Periodic 50ms task
  * @return None
  */
volatile void Task50ms_0()
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 8009830:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <Task50ms_0+0x34>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b03      	cmp	r3, #3
 8009838:	d1fa      	bne.n	8009830 <Task50ms_0+0x4>
    	{
			while(task50ms_cnt == tim3_50count)
 800983a:	bf00      	nop
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <Task50ms_0+0x38>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <Task50ms_0+0x3c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d0f9      	beq.n	800983c <Task50ms_0+0x10>
			{

			}
			Os_Task50ms_0_cnt++;
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <Task50ms_0+0x40>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	4a07      	ldr	r2, [pc, #28]	; (800986c <Task50ms_0+0x40>)
 8009850:	6013      	str	r3, [r2, #0]
			task50ms_cnt = tim3_50count;
 8009852:	4b05      	ldr	r3, [pc, #20]	; (8009868 <Task50ms_0+0x3c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a03      	ldr	r2, [pc, #12]	; (8009864 <Task50ms_0+0x38>)
 8009858:	6013      	str	r3, [r2, #0]

			Os_Task_50ms();
 800985a:	f000 f859 	bl	8009910 <Os_Task_50ms>
    	if(OS_STATE_RUNNING == g_OS_State_e)
 800985e:	e7e7      	b.n	8009830 <Task50ms_0+0x4>
 8009860:	2000146c 	.word	0x2000146c
 8009864:	20001458 	.word	0x20001458
 8009868:	200000d8 	.word	0x200000d8
 800986c:	20001454 	.word	0x20001454

08009870 <Task100ms_0>:
/**
  * @brief  Periodic 100ms task
  * @return None
  */
volatile void Task100ms_0()
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 8009874:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <Task100ms_0+0x34>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b03      	cmp	r3, #3
 800987c:	d1fa      	bne.n	8009874 <Task100ms_0+0x4>
    	{
			while(task100ms_cnt == tim3_100count)
 800987e:	bf00      	nop
 8009880:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <Task100ms_0+0x38>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	4b09      	ldr	r3, [pc, #36]	; (80098ac <Task100ms_0+0x3c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d0f9      	beq.n	8009880 <Task100ms_0+0x10>
			{

			}
			Os_Task100ms_0_cnt++;
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <Task100ms_0+0x40>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3301      	adds	r3, #1
 8009892:	4a07      	ldr	r2, [pc, #28]	; (80098b0 <Task100ms_0+0x40>)
 8009894:	6013      	str	r3, [r2, #0]
			task100ms_cnt = tim3_100count;
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <Task100ms_0+0x3c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a03      	ldr	r2, [pc, #12]	; (80098a8 <Task100ms_0+0x38>)
 800989c:	6013      	str	r3, [r2, #0]

			Os_Task_100ms();
 800989e:	f000 f83d 	bl	800991c <Os_Task_100ms>
    	if(OS_STATE_RUNNING == g_OS_State_e)
 80098a2:	e7e7      	b.n	8009874 <Task100ms_0+0x4>
 80098a4:	2000146c 	.word	0x2000146c
 80098a8:	20001460 	.word	0x20001460
 80098ac:	200000dc 	.word	0x200000dc
 80098b0:	2000145c 	.word	0x2000145c

080098b4 <Task500ms_0>:
/**
  * @brief  Periodic 500ms task
  * @return None
  */
volatile void Task500ms_0()
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 80098b8:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <Task500ms_0+0x34>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d1fa      	bne.n	80098b8 <Task500ms_0+0x4>
    	{
			while(task500ms_cnt == tim3_500count)
 80098c2:	bf00      	nop
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <Task500ms_0+0x38>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <Task500ms_0+0x3c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d0f9      	beq.n	80098c4 <Task500ms_0+0x10>
			{

			}
			Os_Task500ms_0_cnt++;
 80098d0:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <Task500ms_0+0x40>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3301      	adds	r3, #1
 80098d6:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <Task500ms_0+0x40>)
 80098d8:	6013      	str	r3, [r2, #0]
			task500ms_cnt = tim3_500count;
 80098da:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <Task500ms_0+0x3c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a03      	ldr	r2, [pc, #12]	; (80098ec <Task500ms_0+0x38>)
 80098e0:	6013      	str	r3, [r2, #0]

			Os_Task_500ms();
 80098e2:	f000 f821 	bl	8009928 <Os_Task_500ms>
    	if(OS_STATE_RUNNING == g_OS_State_e)
 80098e6:	e7e7      	b.n	80098b8 <Task500ms_0+0x4>
 80098e8:	2000146c 	.word	0x2000146c
 80098ec:	20001468 	.word	0x20001468
 80098f0:	200000e0 	.word	0x200000e0
 80098f4:	20001464 	.word	0x20001464

080098f8 <Os_Task_Master>:

#include "Os_task.h"
#include "Rte_Os.h"

TASK(Master)()
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
	Rte_Os_Task_Master();
 80098fc:	f000 f86c 	bl	80099d8 <Rte_Task_Master>
}
 8009900:	bf00      	nop
 8009902:	bd80      	pop	{r7, pc}

08009904 <Os_Task_10ms>:

TASK(10ms)()
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 8009908:	f000 f886 	bl	8009a18 <Rte_Task_10ms>
}
 800990c:	bf00      	nop
 800990e:	bd80      	pop	{r7, pc}

08009910 <Os_Task_50ms>:

TASK(50ms)()
{
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 8009914:	f000 f894 	bl	8009a40 <Rte_Task_50ms>
}
 8009918:	bf00      	nop
 800991a:	bd80      	pop	{r7, pc}

0800991c <Os_Task_100ms>:

TASK(100ms)()
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 8009920:	f000 f894 	bl	8009a4c <Rte_Task_100ms>
}
 8009924:	bf00      	nop
 8009926:	bd80      	pop	{r7, pc}

08009928 <Os_Task_500ms>:

TASK(500ms)()
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 800992c:	f000 f89a 	bl	8009a64 <Rte_Task_500ms>
}
 8009930:	bf00      	nop
 8009932:	bd80      	pop	{r7, pc}

08009934 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
	Gpt_TIM3_Start_IT();
 8009938:	f7f8 ffd4 	bl	80028e4 <Gpt_TIM3_Start_IT>
}
 800993c:	bf00      	nop
 800993e:	bd80      	pop	{r7, pc}

08009940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009978 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009944:	480d      	ldr	r0, [pc, #52]	; (800997c <LoopForever+0x6>)
  ldr r1, =_edata
 8009946:	490e      	ldr	r1, [pc, #56]	; (8009980 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009948:	4a0e      	ldr	r2, [pc, #56]	; (8009984 <LoopForever+0xe>)
  movs r3, #0
 800994a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800994c:	e002      	b.n	8009954 <LoopCopyDataInit>

0800994e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800994e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009952:	3304      	adds	r3, #4

08009954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009958:	d3f9      	bcc.n	800994e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800995a:	4a0b      	ldr	r2, [pc, #44]	; (8009988 <LoopForever+0x12>)
  ldr r4, =_ebss
 800995c:	4c0b      	ldr	r4, [pc, #44]	; (800998c <LoopForever+0x16>)
  movs r3, #0
 800995e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009960:	e001      	b.n	8009966 <LoopFillZerobss>

08009962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009964:	3204      	adds	r2, #4

08009966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009968:	d3fb      	bcc.n	8009962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800996a:	f7fb ffdd 	bl	8005928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800996e:	f000 f911 	bl	8009b94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 8009972:	f7ff fe2c 	bl	80095ce <EcuM_Init>

08009976 <LoopForever>:

LoopForever:
    b LoopForever
 8009976:	e7fe      	b.n	8009976 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009978:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800997c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009980:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8009984:	0800a558 	.word	0x0800a558
  ldr r2, =_sbss
 8009988:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800998c:	20001494 	.word	0x20001494

08009990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009990:	e7fe      	b.n	8009990 <ADC1_2_IRQHandler>

08009992 <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 8009992:	b480      	push	{r7}
 8009994:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009996:	b672      	cpsid	i
}
 8009998:	bf00      	nop
	__disable_irq();
}
 800999a:	bf00      	nop
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr

080099a2 <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 80099a2:	b480      	push	{r7}
 80099a4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80099a6:	b662      	cpsie	i
}
 80099a8:	bf00      	nop
	__enable_irq();
}
 80099aa:	bf00      	nop
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr
	...

080099b4 <Rte_Init>:

void Rte_Init(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80099b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80099bc:	4804      	ldr	r0, [pc, #16]	; (80099d0 <Rte_Init+0x1c>)
 80099be:	f7f8 fd0d 	bl	80023dc <HAL_GPIO_ReadPin>
 80099c2:	4603      	mov	r3, r0
 80099c4:	461a      	mov	r2, r3
 80099c6:	4b03      	ldr	r3, [pc, #12]	; (80099d4 <Rte_Init+0x20>)
 80099c8:	701a      	strb	r2, [r3, #0]
}
 80099ca:	bf00      	nop
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	48000800 	.word	0x48000800
 80099d4:	2000146d 	.word	0x2000146d

080099d8 <Rte_Task_Master>:

/* Os Tasks*/
/* Init task */
void Rte_Task_Master(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 80099dc:	f7ff fdf1 	bl	80095c2 <EcuM_StartUp_Two>

	/* Bsw stacks init */
	NvM_Init();
 80099e0:	f7ff fb0a 	bl	8008ff8 <NvM_Init>
	Ea_Init();
 80099e4:	f7ff fae0 	bl	8008fa8 <Ea_Init>
	/* Rte init */
	Rte_Init();
 80099e8:	f7ff ffe4 	bl	80099b4 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 80099ec:	f7f7 f948 	bl	8000c80 <Cdd_Servo_Init>
	/* Asw init */
	Access_Init();
 80099f0:	f7f7 f83c 	bl	8000a6c <Access_Init>
	Engine_Init();
 80099f4:	f7f7 f868 	bl	8000ac8 <Engine_Init>
	Brakes_Init();
 80099f8:	f7f7 f84a 	bl	8000a90 <Brakes_Init>
	Steering_Init();
 80099fc:	f7f7 f92e 	bl	8000c5c <Steering_Init>
	Blinker_Init();
 8009a00:	f7f7 f8e4 	bl	8000bcc <Blinker_Init>
	FrontLights_Init();
 8009a04:	f7f7 f8f4 	bl	8000bf0 <FrontLights_Init>
	InteriorLights_Init();
 8009a08:	f7f7 f904 	bl	8000c14 <InteriorLights_Init>
	RearLights_Init();
 8009a0c:	f7f7 f914 	bl	8000c38 <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 8009a10:	f7f7 f8ae 	bl	8000b70 <LED_Init>

	/* Add new ASW init functions here */
}
 8009a14:	bf00      	nop
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 8009a1c:	f7ff fb26 	bl	800906c <BswM_MainFunction>
	NvM_MainFunction();
 8009a20:	f7ff faf6 	bl	8009010 <NvM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 8009a24:	f7f7 fb16 	bl	8001054 <Cdd_Servo_MainFunction>
	/* ASW */
	Access_MainFunction();
 8009a28:	f7f7 f82c 	bl	8000a84 <Access_MainFunction>
	Engine_MainFunction();
 8009a2c:	f7f7 f858 	bl	8000ae0 <Engine_MainFunction>
	Brakes_MainFunction();
 8009a30:	f7f7 f83a 	bl	8000aa8 <Brakes_MainFunction>
	Steering_MainFunction();
 8009a34:	f7f7 f91e 	bl	8000c74 <Steering_MainFunction>
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 8009a38:	f7f7 f8ac 	bl	8000b94 <LED_MainFunction>
}
 8009a3c:	bf00      	nop
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0

}
 8009a44:	bf00      	nop
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bc80      	pop	{r7}
 8009a4a:	4770      	bx	lr

08009a4c <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 8009a50:	f7f7 f8c8 	bl	8000be4 <Blinker_MainFunction>
	FrontLights_MainFunction();
 8009a54:	f7f7 f8d8 	bl	8000c08 <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 8009a58:	f7f7 f8e8 	bl	8000c2c <InteriorLights_MainFunction>
	RearLights_MainFunction();
 8009a5c:	f7f7 f8f8 	bl	8000c50 <RearLights_MainFunction>
}
 8009a60:	bf00      	nop
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
	/* UART test section. TODO: remove */
	sprintf(databuf, "%4d X", count);
 8009a68:	4b13      	ldr	r3, [pc, #76]	; (8009ab8 <Rte_Task_500ms+0x54>)
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	4913      	ldr	r1, [pc, #76]	; (8009abc <Rte_Task_500ms+0x58>)
 8009a70:	4813      	ldr	r0, [pc, #76]	; (8009ac0 <Rte_Task_500ms+0x5c>)
 8009a72:	f000 f8bb 	bl	8009bec <siprintf>
	databuf[strlen(databuf)] = 0;
 8009a76:	4812      	ldr	r0, [pc, #72]	; (8009ac0 <Rte_Task_500ms+0x5c>)
 8009a78:	f7f6 fbb2 	bl	80001e0 <strlen>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	4a10      	ldr	r2, [pc, #64]	; (8009ac0 <Rte_Task_500ms+0x5c>)
 8009a80:	2100      	movs	r1, #0
 8009a82:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 8009a84:	480e      	ldr	r0, [pc, #56]	; (8009ac0 <Rte_Task_500ms+0x5c>)
 8009a86:	f7f6 fbab 	bl	80001e0 <strlen>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a92:	490b      	ldr	r1, [pc, #44]	; (8009ac0 <Rte_Task_500ms+0x5c>)
 8009a94:	480b      	ldr	r0, [pc, #44]	; (8009ac4 <Rte_Task_500ms+0x60>)
 8009a96:	f7fe fac7 	bl	8008028 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 8009a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	4909      	ldr	r1, [pc, #36]	; (8009ac8 <Rte_Task_500ms+0x64>)
 8009aa2:	4808      	ldr	r0, [pc, #32]	; (8009ac4 <Rte_Task_500ms+0x60>)
 8009aa4:	f7fe fac0 	bl	8008028 <HAL_UART_Transmit>

	count++;
 8009aa8:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <Rte_Task_500ms+0x54>)
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	3301      	adds	r3, #1
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	4b01      	ldr	r3, [pc, #4]	; (8009ab8 <Rte_Task_500ms+0x54>)
 8009ab2:	801a      	strh	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20001480 	.word	0x20001480
 8009abc:	0800a4dc 	.word	0x0800a4dc
 8009ac0:	20001470 	.word	0x20001470
 8009ac4:	200003e8 	.word	0x200003e8
 8009ac8:	20000010 	.word	0x20000010

08009acc <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 8009ad4:	4b04      	ldr	r3, [pc, #16]	; (8009ae8 <Rte_Read_PC13_Pin_State+0x1c>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	701a      	strb	r2, [r3, #0]
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr
 8009ae8:	2000146d 	.word	0x2000146d

08009aec <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 8009af6:	4a04      	ldr	r2, [pc, #16]	; (8009b08 <Rte_Write_PC13_Pin_State+0x1c>)
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	7013      	strb	r3, [r2, #0]
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bc80      	pop	{r7}
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	2000146d 	.word	0x2000146d

08009b0c <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 8009b16:	88fb      	ldrh	r3, [r7, #6]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7f7 fa7f 	bl	800101c <Cdd_Servo_RawMove>
}
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <Rte_Read_NvM_Block_0>:

void Rte_Read_NvM_Block_0(uint8 *data)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b082      	sub	sp, #8
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
	NvM_ReadBlock(0, data);
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	2000      	movs	r0, #0
 8009b32:	f7ff fa73 	bl	800901c <NvM_ReadBlock>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 8009b4a:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <Rte_Write_AN0_Voltage_u16+0x1c>)
 8009b4c:	88fb      	ldrh	r3, [r7, #6]
 8009b4e:	8013      	strh	r3, [r2, #0]
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bc80      	pop	{r7}
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	2000146e 	.word	0x2000146e

08009b60 <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 8009b68:	f7ff ff13 	bl	8009992 <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 8009b6c:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <Rte_Read_AN0_Voltage_u16+0x24>)
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 8009b76:	f7ff ff14 	bl	80099a2 <Rte_Call_LeaveProtectedSection>
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	2000146e 	.word	0x2000146e

08009b88 <__errno>:
 8009b88:	4b01      	ldr	r3, [pc, #4]	; (8009b90 <__errno+0x8>)
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20000014 	.word	0x20000014

08009b94 <__libc_init_array>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	4d0d      	ldr	r5, [pc, #52]	; (8009bcc <__libc_init_array+0x38>)
 8009b98:	4c0d      	ldr	r4, [pc, #52]	; (8009bd0 <__libc_init_array+0x3c>)
 8009b9a:	1b64      	subs	r4, r4, r5
 8009b9c:	10a4      	asrs	r4, r4, #2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	42a6      	cmp	r6, r4
 8009ba2:	d109      	bne.n	8009bb8 <__libc_init_array+0x24>
 8009ba4:	4d0b      	ldr	r5, [pc, #44]	; (8009bd4 <__libc_init_array+0x40>)
 8009ba6:	4c0c      	ldr	r4, [pc, #48]	; (8009bd8 <__libc_init_array+0x44>)
 8009ba8:	f000 fc8c 	bl	800a4c4 <_init>
 8009bac:	1b64      	subs	r4, r4, r5
 8009bae:	10a4      	asrs	r4, r4, #2
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	42a6      	cmp	r6, r4
 8009bb4:	d105      	bne.n	8009bc2 <__libc_init_array+0x2e>
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbc:	4798      	blx	r3
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	e7ee      	b.n	8009ba0 <__libc_init_array+0xc>
 8009bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc6:	4798      	blx	r3
 8009bc8:	3601      	adds	r6, #1
 8009bca:	e7f2      	b.n	8009bb2 <__libc_init_array+0x1e>
 8009bcc:	0800a550 	.word	0x0800a550
 8009bd0:	0800a550 	.word	0x0800a550
 8009bd4:	0800a550 	.word	0x0800a550
 8009bd8:	0800a554 	.word	0x0800a554

08009bdc <memset>:
 8009bdc:	4402      	add	r2, r0
 8009bde:	4603      	mov	r3, r0
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d100      	bne.n	8009be6 <memset+0xa>
 8009be4:	4770      	bx	lr
 8009be6:	f803 1b01 	strb.w	r1, [r3], #1
 8009bea:	e7f9      	b.n	8009be0 <memset+0x4>

08009bec <siprintf>:
 8009bec:	b40e      	push	{r1, r2, r3}
 8009bee:	b500      	push	{lr}
 8009bf0:	b09c      	sub	sp, #112	; 0x70
 8009bf2:	ab1d      	add	r3, sp, #116	; 0x74
 8009bf4:	9002      	str	r0, [sp, #8]
 8009bf6:	9006      	str	r0, [sp, #24]
 8009bf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bfc:	4809      	ldr	r0, [pc, #36]	; (8009c24 <siprintf+0x38>)
 8009bfe:	9107      	str	r1, [sp, #28]
 8009c00:	9104      	str	r1, [sp, #16]
 8009c02:	4909      	ldr	r1, [pc, #36]	; (8009c28 <siprintf+0x3c>)
 8009c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c08:	9105      	str	r1, [sp, #20]
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	a902      	add	r1, sp, #8
 8009c10:	f000 f868 	bl	8009ce4 <_svfiprintf_r>
 8009c14:	9b02      	ldr	r3, [sp, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
 8009c1a:	b01c      	add	sp, #112	; 0x70
 8009c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c20:	b003      	add	sp, #12
 8009c22:	4770      	bx	lr
 8009c24:	20000014 	.word	0x20000014
 8009c28:	ffff0208 	.word	0xffff0208

08009c2c <__ssputs_r>:
 8009c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	688e      	ldr	r6, [r1, #8]
 8009c32:	429e      	cmp	r6, r3
 8009c34:	4682      	mov	sl, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4690      	mov	r8, r2
 8009c3a:	461f      	mov	r7, r3
 8009c3c:	d838      	bhi.n	8009cb0 <__ssputs_r+0x84>
 8009c3e:	898a      	ldrh	r2, [r1, #12]
 8009c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c44:	d032      	beq.n	8009cac <__ssputs_r+0x80>
 8009c46:	6825      	ldr	r5, [r4, #0]
 8009c48:	6909      	ldr	r1, [r1, #16]
 8009c4a:	eba5 0901 	sub.w	r9, r5, r1
 8009c4e:	6965      	ldr	r5, [r4, #20]
 8009c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c58:	3301      	adds	r3, #1
 8009c5a:	444b      	add	r3, r9
 8009c5c:	106d      	asrs	r5, r5, #1
 8009c5e:	429d      	cmp	r5, r3
 8009c60:	bf38      	it	cc
 8009c62:	461d      	movcc	r5, r3
 8009c64:	0553      	lsls	r3, r2, #21
 8009c66:	d531      	bpl.n	8009ccc <__ssputs_r+0xa0>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	f000 fb61 	bl	800a330 <_malloc_r>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	b950      	cbnz	r0, 8009c88 <__ssputs_r+0x5c>
 8009c72:	230c      	movs	r3, #12
 8009c74:	f8ca 3000 	str.w	r3, [sl]
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	6921      	ldr	r1, [r4, #16]
 8009c8a:	464a      	mov	r2, r9
 8009c8c:	f000 fabe 	bl	800a20c <memcpy>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	6126      	str	r6, [r4, #16]
 8009c9e:	6165      	str	r5, [r4, #20]
 8009ca0:	444e      	add	r6, r9
 8009ca2:	eba5 0509 	sub.w	r5, r5, r9
 8009ca6:	6026      	str	r6, [r4, #0]
 8009ca8:	60a5      	str	r5, [r4, #8]
 8009caa:	463e      	mov	r6, r7
 8009cac:	42be      	cmp	r6, r7
 8009cae:	d900      	bls.n	8009cb2 <__ssputs_r+0x86>
 8009cb0:	463e      	mov	r6, r7
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	4641      	mov	r1, r8
 8009cb8:	f000 fab6 	bl	800a228 <memmove>
 8009cbc:	68a3      	ldr	r3, [r4, #8]
 8009cbe:	1b9b      	subs	r3, r3, r6
 8009cc0:	60a3      	str	r3, [r4, #8]
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	4433      	add	r3, r6
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	2000      	movs	r0, #0
 8009cca:	e7db      	b.n	8009c84 <__ssputs_r+0x58>
 8009ccc:	462a      	mov	r2, r5
 8009cce:	f000 fba3 	bl	800a418 <_realloc_r>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d1e1      	bne.n	8009c9c <__ssputs_r+0x70>
 8009cd8:	6921      	ldr	r1, [r4, #16]
 8009cda:	4650      	mov	r0, sl
 8009cdc:	f000 fabe 	bl	800a25c <_free_r>
 8009ce0:	e7c7      	b.n	8009c72 <__ssputs_r+0x46>
	...

08009ce4 <_svfiprintf_r>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	4698      	mov	r8, r3
 8009cea:	898b      	ldrh	r3, [r1, #12]
 8009cec:	061b      	lsls	r3, r3, #24
 8009cee:	b09d      	sub	sp, #116	; 0x74
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	d50e      	bpl.n	8009d16 <_svfiprintf_r+0x32>
 8009cf8:	690b      	ldr	r3, [r1, #16]
 8009cfa:	b963      	cbnz	r3, 8009d16 <_svfiprintf_r+0x32>
 8009cfc:	2140      	movs	r1, #64	; 0x40
 8009cfe:	f000 fb17 	bl	800a330 <_malloc_r>
 8009d02:	6028      	str	r0, [r5, #0]
 8009d04:	6128      	str	r0, [r5, #16]
 8009d06:	b920      	cbnz	r0, 8009d12 <_svfiprintf_r+0x2e>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	e0d1      	b.n	8009eb6 <_svfiprintf_r+0x1d2>
 8009d12:	2340      	movs	r3, #64	; 0x40
 8009d14:	616b      	str	r3, [r5, #20]
 8009d16:	2300      	movs	r3, #0
 8009d18:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1a:	2320      	movs	r3, #32
 8009d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d24:	2330      	movs	r3, #48	; 0x30
 8009d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ed0 <_svfiprintf_r+0x1ec>
 8009d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d2e:	f04f 0901 	mov.w	r9, #1
 8009d32:	4623      	mov	r3, r4
 8009d34:	469a      	mov	sl, r3
 8009d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3a:	b10a      	cbz	r2, 8009d40 <_svfiprintf_r+0x5c>
 8009d3c:	2a25      	cmp	r2, #37	; 0x25
 8009d3e:	d1f9      	bne.n	8009d34 <_svfiprintf_r+0x50>
 8009d40:	ebba 0b04 	subs.w	fp, sl, r4
 8009d44:	d00b      	beq.n	8009d5e <_svfiprintf_r+0x7a>
 8009d46:	465b      	mov	r3, fp
 8009d48:	4622      	mov	r2, r4
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	f7ff ff6d 	bl	8009c2c <__ssputs_r>
 8009d52:	3001      	adds	r0, #1
 8009d54:	f000 80aa 	beq.w	8009eac <_svfiprintf_r+0x1c8>
 8009d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d5a:	445a      	add	r2, fp
 8009d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 80a2 	beq.w	8009eac <_svfiprintf_r+0x1c8>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d72:	f10a 0a01 	add.w	sl, sl, #1
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	9307      	str	r3, [sp, #28]
 8009d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d80:	4654      	mov	r4, sl
 8009d82:	2205      	movs	r2, #5
 8009d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d88:	4851      	ldr	r0, [pc, #324]	; (8009ed0 <_svfiprintf_r+0x1ec>)
 8009d8a:	f7f6 fa31 	bl	80001f0 <memchr>
 8009d8e:	9a04      	ldr	r2, [sp, #16]
 8009d90:	b9d8      	cbnz	r0, 8009dca <_svfiprintf_r+0xe6>
 8009d92:	06d0      	lsls	r0, r2, #27
 8009d94:	bf44      	itt	mi
 8009d96:	2320      	movmi	r3, #32
 8009d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9c:	0711      	lsls	r1, r2, #28
 8009d9e:	bf44      	itt	mi
 8009da0:	232b      	movmi	r3, #43	; 0x2b
 8009da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da6:	f89a 3000 	ldrb.w	r3, [sl]
 8009daa:	2b2a      	cmp	r3, #42	; 0x2a
 8009dac:	d015      	beq.n	8009dda <_svfiprintf_r+0xf6>
 8009dae:	9a07      	ldr	r2, [sp, #28]
 8009db0:	4654      	mov	r4, sl
 8009db2:	2000      	movs	r0, #0
 8009db4:	f04f 0c0a 	mov.w	ip, #10
 8009db8:	4621      	mov	r1, r4
 8009dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dbe:	3b30      	subs	r3, #48	; 0x30
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d94e      	bls.n	8009e62 <_svfiprintf_r+0x17e>
 8009dc4:	b1b0      	cbz	r0, 8009df4 <_svfiprintf_r+0x110>
 8009dc6:	9207      	str	r2, [sp, #28]
 8009dc8:	e014      	b.n	8009df4 <_svfiprintf_r+0x110>
 8009dca:	eba0 0308 	sub.w	r3, r0, r8
 8009dce:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	46a2      	mov	sl, r4
 8009dd8:	e7d2      	b.n	8009d80 <_svfiprintf_r+0x9c>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	1d19      	adds	r1, r3, #4
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	9103      	str	r1, [sp, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	bfbb      	ittet	lt
 8009de6:	425b      	neglt	r3, r3
 8009de8:	f042 0202 	orrlt.w	r2, r2, #2
 8009dec:	9307      	strge	r3, [sp, #28]
 8009dee:	9307      	strlt	r3, [sp, #28]
 8009df0:	bfb8      	it	lt
 8009df2:	9204      	strlt	r2, [sp, #16]
 8009df4:	7823      	ldrb	r3, [r4, #0]
 8009df6:	2b2e      	cmp	r3, #46	; 0x2e
 8009df8:	d10c      	bne.n	8009e14 <_svfiprintf_r+0x130>
 8009dfa:	7863      	ldrb	r3, [r4, #1]
 8009dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dfe:	d135      	bne.n	8009e6c <_svfiprintf_r+0x188>
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	1d1a      	adds	r2, r3, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	9203      	str	r2, [sp, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bfb8      	it	lt
 8009e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e10:	3402      	adds	r4, #2
 8009e12:	9305      	str	r3, [sp, #20]
 8009e14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009ed4 <_svfiprintf_r+0x1f0>
 8009e18:	7821      	ldrb	r1, [r4, #0]
 8009e1a:	2203      	movs	r2, #3
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	f7f6 f9e7 	bl	80001f0 <memchr>
 8009e22:	b140      	cbz	r0, 8009e36 <_svfiprintf_r+0x152>
 8009e24:	2340      	movs	r3, #64	; 0x40
 8009e26:	eba0 000a 	sub.w	r0, r0, sl
 8009e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	4303      	orrs	r3, r0
 8009e32:	3401      	adds	r4, #1
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3a:	4827      	ldr	r0, [pc, #156]	; (8009ed8 <_svfiprintf_r+0x1f4>)
 8009e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e40:	2206      	movs	r2, #6
 8009e42:	f7f6 f9d5 	bl	80001f0 <memchr>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d038      	beq.n	8009ebc <_svfiprintf_r+0x1d8>
 8009e4a:	4b24      	ldr	r3, [pc, #144]	; (8009edc <_svfiprintf_r+0x1f8>)
 8009e4c:	bb1b      	cbnz	r3, 8009e96 <_svfiprintf_r+0x1b2>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	3307      	adds	r3, #7
 8009e52:	f023 0307 	bic.w	r3, r3, #7
 8009e56:	3308      	adds	r3, #8
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5c:	4433      	add	r3, r6
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	e767      	b.n	8009d32 <_svfiprintf_r+0x4e>
 8009e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e66:	460c      	mov	r4, r1
 8009e68:	2001      	movs	r0, #1
 8009e6a:	e7a5      	b.n	8009db8 <_svfiprintf_r+0xd4>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	3401      	adds	r4, #1
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	4619      	mov	r1, r3
 8009e74:	f04f 0c0a 	mov.w	ip, #10
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e7e:	3a30      	subs	r2, #48	; 0x30
 8009e80:	2a09      	cmp	r2, #9
 8009e82:	d903      	bls.n	8009e8c <_svfiprintf_r+0x1a8>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0c5      	beq.n	8009e14 <_svfiprintf_r+0x130>
 8009e88:	9105      	str	r1, [sp, #20]
 8009e8a:	e7c3      	b.n	8009e14 <_svfiprintf_r+0x130>
 8009e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e90:	4604      	mov	r4, r0
 8009e92:	2301      	movs	r3, #1
 8009e94:	e7f0      	b.n	8009e78 <_svfiprintf_r+0x194>
 8009e96:	ab03      	add	r3, sp, #12
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	462a      	mov	r2, r5
 8009e9c:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <_svfiprintf_r+0x1fc>)
 8009e9e:	a904      	add	r1, sp, #16
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f3af 8000 	nop.w
 8009ea6:	1c42      	adds	r2, r0, #1
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	d1d6      	bne.n	8009e5a <_svfiprintf_r+0x176>
 8009eac:	89ab      	ldrh	r3, [r5, #12]
 8009eae:	065b      	lsls	r3, r3, #25
 8009eb0:	f53f af2c 	bmi.w	8009d0c <_svfiprintf_r+0x28>
 8009eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eb6:	b01d      	add	sp, #116	; 0x74
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	ab03      	add	r3, sp, #12
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	462a      	mov	r2, r5
 8009ec2:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <_svfiprintf_r+0x1fc>)
 8009ec4:	a904      	add	r1, sp, #16
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	f000 f87a 	bl	8009fc0 <_printf_i>
 8009ecc:	e7eb      	b.n	8009ea6 <_svfiprintf_r+0x1c2>
 8009ece:	bf00      	nop
 8009ed0:	0800a51c 	.word	0x0800a51c
 8009ed4:	0800a522 	.word	0x0800a522
 8009ed8:	0800a526 	.word	0x0800a526
 8009edc:	00000000 	.word	0x00000000
 8009ee0:	08009c2d 	.word	0x08009c2d

08009ee4 <_printf_common>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	4616      	mov	r6, r2
 8009eea:	4699      	mov	r9, r3
 8009eec:	688a      	ldr	r2, [r1, #8]
 8009eee:	690b      	ldr	r3, [r1, #16]
 8009ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	bfb8      	it	lt
 8009ef8:	4613      	movlt	r3, r2
 8009efa:	6033      	str	r3, [r6, #0]
 8009efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f00:	4607      	mov	r7, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	b10a      	cbz	r2, 8009f0a <_printf_common+0x26>
 8009f06:	3301      	adds	r3, #1
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	0699      	lsls	r1, r3, #26
 8009f0e:	bf42      	ittt	mi
 8009f10:	6833      	ldrmi	r3, [r6, #0]
 8009f12:	3302      	addmi	r3, #2
 8009f14:	6033      	strmi	r3, [r6, #0]
 8009f16:	6825      	ldr	r5, [r4, #0]
 8009f18:	f015 0506 	ands.w	r5, r5, #6
 8009f1c:	d106      	bne.n	8009f2c <_printf_common+0x48>
 8009f1e:	f104 0a19 	add.w	sl, r4, #25
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	6832      	ldr	r2, [r6, #0]
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc26      	bgt.n	8009f7a <_printf_common+0x96>
 8009f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f30:	1e13      	subs	r3, r2, #0
 8009f32:	6822      	ldr	r2, [r4, #0]
 8009f34:	bf18      	it	ne
 8009f36:	2301      	movne	r3, #1
 8009f38:	0692      	lsls	r2, r2, #26
 8009f3a:	d42b      	bmi.n	8009f94 <_printf_common+0xb0>
 8009f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f40:	4649      	mov	r1, r9
 8009f42:	4638      	mov	r0, r7
 8009f44:	47c0      	blx	r8
 8009f46:	3001      	adds	r0, #1
 8009f48:	d01e      	beq.n	8009f88 <_printf_common+0xa4>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	68e5      	ldr	r5, [r4, #12]
 8009f4e:	6832      	ldr	r2, [r6, #0]
 8009f50:	f003 0306 	and.w	r3, r3, #6
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	bf08      	it	eq
 8009f58:	1aad      	subeq	r5, r5, r2
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	6922      	ldr	r2, [r4, #16]
 8009f5e:	bf0c      	ite	eq
 8009f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f64:	2500      	movne	r5, #0
 8009f66:	4293      	cmp	r3, r2
 8009f68:	bfc4      	itt	gt
 8009f6a:	1a9b      	subgt	r3, r3, r2
 8009f6c:	18ed      	addgt	r5, r5, r3
 8009f6e:	2600      	movs	r6, #0
 8009f70:	341a      	adds	r4, #26
 8009f72:	42b5      	cmp	r5, r6
 8009f74:	d11a      	bne.n	8009fac <_printf_common+0xc8>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e008      	b.n	8009f8c <_printf_common+0xa8>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4652      	mov	r2, sl
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4638      	mov	r0, r7
 8009f82:	47c0      	blx	r8
 8009f84:	3001      	adds	r0, #1
 8009f86:	d103      	bne.n	8009f90 <_printf_common+0xac>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f90:	3501      	adds	r5, #1
 8009f92:	e7c6      	b.n	8009f22 <_printf_common+0x3e>
 8009f94:	18e1      	adds	r1, r4, r3
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	2030      	movs	r0, #48	; 0x30
 8009f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f9e:	4422      	add	r2, r4
 8009fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fa8:	3302      	adds	r3, #2
 8009faa:	e7c7      	b.n	8009f3c <_printf_common+0x58>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4622      	mov	r2, r4
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	47c0      	blx	r8
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d0e6      	beq.n	8009f88 <_printf_common+0xa4>
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7d9      	b.n	8009f72 <_printf_common+0x8e>
	...

08009fc0 <_printf_i>:
 8009fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc4:	7e0f      	ldrb	r7, [r1, #24]
 8009fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc8:	2f78      	cmp	r7, #120	; 0x78
 8009fca:	4691      	mov	r9, r2
 8009fcc:	4680      	mov	r8, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	469a      	mov	sl, r3
 8009fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fd6:	d807      	bhi.n	8009fe8 <_printf_i+0x28>
 8009fd8:	2f62      	cmp	r7, #98	; 0x62
 8009fda:	d80a      	bhi.n	8009ff2 <_printf_i+0x32>
 8009fdc:	2f00      	cmp	r7, #0
 8009fde:	f000 80d8 	beq.w	800a192 <_printf_i+0x1d2>
 8009fe2:	2f58      	cmp	r7, #88	; 0x58
 8009fe4:	f000 80a3 	beq.w	800a12e <_printf_i+0x16e>
 8009fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ff0:	e03a      	b.n	800a068 <_printf_i+0xa8>
 8009ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ff6:	2b15      	cmp	r3, #21
 8009ff8:	d8f6      	bhi.n	8009fe8 <_printf_i+0x28>
 8009ffa:	a101      	add	r1, pc, #4	; (adr r1, 800a000 <_printf_i+0x40>)
 8009ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a06d 	.word	0x0800a06d
 800a008:	08009fe9 	.word	0x08009fe9
 800a00c:	08009fe9 	.word	0x08009fe9
 800a010:	08009fe9 	.word	0x08009fe9
 800a014:	08009fe9 	.word	0x08009fe9
 800a018:	0800a06d 	.word	0x0800a06d
 800a01c:	08009fe9 	.word	0x08009fe9
 800a020:	08009fe9 	.word	0x08009fe9
 800a024:	08009fe9 	.word	0x08009fe9
 800a028:	08009fe9 	.word	0x08009fe9
 800a02c:	0800a179 	.word	0x0800a179
 800a030:	0800a09d 	.word	0x0800a09d
 800a034:	0800a15b 	.word	0x0800a15b
 800a038:	08009fe9 	.word	0x08009fe9
 800a03c:	08009fe9 	.word	0x08009fe9
 800a040:	0800a19b 	.word	0x0800a19b
 800a044:	08009fe9 	.word	0x08009fe9
 800a048:	0800a09d 	.word	0x0800a09d
 800a04c:	08009fe9 	.word	0x08009fe9
 800a050:	08009fe9 	.word	0x08009fe9
 800a054:	0800a163 	.word	0x0800a163
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	1d1a      	adds	r2, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	602a      	str	r2, [r5, #0]
 800a060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a068:	2301      	movs	r3, #1
 800a06a:	e0a3      	b.n	800a1b4 <_printf_i+0x1f4>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	6829      	ldr	r1, [r5, #0]
 800a070:	0606      	lsls	r6, r0, #24
 800a072:	f101 0304 	add.w	r3, r1, #4
 800a076:	d50a      	bpl.n	800a08e <_printf_i+0xce>
 800a078:	680e      	ldr	r6, [r1, #0]
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	2e00      	cmp	r6, #0
 800a07e:	da03      	bge.n	800a088 <_printf_i+0xc8>
 800a080:	232d      	movs	r3, #45	; 0x2d
 800a082:	4276      	negs	r6, r6
 800a084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a088:	485e      	ldr	r0, [pc, #376]	; (800a204 <_printf_i+0x244>)
 800a08a:	230a      	movs	r3, #10
 800a08c:	e019      	b.n	800a0c2 <_printf_i+0x102>
 800a08e:	680e      	ldr	r6, [r1, #0]
 800a090:	602b      	str	r3, [r5, #0]
 800a092:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a096:	bf18      	it	ne
 800a098:	b236      	sxthne	r6, r6
 800a09a:	e7ef      	b.n	800a07c <_printf_i+0xbc>
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	6820      	ldr	r0, [r4, #0]
 800a0a0:	1d19      	adds	r1, r3, #4
 800a0a2:	6029      	str	r1, [r5, #0]
 800a0a4:	0601      	lsls	r1, r0, #24
 800a0a6:	d501      	bpl.n	800a0ac <_printf_i+0xec>
 800a0a8:	681e      	ldr	r6, [r3, #0]
 800a0aa:	e002      	b.n	800a0b2 <_printf_i+0xf2>
 800a0ac:	0646      	lsls	r6, r0, #25
 800a0ae:	d5fb      	bpl.n	800a0a8 <_printf_i+0xe8>
 800a0b0:	881e      	ldrh	r6, [r3, #0]
 800a0b2:	4854      	ldr	r0, [pc, #336]	; (800a204 <_printf_i+0x244>)
 800a0b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a0b6:	bf0c      	ite	eq
 800a0b8:	2308      	moveq	r3, #8
 800a0ba:	230a      	movne	r3, #10
 800a0bc:	2100      	movs	r1, #0
 800a0be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0c2:	6865      	ldr	r5, [r4, #4]
 800a0c4:	60a5      	str	r5, [r4, #8]
 800a0c6:	2d00      	cmp	r5, #0
 800a0c8:	bfa2      	ittt	ge
 800a0ca:	6821      	ldrge	r1, [r4, #0]
 800a0cc:	f021 0104 	bicge.w	r1, r1, #4
 800a0d0:	6021      	strge	r1, [r4, #0]
 800a0d2:	b90e      	cbnz	r6, 800a0d8 <_printf_i+0x118>
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	d04d      	beq.n	800a174 <_printf_i+0x1b4>
 800a0d8:	4615      	mov	r5, r2
 800a0da:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0de:	fb03 6711 	mls	r7, r3, r1, r6
 800a0e2:	5dc7      	ldrb	r7, [r0, r7]
 800a0e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0e8:	4637      	mov	r7, r6
 800a0ea:	42bb      	cmp	r3, r7
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	d9f4      	bls.n	800a0da <_printf_i+0x11a>
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d10b      	bne.n	800a10c <_printf_i+0x14c>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	07de      	lsls	r6, r3, #31
 800a0f8:	d508      	bpl.n	800a10c <_printf_i+0x14c>
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	4299      	cmp	r1, r3
 800a100:	bfde      	ittt	le
 800a102:	2330      	movle	r3, #48	; 0x30
 800a104:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a10c:	1b52      	subs	r2, r2, r5
 800a10e:	6122      	str	r2, [r4, #16]
 800a110:	f8cd a000 	str.w	sl, [sp]
 800a114:	464b      	mov	r3, r9
 800a116:	aa03      	add	r2, sp, #12
 800a118:	4621      	mov	r1, r4
 800a11a:	4640      	mov	r0, r8
 800a11c:	f7ff fee2 	bl	8009ee4 <_printf_common>
 800a120:	3001      	adds	r0, #1
 800a122:	d14c      	bne.n	800a1be <_printf_i+0x1fe>
 800a124:	f04f 30ff 	mov.w	r0, #4294967295
 800a128:	b004      	add	sp, #16
 800a12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12e:	4835      	ldr	r0, [pc, #212]	; (800a204 <_printf_i+0x244>)
 800a130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a134:	6829      	ldr	r1, [r5, #0]
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	f851 6b04 	ldr.w	r6, [r1], #4
 800a13c:	6029      	str	r1, [r5, #0]
 800a13e:	061d      	lsls	r5, r3, #24
 800a140:	d514      	bpl.n	800a16c <_printf_i+0x1ac>
 800a142:	07df      	lsls	r7, r3, #31
 800a144:	bf44      	itt	mi
 800a146:	f043 0320 	orrmi.w	r3, r3, #32
 800a14a:	6023      	strmi	r3, [r4, #0]
 800a14c:	b91e      	cbnz	r6, 800a156 <_printf_i+0x196>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	f023 0320 	bic.w	r3, r3, #32
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	2310      	movs	r3, #16
 800a158:	e7b0      	b.n	800a0bc <_printf_i+0xfc>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	f043 0320 	orr.w	r3, r3, #32
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	2378      	movs	r3, #120	; 0x78
 800a164:	4828      	ldr	r0, [pc, #160]	; (800a208 <_printf_i+0x248>)
 800a166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a16a:	e7e3      	b.n	800a134 <_printf_i+0x174>
 800a16c:	0659      	lsls	r1, r3, #25
 800a16e:	bf48      	it	mi
 800a170:	b2b6      	uxthmi	r6, r6
 800a172:	e7e6      	b.n	800a142 <_printf_i+0x182>
 800a174:	4615      	mov	r5, r2
 800a176:	e7bb      	b.n	800a0f0 <_printf_i+0x130>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	6826      	ldr	r6, [r4, #0]
 800a17c:	6961      	ldr	r1, [r4, #20]
 800a17e:	1d18      	adds	r0, r3, #4
 800a180:	6028      	str	r0, [r5, #0]
 800a182:	0635      	lsls	r5, r6, #24
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	d501      	bpl.n	800a18c <_printf_i+0x1cc>
 800a188:	6019      	str	r1, [r3, #0]
 800a18a:	e002      	b.n	800a192 <_printf_i+0x1d2>
 800a18c:	0670      	lsls	r0, r6, #25
 800a18e:	d5fb      	bpl.n	800a188 <_printf_i+0x1c8>
 800a190:	8019      	strh	r1, [r3, #0]
 800a192:	2300      	movs	r3, #0
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	4615      	mov	r5, r2
 800a198:	e7ba      	b.n	800a110 <_printf_i+0x150>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	1d1a      	adds	r2, r3, #4
 800a19e:	602a      	str	r2, [r5, #0]
 800a1a0:	681d      	ldr	r5, [r3, #0]
 800a1a2:	6862      	ldr	r2, [r4, #4]
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f7f6 f822 	bl	80001f0 <memchr>
 800a1ac:	b108      	cbz	r0, 800a1b2 <_printf_i+0x1f2>
 800a1ae:	1b40      	subs	r0, r0, r5
 800a1b0:	6060      	str	r0, [r4, #4]
 800a1b2:	6863      	ldr	r3, [r4, #4]
 800a1b4:	6123      	str	r3, [r4, #16]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1bc:	e7a8      	b.n	800a110 <_printf_i+0x150>
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	47d0      	blx	sl
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d0ab      	beq.n	800a124 <_printf_i+0x164>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	079b      	lsls	r3, r3, #30
 800a1d0:	d413      	bmi.n	800a1fa <_printf_i+0x23a>
 800a1d2:	68e0      	ldr	r0, [r4, #12]
 800a1d4:	9b03      	ldr	r3, [sp, #12]
 800a1d6:	4298      	cmp	r0, r3
 800a1d8:	bfb8      	it	lt
 800a1da:	4618      	movlt	r0, r3
 800a1dc:	e7a4      	b.n	800a128 <_printf_i+0x168>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	47d0      	blx	sl
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d09b      	beq.n	800a124 <_printf_i+0x164>
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	68e3      	ldr	r3, [r4, #12]
 800a1f0:	9903      	ldr	r1, [sp, #12]
 800a1f2:	1a5b      	subs	r3, r3, r1
 800a1f4:	42ab      	cmp	r3, r5
 800a1f6:	dcf2      	bgt.n	800a1de <_printf_i+0x21e>
 800a1f8:	e7eb      	b.n	800a1d2 <_printf_i+0x212>
 800a1fa:	2500      	movs	r5, #0
 800a1fc:	f104 0619 	add.w	r6, r4, #25
 800a200:	e7f5      	b.n	800a1ee <_printf_i+0x22e>
 800a202:	bf00      	nop
 800a204:	0800a52d 	.word	0x0800a52d
 800a208:	0800a53e 	.word	0x0800a53e

0800a20c <memcpy>:
 800a20c:	440a      	add	r2, r1
 800a20e:	4291      	cmp	r1, r2
 800a210:	f100 33ff 	add.w	r3, r0, #4294967295
 800a214:	d100      	bne.n	800a218 <memcpy+0xc>
 800a216:	4770      	bx	lr
 800a218:	b510      	push	{r4, lr}
 800a21a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a222:	4291      	cmp	r1, r2
 800a224:	d1f9      	bne.n	800a21a <memcpy+0xe>
 800a226:	bd10      	pop	{r4, pc}

0800a228 <memmove>:
 800a228:	4288      	cmp	r0, r1
 800a22a:	b510      	push	{r4, lr}
 800a22c:	eb01 0402 	add.w	r4, r1, r2
 800a230:	d902      	bls.n	800a238 <memmove+0x10>
 800a232:	4284      	cmp	r4, r0
 800a234:	4623      	mov	r3, r4
 800a236:	d807      	bhi.n	800a248 <memmove+0x20>
 800a238:	1e43      	subs	r3, r0, #1
 800a23a:	42a1      	cmp	r1, r4
 800a23c:	d008      	beq.n	800a250 <memmove+0x28>
 800a23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a246:	e7f8      	b.n	800a23a <memmove+0x12>
 800a248:	4402      	add	r2, r0
 800a24a:	4601      	mov	r1, r0
 800a24c:	428a      	cmp	r2, r1
 800a24e:	d100      	bne.n	800a252 <memmove+0x2a>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a25a:	e7f7      	b.n	800a24c <memmove+0x24>

0800a25c <_free_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4605      	mov	r5, r0
 800a260:	2900      	cmp	r1, #0
 800a262:	d041      	beq.n	800a2e8 <_free_r+0x8c>
 800a264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a268:	1f0c      	subs	r4, r1, #4
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bfb8      	it	lt
 800a26e:	18e4      	addlt	r4, r4, r3
 800a270:	f000 f912 	bl	800a498 <__malloc_lock>
 800a274:	4a1d      	ldr	r2, [pc, #116]	; (800a2ec <_free_r+0x90>)
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	b933      	cbnz	r3, 800a288 <_free_r+0x2c>
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	6014      	str	r4, [r2, #0]
 800a27e:	4628      	mov	r0, r5
 800a280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a284:	f000 b90e 	b.w	800a4a4 <__malloc_unlock>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d908      	bls.n	800a29e <_free_r+0x42>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	1821      	adds	r1, r4, r0
 800a290:	428b      	cmp	r3, r1
 800a292:	bf01      	itttt	eq
 800a294:	6819      	ldreq	r1, [r3, #0]
 800a296:	685b      	ldreq	r3, [r3, #4]
 800a298:	1809      	addeq	r1, r1, r0
 800a29a:	6021      	streq	r1, [r4, #0]
 800a29c:	e7ed      	b.n	800a27a <_free_r+0x1e>
 800a29e:	461a      	mov	r2, r3
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	b10b      	cbz	r3, 800a2a8 <_free_r+0x4c>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d9fa      	bls.n	800a29e <_free_r+0x42>
 800a2a8:	6811      	ldr	r1, [r2, #0]
 800a2aa:	1850      	adds	r0, r2, r1
 800a2ac:	42a0      	cmp	r0, r4
 800a2ae:	d10b      	bne.n	800a2c8 <_free_r+0x6c>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	4401      	add	r1, r0
 800a2b4:	1850      	adds	r0, r2, r1
 800a2b6:	4283      	cmp	r3, r0
 800a2b8:	6011      	str	r1, [r2, #0]
 800a2ba:	d1e0      	bne.n	800a27e <_free_r+0x22>
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	6053      	str	r3, [r2, #4]
 800a2c2:	4401      	add	r1, r0
 800a2c4:	6011      	str	r1, [r2, #0]
 800a2c6:	e7da      	b.n	800a27e <_free_r+0x22>
 800a2c8:	d902      	bls.n	800a2d0 <_free_r+0x74>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	602b      	str	r3, [r5, #0]
 800a2ce:	e7d6      	b.n	800a27e <_free_r+0x22>
 800a2d0:	6820      	ldr	r0, [r4, #0]
 800a2d2:	1821      	adds	r1, r4, r0
 800a2d4:	428b      	cmp	r3, r1
 800a2d6:	bf04      	itt	eq
 800a2d8:	6819      	ldreq	r1, [r3, #0]
 800a2da:	685b      	ldreq	r3, [r3, #4]
 800a2dc:	6063      	str	r3, [r4, #4]
 800a2de:	bf04      	itt	eq
 800a2e0:	1809      	addeq	r1, r1, r0
 800a2e2:	6021      	streq	r1, [r4, #0]
 800a2e4:	6054      	str	r4, [r2, #4]
 800a2e6:	e7ca      	b.n	800a27e <_free_r+0x22>
 800a2e8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20001484 	.word	0x20001484

0800a2f0 <sbrk_aligned>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	4e0e      	ldr	r6, [pc, #56]	; (800a32c <sbrk_aligned+0x3c>)
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	6831      	ldr	r1, [r6, #0]
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	b911      	cbnz	r1, 800a302 <sbrk_aligned+0x12>
 800a2fc:	f000 f8bc 	bl	800a478 <_sbrk_r>
 800a300:	6030      	str	r0, [r6, #0]
 800a302:	4621      	mov	r1, r4
 800a304:	4628      	mov	r0, r5
 800a306:	f000 f8b7 	bl	800a478 <_sbrk_r>
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	d00a      	beq.n	800a324 <sbrk_aligned+0x34>
 800a30e:	1cc4      	adds	r4, r0, #3
 800a310:	f024 0403 	bic.w	r4, r4, #3
 800a314:	42a0      	cmp	r0, r4
 800a316:	d007      	beq.n	800a328 <sbrk_aligned+0x38>
 800a318:	1a21      	subs	r1, r4, r0
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 f8ac 	bl	800a478 <_sbrk_r>
 800a320:	3001      	adds	r0, #1
 800a322:	d101      	bne.n	800a328 <sbrk_aligned+0x38>
 800a324:	f04f 34ff 	mov.w	r4, #4294967295
 800a328:	4620      	mov	r0, r4
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	20001488 	.word	0x20001488

0800a330 <_malloc_r>:
 800a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a334:	1ccd      	adds	r5, r1, #3
 800a336:	f025 0503 	bic.w	r5, r5, #3
 800a33a:	3508      	adds	r5, #8
 800a33c:	2d0c      	cmp	r5, #12
 800a33e:	bf38      	it	cc
 800a340:	250c      	movcc	r5, #12
 800a342:	2d00      	cmp	r5, #0
 800a344:	4607      	mov	r7, r0
 800a346:	db01      	blt.n	800a34c <_malloc_r+0x1c>
 800a348:	42a9      	cmp	r1, r5
 800a34a:	d905      	bls.n	800a358 <_malloc_r+0x28>
 800a34c:	230c      	movs	r3, #12
 800a34e:	603b      	str	r3, [r7, #0]
 800a350:	2600      	movs	r6, #0
 800a352:	4630      	mov	r0, r6
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a358:	4e2e      	ldr	r6, [pc, #184]	; (800a414 <_malloc_r+0xe4>)
 800a35a:	f000 f89d 	bl	800a498 <__malloc_lock>
 800a35e:	6833      	ldr	r3, [r6, #0]
 800a360:	461c      	mov	r4, r3
 800a362:	bb34      	cbnz	r4, 800a3b2 <_malloc_r+0x82>
 800a364:	4629      	mov	r1, r5
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ffc2 	bl	800a2f0 <sbrk_aligned>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	4604      	mov	r4, r0
 800a370:	d14d      	bne.n	800a40e <_malloc_r+0xde>
 800a372:	6834      	ldr	r4, [r6, #0]
 800a374:	4626      	mov	r6, r4
 800a376:	2e00      	cmp	r6, #0
 800a378:	d140      	bne.n	800a3fc <_malloc_r+0xcc>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	4631      	mov	r1, r6
 800a37e:	4638      	mov	r0, r7
 800a380:	eb04 0803 	add.w	r8, r4, r3
 800a384:	f000 f878 	bl	800a478 <_sbrk_r>
 800a388:	4580      	cmp	r8, r0
 800a38a:	d13a      	bne.n	800a402 <_malloc_r+0xd2>
 800a38c:	6821      	ldr	r1, [r4, #0]
 800a38e:	3503      	adds	r5, #3
 800a390:	1a6d      	subs	r5, r5, r1
 800a392:	f025 0503 	bic.w	r5, r5, #3
 800a396:	3508      	adds	r5, #8
 800a398:	2d0c      	cmp	r5, #12
 800a39a:	bf38      	it	cc
 800a39c:	250c      	movcc	r5, #12
 800a39e:	4629      	mov	r1, r5
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7ff ffa5 	bl	800a2f0 <sbrk_aligned>
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d02b      	beq.n	800a402 <_malloc_r+0xd2>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	442b      	add	r3, r5
 800a3ae:	6023      	str	r3, [r4, #0]
 800a3b0:	e00e      	b.n	800a3d0 <_malloc_r+0xa0>
 800a3b2:	6822      	ldr	r2, [r4, #0]
 800a3b4:	1b52      	subs	r2, r2, r5
 800a3b6:	d41e      	bmi.n	800a3f6 <_malloc_r+0xc6>
 800a3b8:	2a0b      	cmp	r2, #11
 800a3ba:	d916      	bls.n	800a3ea <_malloc_r+0xba>
 800a3bc:	1961      	adds	r1, r4, r5
 800a3be:	42a3      	cmp	r3, r4
 800a3c0:	6025      	str	r5, [r4, #0]
 800a3c2:	bf18      	it	ne
 800a3c4:	6059      	strne	r1, [r3, #4]
 800a3c6:	6863      	ldr	r3, [r4, #4]
 800a3c8:	bf08      	it	eq
 800a3ca:	6031      	streq	r1, [r6, #0]
 800a3cc:	5162      	str	r2, [r4, r5]
 800a3ce:	604b      	str	r3, [r1, #4]
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f104 060b 	add.w	r6, r4, #11
 800a3d6:	f000 f865 	bl	800a4a4 <__malloc_unlock>
 800a3da:	f026 0607 	bic.w	r6, r6, #7
 800a3de:	1d23      	adds	r3, r4, #4
 800a3e0:	1af2      	subs	r2, r6, r3
 800a3e2:	d0b6      	beq.n	800a352 <_malloc_r+0x22>
 800a3e4:	1b9b      	subs	r3, r3, r6
 800a3e6:	50a3      	str	r3, [r4, r2]
 800a3e8:	e7b3      	b.n	800a352 <_malloc_r+0x22>
 800a3ea:	6862      	ldr	r2, [r4, #4]
 800a3ec:	42a3      	cmp	r3, r4
 800a3ee:	bf0c      	ite	eq
 800a3f0:	6032      	streq	r2, [r6, #0]
 800a3f2:	605a      	strne	r2, [r3, #4]
 800a3f4:	e7ec      	b.n	800a3d0 <_malloc_r+0xa0>
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	6864      	ldr	r4, [r4, #4]
 800a3fa:	e7b2      	b.n	800a362 <_malloc_r+0x32>
 800a3fc:	4634      	mov	r4, r6
 800a3fe:	6876      	ldr	r6, [r6, #4]
 800a400:	e7b9      	b.n	800a376 <_malloc_r+0x46>
 800a402:	230c      	movs	r3, #12
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	4638      	mov	r0, r7
 800a408:	f000 f84c 	bl	800a4a4 <__malloc_unlock>
 800a40c:	e7a1      	b.n	800a352 <_malloc_r+0x22>
 800a40e:	6025      	str	r5, [r4, #0]
 800a410:	e7de      	b.n	800a3d0 <_malloc_r+0xa0>
 800a412:	bf00      	nop
 800a414:	20001484 	.word	0x20001484

0800a418 <_realloc_r>:
 800a418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41c:	4680      	mov	r8, r0
 800a41e:	4614      	mov	r4, r2
 800a420:	460e      	mov	r6, r1
 800a422:	b921      	cbnz	r1, 800a42e <_realloc_r+0x16>
 800a424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a428:	4611      	mov	r1, r2
 800a42a:	f7ff bf81 	b.w	800a330 <_malloc_r>
 800a42e:	b92a      	cbnz	r2, 800a43c <_realloc_r+0x24>
 800a430:	f7ff ff14 	bl	800a25c <_free_r>
 800a434:	4625      	mov	r5, r4
 800a436:	4628      	mov	r0, r5
 800a438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a43c:	f000 f838 	bl	800a4b0 <_malloc_usable_size_r>
 800a440:	4284      	cmp	r4, r0
 800a442:	4607      	mov	r7, r0
 800a444:	d802      	bhi.n	800a44c <_realloc_r+0x34>
 800a446:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a44a:	d812      	bhi.n	800a472 <_realloc_r+0x5a>
 800a44c:	4621      	mov	r1, r4
 800a44e:	4640      	mov	r0, r8
 800a450:	f7ff ff6e 	bl	800a330 <_malloc_r>
 800a454:	4605      	mov	r5, r0
 800a456:	2800      	cmp	r0, #0
 800a458:	d0ed      	beq.n	800a436 <_realloc_r+0x1e>
 800a45a:	42bc      	cmp	r4, r7
 800a45c:	4622      	mov	r2, r4
 800a45e:	4631      	mov	r1, r6
 800a460:	bf28      	it	cs
 800a462:	463a      	movcs	r2, r7
 800a464:	f7ff fed2 	bl	800a20c <memcpy>
 800a468:	4631      	mov	r1, r6
 800a46a:	4640      	mov	r0, r8
 800a46c:	f7ff fef6 	bl	800a25c <_free_r>
 800a470:	e7e1      	b.n	800a436 <_realloc_r+0x1e>
 800a472:	4635      	mov	r5, r6
 800a474:	e7df      	b.n	800a436 <_realloc_r+0x1e>
	...

0800a478 <_sbrk_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d06      	ldr	r5, [pc, #24]	; (800a494 <_sbrk_r+0x1c>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	602b      	str	r3, [r5, #0]
 800a484:	f7fd fb0c 	bl	8007aa0 <_sbrk>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d102      	bne.n	800a492 <_sbrk_r+0x1a>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	b103      	cbz	r3, 800a492 <_sbrk_r+0x1a>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	2000148c 	.word	0x2000148c

0800a498 <__malloc_lock>:
 800a498:	4801      	ldr	r0, [pc, #4]	; (800a4a0 <__malloc_lock+0x8>)
 800a49a:	f000 b811 	b.w	800a4c0 <__retarget_lock_acquire_recursive>
 800a49e:	bf00      	nop
 800a4a0:	20001490 	.word	0x20001490

0800a4a4 <__malloc_unlock>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <__malloc_unlock+0x8>)
 800a4a6:	f000 b80c 	b.w	800a4c2 <__retarget_lock_release_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	20001490 	.word	0x20001490

0800a4b0 <_malloc_usable_size_r>:
 800a4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b4:	1f18      	subs	r0, r3, #4
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfbc      	itt	lt
 800a4ba:	580b      	ldrlt	r3, [r1, r0]
 800a4bc:	18c0      	addlt	r0, r0, r3
 800a4be:	4770      	bx	lr

0800a4c0 <__retarget_lock_acquire_recursive>:
 800a4c0:	4770      	bx	lr

0800a4c2 <__retarget_lock_release_recursive>:
 800a4c2:	4770      	bx	lr

0800a4c4 <_init>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr

0800a4d0 <_fini>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	bf00      	nop
 800a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d6:	bc08      	pop	{r3}
 800a4d8:	469e      	mov	lr, r3
 800a4da:	4770      	bx	lr
