
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c348  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800c4e8  0800c4e8  0001c4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c570  0800c570  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800c570  0800c570  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c570  0800c570  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c570  0800c570  0001c570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c574  0800c574  0001c574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800c578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000175c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200017c4  200017c4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c123  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000412d  00000000  00000000  0003c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f0  00000000  00000000  00040328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013e6  00000000  00000000  00041d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002522f  00000000  00000000  000430fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c603  00000000  00000000  0006832d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8d97  00000000  00000000  00094930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ecc  00000000  00000000  0016d6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00174594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c4d0 	.word	0x0800c4d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800c4d0 	.word	0x0800c4d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_frsub>:
 8000a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	e002      	b.n	8000a78 <__addsf3>
 8000a72:	bf00      	nop

08000a74 <__aeabi_fsub>:
 8000a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a78 <__addsf3>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	bf1f      	itttt	ne
 8000a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a80:	ea92 0f03 	teqne	r2, r3
 8000a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8c:	d06a      	beq.n	8000b64 <__addsf3+0xec>
 8000a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a96:	bfc1      	itttt	gt
 8000a98:	18d2      	addgt	r2, r2, r3
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	4048      	eorgt	r0, r1
 8000a9e:	4041      	eorgt	r1, r0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	bf88      	it	hi
 8000aa8:	4770      	bxhi	lr
 8000aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4249      	negne	r1, r1
 8000aca:	ea92 0f03 	teq	r2, r3
 8000ace:	d03f      	beq.n	8000b50 <__addsf3+0xd8>
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad8:	eb10 000c 	adds.w	r0, r0, ip
 8000adc:	f1c3 0320 	rsb	r3, r3, #32
 8000ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__addsf3+0x78>
 8000aea:	4249      	negs	r1, r1
 8000aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af4:	d313      	bcc.n	8000b1e <__addsf3+0xa6>
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d306      	bcc.n	8000b0a <__addsf3+0x92>
 8000afc:	0840      	lsrs	r0, r0, #1
 8000afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b02:	f102 0201 	add.w	r2, r2, #1
 8000b06:	2afe      	cmp	r2, #254	; 0xfe
 8000b08:	d251      	bcs.n	8000bae <__addsf3+0x136>
 8000b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b12:	bf08      	it	eq
 8000b14:	f020 0001 	biceq.w	r0, r0, #1
 8000b18:	ea40 0003 	orr.w	r0, r0, r3
 8000b1c:	4770      	bx	lr
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	eb40 0000 	adc.w	r0, r0, r0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	bf28      	it	cs
 8000b28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b2c:	d2ed      	bcs.n	8000b0a <__addsf3+0x92>
 8000b2e:	fab0 fc80 	clz	ip, r0
 8000b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b36:	ebb2 020c 	subs.w	r2, r2, ip
 8000b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3e:	bfaa      	itet	ge
 8000b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b44:	4252      	neglt	r2, r2
 8000b46:	4318      	orrge	r0, r3
 8000b48:	bfbc      	itt	lt
 8000b4a:	40d0      	lsrlt	r0, r2
 8000b4c:	4318      	orrlt	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	f092 0f00 	teq	r2, #0
 8000b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b58:	bf06      	itte	eq
 8000b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5e:	3201      	addeq	r2, #1
 8000b60:	3b01      	subne	r3, #1
 8000b62:	e7b5      	b.n	8000ad0 <__addsf3+0x58>
 8000b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b6c:	bf18      	it	ne
 8000b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b72:	d021      	beq.n	8000bb8 <__addsf3+0x140>
 8000b74:	ea92 0f03 	teq	r2, r3
 8000b78:	d004      	beq.n	8000b84 <__addsf3+0x10c>
 8000b7a:	f092 0f00 	teq	r2, #0
 8000b7e:	bf08      	it	eq
 8000b80:	4608      	moveq	r0, r1
 8000b82:	4770      	bx	lr
 8000b84:	ea90 0f01 	teq	r0, r1
 8000b88:	bf1c      	itt	ne
 8000b8a:	2000      	movne	r0, #0
 8000b8c:	4770      	bxne	lr
 8000b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b92:	d104      	bne.n	8000b9e <__addsf3+0x126>
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	bf28      	it	cs
 8000b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ba2:	bf3c      	itt	cc
 8000ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bxcc	lr
 8000baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bbc:	bf16      	itet	ne
 8000bbe:	4608      	movne	r0, r1
 8000bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc4:	4601      	movne	r1, r0
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	bf06      	itte	eq
 8000bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bce:	ea90 0f01 	teqeq	r0, r1
 8000bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_ui2f>:
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e004      	b.n	8000be8 <__aeabi_i2f+0x8>
 8000bde:	bf00      	nop

08000be0 <__aeabi_i2f>:
 8000be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	bf48      	it	mi
 8000be6:	4240      	negmi	r0, r0
 8000be8:	ea5f 0c00 	movs.w	ip, r0
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	e01c      	b.n	8000c36 <__aeabi_l2f+0x2a>

08000bfc <__aeabi_ul2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e00a      	b.n	8000c20 <__aeabi_l2f+0x14>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_l2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_l2f+0x14>
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	ea5f 0c01 	movs.w	ip, r1
 8000c24:	bf02      	ittt	eq
 8000c26:	4684      	moveq	ip, r0
 8000c28:	4601      	moveq	r1, r0
 8000c2a:	2000      	moveq	r0, #0
 8000c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c30:	bf08      	it	eq
 8000c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c3a:	fabc f28c 	clz	r2, ip
 8000c3e:	3a08      	subs	r2, #8
 8000c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c44:	db10      	blt.n	8000c68 <__aeabi_l2f+0x5c>
 8000c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c58:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f102 0220 	add.w	r2, r2, #32
 8000c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c78:	fa21 f202 	lsr.w	r2, r1, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_fmul>:
 8000c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c90:	bf1e      	ittt	ne
 8000c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c96:	ea92 0f0c 	teqne	r2, ip
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d06f      	beq.n	8000d80 <__aeabi_fmul+0xf8>
 8000ca0:	441a      	add	r2, r3
 8000ca2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca6:	0240      	lsls	r0, r0, #9
 8000ca8:	bf18      	it	ne
 8000caa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cae:	d01e      	beq.n	8000cee <__aeabi_fmul+0x66>
 8000cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc8:	bf3e      	ittt	cc
 8000cca:	0049      	lslcc	r1, r1, #1
 8000ccc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd0:	005b      	lslcc	r3, r3, #1
 8000cd2:	ea40 0001 	orr.w	r0, r0, r1
 8000cd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cda:	2afd      	cmp	r2, #253	; 0xfd
 8000cdc:	d81d      	bhi.n	8000d1a <__aeabi_fmul+0x92>
 8000cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf6:	bf08      	it	eq
 8000cf8:	0249      	lsleq	r1, r1, #9
 8000cfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	bfc2      	ittt	gt
 8000d06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0e:	4770      	bxgt	lr
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	dc5d      	bgt.n	8000dd8 <__aeabi_fmul+0x150>
 8000d1c:	f112 0f19 	cmn.w	r2, #25
 8000d20:	bfdc      	itt	le
 8000d22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d26:	4770      	bxle	lr
 8000d28:	f1c2 0200 	rsb	r2, r2, #0
 8000d2c:	0041      	lsls	r1, r0, #1
 8000d2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d32:	f1c2 0220 	rsb	r2, r2, #32
 8000d36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3e:	f140 0000 	adc.w	r0, r0, #0
 8000d42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d46:	bf08      	it	eq
 8000d48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4c:	4770      	bx	lr
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0040      	lsleq	r0, r0, #1
 8000d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5e:	3a01      	subeq	r2, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xce>
 8000d62:	ea40 000c 	orr.w	r0, r0, ip
 8000d66:	f093 0f00 	teq	r3, #0
 8000d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0049      	lsleq	r1, r1, #1
 8000d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d76:	3b01      	subeq	r3, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xe6>
 8000d7a:	ea41 010c 	orr.w	r1, r1, ip
 8000d7e:	e78f      	b.n	8000ca0 <__aeabi_fmul+0x18>
 8000d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	bf18      	it	ne
 8000d8a:	ea93 0f0c 	teqne	r3, ip
 8000d8e:	d00a      	beq.n	8000da6 <__aeabi_fmul+0x11e>
 8000d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d94:	bf18      	it	ne
 8000d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	d1d8      	bne.n	8000d4e <__aeabi_fmul+0xc6>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	bf17      	itett	ne
 8000dac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db0:	4608      	moveq	r0, r1
 8000db2:	f091 0f00 	teqne	r1, #0
 8000db6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dba:	d014      	beq.n	8000de6 <__aeabi_fmul+0x15e>
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d101      	bne.n	8000dc6 <__aeabi_fmul+0x13e>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	d10f      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dc6:	ea93 0f0c 	teq	r3, ip
 8000dca:	d103      	bne.n	8000dd4 <__aeabi_fmul+0x14c>
 8000dcc:	024b      	lsls	r3, r1, #9
 8000dce:	bf18      	it	ne
 8000dd0:	4608      	movne	r0, r1
 8000dd2:	d108      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dd4:	ea80 0001 	eor.w	r0, r0, r1
 8000dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bx	lr
 8000de6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fdiv>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d069      	beq.n	8000edc <__aeabi_fdiv+0xec>
 8000e08:	eba2 0203 	sub.w	r2, r2, r3
 8000e0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e16:	d037      	beq.n	8000e88 <__aeabi_fdiv+0x98>
 8000e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	bf38      	it	cc
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e36:	428b      	cmp	r3, r1
 8000e38:	bf24      	itt	cs
 8000e3a:	1a5b      	subcs	r3, r3, r1
 8000e3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e44:	bf24      	itt	cs
 8000e46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e52:	bf24      	itt	cs
 8000e54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e72:	d1e0      	bne.n	8000e36 <__aeabi_fdiv+0x46>
 8000e74:	2afd      	cmp	r2, #253	; 0xfd
 8000e76:	f63f af50 	bhi.w	8000d1a <__aeabi_fmul+0x92>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e80:	bf08      	it	eq
 8000e82:	f020 0001 	biceq.w	r0, r0, #1
 8000e86:	4770      	bx	lr
 8000e88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e90:	327f      	adds	r2, #127	; 0x7f
 8000e92:	bfc2      	ittt	gt
 8000e94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9c:	4770      	bxgt	lr
 8000e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	e737      	b.n	8000d1a <__aeabi_fmul+0x92>
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xc2>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xda>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e795      	b.n	8000e08 <__aeabi_fdiv+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	d108      	bne.n	8000ef8 <__aeabi_fdiv+0x108>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	f47f af7d 	bne.w	8000de6 <__aeabi_fmul+0x15e>
 8000eec:	ea93 0f0c 	teq	r3, ip
 8000ef0:	f47f af70 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e776      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	d104      	bne.n	8000f08 <__aeabi_fdiv+0x118>
 8000efe:	024b      	lsls	r3, r1, #9
 8000f00:	f43f af4c 	beq.w	8000d9c <__aeabi_fmul+0x114>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e76e      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f0c:	bf18      	it	ne
 8000f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	d1ca      	bne.n	8000eaa <__aeabi_fdiv+0xba>
 8000f14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f18:	f47f af5c 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000f1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f20:	f47f af3c 	bne.w	8000d9c <__aeabi_fmul+0x114>
 8000f24:	e75f      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f26:	bf00      	nop

08000f28 <__gesf2>:
 8000f28:	f04f 3cff 	mov.w	ip, #4294967295
 8000f2c:	e006      	b.n	8000f3c <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__lesf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	e002      	b.n	8000f3c <__cmpsf2+0x4>
 8000f36:	bf00      	nop

08000f38 <__cmpsf2>:
 8000f38:	f04f 0c01 	mov.w	ip, #1
 8000f3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f4c:	bf18      	it	ne
 8000f4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f52:	d011      	beq.n	8000f78 <__cmpsf2+0x40>
 8000f54:	b001      	add	sp, #4
 8000f56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f5a:	bf18      	it	ne
 8000f5c:	ea90 0f01 	teqne	r0, r1
 8000f60:	bf58      	it	pl
 8000f62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f66:	bf88      	it	hi
 8000f68:	17c8      	asrhi	r0, r1, #31
 8000f6a:	bf38      	it	cc
 8000f6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f70:	bf18      	it	ne
 8000f72:	f040 0001 	orrne.w	r0, r0, #1
 8000f76:	4770      	bx	lr
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	d102      	bne.n	8000f84 <__cmpsf2+0x4c>
 8000f7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f82:	d105      	bne.n	8000f90 <__cmpsf2+0x58>
 8000f84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f88:	d1e4      	bne.n	8000f54 <__cmpsf2+0x1c>
 8000f8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f8e:	d0e1      	beq.n	8000f54 <__cmpsf2+0x1c>
 8000f90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <__aeabi_cfrcmple>:
 8000f98:	4684      	mov	ip, r0
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	4661      	mov	r1, ip
 8000f9e:	e7ff      	b.n	8000fa0 <__aeabi_cfcmpeq>

08000fa0 <__aeabi_cfcmpeq>:
 8000fa0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fa2:	f7ff ffc9 	bl	8000f38 <__cmpsf2>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf48      	it	mi
 8000faa:	f110 0f00 	cmnmi.w	r0, #0
 8000fae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fb0 <__aeabi_fcmpeq>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff fff4 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fb8:	bf0c      	ite	eq
 8000fba:	2001      	moveq	r0, #1
 8000fbc:	2000      	movne	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmplt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffea 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmple>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffe0 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fe0:	bf94      	ite	ls
 8000fe2:	2001      	movls	r0, #1
 8000fe4:	2000      	movhi	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmpge>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffd2 	bl	8000f98 <__aeabi_cfrcmple>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmpgt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffc8 	bl	8000f98 <__aeabi_cfrcmple>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <Access_Init+0x14>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000084 	.word	0x20000084

0800102c <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <Brakes_OnAutobrakesEnabled>:
/**
  * @brief	Triggers the actions for Autobrakes enabled state
  * @return	None
  */
static void Brakes_OnAutobrakesEnabled(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	/* Check critical distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Enable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <Brakes_OnAutobrakesEnabled+0x60>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4916      	ldr	r1, [pc, #88]	; (800109c <Brakes_OnAutobrakesEnabled+0x64>)
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffbe 	bl	8000fc4 <__aeabi_fcmplt>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00f      	beq.n	800106e <Brakes_OnAutobrakesEnabled+0x36>
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b09      	cmp	r3, #9
 8001054:	d90b      	bls.n	800106e <Brakes_OnAutobrakesEnabled+0x36>
	{
		/* Set Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = TRUE;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <Brakes_OnAutobrakesEnabled+0x6c>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
		/* Set Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <Brakes_OnAutobrakesEnabled+0x6c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f00a fc56 	bl	800b918 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
	}
}
 800106c:	e012      	b.n	8001094 <Brakes_OnAutobrakesEnabled+0x5c>
	else if (g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32)
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <Brakes_OnAutobrakesEnabled+0x60>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	490a      	ldr	r1, [pc, #40]	; (800109c <Brakes_OnAutobrakesEnabled+0x64>)
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa5 	bl	8000fc4 <__aeabi_fcmplt>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <Brakes_OnAutobrakesEnabled+0x56>
		g_Brakes_Autobrakes_Enable_Cnt_u8++;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 800108a:	701a      	strb	r2, [r3, #0]
}
 800108c:	e002      	b.n	8001094 <Brakes_OnAutobrakesEnabled+0x5c>
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000008c 	.word	0x2000008c
 800109c:	41a00000 	.word	0x41a00000
 80010a0:	20000092 	.word	0x20000092
 80010a4:	20000090 	.word	0x20000090

080010a8 <Brakes_OnAutobrakesDisabled>:
/**
  * @brief	Triggers the actions for Autobrakes disabled state
  * @return	None
  */
static void Brakes_OnAutobrakesDisabled(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	/* Check Autobrakes disable distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Disable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <Brakes_OnAutobrakesDisabled+0x60>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <Brakes_OnAutobrakesDisabled+0x64>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffa4 	bl	8001000 <__aeabi_fcmpgt>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00f      	beq.n	80010de <Brakes_OnAutobrakesDisabled+0x36>
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b09      	cmp	r3, #9
 80010c4:	d90b      	bls.n	80010de <Brakes_OnAutobrakesDisabled+0x36>
	{
		/* Reset Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = FALSE;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <Brakes_OnAutobrakesDisabled+0x6c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <Brakes_OnAutobrakesDisabled+0x6c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00a fc1e 	bl	800b918 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
	}
}
 80010dc:	e012      	b.n	8001104 <Brakes_OnAutobrakesDisabled+0x5c>
	else if(g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32)
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <Brakes_OnAutobrakesDisabled+0x60>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	490a      	ldr	r1, [pc, #40]	; (800110c <Brakes_OnAutobrakesDisabled+0x64>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff8b 	bl	8001000 <__aeabi_fcmpgt>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <Brakes_OnAutobrakesDisabled+0x56>
		g_Brakes_Autobrakes_Disable_Cnt_u8++;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 80010fa:	701a      	strb	r2, [r3, #0]
}
 80010fc:	e002      	b.n	8001104 <Brakes_OnAutobrakesDisabled+0x5c>
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <Brakes_OnAutobrakesDisabled+0x68>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000008c 	.word	0x2000008c
 800110c:	428c0000 	.word	0x428c0000
 8001110:	20000091 	.word	0x20000091
 8001114:	20000090 	.word	0x20000090

08001118 <Brakes_OnDistance>:

static uint8 Brakes_OnDistance(float32 distance)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 8001120:	4942      	ldr	r1, [pc, #264]	; (800122c <Brakes_OnDistance+0x114>)
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff58 	bl	8000fd8 <__aeabi_fcmple>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <Brakes_OnDistance+0x2e>
 800112e:	4b40      	ldr	r3, [pc, #256]	; (8001230 <Brakes_OnDistance+0x118>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b31      	cmp	r3, #49	; 0x31
 8001134:	d807      	bhi.n	8001146 <Brakes_OnDistance+0x2e>
	{
		g_Informative_Dist_Status_Cnt_u8++;
 8001136:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <Brakes_OnDistance+0x118>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <Brakes_OnDistance+0x118>)
 8001140:	701a      	strb	r2, [r3, #0]
		return 3;
 8001142:	2303      	movs	r3, #3
 8001144:	e06d      	b.n	8001222 <Brakes_OnDistance+0x10a>
	}
	else if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 8001146:	4939      	ldr	r1, [pc, #228]	; (800122c <Brakes_OnDistance+0x114>)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff45 	bl	8000fd8 <__aeabi_fcmple>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00b      	beq.n	800116c <Brakes_OnDistance+0x54>
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <Brakes_OnDistance+0x118>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b31      	cmp	r3, #49	; 0x31
 800115a:	d907      	bls.n	800116c <Brakes_OnDistance+0x54>
	{
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <Brakes_OnDistance+0x11c>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <Brakes_OnDistance+0x120>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
		return 2;
 8001168:	2302      	movs	r3, #2
 800116a:	e05a      	b.n	8001222 <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 800116c:	492f      	ldr	r1, [pc, #188]	; (800122c <Brakes_OnDistance+0x114>)
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff46 	bl	8001000 <__aeabi_fcmpgt>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d012      	beq.n	80011a0 <Brakes_OnDistance+0x88>
 800117a:	4930      	ldr	r1, [pc, #192]	; (800123c <Brakes_OnDistance+0x124>)
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff2b 	bl	8000fd8 <__aeabi_fcmple>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00b      	beq.n	80011a0 <Brakes_OnDistance+0x88>
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <Brakes_OnDistance+0x11c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b31      	cmp	r3, #49	; 0x31
 800118e:	d807      	bhi.n	80011a0 <Brakes_OnDistance+0x88>
	{
		g_Warning_Dist_Status_Cnt_u8++;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <Brakes_OnDistance+0x11c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <Brakes_OnDistance+0x11c>)
 800119a:	701a      	strb	r2, [r3, #0]
		return 3;
 800119c:	2303      	movs	r3, #3
 800119e:	e040      	b.n	8001222 <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 80011a0:	4922      	ldr	r1, [pc, #136]	; (800122c <Brakes_OnDistance+0x114>)
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff2c 	bl	8001000 <__aeabi_fcmpgt>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d012      	beq.n	80011d4 <Brakes_OnDistance+0xbc>
 80011ae:	4923      	ldr	r1, [pc, #140]	; (800123c <Brakes_OnDistance+0x124>)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff11 	bl	8000fd8 <__aeabi_fcmple>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <Brakes_OnDistance+0xbc>
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <Brakes_OnDistance+0x11c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b31      	cmp	r3, #49	; 0x31
 80011c2:	d907      	bls.n	80011d4 <Brakes_OnDistance+0xbc>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <Brakes_OnDistance+0x118>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <Brakes_OnDistance+0x120>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
		return 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e026      	b.n	8001222 <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 80011d4:	4919      	ldr	r1, [pc, #100]	; (800123c <Brakes_OnDistance+0x124>)
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff12 	bl	8001000 <__aeabi_fcmpgt>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <Brakes_OnDistance+0xe2>
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <Brakes_OnDistance+0x120>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b31      	cmp	r3, #49	; 0x31
 80011e8:	d807      	bhi.n	80011fa <Brakes_OnDistance+0xe2>
	{
		g_Critical_Dist_Status_Cnt_u8++;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <Brakes_OnDistance+0x120>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <Brakes_OnDistance+0x120>)
 80011f4:	701a      	strb	r2, [r3, #0]
		return 3;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e013      	b.n	8001222 <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 80011fa:	4910      	ldr	r1, [pc, #64]	; (800123c <Brakes_OnDistance+0x124>)
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff feff 	bl	8001000 <__aeabi_fcmpgt>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <Brakes_OnDistance+0x108>
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <Brakes_OnDistance+0x120>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b31      	cmp	r3, #49	; 0x31
 800120e:	d907      	bls.n	8001220 <Brakes_OnDistance+0x108>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <Brakes_OnDistance+0x118>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <Brakes_OnDistance+0x11c>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
		return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e000      	b.n	8001222 <Brakes_OnDistance+0x10a>
	}
	else
	{
		return 3;
 8001220:	2303      	movs	r3, #3
	}
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	41a00000 	.word	0x41a00000
 8001230:	200000b5 	.word	0x200000b5
 8001234:	200000b6 	.word	0x200000b6
 8001238:	200000b7 	.word	0x200000b7
 800123c:	42200000 	.word	0x42200000

08001240 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	/* Initialize variables */
	g_Brakes_AN0_Voltage_mV_u16 = 0u;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <Brakes_Init+0x38>)
 8001246:	2200      	movs	r2, #0
 8001248:	801a      	strh	r2, [r3, #0]
	g_Brakes_Ultrasonic_Distance_cm_f32 = 0.0f;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <Brakes_Init+0x3c>)
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
	g_Brakes_Autobrakes_Status_b = FALSE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <Brakes_Init+0x40>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <Brakes_Init+0x44>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <Brakes_Init+0x48>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
	//initilalizare cu 0 a noi var
	/* Read Brakes NvM block */
	Rte_Read_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 8001264:	4909      	ldr	r1, [pc, #36]	; (800128c <Brakes_Init+0x4c>)
 8001266:	2001      	movs	r0, #1
 8001268:	f00a fb82 	bl	800b970 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <Brakes_Init+0x50>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000086 	.word	0x20000086
 800127c:	2000008c 	.word	0x2000008c
 8001280:	20000090 	.word	0x20000090
 8001284:	20000091 	.word	0x20000091
 8001288:	20000092 	.word	0x20000092
 800128c:	20000094 	.word	0x20000094
 8001290:	20000085 	.word	0x20000085

08001294 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_Brakes_InitDone_b)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <Brakes_MainFunction+0x50>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01f      	beq.n	80012e0 <Brakes_MainFunction+0x4c>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_ADC_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_mV_u16);
 80012a0:	4811      	ldr	r0, [pc, #68]	; (80012e8 <Brakes_MainFunction+0x54>)
 80012a2:	f00a fb9f 	bl	800b9e4 <Rte_Read_AN0_Voltage_u16>
		/* Read AN1 analog voltage (mV) */
		Rte_Read_ADC_AN2_Voltage_u16(&g_Brakes_AN2_Voltage_mV_u16);
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <Brakes_MainFunction+0x58>)
 80012a8:	f00a fbc0 	bl	800ba2c <Rte_Read_AN2_Voltage_u16>
		/* Read distance from ultrasonic sensor */
		Rte_Read_Ultrasonic_Distance_f32(&g_Brakes_Ultrasonic_Distance_cm_f32);
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <Brakes_MainFunction+0x5c>)
 80012ae:	f00a faa1 	bl	800b7f4 <Rte_Read_Cdd_Ultrasonic_Distance_f32>
		/* Check Autobrakes condition */
		if(FALSE == g_Brakes_Autobrakes_Status_b)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <Brakes_MainFunction+0x60>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <Brakes_MainFunction+0x2c>
		{
			/* Autobrakes enabled actions */
			Brakes_OnAutobrakesEnabled();
 80012ba:	f7ff febd 	bl	8001038 <Brakes_OnAutobrakesEnabled>
 80012be:	e001      	b.n	80012c4 <Brakes_MainFunction+0x30>
		}
		else
		{
			/* Autobrakes disabled actions */
			Brakes_OnAutobrakesDisabled();
 80012c0:	f7ff fef2 	bl	80010a8 <Brakes_OnAutobrakesDisabled>
		}
		/* rte write */
		g_Brakes_CollisionWarning_Status_u8 = Brakes_OnDistance(g_Brakes_Ultrasonic_Distance_cm_f32);
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <Brakes_MainFunction+0x5c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff25 	bl	8001118 <Brakes_OnDistance>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <Brakes_MainFunction+0x64>)
 80012d4:	701a      	strb	r2, [r3, #0]
		Rte_Write_Brakes_Collission_Status(g_Brakes_CollisionWarning_Status_u8);
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <Brakes_MainFunction+0x64>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f00a fac8 	bl	800b870 <Rte_Write_g_CollisionWarning_Status>
	}
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000085 	.word	0x20000085
 80012e8:	20000086 	.word	0x20000086
 80012ec:	20000088 	.word	0x20000088
 80012f0:	2000008c 	.word	0x2000008c
 80012f4:	20000090 	.word	0x20000090
 80012f8:	200000b4 	.word	0x200000b4

080012fc <Brakes_Shutdown>:
/**
  * @brief  Shutdown the Brakes module
  * @return None
  */
void Brakes_Shutdown(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	/* Write Brakes NvM block */
	Rte_Write_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 8001300:	4904      	ldr	r1, [pc, #16]	; (8001314 <Brakes_Shutdown+0x18>)
 8001302:	2001      	movs	r0, #1
 8001304:	f00a fb4e 	bl	800b9a4 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_Brakes_InitDone_b = FALSE;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <Brakes_Shutdown+0x1c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000094 	.word	0x20000094
 8001318:	20000085 	.word	0x20000085

0800131c <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <Engine_Init+0x14>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200000b8 	.word	0x200000b8

08001334 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <Engine_MainFunction+0x28>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10b      	bne.n	8001358 <Engine_MainFunction+0x24>
	{
		/* Read adc */
		Rte_Read_Remote_Channel0(&g_Remote_Control_Status_D0_u8);
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <Engine_MainFunction+0x2c>)
 8001342:	f00a fb87 	bl	800ba54 <Rte_Read_Remote_D0>
		Rte_Read_Remote_Channel1(&g_Remote_Control_Status_D1_u8);
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <Engine_MainFunction+0x30>)
 8001348:	f00a fb96 	bl	800ba78 <Rte_Read_Remote_D1>
		Rte_Read_Remote_Channel2(&g_Remote_Control_Status_D2_u8);
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <Engine_MainFunction+0x34>)
 800134e:	f00a fba5 	bl	800ba9c <Rte_Read_Remote_D2>
		Rte_Read_Remote_Channel3(&g_Remote_Control_Status_D3_u8);
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <Engine_MainFunction+0x38>)
 8001354:	f00a fbb4 	bl	800bac0 <Rte_Read_Remote_D3>

		/* Write on DC motor */

	}
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000b8 	.word	0x200000b8
 8001360:	200000b9 	.word	0x200000b9
 8001364:	200000ba 	.word	0x200000ba
 8001368:	200000bb 	.word	0x200000bb
 800136c:	200000bc 	.word	0x200000bc

08001370 <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE_U16)
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <LED_UpdatePulseDirection+0x30>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800137c:	d302      	bcc.n	8001384 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN_U8;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <LED_UpdatePulseDirection+0x34>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE_U16)
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <LED_UpdatePulseDirection+0x30>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800138c:	4293      	cmp	r3, r2
 800138e:	d802      	bhi.n	8001396 <LED_UpdatePulseDirection+0x26>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <LED_UpdatePulseDirection+0x34>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	}
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200000c0 	.word	0x200000c0
 80013a4:	200000c2 	.word	0x200000c2

080013a8 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP_U8 == g_LED_Pulse_Direction_u8)
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <LED_UpdatePulseWidth+0x48>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10c      	bne.n	80013ce <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE_U16)
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <LED_UpdatePulseWidth+0x4c>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013bc:	d813      	bhi.n	80013e6 <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 + LED_FADE_PULSE_STEP_U16;
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <LED_UpdatePulseWidth+0x4c>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <LED_UpdatePulseWidth+0x4c>)
 80013ca:	801a      	strh	r2, [r3, #0]
 80013cc:	e00b      	b.n	80013e6 <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP_U16)
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <LED_UpdatePulseWidth+0x4c>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013d6:	d306      	bcc.n	80013e6 <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 - LED_FADE_PULSE_STEP_U16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <LED_UpdatePulseWidth+0x4c>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <LED_UpdatePulseWidth+0x4c>)
 80013e4:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 80013e6:	f7ff ffc3 	bl	8001370 <LED_UpdatePulseDirection>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000c2 	.word	0x200000c2
 80013f4:	200000c0 	.word	0x200000c0

080013f8 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	g_LED_ButtonState_b = FALSE;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <LED_Init+0x34>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
	g_LED_Pulse_u16 = 0u;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <LED_Init+0x38>)
 8001404:	2200      	movs	r2, #0
 8001406:	801a      	strh	r2, [r3, #0]
	g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <LED_Init+0x3c>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LED_Init+0x38>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f00a fa9e 	bl	800b954 <Rte_Cdd_Servo_RawMove>
	/* Read LED NvM block */
	Rte_Read_NvM_LED_Block(g_LED_NvMBlock_a);
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LED_Init+0x40>)
 800141a:	2000      	movs	r0, #0
 800141c:	f00a faa8 	bl	800b970 <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <LED_Init+0x44>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200000be 	.word	0x200000be
 8001430:	200000c0 	.word	0x200000c0
 8001434:	200000c2 	.word	0x200000c2
 8001438:	200000c4 	.word	0x200000c4
 800143c:	200000bd 	.word	0x200000bd

08001440 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_LED_InitDone_b)
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <LED_MainFunction+0xa8>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d04b      	beq.n	80014e4 <LED_MainFunction+0xa4>
	{
		/* Rte read the global variable */
		Rte_Read_LED_Collision_Status(&g_LED_CollisionWarning_Status);
 800144c:	4827      	ldr	r0, [pc, #156]	; (80014ec <LED_MainFunction+0xac>)
 800144e:	f00a f9ff 	bl	800b850 <Rte_Read_g_CollisionWarning_Status>
		switch(g_LED_CollisionWarning_Status)
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <LED_MainFunction+0xac>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d01a      	beq.n	8001490 <LED_MainFunction+0x50>
 800145a:	2b02      	cmp	r3, #2
 800145c:	dc22      	bgt.n	80014a4 <LED_MainFunction+0x64>
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <LED_MainFunction+0x28>
 8001462:	2b01      	cmp	r3, #1
 8001464:	d00a      	beq.n	800147c <LED_MainFunction+0x3c>
 8001466:	e01d      	b.n	80014a4 <LED_MainFunction+0x64>
		{
			case 0:
			{
				Rte_Write_Green_LED_Status(TRUE);                                  /* Green LED  */
 8001468:	2001      	movs	r0, #1
 800146a:	f00a fb3b 	bl	800bae4 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 800146e:	2000      	movs	r0, #0
 8001470:	f00a fb54 	bl	800bb1c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001474:	2000      	movs	r0, #0
 8001476:	f00a fb6d 	bl	800bb54 <Rte_Write_PB_15>
			}break;
 800147a:	e01d      	b.n	80014b8 <LED_MainFunction+0x78>
			case 1:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 800147c:	2000      	movs	r0, #0
 800147e:	f00a fb31 	bl	800bae4 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(TRUE);                                 /* Yellow LED */
 8001482:	2001      	movs	r0, #1
 8001484:	f00a fb4a 	bl	800bb1c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001488:	2000      	movs	r0, #0
 800148a:	f00a fb63 	bl	800bb54 <Rte_Write_PB_15>
			}break;
 800148e:	e013      	b.n	80014b8 <LED_MainFunction+0x78>
			case 2:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001490:	2000      	movs	r0, #0
 8001492:	f00a fb27 	bl	800bae4 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001496:	2000      	movs	r0, #0
 8001498:	f00a fb40 	bl	800bb1c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(TRUE);                                    /* Red LED    */
 800149c:	2001      	movs	r0, #1
 800149e:	f00a fb59 	bl	800bb54 <Rte_Write_PB_15>
			}break;
 80014a2:	e009      	b.n	80014b8 <LED_MainFunction+0x78>
			default:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 80014a4:	2000      	movs	r0, #0
 80014a6:	f00a fb1d 	bl	800bae4 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 80014aa:	2000      	movs	r0, #0
 80014ac:	f00a fb36 	bl	800bb1c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 80014b0:	2000      	movs	r0, #0
 80014b2:	f00a fb4f 	bl	800bb54 <Rte_Write_PB_15>
			}break;
 80014b6:	bf00      	nop
		}
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <LED_MainFunction+0xb0>)
 80014ba:	f00a f9a9 	bl	800b810 <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(FALSE != g_LED_ButtonState_b)
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <LED_MainFunction+0xb0>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <LED_MainFunction+0x96>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 80014c6:	f7ff ff6f 	bl	80013a8 <LED_UpdatePulseWidth>
			/* Call the Servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <LED_MainFunction+0xb4>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00a fa40 	bl	800b954 <Rte_Cdd_Servo_RawMove>
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
			/* Stop fading */
		}

	}
}
 80014d4:	e006      	b.n	80014e4 <LED_MainFunction+0xa4>
			g_LED_NvMBlock_a[0] = 1u;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <LED_MainFunction+0xb8>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <LED_MainFunction+0xb8>)
 80014de:	2000      	movs	r0, #0
 80014e0:	f00a fa60 	bl	800b9a4 <Rte_Write_NvM_Block>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200000bd 	.word	0x200000bd
 80014ec:	200000e4 	.word	0x200000e4
 80014f0:	200000be 	.word	0x200000be
 80014f4:	200000c0 	.word	0x200000c0
 80014f8:	200000c4 	.word	0x200000c4

080014fc <LED_Shutdown>:
/**
  * @brief  Shutdown the LED module
  * @return None
  */
void LED_Shutdown(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	/* Write LED NvM block */
	Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001500:	4904      	ldr	r1, [pc, #16]	; (8001514 <LED_Shutdown+0x18>)
 8001502:	2000      	movs	r0, #0
 8001504:	f00a fa4e 	bl	800b9a4 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_LED_InitDone_b = FALSE;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <LED_Shutdown+0x1c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000c4 	.word	0x200000c4
 8001518:	200000bd 	.word	0x200000bd

0800151c <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	g_Left_Blinker_Status_b = FALSE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <Blinker_Init+0x30>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
	g_Right_Blinker_Status_b = FALSE;
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <Blinker_Init+0x34>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
	Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <Blinker_Init+0x30>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f00a f9bd 	bl	800b8b0 <Rte_Write_PC_2>
	Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <Blinker_Init+0x34>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f00a f9d2 	bl	800b8e4 <Rte_Write_PC_3>
	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <Blinker_Init+0x38>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000ea 	.word	0x200000ea
 8001550:	200000eb 	.word	0x200000eb
 8001554:	200000e5 	.word	0x200000e5

08001558 <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <Blinker_MainFunction+0xe0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d167      	bne.n	8001634 <Blinker_MainFunction+0xdc>
	{
		Rte_Read_Blinker_Autobrakes_Status(&g_Bliker_Autobrakes_Status);
 8001564:	4835      	ldr	r0, [pc, #212]	; (800163c <Blinker_MainFunction+0xe4>)
 8001566:	f00a f993 	bl	800b890 <Rte_Read_DIO_Autobrakes_State_b>

		if(TRUE == g_Bliker_Autobrakes_Status && FALSE == g_Bliker_Autobrakes_Previous_Status)
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <Blinker_MainFunction+0xe4>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10d      	bne.n	800158e <Blinker_MainFunction+0x36>
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <Blinker_MainFunction+0xe8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <Blinker_MainFunction+0x36>
		{
			g_Left_Blinker_Status_b = TRUE;
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <Blinker_MainFunction+0xec>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = TRUE;
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <Blinker_MainFunction+0xf0>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
			g_Bliker_Autobrakes_Previous_Status = TRUE;
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <Blinker_MainFunction+0xe8>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e048      	b.n	8001620 <Blinker_MainFunction+0xc8>
		}
		else if(TRUE == g_Bliker_Autobrakes_Status && TRUE == g_Bliker_Autobrakes_Previous_Status)
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <Blinker_MainFunction+0xe4>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d136      	bne.n	8001604 <Blinker_MainFunction+0xac>
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <Blinker_MainFunction+0xe8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d132      	bne.n	8001604 <Blinker_MainFunction+0xac>
		{
			if(g_Blinker_Counter_u16 < 45)
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <Blinker_MainFunction+0xf4>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	2b2c      	cmp	r3, #44	; 0x2c
 80015a4:	d827      	bhi.n	80015f6 <Blinker_MainFunction+0x9e>
			{
				g_Blinker_Counter_u16++;
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <Blinker_MainFunction+0xf4>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <Blinker_MainFunction+0xf4>)
 80015b0:	801a      	strh	r2, [r3, #0]
				if(0 == g_Blinker_Counter_u16 % 5)
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <Blinker_MainFunction+0xf4>)
 80015b4:	881a      	ldrh	r2, [r3, #0]
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <Blinker_MainFunction+0xf8>)
 80015b8:	fba3 1302 	umull	r1, r3, r3, r2
 80015bc:	0899      	lsrs	r1, r3, #2
 80015be:	460b      	mov	r3, r1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d128      	bne.n	800161e <Blinker_MainFunction+0xc6>
				{
					g_Left_Blinker_Status_b = !g_Left_Blinker_Status_b;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <Blinker_MainFunction+0xec>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <Blinker_MainFunction+0xec>)
 80015de:	701a      	strb	r2, [r3, #0]
					g_Right_Blinker_Status_b = !g_Right_Blinker_Status_b;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <Blinker_MainFunction+0xf0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <Blinker_MainFunction+0xf0>)
 80015f2:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 80015f4:	e013      	b.n	800161e <Blinker_MainFunction+0xc6>
				}

			}
			else
			{
				g_Left_Blinker_Status_b = FALSE;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <Blinker_MainFunction+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
				g_Right_Blinker_Status_b = FALSE;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <Blinker_MainFunction+0xf0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 8001602:	e00c      	b.n	800161e <Blinker_MainFunction+0xc6>
			}
		}
		else
		{
			g_Bliker_Autobrakes_Previous_Status = FALSE;
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <Blinker_MainFunction+0xe8>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
			g_Blinker_Counter_u16 = 0;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <Blinker_MainFunction+0xf4>)
 800160c:	2200      	movs	r2, #0
 800160e:	801a      	strh	r2, [r3, #0]
			g_Left_Blinker_Status_b = FALSE;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <Blinker_MainFunction+0xec>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = FALSE;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <Blinker_MainFunction+0xf0>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e000      	b.n	8001620 <Blinker_MainFunction+0xc8>
			if(g_Blinker_Counter_u16 < 45)
 800161e:	bf00      	nop
		}

		Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <Blinker_MainFunction+0xec>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f00a f943 	bl	800b8b0 <Rte_Write_PC_2>
		Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <Blinker_MainFunction+0xf0>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f00a f958 	bl	800b8e4 <Rte_Write_PC_3>
	}
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200000e5 	.word	0x200000e5
 800163c:	200000e6 	.word	0x200000e6
 8001640:	200000e7 	.word	0x200000e7
 8001644:	200000ea 	.word	0x200000ea
 8001648:	200000eb 	.word	0x200000eb
 800164c:	200000e8 	.word	0x200000e8
 8001650:	cccccccd 	.word	0xcccccccd

08001654 <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <FrontLights_Init+0x14>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200000ec 	.word	0x200000ec

0800166c <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <InteriorLights_Init+0x14>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200000ed 	.word	0x200000ed

08001690 <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <RearLights_Init+0x14>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200000ee 	.word	0x200000ee

080016b4 <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <Steering_Init+0x14>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200000ef 	.word	0x200000ef

080016d8 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <Cdd_Servo_Driver_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Driver_Init(void)
{
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b09e      	sub	sp, #120	; 0x78
 80016e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef l_GPIO_InitStruct_s = {0};
 80016ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef l_ClockSourceConfig_s = {0};
 80016fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef l_MasterConfig_s = {0};
 8001708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef l_ConfigOC_s = {0};
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	619a      	str	r2, [r3, #24]
    uint32 l_PSC_Value_u32 = 0UL;
 8001728:	2300      	movs	r3, #0
 800172a:	677b      	str	r3, [r7, #116]	; 0x74
    uint32 l_ARR_Value_u32 = 0UL;
 800172c:	2300      	movs	r3, #0
 800172e:	673b      	str	r3, [r7, #112]	; 0x70
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 8001730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001734:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001738:	d10c      	bne.n	8001754 <Cdd_Servo_Driver_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b6c      	ldr	r3, [pc, #432]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a6b      	ldr	r2, [pc, #428]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	6153      	str	r3, [r2, #20]
 8001746:	4b69      	ldr	r3, [pc, #420]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	e046      	b.n	80017e2 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 8001754:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001758:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <Cdd_Servo_Driver_Init+0x20c>)
 800175a:	429a      	cmp	r2, r3
 800175c:	d10c      	bne.n	8001778 <Cdd_Servo_Driver_Init+0x94>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a62      	ldr	r2, [pc, #392]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6153      	str	r3, [r2, #20]
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	e034      	b.n	80017e2 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 8001778:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800177c:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <Cdd_Servo_Driver_Init+0x210>)
 800177e:	429a      	cmp	r2, r3
 8001780:	d10c      	bne.n	800179c <Cdd_Servo_Driver_Init+0xb8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a59      	ldr	r2, [pc, #356]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800178c:	6153      	str	r3, [r2, #20]
 800178e:	4b57      	ldr	r3, [pc, #348]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	e022      	b.n	80017e2 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 800179c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <Cdd_Servo_Driver_Init+0x214>)
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10c      	bne.n	80017c0 <Cdd_Servo_Driver_Init+0xdc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	4b51      	ldr	r3, [pc, #324]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a50      	ldr	r2, [pc, #320]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80017ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	e010      	b.n	80017e2 <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 80017c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <Cdd_Servo_Driver_Init+0x218>)
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d10b      	bne.n	80017e2 <Cdd_Servo_Driver_Init+0xfe>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ca:	4b48      	ldr	r3, [pc, #288]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a47      	ldr	r2, [pc, #284]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80017d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	4b45      	ldr	r3, [pc, #276]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
    }
	l_GPIO_InitStruct_s.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 80017e2:	2320      	movs	r3, #32
 80017e4:	65fb      	str	r3, [r7, #92]	; 0x5c
	l_GPIO_InitStruct_s.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	663b      	str	r3, [r7, #96]	; 0x60
	l_GPIO_InitStruct_s.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	66bb      	str	r3, [r7, #104]	; 0x68
	l_GPIO_InitStruct_s.Alternate = GPIO_AF1_TIM2;
 80017ee:	2301      	movs	r3, #1
 80017f0:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &l_GPIO_InitStruct_s);
 80017f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f001 fc2f 	bl	8003060 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	l_PSC_Value_u32 = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <Cdd_Servo_Driver_Init+0x21c>)
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe85 	bl	8000514 <__aeabi_ui2d>
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <Cdd_Servo_Driver_Init+0x220>)
 8001810:	f7ff f824 	bl	800085c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f906 	bl	8000a2c <__aeabi_d2uiz>
 8001820:	4603      	mov	r3, r0
 8001822:	677b      	str	r3, [r7, #116]	; 0x74
	l_ARR_Value_u32 = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(l_PSC_Value_u32+1.0)))-1.0);
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <Cdd_Servo_Driver_Init+0x21c>)
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe74 	bl	8000514 <__aeabi_ui2d>
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001832:	f7fe fe6f 	bl	8000514 <__aeabi_ui2d>
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b33      	ldr	r3, [pc, #204]	; (8001908 <Cdd_Servo_Driver_Init+0x224>)
 800183c:	f7fe fd2e 	bl	800029c <__adddf3>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <Cdd_Servo_Driver_Init+0x228>)
 800184e:	f7fe fedb 	bl	8000608 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe ffff 	bl	800085c <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <Cdd_Servo_Driver_Init+0x224>)
 800186c:	f7fe fd14 	bl	8000298 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f8d8 	bl	8000a2c <__aeabi_d2uiz>
 800187c:	4603      	mov	r3, r0
 800187e:	673b      	str	r3, [r7, #112]	; 0x70

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 8001880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <Cdd_Servo_Driver_Init+0x22c>)
 8001886:	429a      	cmp	r2, r3
 8001888:	d10c      	bne.n	80018a4 <Cdd_Servo_Driver_Init+0x1c0>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	e04a      	b.n	800193a <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 80018a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ac:	d10c      	bne.n	80018c8 <Cdd_Servo_Driver_Init+0x1e4>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	e038      	b.n	800193a <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <Cdd_Servo_Driver_Init+0x230>)
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d122      	bne.n	8001918 <Cdd_Servo_Driver_Init+0x234>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b03      	ldr	r3, [pc, #12]	; (80018ec <Cdd_Servo_Driver_Init+0x208>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	e026      	b.n	800193a <Cdd_Servo_Driver_Init+0x256>
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	48000800 	.word	0x48000800
 80018f8:	48000c00 	.word	0x48000c00
 80018fc:	48001000 	.word	0x48001000
 8001900:	044aa200 	.word	0x044aa200
 8001904:	41490000 	.word	0x41490000
 8001908:	3ff00000 	.word	0x3ff00000
 800190c:	40490000 	.word	0x40490000
 8001910:	40012c00 	.word	0x40012c00
 8001914:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 8001918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191c:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <Cdd_Servo_Driver_Init+0x350>)
 800191e:	429a      	cmp	r2, r3
 8001920:	d10b      	bne.n	800193a <Cdd_Servo_Driver_Init+0x256>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001922:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <Cdd_Servo_Driver_Init+0x354>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a44      	ldr	r2, [pc, #272]	; (8001a38 <Cdd_Servo_Driver_Init+0x354>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <Cdd_Servo_Driver_Init+0x354>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
	}

	g_TimerHandler_s.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 8001940:	601a      	str	r2, [r3, #0]
	g_TimerHandler_s.Init.Prescaler = l_PSC_Value_u32;
 8001942:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 8001944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001946:	6053      	str	r3, [r2, #4]
	g_TimerHandler_s.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
	g_TimerHandler_s.Init.Period = l_ARR_Value_u32;
 800194e:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 8001950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001952:	60d3      	str	r3, [r2, #12]
	g_TimerHandler_s.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
	g_TimerHandler_s.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&g_TimerHandler_s);
 8001960:	4836      	ldr	r0, [pc, #216]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 8001962:	f001 ff8b 	bl	800387c <HAL_TIM_Base_Init>
	l_ClockSourceConfig_s.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_TIM_ConfigClockSource(&g_TimerHandler_s, &l_ClockSourceConfig_s);
 800196c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001970:	4619      	mov	r1, r3
 8001972:	4832      	ldr	r0, [pc, #200]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 8001974:	f002 fe30 	bl	80045d8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&g_TimerHandler_s);
 8001978:	4830      	ldr	r0, [pc, #192]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 800197a:	f002 f847 	bl	8003a0c <HAL_TIM_PWM_Init>
	l_MasterConfig_s.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
	l_MasterConfig_s.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIMEx_MasterConfigSynchronization(&g_TimerHandler_s, &l_MasterConfig_s);
 8001986:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198a:	4619      	mov	r1, r3
 800198c:	482b      	ldr	r0, [pc, #172]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 800198e:	f003 fcc3 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
	l_ConfigOC_s.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
	l_ConfigOC_s.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
	l_ConfigOC_s.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
	l_ConfigOC_s.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_ConfigChannel(&g_TimerHandler_s, &l_ConfigOC_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	4824      	ldr	r0, [pc, #144]	; (8001a3c <Cdd_Servo_Driver_Init+0x358>)
 80019ac:	f002 fd00 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	g_SERVO_info_s.Period_Min_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MinPulse/20.0));
 80019b0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80019b2:	f7fe fdaf 	bl	8000514 <__aeabi_ui2d>
 80019b6:	4604      	mov	r4, r0
 80019b8:	460d      	mov	r5, r1
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdca 	bl	8000558 <__aeabi_f2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <Cdd_Servo_Driver_Init+0x35c>)
 80019ca:	f7fe ff47 	bl	800085c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	f7fe fe17 	bl	8000608 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff f823 	bl	8000a2c <__aeabi_d2uiz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <Cdd_Servo_Driver_Init+0x360>)
 80019ec:	801a      	strh	r2, [r3, #0]
	g_SERVO_info_s.Period_Max_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 80019ee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80019f0:	f7fe fd90 	bl	8000514 <__aeabi_ui2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <Cdd_Servo_Driver_Init+0x364>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <Cdd_Servo_Driver_Init+0x35c>)
 8001a06:	f7fe ff29 	bl	800085c <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f7fe fdf9 	bl	8000608 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f805 	bl	8000a2c <__aeabi_d2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <Cdd_Servo_Driver_Init+0x360>)
 8001a28:	805a      	strh	r2, [r3, #2]
}
 8001a2a:	bf00      	nop
 8001a2c:	3778      	adds	r7, #120	; 0x78
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bdb0      	pop	{r4, r5, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40000800 	.word	0x40000800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	200000f0 	.word	0x200000f0
 8001a40:	40340000 	.word	0x40340000
 8001a44:	2000013c 	.word	0x2000013c
 8001a48:	41a00000 	.word	0x41a00000

08001a4c <Cdd_Servo_Init>:

void Cdd_Servo_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	/*--------[ Start The PWM Channel ]-------*/
	HAL_TIM_PWM_Start(&g_TimerHandler_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8001a50:	2300      	movs	r3, #0
 8001a52:	4619      	mov	r1, r3
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <Cdd_Servo_Init+0x14>)
 8001a56:	f002 f839 	bl	8003acc <HAL_TIM_PWM_Start>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200000f0 	.word	0x200000f0

08001a64 <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= g_SERVO_info_s.Period_Max_u16 && Pulse >= g_SERVO_info_s.Period_Min_u16)
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <Cdd_Servo_RawMove+0x30>)
 8001a70:	885b      	ldrh	r3, [r3, #2]
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d807      	bhi.n	8001a88 <Cdd_Servo_RawMove+0x24>
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <Cdd_Servo_RawMove+0x30>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d302      	bcc.n	8001a88 <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <Cdd_Servo_RawMove+0x34>)
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	6013      	str	r3, [r2, #0]
	}
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000013c 	.word	0x2000013c
 8001a98:	40000034 	.word	0x40000034

08001a9c <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <Cdd_Ultrasonic_Trigger>:
/**
  * @brief	Cdd_Ultrasonic module trigger measurement function
  * @return	None
  */
static void Cdd_Ultrasonic_Trigger(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	Rte_Call_TriggerUltrasonicMeasurement();
 8001aac:	f009 fe86 	bl	800b7bc <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <Cdd_Ultrasonic_ISR_CaptureCallback>:
  * @brief	Cdd_Ultrasonic capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	uint32 l_PS_u32 = 0UL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance) && (htim->Channel == g_Cdd_Ultrasonic_Info_s.ACTIV_CH))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a89      	ldr	r2, [pc, #548]	; (8001cec <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f040 810b 	bne.w	8001ce2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7f1a      	ldrb	r2, [r3, #28]
 8001ad0:	4b87      	ldr	r3, [pc, #540]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	f040 8103 	bne.w	8001ce2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
	{
		if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 0u)
 8001adc:	4b84      	ldr	r3, [pc, #528]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d166      	bne.n	8001bb2 <Cdd_Ultrasonic_ISR_CaptureCallback+0xfe>
		{
			/* Capture T1 & Reverse The ICU Edge Polarity */
			g_Cdd_Ultrasonic_Info_s.T1 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f002 fe3f 	bl	800476c <HAL_TIM_ReadCapturedValue>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a7f      	ldr	r2, [pc, #508]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001af2:	60d3      	str	r3, [r2, #12]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 1u;
 8001af4:	4b7e      	ldr	r3, [pc, #504]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d108      	bne.n	8001b12 <Cdd_Ultrasonic_ISR_CaptureCallback+0x5e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020a 	bic.w	r2, r2, #10
 8001b0e:	621a      	str	r2, [r3, #32]
 8001b10:	e01f      	b.n	8001b52 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8001b12:	2300      	movs	r3, #0
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d108      	bne.n	8001b2a <Cdd_Ultrasonic_ISR_CaptureCallback+0x76>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e013      	b.n	8001b52 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d108      	bne.n	8001b42 <Cdd_Ultrasonic_ISR_CaptureCallback+0x8e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e007      	b.n	8001b52 <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	2300      	movs	r3, #0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d108      	bne.n	8001b6a <Cdd_Ultrasonic_ISR_CaptureCallback+0xb6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0202 	orr.w	r2, r2, #2
 8001b66:	621a      	str	r2, [r3, #32]
 8001b68:	e01f      	b.n	8001baa <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d108      	bne.n	8001b82 <Cdd_Ultrasonic_ISR_CaptureCallback+0xce>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e013      	b.n	8001baa <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8001b82:	2300      	movs	r3, #0
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d108      	bne.n	8001b9a <Cdd_Ultrasonic_ISR_CaptureCallback+0xe6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	e007      	b.n	8001baa <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ba8:	6213      	str	r3, [r2, #32]
			g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 8001baa:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	805a      	strh	r2, [r3, #2]
		else
		{
			/* Nothing to do */
		}
	}
}
 8001bb0:	e097      	b.n	8001ce2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
		else if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 1u)
 8001bb2:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f040 8093 	bne.w	8001ce2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			l_PS_u32 = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	60fb      	str	r3, [r7, #12]
			g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	4a4a      	ldr	r2, [pc, #296]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bc8:	6093      	str	r3, [r2, #8]
			g_Cdd_Ultrasonic_Info_s.T2 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f002 fdcc 	bl	800476c <HAL_TIM_ReadCapturedValue>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a46      	ldr	r2, [pc, #280]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bd8:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.T2 += (g_Cdd_Ultrasonic_Info_s.TMR_OVC * (g_Cdd_Ultrasonic_Info_s.TMR_ARR+1u));
 8001bda:	4b45      	ldr	r3, [pc, #276]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001be0:	885b      	ldrh	r3, [r3, #2]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	3301      	adds	r3, #1
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a3f      	ldr	r2, [pc, #252]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bf2:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.DIFF = g_Cdd_Ultrasonic_Info_s.T2 - g_Cdd_Ultrasonic_Info_s.T1;
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	4a3c      	ldr	r2, [pc, #240]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001c00:	6153      	str	r3, [r2, #20]
			g_Cdd_Ultrasonic_Info_s.DISTANCE = (g_Cdd_Ultrasonic_Info_s.DIFF * CDD_ULTRASONIC_DISTANCE_SCALE_FACTOR_F32)/(c_Cdd_Ultrasonic_CfgType_s.TIM_CLK_MHz/(l_PS_u32+1u));
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe ffe6 	bl	8000bd8 <__aeabi_ui2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4939      	ldr	r1, [pc, #228]	; (8001cf4 <Cdd_Ultrasonic_ISR_CaptureCallback+0x240>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f839 	bl	8000c88 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461c      	mov	r4, r3
 8001c1a:	2248      	movs	r2, #72	; 0x48
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe ffd7 	bl	8000bd8 <__aeabi_ui2f>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff f8de 	bl	8000df0 <__aeabi_fdiv>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001c3a:	619a      	str	r2, [r3, #24]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 0u;
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d108      	bne.n	8001c5a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1a6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 020a 	bic.w	r2, r2, #10
 8001c56:	621a      	str	r2, [r3, #32]
 8001c58:	e01f      	b.n	8001c9a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d108      	bne.n	8001c72 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1be>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	e013      	b.n	8001c9a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8001c72:	2300      	movs	r3, #0
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d108      	bne.n	8001c8a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1d6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	e007      	b.n	8001c9a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d106      	bne.n	8001cae <Cdd_Ultrasonic_ISR_CaptureCallback+0x1fa>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6a12      	ldr	r2, [r2, #32]
 8001caa:	621a      	str	r2, [r3, #32]
}
 8001cac:	e019      	b.n	8001ce2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d106      	bne.n	8001cc2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x20e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	6213      	str	r3, [r2, #32]
}
 8001cc0:	e00f      	b.n	8001ce2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d106      	bne.n	8001cd6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x222>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	6213      	str	r3, [r2, #32]
}
 8001cd4:	e005      	b.n	8001ce2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	6213      	str	r3, [r2, #32]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	2000018c 	.word	0x2000018c
 8001cf4:	3c8b4396 	.word	0x3c8b4396

08001cf8 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x28>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d105      	bne.n	8001d16 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x1e>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_OVC++;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8001d0c:	885b      	ldrh	r3, [r3, #2]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8001d14:	805a      	strh	r2, [r3, #2]
	}
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40000400 	.word	0x40000400
 8001d24:	2000018c 	.word	0x2000018c

08001d28 <Cdd_Ultrasonic_Init>:
/**
  * @brief	Cdd_Ultrasonic module initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	if(TRUE == g_Cdd_Ultrasonic_DriverInitDone_b)
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <Cdd_Ultrasonic_Init+0x28>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10a      	bne.n	8001d4a <Cdd_Ultrasonic_Init+0x22>
	{
		/*--------[ Start The ICU Channel ]-------*/
		HAL_TIM_Base_Start_IT(&htim3);
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <Cdd_Ultrasonic_Init+0x2c>)
 8001d36:	f001 fdf9 	bl	800392c <HAL_TIM_Base_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <Cdd_Ultrasonic_Init+0x2c>)
 8001d40:	f002 f830 	bl	8003da4 <HAL_TIM_IC_Start_IT>
		/* Set initialization flag to done */
		g_Cdd_Ultrasonic_InitDone_b = TRUE;
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <Cdd_Ultrasonic_Init+0x30>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200001b1 	.word	0x200001b1
 8001d54:	20000140 	.word	0x20000140
 8001d58:	200001b0 	.word	0x200001b0

08001d5c <Cdd_Ultrasonic_Driver_Init>:
/**
  * @brief	Cdd_Ultrasonic module driver initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Driver_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b096      	sub	sp, #88	; 0x58
 8001d60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8001d62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]

    /*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOA)
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001d9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001da0:	d10c      	bne.n	8001dbc <Cdd_Ultrasonic_Driver_Init+0x60>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a6c      	ldr	r2, [pc, #432]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	e042      	b.n	8001e42 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOB)
 8001dbc:	4a65      	ldr	r2, [pc, #404]	; (8001f54 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d10c      	bne.n	8001dde <Cdd_Ultrasonic_Driver_Init+0x82>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	4a63      	ldr	r2, [pc, #396]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dce:	6153      	str	r3, [r2, #20]
 8001dd0:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	e031      	b.n	8001e42 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOC)
 8001dde:	4a5d      	ldr	r2, [pc, #372]	; (8001f54 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <Cdd_Ultrasonic_Driver_Init+0x200>)
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d10c      	bne.n	8001e00 <Cdd_Ultrasonic_Driver_Init+0xa4>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4a5b      	ldr	r2, [pc, #364]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001df0:	6153      	str	r3, [r2, #20]
 8001df2:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	e020      	b.n	8001e42 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOD)
 8001e00:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001e02:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <Cdd_Ultrasonic_Driver_Init+0x204>)
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10c      	bne.n	8001e22 <Cdd_Ultrasonic_Driver_Init+0xc6>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e12:	6153      	str	r3, [r2, #20]
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	e00f      	b.n	8001e42 <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOE)
 8001e22:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <Cdd_Ultrasonic_Driver_Init+0x208>)
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d10b      	bne.n	8001e42 <Cdd_Ultrasonic_Driver_Init+0xe6>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e34:	6153      	str	r3, [r2, #20]
 8001e36:	4b48      	ldr	r3, [pc, #288]	; (8001f58 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
    }
    TRIG_GPIO_InitStruct.Pin = c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8001e54:	4a3f      	ldr	r2, [pc, #252]	; (8001f54 <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8001e56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f001 f8ff 	bl	8003060 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	g_Cdd_Ultrasonic_Info_s.TMR_PSC = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	4a41      	ldr	r2, [pc, #260]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e68:	6053      	str	r3, [r2, #4]
	g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8001e6a:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	4a3f      	ldr	r2, [pc, #252]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e70:	6093      	str	r3, [r2, #8]
	g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 8001e72:	4b3e      	ldr	r3, [pc, #248]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	805a      	strh	r2, [r3, #2]
	g_Cdd_Ultrasonic_Info_s.HTIM = &htim3;
 8001e78:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e7a:	4a3d      	ldr	r2, [pc, #244]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001e7c:	61da      	str	r2, [r3, #28]
	if(g_Cdd_Ultrasonic_Info_s.TMR_ARR == 0u)
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <Cdd_Ultrasonic_Driver_Init+0x132>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_ARR = 65535u;
 8001e86:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8c:	609a      	str	r2, [r3, #8]
	}
	if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_1)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d104      	bne.n	8001e9e <Cdd_Ultrasonic_Driver_Init+0x142>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]
 8001e9c:	e016      	b.n	8001ecc <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_2)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d104      	bne.n	8001eae <Cdd_Ultrasonic_Driver_Init+0x152>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2020 	strb.w	r2, [r3, #32]
 8001eac:	e00e      	b.n	8001ecc <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_3)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d104      	bne.n	8001ebe <Cdd_Ultrasonic_Driver_Init+0x162>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	f883 2020 	strb.w	r2, [r3, #32]
 8001ebc:	e006      	b.n	8001ecc <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_4)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d103      	bne.n	8001ecc <Cdd_Ultrasonic_Driver_Init+0x170>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/
	htim3.Instance = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance;
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001ed0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = g_Cdd_Ultrasonic_Info_s.TMR_PSC;
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001ed8:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = g_Cdd_Ultrasonic_Info_s.TMR_ARR;
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <Cdd_Ultrasonic_Driver_Init+0x210>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001ee6:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 8001ef4:	481e      	ldr	r0, [pc, #120]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001ef6:	f001 fcc1 	bl	800387c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001f00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f04:	4619      	mov	r1, r3
 8001f06:	481a      	ldr	r0, [pc, #104]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001f08:	f002 fb66 	bl	80045d8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim3);
 8001f0c:	4818      	ldr	r0, [pc, #96]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001f0e:	f001 fee9 	bl	8003ce4 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4813      	ldr	r0, [pc, #76]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001f22:	f003 f9f9 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0u;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f107 0318 	add.w	r3, r7, #24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8001f40:	f002 f999 	bl	8004276 <HAL_TIM_IC_ConfigChannel>
	/* Set driver initialization flag to done */
	g_Cdd_Ultrasonic_DriverInitDone_b = TRUE;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <Cdd_Ultrasonic_Driver_Init+0x218>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	3758      	adds	r7, #88	; 0x58
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	48000400 	.word	0x48000400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48001000 	.word	0x48001000
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	2000018c 	.word	0x2000018c
 8001f70:	20000140 	.word	0x20000140
 8001f74:	200001b1 	.word	0x200001b1

08001f78 <Cdd_Ultrasonic_MainFunction>:
/**
  * @brief	Cdd_Ultrasonic module main function (runs in task)
  * @return	None
  */
void Cdd_Ultrasonic_MainFunction(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Cdd_Ultrasonic_InitDone_b)
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <Cdd_Ultrasonic_MainFunction+0x2c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10c      	bne.n	8001f9e <Cdd_Ultrasonic_MainFunction+0x26>
	{
		/* Trigger measurement every 2nd cycle ( 20ms = 2 * task cycle ) */
		if(FALSE == g_Cdd_Ultrasonic_TriggerFlag_b)
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <Cdd_Ultrasonic_MainFunction+0x30>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <Cdd_Ultrasonic_MainFunction+0x1c>
		{
			/* Trigger measurement next cycle */
			g_Cdd_Ultrasonic_TriggerFlag_b = TRUE;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <Cdd_Ultrasonic_MainFunction+0x30>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
			/* Call trigger function */
			Cdd_Ultrasonic_Trigger();
		}
	}
}
 8001f92:	e004      	b.n	8001f9e <Cdd_Ultrasonic_MainFunction+0x26>
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <Cdd_Ultrasonic_MainFunction+0x30>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
			Cdd_Ultrasonic_Trigger();
 8001f9a:	f7ff fd85 	bl	8001aa8 <Cdd_Ultrasonic_Trigger>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200001b0 	.word	0x200001b0
 8001fa8:	200001b2 	.word	0x200001b2

08001fac <Cdd_Ultrasonic_ReadDistance>:
/**
  * @brief	Cdd_Ultrasonic module read distance function
  * @return	Last measured distance in centimeters
  */
float32 Cdd_Ultrasonic_ReadDistance(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
	float32 l_Distance_f32 = 0.0f;
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
	l_Distance_f32 = g_Cdd_Ultrasonic_Info_s.DISTANCE;
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <Cdd_Ultrasonic_ReadDistance+0x20>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	607b      	str	r3, [r7, #4]
	return l_Distance_f32;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000018c 	.word	0x2000018c

08001fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief	Cdd_Ultrasonic external capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_CaptureCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fd6b 	bl	8001ab4 <Cdd_Ultrasonic_ISR_CaptureCallback>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic external period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_PeriodElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fe82 	bl	8001cf8 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09a      	sub	sp, #104	; 0x68
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e1e3      	b.n	8002408 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d176      	bne.n	8002140 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d152      	bne.n	8002100 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 f9e3 	bl	8007440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d13b      	bne.n	8002100 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 ff83 	bl	8002f94 <ADC_Disable>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	d12f      	bne.n	8002100 <HAL_ADC_Init+0xe0>
 80020a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12b      	bne.n	8002100 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b0:	f023 0302 	bic.w	r3, r3, #2
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <HAL_ADC_Init+0x308>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a92      	ldr	r2, [pc, #584]	; (800232c <HAL_ADC_Init+0x30c>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9a      	lsrs	r2, r3, #18
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f2:	e002      	b.n	80020fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f9      	bne.n	80020f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800211c:	d110      	bne.n	8002140 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f023 0312 	bic.w	r3, r3, #18
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 8150 	bne.w	80023ee <HAL_ADC_Init+0x3ce>
 800214e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 814b 	bne.w	80023ee <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 8143 	bne.w	80023ee <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002170:	f043 0202 	orr.w	r2, r3, #2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002180:	d004      	beq.n	800218c <HAL_ADC_Init+0x16c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6a      	ldr	r2, [pc, #424]	; (8002330 <HAL_ADC_Init+0x310>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_ADC_Init+0x170>
 800218c:	4b69      	ldr	r3, [pc, #420]	; (8002334 <HAL_ADC_Init+0x314>)
 800218e:	e000      	b.n	8002192 <HAL_ADC_Init+0x172>
 8002190:	4b69      	ldr	r3, [pc, #420]	; (8002338 <HAL_ADC_Init+0x318>)
 8002192:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219c:	d102      	bne.n	80021a4 <HAL_ADC_Init+0x184>
 800219e:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_ADC_Init+0x310>)
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e01a      	b.n	80021da <HAL_ADC_Init+0x1ba>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a61      	ldr	r2, [pc, #388]	; (8002330 <HAL_ADC_Init+0x310>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d103      	bne.n	80021b6 <HAL_ADC_Init+0x196>
 80021ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e011      	b.n	80021da <HAL_ADC_Init+0x1ba>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_ADC_Init+0x31c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d102      	bne.n	80021c6 <HAL_ADC_Init+0x1a6>
 80021c0:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_ADC_Init+0x320>)
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e009      	b.n	80021da <HAL_ADC_Init+0x1ba>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5d      	ldr	r2, [pc, #372]	; (8002340 <HAL_ADC_Init+0x320>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d102      	bne.n	80021d6 <HAL_ADC_Init+0x1b6>
 80021d0:	4b5a      	ldr	r3, [pc, #360]	; (800233c <HAL_ADC_Init+0x31c>)
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e001      	b.n	80021da <HAL_ADC_Init+0x1ba>
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d108      	bne.n	80021fa <HAL_ADC_Init+0x1da>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_Init+0x1da>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_ADC_Init+0x1dc>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11c      	bne.n	800223a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002200:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d010      	beq.n	8002228 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_ADC_Init+0x202>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_Init+0x202>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_ADC_Init+0x204>
 8002222:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002224:	2b00      	cmp	r3, #0
 8002226:	d108      	bne.n	800223a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	431a      	orrs	r2, r3
 8002236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002238:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7e5b      	ldrb	r3, [r3, #25]
 800223e:	035b      	lsls	r3, r3, #13
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002244:	2a01      	cmp	r2, #1
 8002246:	d002      	beq.n	800224e <HAL_ADC_Init+0x22e>
 8002248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224c:	e000      	b.n	8002250 <HAL_ADC_Init+0x230>
 800224e:	2200      	movs	r2, #0
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4313      	orrs	r3, r2
 800225e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002260:	4313      	orrs	r3, r2
 8002262:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d11b      	bne.n	80022a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7e5b      	ldrb	r3, [r3, #25]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	3b01      	subs	r3, #1
 800227c:	045a      	lsls	r2, r3, #17
 800227e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002280:	4313      	orrs	r3, r2
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	663b      	str	r3, [r7, #96]	; 0x60
 8002288:	e00d      	b.n	80022a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d054      	beq.n	8002358 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_ADC_Init+0x31c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_ADC_Init+0x2a2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a20      	ldr	r2, [pc, #128]	; (8002340 <HAL_ADC_Init+0x320>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d140      	bne.n	8002344 <HAL_ADC_Init+0x324>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80022ca:	d02a      	beq.n	8002322 <HAL_ADC_Init+0x302>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d4:	d022      	beq.n	800231c <HAL_ADC_Init+0x2fc>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80022de:	d01a      	beq.n	8002316 <HAL_ADC_Init+0x2f6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80022e8:	d012      	beq.n	8002310 <HAL_ADC_Init+0x2f0>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80022f2:	d00a      	beq.n	800230a <HAL_ADC_Init+0x2ea>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80022fc:	d002      	beq.n	8002304 <HAL_ADC_Init+0x2e4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	e023      	b.n	800234c <HAL_ADC_Init+0x32c>
 8002304:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002308:	e020      	b.n	800234c <HAL_ADC_Init+0x32c>
 800230a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800230e:	e01d      	b.n	800234c <HAL_ADC_Init+0x32c>
 8002310:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002314:	e01a      	b.n	800234c <HAL_ADC_Init+0x32c>
 8002316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231a:	e017      	b.n	800234c <HAL_ADC_Init+0x32c>
 800231c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002320:	e014      	b.n	800234c <HAL_ADC_Init+0x32c>
 8002322:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002326:	e011      	b.n	800234c <HAL_ADC_Init+0x32c>
 8002328:	20000000 	.word	0x20000000
 800232c:	431bde83 	.word	0x431bde83
 8002330:	50000100 	.word	0x50000100
 8002334:	50000300 	.word	0x50000300
 8002338:	50000700 	.word	0x50000700
 800233c:	50000400 	.word	0x50000400
 8002340:	50000500 	.word	0x50000500
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002350:	4313      	orrs	r3, r2
 8002352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002354:	4313      	orrs	r3, r2
 8002356:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7e1b      	ldrb	r3, [r3, #24]
 800237e:	039a      	lsls	r2, r3, #14
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4313      	orrs	r3, r2
 800238a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800238c:	4313      	orrs	r3, r2
 800238e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_ADC_Init+0x3f0>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80023a0:	430b      	orrs	r3, r1
 80023a2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10c      	bne.n	80023c6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f023 010f 	bic.w	r1, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
 80023c4:	e007      	b.n	80023d6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 020f 	bic.w	r2, r2, #15
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f023 0303 	bic.w	r3, r3, #3
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
 80023ec:	e00a      	b.n	8002404 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f023 0312 	bic.w	r3, r3, #18
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002408:	4618      	mov	r0, r3
 800240a:	3768      	adds	r7, #104	; 0x68
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	fff0c007 	.word	0xfff0c007

08002414 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 80f7 	bne.w	8002622 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Start_DMA+0x2e>
 800243e:	2302      	movs	r3, #2
 8002440:	e0f2      	b.n	8002628 <HAL_ADC_Start_DMA+0x214>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002452:	d004      	beq.n	800245e <HAL_ADC_Start_DMA+0x4a>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a75      	ldr	r2, [pc, #468]	; (8002630 <HAL_ADC_Start_DMA+0x21c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d109      	bne.n	8002472 <HAL_ADC_Start_DMA+0x5e>
 800245e:	4b75      	ldr	r3, [pc, #468]	; (8002634 <HAL_ADC_Start_DMA+0x220>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e008      	b.n	8002484 <HAL_ADC_Start_DMA+0x70>
 8002472:	4b71      	ldr	r3, [pc, #452]	; (8002638 <HAL_ADC_Start_DMA+0x224>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80c5 	beq.w	8002614 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fd1e 	bl	8002ecc <ADC_Enable>
 8002490:	4603      	mov	r3, r0
 8002492:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 80b7 	bne.w	800260a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b8:	d004      	beq.n	80024c4 <HAL_ADC_Start_DMA+0xb0>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5c      	ldr	r2, [pc, #368]	; (8002630 <HAL_ADC_Start_DMA+0x21c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_Start_DMA+0xbe>
 80024c4:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_ADC_Start_DMA+0x220>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_ADC_Start_DMA+0xde>
 80024d0:	e005      	b.n	80024de <HAL_ADC_Start_DMA+0xca>
 80024d2:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_ADC_Start_DMA+0x224>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_ADC_Start_DMA+0xde>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e6:	d004      	beq.n	80024f2 <HAL_ADC_Start_DMA+0xde>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_ADC_Start_DMA+0x228>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d115      	bne.n	800251e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d036      	beq.n	800257a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002514:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800251c:	e02d      	b.n	800257a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002532:	d004      	beq.n	800253e <HAL_ADC_Start_DMA+0x12a>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <HAL_ADC_Start_DMA+0x21c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10a      	bne.n	8002554 <HAL_ADC_Start_DMA+0x140>
 800253e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e008      	b.n	8002566 <HAL_ADC_Start_DMA+0x152>
 8002554:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_ADC_Start_DMA+0x228>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d106      	bne.n	8002596 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f023 0206 	bic.w	r2, r3, #6
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
 8002594:	e002      	b.n	800259c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <HAL_ADC_Start_DMA+0x22c>)
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	4a24      	ldr	r2, [pc, #144]	; (8002644 <HAL_ADC_Start_DMA+0x230>)
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <HAL_ADC_Start_DMA+0x234>)
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	221c      	movs	r2, #28
 80025c2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0210 	orr.w	r2, r2, #16
 80025d2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3340      	adds	r3, #64	; 0x40
 80025ee:	4619      	mov	r1, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f000 ff4b 	bl	800348e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0204 	orr.w	r2, r2, #4
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e00d      	b.n	8002626 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002612:	e008      	b.n	8002626 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002620:	e001      	b.n	8002626 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	50000100 	.word	0x50000100
 8002634:	50000300 	.word	0x50000300
 8002638:	50000700 	.word	0x50000700
 800263c:	50000400 	.word	0x50000400
 8002640:	08002e01 	.word	0x08002e01
 8002644:	08002e7b 	.word	0x08002e7b
 8002648:	08002e97 	.word	0x08002e97

0800264c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800264c:	b480      	push	{r7}
 800264e:	b09b      	sub	sp, #108	; 0x6c
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x22>
 800266a:	2302      	movs	r3, #2
 800266c:	e2c8      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x5b4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 82ac 	bne.w	8002bde <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b04      	cmp	r3, #4
 800268c:	d81c      	bhi.n	80026c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	461a      	mov	r2, r3
 80026a2:	231f      	movs	r3, #31
 80026a4:	4093      	lsls	r3, r2
 80026a6:	43db      	mvns	r3, r3
 80026a8:	4019      	ands	r1, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
 80026c6:	e063      	b.n	8002790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d81e      	bhi.n	800270e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	3b1e      	subs	r3, #30
 80026e4:	221f      	movs	r2, #31
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4019      	ands	r1, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	3b1e      	subs	r3, #30
 8002700:	fa00 f203 	lsl.w	r2, r0, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	635a      	str	r2, [r3, #52]	; 0x34
 800270c:	e040      	b.n	8002790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b0e      	cmp	r3, #14
 8002714:	d81e      	bhi.n	8002754 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	3b3c      	subs	r3, #60	; 0x3c
 800272a:	221f      	movs	r2, #31
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	4019      	ands	r1, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	3b3c      	subs	r3, #60	; 0x3c
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
 8002752:	e01d      	b.n	8002790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	3b5a      	subs	r3, #90	; 0x5a
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	4019      	ands	r1, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	3b5a      	subs	r3, #90	; 0x5a
 8002784:	fa00 f203 	lsl.w	r2, r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80e5 	bne.w	800296a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d91c      	bls.n	80027e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6999      	ldr	r1, [r3, #24]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	3b1e      	subs	r3, #30
 80027ba:	2207      	movs	r2, #7
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4019      	ands	r1, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6898      	ldr	r0, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	3b1e      	subs	r3, #30
 80027d4:	fa00 f203 	lsl.w	r2, r0, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
 80027e0:	e019      	b.n	8002816 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	2207      	movs	r2, #7
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4019      	ands	r1, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6898      	ldr	r0, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	fa00 f203 	lsl.w	r2, r0, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b03      	cmp	r3, #3
 8002836:	d84f      	bhi.n	80028d8 <HAL_ADC_ConfigChannel+0x28c>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <HAL_ADC_ConfigChannel+0x1f4>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002851 	.word	0x08002851
 8002844:	08002873 	.word	0x08002873
 8002848:	08002895 	.word	0x08002895
 800284c:	080028b7 	.word	0x080028b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002856:	4b99      	ldr	r3, [pc, #612]	; (8002abc <HAL_ADC_ConfigChannel+0x470>)
 8002858:	4013      	ands	r3, r2
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	0691      	lsls	r1, r2, #26
 8002860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002862:	430a      	orrs	r2, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800286e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002870:	e07b      	b.n	800296a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002878:	4b90      	ldr	r3, [pc, #576]	; (8002abc <HAL_ADC_ConfigChannel+0x470>)
 800287a:	4013      	ands	r3, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	0691      	lsls	r1, r2, #26
 8002882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002884:	430a      	orrs	r2, r1
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002890:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002892:	e06a      	b.n	800296a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800289a:	4b88      	ldr	r3, [pc, #544]	; (8002abc <HAL_ADC_ConfigChannel+0x470>)
 800289c:	4013      	ands	r3, r2
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	0691      	lsls	r1, r2, #26
 80028a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028a6:	430a      	orrs	r2, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028b4:	e059      	b.n	800296a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028bc:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_ADC_ConfigChannel+0x470>)
 80028be:	4013      	ands	r3, r2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	0691      	lsls	r1, r2, #26
 80028c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028c8:	430a      	orrs	r2, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028d6:	e048      	b.n	800296a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	069b      	lsls	r3, r3, #26
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002942:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	429a      	cmp	r2, r3
 8002956:	d107      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002966:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002968:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d108      	bne.n	800298a <HAL_ADC_ConfigChannel+0x33e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x33e>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_ADC_ConfigChannel+0x340>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 8131 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d00f      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2201      	movs	r2, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43da      	mvns	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	400a      	ands	r2, r1
 80029b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80029b8:	e049      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d91c      	bls.n	8002a16 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6999      	ldr	r1, [r3, #24]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1b      	subs	r3, #27
 80029ee:	2207      	movs	r2, #7
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	3b1b      	subs	r3, #27
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	e01b      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6959      	ldr	r1, [r3, #20]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	2207      	movs	r2, #7
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	4019      	ands	r1, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6898      	ldr	r0, [r3, #8]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a56:	d004      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0x416>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_ADC_ConfigChannel+0x474>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x41a>
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_ADC_ConfigChannel+0x478>)
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x41c>
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_ADC_ConfigChannel+0x47c>)
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d105      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d015      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a82:	2b11      	cmp	r3, #17
 8002a84:	d105      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a96:	2b12      	cmp	r3, #18
 8002a98:	f040 80ac 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 80a5 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x480>
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <HAL_ADC_ConfigChannel+0x474>)
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e023      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x4b6>
 8002aba:	bf00      	nop
 8002abc:	83fff000 	.word	0x83fff000
 8002ac0:	50000100 	.word	0x50000100
 8002ac4:	50000300 	.word	0x50000300
 8002ac8:	50000700 	.word	0x50000700
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4e      	ldr	r2, [pc, #312]	; (8002c0c <HAL_ADC_ConfigChannel+0x5c0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d103      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x492>
 8002ad6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e011      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x4b6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <HAL_ADC_ConfigChannel+0x5c4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d102      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x4a2>
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_ADC_ConfigChannel+0x5c8>)
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e009      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x4b6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_ADC_ConfigChannel+0x5c8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x4b2>
 8002af8:	4b45      	ldr	r3, [pc, #276]	; (8002c10 <HAL_ADC_ConfigChannel+0x5c4>)
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e001      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x4b6>
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d108      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x4d6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x4d6>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x4d8>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d150      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d010      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x4fe>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x4fe>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x500>
 8002b4a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d13c      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d11d      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x548>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b60:	d118      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2a      	ldr	r2, [pc, #168]	; (8002c1c <HAL_ADC_ConfigChannel+0x5d0>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	0c9a      	lsrs	r2, r3, #18
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b84:	e002      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f9      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b92:	e02e      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b11      	cmp	r3, #17
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x568>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba4:	d106      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bb2:	e01e      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d11a      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bc8:	e013      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bdc:	e00a      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bf2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	376c      	adds	r7, #108	; 0x6c
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	50000100 	.word	0x50000100
 8002c10:	50000400 	.word	0x50000400
 8002c14:	50000500 	.word	0x50000500
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	431bde83 	.word	0x431bde83

08002c20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b099      	sub	sp, #100	; 0x64
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c38:	d102      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	e01a      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a69      	ldr	r2, [pc, #420]	; (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d103      	bne.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002c4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	e011      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c5c:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	e009      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a63      	ldr	r2, [pc, #396]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c6c:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	e001      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b0      	b.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0a9      	b.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 808d 	bne.w	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 8086 	bne.w	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbc:	d004      	beq.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002cca:	e000      	b.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002cce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d040      	beq.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cea:	035b      	lsls	r3, r3, #13
 8002cec:	430b      	orrs	r3, r1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d15c      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002d36:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d14b      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d44:	f023 030f 	bic.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	431a      	orrs	r2, r3
 8002d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d56:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d58:	e03c      	b.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d64:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d108      	bne.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d123      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002da8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d112      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002db6:	f023 030f 	bic.w	r3, r3, #15
 8002dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dbc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dbe:	e009      	b.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002de2:	4618      	mov	r0, r3
 8002de4:	3764      	adds	r7, #100	; 0x64
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	50000100 	.word	0x50000100
 8002df0:	50000400 	.word	0x50000400
 8002df4:	50000500 	.word	0x50000500
 8002df8:	50000300 	.word	0x50000300
 8002dfc:	50000700 	.word	0x50000700

08002e00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d126      	bne.n	8002e68 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d115      	bne.n	8002e60 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d111      	bne.n	8002e60 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f007 fdf3 	bl	800aa4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002e66:	e004      	b.n	8002e72 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff f8b7 	bl	8001ffc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff f8a6 	bl	800200e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d108      	bne.n	8002ef8 <ADC_Enable+0x2c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <ADC_Enable+0x2c>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <ADC_Enable+0x2e>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d143      	bne.n	8002f86 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <ADC_Enable+0xc4>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e02f      	b.n	8002f88 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f38:	f004 f948 	bl	80071cc <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f3e:	e01b      	b.n	8002f78 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f40:	f004 f944 	bl	80071cc <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d914      	bls.n	8002f78 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d00d      	beq.n	8002f78 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0210 	orr.w	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d1dc      	bne.n	8002f40 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	8000003f 	.word	0x8000003f

08002f94 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <ADC_Disable+0x2c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <ADC_Disable+0x2c>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <ADC_Disable+0x2e>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d047      	beq.n	8003056 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030d 	and.w	r3, r3, #13
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10f      	bne.n	8002ff4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0202 	orr.w	r2, r2, #2
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002fec:	f004 f8ee 	bl	80071cc <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ff2:	e029      	b.n	8003048 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e023      	b.n	8003058 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003010:	f004 f8dc 	bl	80071cc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d914      	bls.n	8003048 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d10d      	bne.n	8003048 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f043 0210 	orr.w	r2, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e007      	b.n	8003058 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d0dc      	beq.n	8003010 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	e160      	b.n	8003332 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8152 	beq.w	800332c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d005      	beq.n	80030a0 <HAL_GPIO_Init+0x40>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d130      	bne.n	8003102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d6:	2201      	movs	r2, #1
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 0201 	and.w	r2, r3, #1
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b03      	cmp	r3, #3
 800310c:	d017      	beq.n	800313e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d123      	bne.n	8003192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80ac 	beq.w	800332c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d4:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <HAL_GPIO_Init+0x2f0>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	4a5d      	ldr	r2, [pc, #372]	; (8003350 <HAL_GPIO_Init+0x2f0>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6193      	str	r3, [r2, #24]
 80031e0:	4b5b      	ldr	r3, [pc, #364]	; (8003350 <HAL_GPIO_Init+0x2f0>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ec:	4a59      	ldr	r2, [pc, #356]	; (8003354 <HAL_GPIO_Init+0x2f4>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003216:	d025      	beq.n	8003264 <HAL_GPIO_Init+0x204>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a4f      	ldr	r2, [pc, #316]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d01f      	beq.n	8003260 <HAL_GPIO_Init+0x200>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_GPIO_Init+0x2fc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d019      	beq.n	800325c <HAL_GPIO_Init+0x1fc>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_GPIO_Init+0x300>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <HAL_GPIO_Init+0x1f8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a4c      	ldr	r2, [pc, #304]	; (8003364 <HAL_GPIO_Init+0x304>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00d      	beq.n	8003254 <HAL_GPIO_Init+0x1f4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a4b      	ldr	r2, [pc, #300]	; (8003368 <HAL_GPIO_Init+0x308>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <HAL_GPIO_Init+0x1f0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a4a      	ldr	r2, [pc, #296]	; (800336c <HAL_GPIO_Init+0x30c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_GPIO_Init+0x1ec>
 8003248:	2306      	movs	r3, #6
 800324a:	e00c      	b.n	8003266 <HAL_GPIO_Init+0x206>
 800324c:	2307      	movs	r3, #7
 800324e:	e00a      	b.n	8003266 <HAL_GPIO_Init+0x206>
 8003250:	2305      	movs	r3, #5
 8003252:	e008      	b.n	8003266 <HAL_GPIO_Init+0x206>
 8003254:	2304      	movs	r3, #4
 8003256:	e006      	b.n	8003266 <HAL_GPIO_Init+0x206>
 8003258:	2303      	movs	r3, #3
 800325a:	e004      	b.n	8003266 <HAL_GPIO_Init+0x206>
 800325c:	2302      	movs	r3, #2
 800325e:	e002      	b.n	8003266 <HAL_GPIO_Init+0x206>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_GPIO_Init+0x206>
 8003264:	2300      	movs	r3, #0
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	f002 0203 	and.w	r2, r2, #3
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	4093      	lsls	r3, r2
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003276:	4937      	ldr	r1, [pc, #220]	; (8003354 <HAL_GPIO_Init+0x2f4>)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003284:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <HAL_GPIO_Init+0x310>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032a8:	4a31      	ldr	r2, [pc, #196]	; (8003370 <HAL_GPIO_Init+0x310>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032ae:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_GPIO_Init+0x310>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032d2:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_GPIO_Init+0x310>)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d8:	4b25      	ldr	r3, [pc, #148]	; (8003370 <HAL_GPIO_Init+0x310>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_GPIO_Init+0x310>)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_GPIO_Init+0x310>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <HAL_GPIO_Init+0x310>)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3301      	adds	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	f47f ae97 	bne.w	8003070 <HAL_GPIO_Init+0x10>
  }
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	40010000 	.word	0x40010000
 8003358:	48000400 	.word	0x48000400
 800335c:	48000800 	.word	0x48000800
 8003360:	48000c00 	.word	0x48000c00
 8003364:	48001000 	.word	0x48001000
 8003368:	48001400 	.word	0x48001400
 800336c:	48001800 	.word	0x48001800
 8003370:	40010400 	.word	0x40010400

08003374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
 8003390:	e001      	b.n	8003396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	807b      	strh	r3, [r7, #2]
 80033ae:	4613      	mov	r3, r2
 80033b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b2:	787b      	ldrb	r3, [r7, #1]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033b8:	887a      	ldrh	r2, [r7, #2]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033be:	e002      	b.n	80033c6 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c0:	887a      	ldrh	r2, [r7, #2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 fe6a 	bl	80070c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e037      	b.n	8003486 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800342c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003430:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800343a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003446:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003452:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f9c1 	bl	80037f0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}  
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_DMA_Start_IT+0x20>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e04a      	b.n	8003544 <HAL_DMA_Start_IT+0xb6>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d13a      	bne.n	8003536 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f956 	bl	8003796 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 020e 	orr.w	r2, r2, #14
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e00f      	b.n	8003524 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 020a 	orr.w	r2, r2, #10
 8003512:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e005      	b.n	8003542 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003542:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800355a:	2b02      	cmp	r3, #2
 800355c:	d008      	beq.n	8003570 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2204      	movs	r2, #4
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e020      	b.n	80035b2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 020e 	bic.w	r2, r2, #14
 800357e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d005      	beq.n	80035de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2204      	movs	r2, #4
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	e027      	b.n	800362e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 020e 	bic.w	r2, r2, #14
 80035ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f202 	lsl.w	r2, r1, r2
 800360c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
    } 
  }
  return status;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2204      	movs	r2, #4
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d024      	beq.n	80036aa <HAL_DMA_IRQHandler+0x72>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d01f      	beq.n	80036aa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	2104      	movs	r1, #4
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d06a      	beq.n	8003776 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80036a8:	e065      	b.n	8003776 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2202      	movs	r2, #2
 80036b0:	409a      	lsls	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_IRQHandler+0xdc>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d027      	beq.n	8003714 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 020a 	bic.w	r2, r2, #10
 80036e0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	2102      	movs	r1, #2
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	d035      	beq.n	8003776 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003712:	e030      	b.n	8003776 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	2208      	movs	r2, #8
 800371a:	409a      	lsls	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d028      	beq.n	8003776 <HAL_DMA_IRQHandler+0x13e>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d023      	beq.n	8003776 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 020e 	bic.w	r2, r2, #14
 800373c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f202 	lsl.w	r2, r1, r2
 800374c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
    }
  }
}  
 8003774:	e7ff      	b.n	8003776 <HAL_DMA_IRQHandler+0x13e>
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f202 	lsl.w	r2, r1, r2
 80037b2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d108      	bne.n	80037d6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037d4:	e007      	b.n	80037e6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <DMA_CalcBaseAndBitshift+0x5c>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d80f      	bhi.n	8003824 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <DMA_CalcBaseAndBitshift+0x60>)
 800380c:	4413      	add	r3, r2
 800380e:	4a11      	ldr	r2, [pc, #68]	; (8003854 <DMA_CalcBaseAndBitshift+0x64>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	009a      	lsls	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <DMA_CalcBaseAndBitshift+0x68>)
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003822:	e00e      	b.n	8003842 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <DMA_CalcBaseAndBitshift+0x6c>)
 800382c:	4413      	add	r3, r2
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <DMA_CalcBaseAndBitshift+0x64>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	009a      	lsls	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <DMA_CalcBaseAndBitshift+0x70>)
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	40020407 	.word	0x40020407
 8003850:	bffdfff8 	.word	0xbffdfff8
 8003854:	cccccccd 	.word	0xcccccccd
 8003858:	40020000 	.word	0x40020000
 800385c:	bffdfbf8 	.word	0xbffdfbf8
 8003860:	40020400 	.word	0x40020400

08003864 <Gpt_Init>:
#include "Gpt.h"

static boolean g_Gpt_InitDone_b = FALSE;

void Gpt_Init(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
	g_Gpt_InitDone_b = TRUE;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <Gpt_Init+0x14>)
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
}
 800386e:	bf00      	nop
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	200001b3 	.word	0x200001b3

0800387c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e049      	b.n	8003922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f003 ff8e 	bl	80077c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f000 ffb6 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e04f      	b.n	80039e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0x76>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d018      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0x76>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0x76>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0x76>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_TIM_Base_Start_IT+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0x76>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0x76>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_TIM_Base_Start_IT+0xd8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d115      	bne.n	80039ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_TIM_Base_Start_IT+0xdc>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b06      	cmp	r3, #6
 80039b2:	d015      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0xb4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ba:	d011      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039cc:	e008      	b.n	80039e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e000      	b.n	80039e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40013400 	.word	0x40013400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40015000 	.word	0x40015000
 8003a08:	00010007 	.word	0x00010007

08003a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e049      	b.n	8003ab2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f841 	bl	8003aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 feee 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_TIM_PWM_Start+0x24>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e03c      	b.n	8003b6a <HAL_TIM_PWM_Start+0x9e>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d109      	bne.n	8003b0a <HAL_TIM_PWM_Start+0x3e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e02f      	b.n	8003b6a <HAL_TIM_PWM_Start+0x9e>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d109      	bne.n	8003b24 <HAL_TIM_PWM_Start+0x58>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e022      	b.n	8003b6a <HAL_TIM_PWM_Start+0x9e>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d109      	bne.n	8003b3e <HAL_TIM_PWM_Start+0x72>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	e015      	b.n	8003b6a <HAL_TIM_PWM_Start+0x9e>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d109      	bne.n	8003b58 <HAL_TIM_PWM_Start+0x8c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	bf14      	ite	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	2300      	moveq	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e008      	b.n	8003b6a <HAL_TIM_PWM_Start+0x9e>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0a1      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xb6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b80:	e023      	b.n	8003bca <HAL_TIM_PWM_Start+0xfe>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Start+0xc6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	e01b      	b.n	8003bca <HAL_TIM_PWM_Start+0xfe>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Start+0xd6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba0:	e013      	b.n	8003bca <HAL_TIM_PWM_Start+0xfe>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0xe6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb0:	e00b      	b.n	8003bca <HAL_TIM_PWM_Start+0xfe>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0xf6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc0:	e003      	b.n	8003bca <HAL_TIM_PWM_Start+0xfe>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fb7b 	bl	80052ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a38      	ldr	r2, [pc, #224]	; (8003cc0 <HAL_TIM_PWM_Start+0x1f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d018      	beq.n	8003c14 <HAL_TIM_PWM_Start+0x148>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a37      	ldr	r2, [pc, #220]	; (8003cc4 <HAL_TIM_PWM_Start+0x1f8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d013      	beq.n	8003c14 <HAL_TIM_PWM_Start+0x148>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a35      	ldr	r2, [pc, #212]	; (8003cc8 <HAL_TIM_PWM_Start+0x1fc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00e      	beq.n	8003c14 <HAL_TIM_PWM_Start+0x148>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_TIM_PWM_Start+0x200>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d009      	beq.n	8003c14 <HAL_TIM_PWM_Start+0x148>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a32      	ldr	r2, [pc, #200]	; (8003cd0 <HAL_TIM_PWM_Start+0x204>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIM_PWM_Start+0x148>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <HAL_TIM_PWM_Start+0x208>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_TIM_PWM_Start+0x14c>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <HAL_TIM_PWM_Start+0x14e>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <HAL_TIM_PWM_Start+0x1f4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d01d      	beq.n	8003c74 <HAL_TIM_PWM_Start+0x1a8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d018      	beq.n	8003c74 <HAL_TIM_PWM_Start+0x1a8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <HAL_TIM_PWM_Start+0x20c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_TIM_PWM_Start+0x1a8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_TIM_PWM_Start+0x210>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_TIM_PWM_Start+0x1a8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_TIM_PWM_Start+0x1f8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_TIM_PWM_Start+0x1a8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_TIM_PWM_Start+0x1fc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIM_PWM_Start+0x1a8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <HAL_TIM_PWM_Start+0x208>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d115      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_TIM_PWM_Start+0x214>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d015      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x1e6>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d011      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	e008      	b.n	8003cb2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40013400 	.word	0x40013400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	40015000 	.word	0x40015000
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	00010007 	.word	0x00010007

08003ce4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e049      	b.n	8003d8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f841 	bl	8003d92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 fd82 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_IC_Start_IT+0x1e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	e023      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x66>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_IC_Start_IT+0x2e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e01b      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x66>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_IC_Start_IT+0x3e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	e013      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x66>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_IC_Start_IT+0x4e>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e00b      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x66>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_IC_Start_IT+0x5e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e003      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x66>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <HAL_TIM_IC_Start_IT+0x78>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e013      	b.n	8003e44 <HAL_TIM_IC_Start_IT+0xa0>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d104      	bne.n	8003e2c <HAL_TIM_IC_Start_IT+0x88>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e00b      	b.n	8003e44 <HAL_TIM_IC_Start_IT+0xa0>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d104      	bne.n	8003e3c <HAL_TIM_IC_Start_IT+0x98>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e003      	b.n	8003e44 <HAL_TIM_IC_Start_IT+0xa0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e46:	7bbb      	ldrb	r3, [r7, #14]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d102      	bne.n	8003e52 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e4c:	7b7b      	ldrb	r3, [r7, #13]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e0dd      	b.n	8004012 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_IC_Start_IT+0xc2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e64:	e023      	b.n	8003eae <HAL_TIM_IC_Start_IT+0x10a>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_IC_Start_IT+0xd2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e74:	e01b      	b.n	8003eae <HAL_TIM_IC_Start_IT+0x10a>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_IC_Start_IT+0xe2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e84:	e013      	b.n	8003eae <HAL_TIM_IC_Start_IT+0x10a>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_IC_Start_IT+0xf2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e94:	e00b      	b.n	8003eae <HAL_TIM_IC_Start_IT+0x10a>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_IC_Start_IT+0x102>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea4:	e003      	b.n	8003eae <HAL_TIM_IC_Start_IT+0x10a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_IC_Start_IT+0x11a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ebc:	e013      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x142>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_IC_Start_IT+0x12a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ecc:	e00b      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x142>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_IC_Start_IT+0x13a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003edc:	e003      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x142>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	d841      	bhi.n	8003f70 <HAL_TIM_IC_Start_IT+0x1cc>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <HAL_TIM_IC_Start_IT+0x150>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f71 	.word	0x08003f71
 8003efc:	08003f71 	.word	0x08003f71
 8003f00:	08003f71 	.word	0x08003f71
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003f71 	.word	0x08003f71
 8003f10:	08003f71 	.word	0x08003f71
 8003f14:	08003f4d 	.word	0x08003f4d
 8003f18:	08003f71 	.word	0x08003f71
 8003f1c:	08003f71 	.word	0x08003f71
 8003f20:	08003f71 	.word	0x08003f71
 8003f24:	08003f5f 	.word	0x08003f5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0202 	orr.w	r2, r2, #2
 8003f36:	60da      	str	r2, [r3, #12]
      break;
 8003f38:	e01d      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0204 	orr.w	r2, r2, #4
 8003f48:	60da      	str	r2, [r3, #12]
      break;
 8003f4a:	e014      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	60da      	str	r2, [r3, #12]
      break;
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0210 	orr.w	r2, r2, #16
 8003f6c:	60da      	str	r2, [r3, #12]
      break;
 8003f6e:	e002      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d149      	bne.n	8004010 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2201      	movs	r2, #1
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 f9a2 	bl	80052ce <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a23      	ldr	r2, [pc, #140]	; (800401c <HAL_TIM_IC_Start_IT+0x278>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <HAL_TIM_IC_Start_IT+0x22c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9c:	d018      	beq.n	8003fd0 <HAL_TIM_IC_Start_IT+0x22c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <HAL_TIM_IC_Start_IT+0x27c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_TIM_IC_Start_IT+0x22c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <HAL_TIM_IC_Start_IT+0x280>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_IC_Start_IT+0x22c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_TIM_IC_Start_IT+0x284>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_IC_Start_IT+0x22c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	; (800402c <HAL_TIM_IC_Start_IT+0x288>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_IC_Start_IT+0x22c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_TIM_IC_Start_IT+0x28c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d115      	bne.n	8003ffc <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_TIM_IC_Start_IT+0x290>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d015      	beq.n	800400e <HAL_TIM_IC_Start_IT+0x26a>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d011      	beq.n	800400e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	e008      	b.n	800400e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e000      	b.n	8004010 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40013400 	.word	0x40013400
 800402c:	40014000 	.word	0x40014000
 8004030:	40015000 	.word	0x40015000
 8004034:	00010007 	.word	0x00010007

08004038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0202 	mvn.w	r2, #2
 8004064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd ffa8 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fbb6 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fbbc 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0204 	mvn.w	r2, #4
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd ff7e 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb8c 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb92 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d122      	bne.n	800413c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d11b      	bne.n	800413c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0208 	mvn.w	r2, #8
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2204      	movs	r2, #4
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd ff54 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fb62 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb68 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b10      	cmp	r3, #16
 8004148:	d122      	bne.n	8004190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b10      	cmp	r3, #16
 8004156:	d11b      	bne.n	8004190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0210 	mvn.w	r2, #16
 8004160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2208      	movs	r2, #8
 8004166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd ff2a 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 800417c:	e005      	b.n	800418a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb38 	bl	80047f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fb3e 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0201 	mvn.w	r2, #1
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd ff15 	bl	8001fe6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 f92d 	bl	8005442 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d10e      	bne.n	8004216 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d107      	bne.n	8004216 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 f91f 	bl	8005454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d10e      	bne.n	8004242 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d107      	bne.n	8004242 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 faeb 	bl	8004818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b20      	cmp	r3, #32
 800424e:	d10e      	bne.n	800426e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b20      	cmp	r3, #32
 800425c:	d107      	bne.n	800426e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f06f 0220 	mvn.w	r2, #32
 8004266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f001 f8e1 	bl	8005430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b086      	sub	sp, #24
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004290:	2302      	movs	r3, #2
 8004292:	e088      	b.n	80043a6 <HAL_TIM_IC_ConfigChannel+0x130>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d11b      	bne.n	80042da <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6819      	ldr	r1, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f000 fe57 	bl	8004f64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 020c 	bic.w	r2, r2, #12
 80042c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6999      	ldr	r1, [r3, #24]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
 80042d8:	e060      	b.n	800439c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d11c      	bne.n	800431a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6819      	ldr	r1, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f000 fed2 	bl	8005098 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004302:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6999      	ldr	r1, [r3, #24]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021a      	lsls	r2, r3, #8
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	619a      	str	r2, [r3, #24]
 8004318:	e040      	b.n	800439c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f000 ff1d 	bl	800516e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020c 	bic.w	r2, r2, #12
 8004342:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69d9      	ldr	r1, [r3, #28]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	61da      	str	r2, [r3, #28]
 8004356:	e021      	b.n	800439c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d11c      	bne.n	8004398 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f000 ff39 	bl	80051e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004380:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69d9      	ldr	r1, [r3, #28]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	021a      	lsls	r2, r3, #8
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	61da      	str	r2, [r3, #28]
 8004396:	e001      	b.n	800439c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e0ff      	b.n	80045ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b14      	cmp	r3, #20
 80043da:	f200 80f0 	bhi.w	80045be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004439 	.word	0x08004439
 80043e8:	080045bf 	.word	0x080045bf
 80043ec:	080045bf 	.word	0x080045bf
 80043f0:	080045bf 	.word	0x080045bf
 80043f4:	08004479 	.word	0x08004479
 80043f8:	080045bf 	.word	0x080045bf
 80043fc:	080045bf 	.word	0x080045bf
 8004400:	080045bf 	.word	0x080045bf
 8004404:	080044bb 	.word	0x080044bb
 8004408:	080045bf 	.word	0x080045bf
 800440c:	080045bf 	.word	0x080045bf
 8004410:	080045bf 	.word	0x080045bf
 8004414:	080044fb 	.word	0x080044fb
 8004418:	080045bf 	.word	0x080045bf
 800441c:	080045bf 	.word	0x080045bf
 8004420:	080045bf 	.word	0x080045bf
 8004424:	0800453d 	.word	0x0800453d
 8004428:	080045bf 	.word	0x080045bf
 800442c:	080045bf 	.word	0x080045bf
 8004430:	080045bf 	.word	0x080045bf
 8004434:	0800457d 	.word	0x0800457d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fa90 	bl	8004964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0208 	orr.w	r2, r2, #8
 8004452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0204 	bic.w	r2, r2, #4
 8004462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6999      	ldr	r1, [r3, #24]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	619a      	str	r2, [r3, #24]
      break;
 8004476:	e0a5      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb0a 	bl	8004a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6999      	ldr	r1, [r3, #24]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	021a      	lsls	r2, r3, #8
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	619a      	str	r2, [r3, #24]
      break;
 80044b8:	e084      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fb7b 	bl	8004bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0208 	orr.w	r2, r2, #8
 80044d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0204 	bic.w	r2, r2, #4
 80044e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69d9      	ldr	r1, [r3, #28]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	61da      	str	r2, [r3, #28]
      break;
 80044f8:	e064      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fbed 	bl	8004ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69d9      	ldr	r1, [r3, #28]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	021a      	lsls	r2, r3, #8
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	61da      	str	r2, [r3, #28]
      break;
 800453a:	e043      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fc3a 	bl	8004dbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0204 	bic.w	r2, r2, #4
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800457a:	e023      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fc84 	bl	8004e90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045bc:	e002      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
      break;
 80045c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop

080045d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_TIM_ConfigClockSource+0x1c>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e0b6      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x18a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800461e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004630:	d03e      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0xd8>
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004636:	f200 8087 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x170>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	f000 8086 	beq.w	800474e <HAL_TIM_ConfigClockSource+0x176>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	d87f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
 8004648:	2b70      	cmp	r3, #112	; 0x70
 800464a:	d01a      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0xaa>
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d87b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
 8004650:	2b60      	cmp	r3, #96	; 0x60
 8004652:	d050      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x11e>
 8004654:	2b60      	cmp	r3, #96	; 0x60
 8004656:	d877      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
 8004658:	2b50      	cmp	r3, #80	; 0x50
 800465a:	d03c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xfe>
 800465c:	2b50      	cmp	r3, #80	; 0x50
 800465e:	d873      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d058      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x13e>
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d86f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
 8004668:	2b30      	cmp	r3, #48	; 0x30
 800466a:	d064      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15e>
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d86b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
 8004670:	2b20      	cmp	r3, #32
 8004672:	d060      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15e>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d867      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15e>
 800467c:	2b10      	cmp	r3, #16
 800467e:	d05a      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15e>
 8004680:	e062      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f000 fdfd 	bl	8005290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	609a      	str	r2, [r3, #8]
      break;
 80046ae:	e04f      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6899      	ldr	r1, [r3, #8]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f000 fde6 	bl	8005290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d2:	609a      	str	r2, [r3, #8]
      break;
 80046d4:	e03c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 fcaa 	bl	800503c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2150      	movs	r1, #80	; 0x50
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fdb4 	bl	800525c <TIM_ITRx_SetConfig>
      break;
 80046f4:	e02c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 fd04 	bl	8005110 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2160      	movs	r1, #96	; 0x60
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fda4 	bl	800525c <TIM_ITRx_SetConfig>
      break;
 8004714:	e01c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 fc8a 	bl	800503c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2140      	movs	r1, #64	; 0x40
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fd94 	bl	800525c <TIM_ITRx_SetConfig>
      break;
 8004734:	e00c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f000 fd8b 	bl	800525c <TIM_ITRx_SetConfig>
      break;
 8004746:	e003      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      break;
 800474c:	e000      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800474e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b0c      	cmp	r3, #12
 800477e:	d831      	bhi.n	80047e4 <HAL_TIM_ReadCapturedValue+0x78>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047e5 	.word	0x080047e5
 8004790:	080047e5 	.word	0x080047e5
 8004794:	080047e5 	.word	0x080047e5
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047e5 	.word	0x080047e5
 80047a0:	080047e5 	.word	0x080047e5
 80047a4:	080047e5 	.word	0x080047e5
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	080047e5 	.word	0x080047e5
 80047b8:	080047db 	.word	0x080047db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	60fb      	str	r3, [r7, #12]

      break;
 80047c4:	e00f      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	60fb      	str	r3, [r7, #12]

      break;
 80047ce:	e00a      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	60fb      	str	r3, [r7, #12]

      break;
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	60fb      	str	r3, [r7, #12]

      break;
 80047e2:	e000      	b.n	80047e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047e4:	bf00      	nop
  }

  return tmpreg;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop

080047f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
	...

0800482c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a41      	ldr	r2, [pc, #260]	; (8004944 <TIM_Base_SetConfig+0x118>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d00f      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3e      	ldr	r2, [pc, #248]	; (8004948 <TIM_Base_SetConfig+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3d      	ldr	r2, [pc, #244]	; (800494c <TIM_Base_SetConfig+0x120>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3c      	ldr	r2, [pc, #240]	; (8004950 <TIM_Base_SetConfig+0x124>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <TIM_Base_SetConfig+0x128>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a30      	ldr	r2, [pc, #192]	; (8004944 <TIM_Base_SetConfig+0x118>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01f      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d01b      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <TIM_Base_SetConfig+0x11c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d017      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2c      	ldr	r2, [pc, #176]	; (800494c <TIM_Base_SetConfig+0x120>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <TIM_Base_SetConfig+0x124>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00f      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <TIM_Base_SetConfig+0x12c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <TIM_Base_SetConfig+0x130>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <TIM_Base_SetConfig+0x134>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a24      	ldr	r2, [pc, #144]	; (8004954 <TIM_Base_SetConfig+0x128>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d108      	bne.n	80048d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a11      	ldr	r2, [pc, #68]	; (8004944 <TIM_Base_SetConfig+0x118>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <TIM_Base_SetConfig+0x100>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <TIM_Base_SetConfig+0x124>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0x100>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <TIM_Base_SetConfig+0x12c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0x100>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a11      	ldr	r2, [pc, #68]	; (800495c <TIM_Base_SetConfig+0x130>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0x100>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <TIM_Base_SetConfig+0x134>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0x100>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0b      	ldr	r2, [pc, #44]	; (8004954 <TIM_Base_SetConfig+0x128>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40013400 	.word	0x40013400
 8004954:	40015000 	.word	0x40015000
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f023 0302 	bic.w	r3, r3, #2
 80049b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <TIM_OC1_SetConfig+0x88>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <TIM_OC1_SetConfig+0x120>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00f      	beq.n	80049ec <TIM_OC1_SetConfig+0x88>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a2e      	ldr	r2, [pc, #184]	; (8004a88 <TIM_OC1_SetConfig+0x124>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00b      	beq.n	80049ec <TIM_OC1_SetConfig+0x88>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a2d      	ldr	r2, [pc, #180]	; (8004a8c <TIM_OC1_SetConfig+0x128>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <TIM_OC1_SetConfig+0x88>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a2c      	ldr	r2, [pc, #176]	; (8004a90 <TIM_OC1_SetConfig+0x12c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_OC1_SetConfig+0x88>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <TIM_OC1_SetConfig+0x130>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0308 	bic.w	r3, r3, #8
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <TIM_OC1_SetConfig+0xd2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <TIM_OC1_SetConfig+0x120>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00f      	beq.n	8004a36 <TIM_OC1_SetConfig+0xd2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <TIM_OC1_SetConfig+0x124>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00b      	beq.n	8004a36 <TIM_OC1_SetConfig+0xd2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <TIM_OC1_SetConfig+0x128>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d007      	beq.n	8004a36 <TIM_OC1_SetConfig+0xd2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a19      	ldr	r2, [pc, #100]	; (8004a90 <TIM_OC1_SetConfig+0x12c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_OC1_SetConfig+0xd2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <TIM_OC1_SetConfig+0x130>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d111      	bne.n	8004a5a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40013400 	.word	0x40013400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800
 8004a94:	40015000 	.word	0x40015000

08004a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0210 	bic.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0320 	bic.w	r3, r3, #32
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <TIM_OC2_SetConfig+0x10c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_OC2_SetConfig+0x74>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <TIM_OC2_SetConfig+0x110>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC2_SetConfig+0x74>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a29      	ldr	r2, [pc, #164]	; (8004bac <TIM_OC2_SetConfig+0x114>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10d      	bne.n	8004b28 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ba4 <TIM_OC2_SetConfig+0x10c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <TIM_OC2_SetConfig+0xc0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <TIM_OC2_SetConfig+0x110>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00f      	beq.n	8004b58 <TIM_OC2_SetConfig+0xc0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <TIM_OC2_SetConfig+0x118>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00b      	beq.n	8004b58 <TIM_OC2_SetConfig+0xc0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <TIM_OC2_SetConfig+0x11c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <TIM_OC2_SetConfig+0xc0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <TIM_OC2_SetConfig+0x120>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_OC2_SetConfig+0xc0>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <TIM_OC2_SetConfig+0x114>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d113      	bne.n	8004b80 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b66:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40013400 	.word	0x40013400
 8004bac:	40015000 	.word	0x40015000
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40014400 	.word	0x40014400
 8004bb8:	40014800 	.word	0x40014800

08004bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <TIM_OC3_SetConfig+0x10c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <TIM_OC3_SetConfig+0x72>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_OC3_SetConfig+0x110>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_OC3_SetConfig+0x72>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <TIM_OC3_SetConfig+0x114>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d10d      	bne.n	8004c4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c48:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <TIM_OC3_SetConfig+0x10c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <TIM_OC3_SetConfig+0xbe>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <TIM_OC3_SetConfig+0x110>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00f      	beq.n	8004c7a <TIM_OC3_SetConfig+0xbe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <TIM_OC3_SetConfig+0x118>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00b      	beq.n	8004c7a <TIM_OC3_SetConfig+0xbe>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <TIM_OC3_SetConfig+0x11c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <TIM_OC3_SetConfig+0xbe>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <TIM_OC3_SetConfig+0x120>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d003      	beq.n	8004c7a <TIM_OC3_SetConfig+0xbe>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <TIM_OC3_SetConfig+0x114>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d113      	bne.n	8004ca2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40015000 	.word	0x40015000
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800

08004ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	031b      	lsls	r3, r3, #12
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <TIM_OC4_SetConfig+0xc4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <TIM_OC4_SetConfig+0x8c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <TIM_OC4_SetConfig+0xc8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00f      	beq.n	8004d6c <TIM_OC4_SetConfig+0x8c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <TIM_OC4_SetConfig+0xcc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_OC4_SetConfig+0x8c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <TIM_OC4_SetConfig+0xd0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_OC4_SetConfig+0x8c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <TIM_OC4_SetConfig+0xd4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_OC4_SetConfig+0x8c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <TIM_OC4_SetConfig+0xd8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d109      	bne.n	8004d80 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800
 8004db8:	40015000 	.word	0x40015000

08004dbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <TIM_OC5_SetConfig+0xbc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <TIM_OC5_SetConfig+0x82>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <TIM_OC5_SetConfig+0xc0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00f      	beq.n	8004e3e <TIM_OC5_SetConfig+0x82>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <TIM_OC5_SetConfig+0xc4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00b      	beq.n	8004e3e <TIM_OC5_SetConfig+0x82>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <TIM_OC5_SetConfig+0xc8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d007      	beq.n	8004e3e <TIM_OC5_SetConfig+0x82>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <TIM_OC5_SetConfig+0xcc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d003      	beq.n	8004e3e <TIM_OC5_SetConfig+0x82>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <TIM_OC5_SetConfig+0xd0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d109      	bne.n	8004e52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40013400 	.word	0x40013400
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800
 8004e8c:	40015000 	.word	0x40015000

08004e90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	051b      	lsls	r3, r3, #20
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <TIM_OC6_SetConfig+0xbc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <TIM_OC6_SetConfig+0x84>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <TIM_OC6_SetConfig+0xc0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00f      	beq.n	8004f14 <TIM_OC6_SetConfig+0x84>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <TIM_OC6_SetConfig+0xc4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00b      	beq.n	8004f14 <TIM_OC6_SetConfig+0x84>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <TIM_OC6_SetConfig+0xc8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d007      	beq.n	8004f14 <TIM_OC6_SetConfig+0x84>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <TIM_OC6_SetConfig+0xcc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_OC6_SetConfig+0x84>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <TIM_OC6_SetConfig+0xd0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d109      	bne.n	8004f28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800
 8004f60:	40015000 	.word	0x40015000

08004f64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a25      	ldr	r2, [pc, #148]	; (8005024 <TIM_TI1_SetConfig+0xc0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d017      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x5e>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d013      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x5e>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a22      	ldr	r2, [pc, #136]	; (8005028 <TIM_TI1_SetConfig+0xc4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x5e>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a21      	ldr	r2, [pc, #132]	; (800502c <TIM_TI1_SetConfig+0xc8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x5e>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a20      	ldr	r2, [pc, #128]	; (8005030 <TIM_TI1_SetConfig+0xcc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x5e>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <TIM_TI1_SetConfig+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x5e>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <TIM_TI1_SetConfig+0xd4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <TIM_TI1_SetConfig+0x62>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <TIM_TI1_SetConfig+0x64>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e003      	b.n	8004fe6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 030a 	bic.w	r3, r3, #10
 8005000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f003 030a 	and.w	r3, r3, #10
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	40015000 	.word	0x40015000

0800503c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 030a 	bic.w	r3, r3, #10
 8005078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0210 	bic.w	r2, r3, #16
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	031b      	lsls	r3, r3, #12
 80050dc:	b29b      	uxth	r3, r3
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f023 0210 	bic.w	r2, r3, #16
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	031b      	lsls	r3, r3, #12
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800514c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800516e:	b480      	push	{r7}
 8005170:	b087      	sub	sp, #28
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80051be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005210:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005222:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	031b      	lsls	r3, r3, #12
 8005228:	b29b      	uxth	r3, r3
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005236:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	031b      	lsls	r3, r3, #12
 800523c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	f043 0307 	orr.w	r3, r3, #7
 800527e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	609a      	str	r2, [r3, #8]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b087      	sub	sp, #28
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2201      	movs	r2, #1
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	401a      	ands	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1a      	ldr	r2, [r3, #32]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr
	...

08005318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800532c:	2302      	movs	r3, #2
 800532e:	e06d      	b.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a30      	ldr	r2, [pc, #192]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2f      	ldr	r2, [pc, #188]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2d      	ldr	r2, [pc, #180]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005374:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d01d      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d018      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1a      	ldr	r2, [pc, #104]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a15      	ldr	r2, [pc, #84]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a16      	ldr	r2, [pc, #88]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a11      	ldr	r2, [pc, #68]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10c      	bne.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40013400 	.word	0x40013400
 8005420:	40015000 	.word	0x40015000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40014000 	.word	0x40014000

08005430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
	...

08005468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0a7      	b.n	80055ca <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d12c      	bne.n	80054e0 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a50      	ldr	r2, [pc, #320]	; (80055d4 <HAL_I2C_Init+0x16c>)
 8005492:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a50      	ldr	r2, [pc, #320]	; (80055d8 <HAL_I2C_Init+0x170>)
 8005498:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4f      	ldr	r2, [pc, #316]	; (80055dc <HAL_I2C_Init+0x174>)
 800549e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a4f      	ldr	r2, [pc, #316]	; (80055e0 <HAL_I2C_Init+0x178>)
 80054a4:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a4e      	ldr	r2, [pc, #312]	; (80055e4 <HAL_I2C_Init+0x17c>)
 80054aa:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a4e      	ldr	r2, [pc, #312]	; (80055e8 <HAL_I2C_Init+0x180>)
 80054b0:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a4d      	ldr	r2, [pc, #308]	; (80055ec <HAL_I2C_Init+0x184>)
 80054b6:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a4d      	ldr	r2, [pc, #308]	; (80055f0 <HAL_I2C_Init+0x188>)
 80054bc:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a4c      	ldr	r2, [pc, #304]	; (80055f4 <HAL_I2C_Init+0x18c>)
 80054c2:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a4c      	ldr	r2, [pc, #304]	; (80055f8 <HAL_I2C_Init+0x190>)
 80054c8:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a49      	ldr	r2, [pc, #292]	; (80055fc <HAL_I2C_Init+0x194>)
 80054d6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	; 0x24
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005504:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005514:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d107      	bne.n	800552e <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	e006      	b.n	800553c <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800553a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d104      	bne.n	800554e <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800554c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800555c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005560:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69d9      	ldr	r1, [r3, #28]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	08005a11 	.word	0x08005a11
 80055d8:	08005a23 	.word	0x08005a23
 80055dc:	08005a35 	.word	0x08005a35
 80055e0:	08005a47 	.word	0x08005a47
 80055e4:	08005a73 	.word	0x08005a73
 80055e8:	0800aaed 	.word	0x0800aaed
 80055ec:	0800ab0d 	.word	0x0800ab0d
 80055f0:	0800ab2d 	.word	0x0800ab2d
 80055f4:	08005a85 	.word	0x08005a85
 80055f8:	08005a59 	.word	0x08005a59
 80055fc:	080075ed 	.word	0x080075ed

08005600 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	4608      	mov	r0, r1
 800560a:	4611      	mov	r1, r2
 800560c:	461a      	mov	r2, r3
 800560e:	4603      	mov	r3, r0
 8005610:	817b      	strh	r3, [r7, #10]
 8005612:	460b      	mov	r3, r1
 8005614:	813b      	strh	r3, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	f040 80d5 	bne.w	80057d2 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_I2C_Mem_Write_DMA+0x34>
 800562e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0c9      	b.n	80057d4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d101      	bne.n	8005654 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8005650:	2302      	movs	r3, #2
 8005652:	e0bf      	b.n	80057d4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_I2C_Mem_Write_DMA+0x62>
 800565e:	2302      	movs	r3, #2
 8005660:	e0b8      	b.n	80057d4 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800566a:	f001 fdaf 	bl	80071cc <HAL_GetTick>
 800566e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2221      	movs	r2, #33	; 0x21
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a51      	ldr	r2, [pc, #324]	; (80057dc <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a51      	ldr	r2, [pc, #324]	; (80057e0 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 800569c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2bff      	cmp	r3, #255	; 0xff
 80056a6:	d906      	bls.n	80056b6 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	22ff      	movs	r2, #255	; 0xff
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80056ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e007      	b.n	80056c6 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80056c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056c4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 80056c6:	88f8      	ldrh	r0, [r7, #6]
 80056c8:	893a      	ldrh	r2, [r7, #8]
 80056ca:	8979      	ldrh	r1, [r7, #10]
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	2319      	movs	r3, #25
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4603      	mov	r3, r0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fca2 	bl	8006020 <I2C_RequestMemoryWrite>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e072      	b.n	80057d4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	4a3a      	ldr	r2, [pc, #232]	; (80057e4 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80056fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8005704:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	2200      	movs	r2, #0
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	2200      	movs	r2, #0
 8005714:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800571a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3328      	adds	r3, #40	; 0x28
 8005722:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005728:	f7fd feb1 	bl	800348e <HAL_DMA_Start_IT>
 800572c:	4603      	mov	r3, r0
 800572e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d139      	bne.n	80057aa <HAL_I2C_Mem_Write_DMA+0x1aa>
 8005736:	e013      	b.n	8005760 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e039      	b.n	80057d4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005764:	b2da      	uxtb	r2, r3
 8005766:	8979      	ldrh	r1, [r7, #10]
 8005768:	2300      	movs	r3, #0
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f001 fb2a 	bl	8006dc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800578e:	2110      	movs	r1, #16
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f001 fb45 	bl	8006e20 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e014      	b.n	80057d4 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f043 0210 	orr.w	r2, r3, #16
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
  }
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	ffff0000 	.word	0xffff0000
 80057e0:	08005c9d 	.word	0x08005c9d
 80057e4:	08006a45 	.word	0x08006a45
 80057e8:	08006b71 	.word	0x08006b71

080057ec <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	817b      	strh	r3, [r7, #10]
 80057fe:	460b      	mov	r3, r1
 8005800:	813b      	strh	r3, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b20      	cmp	r3, #32
 8005810:	f040 80d5 	bne.w	80059be <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_I2C_Mem_Read_DMA+0x34>
 800581a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005826:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0c9      	b.n	80059c0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583a:	d101      	bne.n	8005840 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
 800583e:	e0bf      	b.n	80059c0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_I2C_Mem_Read_DMA+0x62>
 800584a:	2302      	movs	r3, #2
 800584c:	e0b8      	b.n	80059c0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005856:	f001 fcb9 	bl	80071cc <HAL_GetTick>
 800585a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2222      	movs	r2, #34	; 0x22
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2240      	movs	r2, #64	; 0x40
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a51      	ldr	r2, [pc, #324]	; (80059c8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8005882:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a51      	ldr	r2, [pc, #324]	; (80059cc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8005888:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2bff      	cmp	r3, #255	; 0xff
 8005892:	d906      	bls.n	80058a2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	22ff      	movs	r2, #255	; 0xff
 8005898:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800589a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e007      	b.n	80058b2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80058ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80058b2:	88f8      	ldrh	r0, [r7, #6]
 80058b4:	893a      	ldrh	r2, [r7, #8]
 80058b6:	8979      	ldrh	r1, [r7, #10]
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	2319      	movs	r3, #25
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4603      	mov	r3, r0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fc00 	bl	80060c8 <I2C_RequestMemoryRead>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e072      	b.n	80059c0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d020      	beq.n	8005924 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	4a3a      	ldr	r2, [pc, #232]	; (80059d0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	4a39      	ldr	r2, [pc, #228]	; (80059d4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	2200      	movs	r2, #0
 80058f8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	2200      	movs	r2, #0
 8005900:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3324      	adds	r3, #36	; 0x24
 800590c:	4619      	mov	r1, r3
 800590e:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005914:	f7fd fdbb 	bl	800348e <HAL_DMA_Start_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d139      	bne.n	8005996 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8005922:	e013      	b.n	800594c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e039      	b.n	80059c0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f001 fa34 	bl	8006dc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800597a:	2110      	movs	r1, #16
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f001 fa4f 	bl	8006e20 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005990:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e014      	b.n	80059c0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	f043 0210 	orr.w	r2, r3, #16
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	ffff0000 	.word	0xffff0000
 80059cc:	08005c9d 	.word	0x08005c9d
 80059d0:	08006adb 	.word	0x08006adb
 80059d4:	08006b71 	.word	0x08006b71
 80059d8:	80002400 	.word	0x80002400

080059dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
 8005a64:	4613      	mov	r3, r2
 8005a66:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <I2C_Slave_ISR_IT+0x24>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e0e1      	b.n	8005c94 <I2C_Slave_ISR_IT+0x1e8>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005aec:	6939      	ldr	r1, [r7, #16]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fd2c 	bl	800654c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d04b      	beq.n	8005b96 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d046      	beq.n	8005b96 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d128      	bne.n	8005b64 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b28      	cmp	r3, #40	; 0x28
 8005b1c:	d108      	bne.n	8005b30 <I2C_Slave_ISR_IT+0x84>
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b24:	d104      	bne.n	8005b30 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005b26:	6939      	ldr	r1, [r7, #16]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fe19 	bl	8006760 <I2C_ITListenCplt>
 8005b2e:	e031      	b.n	8005b94 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b29      	cmp	r3, #41	; 0x29
 8005b3a:	d10e      	bne.n	8005b5a <I2C_Slave_ISR_IT+0xae>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b42:	d00a      	beq.n	8005b5a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2210      	movs	r2, #16
 8005b4a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 ff56 	bl	80069fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fbcf 	bl	80062f6 <I2C_ITSlaveSeqCplt>
 8005b58:	e01c      	b.n	8005b94 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2210      	movs	r2, #16
 8005b60:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005b62:	e08f      	b.n	8005c84 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2210      	movs	r2, #16
 8005b6a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	f043 0204 	orr.w	r2, r3, #4
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <I2C_Slave_ISR_IT+0xda>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b84:	d17e      	bne.n	8005c84 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fe3d 	bl	800680c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b92:	e077      	b.n	8005c84 <I2C_Slave_ISR_IT+0x1d8>
 8005b94:	e076      	b.n	8005c84 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d02f      	beq.n	8005c00 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02a      	beq.n	8005c00 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d018      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d14b      	bne.n	8005c88 <I2C_Slave_ISR_IT+0x1dc>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf6:	d047      	beq.n	8005c88 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fb7c 	bl	80062f6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005bfe:	e043      	b.n	8005c88 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d004      	beq.n	8005c1e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005c14:	6939      	ldr	r1, [r7, #16]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 faaa 	bl	8006170 <I2C_ITAddrCplt>
 8005c1c:	e035      	b.n	8005c8a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d030      	beq.n	8005c8a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02b      	beq.n	8005c8a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d018      	beq.n	8005c6e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
 8005c6c:	e00d      	b.n	8005c8a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c74:	d002      	beq.n	8005c7c <I2C_Slave_ISR_IT+0x1d0>
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fb3a 	bl	80062f6 <I2C_ITSlaveSeqCplt>
 8005c82:	e002      	b.n	8005c8a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005c84:	bf00      	nop
 8005c86:	e000      	b.n	8005c8a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005c88:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <I2C_Master_ISR_DMA+0x1a>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e0d9      	b.n	8005e6a <I2C_Master_ISR_DMA+0x1ce>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d016      	beq.n	8005cf6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d011      	beq.n	8005cf6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2210      	movs	r2, #16
 8005cd8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	f043 0204 	orr.w	r2, r3, #4
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ce6:	2120      	movs	r1, #32
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f001 f899 	bl	8006e20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fe85 	bl	80069fe <I2C_Flush_TXDR>
 8005cf4:	e0b4      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d071      	beq.n	8005de4 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d06c      	beq.n	8005de4 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d18:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d04e      	beq.n	8005dc2 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d30:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2bff      	cmp	r3, #255	; 0xff
 8005d3a:	d906      	bls.n	8005d4a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	22ff      	movs	r2, #255	; 0xff
 8005d40:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e010      	b.n	8005d6c <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d5c:	d003      	beq.n	8005d66 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e002      	b.n	8005d6c <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d6a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	8a79      	ldrh	r1, [r7, #18]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f001 f824 	bl	8006dc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b22      	cmp	r3, #34	; 0x22
 8005d9c:	d108      	bne.n	8005db0 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005dae:	e057      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dbe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005dc0:	e04e      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dd0:	d003      	beq.n	8005dda <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fa50 	bl	8006278 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005dd8:	e042      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005dda:	2140      	movs	r1, #64	; 0x40
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fd15 	bl	800680c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005de2:	e03d      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d028      	beq.n	8005e40 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d023      	beq.n	8005e40 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d119      	bne.n	8005e36 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e10:	d025      	beq.n	8005e5e <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e1a:	d108      	bne.n	8005e2e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e2a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005e2c:	e017      	b.n	8005e5e <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fa22 	bl	8006278 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005e34:	e013      	b.n	8005e5e <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e36:	2140      	movs	r1, #64	; 0x40
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fce7 	bl	800680c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005e3e:	e00e      	b.n	8005e5e <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 faac 	bl	80063b4 <I2C_ITMasterCplt>
 8005e5c:	e000      	b.n	8005e60 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005e5e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b088      	sub	sp, #32
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <I2C_Slave_ISR_DMA+0x24>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0bf      	b.n	8006016 <I2C_Slave_ISR_DMA+0x1a4>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fb49 	bl	800654c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8095 	beq.w	8005ff0 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 808f 	beq.w	8005ff0 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d07d      	beq.n	8005fe2 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00c      	beq.n	8005f08 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <I2C_Slave_ISR_DMA+0x96>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8005f04:	2301      	movs	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <I2C_Slave_ISR_DMA+0xb8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8005f26:	2301      	movs	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d128      	bne.n	8005f82 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b28      	cmp	r3, #40	; 0x28
 8005f3a:	d108      	bne.n	8005f4e <I2C_Slave_ISR_DMA+0xdc>
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f42:	d104      	bne.n	8005f4e <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fc0a 	bl	8006760 <I2C_ITListenCplt>
 8005f4c:	e048      	b.n	8005fe0 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b29      	cmp	r3, #41	; 0x29
 8005f58:	d10e      	bne.n	8005f78 <I2C_Slave_ISR_DMA+0x106>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f60:	d00a      	beq.n	8005f78 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2210      	movs	r2, #16
 8005f68:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fd47 	bl	80069fe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f9c0 	bl	80062f6 <I2C_ITSlaveSeqCplt>
 8005f76:	e033      	b.n	8005fe0 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005f80:	e034      	b.n	8005fec <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2210      	movs	r2, #16
 8005f88:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	f043 0204 	orr.w	r2, r3, #4
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <I2C_Slave_ISR_DMA+0x13a>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005faa:	d11f      	bne.n	8005fec <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	2b21      	cmp	r3, #33	; 0x21
 8005fb0:	d002      	beq.n	8005fb8 <I2C_Slave_ISR_DMA+0x146>
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b29      	cmp	r3, #41	; 0x29
 8005fb6:	d103      	bne.n	8005fc0 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2221      	movs	r2, #33	; 0x21
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8005fbe:	e008      	b.n	8005fd2 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	2b22      	cmp	r3, #34	; 0x22
 8005fc4:	d002      	beq.n	8005fcc <I2C_Slave_ISR_DMA+0x15a>
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005fca:	d102      	bne.n	8005fd2 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2222      	movs	r2, #34	; 0x22
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fc17 	bl	800680c <I2C_ITError>
      if (treatdmanack == 1U)
 8005fde:	e005      	b.n	8005fec <I2C_Slave_ISR_DMA+0x17a>
 8005fe0:	e004      	b.n	8005fec <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fea:	e00f      	b.n	800600c <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8005fec:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fee:	e00d      	b.n	800600c <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f8b2 	bl	8006170 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	461a      	mov	r2, r3
 800602e:	4603      	mov	r3, r0
 8006030:	817b      	strh	r3, [r7, #10]
 8006032:	460b      	mov	r3, r1
 8006034:	813b      	strh	r3, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	8979      	ldrh	r1, [r7, #10]
 8006040:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <I2C_RequestMemoryWrite+0xa4>)
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 febd 	bl	8006dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	69b9      	ldr	r1, [r7, #24]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fe01 	bl	8006c5a <I2C_WaitOnTXISFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e02c      	b.n	80060bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d105      	bne.n	8006074 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	629a      	str	r2, [r3, #40]	; 0x28
 8006072:	e015      	b.n	80060a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	b29b      	uxth	r3, r3
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	69b9      	ldr	r1, [r7, #24]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fde7 	bl	8006c5a <I2C_WaitOnTXISFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e012      	b.n	80060bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006096:	893b      	ldrh	r3, [r7, #8]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fd95 	bl	8006bda <I2C_WaitOnFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	80002000 	.word	0x80002000

080060c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	4608      	mov	r0, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	817b      	strh	r3, [r7, #10]
 80060da:	460b      	mov	r3, r1
 80060dc:	813b      	strh	r3, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	8979      	ldrh	r1, [r7, #10]
 80060e8:	4b20      	ldr	r3, [pc, #128]	; (800616c <I2C_RequestMemoryRead+0xa4>)
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2300      	movs	r3, #0
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fe6a 	bl	8006dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	69b9      	ldr	r1, [r7, #24]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fdae 	bl	8006c5a <I2C_WaitOnTXISFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e02c      	b.n	8006162 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d105      	bne.n	800611a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
 8006118:	e015      	b.n	8006146 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800611a:	893b      	ldrh	r3, [r7, #8]
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	b29b      	uxth	r3, r3
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	69b9      	ldr	r1, [r7, #24]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fd94 	bl	8006c5a <I2C_WaitOnTXISFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e012      	b.n	8006162 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2200      	movs	r2, #0
 800614e:	2140      	movs	r1, #64	; 0x40
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fd42 	bl	8006bda <I2C_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	80002000 	.word	0x80002000

08006170 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006186:	2b28      	cmp	r3, #40	; 0x28
 8006188:	d16a      	bne.n	8006260 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	0c1b      	lsrs	r3, r3, #16
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061a8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061b6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061c4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d138      	bne.n	8006240 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80061ce:	897b      	ldrh	r3, [r7, #10]
 80061d0:	09db      	lsrs	r3, r3, #7
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	89bb      	ldrh	r3, [r7, #12]
 80061d6:	4053      	eors	r3, r2
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f003 0306 	and.w	r3, r3, #6
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11c      	bne.n	800621c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80061e2:	897b      	ldrh	r3, [r7, #10]
 80061e4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d13b      	bne.n	8006270 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2208      	movs	r2, #8
 8006204:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	89ba      	ldrh	r2, [r7, #12]
 8006214:	7bf9      	ldrb	r1, [r7, #15]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800621a:	e029      	b.n	8006270 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fe5d 	bl	8006ee4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	89ba      	ldrh	r2, [r7, #12]
 8006238:	7bf9      	ldrb	r1, [r7, #15]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
}
 800623e:	e017      	b.n	8006270 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fe4d 	bl	8006ee4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	89ba      	ldrh	r2, [r7, #12]
 8006258:	7bf9      	ldrb	r1, [r7, #15]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
}
 800625e:	e007      	b.n	8006270 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2208      	movs	r2, #8
 8006266:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b21      	cmp	r3, #33	; 0x21
 8006292:	d116      	bne.n	80062c2 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2211      	movs	r2, #17
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062a8:	2101      	movs	r1, #1
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fe1a 	bl	8006ee4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062c0:	e015      	b.n	80062ee <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2212      	movs	r2, #18
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062d6:	2102      	movs	r1, #2
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fe03 	bl	8006ee4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e00c      	b.n	8006344 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006342:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b29      	cmp	r3, #41	; 0x29
 800634e:	d113      	bne.n	8006378 <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2228      	movs	r2, #40	; 0x28
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2221      	movs	r2, #33	; 0x21
 800635c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800635e:	2101      	movs	r1, #1
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fdbf 	bl	8006ee4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8006376:	e018      	b.n	80063aa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b2a      	cmp	r3, #42	; 0x2a
 8006382:	d112      	bne.n	80063aa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2228      	movs	r2, #40	; 0x28
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2222      	movs	r2, #34	; 0x22
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006392:	2102      	movs	r1, #2
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fda5 	bl	8006ee4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2220      	movs	r2, #32
 80063c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b21      	cmp	r3, #33	; 0x21
 80063d4:	d107      	bne.n	80063e6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063d6:	2101      	movs	r1, #1
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fd83 	bl	8006ee4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2211      	movs	r2, #17
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
 80063e4:	e00c      	b.n	8006400 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b22      	cmp	r3, #34	; 0x22
 80063f0:	d106      	bne.n	8006400 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063f2:	2102      	movs	r1, #2
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fd75 	bl	8006ee4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2212      	movs	r2, #18
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b4e      	ldr	r3, [pc, #312]	; (8006544 <I2C_ITMasterCplt+0x190>)
 800640c:	400b      	ands	r3, r1
 800640e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a4b      	ldr	r2, [pc, #300]	; (8006548 <I2C_ITMasterCplt+0x194>)
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2210      	movs	r2, #16
 800642c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	f043 0204 	orr.w	r2, r3, #4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b60      	cmp	r3, #96	; 0x60
 8006444:	d10a      	bne.n	800645c <I2C_ITMasterCplt+0xa8>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	b2db      	uxtb	r3, r3
 8006458:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800645a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 face 	bl	80069fe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b60      	cmp	r3, #96	; 0x60
 8006472:	d002      	beq.n	800647a <I2C_ITMasterCplt+0xc6>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d006      	beq.n	8006488 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9c3 	bl	800680c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006486:	e058      	b.n	800653a <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b21      	cmp	r3, #33	; 0x21
 8006492:	d126      	bne.n	80064e2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d10c      	bne.n	80064c8 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
}
 80064c6:	e038      	b.n	800653a <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
}
 80064e0:	e02b      	b.n	800653a <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b22      	cmp	r3, #34	; 0x22
 80064ec:	d125      	bne.n	800653a <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d10c      	bne.n	8006522 <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
}
 8006520:	e00b      	b.n	800653a <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
}
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	fe00e800 	.word	0xfe00e800
 8006548:	ffff0000 	.word	0xffff0000

0800654c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2220      	movs	r2, #32
 8006570:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b21      	cmp	r3, #33	; 0x21
 8006576:	d002      	beq.n	800657e <I2C_ITSlaveCplt+0x32>
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b29      	cmp	r3, #41	; 0x29
 800657c:	d108      	bne.n	8006590 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800657e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fcae 	bl	8006ee4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2221      	movs	r2, #33	; 0x21
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
 800658e:	e00d      	b.n	80065ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b22      	cmp	r3, #34	; 0x22
 8006594:	d002      	beq.n	800659c <I2C_ITSlaveCplt+0x50>
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b2a      	cmp	r3, #42	; 0x2a
 800659a:	d107      	bne.n	80065ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800659c:	f248 0102 	movw	r1, #32770	; 0x8002
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fc9f 	bl	8006ee4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2222      	movs	r2, #34	; 0x22
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b64      	ldr	r3, [pc, #400]	; (8006758 <I2C_ITSlaveCplt+0x20c>)
 80065c8:	400b      	ands	r3, r1
 80065ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa16 	bl	80069fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d013      	beq.n	8006604 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01f      	beq.n	8006634 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006602:	e017      	b.n	8006634 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d012      	beq.n	8006634 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800661c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d006      	beq.n	8006634 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	b29a      	uxth	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	d020      	beq.n	8006680 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00c      	beq.n	8006680 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	f043 0204 	orr.w	r2, r3, #4
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d010      	beq.n	80066ce <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8aa 	bl	800680c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b28      	cmp	r3, #40	; 0x28
 80066c2:	d144      	bne.n	800674e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80066c4:	6979      	ldr	r1, [r7, #20]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f84a 	bl	8006760 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066cc:	e03f      	b.n	800674e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066d6:	d015      	beq.n	8006704 <I2C_ITSlaveCplt+0x1b8>
    I2C_ITSlaveSeqCplt(hi2c);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff fe0c 	bl	80062f6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1e      	ldr	r2, [pc, #120]	; (800675c <I2C_ITSlaveCplt+0x210>)
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
}
 8006702:	e024      	b.n	800674e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b22      	cmp	r3, #34	; 0x22
 800670e:	d10f      	bne.n	8006730 <I2C_ITSlaveCplt+0x1e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
}
 800672e:	e00e      	b.n	800674e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
}
 800674e:	bf00      	nop
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	fe00e800 	.word	0xfe00e800
 800675c:	ffff0000 	.word	0xffff0000

08006760 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <I2C_ITListenCplt+0xa8>)
 800676e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d022      	beq.n	80067dc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d012      	beq.n	80067dc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	f043 0204 	orr.w	r2, r3, #4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067dc:	f248 0103 	movw	r1, #32771	; 0x8003
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fb7f 	bl	8006ee4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2210      	movs	r2, #16
 80067ec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	ffff0000 	.word	0xffff0000

0800680c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800681c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a5d      	ldr	r2, [pc, #372]	; (80069a0 <I2C_ITError+0x194>)
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b28      	cmp	r3, #40	; 0x28
 8006842:	d005      	beq.n	8006850 <I2C_ITError+0x44>
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b29      	cmp	r3, #41	; 0x29
 8006848:	d002      	beq.n	8006850 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b2a      	cmp	r3, #42	; 0x2a
 800684e:	d10b      	bne.n	8006868 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006850:	2103      	movs	r1, #3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fb46 	bl	8006ee4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2228      	movs	r2, #40	; 0x28
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a50      	ldr	r2, [pc, #320]	; (80069a4 <I2C_ITError+0x198>)
 8006864:	635a      	str	r2, [r3, #52]	; 0x34
 8006866:	e011      	b.n	800688c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006868:	f248 0103 	movw	r1, #32771	; 0x8003
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb39 	bl	8006ee4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b60      	cmp	r3, #96	; 0x60
 800687c:	d003      	beq.n	8006886 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	2b00      	cmp	r3, #0
 8006898:	d039      	beq.n	800690e <I2C_ITError+0x102>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b11      	cmp	r3, #17
 800689e:	d002      	beq.n	80068a6 <I2C_ITError+0x9a>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b21      	cmp	r3, #33	; 0x21
 80068a4:	d133      	bne.n	800690e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b4:	d107      	bne.n	80068c6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fc ff57 	bl	800377e <HAL_DMA_GetState>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d017      	beq.n	8006906 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	4a33      	ldr	r2, [pc, #204]	; (80069a8 <I2C_ITError+0x19c>)
 80068dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fc fe66 	bl	80035bc <HAL_DMA_Abort_IT>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04d      	beq.n	8006992 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006904:	e045      	b.n	8006992 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f850 	bl	80069ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800690c:	e041      	b.n	8006992 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d039      	beq.n	800698a <I2C_ITError+0x17e>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b12      	cmp	r3, #18
 800691a:	d002      	beq.n	8006922 <I2C_ITError+0x116>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b22      	cmp	r3, #34	; 0x22
 8006920:	d133      	bne.n	800698a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	d107      	bne.n	8006942 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006940:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc ff19 	bl	800377e <HAL_DMA_GetState>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d017      	beq.n	8006982 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <I2C_ITError+0x19c>)
 8006958:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	4618      	mov	r0, r3
 8006968:	f7fc fe28 	bl	80035bc <HAL_DMA_Abort_IT>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d011      	beq.n	8006996 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006980:	e009      	b.n	8006996 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f812 	bl	80069ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006988:	e005      	b.n	8006996 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f80e 	bl	80069ac <I2C_TreatErrorCallback>
  }
}
 8006990:	e002      	b.n	8006998 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006996:	bf00      	nop
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	ffff0000 	.word	0xffff0000
 80069a4:	08005aad 	.word	0x08005aad
 80069a8:	08006b9f 	.word	0x08006b9f

080069ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b60      	cmp	r3, #96	; 0x60
 80069be:	d10f      	bne.n	80069e0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069de:	e00a      	b.n	80069f6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d103      	bne.n	8006a1c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d007      	beq.n	8006a3a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0201 	orr.w	r2, r2, #1
 8006a38:	619a      	str	r2, [r3, #24]
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr

08006a44 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a60:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a6c:	2120      	movs	r1, #32
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f9d6 	bl	8006e20 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006a74:	e02d      	b.n	8006ad2 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a7e:	441a      	add	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2bff      	cmp	r3, #255	; 0xff
 8006a8c:	d903      	bls.n	8006a96 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a94:	e004      	b.n	8006aa0 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3328      	adds	r3, #40	; 0x28
 8006ab0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006ab6:	f7fc fcea 	bl	800348e <HAL_DMA_Start_IT>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ac0:	2110      	movs	r1, #16
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fea2 	bl	800680c <I2C_ITError>
}
 8006ac8:	e003      	b.n	8006ad2 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006aca:	2140      	movs	r1, #64	; 0x40
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f9a7 	bl	8006e20 <I2C_Enable_IRQ>
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006af6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b02:	2120      	movs	r1, #32
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f98b 	bl	8006e20 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006b0a:	e02d      	b.n	8006b68 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b14:	441a      	add	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2bff      	cmp	r3, #255	; 0xff
 8006b22:	d903      	bls.n	8006b2c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	22ff      	movs	r2, #255	; 0xff
 8006b28:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b2a:	e004      	b.n	8006b36 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3324      	adds	r3, #36	; 0x24
 8006b40:	4619      	mov	r1, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006b4c:	f7fc fc9f 	bl	800348e <HAL_DMA_Start_IT>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d004      	beq.n	8006b60 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b56:	2110      	movs	r1, #16
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff fe57 	bl	800680c <I2C_ITError>
}
 8006b5e:	e003      	b.n	8006b68 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006b60:	2140      	movs	r1, #64	; 0x40
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f95c 	bl	8006e20 <I2C_Enable_IRQ>
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b8c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b8e:	2110      	movs	r1, #16
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fe3b 	bl	800680c <I2C_ITError>
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	2200      	movs	r2, #0
 8006bba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	2200      	movs	r2, #0
 8006bca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff feed 	bl	80069ac <I2C_TreatErrorCallback>
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	4613      	mov	r3, r2
 8006be8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bea:	e022      	b.n	8006c32 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d01e      	beq.n	8006c32 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf4:	f000 faea 	bl	80071cc <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d113      	bne.n	8006c32 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e00f      	b.n	8006c52 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d0cd      	beq.n	8006bec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c66:	e02c      	b.n	8006cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f835 	bl	8006cdc <I2C_IsAcknowledgeFailed>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e02a      	b.n	8006cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d01e      	beq.n	8006cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c84:	f000 faa2 	bl	80071cc <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d302      	bcc.n	8006c9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d113      	bne.n	8006cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e007      	b.n	8006cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d1cb      	bne.n	8006c68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d161      	bne.n	8006dba <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d04:	d02b      	beq.n	8006d5e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d14:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d16:	e022      	b.n	8006d5e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d01e      	beq.n	8006d5e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d20:	f000 fa54 	bl	80071cc <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d302      	bcc.n	8006d36 <I2C_IsAcknowledgeFailed+0x5a>
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d113      	bne.n	8006d5e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e02e      	b.n	8006dbc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d1d5      	bne.n	8006d18 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2210      	movs	r2, #16
 8006d72:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fe3e 	bl	80069fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <I2C_IsAcknowledgeFailed+0xe8>)
 8006d8e:	400b      	ands	r3, r1
 8006d90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f043 0204 	orr.w	r2, r3, #4
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	fe00e800 	.word	0xfe00e800

08006dc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	817b      	strh	r3, [r7, #10]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	0d5b      	lsrs	r3, r3, #21
 8006de4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <I2C_TransferConfig+0x54>)
 8006dea:	430b      	orrs	r3, r1
 8006dec:	43db      	mvns	r3, r3
 8006dee:	ea02 0103 	and.w	r1, r2, r3
 8006df2:	897b      	ldrh	r3, [r7, #10]
 8006df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006df8:	7a7b      	ldrb	r3, [r7, #9]
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr
 8006e1c:	03ff63ff 	.word	0x03ff63ff

08006e20 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	4a29      	ldr	r2, [pc, #164]	; (8006edc <I2C_Enable_IRQ+0xbc>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006e3e:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <I2C_Enable_IRQ+0xc0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d11d      	bne.n	8006e80 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da03      	bge.n	8006e54 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006e52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	2b10      	cmp	r3, #16
 8006e58:	d103      	bne.n	8006e62 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006e60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006e62:	887b      	ldrh	r3, [r7, #2]
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d103      	bne.n	8006e70 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d125      	bne.n	8006ec2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006e7e:	e020      	b.n	8006ec2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	da03      	bge.n	8006e90 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006e8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006e90:	887b      	ldrh	r3, [r7, #2]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006ea0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ea2:	887b      	ldrh	r3, [r7, #2]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006eb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d103      	bne.n	8006ec2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f043 0320 	orr.w	r3, r3, #32
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6819      	ldr	r1, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	601a      	str	r2, [r3, #0]
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	08005c9d 	.word	0x08005c9d
 8006ee0:	08005e73 	.word	0x08005e73

08006ee4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ef4:	887b      	ldrh	r3, [r7, #2]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00f      	beq.n	8006f1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006f04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f12:	2b28      	cmp	r3, #40	; 0x28
 8006f14:	d003      	beq.n	8006f1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006f1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00f      	beq.n	8006f48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006f2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f3c:	2b28      	cmp	r3, #40	; 0x28
 8006f3e:	d003      	beq.n	8006f48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006f46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da03      	bge.n	8006f58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006f56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006f58:	887b      	ldrh	r3, [r7, #2]
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	d103      	bne.n	8006f66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006f64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006f66:	887b      	ldrh	r3, [r7, #2]
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d103      	bne.n	8006f74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f043 0320 	orr.w	r3, r3, #32
 8006f72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006f74:	887b      	ldrh	r3, [r7, #2]
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d103      	bne.n	8006f82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6819      	ldr	r1, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	43da      	mvns	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	400a      	ands	r2, r1
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr

08006f9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d138      	bne.n	8007026 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e032      	b.n	8007028 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2224      	movs	r2, #36	; 0x24
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ff0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6819      	ldr	r1, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b20      	cmp	r3, #32
 8007046:	d139      	bne.n	80070bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007052:	2302      	movs	r3, #2
 8007054:	e033      	b.n	80070be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2224      	movs	r2, #36	; 0x24
 8007062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0201 	bic.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007084:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d8:	d10e      	bne.n	80070f8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80070da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070de:	4808      	ldr	r0, [pc, #32]	; (8007100 <HAL_GPIO_EXTI_Callback+0x38>)
 80070e0:	f7fc f948 	bl	8003374 <HAL_GPIO_ReadPin>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d103      	bne.n	80070f2 <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 80070ea:	2001      	movs	r0, #1
 80070ec:	f004 fba0 	bl	800b830 <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 80070f0:	e002      	b.n	80070f8 <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 80070f2:	2000      	movs	r0, #0
 80070f4:	f004 fb9c 	bl	800b830 <Rte_Write_PC13_Pin_State>
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	48000800 	.word	0x48000800

08007104 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007108:	bf00      	nop
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007114:	4b08      	ldr	r3, [pc, #32]	; (8007138 <HAL_Init+0x28>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a07      	ldr	r2, [pc, #28]	; (8007138 <HAL_Init+0x28>)
 800711a:	f043 0310 	orr.w	r3, r3, #16
 800711e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007120:	2003      	movs	r0, #3
 8007122:	f000 f929 	bl	8007378 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007126:	200f      	movs	r0, #15
 8007128:	f000 f808 	bl	800713c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800712c:	f000 f966 	bl	80073fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40022000 	.word	0x40022000

0800713c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007144:	4b15      	ldr	r3, [pc, #84]	; (800719c <HAL_InitTick+0x60>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <HAL_InitTick+0x64>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007152:	fbb3 f3f1 	udiv	r3, r3, r1
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f941 	bl	80073e2 <HAL_SYSTICK_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e014      	b.n	8007194 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b0f      	cmp	r3, #15
 800716e:	d810      	bhi.n	8007192 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007170:	2200      	movs	r2, #0
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	f000 f909 	bl	800738e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800717c:	2200      	movs	r2, #0
 800717e:	210f      	movs	r1, #15
 8007180:	f06f 0001 	mvn.w	r0, #1
 8007184:	f000 f903 	bl	800738e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007188:	4a06      	ldr	r2, [pc, #24]	; (80071a4 <HAL_InitTick+0x68>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e000      	b.n	8007194 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000000 	.word	0x20000000
 80071a0:	20000008 	.word	0x20000008
 80071a4:	20000004 	.word	0x20000004

080071a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_IncTick+0x1c>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <HAL_IncTick+0x20>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4413      	add	r3, r2
 80071b8:	4a03      	ldr	r2, [pc, #12]	; (80071c8 <HAL_IncTick+0x20>)
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr
 80071c4:	20000008 	.word	0x20000008
 80071c8:	200001b4 	.word	0x200001b4

080071cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80071d0:	4b02      	ldr	r3, [pc, #8]	; (80071dc <HAL_GetTick+0x10>)
 80071d2:	681b      	ldr	r3, [r3, #0]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr
 80071dc:	200001b4 	.word	0x200001b4

080071e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <__NVIC_SetPriorityGrouping+0x44>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071fc:	4013      	ands	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800720c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007212:	4a04      	ldr	r2, [pc, #16]	; (8007224 <__NVIC_SetPriorityGrouping+0x44>)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	60d3      	str	r3, [r2, #12]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	e000ed00 	.word	0xe000ed00

08007228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800722c:	4b04      	ldr	r3, [pc, #16]	; (8007240 <__NVIC_GetPriorityGrouping+0x18>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	f003 0307 	and.w	r3, r3, #7
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000ed00 	.word	0xe000ed00

08007244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800724e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007252:	2b00      	cmp	r3, #0
 8007254:	db0b      	blt.n	800726e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	f003 021f 	and.w	r2, r3, #31
 800725c:	4906      	ldr	r1, [pc, #24]	; (8007278 <__NVIC_EnableIRQ+0x34>)
 800725e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	2001      	movs	r0, #1
 8007266:	fa00 f202 	lsl.w	r2, r0, r2
 800726a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr
 8007278:	e000e100 	.word	0xe000e100

0800727c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728c:	2b00      	cmp	r3, #0
 800728e:	db0a      	blt.n	80072a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	490c      	ldr	r1, [pc, #48]	; (80072c8 <__NVIC_SetPriority+0x4c>)
 8007296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729a:	0112      	lsls	r2, r2, #4
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	440b      	add	r3, r1
 80072a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072a4:	e00a      	b.n	80072bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	4908      	ldr	r1, [pc, #32]	; (80072cc <__NVIC_SetPriority+0x50>)
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	3b04      	subs	r3, #4
 80072b4:	0112      	lsls	r2, r2, #4
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	440b      	add	r3, r1
 80072ba:	761a      	strb	r2, [r3, #24]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	e000e100 	.word	0xe000e100
 80072cc:	e000ed00 	.word	0xe000ed00

080072d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b089      	sub	sp, #36	; 0x24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f1c3 0307 	rsb	r3, r3, #7
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	bf28      	it	cs
 80072ee:	2304      	movcs	r3, #4
 80072f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3304      	adds	r3, #4
 80072f6:	2b06      	cmp	r3, #6
 80072f8:	d902      	bls.n	8007300 <NVIC_EncodePriority+0x30>
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	3b03      	subs	r3, #3
 80072fe:	e000      	b.n	8007302 <NVIC_EncodePriority+0x32>
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	43da      	mvns	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	401a      	ands	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007318:	f04f 31ff 	mov.w	r1, #4294967295
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	fa01 f303 	lsl.w	r3, r1, r3
 8007322:	43d9      	mvns	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007328:	4313      	orrs	r3, r2
         );
}
 800732a:	4618      	mov	r0, r3
 800732c:	3724      	adds	r7, #36	; 0x24
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3b01      	subs	r3, #1
 8007340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007344:	d301      	bcc.n	800734a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007346:	2301      	movs	r3, #1
 8007348:	e00f      	b.n	800736a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <SysTick_Config+0x40>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3b01      	subs	r3, #1
 8007350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007352:	210f      	movs	r1, #15
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	f7ff ff90 	bl	800727c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800735c:	4b05      	ldr	r3, [pc, #20]	; (8007374 <SysTick_Config+0x40>)
 800735e:	2200      	movs	r2, #0
 8007360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007362:	4b04      	ldr	r3, [pc, #16]	; (8007374 <SysTick_Config+0x40>)
 8007364:	2207      	movs	r2, #7
 8007366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	e000e010 	.word	0xe000e010

08007378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff2d 	bl	80071e0 <__NVIC_SetPriorityGrouping>
}
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	4603      	mov	r3, r0
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073a0:	f7ff ff42 	bl	8007228 <__NVIC_GetPriorityGrouping>
 80073a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	6978      	ldr	r0, [r7, #20]
 80073ac:	f7ff ff90 	bl	80072d0 <NVIC_EncodePriority>
 80073b0:	4602      	mov	r2, r0
 80073b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff ff5f 	bl	800727c <__NVIC_SetPriority>
}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	4603      	mov	r3, r0
 80073ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff ff35 	bl	8007244 <__NVIC_EnableIRQ>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ffa2 	bl	8007334 <SysTick_Config>
 80073f0:	4603      	mov	r3, r0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <HAL_MspInit+0x40>)
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	4a0d      	ldr	r2, [pc, #52]	; (800743c <HAL_MspInit+0x40>)
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	6193      	str	r3, [r2, #24]
 800740e:	4b0b      	ldr	r3, [pc, #44]	; (800743c <HAL_MspInit+0x40>)
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <HAL_MspInit+0x40>)
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	4a07      	ldr	r2, [pc, #28]	; (800743c <HAL_MspInit+0x40>)
 8007420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007424:	61d3      	str	r3, [r2, #28]
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <HAL_MspInit+0x40>)
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr
 800743c:	40021000 	.word	0x40021000

08007440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08c      	sub	sp, #48	; 0x30
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007448:	f107 031c 	add.w	r3, r7, #28
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	609a      	str	r2, [r3, #8]
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007460:	d156      	bne.n	8007510 <HAL_ADC_MspInit+0xd0>



  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8007462:	4b5b      	ldr	r3, [pc, #364]	; (80075d0 <HAL_ADC_MspInit+0x190>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	4a59      	ldr	r2, [pc, #356]	; (80075d0 <HAL_ADC_MspInit+0x190>)
 800746a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800746c:	4b58      	ldr	r3, [pc, #352]	; (80075d0 <HAL_ADC_MspInit+0x190>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d10b      	bne.n	800748c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8007474:	4b57      	ldr	r3, [pc, #348]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	4a56      	ldr	r2, [pc, #344]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 800747a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747e:	6153      	str	r3, [r2, #20]
 8007480:	4b54      	ldr	r3, [pc, #336]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	69bb      	ldr	r3, [r7, #24]
    }



    __HAL_RCC_GPIOA_CLK_ENABLE();
 800748c:	4b51      	ldr	r3, [pc, #324]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	4a50      	ldr	r2, [pc, #320]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007496:	6153      	str	r3, [r2, #20]
 8007498:	4b4e      	ldr	r3, [pc, #312]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80074a4:	2303      	movs	r3, #3
 80074a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074a8:	2303      	movs	r3, #3
 80074aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b0:	f107 031c 	add.w	r3, r7, #28
 80074b4:	4619      	mov	r1, r3
 80074b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074ba:	f7fb fdd1 	bl	8003060 <HAL_GPIO_Init>



    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80074be:	4b46      	ldr	r3, [pc, #280]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074c0:	4a46      	ldr	r2, [pc, #280]	; (80075dc <HAL_ADC_MspInit+0x19c>)
 80074c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074c4:	4b44      	ldr	r3, [pc, #272]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80074ca:	4b43      	ldr	r3, [pc, #268]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80074d0:	4b41      	ldr	r3, [pc, #260]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074d2:	2280      	movs	r2, #128	; 0x80
 80074d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80074d6:	4b40      	ldr	r3, [pc, #256]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80074de:	4b3e      	ldr	r3, [pc, #248]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80074e6:	4b3c      	ldr	r3, [pc, #240]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074e8:	2220      	movs	r2, #32
 80074ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80074ec:	4b3a      	ldr	r3, [pc, #232]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80074f2:	4839      	ldr	r0, [pc, #228]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 80074f4:	f7fb ff84 	bl	8003400 <HAL_DMA_Init>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <HAL_ADC_MspInit+0xc2>
    {
      Msp_Error_Handler();
 80074fe:	f000 fa2f 	bl	8007960 <Msp_Error_Handler>
    }



    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a34      	ldr	r2, [pc, #208]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 8007506:	639a      	str	r2, [r3, #56]	; 0x38
 8007508:	4a33      	ldr	r2, [pc, #204]	; (80075d8 <HAL_ADC_MspInit+0x198>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END ADC2_MspInit 1 */
  }



}
 800750e:	e05a      	b.n	80075c6 <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a32      	ldr	r2, [pc, #200]	; (80075e0 <HAL_ADC_MspInit+0x1a0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d155      	bne.n	80075c6 <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800751a:	4b2d      	ldr	r3, [pc, #180]	; (80075d0 <HAL_ADC_MspInit+0x190>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3301      	adds	r3, #1
 8007520:	4a2b      	ldr	r2, [pc, #172]	; (80075d0 <HAL_ADC_MspInit+0x190>)
 8007522:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007524:	4b2a      	ldr	r3, [pc, #168]	; (80075d0 <HAL_ADC_MspInit+0x190>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d10b      	bne.n	8007544 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800752c:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	4a28      	ldr	r2, [pc, #160]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 8007532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007536:	6153      	str	r3, [r2, #20]
 8007538:	4b26      	ldr	r3, [pc, #152]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007544:	4b23      	ldr	r3, [pc, #140]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	4a22      	ldr	r2, [pc, #136]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 800754a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754e:	6153      	str	r3, [r2, #20]
 8007550:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <HAL_ADC_MspInit+0x194>)
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800755c:	2310      	movs	r3, #16
 800755e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007560:	2303      	movs	r3, #3
 8007562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007564:	2300      	movs	r3, #0
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007568:	f107 031c 	add.w	r3, r7, #28
 800756c:	4619      	mov	r1, r3
 800756e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007572:	f7fb fd75 	bl	8003060 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8007576:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 8007578:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <HAL_ADC_MspInit+0x1a8>)
 800757a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800757c:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 800757e:	2200      	movs	r2, #0
 8007580:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007582:	4b18      	ldr	r3, [pc, #96]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 8007584:	2200      	movs	r2, #0
 8007586:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007588:	4b16      	ldr	r3, [pc, #88]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 800758a:	2280      	movs	r2, #128	; 0x80
 800758c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800758e:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 8007590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007594:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 8007598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800759c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 80075a0:	2220      	movs	r2, #32
 80075a2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80075a4:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80075aa:	480e      	ldr	r0, [pc, #56]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 80075ac:	f7fb ff28 	bl	8003400 <HAL_DMA_Init>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_ADC_MspInit+0x17a>
      Msp_Error_Handler();
 80075b6:	f000 f9d3 	bl	8007960 <Msp_Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <HAL_ADC_MspInit+0x1a4>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80075c6:	bf00      	nop
 80075c8:	3730      	adds	r7, #48	; 0x30
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200001b8 	.word	0x200001b8
 80075d4:	40021000 	.word	0x40021000
 80075d8:	20000214 	.word	0x20000214
 80075dc:	40020008 	.word	0x40020008
 80075e0:	50000100 	.word	0x50000100
 80075e4:	200002a8 	.word	0x200002a8
 80075e8:	40020408 	.word	0x40020408

080075ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	60da      	str	r2, [r3, #12]
 8007602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a41      	ldr	r2, [pc, #260]	; (8007710 <HAL_I2C_MspInit+0x124>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d17c      	bne.n	8007708 <HAL_I2C_MspInit+0x11c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800760e:	4b41      	ldr	r3, [pc, #260]	; (8007714 <HAL_I2C_MspInit+0x128>)
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4a40      	ldr	r2, [pc, #256]	; (8007714 <HAL_I2C_MspInit+0x128>)
 8007614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007618:	6153      	str	r3, [r2, #20]
 800761a:	4b3e      	ldr	r3, [pc, #248]	; (8007714 <HAL_I2C_MspInit+0x128>)
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800762a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800762c:	2312      	movs	r3, #18
 800762e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007634:	2303      	movs	r3, #3
 8007636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007638:	2304      	movs	r3, #4
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	4619      	mov	r1, r3
 8007642:	4835      	ldr	r0, [pc, #212]	; (8007718 <HAL_I2C_MspInit+0x12c>)
 8007644:	f7fb fd0c 	bl	8003060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007648:	4b32      	ldr	r3, [pc, #200]	; (8007714 <HAL_I2C_MspInit+0x128>)
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	4a31      	ldr	r2, [pc, #196]	; (8007714 <HAL_I2C_MspInit+0x128>)
 800764e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007652:	61d3      	str	r3, [r2, #28]
 8007654:	4b2f      	ldr	r3, [pc, #188]	; (8007714 <HAL_I2C_MspInit+0x128>)
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8007660:	4b2e      	ldr	r3, [pc, #184]	; (800771c <HAL_I2C_MspInit+0x130>)
 8007662:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <HAL_I2C_MspInit+0x134>)
 8007664:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007666:	4b2d      	ldr	r3, [pc, #180]	; (800771c <HAL_I2C_MspInit+0x130>)
 8007668:	2200      	movs	r2, #0
 800766a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800766c:	4b2b      	ldr	r3, [pc, #172]	; (800771c <HAL_I2C_MspInit+0x130>)
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007672:	4b2a      	ldr	r3, [pc, #168]	; (800771c <HAL_I2C_MspInit+0x130>)
 8007674:	2280      	movs	r2, #128	; 0x80
 8007676:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007678:	4b28      	ldr	r3, [pc, #160]	; (800771c <HAL_I2C_MspInit+0x130>)
 800767a:	2200      	movs	r2, #0
 800767c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <HAL_I2C_MspInit+0x130>)
 8007680:	2200      	movs	r2, #0
 8007682:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007684:	4b25      	ldr	r3, [pc, #148]	; (800771c <HAL_I2C_MspInit+0x130>)
 8007686:	2200      	movs	r2, #0
 8007688:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800768a:	4b24      	ldr	r3, [pc, #144]	; (800771c <HAL_I2C_MspInit+0x130>)
 800768c:	2200      	movs	r2, #0
 800768e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007690:	4822      	ldr	r0, [pc, #136]	; (800771c <HAL_I2C_MspInit+0x130>)
 8007692:	f7fb feb5 	bl	8003400 <HAL_DMA_Init>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_I2C_MspInit+0xb4>
    {
    	Msp_Error_Handler();
 800769c:	f000 f960 	bl	8007960 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a1e      	ldr	r2, [pc, #120]	; (800771c <HAL_I2C_MspInit+0x130>)
 80076a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80076a6:	4a1d      	ldr	r2, [pc, #116]	; (800771c <HAL_I2C_MspInit+0x130>)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80076ac:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076ae:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <HAL_I2C_MspInit+0x13c>)
 80076b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076b2:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076b4:	2210      	movs	r2, #16
 80076b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076b8:	4b1a      	ldr	r3, [pc, #104]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076be:	4b19      	ldr	r3, [pc, #100]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076c0:	2280      	movs	r2, #128	; 0x80
 80076c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076c4:	4b17      	ldr	r3, [pc, #92]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076ca:	4b16      	ldr	r3, [pc, #88]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80076d0:	4b14      	ldr	r3, [pc, #80]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076d6:	4b13      	ldr	r3, [pc, #76]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076d8:	2200      	movs	r2, #0
 80076da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80076dc:	4811      	ldr	r0, [pc, #68]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076de:	f7fb fe8f 	bl	8003400 <HAL_DMA_Init>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <HAL_I2C_MspInit+0x100>
    {
    	Msp_Error_Handler();
 80076e8:	f000 f93a 	bl	8007960 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a0d      	ldr	r2, [pc, #52]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
 80076f2:	4a0c      	ldr	r2, [pc, #48]	; (8007724 <HAL_I2C_MspInit+0x138>)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80076f8:	2200      	movs	r2, #0
 80076fa:	2100      	movs	r1, #0
 80076fc:	201f      	movs	r0, #31
 80076fe:	f7ff fe46 	bl	800738e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007702:	201f      	movs	r0, #31
 8007704:	f7ff fe5f 	bl	80073c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007708:	bf00      	nop
 800770a:	3728      	adds	r7, #40	; 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40005400 	.word	0x40005400
 8007714:	40021000 	.word	0x40021000
 8007718:	48000400 	.word	0x48000400
 800771c:	20000368 	.word	0x20000368
 8007720:	40020080 	.word	0x40020080
 8007724:	200003ac 	.word	0x200003ac
 8007728:	4002006c 	.word	0x4002006c

0800772c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	; 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007734:	f107 0314 	add.w	r3, r7, #20
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	609a      	str	r2, [r3, #8]
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <HAL_SPI_MspInit+0x8c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d130      	bne.n	80077b0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800774e:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <HAL_SPI_MspInit+0x90>)
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <HAL_SPI_MspInit+0x90>)
 8007754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007758:	61d3      	str	r3, [r2, #28]
 800775a:	4b18      	ldr	r3, [pc, #96]	; (80077bc <HAL_SPI_MspInit+0x90>)
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007766:	4b15      	ldr	r3, [pc, #84]	; (80077bc <HAL_SPI_MspInit+0x90>)
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	4a14      	ldr	r2, [pc, #80]	; (80077bc <HAL_SPI_MspInit+0x90>)
 800776c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007770:	6153      	str	r3, [r2, #20]
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <HAL_SPI_MspInit+0x90>)
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800777e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007784:	2302      	movs	r3, #2
 8007786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800778c:	2303      	movs	r3, #3
 800778e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007790:	2306      	movs	r3, #6
 8007792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	4619      	mov	r1, r3
 800779a:	4809      	ldr	r0, [pc, #36]	; (80077c0 <HAL_SPI_MspInit+0x94>)
 800779c:	f7fb fc60 	bl	8003060 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80077a0:	2200      	movs	r2, #0
 80077a2:	2100      	movs	r1, #0
 80077a4:	2033      	movs	r0, #51	; 0x33
 80077a6:	f7ff fdf2 	bl	800738e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80077aa:	2033      	movs	r0, #51	; 0x33
 80077ac:	f7ff fe0b 	bl	80073c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80077b0:	bf00      	nop
 80077b2:	3728      	adds	r7, #40	; 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40003c00 	.word	0x40003c00
 80077bc:	40021000 	.word	0x40021000
 80077c0:	48000800 	.word	0x48000800

080077c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077cc:	f107 0314 	add.w	r3, r7, #20
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	605a      	str	r2, [r3, #4]
 80077d6:	609a      	str	r2, [r3, #8]
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	611a      	str	r2, [r3, #16]
	if(htim_base->Instance==TIM3)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <HAL_TIM_Base_MspInit+0x8c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d130      	bne.n	8007848 <HAL_TIM_Base_MspInit+0x84>
	{
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 80077e6:	4b1b      	ldr	r3, [pc, #108]	; (8007854 <HAL_TIM_Base_MspInit+0x90>)
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	4a1a      	ldr	r2, [pc, #104]	; (8007854 <HAL_TIM_Base_MspInit+0x90>)
 80077ec:	f043 0302 	orr.w	r3, r3, #2
 80077f0:	61d3      	str	r3, [r2, #28]
 80077f2:	4b18      	ldr	r3, [pc, #96]	; (8007854 <HAL_TIM_Base_MspInit+0x90>)
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80077fe:	4b15      	ldr	r3, [pc, #84]	; (8007854 <HAL_TIM_Base_MspInit+0x90>)
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	4a14      	ldr	r2, [pc, #80]	; (8007854 <HAL_TIM_Base_MspInit+0x90>)
 8007804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007808:	6153      	str	r3, [r2, #20]
 800780a:	4b12      	ldr	r3, [pc, #72]	; (8007854 <HAL_TIM_Base_MspInit+0x90>)
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
		/**TIM3 GPIO Configuration
		PA6     ------> TIM3_CH1
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007816:	2340      	movs	r3, #64	; 0x40
 8007818:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800781a:	2302      	movs	r3, #2
 800781c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781e:	2300      	movs	r3, #0
 8007820:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007822:	2300      	movs	r3, #0
 8007824:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007826:	2302      	movs	r3, #2
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800782a:	f107 0314 	add.w	r3, r7, #20
 800782e:	4619      	mov	r1, r3
 8007830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007834:	f7fb fc14 	bl	8003060 <HAL_GPIO_Init>

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	201d      	movs	r0, #29
 800783e:	f7ff fda6 	bl	800738e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007842:	201d      	movs	r0, #29
 8007844:	f7ff fdbf 	bl	80073c6 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}

}
 8007848:	bf00      	nop
 800784a:	3728      	adds	r7, #40	; 0x28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40000400 	.word	0x40000400
 8007854:	40021000 	.word	0x40021000

08007858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	; 0x30
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007860:	f107 031c 	add.w	r3, r7, #28
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	605a      	str	r2, [r3, #4]
 800786a:	609a      	str	r2, [r3, #8]
 800786c:	60da      	str	r2, [r3, #12]
 800786e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a36      	ldr	r2, [pc, #216]	; (8007950 <HAL_UART_MspInit+0xf8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d130      	bne.n	80078dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800787a:	4b36      	ldr	r3, [pc, #216]	; (8007954 <HAL_UART_MspInit+0xfc>)
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	4a35      	ldr	r2, [pc, #212]	; (8007954 <HAL_UART_MspInit+0xfc>)
 8007880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007884:	6193      	str	r3, [r2, #24]
 8007886:	4b33      	ldr	r3, [pc, #204]	; (8007954 <HAL_UART_MspInit+0xfc>)
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800788e:	61bb      	str	r3, [r7, #24]
 8007890:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007892:	4b30      	ldr	r3, [pc, #192]	; (8007954 <HAL_UART_MspInit+0xfc>)
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	4a2f      	ldr	r2, [pc, #188]	; (8007954 <HAL_UART_MspInit+0xfc>)
 8007898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800789c:	6153      	str	r3, [r2, #20]
 800789e:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <HAL_UART_MspInit+0xfc>)
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80078aa:	2330      	movs	r3, #48	; 0x30
 80078ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ae:	2302      	movs	r3, #2
 80078b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078b6:	2303      	movs	r3, #3
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80078ba:	2307      	movs	r3, #7
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078be:	f107 031c 	add.w	r3, r7, #28
 80078c2:	4619      	mov	r1, r3
 80078c4:	4824      	ldr	r0, [pc, #144]	; (8007958 <HAL_UART_MspInit+0x100>)
 80078c6:	f7fb fbcb 	bl	8003060 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	2025      	movs	r0, #37	; 0x25
 80078d0:	f7ff fd5d 	bl	800738e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80078d4:	2025      	movs	r0, #37	; 0x25
 80078d6:	f7ff fd76 	bl	80073c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80078da:	e035      	b.n	8007948 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1e      	ldr	r2, [pc, #120]	; (800795c <HAL_UART_MspInit+0x104>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d130      	bne.n	8007948 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80078e6:	4b1b      	ldr	r3, [pc, #108]	; (8007954 <HAL_UART_MspInit+0xfc>)
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <HAL_UART_MspInit+0xfc>)
 80078ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f0:	61d3      	str	r3, [r2, #28]
 80078f2:	4b18      	ldr	r3, [pc, #96]	; (8007954 <HAL_UART_MspInit+0xfc>)
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078fe:	4b15      	ldr	r3, [pc, #84]	; (8007954 <HAL_UART_MspInit+0xfc>)
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	4a14      	ldr	r2, [pc, #80]	; (8007954 <HAL_UART_MspInit+0xfc>)
 8007904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007908:	6153      	str	r3, [r2, #20]
 800790a:	4b12      	ldr	r3, [pc, #72]	; (8007954 <HAL_UART_MspInit+0xfc>)
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007916:	230c      	movs	r3, #12
 8007918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800791a:	2302      	movs	r3, #2
 800791c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791e:	2300      	movs	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007922:	2303      	movs	r3, #3
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007926:	2307      	movs	r3, #7
 8007928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800792a:	f107 031c 	add.w	r3, r7, #28
 800792e:	4619      	mov	r1, r3
 8007930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007934:	f7fb fb94 	bl	8003060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007938:	2200      	movs	r2, #0
 800793a:	2100      	movs	r1, #0
 800793c:	2026      	movs	r0, #38	; 0x26
 800793e:	f7ff fd26 	bl	800738e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007942:	2026      	movs	r0, #38	; 0x26
 8007944:	f7ff fd3f 	bl	80073c6 <HAL_NVIC_EnableIRQ>
}
 8007948:	bf00      	nop
 800794a:	3730      	adds	r7, #48	; 0x30
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	40013800 	.word	0x40013800
 8007954:	40021000 	.word	0x40021000
 8007958:	48000800 	.word	0x48000800
 800795c:	40004400 	.word	0x40004400

08007960 <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007964:	b672      	cpsid	i
}
 8007966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007968:	e7fe      	b.n	8007968 <Msp_Error_Handler+0x8>
	...

0800796c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007972:	af00      	add	r7, sp, #0
 8007974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007978:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800797c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800797e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007982:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f001 b83a 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007996:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 816f 	beq.w	8007c86 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80079a8:	4bb5      	ldr	r3, [pc, #724]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 030c 	and.w	r3, r3, #12
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d00c      	beq.n	80079ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80079b4:	4bb2      	ldr	r3, [pc, #712]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d15c      	bne.n	8007a7a <HAL_RCC_OscConfig+0x10e>
 80079c0:	4baf      	ldr	r3, [pc, #700]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80079c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079cc:	d155      	bne.n	8007a7a <HAL_RCC_OscConfig+0x10e>
 80079ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80079da:	fa93 f3a3 	rbit	r3, r3
 80079de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80079e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e6:	fab3 f383 	clz	r3, r3
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f043 0301 	orr.w	r3, r3, #1
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d102      	bne.n	8007a00 <HAL_RCC_OscConfig+0x94>
 80079fa:	4ba1      	ldr	r3, [pc, #644]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	e015      	b.n	8007a2c <HAL_RCC_OscConfig+0xc0>
 8007a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a04:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007a0c:	fa93 f3a3 	rbit	r3, r3
 8007a10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8007a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007a1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007a20:	fa93 f3a3 	rbit	r3, r3
 8007a24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007a28:	4b95      	ldr	r3, [pc, #596]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a30:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8007a34:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007a38:	fa92 f2a2 	rbit	r2, r2
 8007a3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8007a40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007a44:	fab2 f282 	clz	r2, r2
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	f042 0220 	orr.w	r2, r2, #32
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	f002 021f 	and.w	r2, r2, #31
 8007a54:	2101      	movs	r1, #1
 8007a56:	fa01 f202 	lsl.w	r2, r1, r2
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8111 	beq.w	8007c84 <HAL_RCC_OscConfig+0x318>
 8007a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f040 8108 	bne.w	8007c84 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f000 bfc6 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8a:	d106      	bne.n	8007a9a <HAL_RCC_OscConfig+0x12e>
 8007a8c:	4b7c      	ldr	r3, [pc, #496]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a7b      	ldr	r2, [pc, #492]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	e036      	b.n	8007b08 <HAL_RCC_OscConfig+0x19c>
 8007a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10c      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x158>
 8007aaa:	4b75      	ldr	r3, [pc, #468]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a74      	ldr	r2, [pc, #464]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	4b72      	ldr	r3, [pc, #456]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a71      	ldr	r2, [pc, #452]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e021      	b.n	8007b08 <HAL_RCC_OscConfig+0x19c>
 8007ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ac8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ad4:	d10c      	bne.n	8007af0 <HAL_RCC_OscConfig+0x184>
 8007ad6:	4b6a      	ldr	r3, [pc, #424]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a69      	ldr	r2, [pc, #420]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	4b67      	ldr	r3, [pc, #412]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a66      	ldr	r2, [pc, #408]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	e00b      	b.n	8007b08 <HAL_RCC_OscConfig+0x19c>
 8007af0:	4b63      	ldr	r3, [pc, #396]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a62      	ldr	r2, [pc, #392]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4b60      	ldr	r3, [pc, #384]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a5f      	ldr	r2, [pc, #380]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b06:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d059      	beq.n	8007bcc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b18:	f7ff fb58 	bl	80071cc <HAL_GetTick>
 8007b1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b20:	e00a      	b.n	8007b38 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b22:	f7ff fb53 	bl	80071cc <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b64      	cmp	r3, #100	; 0x64
 8007b30:	d902      	bls.n	8007b38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	f000 bf67 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
 8007b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b3c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b40:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007b44:	fa93 f3a3 	rbit	r3, r3
 8007b48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8007b4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b50:	fab3 f383 	clz	r3, r3
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	f043 0301 	orr.w	r3, r3, #1
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d102      	bne.n	8007b6a <HAL_RCC_OscConfig+0x1fe>
 8007b64:	4b46      	ldr	r3, [pc, #280]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	e015      	b.n	8007b96 <HAL_RCC_OscConfig+0x22a>
 8007b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007b76:	fa93 f3a3 	rbit	r3, r3
 8007b7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007b86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007b8a:	fa93 f3a3 	rbit	r3, r3
 8007b8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007b92:	4b3b      	ldr	r3, [pc, #236]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b9a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8007b9e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007ba2:	fa92 f2a2 	rbit	r2, r2
 8007ba6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8007baa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007bae:	fab2 f282 	clz	r2, r2
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	f042 0220 	orr.w	r2, r2, #32
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	f002 021f 	and.w	r2, r2, #31
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0ab      	beq.n	8007b22 <HAL_RCC_OscConfig+0x1b6>
 8007bca:	e05c      	b.n	8007c86 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bcc:	f7ff fafe 	bl	80071cc <HAL_GetTick>
 8007bd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bd4:	e00a      	b.n	8007bec <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bd6:	f7ff faf9 	bl	80071cc <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b64      	cmp	r3, #100	; 0x64
 8007be4:	d902      	bls.n	8007bec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	f000 bf0d 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
 8007bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bf0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007bf8:	fa93 f3a3 	rbit	r3, r3
 8007bfc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8007c00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c04:	fab3 f383 	clz	r3, r3
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f043 0301 	orr.w	r3, r3, #1
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d102      	bne.n	8007c1e <HAL_RCC_OscConfig+0x2b2>
 8007c18:	4b19      	ldr	r3, [pc, #100]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	e015      	b.n	8007c4a <HAL_RCC_OscConfig+0x2de>
 8007c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007c2a:	fa93 f3a3 	rbit	r3, r3
 8007c2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007c3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007c3e:	fa93 f3a3 	rbit	r3, r3
 8007c42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007c46:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <HAL_RCC_OscConfig+0x314>)
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8007c52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007c56:	fa92 f2a2 	rbit	r2, r2
 8007c5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8007c5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007c62:	fab2 f282 	clz	r2, r2
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	f042 0220 	orr.w	r2, r2, #32
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	f002 021f 	and.w	r2, r2, #31
 8007c72:	2101      	movs	r1, #1
 8007c74:	fa01 f202 	lsl.w	r2, r1, r2
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1ab      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x26a>
 8007c7e:	e002      	b.n	8007c86 <HAL_RCC_OscConfig+0x31a>
 8007c80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 817f 	beq.w	8007f9a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007c9c:	4ba7      	ldr	r3, [pc, #668]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f003 030c 	and.w	r3, r3, #12
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00c      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007ca8:	4ba4      	ldr	r3, [pc, #656]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f003 030c 	and.w	r3, r3, #12
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d173      	bne.n	8007d9c <HAL_RCC_OscConfig+0x430>
 8007cb4:	4ba1      	ldr	r3, [pc, #644]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc0:	d16c      	bne.n	8007d9c <HAL_RCC_OscConfig+0x430>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007ccc:	fa93 f3a3 	rbit	r3, r3
 8007cd0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8007cd4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cd8:	fab3 f383 	clz	r3, r3
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d102      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x386>
 8007cec:	4b93      	ldr	r3, [pc, #588]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	e013      	b.n	8007d1a <HAL_RCC_OscConfig+0x3ae>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007cfc:	fa93 f3a3 	rbit	r3, r3
 8007d00:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007d04:	2302      	movs	r3, #2
 8007d06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007d0a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007d0e:	fa93 f3a3 	rbit	r3, r3
 8007d12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007d16:	4b89      	ldr	r3, [pc, #548]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8007d20:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8007d24:	fa92 f2a2 	rbit	r2, r2
 8007d28:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8007d2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007d30:	fab2 f282 	clz	r2, r2
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	f042 0220 	orr.w	r2, r2, #32
 8007d3a:	b2d2      	uxtb	r2, r2
 8007d3c:	f002 021f 	and.w	r2, r2, #31
 8007d40:	2101      	movs	r1, #1
 8007d42:	fa01 f202 	lsl.w	r2, r1, r2
 8007d46:	4013      	ands	r3, r2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCC_OscConfig+0x3f6>
 8007d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d002      	beq.n	8007d62 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f000 be52 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d62:	4b76      	ldr	r3, [pc, #472]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	21f8      	movs	r1, #248	; 0xf8
 8007d78:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d7c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8007d80:	fa91 f1a1 	rbit	r1, r1
 8007d84:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8007d88:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007d8c:	fab1 f181 	clz	r1, r1
 8007d90:	b2c9      	uxtb	r1, r1
 8007d92:	408b      	lsls	r3, r1
 8007d94:	4969      	ldr	r1, [pc, #420]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d9a:	e0fe      	b.n	8007f9a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007da0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8088 	beq.w	8007ebe <HAL_RCC_OscConfig+0x552>
 8007dae:	2301      	movs	r3, #1
 8007db0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8007db8:	fa93 f3a3 	rbit	r3, r3
 8007dbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8007dc0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dc4:	fab3 f383 	clz	r3, r3
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007dce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dda:	f7ff f9f7 	bl	80071cc <HAL_GetTick>
 8007dde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007de2:	e00a      	b.n	8007dfa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007de4:	f7ff f9f2 	bl	80071cc <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d902      	bls.n	8007dfa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	f000 be06 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e00:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007e04:	fa93 f3a3 	rbit	r3, r3
 8007e08:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8007e0c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e10:	fab3 f383 	clz	r3, r3
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d102      	bne.n	8007e2a <HAL_RCC_OscConfig+0x4be>
 8007e24:	4b45      	ldr	r3, [pc, #276]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	e013      	b.n	8007e52 <HAL_RCC_OscConfig+0x4e6>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e30:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007e34:	fa93 f3a3 	rbit	r3, r3
 8007e38:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007e42:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007e46:	fa93 f3a3 	rbit	r3, r3
 8007e4a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007e4e:	4b3b      	ldr	r3, [pc, #236]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2202      	movs	r2, #2
 8007e54:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007e58:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007e5c:	fa92 f2a2 	rbit	r2, r2
 8007e60:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8007e64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007e68:	fab2 f282 	clz	r2, r2
 8007e6c:	b2d2      	uxtb	r2, r2
 8007e6e:	f042 0220 	orr.w	r2, r2, #32
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	f002 021f 	and.w	r2, r2, #31
 8007e78:	2101      	movs	r1, #1
 8007e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0af      	beq.n	8007de4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e84:	4b2d      	ldr	r3, [pc, #180]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	21f8      	movs	r1, #248	; 0xf8
 8007e9a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e9e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007ea2:	fa91 f1a1 	rbit	r1, r1
 8007ea6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8007eaa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007eae:	fab1 f181 	clz	r1, r1
 8007eb2:	b2c9      	uxtb	r1, r1
 8007eb4:	408b      	lsls	r3, r1
 8007eb6:	4921      	ldr	r1, [pc, #132]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	600b      	str	r3, [r1, #0]
 8007ebc:	e06d      	b.n	8007f9a <HAL_RCC_OscConfig+0x62e>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007ec8:	fa93 f3a3 	rbit	r3, r3
 8007ecc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8007ed0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ed4:	fab3 f383 	clz	r3, r3
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eea:	f7ff f96f 	bl	80071cc <HAL_GetTick>
 8007eee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ef2:	e00a      	b.n	8007f0a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ef4:	f7ff f96a 	bl	80071cc <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d902      	bls.n	8007f0a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	f000 bd7e 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f14:	fa93 f3a3 	rbit	r3, r3
 8007f18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8007f1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f20:	fab3 f383 	clz	r3, r3
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f043 0301 	orr.w	r3, r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d105      	bne.n	8007f40 <HAL_RCC_OscConfig+0x5d4>
 8007f34:	4b01      	ldr	r3, [pc, #4]	; (8007f3c <HAL_RCC_OscConfig+0x5d0>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	e016      	b.n	8007f68 <HAL_RCC_OscConfig+0x5fc>
 8007f3a:	bf00      	nop
 8007f3c:	40021000 	.word	0x40021000
 8007f40:	2302      	movs	r3, #2
 8007f42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4a:	fa93 f3a3 	rbit	r3, r3
 8007f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f52:	2302      	movs	r3, #2
 8007f54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007f5c:	fa93 f3a3 	rbit	r3, r3
 8007f60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007f64:	4bbf      	ldr	r3, [pc, #764]	; (8008264 <HAL_RCC_OscConfig+0x8f8>)
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007f6e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007f72:	fa92 f2a2 	rbit	r2, r2
 8007f76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8007f7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007f7e:	fab2 f282 	clz	r2, r2
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	f042 0220 	orr.w	r2, r2, #32
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	f002 021f 	and.w	r2, r2, #31
 8007f8e:	2101      	movs	r1, #1
 8007f90:	fa01 f202 	lsl.w	r2, r1, r2
 8007f94:	4013      	ands	r3, r2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1ac      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 8113 	beq.w	80081d6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d07c      	beq.n	80080ba <HAL_RCC_OscConfig+0x74e>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fca:	fa93 f3a3 	rbit	r3, r3
 8007fce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8007fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fd6:	fab3 f383 	clz	r3, r3
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4ba2      	ldr	r3, [pc, #648]	; (8008268 <HAL_RCC_OscConfig+0x8fc>)
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fea:	f7ff f8ef 	bl	80071cc <HAL_GetTick>
 8007fee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ff4:	f7ff f8ea 	bl	80071cc <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d902      	bls.n	800800a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	f000 bcfe 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
 800800a:	2302      	movs	r3, #2
 800800c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008014:	fa93 f2a3 	rbit	r2, r3
 8008018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800801c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800802a:	2202      	movs	r2, #2
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	fa93 f2a3 	rbit	r2, r3
 800803c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800804a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800804e:	2202      	movs	r2, #2
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008056:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	fa93 f2a3 	rbit	r2, r3
 8008060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008064:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008068:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800806a:	4b7e      	ldr	r3, [pc, #504]	; (8008264 <HAL_RCC_OscConfig+0x8f8>)
 800806c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800806e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008072:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008076:	2102      	movs	r1, #2
 8008078:	6019      	str	r1, [r3, #0]
 800807a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800807e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	fa93 f1a3 	rbit	r1, r3
 8008088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800808c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008090:	6019      	str	r1, [r3, #0]
  return result;
 8008092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008096:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	fab3 f383 	clz	r3, r3
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 031f 	and.w	r3, r3, #31
 80080ac:	2101      	movs	r1, #1
 80080ae:	fa01 f303 	lsl.w	r3, r1, r3
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d09d      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x688>
 80080b8:	e08d      	b.n	80081d6 <HAL_RCC_OscConfig+0x86a>
 80080ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	fa93 f2a3 	rbit	r2, r3
 80080d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080dc:	601a      	str	r2, [r3, #0]
  return result;
 80080de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080e8:	fab3 f383 	clz	r3, r3
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	4b5d      	ldr	r3, [pc, #372]	; (8008268 <HAL_RCC_OscConfig+0x8fc>)
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	461a      	mov	r2, r3
 80080f8:	2300      	movs	r3, #0
 80080fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080fc:	f7ff f866 	bl	80071cc <HAL_GetTick>
 8008100:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008104:	e00a      	b.n	800811c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008106:	f7ff f861 	bl	80071cc <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b02      	cmp	r3, #2
 8008114:	d902      	bls.n	800811c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	f000 bc75 	b.w	8008a06 <HAL_RCC_OscConfig+0x109a>
 800811c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008120:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008124:	2202      	movs	r2, #2
 8008126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800812c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	fa93 f2a3 	rbit	r2, r3
 8008136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800813a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008148:	2202      	movs	r2, #2
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008150:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	fa93 f2a3 	rbit	r2, r3
 800815a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800815e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008168:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800816c:	2202      	movs	r2, #2
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008174:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	fa93 f2a3 	rbit	r2, r3
 800817e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008182:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008186:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008188:	4b36      	ldr	r3, [pc, #216]	; (8008264 <HAL_RCC_OscConfig+0x8f8>)
 800818a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800818c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008190:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008194:	2102      	movs	r1, #2
 8008196:	6019      	str	r1, [r3, #0]
 8008198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800819c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	fa93 f1a3 	rbit	r1, r3
 80081a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80081ae:	6019      	str	r1, [r3, #0]
  return result;
 80081b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	fab3 f383 	clz	r3, r3
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 031f 	and.w	r3, r3, #31
 80081ca:	2101      	movs	r1, #1
 80081cc:	fa01 f303 	lsl.w	r3, r1, r3
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d197      	bne.n	8008106 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 81a5 	beq.w	8008536 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ec:	2300      	movs	r3, #0
 80081ee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081f2:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <HAL_RCC_OscConfig+0x8f8>)
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d116      	bne.n	800822c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081fe:	4b19      	ldr	r3, [pc, #100]	; (8008264 <HAL_RCC_OscConfig+0x8f8>)
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	4a18      	ldr	r2, [pc, #96]	; (8008264 <HAL_RCC_OscConfig+0x8f8>)
 8008204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008208:	61d3      	str	r3, [r2, #28]
 800820a:	4b16      	ldr	r3, [pc, #88]	; (8008264 <HAL_RCC_OscConfig+0x8f8>)
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008224:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <HAL_RCC_OscConfig+0x900>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d121      	bne.n	800827c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008238:	4b0c      	ldr	r3, [pc, #48]	; (800826c <HAL_RCC_OscConfig+0x900>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a0b      	ldr	r2, [pc, #44]	; (800826c <HAL_RCC_OscConfig+0x900>)
 800823e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008242:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008244:	f7fe ffc2 	bl	80071cc <HAL_GetTick>
 8008248:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800824c:	e010      	b.n	8008270 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800824e:	f7fe ffbd 	bl	80071cc <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b64      	cmp	r3, #100	; 0x64
 800825c:	d908      	bls.n	8008270 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e3d1      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
 8008262:	bf00      	nop
 8008264:	40021000 	.word	0x40021000
 8008268:	10908120 	.word	0x10908120
 800826c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008270:	4b8d      	ldr	r3, [pc, #564]	; (80084a8 <HAL_RCC_OscConfig+0xb3c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0e8      	beq.n	800824e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800827c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008280:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d106      	bne.n	800829a <HAL_RCC_OscConfig+0x92e>
 800828c:	4b87      	ldr	r3, [pc, #540]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	4a86      	ldr	r2, [pc, #536]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	6213      	str	r3, [r2, #32]
 8008298:	e035      	b.n	8008306 <HAL_RCC_OscConfig+0x99a>
 800829a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800829e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10c      	bne.n	80082c4 <HAL_RCC_OscConfig+0x958>
 80082aa:	4b80      	ldr	r3, [pc, #512]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	4a7f      	ldr	r2, [pc, #508]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	6213      	str	r3, [r2, #32]
 80082b6:	4b7d      	ldr	r3, [pc, #500]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	4a7c      	ldr	r2, [pc, #496]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082bc:	f023 0304 	bic.w	r3, r3, #4
 80082c0:	6213      	str	r3, [r2, #32]
 80082c2:	e020      	b.n	8008306 <HAL_RCC_OscConfig+0x99a>
 80082c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b05      	cmp	r3, #5
 80082d2:	d10c      	bne.n	80082ee <HAL_RCC_OscConfig+0x982>
 80082d4:	4b75      	ldr	r3, [pc, #468]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	4a74      	ldr	r2, [pc, #464]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082da:	f043 0304 	orr.w	r3, r3, #4
 80082de:	6213      	str	r3, [r2, #32]
 80082e0:	4b72      	ldr	r3, [pc, #456]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	4a71      	ldr	r2, [pc, #452]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082e6:	f043 0301 	orr.w	r3, r3, #1
 80082ea:	6213      	str	r3, [r2, #32]
 80082ec:	e00b      	b.n	8008306 <HAL_RCC_OscConfig+0x99a>
 80082ee:	4b6f      	ldr	r3, [pc, #444]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	4a6e      	ldr	r2, [pc, #440]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	6213      	str	r3, [r2, #32]
 80082fa:	4b6c      	ldr	r3, [pc, #432]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	4a6b      	ldr	r2, [pc, #428]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 8008300:	f023 0304 	bic.w	r3, r3, #4
 8008304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800830a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 8081 	beq.w	800841a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008318:	f7fe ff58 	bl	80071cc <HAL_GetTick>
 800831c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008320:	e00b      	b.n	800833a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008322:	f7fe ff53 	bl	80071cc <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e365      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
 800833a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800833e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008342:	2202      	movs	r2, #2
 8008344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800834a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	fa93 f2a3 	rbit	r2, r3
 8008354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008358:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008362:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008366:	2202      	movs	r2, #2
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800836e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	fa93 f2a3 	rbit	r2, r3
 8008378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800837c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008380:	601a      	str	r2, [r3, #0]
  return result;
 8008382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008386:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800838a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800838c:	fab3 f383 	clz	r3, r3
 8008390:	b2db      	uxtb	r3, r3
 8008392:	095b      	lsrs	r3, r3, #5
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f043 0302 	orr.w	r3, r3, #2
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d102      	bne.n	80083a6 <HAL_RCC_OscConfig+0xa3a>
 80083a0:	4b42      	ldr	r3, [pc, #264]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	e013      	b.n	80083ce <HAL_RCC_OscConfig+0xa62>
 80083a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80083ae:	2202      	movs	r2, #2
 80083b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	fa93 f2a3 	rbit	r2, r3
 80083c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083c4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	4b38      	ldr	r3, [pc, #224]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80083d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80083d6:	2102      	movs	r1, #2
 80083d8:	6011      	str	r1, [r2, #0]
 80083da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80083de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80083e2:	6812      	ldr	r2, [r2, #0]
 80083e4:	fa92 f1a2 	rbit	r1, r2
 80083e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80083ec:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80083f0:	6011      	str	r1, [r2, #0]
  return result;
 80083f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80083f6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	fab2 f282 	clz	r2, r2
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	f002 021f 	and.w	r2, r2, #31
 800840c:	2101      	movs	r1, #1
 800840e:	fa01 f202 	lsl.w	r2, r1, r2
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d084      	beq.n	8008322 <HAL_RCC_OscConfig+0x9b6>
 8008418:	e083      	b.n	8008522 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800841a:	f7fe fed7 	bl	80071cc <HAL_GetTick>
 800841e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008422:	e00b      	b.n	800843c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008424:	f7fe fed2 	bl	80071cc <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	f241 3288 	movw	r2, #5000	; 0x1388
 8008434:	4293      	cmp	r3, r2
 8008436:	d901      	bls.n	800843c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e2e4      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
 800843c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008440:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008444:	2202      	movs	r2, #2
 8008446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800844c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	fa93 f2a3 	rbit	r2, r3
 8008456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800845a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008464:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008468:	2202      	movs	r2, #2
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008470:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	fa93 f2a3 	rbit	r2, r3
 800847a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800847e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008482:	601a      	str	r2, [r3, #0]
  return result;
 8008484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008488:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800848c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800848e:	fab3 f383 	clz	r3, r3
 8008492:	b2db      	uxtb	r3, r3
 8008494:	095b      	lsrs	r3, r3, #5
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f043 0302 	orr.w	r3, r3, #2
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d106      	bne.n	80084b0 <HAL_RCC_OscConfig+0xb44>
 80084a2:	4b02      	ldr	r3, [pc, #8]	; (80084ac <HAL_RCC_OscConfig+0xb40>)
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	e017      	b.n	80084d8 <HAL_RCC_OscConfig+0xb6c>
 80084a8:	40007000 	.word	0x40007000
 80084ac:	40021000 	.word	0x40021000
 80084b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80084b8:	2202      	movs	r2, #2
 80084ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	fa93 f2a3 	rbit	r2, r3
 80084ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084ce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	4bb3      	ldr	r3, [pc, #716]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80084dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80084e0:	2102      	movs	r1, #2
 80084e2:	6011      	str	r1, [r2, #0]
 80084e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80084e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	fa92 f1a2 	rbit	r1, r2
 80084f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80084f6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80084fa:	6011      	str	r1, [r2, #0]
  return result;
 80084fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008500:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	fab2 f282 	clz	r2, r2
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	f002 021f 	and.w	r2, r2, #31
 8008516:	2101      	movs	r1, #1
 8008518:	fa01 f202 	lsl.w	r2, r1, r2
 800851c:	4013      	ands	r3, r2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d180      	bne.n	8008424 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008522:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008526:	2b01      	cmp	r3, #1
 8008528:	d105      	bne.n	8008536 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800852a:	4b9e      	ldr	r3, [pc, #632]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	4a9d      	ldr	r2, [pc, #628]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 8008530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008534:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800853a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 825e 	beq.w	8008a04 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008548:	4b96      	ldr	r3, [pc, #600]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f003 030c 	and.w	r3, r3, #12
 8008550:	2b08      	cmp	r3, #8
 8008552:	f000 821f 	beq.w	8008994 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800855a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	2b02      	cmp	r3, #2
 8008564:	f040 8170 	bne.w	8008848 <HAL_RCC_OscConfig+0xedc>
 8008568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800856c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800857a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	fa93 f2a3 	rbit	r2, r3
 8008584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008588:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800858c:	601a      	str	r2, [r3, #0]
  return result;
 800858e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008592:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008596:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008598:	fab3 f383 	clz	r3, r3
 800859c:	b2db      	uxtb	r3, r3
 800859e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80085a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	461a      	mov	r2, r3
 80085aa:	2300      	movs	r3, #0
 80085ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ae:	f7fe fe0d 	bl	80071cc <HAL_GetTick>
 80085b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085b6:	e009      	b.n	80085cc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085b8:	f7fe fe08 	bl	80071cc <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d901      	bls.n	80085cc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e21c      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
 80085cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80085d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	fa93 f2a3 	rbit	r2, r3
 80085e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80085f0:	601a      	str	r2, [r3, #0]
  return result;
 80085f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80085fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085fc:	fab3 f383 	clz	r3, r3
 8008600:	b2db      	uxtb	r3, r3
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d102      	bne.n	8008616 <HAL_RCC_OscConfig+0xcaa>
 8008610:	4b64      	ldr	r3, [pc, #400]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	e027      	b.n	8008666 <HAL_RCC_OscConfig+0xcfa>
 8008616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800861a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800861e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008628:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	fa93 f2a3 	rbit	r2, r3
 8008632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008636:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008640:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008644:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800864e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	fa93 f2a3 	rbit	r2, r3
 8008658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800865c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	4b50      	ldr	r3, [pc, #320]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800866a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800866e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008672:	6011      	str	r1, [r2, #0]
 8008674:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008678:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	fa92 f1a2 	rbit	r1, r2
 8008682:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008686:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800868a:	6011      	str	r1, [r2, #0]
  return result;
 800868c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008690:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	fab2 f282 	clz	r2, r2
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	f042 0220 	orr.w	r2, r2, #32
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	f002 021f 	and.w	r2, r2, #31
 80086a6:	2101      	movs	r1, #1
 80086a8:	fa01 f202 	lsl.w	r2, r1, r2
 80086ac:	4013      	ands	r3, r2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d182      	bne.n	80085b8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086b2:	4b3c      	ldr	r3, [pc, #240]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	f023 020f 	bic.w	r2, r3, #15
 80086ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	4937      	ldr	r1, [pc, #220]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 80086cc:	4b35      	ldr	r3, [pc, #212]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80086d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6a19      	ldr	r1, [r3, #32]
 80086e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	430b      	orrs	r3, r1
 80086ee:	492d      	ldr	r1, [pc, #180]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	604b      	str	r3, [r1, #4]
 80086f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80086fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008706:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	fa93 f2a3 	rbit	r2, r3
 8008710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008714:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008718:	601a      	str	r2, [r3, #0]
  return result;
 800871a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800871e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008722:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008724:	fab3 f383 	clz	r3, r3
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800872e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	461a      	mov	r2, r3
 8008736:	2301      	movs	r3, #1
 8008738:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873a:	f7fe fd47 	bl	80071cc <HAL_GetTick>
 800873e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008742:	e009      	b.n	8008758 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008744:	f7fe fd42 	bl	80071cc <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e156      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
 8008758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800875c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800876a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	fa93 f2a3 	rbit	r2, r3
 8008774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008778:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800877c:	601a      	str	r2, [r3, #0]
  return result;
 800877e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008782:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008788:	fab3 f383 	clz	r3, r3
 800878c:	b2db      	uxtb	r3, r3
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b01      	cmp	r3, #1
 800879a:	d105      	bne.n	80087a8 <HAL_RCC_OscConfig+0xe3c>
 800879c:	4b01      	ldr	r3, [pc, #4]	; (80087a4 <HAL_RCC_OscConfig+0xe38>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	e02a      	b.n	80087f8 <HAL_RCC_OscConfig+0xe8c>
 80087a2:	bf00      	nop
 80087a4:	40021000 	.word	0x40021000
 80087a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80087b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	fa93 f2a3 	rbit	r2, r3
 80087c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80087d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087e0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	fa93 f2a3 	rbit	r2, r3
 80087ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087ee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	4b86      	ldr	r3, [pc, #536]	; (8008a10 <HAL_RCC_OscConfig+0x10a4>)
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80087fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008800:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800880a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	fa92 f1a2 	rbit	r1, r2
 8008814:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008818:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800881c:	6011      	str	r1, [r2, #0]
  return result;
 800881e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008822:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	fab2 f282 	clz	r2, r2
 800882c:	b2d2      	uxtb	r2, r2
 800882e:	f042 0220 	orr.w	r2, r2, #32
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	f002 021f 	and.w	r2, r2, #31
 8008838:	2101      	movs	r1, #1
 800883a:	fa01 f202 	lsl.w	r2, r1, r2
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	f43f af7f 	beq.w	8008744 <HAL_RCC_OscConfig+0xdd8>
 8008846:	e0dd      	b.n	8008a04 <HAL_RCC_OscConfig+0x1098>
 8008848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800884c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800885a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	fa93 f2a3 	rbit	r2, r3
 8008864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008868:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800886c:	601a      	str	r2, [r3, #0]
  return result;
 800886e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008872:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008876:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008878:	fab3 f383 	clz	r3, r3
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008882:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	461a      	mov	r2, r3
 800888a:	2300      	movs	r3, #0
 800888c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800888e:	f7fe fc9d 	bl	80071cc <HAL_GetTick>
 8008892:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008896:	e009      	b.n	80088ac <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008898:	f7fe fc98 	bl	80071cc <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e0ac      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
 80088ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80088b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088be:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	fa93 f2a3 	rbit	r2, r3
 80088c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80088d0:	601a      	str	r2, [r3, #0]
  return result;
 80088d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80088da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088dc:	fab3 f383 	clz	r3, r3
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	095b      	lsrs	r3, r3, #5
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d102      	bne.n	80088f6 <HAL_RCC_OscConfig+0xf8a>
 80088f0:	4b47      	ldr	r3, [pc, #284]	; (8008a10 <HAL_RCC_OscConfig+0x10a4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	e027      	b.n	8008946 <HAL_RCC_OscConfig+0xfda>
 80088f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088fa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80088fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008908:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	fa93 f2a3 	rbit	r2, r3
 8008912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008916:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008920:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800892e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	fa93 f2a3 	rbit	r2, r3
 8008938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800893c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	4b33      	ldr	r3, [pc, #204]	; (8008a10 <HAL_RCC_OscConfig+0x10a4>)
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800894a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800894e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008952:	6011      	str	r1, [r2, #0]
 8008954:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008958:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	fa92 f1a2 	rbit	r1, r2
 8008962:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008966:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800896a:	6011      	str	r1, [r2, #0]
  return result;
 800896c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008970:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	fab2 f282 	clz	r2, r2
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	f042 0220 	orr.w	r2, r2, #32
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	f002 021f 	and.w	r2, r2, #31
 8008986:	2101      	movs	r1, #1
 8008988:	fa01 f202 	lsl.w	r2, r1, r2
 800898c:	4013      	ands	r3, r2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d182      	bne.n	8008898 <HAL_RCC_OscConfig+0xf2c>
 8008992:	e037      	b.n	8008a04 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008998:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e02e      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80089a8:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <HAL_RCC_OscConfig+0x10a4>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <HAL_RCC_OscConfig+0x10a4>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80089b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089bc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80089c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d117      	bne.n	8008a00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80089d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80089d4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80089d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d10b      	bne.n	8008a00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80089e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80089ec:	f003 020f 	and.w	r2, r3, #15
 80089f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d001      	beq.n	8008a04 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	40021000 	.word	0x40021000

08008a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b09e      	sub	sp, #120	; 0x78
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e162      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a2c:	4b90      	ldr	r3, [pc, #576]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d910      	bls.n	8008a5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a3a:	4b8d      	ldr	r3, [pc, #564]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f023 0207 	bic.w	r2, r3, #7
 8008a42:	498b      	ldr	r1, [pc, #556]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a4a:	4b89      	ldr	r3, [pc, #548]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d001      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e14a      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d008      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a68:	4b82      	ldr	r3, [pc, #520]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	497f      	ldr	r1, [pc, #508]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80dc 	beq.w	8008c40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d13c      	bne.n	8008b0a <HAL_RCC_ClockConfig+0xf6>
 8008a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a98:	fa93 f3a3 	rbit	r3, r3
 8008a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aa0:	fab3 f383 	clz	r3, r3
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	095b      	lsrs	r3, r3, #5
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d102      	bne.n	8008aba <HAL_RCC_ClockConfig+0xa6>
 8008ab4:	4b6f      	ldr	r3, [pc, #444]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	e00f      	b.n	8008ada <HAL_RCC_ClockConfig+0xc6>
 8008aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ac2:	fa93 f3a3 	rbit	r3, r3
 8008ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8008ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008acc:	663b      	str	r3, [r7, #96]	; 0x60
 8008ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad0:	fa93 f3a3 	rbit	r3, r3
 8008ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ad6:	4b67      	ldr	r3, [pc, #412]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae2:	fa92 f2a2 	rbit	r2, r2
 8008ae6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aea:	fab2 f282 	clz	r2, r2
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	f042 0220 	orr.w	r2, r2, #32
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	f002 021f 	and.w	r2, r2, #31
 8008afa:	2101      	movs	r1, #1
 8008afc:	fa01 f202 	lsl.w	r2, r1, r2
 8008b00:	4013      	ands	r3, r2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d17b      	bne.n	8008bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e0f3      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d13c      	bne.n	8008b8c <HAL_RCC_ClockConfig+0x178>
 8008b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1a:	fa93 f3a3 	rbit	r3, r3
 8008b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b22:	fab3 f383 	clz	r3, r3
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	095b      	lsrs	r3, r3, #5
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f043 0301 	orr.w	r3, r3, #1
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d102      	bne.n	8008b3c <HAL_RCC_ClockConfig+0x128>
 8008b36:	4b4f      	ldr	r3, [pc, #316]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	e00f      	b.n	8008b5c <HAL_RCC_ClockConfig+0x148>
 8008b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b44:	fa93 f3a3 	rbit	r3, r3
 8008b48:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b52:	fa93 f3a3 	rbit	r3, r3
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b58:	4b46      	ldr	r3, [pc, #280]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b60:	63ba      	str	r2, [r7, #56]	; 0x38
 8008b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b64:	fa92 f2a2 	rbit	r2, r2
 8008b68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b6c:	fab2 f282 	clz	r2, r2
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	f042 0220 	orr.w	r2, r2, #32
 8008b76:	b2d2      	uxtb	r2, r2
 8008b78:	f002 021f 	and.w	r2, r2, #31
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d13a      	bne.n	8008bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e0b2      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	fa93 f3a3 	rbit	r3, r3
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b9a:	fab3 f383 	clz	r3, r3
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d102      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x1a0>
 8008bae:	4b31      	ldr	r3, [pc, #196]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	e00d      	b.n	8008bd0 <HAL_RCC_ClockConfig+0x1bc>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	fa93 f3a3 	rbit	r3, r3
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	623b      	str	r3, [r7, #32]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	fa93 f3a3 	rbit	r3, r3
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	4b29      	ldr	r3, [pc, #164]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	61ba      	str	r2, [r7, #24]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	fa92 f2a2 	rbit	r2, r2
 8008bda:	617a      	str	r2, [r7, #20]
  return result;
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	fab2 f282 	clz	r2, r2
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	f042 0220 	orr.w	r2, r2, #32
 8008be8:	b2d2      	uxtb	r2, r2
 8008bea:	f002 021f 	and.w	r2, r2, #31
 8008bee:	2101      	movs	r1, #1
 8008bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e079      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bfe:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f023 0203 	bic.w	r2, r3, #3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	491a      	ldr	r1, [pc, #104]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c10:	f7fe fadc 	bl	80071cc <HAL_GetTick>
 8008c14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c16:	e00a      	b.n	8008c2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c18:	f7fe fad8 	bl	80071cc <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e061      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c2e:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <HAL_RCC_ClockConfig+0x260>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f003 020c 	and.w	r2, r3, #12
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d1eb      	bne.n	8008c18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d214      	bcs.n	8008c78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4e:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f023 0207 	bic.w	r2, r3, #7
 8008c56:	4906      	ldr	r1, [pc, #24]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c5e:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <HAL_RCC_ClockConfig+0x25c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d005      	beq.n	8008c78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e040      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x2de>
 8008c70:	40022000 	.word	0x40022000
 8008c74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d008      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c84:	4b1d      	ldr	r3, [pc, #116]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	491a      	ldr	r1, [pc, #104]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ca2:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4912      	ldr	r1, [pc, #72]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008cb6:	f000 f829 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <HAL_RCC_ClockConfig+0x2e8>)
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cc4:	22f0      	movs	r2, #240	; 0xf0
 8008cc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	fa92 f2a2 	rbit	r2, r2
 8008cce:	60fa      	str	r2, [r7, #12]
  return result;
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	fab2 f282 	clz	r2, r2
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	40d3      	lsrs	r3, r2
 8008cda:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <HAL_RCC_ClockConfig+0x2ec>)
 8008cdc:	5cd3      	ldrb	r3, [r2, r3]
 8008cde:	fa21 f303 	lsr.w	r3, r1, r3
 8008ce2:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <HAL_RCC_ClockConfig+0x2f0>)
 8008ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008ce6:	4b08      	ldr	r3, [pc, #32]	; (8008d08 <HAL_RCC_ClockConfig+0x2f4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fa26 	bl	800713c <HAL_InitTick>
  
  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3778      	adds	r7, #120	; 0x78
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	0800c504 	.word	0x0800c504
 8008d04:	20000000 	.word	0x20000000
 8008d08:	20000004 	.word	0x20000004

08008d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b08b      	sub	sp, #44	; 0x2c
 8008d10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008d26:	4b2a      	ldr	r3, [pc, #168]	; (8008dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	f003 030c 	and.w	r3, r3, #12
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d002      	beq.n	8008d3c <HAL_RCC_GetSysClockFreq+0x30>
 8008d36:	2b08      	cmp	r3, #8
 8008d38:	d003      	beq.n	8008d42 <HAL_RCC_GetSysClockFreq+0x36>
 8008d3a:	e03f      	b.n	8008dbc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008d3c:	4b25      	ldr	r3, [pc, #148]	; (8008dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008d3e:	623b      	str	r3, [r7, #32]
      break;
 8008d40:	e03f      	b.n	8008dc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008d48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008d4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	fa92 f2a2 	rbit	r2, r2
 8008d54:	607a      	str	r2, [r7, #4]
  return result;
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	fab2 f282 	clz	r2, r2
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	40d3      	lsrs	r3, r2
 8008d60:	4a1d      	ldr	r2, [pc, #116]	; (8008dd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008d62:	5cd3      	ldrb	r3, [r2, r3]
 8008d64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008d66:	4b1a      	ldr	r3, [pc, #104]	; (8008dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6a:	f003 030f 	and.w	r3, r3, #15
 8008d6e:	220f      	movs	r2, #15
 8008d70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	fa92 f2a2 	rbit	r2, r2
 8008d78:	60fa      	str	r2, [r7, #12]
  return result;
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	fab2 f282 	clz	r2, r2
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	40d3      	lsrs	r3, r2
 8008d84:	4a15      	ldr	r2, [pc, #84]	; (8008ddc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d86:	5cd3      	ldrb	r3, [r2, r3]
 8008d88:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008d94:	4a0f      	ldr	r2, [pc, #60]	; (8008dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
 8008da4:	e007      	b.n	8008db6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008da6:	4a0b      	ldr	r2, [pc, #44]	; (8008dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	fb02 f303 	mul.w	r3, r2, r3
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	623b      	str	r3, [r7, #32]
      break;
 8008dba:	e002      	b.n	8008dc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008dbe:	623b      	str	r3, [r7, #32]
      break;
 8008dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	372c      	adds	r7, #44	; 0x2c
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	007a1200 	.word	0x007a1200
 8008dd8:	0800c51c 	.word	0x0800c51c
 8008ddc:	0800c52c 	.word	0x0800c52c

08008de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008de0:	b480      	push	{r7}
 8008de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008de4:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8008de6:	681b      	ldr	r3, [r3, #0]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bc80      	pop	{r7}
 8008dee:	4770      	bx	lr
 8008df0:	20000000 	.word	0x20000000

08008df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008dfa:	f7ff fff1 	bl	8008de0 <HAL_RCC_GetHCLKFreq>
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008e0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	fa92 f2a2 	rbit	r2, r2
 8008e14:	603a      	str	r2, [r7, #0]
  return result;
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	fab2 f282 	clz	r2, r2
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	40d3      	lsrs	r3, r2
 8008e20:	4a04      	ldr	r2, [pc, #16]	; (8008e34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008e22:	5cd3      	ldrb	r3, [r2, r3]
 8008e24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40021000 	.word	0x40021000
 8008e34:	0800c514 	.word	0x0800c514

08008e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008e3e:	f7ff ffcf 	bl	8008de0 <HAL_RCC_GetHCLKFreq>
 8008e42:	4601      	mov	r1, r0
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008e4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008e50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	fa92 f2a2 	rbit	r2, r2
 8008e58:	603a      	str	r2, [r7, #0]
  return result;
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	fab2 f282 	clz	r2, r2
 8008e60:	b2d2      	uxtb	r2, r2
 8008e62:	40d3      	lsrs	r3, r2
 8008e64:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008e66:	5cd3      	ldrb	r3, [r2, r3]
 8008e68:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	40021000 	.word	0x40021000
 8008e78:	0800c514 	.word	0x0800c514

08008e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b092      	sub	sp, #72	; 0x48
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 80d4 	beq.w	8009048 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ea0:	4b4e      	ldr	r3, [pc, #312]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10e      	bne.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eac:	4b4b      	ldr	r3, [pc, #300]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	4a4a      	ldr	r2, [pc, #296]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb6:	61d3      	str	r3, [r2, #28]
 8008eb8:	4b48      	ldr	r3, [pc, #288]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec0:	60bb      	str	r3, [r7, #8]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eca:	4b45      	ldr	r3, [pc, #276]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d118      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ed6:	4b42      	ldr	r3, [pc, #264]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ee0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ee2:	f7fe f973 	bl	80071cc <HAL_GetTick>
 8008ee6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ee8:	e008      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eea:	f7fe f96f 	bl	80071cc <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b64      	cmp	r3, #100	; 0x64
 8008ef6:	d901      	bls.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e1d6      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008efc:	4b38      	ldr	r3, [pc, #224]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0f0      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f08:	4b34      	ldr	r3, [pc, #208]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8084 	beq.w	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d07c      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f28:	4b2c      	ldr	r3, [pc, #176]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	fa93 f3a3 	rbit	r3, r3
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f42:	fab3 f383 	clz	r3, r3
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4b26      	ldr	r3, [pc, #152]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	461a      	mov	r2, r3
 8008f52:	2301      	movs	r3, #1
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	fa93 f3a3 	rbit	r3, r3
 8008f62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f66:	fab3 f383 	clz	r3, r3
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	4b1d      	ldr	r3, [pc, #116]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	461a      	mov	r2, r3
 8008f76:	2300      	movs	r3, #0
 8008f78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008f7a:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d04b      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f8a:	f7fe f91f 	bl	80071cc <HAL_GetTick>
 8008f8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f90:	e00a      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f92:	f7fe f91b 	bl	80071cc <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e180      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	fa93 f3a3 	rbit	r3, r3
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	623b      	str	r3, [r7, #32]
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	fa93 f3a3 	rbit	r3, r3
 8008fbe:	61fb      	str	r3, [r7, #28]
  return result;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc2:	fab3 f383 	clz	r3, r3
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	f043 0302 	orr.w	r3, r3, #2
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d108      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008fd6:	4b01      	ldr	r3, [pc, #4]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	e00d      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008fdc:	40021000 	.word	0x40021000
 8008fe0:	40007000 	.word	0x40007000
 8008fe4:	10908100 	.word	0x10908100
 8008fe8:	2302      	movs	r3, #2
 8008fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	fa93 f3a3 	rbit	r3, r3
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	4b9a      	ldr	r3, [pc, #616]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	613a      	str	r2, [r7, #16]
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	fa92 f2a2 	rbit	r2, r2
 8009002:	60fa      	str	r2, [r7, #12]
  return result;
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	fab2 f282 	clz	r2, r2
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	f002 021f 	and.w	r2, r2, #31
 8009016:	2101      	movs	r1, #1
 8009018:	fa01 f202 	lsl.w	r2, r1, r2
 800901c:	4013      	ands	r3, r2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0b7      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009022:	4b8f      	ldr	r3, [pc, #572]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	498c      	ldr	r1, [pc, #560]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009030:	4313      	orrs	r3, r2
 8009032:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009034:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009038:	2b01      	cmp	r3, #1
 800903a:	d105      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800903c:	4b88      	ldr	r3, [pc, #544]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	4a87      	ldr	r2, [pc, #540]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009046:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	d008      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009054:	4b82      	ldr	r3, [pc, #520]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	f023 0203 	bic.w	r2, r3, #3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	497f      	ldr	r1, [pc, #508]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009062:	4313      	orrs	r3, r2
 8009064:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009072:	4b7b      	ldr	r3, [pc, #492]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	4978      	ldr	r1, [pc, #480]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009080:	4313      	orrs	r3, r2
 8009082:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d008      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009090:	4b73      	ldr	r3, [pc, #460]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	4970      	ldr	r1, [pc, #448]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090ae:	4b6c      	ldr	r3, [pc, #432]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	f023 0210 	bic.w	r2, r3, #16
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	4969      	ldr	r1, [pc, #420]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d008      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80090cc:	4b64      	ldr	r3, [pc, #400]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d8:	4961      	ldr	r1, [pc, #388]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d008      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80090ea:	4b5d      	ldr	r3, [pc, #372]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f023 0220 	bic.w	r2, r3, #32
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	495a      	ldr	r1, [pc, #360]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009108:	4b55      	ldr	r3, [pc, #340]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	4952      	ldr	r1, [pc, #328]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009116:	4313      	orrs	r3, r2
 8009118:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d008      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009126:	4b4e      	ldr	r3, [pc, #312]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	494b      	ldr	r1, [pc, #300]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009134:	4313      	orrs	r3, r2
 8009136:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0310 	and.w	r3, r3, #16
 8009140:	2b00      	cmp	r3, #0
 8009142:	d008      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009144:	4b46      	ldr	r3, [pc, #280]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	4943      	ldr	r1, [pc, #268]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009152:	4313      	orrs	r3, r2
 8009154:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800915e:	2b00      	cmp	r3, #0
 8009160:	d008      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009162:	4b3f      	ldr	r3, [pc, #252]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	493c      	ldr	r1, [pc, #240]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009170:	4313      	orrs	r3, r2
 8009172:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917c:	2b00      	cmp	r3, #0
 800917e:	d008      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009180:	4b37      	ldr	r3, [pc, #220]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	4934      	ldr	r1, [pc, #208]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800918e:	4313      	orrs	r3, r2
 8009190:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800919a:	2b00      	cmp	r3, #0
 800919c:	d008      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800919e:	4b30      	ldr	r3, [pc, #192]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	492d      	ldr	r1, [pc, #180]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d008      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80091bc:	4b28      	ldr	r3, [pc, #160]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c8:	4925      	ldr	r1, [pc, #148]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d008      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80091da:	4b21      	ldr	r3, [pc, #132]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e6:	491e      	ldr	r1, [pc, #120]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091e8:	4313      	orrs	r3, r2
 80091ea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d008      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80091f8:	4b19      	ldr	r3, [pc, #100]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009204:	4916      	ldr	r1, [pc, #88]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009206:	4313      	orrs	r3, r2
 8009208:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d008      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8009216:	4b12      	ldr	r3, [pc, #72]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	490f      	ldr	r1, [pc, #60]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009224:	4313      	orrs	r3, r2
 8009226:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d008      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009238:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009240:	4907      	ldr	r1, [pc, #28]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009242:	4313      	orrs	r3, r2
 8009244:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00c      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8009252:	4b03      	ldr	r3, [pc, #12]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	e002      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800925e:	bf00      	nop
 8009260:	40021000 	.word	0x40021000
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	4913      	ldr	r1, [pc, #76]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009268:	4313      	orrs	r3, r2
 800926a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d008      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009278:	4b0e      	ldr	r3, [pc, #56]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009284:	490b      	ldr	r1, [pc, #44]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009286:	4313      	orrs	r3, r2
 8009288:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8009296:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a2:	4904      	ldr	r1, [pc, #16]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3748      	adds	r7, #72	; 0x48
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	40021000 	.word	0x40021000

080092b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092b8:	b480      	push	{r7}
 80092ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80092bc:	e7fe      	b.n	80092bc <NMI_Handler+0x4>

080092be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092be:	b480      	push	{r7}
 80092c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80092c2:	e7fe      	b.n	80092c2 <HardFault_Handler+0x4>

080092c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80092c4:	b480      	push	{r7}
 80092c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80092c8:	e7fe      	b.n	80092c8 <MemManage_Handler+0x4>

080092ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80092ca:	b480      	push	{r7}
 80092cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80092ce:	e7fe      	b.n	80092ce <BusFault_Handler+0x4>

080092d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80092d4:	e7fe      	b.n	80092d4 <UsageFault_Handler+0x4>

080092d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80092d6:	b480      	push	{r7}
 80092d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80092da:	bf00      	nop
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr

080092e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80092e2:	b480      	push	{r7}
 80092e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80092e6:	bf00      	nop
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr
	...

080092f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80092f4:	4802      	ldr	r0, [pc, #8]	; (8009300 <DMA1_Channel1_IRQHandler+0x10>)
 80092f6:	f7fa f99f 	bl	8003638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80092fa:	bf00      	nop
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000214 	.word	0x20000214

08009304 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009308:	4802      	ldr	r0, [pc, #8]	; (8009314 <DMA1_Channel6_IRQHandler+0x10>)
 800930a:	f7fa f995 	bl	8003638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800930e:	bf00      	nop
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	200003ac 	.word	0x200003ac

08009318 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800931c:	4802      	ldr	r0, [pc, #8]	; (8009328 <DMA1_Channel7_IRQHandler+0x10>)
 800931e:	f7fa f98b 	bl	8003638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8009322:	bf00      	nop
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000368 	.word	0x20000368

0800932c <DMA2_Channel1_IRQHandler>:

void DMA2_Channel1_IRQHandler(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8009330:	4802      	ldr	r0, [pc, #8]	; (800933c <DMA2_Channel1_IRQHandler+0x10>)
 8009332:	f7fa f981 	bl	8003638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009336:	bf00      	nop
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	200002a8 	.word	0x200002a8

08009340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009344:	4802      	ldr	r0, [pc, #8]	; (8009350 <TIM3_IRQHandler+0x10>)
 8009346:	f7fa fe77 	bl	8004038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800934a:	bf00      	nop
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20000140 	.word	0x20000140

08009354 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009358:	4802      	ldr	r0, [pc, #8]	; (8009364 <I2C1_EV_IRQHandler+0x10>)
 800935a:	f7fc fb3f 	bl	80059dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800935e:	bf00      	nop
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	200002ec 	.word	0x200002ec

08009368 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800936c:	4802      	ldr	r0, [pc, #8]	; (8009378 <USART1_IRQHandler+0x10>)
 800936e:	f000 fb6f 	bl	8009a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009372:	bf00      	nop
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	2000047c 	.word	0x2000047c

0800937c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009380:	4802      	ldr	r0, [pc, #8]	; (800938c <USART2_IRQHandler+0x10>)
 8009382:	f000 fb65 	bl	8009a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009386:	bf00      	nop
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000500 	.word	0x20000500

08009390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8009394:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009398:	f7fa f81a 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800939c:	bf00      	nop
 800939e:	bd80      	pop	{r7, pc}

080093a0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80093a4:	4802      	ldr	r0, [pc, #8]	; (80093b0 <SPI3_IRQHandler+0x10>)
 80093a6:	f000 f91d 	bl	80095e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80093aa:	bf00      	nop
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200003f0 	.word	0x200003f0

080093b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80093bc:	4a14      	ldr	r2, [pc, #80]	; (8009410 <_sbrk+0x5c>)
 80093be:	4b15      	ldr	r3, [pc, #84]	; (8009414 <_sbrk+0x60>)
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80093c8:	4b13      	ldr	r3, [pc, #76]	; (8009418 <_sbrk+0x64>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d102      	bne.n	80093d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80093d0:	4b11      	ldr	r3, [pc, #68]	; (8009418 <_sbrk+0x64>)
 80093d2:	4a12      	ldr	r2, [pc, #72]	; (800941c <_sbrk+0x68>)
 80093d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80093d6:	4b10      	ldr	r3, [pc, #64]	; (8009418 <_sbrk+0x64>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4413      	add	r3, r2
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d207      	bcs.n	80093f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80093e4:	f002 fbfa 	bl	800bbdc <__errno>
 80093e8:	4603      	mov	r3, r0
 80093ea:	220c      	movs	r2, #12
 80093ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e009      	b.n	8009408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80093f4:	4b08      	ldr	r3, [pc, #32]	; (8009418 <_sbrk+0x64>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <_sbrk+0x64>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4413      	add	r3, r2
 8009402:	4a05      	ldr	r2, [pc, #20]	; (8009418 <_sbrk+0x64>)
 8009404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009406:	68fb      	ldr	r3, [r7, #12]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20010000 	.word	0x20010000
 8009414:	00000400 	.word	0x00000400
 8009418:	200001bc 	.word	0x200001bc
 800941c:	200017c8 	.word	0x200017c8

08009420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e0c1      	b.n	80095b6 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	d108      	bne.n	800944c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009442:	d009      	beq.n	8009458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	61da      	str	r2, [r3, #28]
 800944a:	e005      	b.n	8009458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d12a      	bne.n	80094c0 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a52      	ldr	r2, [pc, #328]	; (80095c0 <HAL_SPI_Init+0x1a0>)
 8009476:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a52      	ldr	r2, [pc, #328]	; (80095c4 <HAL_SPI_Init+0x1a4>)
 800947c:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a51      	ldr	r2, [pc, #324]	; (80095c8 <HAL_SPI_Init+0x1a8>)
 8009482:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a51      	ldr	r2, [pc, #324]	; (80095cc <HAL_SPI_Init+0x1ac>)
 8009488:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a50      	ldr	r2, [pc, #320]	; (80095d0 <HAL_SPI_Init+0x1b0>)
 800948e:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a50      	ldr	r2, [pc, #320]	; (80095d4 <HAL_SPI_Init+0x1b4>)
 8009494:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a4f      	ldr	r2, [pc, #316]	; (80095d8 <HAL_SPI_Init+0x1b8>)
 800949a:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a4f      	ldr	r2, [pc, #316]	; (80095dc <HAL_SPI_Init+0x1bc>)
 80094a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d103      	bne.n	80094b6 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a4b      	ldr	r2, [pc, #300]	; (80095e0 <HAL_SPI_Init+0x1c0>)
 80094b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094e0:	d902      	bls.n	80094e8 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
 80094e6:	e002      	b.n	80094ee <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80094e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80094f6:	d007      	beq.n	8009508 <HAL_SPI_Init+0xe8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009500:	d002      	beq.n	8009508 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009518:	431a      	orrs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954a:	ea42 0103 	orr.w	r1, r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009552:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	f003 0204 	and.w	r2, r3, #4
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009576:	f003 0308 	and.w	r3, r3, #8
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009584:	ea42 0103 	orr.w	r1, r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69da      	ldr	r2, [r3, #28]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	080097d1 	.word	0x080097d1
 80095c4:	080097e3 	.word	0x080097e3
 80095c8:	080097f5 	.word	0x080097f5
 80095cc:	08009807 	.word	0x08009807
 80095d0:	08009819 	.word	0x08009819
 80095d4:	0800982b 	.word	0x0800982b
 80095d8:	0800983d 	.word	0x0800983d
 80095dc:	0800984f 	.word	0x0800984f
 80095e0:	0800772d 	.word	0x0800772d

080095e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10e      	bne.n	8009624 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800960c:	2b00      	cmp	r3, #0
 800960e:	d009      	beq.n	8009624 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	4798      	blx	r3
    return;
 8009622:	e0cf      	b.n	80097c4 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f003 0302 	and.w	r3, r3, #2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d009      	beq.n	8009642 <HAL_SPI_IRQHandler+0x5e>
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	4798      	blx	r3
    return;
 8009640:	e0c0      	b.n	80097c4 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	f003 0320 	and.w	r3, r3, #32
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <HAL_SPI_IRQHandler+0x7e>
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009652:	2b00      	cmp	r3, #0
 8009654:	d105      	bne.n	8009662 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 80b1 	beq.w	80097c4 <HAL_SPI_IRQHandler+0x1e0>
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80ab 	beq.w	80097c4 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d023      	beq.n	80096c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b03      	cmp	r3, #3
 8009682:	d011      	beq.n	80096a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009688:	f043 0204 	orr.w	r2, r3, #4
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	e00b      	b.n	80096c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	613b      	str	r3, [r7, #16]
 80096bc:	693b      	ldr	r3, [r7, #16]
        return;
 80096be:	e081      	b.n	80097c4 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d014      	beq.n	80096f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ce:	f043 0201 	orr.w	r2, r3, #1
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00c      	beq.n	8009718 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009702:	f043 0208 	orr.w	r2, r3, #8
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	60bb      	str	r3, [r7, #8]
 8009716:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800971c:	2b00      	cmp	r3, #0
 800971e:	d050      	beq.n	80097c2 <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800972e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d104      	bne.n	800974c <HAL_SPI_IRQHandler+0x168>
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	d034      	beq.n	80097b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0203 	bic.w	r2, r2, #3
 800975a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009760:	2b00      	cmp	r3, #0
 8009762:	d011      	beq.n	8009788 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009768:	4a18      	ldr	r2, [pc, #96]	; (80097cc <HAL_SPI_IRQHandler+0x1e8>)
 800976a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009770:	4618      	mov	r0, r3
 8009772:	f7f9 ff23 	bl	80035bc <HAL_DMA_Abort_IT>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009780:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978c:	2b00      	cmp	r3, #0
 800978e:	d017      	beq.n	80097c0 <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009794:	4a0d      	ldr	r2, [pc, #52]	; (80097cc <HAL_SPI_IRQHandler+0x1e8>)
 8009796:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979c:	4618      	mov	r0, r3
 800979e:	f7f9 ff0d 	bl	80035bc <HAL_DMA_Abort_IT>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80097b4:	e004      	b.n	80097c0 <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80097be:	e000      	b.n	80097c2 <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 80097c0:	bf00      	nop
    return;
 80097c2:	bf00      	nop
  }
}
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	08009861 	.word	0x08009861

080097d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	bc80      	pop	{r7}
 80097e0:	4770      	bx	lr

080097e2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bc80      	pop	{r7}
 80097f2:	4770      	bx	lr

080097f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr

08009806 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800980e:	bf00      	nop
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	bc80      	pop	{r7}
 8009816:	4770      	bx	lr

08009818 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	bc80      	pop	{r7}
 8009828:	4770      	bx	lr

0800982a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009832:	bf00      	nop
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	bc80      	pop	{r7}
 800983a:	4770      	bx	lr

0800983c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	bc80      	pop	{r7}
 800984c:	4770      	bx	lr

0800984e <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	bc80      	pop	{r7}
 800985e:	4770      	bx	lr

08009860 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009884:	bf00      	nop
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e040      	b.n	8009920 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7fd ffd2 	bl	8007858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2224      	movs	r2, #36	; 0x24
 80098b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fbbc 	bl	800a048 <UART_SetConfig>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e022      	b.n	8009920 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fd86 	bl	800a3f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0201 	orr.w	r2, r2, #1
 8009916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fe0c 	bl	800a536 <UART_CheckIdleState>
 800991e:	4603      	mov	r3, r0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af02      	add	r7, sp, #8
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	4613      	mov	r3, r2
 8009936:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800993c:	2b20      	cmp	r3, #32
 800993e:	f040 8082 	bne.w	8009a46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <HAL_UART_Transmit+0x26>
 8009948:	88fb      	ldrh	r3, [r7, #6]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e07a      	b.n	8009a48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009958:	2b01      	cmp	r3, #1
 800995a:	d101      	bne.n	8009960 <HAL_UART_Transmit+0x38>
 800995c:	2302      	movs	r3, #2
 800995e:	e073      	b.n	8009a48 <HAL_UART_Transmit+0x120>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2221      	movs	r2, #33	; 0x21
 8009974:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009976:	f7fd fc29 	bl	80071cc <HAL_GetTick>
 800997a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	88fa      	ldrh	r2, [r7, #6]
 8009980:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	88fa      	ldrh	r2, [r7, #6]
 8009988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009994:	d108      	bne.n	80099a8 <HAL_UART_Transmit+0x80>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d104      	bne.n	80099a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	e003      	b.n	80099b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099ac:	2300      	movs	r3, #0
 80099ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80099b8:	e02d      	b.n	8009a16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2200      	movs	r2, #0
 80099c2:	2180      	movs	r1, #128	; 0x80
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 fdff 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e039      	b.n	8009a48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10b      	bne.n	80099f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	881a      	ldrh	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099e6:	b292      	uxth	r2, r2
 80099e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	3302      	adds	r3, #2
 80099ee:	61bb      	str	r3, [r7, #24]
 80099f0:	e008      	b.n	8009a04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	b292      	uxth	r2, r2
 80099fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	3301      	adds	r3, #1
 8009a02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1cb      	bne.n	80099ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2140      	movs	r1, #64	; 0x40
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fdcb 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e005      	b.n	8009a48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	e000      	b.n	8009a48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009a46:	2302      	movs	r3, #2
  }
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3720      	adds	r7, #32
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b0ba      	sub	sp, #232	; 0xe8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a7e:	4013      	ands	r3, r2
 8009a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d115      	bne.n	8009ab8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00f      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d009      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 82a3 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
      }
      return;
 8009ab6:	e29d      	b.n	8009ff4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 8117 	beq.w	8009cf0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009ad2:	4b85      	ldr	r3, [pc, #532]	; (8009ce8 <HAL_UART_IRQHandler+0x298>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 810a 	beq.w	8009cf0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d011      	beq.n	8009b0c <HAL_UART_IRQHandler+0xbc>
 8009ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2201      	movs	r2, #1
 8009afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b02:	f043 0201 	orr.w	r2, r3, #1
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d011      	beq.n	8009b3c <HAL_UART_IRQHandler+0xec>
 8009b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b32:	f043 0204 	orr.w	r2, r3, #4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b40:	f003 0304 	and.w	r3, r3, #4
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d011      	beq.n	8009b6c <HAL_UART_IRQHandler+0x11c>
 8009b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2204      	movs	r2, #4
 8009b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b62:	f043 0202 	orr.w	r2, r3, #2
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d017      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b7c:	f003 0320 	and.w	r3, r3, #32
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d105      	bne.n	8009b90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2208      	movs	r2, #8
 8009b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b9e:	f043 0208 	orr.w	r2, r3, #8
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d012      	beq.n	8009bda <HAL_UART_IRQHandler+0x18a>
 8009bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00c      	beq.n	8009bda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd0:	f043 0220 	orr.w	r2, r3, #32
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 8209 	beq.w	8009ff8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00d      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf6:	f003 0320 	and.w	r3, r3, #32
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b40      	cmp	r3, #64	; 0x40
 8009c24:	d005      	beq.n	8009c32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d04f      	beq.n	8009cd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fd8c 	bl	800a750 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c42:	2b40      	cmp	r3, #64	; 0x40
 8009c44:	d141      	bne.n	8009cca <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1d9      	bne.n	8009c46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d013      	beq.n	8009cc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	4a13      	ldr	r2, [pc, #76]	; (8009cec <HAL_UART_IRQHandler+0x29c>)
 8009ca0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7f9 fc88 	bl	80035bc <HAL_DMA_Abort_IT>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d017      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc0:	e00f      	b.n	8009ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9ab 	bl	800a01e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc8:	e00b      	b.n	8009ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f9a7 	bl	800a01e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd0:	e007      	b.n	8009ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f9a3 	bl	800a01e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009ce0:	e18a      	b.n	8009ff8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce2:	bf00      	nop
    return;
 8009ce4:	e188      	b.n	8009ff8 <HAL_UART_IRQHandler+0x5a8>
 8009ce6:	bf00      	nop
 8009ce8:	04000120 	.word	0x04000120
 8009cec:	0800a815 	.word	0x0800a815

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	f040 8143 	bne.w	8009f80 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cfe:	f003 0310 	and.w	r3, r3, #16
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 813c 	beq.w	8009f80 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 8135 	beq.w	8009f80 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2210      	movs	r2, #16
 8009d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d28:	2b40      	cmp	r3, #64	; 0x40
 8009d2a:	f040 80b1 	bne.w	8009e90 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 815c 	beq.w	8009ffc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	f080 8154 	bcs.w	8009ffc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	f000 8085 	beq.w	8009e74 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d98:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009da0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1da      	bne.n	8009d6a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3308      	adds	r3, #8
 8009dba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dbe:	e853 3f00 	ldrex	r3, [r3]
 8009dc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009dd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009de0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e1      	bne.n	8009db4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dfa:	e853 3f00 	ldrex	r3, [r3]
 8009dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3308      	adds	r3, #8
 8009e10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e3      	bne.n	8009df0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e44:	f023 0310 	bic.w	r3, r3, #16
 8009e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e4      	bne.n	8009e34 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7f9 fb6c 	bl	800354c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f8d1 	bl	800a030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e8e:	e0b5      	b.n	8009ffc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 80a7 	beq.w	800a000 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009eb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 80a2 	beq.w	800a000 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ede:	647b      	str	r3, [r7, #68]	; 0x44
 8009ee0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e4      	bne.n	8009ebc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	623b      	str	r3, [r7, #32]
   return(result);
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f023 0301 	bic.w	r3, r3, #1
 8009f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3308      	adds	r3, #8
 8009f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f16:	633a      	str	r2, [r7, #48]	; 0x30
 8009f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e3      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f023 0310 	bic.w	r3, r3, #16
 8009f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f5e:	61fb      	str	r3, [r7, #28]
 8009f60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	69b9      	ldr	r1, [r7, #24]
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e4      	bne.n	8009f3c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f859 	bl	800a030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f7e:	e03f      	b.n	800a000 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00e      	beq.n	8009faa <HAL_UART_IRQHandler+0x55a>
 8009f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d008      	beq.n	8009faa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fc76 	bl	800a894 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fa8:	e02d      	b.n	800a006 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00e      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d008      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d01c      	beq.n	800a004 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	4798      	blx	r3
    }
    return;
 8009fd2:	e017      	b.n	800a004 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d012      	beq.n	800a006 <HAL_UART_IRQHandler+0x5b6>
 8009fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00c      	beq.n	800a006 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fc27 	bl	800a840 <UART_EndTransmit_IT>
    return;
 8009ff2:	e008      	b.n	800a006 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009ff4:	bf00      	nop
 8009ff6:	e006      	b.n	800a006 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009ff8:	bf00      	nop
 8009ffa:	e004      	b.n	800a006 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009ffc:	bf00      	nop
 8009ffe:	e002      	b.n	800a006 <HAL_UART_IRQHandler+0x5b6>
      return;
 800a000:	bf00      	nop
 800a002:	e000      	b.n	800a006 <HAL_UART_IRQHandler+0x5b6>
    return;
 800a004:	bf00      	nop
  }

}
 800a006:	37e8      	adds	r7, #232	; 0xe8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	bc80      	pop	{r7}
 800a01c:	4770      	bx	lr

0800a01e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bc80      	pop	{r7}
 800a02e:	4770      	bx	lr

0800a030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	bc80      	pop	{r7}
 800a044:	4770      	bx	lr
	...

0800a048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	4b92      	ldr	r3, [pc, #584]	; (800a2bc <UART_SetConfig+0x274>)
 800a074:	4013      	ands	r3, r2
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	6812      	ldr	r2, [r2, #0]
 800a07a:	6979      	ldr	r1, [r7, #20]
 800a07c:	430b      	orrs	r3, r1
 800a07e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a80      	ldr	r2, [pc, #512]	; (800a2c0 <UART_SetConfig+0x278>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d120      	bne.n	800a106 <UART_SetConfig+0xbe>
 800a0c4:	4b7f      	ldr	r3, [pc, #508]	; (800a2c4 <UART_SetConfig+0x27c>)
 800a0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d817      	bhi.n	800a100 <UART_SetConfig+0xb8>
 800a0d0:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <UART_SetConfig+0x90>)
 800a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d6:	bf00      	nop
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a0f5 	.word	0x0800a0f5
 800a0e0:	0800a0fb 	.word	0x0800a0fb
 800a0e4:	0800a0ef 	.word	0x0800a0ef
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	77fb      	strb	r3, [r7, #31]
 800a0ec:	e0b5      	b.n	800a25a <UART_SetConfig+0x212>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	77fb      	strb	r3, [r7, #31]
 800a0f2:	e0b2      	b.n	800a25a <UART_SetConfig+0x212>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	77fb      	strb	r3, [r7, #31]
 800a0f8:	e0af      	b.n	800a25a <UART_SetConfig+0x212>
 800a0fa:	2308      	movs	r3, #8
 800a0fc:	77fb      	strb	r3, [r7, #31]
 800a0fe:	e0ac      	b.n	800a25a <UART_SetConfig+0x212>
 800a100:	2310      	movs	r3, #16
 800a102:	77fb      	strb	r3, [r7, #31]
 800a104:	e0a9      	b.n	800a25a <UART_SetConfig+0x212>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a6f      	ldr	r2, [pc, #444]	; (800a2c8 <UART_SetConfig+0x280>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d124      	bne.n	800a15a <UART_SetConfig+0x112>
 800a110:	4b6c      	ldr	r3, [pc, #432]	; (800a2c4 <UART_SetConfig+0x27c>)
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a11c:	d011      	beq.n	800a142 <UART_SetConfig+0xfa>
 800a11e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a122:	d817      	bhi.n	800a154 <UART_SetConfig+0x10c>
 800a124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a128:	d011      	beq.n	800a14e <UART_SetConfig+0x106>
 800a12a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a12e:	d811      	bhi.n	800a154 <UART_SetConfig+0x10c>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <UART_SetConfig+0xf4>
 800a134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a138:	d006      	beq.n	800a148 <UART_SetConfig+0x100>
 800a13a:	e00b      	b.n	800a154 <UART_SetConfig+0x10c>
 800a13c:	2300      	movs	r3, #0
 800a13e:	77fb      	strb	r3, [r7, #31]
 800a140:	e08b      	b.n	800a25a <UART_SetConfig+0x212>
 800a142:	2302      	movs	r3, #2
 800a144:	77fb      	strb	r3, [r7, #31]
 800a146:	e088      	b.n	800a25a <UART_SetConfig+0x212>
 800a148:	2304      	movs	r3, #4
 800a14a:	77fb      	strb	r3, [r7, #31]
 800a14c:	e085      	b.n	800a25a <UART_SetConfig+0x212>
 800a14e:	2308      	movs	r3, #8
 800a150:	77fb      	strb	r3, [r7, #31]
 800a152:	e082      	b.n	800a25a <UART_SetConfig+0x212>
 800a154:	2310      	movs	r3, #16
 800a156:	77fb      	strb	r3, [r7, #31]
 800a158:	e07f      	b.n	800a25a <UART_SetConfig+0x212>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a5b      	ldr	r2, [pc, #364]	; (800a2cc <UART_SetConfig+0x284>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d124      	bne.n	800a1ae <UART_SetConfig+0x166>
 800a164:	4b57      	ldr	r3, [pc, #348]	; (800a2c4 <UART_SetConfig+0x27c>)
 800a166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a168:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a16c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a170:	d011      	beq.n	800a196 <UART_SetConfig+0x14e>
 800a172:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a176:	d817      	bhi.n	800a1a8 <UART_SetConfig+0x160>
 800a178:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a17c:	d011      	beq.n	800a1a2 <UART_SetConfig+0x15a>
 800a17e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a182:	d811      	bhi.n	800a1a8 <UART_SetConfig+0x160>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <UART_SetConfig+0x148>
 800a188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a18c:	d006      	beq.n	800a19c <UART_SetConfig+0x154>
 800a18e:	e00b      	b.n	800a1a8 <UART_SetConfig+0x160>
 800a190:	2300      	movs	r3, #0
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e061      	b.n	800a25a <UART_SetConfig+0x212>
 800a196:	2302      	movs	r3, #2
 800a198:	77fb      	strb	r3, [r7, #31]
 800a19a:	e05e      	b.n	800a25a <UART_SetConfig+0x212>
 800a19c:	2304      	movs	r3, #4
 800a19e:	77fb      	strb	r3, [r7, #31]
 800a1a0:	e05b      	b.n	800a25a <UART_SetConfig+0x212>
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	77fb      	strb	r3, [r7, #31]
 800a1a6:	e058      	b.n	800a25a <UART_SetConfig+0x212>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	e055      	b.n	800a25a <UART_SetConfig+0x212>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a47      	ldr	r2, [pc, #284]	; (800a2d0 <UART_SetConfig+0x288>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d124      	bne.n	800a202 <UART_SetConfig+0x1ba>
 800a1b8:	4b42      	ldr	r3, [pc, #264]	; (800a2c4 <UART_SetConfig+0x27c>)
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a1c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1c4:	d011      	beq.n	800a1ea <UART_SetConfig+0x1a2>
 800a1c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1ca:	d817      	bhi.n	800a1fc <UART_SetConfig+0x1b4>
 800a1cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1d0:	d011      	beq.n	800a1f6 <UART_SetConfig+0x1ae>
 800a1d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1d6:	d811      	bhi.n	800a1fc <UART_SetConfig+0x1b4>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <UART_SetConfig+0x19c>
 800a1dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1e0:	d006      	beq.n	800a1f0 <UART_SetConfig+0x1a8>
 800a1e2:	e00b      	b.n	800a1fc <UART_SetConfig+0x1b4>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	77fb      	strb	r3, [r7, #31]
 800a1e8:	e037      	b.n	800a25a <UART_SetConfig+0x212>
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	77fb      	strb	r3, [r7, #31]
 800a1ee:	e034      	b.n	800a25a <UART_SetConfig+0x212>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	77fb      	strb	r3, [r7, #31]
 800a1f4:	e031      	b.n	800a25a <UART_SetConfig+0x212>
 800a1f6:	2308      	movs	r3, #8
 800a1f8:	77fb      	strb	r3, [r7, #31]
 800a1fa:	e02e      	b.n	800a25a <UART_SetConfig+0x212>
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	77fb      	strb	r3, [r7, #31]
 800a200:	e02b      	b.n	800a25a <UART_SetConfig+0x212>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a33      	ldr	r2, [pc, #204]	; (800a2d4 <UART_SetConfig+0x28c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d124      	bne.n	800a256 <UART_SetConfig+0x20e>
 800a20c:	4b2d      	ldr	r3, [pc, #180]	; (800a2c4 <UART_SetConfig+0x27c>)
 800a20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a210:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a214:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a218:	d011      	beq.n	800a23e <UART_SetConfig+0x1f6>
 800a21a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a21e:	d817      	bhi.n	800a250 <UART_SetConfig+0x208>
 800a220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a224:	d011      	beq.n	800a24a <UART_SetConfig+0x202>
 800a226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a22a:	d811      	bhi.n	800a250 <UART_SetConfig+0x208>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <UART_SetConfig+0x1f0>
 800a230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a234:	d006      	beq.n	800a244 <UART_SetConfig+0x1fc>
 800a236:	e00b      	b.n	800a250 <UART_SetConfig+0x208>
 800a238:	2300      	movs	r3, #0
 800a23a:	77fb      	strb	r3, [r7, #31]
 800a23c:	e00d      	b.n	800a25a <UART_SetConfig+0x212>
 800a23e:	2302      	movs	r3, #2
 800a240:	77fb      	strb	r3, [r7, #31]
 800a242:	e00a      	b.n	800a25a <UART_SetConfig+0x212>
 800a244:	2304      	movs	r3, #4
 800a246:	77fb      	strb	r3, [r7, #31]
 800a248:	e007      	b.n	800a25a <UART_SetConfig+0x212>
 800a24a:	2308      	movs	r3, #8
 800a24c:	77fb      	strb	r3, [r7, #31]
 800a24e:	e004      	b.n	800a25a <UART_SetConfig+0x212>
 800a250:	2310      	movs	r3, #16
 800a252:	77fb      	strb	r3, [r7, #31]
 800a254:	e001      	b.n	800a25a <UART_SetConfig+0x212>
 800a256:	2310      	movs	r3, #16
 800a258:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a262:	d16c      	bne.n	800a33e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800a264:	7ffb      	ldrb	r3, [r7, #31]
 800a266:	2b08      	cmp	r3, #8
 800a268:	d838      	bhi.n	800a2dc <UART_SetConfig+0x294>
 800a26a:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <UART_SetConfig+0x228>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a295 	.word	0x0800a295
 800a274:	0800a29d 	.word	0x0800a29d
 800a278:	0800a2a5 	.word	0x0800a2a5
 800a27c:	0800a2dd 	.word	0x0800a2dd
 800a280:	0800a2ab 	.word	0x0800a2ab
 800a284:	0800a2dd 	.word	0x0800a2dd
 800a288:	0800a2dd 	.word	0x0800a2dd
 800a28c:	0800a2dd 	.word	0x0800a2dd
 800a290:	0800a2b3 	.word	0x0800a2b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a294:	f7fe fdae 	bl	8008df4 <HAL_RCC_GetPCLK1Freq>
 800a298:	61b8      	str	r0, [r7, #24]
        break;
 800a29a:	e024      	b.n	800a2e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a29c:	f7fe fdcc 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 800a2a0:	61b8      	str	r0, [r7, #24]
        break;
 800a2a2:	e020      	b.n	800a2e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2a4:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <UART_SetConfig+0x290>)
 800a2a6:	61bb      	str	r3, [r7, #24]
        break;
 800a2a8:	e01d      	b.n	800a2e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2aa:	f7fe fd2f 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 800a2ae:	61b8      	str	r0, [r7, #24]
        break;
 800a2b0:	e019      	b.n	800a2e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2b6:	61bb      	str	r3, [r7, #24]
        break;
 800a2b8:	e015      	b.n	800a2e6 <UART_SetConfig+0x29e>
 800a2ba:	bf00      	nop
 800a2bc:	efff69f3 	.word	0xefff69f3
 800a2c0:	40013800 	.word	0x40013800
 800a2c4:	40021000 	.word	0x40021000
 800a2c8:	40004400 	.word	0x40004400
 800a2cc:	40004800 	.word	0x40004800
 800a2d0:	40004c00 	.word	0x40004c00
 800a2d4:	40005000 	.word	0x40005000
 800a2d8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	77bb      	strb	r3, [r7, #30]
        break;
 800a2e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d075      	beq.n	800a3d8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	005a      	lsls	r2, r3, #1
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	085b      	lsrs	r3, r3, #1
 800a2f6:	441a      	add	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a300:	b29b      	uxth	r3, r3
 800a302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b0f      	cmp	r3, #15
 800a308:	d916      	bls.n	800a338 <UART_SetConfig+0x2f0>
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a310:	d212      	bcs.n	800a338 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	b29b      	uxth	r3, r3
 800a316:	f023 030f 	bic.w	r3, r3, #15
 800a31a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	b29b      	uxth	r3, r3
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	b29a      	uxth	r2, r3
 800a328:	89fb      	ldrh	r3, [r7, #14]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	89fa      	ldrh	r2, [r7, #14]
 800a334:	60da      	str	r2, [r3, #12]
 800a336:	e04f      	b.n	800a3d8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	77bb      	strb	r3, [r7, #30]
 800a33c:	e04c      	b.n	800a3d8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a33e:	7ffb      	ldrb	r3, [r7, #31]
 800a340:	2b08      	cmp	r3, #8
 800a342:	d828      	bhi.n	800a396 <UART_SetConfig+0x34e>
 800a344:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <UART_SetConfig+0x304>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a371 	.word	0x0800a371
 800a350:	0800a379 	.word	0x0800a379
 800a354:	0800a381 	.word	0x0800a381
 800a358:	0800a397 	.word	0x0800a397
 800a35c:	0800a387 	.word	0x0800a387
 800a360:	0800a397 	.word	0x0800a397
 800a364:	0800a397 	.word	0x0800a397
 800a368:	0800a397 	.word	0x0800a397
 800a36c:	0800a38f 	.word	0x0800a38f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a370:	f7fe fd40 	bl	8008df4 <HAL_RCC_GetPCLK1Freq>
 800a374:	61b8      	str	r0, [r7, #24]
        break;
 800a376:	e013      	b.n	800a3a0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a378:	f7fe fd5e 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 800a37c:	61b8      	str	r0, [r7, #24]
        break;
 800a37e:	e00f      	b.n	800a3a0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a380:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <UART_SetConfig+0x3a8>)
 800a382:	61bb      	str	r3, [r7, #24]
        break;
 800a384:	e00c      	b.n	800a3a0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a386:	f7fe fcc1 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 800a38a:	61b8      	str	r0, [r7, #24]
        break;
 800a38c:	e008      	b.n	800a3a0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a38e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a392:	61bb      	str	r3, [r7, #24]
        break;
 800a394:	e004      	b.n	800a3a0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	77bb      	strb	r3, [r7, #30]
        break;
 800a39e:	bf00      	nop
    }

    if (pclk != 0U)
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d018      	beq.n	800a3d8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	085a      	lsrs	r2, r3, #1
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	441a      	add	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b0f      	cmp	r3, #15
 800a3c0:	d908      	bls.n	800a3d4 <UART_SetConfig+0x38c>
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3c8:	d204      	bcs.n	800a3d4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	60da      	str	r2, [r3, #12]
 800a3d2:	e001      	b.n	800a3d8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a3e4:	7fbb      	ldrb	r3, [r7, #30]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	007a1200 	.word	0x007a1200

0800a3f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00a      	beq.n	800a41e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00a      	beq.n	800a440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a466:	f003 0308 	and.w	r3, r3, #8
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00a      	beq.n	800a484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00a      	beq.n	800a4a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00a      	beq.n	800a4c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01a      	beq.n	800a50a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4f2:	d10a      	bne.n	800a50a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	605a      	str	r2, [r3, #4]
  }
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	bc80      	pop	{r7}
 800a534:	4770      	bx	lr

0800a536 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af02      	add	r7, sp, #8
 800a53c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a546:	f7fc fe41 	bl	80071cc <HAL_GetTick>
 800a54a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b08      	cmp	r3, #8
 800a558:	d10e      	bne.n	800a578 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a55a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f82d 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e023      	b.n	800a5c0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b04      	cmp	r3, #4
 800a584:	d10e      	bne.n	800a5a4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a586:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f817 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e00d      	b.n	800a5c0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b09c      	sub	sp, #112	; 0x70
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5d8:	e0a5      	b.n	800a726 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	f000 80a1 	beq.w	800a726 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e4:	f7fc fdf2 	bl	80071cc <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d302      	bcc.n	800a5fa <UART_WaitOnFlagUntilTimeout+0x32>
 800a5f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d13e      	bne.n	800a678 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a602:	e853 3f00 	ldrex	r3, [r3]
 800a606:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a60a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a60e:	667b      	str	r3, [r7, #100]	; 0x64
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a61a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a61e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a620:	e841 2300 	strex	r3, r2, [r1]
 800a624:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e6      	bne.n	800a5fa <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3308      	adds	r3, #8
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a636:	e853 3f00 	ldrex	r3, [r3]
 800a63a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	f023 0301 	bic.w	r3, r3, #1
 800a642:	663b      	str	r3, [r7, #96]	; 0x60
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3308      	adds	r3, #8
 800a64a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a64c:	64ba      	str	r2, [r7, #72]	; 0x48
 800a64e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a650:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a654:	e841 2300 	strex	r3, r2, [r1]
 800a658:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e5      	bne.n	800a62c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2220      	movs	r2, #32
 800a664:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2220      	movs	r2, #32
 800a66a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e067      	b.n	800a748 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d04f      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a694:	d147      	bne.n	800a726 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a69e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	e853 3f00 	ldrex	r3, [r3]
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6be:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6c6:	e841 2300 	strex	r3, r2, [r1]
 800a6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1e6      	bne.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f023 0301 	bic.w	r3, r3, #1
 800a6e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6f2:	623a      	str	r2, [r7, #32]
 800a6f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	69f9      	ldr	r1, [r7, #28]
 800a6f8:	6a3a      	ldr	r2, [r7, #32]
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e5      	bne.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2220      	movs	r2, #32
 800a70a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e010      	b.n	800a748 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4013      	ands	r3, r2
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	429a      	cmp	r2, r3
 800a734:	bf0c      	ite	eq
 800a736:	2301      	moveq	r3, #1
 800a738:	2300      	movne	r3, #0
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	461a      	mov	r2, r3
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	429a      	cmp	r2, r3
 800a742:	f43f af4a 	beq.w	800a5da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3770      	adds	r7, #112	; 0x70
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a750:	b480      	push	{r7}
 800a752:	b095      	sub	sp, #84	; 0x54
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a76c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a776:	643b      	str	r3, [r7, #64]	; 0x40
 800a778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a77c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e6      	bne.n	800a758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	61fb      	str	r3, [r7, #28]
   return(result);
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	f023 0301 	bic.w	r3, r3, #1
 800a7a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7b2:	e841 2300 	strex	r3, r2, [r1]
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1e5      	bne.n	800a78a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d118      	bne.n	800a7f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	e853 3f00 	ldrex	r3, [r3]
 800a7d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f023 0310 	bic.w	r3, r3, #16
 800a7da:	647b      	str	r3, [r7, #68]	; 0x44
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e4:	61bb      	str	r3, [r7, #24]
 800a7e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e8:	6979      	ldr	r1, [r7, #20]
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	e841 2300 	strex	r3, r2, [r1]
 800a7f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1e6      	bne.n	800a7c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a80a:	bf00      	nop
 800a80c:	3754      	adds	r7, #84	; 0x54
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc80      	pop	{r7}
 800a812:	4770      	bx	lr

0800a814 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7ff fbf3 	bl	800a01e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	60bb      	str	r3, [r7, #8]
   return(result);
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a85c:	61fb      	str	r3, [r7, #28]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	61bb      	str	r3, [r7, #24]
 800a868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86a:	6979      	ldr	r1, [r7, #20]
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	e841 2300 	strex	r3, r2, [r1]
 800a872:	613b      	str	r3, [r7, #16]
   return(result);
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1e6      	bne.n	800a848 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2220      	movs	r2, #32
 800a87e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff fbc0 	bl	800a00c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a88c:	bf00      	nop
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bc80      	pop	{r7}
 800a8a4:	4770      	bx	lr
	...

0800a8a8 <Ea_Init>:
/**
  * @brief	Ea module initialization function
  * @return	None
  */
void Ea_Init(void)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Ea_InitDone_b = TRUE;
 800a8ac:	4b03      	ldr	r3, [pc, #12]	; (800a8bc <Ea_Init+0x14>)
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	701a      	strb	r2, [r3, #0]
}
 800a8b2:	bf00      	nop
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bc80      	pop	{r7}
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	200001c0 	.word	0x200001c0

0800a8c0 <Ea_Read>:
  * @param	BlockId		ID of the block to be read
  * @param  data		Pointer to the buffer where read data is stored
  * @return	None
  */
void Ea_Read(uint16 Block_Id, uint8 *data)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af02      	add	r7, sp, #8
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800a8cc:	88fb      	ldrh	r3, [r7, #6]
 800a8ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d2:	d20b      	bcs.n	800a8ec <Ea_Read+0x2c>
	{
		HAL_I2C_Mem_Read_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800a8d4:	88fb      	ldrh	r3, [r7, #6]
 800a8d6:	015b      	lsls	r3, r3, #5
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	2320      	movs	r3, #32
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	21a0      	movs	r1, #160	; 0xa0
 800a8e6:	4803      	ldr	r0, [pc, #12]	; (800a8f4 <Ea_Read+0x34>)
 800a8e8:	f7fa ff80 	bl	80057ec <HAL_I2C_Mem_Read_DMA>
	}
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	200002ec 	.word	0x200002ec

0800a8f8 <Ea_Write>:
  * @param	BlockId		ID of the block to be written
  * @param  data		Pointer to the data to be written
  * @return	None
  */
void Ea_Write(uint16 Block_Id, uint8 *data)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	4603      	mov	r3, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a90a:	d20b      	bcs.n	800a924 <Ea_Write+0x2c>
	{
		HAL_I2C_Mem_Write_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800a90c:	88fb      	ldrh	r3, [r7, #6]
 800a90e:	015b      	lsls	r3, r3, #5
 800a910:	b29a      	uxth	r2, r3
 800a912:	2320      	movs	r3, #32
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	2302      	movs	r3, #2
 800a91c:	21a0      	movs	r1, #160	; 0xa0
 800a91e:	4803      	ldr	r0, [pc, #12]	; (800a92c <Ea_Write+0x34>)
 800a920:	f7fa fe6e 	bl	8005600 <HAL_I2C_Mem_Write_DMA>
	}
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	200002ec 	.word	0x200002ec

0800a930 <NvM_Init>:
/**
  * @brief	NvM module initialization function
  * @return	None
  */
void NvM_Init(void)
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
	g_NvM_State_e = NVM_STATE_INIT;
 800a934:	4b04      	ldr	r3, [pc, #16]	; (800a948 <NvM_Init+0x18>)
 800a936:	2200      	movs	r2, #0
 800a938:	701a      	strb	r2, [r3, #0]
	/* Set initialization flag to done */
	g_NvM_InitDone_b = TRUE;
 800a93a:	4b04      	ldr	r3, [pc, #16]	; (800a94c <NvM_Init+0x1c>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	701a      	strb	r2, [r3, #0]
}
 800a940:	bf00      	nop
 800a942:	46bd      	mov	sp, r7
 800a944:	bc80      	pop	{r7}
 800a946:	4770      	bx	lr
 800a948:	200001c2 	.word	0x200001c2
 800a94c:	200001c1 	.word	0x200001c1

0800a950 <NvM_MainFunction>:
/**
  * @brief	NvM module main function (runs in task)
  * @return	None
  */
void NvM_MainFunction(void)
{
 800a950:	b480      	push	{r7}
 800a952:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_NvM_InitDone_b)
 800a954:	4b0e      	ldr	r3, [pc, #56]	; (800a990 <NvM_MainFunction+0x40>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d015      	beq.n	800a988 <NvM_MainFunction+0x38>
	{
		switch(g_NvM_State_e)
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <NvM_MainFunction+0x44>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b04      	cmp	r3, #4
 800a962:	dc0e      	bgt.n	800a982 <NvM_MainFunction+0x32>
 800a964:	2b02      	cmp	r3, #2
 800a966:	da08      	bge.n	800a97a <NvM_MainFunction+0x2a>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <NvM_MainFunction+0x22>
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d00a      	beq.n	800a986 <NvM_MainFunction+0x36>
			case NVM_STATE_SHUTDOWN:
			case NVM_STATE_ERROR:
			default:
			{

			}break;
 800a970:	e007      	b.n	800a982 <NvM_MainFunction+0x32>
				g_NvM_State_e = NVM_STATE_READALL;
 800a972:	4b08      	ldr	r3, [pc, #32]	; (800a994 <NvM_MainFunction+0x44>)
 800a974:	2204      	movs	r2, #4
 800a976:	701a      	strb	r2, [r3, #0]
			}break;
 800a978:	e006      	b.n	800a988 <NvM_MainFunction+0x38>
				g_NvM_State_e = NVM_STATE_READY;
 800a97a:	4b06      	ldr	r3, [pc, #24]	; (800a994 <NvM_MainFunction+0x44>)
 800a97c:	2201      	movs	r2, #1
 800a97e:	701a      	strb	r2, [r3, #0]
			}break;
 800a980:	e002      	b.n	800a988 <NvM_MainFunction+0x38>
			}break;
 800a982:	bf00      	nop
 800a984:	e000      	b.n	800a988 <NvM_MainFunction+0x38>
			}break;
 800a986:	bf00      	nop
		}
	}
}
 800a988:	bf00      	nop
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bc80      	pop	{r7}
 800a98e:	4770      	bx	lr
 800a990:	200001c1 	.word	0x200001c1
 800a994:	200001c2 	.word	0x200001c2

0800a998 <NvM_WriteBlock>:
  * @param	BlockId		ID of the block to be written
  * @param  NvM_SrcPtr	Pointer to the data to be written
  * @return	None
  */
void NvM_WriteBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	6039      	str	r1, [r7, #0]
 800a9a2:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block write function */
	Ea_Write(BlockId, NvM_SrcPtr);
 800a9a4:	88fb      	ldrh	r3, [r7, #6]
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff ffa5 	bl	800a8f8 <Ea_Write>
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <NvM_ReadBlock>:
  * @param	BlockId		ID of the block to be read
  * @param  NvM_SrcPtr	Pointer to the data to be read
  * @return	None
  */
void NvM_ReadBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	4603      	mov	r3, r0
 800a9be:	6039      	str	r1, [r7, #0]
 800a9c0:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block read function */
	Ea_Read(BlockId, NvM_SrcPtr);
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff ff7a 	bl	800a8c0 <Ea_Read>
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 800a9d8:	f000 f8b8 	bl	800ab4c <SystemClock_Config>
	MX_DMA_Init();
 800a9dc:	f000 f91c 	bl	800ac18 <MX_DMA_Init>
	MX_GPIO_Init();
 800a9e0:	f000 fb1c 	bl	800b01c <MX_GPIO_Init>
	MX_ADC1_Init();
 800a9e4:	f000 f95a 	bl	800ac9c <MX_ADC1_Init>
	MX_ADC2_Init();
 800a9e8:	f000 f9c8 	bl	800ad7c <MX_ADC2_Init>
	MX_I2C1_Init();
 800a9ec:	f000 fa38 	bl	800ae60 <MX_I2C1_Init>
	MX_SPI3_Init();
 800a9f0:	f000 fa76 	bl	800aee0 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 800a9f4:	f000 fab2 	bl	800af5c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a9f8:	f000 fae0 	bl	800afbc <MX_USART2_UART_Init>
	Gpt_Init();
 800a9fc:	f7f8 ff32 	bl	8003864 <Gpt_Init>

	/* Init Cdd drivers */
	Cdd_Servo_Driver_Init();
 800aa00:	f7f6 fe70 	bl	80016e4 <Cdd_Servo_Driver_Init>
	Cdd_Ultrasonic_Driver_Init();
 800aa04:	f7f7 f9aa 	bl	8001d5c <Cdd_Ultrasonic_Driver_Init>
	/* Init system services */
	Tm_Init();
 800aa08:	f000 fe02 	bl	800b610 <Tm_Init>

}
 800aa0c:	bf00      	nop
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc1_val, adc1_len);
 800aa14:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <BswM_MainFunction+0x24>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	4907      	ldr	r1, [pc, #28]	; (800aa38 <BswM_MainFunction+0x28>)
 800aa1c:	4807      	ldr	r0, [pc, #28]	; (800aa3c <BswM_MainFunction+0x2c>)
 800aa1e:	f7f7 fcf9 	bl	8002414 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32 *)adc2_val, adc2_len);
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <BswM_MainFunction+0x30>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	4906      	ldr	r1, [pc, #24]	; (800aa44 <BswM_MainFunction+0x34>)
 800aa2a:	4807      	ldr	r0, [pc, #28]	; (800aa48 <BswM_MainFunction+0x38>)
 800aa2c:	f7f7 fcf2 	bl	8002414 <HAL_ADC_Start_DMA>

}
 800aa30:	bf00      	nop
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	2000000c 	.word	0x2000000c
 800aa38:	20000584 	.word	0x20000584
 800aa3c:	200001c4 	.word	0x200001c4
 800aa40:	20000010 	.word	0x20000010
 800aa44:	20000588 	.word	0x20000588
 800aa48:	20000258 	.word	0x20000258

0800aa4c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	if(hadc == &hadc1)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a1e      	ldr	r2, [pc, #120]	; (800aad0 <HAL_ADC_ConvCpltCallback+0x84>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d118      	bne.n	800aa8e <HAL_ADC_ConvCpltCallback+0x42>
	{
		ADC_AN0_Voltage = (uint16)((adc1_val[0]*3300u)/4095u);
 800aa5c:	4b1d      	ldr	r3, [pc, #116]	; (800aad4 <HAL_ADC_ConvCpltCallback+0x88>)
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	461a      	mov	r2, r3
 800aa64:	f640 43e4 	movw	r3, #3300	; 0xce4
 800aa68:	fb03 f202 	mul.w	r2, r3, r2
 800aa6c:	4b1a      	ldr	r3, [pc, #104]	; (800aad8 <HAL_ADC_ConvCpltCallback+0x8c>)
 800aa6e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa72:	1ad2      	subs	r2, r2, r3
 800aa74:	0852      	lsrs	r2, r2, #1
 800aa76:	4413      	add	r3, r2
 800aa78:	0adb      	lsrs	r3, r3, #11
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	4b17      	ldr	r3, [pc, #92]	; (800aadc <HAL_ADC_ConvCpltCallback+0x90>)
 800aa7e:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 800aa80:	4b16      	ldr	r3, [pc, #88]	; (800aadc <HAL_ADC_ConvCpltCallback+0x90>)
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 ff9c 	bl	800b9c4 <Rte_Write_AN0_Voltage_u16>
	}
	else
	{

	}
}
 800aa8c:	e01b      	b.n	800aac6 <HAL_ADC_ConvCpltCallback+0x7a>
	else if(hadc == &hadc2)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a13      	ldr	r2, [pc, #76]	; (800aae0 <HAL_ADC_ConvCpltCallback+0x94>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d117      	bne.n	800aac6 <HAL_ADC_ConvCpltCallback+0x7a>
		ADC_AN2_Voltage = (uint16)((adc2_val[0]*3300u)/4095u);
 800aa96:	4b13      	ldr	r3, [pc, #76]	; (800aae4 <HAL_ADC_ConvCpltCallback+0x98>)
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f640 43e4 	movw	r3, #3300	; 0xce4
 800aaa2:	fb03 f202 	mul.w	r2, r3, r2
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <HAL_ADC_ConvCpltCallback+0x8c>)
 800aaa8:	fba3 1302 	umull	r1, r3, r3, r2
 800aaac:	1ad2      	subs	r2, r2, r3
 800aaae:	0852      	lsrs	r2, r2, #1
 800aab0:	4413      	add	r3, r2
 800aab2:	0adb      	lsrs	r3, r3, #11
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <HAL_ADC_ConvCpltCallback+0x9c>)
 800aab8:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN2_Voltage_u16(ADC_AN2_Voltage);
 800aaba:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <HAL_ADC_ConvCpltCallback+0x9c>)
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 ffa3 	bl	800ba0c <Rte_Write_AN2_Voltage_u16>
}
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	200001c4 	.word	0x200001c4
 800aad4:	20000584 	.word	0x20000584
 800aad8:	00100101 	.word	0x00100101
 800aadc:	20000586 	.word	0x20000586
 800aae0:	20000258 	.word	0x20000258
 800aae4:	20000588 	.word	0x20000588
 800aae8:	2000058a 	.word	0x2000058a

0800aaec <HAL_I2C_MemTxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	I2cTxCnt++;
 800aaf4:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	4a03      	ldr	r2, [pc, #12]	; (800ab08 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800aafc:	6013      	str	r3, [r2, #0]
}
 800aafe:	bf00      	nop
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bc80      	pop	{r7}
 800ab06:	4770      	bx	lr
 800ab08:	20000590 	.word	0x20000590

0800ab0c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	I2cRxCnt++;
 800ab14:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	4a03      	ldr	r2, [pc, #12]	; (800ab28 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800ab1c:	6013      	str	r3, [r2, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bc80      	pop	{r7}
 800ab26:	4770      	bx	lr
 800ab28:	2000058c 	.word	0x2000058c

0800ab2c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7fa ffae 	bl	8005a96 <HAL_I2C_GetError>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d001      	beq.n	800ab44 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 800ab40:	f000 faf6 	bl	800b130 <Error_Handler>
  }
}
 800ab44:	bf00      	nop
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b0a6      	sub	sp, #152	; 0x98
 800ab50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ab56:	2228      	movs	r2, #40	; 0x28
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f001 f836 	bl	800bbcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ab60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	605a      	str	r2, [r3, #4]
 800ab6a:	609a      	str	r2, [r3, #8]
 800ab6c:	60da      	str	r2, [r3, #12]
 800ab6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ab70:	1d3b      	adds	r3, r7, #4
 800ab72:	2258      	movs	r2, #88	; 0x58
 800ab74:	2100      	movs	r1, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 f828 	bl	800bbcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ab80:	2301      	movs	r3, #1
 800ab82:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ab84:	2310      	movs	r3, #16
 800ab86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ab90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800ab98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800ab9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800aba0:	2300      	movs	r3, #0
 800aba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aba6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fc fede 	bl	800796c <HAL_RCC_OscConfig>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800abb6:	f000 fabb 	bl	800b130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800abba:	230f      	movs	r3, #15
 800abbc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800abbe:	2302      	movs	r3, #2
 800abc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800abc2:	2300      	movs	r3, #0
 800abc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800abc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800abcc:	2300      	movs	r3, #0
 800abce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800abd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800abd4:	2102      	movs	r1, #2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fd ff1c 	bl	8008a14 <HAL_RCC_ClockConfig>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800abe2:	f000 faa5 	bl	800b130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800abe6:	23a3      	movs	r3, #163	; 0xa3
 800abe8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800abee:	2300      	movs	r3, #0
 800abf0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800abf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800abf8:	2310      	movs	r3, #16
 800abfa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800abfc:	1d3b      	adds	r3, r7, #4
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fe f93c 	bl	8008e7c <HAL_RCCEx_PeriphCLKConfig>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ac0a:	f000 fa91 	bl	800b130 <Error_Handler>
  }
}
 800ac0e:	bf00      	nop
 800ac10:	3798      	adds	r7, #152	; 0x98
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800ac1e:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <MX_DMA_Init+0x80>)
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	4a1d      	ldr	r2, [pc, #116]	; (800ac98 <MX_DMA_Init+0x80>)
 800ac24:	f043 0301 	orr.w	r3, r3, #1
 800ac28:	6153      	str	r3, [r2, #20]
 800ac2a:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <MX_DMA_Init+0x80>)
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	607b      	str	r3, [r7, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800ac36:	4b18      	ldr	r3, [pc, #96]	; (800ac98 <MX_DMA_Init+0x80>)
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	4a17      	ldr	r2, [pc, #92]	; (800ac98 <MX_DMA_Init+0x80>)
 800ac3c:	f043 0302 	orr.w	r3, r3, #2
 800ac40:	6153      	str	r3, [r2, #20]
 800ac42:	4b15      	ldr	r3, [pc, #84]	; (800ac98 <MX_DMA_Init+0x80>)
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	f003 0302 	and.w	r3, r3, #2
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	683b      	ldr	r3, [r7, #0]
	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2100      	movs	r1, #0
 800ac52:	200b      	movs	r0, #11
 800ac54:	f7fc fb9b 	bl	800738e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800ac58:	200b      	movs	r0, #11
 800ac5a:	f7fc fbb4 	bl	80073c6 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2100      	movs	r1, #0
 800ac62:	2010      	movs	r0, #16
 800ac64:	f7fc fb93 	bl	800738e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800ac68:	2010      	movs	r0, #16
 800ac6a:	f7fc fbac 	bl	80073c6 <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800ac6e:	2200      	movs	r2, #0
 800ac70:	2100      	movs	r1, #0
 800ac72:	2011      	movs	r0, #17
 800ac74:	f7fc fb8b 	bl	800738e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800ac78:	2011      	movs	r0, #17
 800ac7a:	f7fc fba4 	bl	80073c6 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2100      	movs	r1, #0
 800ac82:	2038      	movs	r0, #56	; 0x38
 800ac84:	f7fc fb83 	bl	800738e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800ac88:	2038      	movs	r0, #56	; 0x38
 800ac8a:	f7fc fb9c 	bl	80073c6 <HAL_NVIC_EnableIRQ>
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	40021000 	.word	0x40021000

0800ac9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	; 0x28
 800aca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800aca2:	f107 031c 	add.w	r3, r7, #28
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	605a      	str	r2, [r3, #4]
 800acac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800acae:	1d3b      	adds	r3, r7, #4
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	605a      	str	r2, [r3, #4]
 800acb6:	609a      	str	r2, [r3, #8]
 800acb8:	60da      	str	r2, [r3, #12]
 800acba:	611a      	str	r2, [r3, #16]
 800acbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800acbe:	4b2e      	ldr	r3, [pc, #184]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800acc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800acc6:	4b2c      	ldr	r3, [pc, #176]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800accc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800acce:	4b2a      	ldr	r3, [pc, #168]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800acd4:	4b28      	ldr	r3, [pc, #160]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800acda:	4b27      	ldr	r3, [pc, #156]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acdc:	2200      	movs	r2, #0
 800acde:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ace0:	4b25      	ldr	r3, [pc, #148]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ace8:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acea:	2200      	movs	r2, #0
 800acec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800acee:	4b22      	ldr	r3, [pc, #136]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800acf4:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800acfa:	4b1f      	ldr	r3, [pc, #124]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800acfc:	2201      	movs	r2, #1
 800acfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ad00:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ad08:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ad0a:	2204      	movs	r2, #4
 800ad0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800ad0e:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800ad14:	4b18      	ldr	r3, [pc, #96]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ad16:	2200      	movs	r2, #0
 800ad18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ad1a:	4817      	ldr	r0, [pc, #92]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ad1c:	f7f7 f980 	bl	8002020 <HAL_ADC_Init>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800ad26:	f000 fa03 	bl	800b130 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800ad2e:	f107 031c 	add.w	r3, r7, #28
 800ad32:	4619      	mov	r1, r3
 800ad34:	4810      	ldr	r0, [pc, #64]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ad36:	f7f7 ff73 	bl	8002c20 <HAL_ADCEx_MultiModeConfigChannel>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800ad40:	f000 f9f6 	bl	800b130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800ad44:	2301      	movs	r3, #1
 800ad46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ad54:	2300      	movs	r3, #0
 800ad56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ad5c:	1d3b      	adds	r3, r7, #4
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4805      	ldr	r0, [pc, #20]	; (800ad78 <MX_ADC1_Init+0xdc>)
 800ad62:	f7f7 fc73 	bl	800264c <HAL_ADC_ConfigChannel>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800ad6c:	f000 f9e0 	bl	800b130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ad70:	bf00      	nop
 800ad72:	3728      	adds	r7, #40	; 0x28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	200001c4 	.word	0x200001c4

0800ad7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08a      	sub	sp, #40	; 0x28
 800ad80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800ad82:	f107 031c 	add.w	r3, r7, #28
 800ad86:	2200      	movs	r2, #0
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	605a      	str	r2, [r3, #4]
 800ad8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800ad8e:	1d3b      	adds	r3, r7, #4
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	605a      	str	r2, [r3, #4]
 800ad96:	609a      	str	r2, [r3, #8]
 800ad98:	60da      	str	r2, [r3, #12]
 800ad9a:	611a      	str	r2, [r3, #16]
 800ad9c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800ad9e:	4b2e      	ldr	r3, [pc, #184]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800ada0:	4a2e      	ldr	r2, [pc, #184]	; (800ae5c <MX_ADC2_Init+0xe0>)
 800ada2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ada4:	4b2c      	ldr	r3, [pc, #176]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800ada6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800adaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800adac:	4b2a      	ldr	r3, [pc, #168]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adae:	2200      	movs	r2, #0
 800adb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800adb2:	4b29      	ldr	r3, [pc, #164]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800adb8:	4b27      	ldr	r3, [pc, #156]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adba:	2200      	movs	r2, #0
 800adbc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800adbe:	4b26      	ldr	r3, [pc, #152]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800adc6:	4b24      	ldr	r3, [pc, #144]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adc8:	2200      	movs	r2, #0
 800adca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800adcc:	4b22      	ldr	r3, [pc, #136]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adce:	2201      	movs	r2, #1
 800add0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800add2:	4b21      	ldr	r3, [pc, #132]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800add4:	2200      	movs	r2, #0
 800add6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800add8:	4b1f      	ldr	r3, [pc, #124]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adda:	2201      	movs	r2, #1
 800addc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800adde:	4b1e      	ldr	r3, [pc, #120]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ade6:	4b1c      	ldr	r3, [pc, #112]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800ade8:	2204      	movs	r2, #4
 800adea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800adec:	4b1a      	ldr	r3, [pc, #104]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adee:	2200      	movs	r2, #0
 800adf0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800adf2:	4b19      	ldr	r3, [pc, #100]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800adf8:	4817      	ldr	r0, [pc, #92]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800adfa:	f7f7 f911 	bl	8002020 <HAL_ADC_Init>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 800ae04:	f000 f994 	bl	800b130 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc2, &multimode) != HAL_OK)
 800ae0c:	f107 031c 	add.w	r3, r7, #28
 800ae10:	4619      	mov	r1, r3
 800ae12:	4811      	ldr	r0, [pc, #68]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800ae14:	f7f7 ff04 	bl	8002c20 <HAL_ADCEx_MultiModeConfigChannel>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800ae1e:	f000 f987 	bl	800b130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800ae22:	2301      	movs	r3, #1
 800ae24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ae26:	2301      	movs	r3, #1
 800ae28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ae3a:	1d3b      	adds	r3, r7, #4
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4806      	ldr	r0, [pc, #24]	; (800ae58 <MX_ADC2_Init+0xdc>)
 800ae40:	f7f7 fc04 	bl	800264c <HAL_ADC_ConfigChannel>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800ae4a:	f000 f971 	bl	800b130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800ae4e:	bf00      	nop
 800ae50:	3728      	adds	r7, #40	; 0x28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000258 	.word	0x20000258
 800ae5c:	50000100 	.word	0x50000100

0800ae60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 800ae64:	4b1b      	ldr	r3, [pc, #108]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae66:	4a1c      	ldr	r2, [pc, #112]	; (800aed8 <MX_I2C1_Init+0x78>)
 800ae68:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00702681;
 800ae6a:	4b1a      	ldr	r3, [pc, #104]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae6c:	4a1b      	ldr	r2, [pc, #108]	; (800aedc <MX_I2C1_Init+0x7c>)
 800ae6e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 800ae70:	4b18      	ldr	r3, [pc, #96]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae76:	4b17      	ldr	r3, [pc, #92]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae78:	2201      	movs	r2, #1
 800ae7a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae7c:	4b15      	ldr	r3, [pc, #84]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800ae82:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ae88:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ae8e:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ae94:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ae9a:	480e      	ldr	r0, [pc, #56]	; (800aed4 <MX_I2C1_Init+0x74>)
 800ae9c:	f7fa fae4 	bl	8005468 <HAL_I2C_Init>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <MX_I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800aea6:	f000 f943 	bl	800b130 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4809      	ldr	r0, [pc, #36]	; (800aed4 <MX_I2C1_Init+0x74>)
 800aeae:	f7fc f876 	bl	8006f9e <HAL_I2CEx_ConfigAnalogFilter>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <MX_I2C1_Init+0x5c>
	  {
	    Error_Handler();
 800aeb8:	f000 f93a 	bl	800b130 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800aebc:	2100      	movs	r1, #0
 800aebe:	4805      	ldr	r0, [pc, #20]	; (800aed4 <MX_I2C1_Init+0x74>)
 800aec0:	f7fc f8b7 	bl	8007032 <HAL_I2CEx_ConfigDigitalFilter>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <MX_I2C1_Init+0x6e>
	  {
	    Error_Handler();
 800aeca:	f000 f931 	bl	800b130 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 800aece:	bf00      	nop
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	200002ec 	.word	0x200002ec
 800aed8:	40005400 	.word	0x40005400
 800aedc:	00702681 	.word	0x00702681

0800aee0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800aee4:	4b1b      	ldr	r3, [pc, #108]	; (800af54 <MX_SPI3_Init+0x74>)
 800aee6:	4a1c      	ldr	r2, [pc, #112]	; (800af58 <MX_SPI3_Init+0x78>)
 800aee8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800aeea:	4b1a      	ldr	r3, [pc, #104]	; (800af54 <MX_SPI3_Init+0x74>)
 800aeec:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aef0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800aef2:	4b18      	ldr	r3, [pc, #96]	; (800af54 <MX_SPI3_Init+0x74>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800aef8:	4b16      	ldr	r3, [pc, #88]	; (800af54 <MX_SPI3_Init+0x74>)
 800aefa:	f44f 7240 	mov.w	r2, #768	; 0x300
 800aefe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800af00:	4b14      	ldr	r3, [pc, #80]	; (800af54 <MX_SPI3_Init+0x74>)
 800af02:	2200      	movs	r2, #0
 800af04:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800af06:	4b13      	ldr	r3, [pc, #76]	; (800af54 <MX_SPI3_Init+0x74>)
 800af08:	2200      	movs	r2, #0
 800af0a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800af0c:	4b11      	ldr	r3, [pc, #68]	; (800af54 <MX_SPI3_Init+0x74>)
 800af0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af12:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800af14:	4b0f      	ldr	r3, [pc, #60]	; (800af54 <MX_SPI3_Init+0x74>)
 800af16:	2200      	movs	r2, #0
 800af18:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800af1a:	4b0e      	ldr	r3, [pc, #56]	; (800af54 <MX_SPI3_Init+0x74>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800af20:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <MX_SPI3_Init+0x74>)
 800af22:	2200      	movs	r2, #0
 800af24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af26:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <MX_SPI3_Init+0x74>)
 800af28:	2200      	movs	r2, #0
 800af2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <MX_SPI3_Init+0x74>)
 800af2e:	2207      	movs	r2, #7
 800af30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800af32:	4b08      	ldr	r3, [pc, #32]	; (800af54 <MX_SPI3_Init+0x74>)
 800af34:	2200      	movs	r2, #0
 800af36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <MX_SPI3_Init+0x74>)
 800af3a:	2208      	movs	r2, #8
 800af3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800af3e:	4805      	ldr	r0, [pc, #20]	; (800af54 <MX_SPI3_Init+0x74>)
 800af40:	f7fe fa6e 	bl	8009420 <HAL_SPI_Init>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800af4a:	f000 f8f1 	bl	800b130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800af4e:	bf00      	nop
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	200003f0 	.word	0x200003f0
 800af58:	40003c00 	.word	0x40003c00

0800af5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800af60:	4b14      	ldr	r3, [pc, #80]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af62:	4a15      	ldr	r2, [pc, #84]	; (800afb8 <MX_USART1_UART_Init+0x5c>)
 800af64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800af66:	4b13      	ldr	r3, [pc, #76]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af68:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800af6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800af6e:	4b11      	ldr	r3, [pc, #68]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af70:	2200      	movs	r2, #0
 800af72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800af74:	4b0f      	ldr	r3, [pc, #60]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af76:	2200      	movs	r2, #0
 800af78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800af7a:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af82:	220c      	movs	r2, #12
 800af84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af88:	2200      	movs	r2, #0
 800af8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800af8c:	4b09      	ldr	r3, [pc, #36]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af8e:	2200      	movs	r2, #0
 800af90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800af92:	4b08      	ldr	r3, [pc, #32]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af94:	2200      	movs	r2, #0
 800af96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800af98:	4b06      	ldr	r3, [pc, #24]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800af9e:	4805      	ldr	r0, [pc, #20]	; (800afb4 <MX_USART1_UART_Init+0x58>)
 800afa0:	f7fe fc74 	bl	800988c <HAL_UART_Init>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800afaa:	f000 f8c1 	bl	800b130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800afae:	bf00      	nop
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	2000047c 	.word	0x2000047c
 800afb8:	40013800 	.word	0x40013800

0800afbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800afc0:	4b14      	ldr	r3, [pc, #80]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afc2:	4a15      	ldr	r2, [pc, #84]	; (800b018 <MX_USART2_UART_Init+0x5c>)
 800afc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800afc6:	4b13      	ldr	r3, [pc, #76]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800afcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800afce:	4b11      	ldr	r3, [pc, #68]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800afd4:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800afda:	4b0e      	ldr	r3, [pc, #56]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afdc:	2200      	movs	r2, #0
 800afde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800afe0:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afe2:	220c      	movs	r2, #12
 800afe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800afe6:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afe8:	2200      	movs	r2, #0
 800afea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800afec:	4b09      	ldr	r3, [pc, #36]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800afee:	2200      	movs	r2, #0
 800aff0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aff2:	4b08      	ldr	r3, [pc, #32]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aff8:	4b06      	ldr	r3, [pc, #24]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800affa:	2200      	movs	r2, #0
 800affc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800affe:	4805      	ldr	r0, [pc, #20]	; (800b014 <MX_USART2_UART_Init+0x58>)
 800b000:	f7fe fc44 	bl	800988c <HAL_UART_Init>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800b00a:	f000 f891 	bl	800b130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b00e:	bf00      	nop
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	20000500 	.word	0x20000500
 800b018:	40004400 	.word	0x40004400

0800b01c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b022:	f107 030c 	add.w	r3, r7, #12
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	605a      	str	r2, [r3, #4]
 800b02c:	609a      	str	r2, [r3, #8]
 800b02e:	60da      	str	r2, [r3, #12]
 800b030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b032:	4b3c      	ldr	r3, [pc, #240]	; (800b124 <MX_GPIO_Init+0x108>)
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	4a3b      	ldr	r2, [pc, #236]	; (800b124 <MX_GPIO_Init+0x108>)
 800b038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b03c:	6153      	str	r3, [r2, #20]
 800b03e:	4b39      	ldr	r3, [pc, #228]	; (800b124 <MX_GPIO_Init+0x108>)
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b046:	60bb      	str	r3, [r7, #8]
 800b048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b04a:	4b36      	ldr	r3, [pc, #216]	; (800b124 <MX_GPIO_Init+0x108>)
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	4a35      	ldr	r2, [pc, #212]	; (800b124 <MX_GPIO_Init+0x108>)
 800b050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b054:	6153      	str	r3, [r2, #20]
 800b056:	4b33      	ldr	r3, [pc, #204]	; (800b124 <MX_GPIO_Init+0x108>)
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b05e:	607b      	str	r3, [r7, #4]
 800b060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b062:	4b30      	ldr	r3, [pc, #192]	; (800b124 <MX_GPIO_Init+0x108>)
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	4a2f      	ldr	r2, [pc, #188]	; (800b124 <MX_GPIO_Init+0x108>)
 800b068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b06c:	6153      	str	r3, [r2, #20]
 800b06e:	4b2d      	ldr	r3, [pc, #180]	; (800b124 <MX_GPIO_Init+0x108>)
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800b07a:	2200      	movs	r2, #0
 800b07c:	2120      	movs	r1, #32
 800b07e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b082:	f7f8 f98e 	bl	80033a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800b086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b08a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b08c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800b090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b092:	2300      	movs	r3, #0
 800b094:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800b096:	f107 030c 	add.w	r3, r7, #12
 800b09a:	4619      	mov	r1, r3
 800b09c:	4822      	ldr	r0, [pc, #136]	; (800b128 <MX_GPIO_Init+0x10c>)
 800b09e:	f7f7 ffdf 	bl	8003060 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800b0a2:	f24e 0310 	movw	r3, #57360	; 0xe010
 800b0a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0b4:	f107 030c 	add.w	r3, r7, #12
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	481c      	ldr	r0, [pc, #112]	; (800b12c <MX_GPIO_Init+0x110>)
 800b0bc:	f7f7 ffd0 	bl	8003060 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3| GPIO_PIN_4| GPIO_PIN_5| GPIO_PIN_6;
 800b0c0:	2378      	movs	r3, #120	; 0x78
 800b0c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0cc:	f107 030c 	add.w	r3, r7, #12
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4816      	ldr	r0, [pc, #88]	; (800b12c <MX_GPIO_Init+0x110>)
 800b0d4:	f7f7 ffc4 	bl	8003060 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin =  GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8;
 800b0d8:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800b0dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0ea:	f107 030c 	add.w	r3, r7, #12
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	480d      	ldr	r0, [pc, #52]	; (800b128 <MX_GPIO_Init+0x10c>)
 800b0f2:	f7f7 ffb5 	bl	8003060 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	2140      	movs	r1, #64	; 0x40
 800b0fa:	480b      	ldr	r0, [pc, #44]	; (800b128 <MX_GPIO_Init+0x10c>)
 800b0fc:	f7f8 f951 	bl	80033a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b100:	2201      	movs	r2, #1
 800b102:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b106:	4808      	ldr	r0, [pc, #32]	; (800b128 <MX_GPIO_Init+0x10c>)
 800b108:	f7f8 f94b 	bl	80033a2 <HAL_GPIO_WritePin>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800b10c:	2200      	movs	r2, #0
 800b10e:	2100      	movs	r1, #0
 800b110:	2028      	movs	r0, #40	; 0x28
 800b112:	f7fc f93c 	bl	800738e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800b116:	2028      	movs	r0, #40	; 0x28
 800b118:	f7fc f955 	bl	80073c6 <HAL_NVIC_EnableIRQ>

}
 800b11c:	bf00      	nop
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	40021000 	.word	0x40021000
 800b128:	48000800 	.word	0x48000800
 800b12c:	48000400 	.word	0x48000400

0800b130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800b130:	b480      	push	{r7}
 800b132:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b134:	b672      	cpsid	i
}
 800b136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b138:	e7fe      	b.n	800b138 <Error_Handler+0x8>

0800b13a <EcuM_StartUp_One>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_One()
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 800b13e:	f7fb ffe7 	bl	8007110 <HAL_Init>
	BswM_Init();
 800b142:	f7ff fc47 	bl	800a9d4 <BswM_Init>
}
 800b146:	bf00      	nop
 800b148:	bd80      	pop	{r7, pc}

0800b14a <EcuM_StartUp_Two>:

void EcuM_StartUp_Two()
{
 800b14a:	b480      	push	{r7}
 800b14c:	af00      	add	r7, sp, #0

}
 800b14e:	bf00      	nop
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr

0800b156 <EcuM_Init>:

int EcuM_Init(void)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	af00      	add	r7, sp, #0
	EcuM_StartUp_One();
 800b15a:	f7ff ffee 	bl	800b13a <EcuM_StartUp_One>
	/* Start Scheduler */
	Os_Start();
 800b15e:	f000 f803 	bl	800b168 <Os_Start>

	return 0;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	bd80      	pop	{r7, pc}

0800b168 <Os_Start>:

#include "Os.h"
#include "Os_scheduler.h"

void Os_Start()
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
	Os_Scheduler_Init();
 800b16c:	f000 f8ba 	bl	800b2e4 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 800b170:	f000 f930 	bl	800b3d4 <Os_Scheduler_Start>

	while(1)
 800b174:	e7fe      	b.n	800b174 <Os_Start+0xc>
	...

0800b178 <SysTick_Handler>:
/**
  * @brief  SysTick IRQ Handler
  * @return None
  */
void SysTick_Handler(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
	/* Increment general counter */
	HAL_IncTick();
 800b17c:	f7fc f814 	bl	80071a8 <HAL_IncTick>
	/* Reset counters if base counter reached maximum value */
	if(g_Os_BaseTimerISR_count_u32 == OS_BASETIMER_COUNT_MAX)
 800b180:	4b40      	ldr	r3, [pc, #256]	; (800b284 <SysTick_Handler+0x10c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f242 720f 	movw	r2, #9999	; 0x270f
 800b188:	4293      	cmp	r3, r2
 800b18a:	d112      	bne.n	800b1b2 <SysTick_Handler+0x3a>
	{
		g_Os_BaseTimerISR_count_u32 = 0u;
 800b18c:	4b3d      	ldr	r3, [pc, #244]	; (800b284 <SysTick_Handler+0x10c>)
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
		g_Os_5msTimerISR_count_u32 = 0u;
 800b192:	4b3d      	ldr	r3, [pc, #244]	; (800b288 <SysTick_Handler+0x110>)
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
		g_Os_10msTimerISR_count_u32 = 0u;
 800b198:	4b3c      	ldr	r3, [pc, #240]	; (800b28c <SysTick_Handler+0x114>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
		g_Os_50msTimerISR_count_u32 = 0u;
 800b19e:	4b3c      	ldr	r3, [pc, #240]	; (800b290 <SysTick_Handler+0x118>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]
		g_Os_100msTimerISR_count_u32 = 0u;
 800b1a4:	4b3b      	ldr	r3, [pc, #236]	; (800b294 <SysTick_Handler+0x11c>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
		g_Os_500msTimerISR_count_u32 = 0u;
 800b1aa:	4b3b      	ldr	r3, [pc, #236]	; (800b298 <SysTick_Handler+0x120>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	e004      	b.n	800b1bc <SysTick_Handler+0x44>
	}
	else
	{
		/* Increment base counter */
		g_Os_BaseTimerISR_count_u32++;
 800b1b2:	4b34      	ldr	r3, [pc, #208]	; (800b284 <SysTick_Handler+0x10c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	4a32      	ldr	r2, [pc, #200]	; (800b284 <SysTick_Handler+0x10c>)
 800b1ba:	6013      	str	r3, [r2, #0]
	}

	/* Check for 5ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 5) == 0u)
 800b1bc:	4b31      	ldr	r3, [pc, #196]	; (800b284 <SysTick_Handler+0x10c>)
 800b1be:	6819      	ldr	r1, [r3, #0]
 800b1c0:	4b36      	ldr	r3, [pc, #216]	; (800b29c <SysTick_Handler+0x124>)
 800b1c2:	fba3 2301 	umull	r2, r3, r3, r1
 800b1c6:	089a      	lsrs	r2, r3, #2
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	1aca      	subs	r2, r1, r3
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	d104      	bne.n	800b1de <SysTick_Handler+0x66>
	{
		/* Increment 5ms counter */
		g_Os_5msTimerISR_count_u32++;
 800b1d4:	4b2c      	ldr	r3, [pc, #176]	; (800b288 <SysTick_Handler+0x110>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	4a2b      	ldr	r2, [pc, #172]	; (800b288 <SysTick_Handler+0x110>)
 800b1dc:	6013      	str	r3, [r2, #0]
	}

	/* Check for 10ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 10) == 0u)
 800b1de:	4b29      	ldr	r3, [pc, #164]	; (800b284 <SysTick_Handler+0x10c>)
 800b1e0:	6819      	ldr	r1, [r3, #0]
 800b1e2:	4b2e      	ldr	r3, [pc, #184]	; (800b29c <SysTick_Handler+0x124>)
 800b1e4:	fba3 2301 	umull	r2, r3, r3, r1
 800b1e8:	08da      	lsrs	r2, r3, #3
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	1aca      	subs	r2, r1, r3
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	d104      	bne.n	800b202 <SysTick_Handler+0x8a>
	{
		/* Increment 10ms counter */
		g_Os_10msTimerISR_count_u32++;
 800b1f8:	4b24      	ldr	r3, [pc, #144]	; (800b28c <SysTick_Handler+0x114>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	4a23      	ldr	r2, [pc, #140]	; (800b28c <SysTick_Handler+0x114>)
 800b200:	6013      	str	r3, [r2, #0]
	}

	/* Check for 50ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 50) == 0u)
 800b202:	4b20      	ldr	r3, [pc, #128]	; (800b284 <SysTick_Handler+0x10c>)
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	4b26      	ldr	r3, [pc, #152]	; (800b2a0 <SysTick_Handler+0x128>)
 800b208:	fba3 1302 	umull	r1, r3, r3, r2
 800b20c:	091b      	lsrs	r3, r3, #4
 800b20e:	2132      	movs	r1, #50	; 0x32
 800b210:	fb01 f303 	mul.w	r3, r1, r3
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d104      	bne.n	800b224 <SysTick_Handler+0xac>
	{
		/* Increment 50ms counter */
		g_Os_50msTimerISR_count_u32++;
 800b21a:	4b1d      	ldr	r3, [pc, #116]	; (800b290 <SysTick_Handler+0x118>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3301      	adds	r3, #1
 800b220:	4a1b      	ldr	r2, [pc, #108]	; (800b290 <SysTick_Handler+0x118>)
 800b222:	6013      	str	r3, [r2, #0]
	}

	/* Check for 100ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 100) == 0u)
 800b224:	4b17      	ldr	r3, [pc, #92]	; (800b284 <SysTick_Handler+0x10c>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	4b1d      	ldr	r3, [pc, #116]	; (800b2a0 <SysTick_Handler+0x128>)
 800b22a:	fba3 1302 	umull	r1, r3, r3, r2
 800b22e:	095b      	lsrs	r3, r3, #5
 800b230:	2164      	movs	r1, #100	; 0x64
 800b232:	fb01 f303 	mul.w	r3, r1, r3
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d104      	bne.n	800b246 <SysTick_Handler+0xce>
	{
		/* Increment 100ms counter */
		g_Os_100msTimerISR_count_u32++;
 800b23c:	4b15      	ldr	r3, [pc, #84]	; (800b294 <SysTick_Handler+0x11c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	4a14      	ldr	r2, [pc, #80]	; (800b294 <SysTick_Handler+0x11c>)
 800b244:	6013      	str	r3, [r2, #0]
	}

	/* Check for 500ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 500) == 0u)
 800b246:	4b0f      	ldr	r3, [pc, #60]	; (800b284 <SysTick_Handler+0x10c>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	4b16      	ldr	r3, [pc, #88]	; (800b2a4 <SysTick_Handler+0x12c>)
 800b24c:	fba3 1302 	umull	r1, r3, r3, r2
 800b250:	095b      	lsrs	r3, r3, #5
 800b252:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b256:	fb01 f303 	mul.w	r3, r1, r3
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d104      	bne.n	800b26a <SysTick_Handler+0xf2>
	{
		/* Increment 500ms counter */
		g_Os_500msTimerISR_count_u32++;
 800b260:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <SysTick_Handler+0x120>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3301      	adds	r3, #1
 800b266:	4a0c      	ldr	r2, [pc, #48]	; (800b298 <SysTick_Handler+0x120>)
 800b268:	6013      	str	r3, [r2, #0]
	}

	/* Call PendSV_Handler for context switch */
	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b26a:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <SysTick_Handler+0x130>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b03      	cmp	r3, #3
 800b272:	d105      	bne.n	800b280 <SysTick_Handler+0x108>
	{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800b274:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <SysTick_Handler+0x134>)
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	4a0c      	ldr	r2, [pc, #48]	; (800b2ac <SysTick_Handler+0x134>)
 800b27a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b27e:	6053      	str	r3, [r2, #4]
	}
}
 800b280:	bf00      	nop
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20001560 	.word	0x20001560
 800b288:	20001564 	.word	0x20001564
 800b28c:	20001568 	.word	0x20001568
 800b290:	2000156c 	.word	0x2000156c
 800b294:	20001570 	.word	0x20001570
 800b298:	20001574 	.word	0x20001574
 800b29c:	cccccccd 	.word	0xcccccccd
 800b2a0:	51eb851f 	.word	0x51eb851f
 800b2a4:	10624dd3 	.word	0x10624dd3
 800b2a8:	200015a0 	.word	0x200015a0
 800b2ac:	e000ed00 	.word	0xe000ed00

0800b2b0 <PendSV_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 800b2b0:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 800b2b2:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 800b2b4:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800b2b6:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 800b2b8:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 800b2ba:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 800b2bc:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800b2be:	4808      	ldr	r0, [pc, #32]	; (800b2e0 <PendSV_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 800b2c0:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 800b2c2:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 800b2c4:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 800b2c6:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 800b2c8:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 800b2ca:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 800b2cc:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 800b2ce:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800b2d0:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800b2d2:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800b2d4:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800b2d6:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 800b2d8:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 800b2da:	b662      	cpsie	i
    __asm("BX      LR");
 800b2dc:	4770      	bx	lr

}
 800b2de:	bf00      	nop
 800b2e0:	200005bc 	.word	0x200005bc

0800b2e4 <Os_Scheduler_Init>:
/**
  * @brief  OS Scheduler initialization function
  * @return None
  */
void Os_Scheduler_Init()
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0
	/* Enter critical section: Disable interrupts */
	__asm("CPSID   I");
 800b2e8:	b672      	cpsid	i
	/* Make the Task Control Block linked list circular */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8];
 800b2ea:	4b29      	ldr	r3, [pc, #164]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b2ec:	4a29      	ldr	r2, [pc, #164]	; (800b394 <Os_Scheduler_Init+0xb0>)
 800b2ee:	605a      	str	r2, [r3, #4]
	g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8];
 800b2f0:	4b27      	ldr	r3, [pc, #156]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b2f2:	4a29      	ldr	r2, [pc, #164]	; (800b398 <Os_Scheduler_Init+0xb4>)
 800b2f4:	60da      	str	r2, [r3, #12]
	g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8];
 800b2f6:	4b26      	ldr	r3, [pc, #152]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b2f8:	4a28      	ldr	r2, [pc, #160]	; (800b39c <Os_Scheduler_Init+0xb8>)
 800b2fa:	615a      	str	r2, [r3, #20]
	g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8];
 800b2fc:	4b24      	ldr	r3, [pc, #144]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b2fe:	4a28      	ldr	r2, [pc, #160]	; (800b3a0 <Os_Scheduler_Init+0xbc>)
 800b300:	61da      	str	r2, [r3, #28]
	g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800b302:	4b23      	ldr	r3, [pc, #140]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b304:	4a22      	ldr	r2, [pc, #136]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b306:	625a      	str	r2, [r3, #36]	; 0x24
	/* Setup stack for initialization (master) task */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-16];
 800b308:	4b21      	ldr	r3, [pc, #132]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b30a:	4a26      	ldr	r2, [pc, #152]	; (800b3a4 <Os_Scheduler_Init+0xc0>)
 800b30c:	601a      	str	r2, [r3, #0]
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b30e:	4b26      	ldr	r3, [pc, #152]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b314:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_TaskMaster_0);
 800b318:	4a24      	ldr	r2, [pc, #144]	; (800b3ac <Os_Scheduler_Init+0xc8>)
 800b31a:	4b23      	ldr	r3, [pc, #140]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b31c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	/* Setup stack for 10ms task */
    g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b320:	4b1b      	ldr	r3, [pc, #108]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b322:	4a23      	ldr	r2, [pc, #140]	; (800b3b0 <Os_Scheduler_Init+0xcc>)
 800b324:	609a      	str	r2, [r3, #8]
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b326:	4b20      	ldr	r3, [pc, #128]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b32c:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task10ms_0);
 800b330:	4a20      	ldr	r2, [pc, #128]	; (800b3b4 <Os_Scheduler_Init+0xd0>)
 800b332:	4b1d      	ldr	r3, [pc, #116]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b334:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
	/* Setup stack for 50ms task */
    g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b338:	4b15      	ldr	r3, [pc, #84]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b33a:	4a1f      	ldr	r2, [pc, #124]	; (800b3b8 <Os_Scheduler_Init+0xd4>)
 800b33c:	611a      	str	r2, [r3, #16]
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b33e:	4b1a      	ldr	r3, [pc, #104]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b344:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task50ms_0);
 800b348:	4a1c      	ldr	r2, [pc, #112]	; (800b3bc <Os_Scheduler_Init+0xd8>)
 800b34a:	4b17      	ldr	r3, [pc, #92]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b34c:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
	/* Setup stack for 100ms task */
    g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b350:	4b0f      	ldr	r3, [pc, #60]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b352:	4a1b      	ldr	r2, [pc, #108]	; (800b3c0 <Os_Scheduler_Init+0xdc>)
 800b354:	619a      	str	r2, [r3, #24]
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b356:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b35c:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task100ms_0);
 800b360:	4a18      	ldr	r2, [pc, #96]	; (800b3c4 <Os_Scheduler_Init+0xe0>)
 800b362:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b364:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78
	/* Setup stack for 500ms task */
    g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-16];
 800b368:	4b09      	ldr	r3, [pc, #36]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b36a:	4a17      	ldr	r2, [pc, #92]	; (800b3c8 <Os_Scheduler_Init+0xe4>)
 800b36c:	621a      	str	r2, [r3, #32]
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800b36e:	4b0e      	ldr	r3, [pc, #56]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b374:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task500ms_0);
 800b378:	4a14      	ldr	r2, [pc, #80]	; (800b3cc <Os_Scheduler_Init+0xe8>)
 800b37a:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <Os_Scheduler_Init+0xc4>)
 800b37c:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
    /* Set the current task control block to point to init task */
    g_Os_CurrentTaskBlock_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800b380:	4b13      	ldr	r3, [pc, #76]	; (800b3d0 <Os_Scheduler_Init+0xec>)
 800b382:	4a03      	ldr	r2, [pc, #12]	; (800b390 <Os_Scheduler_Init+0xac>)
 800b384:	601a      	str	r2, [r3, #0]
    /* Leave critical section: Enable interrupts */
    __asm("CPSIE   I ");
 800b386:	b662      	cpsie	i
}
 800b388:	bf00      	nop
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bc80      	pop	{r7}
 800b38e:	4770      	bx	lr
 800b390:	20000594 	.word	0x20000594
 800b394:	2000059c 	.word	0x2000059c
 800b398:	200005a4 	.word	0x200005a4
 800b39c:	200005ac 	.word	0x200005ac
 800b3a0:	200005b4 	.word	0x200005b4
 800b3a4:	200008a0 	.word	0x200008a0
 800b3a8:	200005c0 	.word	0x200005c0
 800b3ac:	0800b401 	.word	0x0800b401
 800b3b0:	20000bc0 	.word	0x20000bc0
 800b3b4:	0800b489 	.word	0x0800b489
 800b3b8:	20000ee0 	.word	0x20000ee0
 800b3bc:	0800b4d9 	.word	0x0800b4d9
 800b3c0:	20001200 	.word	0x20001200
 800b3c4:	0800b529 	.word	0x0800b529
 800b3c8:	20001520 	.word	0x20001520
 800b3cc:	0800b579 	.word	0x0800b579
 800b3d0:	200005bc 	.word	0x200005bc

0800b3d4 <Os_Scheduler_Start>:
  * @return None
  */
__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800b3d4:	4809      	ldr	r0, [pc, #36]	; (800b3fc <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 800b3d6:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 800b3d8:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 800b3da:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 800b3dc:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800b3de:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800b3e0:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800b3e2:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800b3e4:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 800b3e6:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 800b3e8:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800b3ea:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800b3ec:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 800b3ee:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 800b3f0:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 800b3f2:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 800b3f4:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 800b3f6:	b662      	cpsie	i
    __asm("BX      LR");
 800b3f8:	4770      	bx	lr
}
 800b3fa:	bf00      	nop
 800b3fc:	200005bc 	.word	0x200005bc

0800b400 <Os_Scheduler_TaskMaster_0>:
/**
  * @brief  Initialization task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_TaskMaster_0(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	af00      	add	r7, sp, #0
    while(1)
    {
    	/* Wait for context switch of master task */
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800b404:	bf00      	nop
 800b406:	4b1c      	ldr	r3, [pc, #112]	; (800b478 <Os_Scheduler_TaskMaster_0+0x78>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	4b1c      	ldr	r3, [pc, #112]	; (800b47c <Os_Scheduler_TaskMaster_0+0x7c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d0f9      	beq.n	800b406 <Os_Scheduler_TaskMaster_0+0x6>
    	{
    	}
    	Os_Task5ms_0_cnt++;
 800b412:	4b1b      	ldr	r3, [pc, #108]	; (800b480 <Os_Scheduler_TaskMaster_0+0x80>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3301      	adds	r3, #1
 800b418:	4a19      	ldr	r2, [pc, #100]	; (800b480 <Os_Scheduler_TaskMaster_0+0x80>)
 800b41a:	6013      	str	r3, [r2, #0]
    	g_Os_Task5ms_count_u32 = g_Os_5msTimerISR_count_u32;
 800b41c:	4b17      	ldr	r3, [pc, #92]	; (800b47c <Os_Scheduler_TaskMaster_0+0x7c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a15      	ldr	r2, [pc, #84]	; (800b478 <Os_Scheduler_TaskMaster_0+0x78>)
 800b422:	6013      	str	r3, [r2, #0]

    	/* Check Os state */
    	switch (g_OS_State_e)
 800b424:	4b17      	ldr	r3, [pc, #92]	; (800b484 <Os_Scheduler_TaskMaster_0+0x84>)
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b05      	cmp	r3, #5
 800b42c:	d822      	bhi.n	800b474 <Os_Scheduler_TaskMaster_0+0x74>
 800b42e:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <Os_Scheduler_TaskMaster_0+0x34>)
 800b430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b434:	0800b44d 	.word	0x0800b44d
 800b438:	0800b455 	.word	0x0800b455
 800b43c:	0800b461 	.word	0x0800b461
 800b440:	0800b461 	.word	0x0800b461
 800b444:	0800b469 	.word	0x0800b469
 800b448:	0800b475 	.word	0x0800b475
    	{
    		case OS_STATE_RESET_E:
    		{
    			g_OS_State_e = OS_STATE_INIT_E;
 800b44c:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <Os_Scheduler_TaskMaster_0+0x84>)
 800b44e:	2201      	movs	r2, #1
 800b450:	701a      	strb	r2, [r3, #0]
    		} break;
 800b452:	e010      	b.n	800b476 <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_INIT_E:
    		{
    			OS_TASK_CALL(Os_Task_Master(), g_Os_dwt_Master_f32);
 800b454:	f000 f8b8 	bl	800b5c8 <Os_Task_Master>
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <Os_Scheduler_TaskMaster_0+0x84>)
 800b45a:	2202      	movs	r2, #2
 800b45c:	701a      	strb	r2, [r3, #0]
    		} break;
 800b45e:	e00a      	b.n	800b476 <Os_Scheduler_TaskMaster_0+0x76>
    			//g_OS_State_e = OS_STATE_RUNNING_E;
    		}
    		case OS_STATE_RUNNING_E:
    		{
    			/* TODO: add task activate/suspend here */
    			g_OS_State_e = OS_STATE_RUNNING_E;
 800b460:	4b08      	ldr	r3, [pc, #32]	; (800b484 <Os_Scheduler_TaskMaster_0+0x84>)
 800b462:	2203      	movs	r2, #3
 800b464:	701a      	strb	r2, [r3, #0]
    		} break;
 800b466:	e006      	b.n	800b476 <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_SHUTDOWN_E:
    		{
    			/* TODO: Addc condition to get here */
    			OS_TASK_CALL(Os_Task_Shutdown(), g_Os_dwt_Shutdown_f32);
 800b468:	f000 f8cc 	bl	800b604 <Os_Task_Shutdown>
    			/* TODO: move to reset state */
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <Os_Scheduler_TaskMaster_0+0x84>)
 800b46e:	2202      	movs	r2, #2
 800b470:	701a      	strb	r2, [r3, #0]
    		} break;
 800b472:	e000      	b.n	800b476 <Os_Scheduler_TaskMaster_0+0x76>
    			/* NvM write all, write error */
    		} break;
    		default:
    		{

    		} break;
 800b474:	bf00      	nop
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800b476:	e7c5      	b.n	800b404 <Os_Scheduler_TaskMaster_0+0x4>
 800b478:	2000157c 	.word	0x2000157c
 800b47c:	20001564 	.word	0x20001564
 800b480:	20001578 	.word	0x20001578
 800b484:	200015a0 	.word	0x200015a0

0800b488 <Os_Scheduler_Task10ms_0>:
/**
  * @brief  Periodic 10ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task10ms_0(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b48c:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <Os_Scheduler_Task10ms_0+0x40>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b03      	cmp	r3, #3
 800b494:	d112      	bne.n	800b4bc <Os_Scheduler_Task10ms_0+0x34>
    	{
			while(g_Os_Task10ms_count_u32 == g_Os_10msTimerISR_count_u32)
 800b496:	bf00      	nop
 800b498:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <Os_Scheduler_Task10ms_0+0x44>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <Os_Scheduler_Task10ms_0+0x48>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d0f9      	beq.n	800b498 <Os_Scheduler_Task10ms_0+0x10>
			{

			}
			Os_Task10ms_0_cnt++;
 800b4a4:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <Os_Scheduler_Task10ms_0+0x4c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	4a0a      	ldr	r2, [pc, #40]	; (800b4d4 <Os_Scheduler_Task10ms_0+0x4c>)
 800b4ac:	6013      	str	r3, [r2, #0]
			g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800b4ae:	4b08      	ldr	r3, [pc, #32]	; (800b4d0 <Os_Scheduler_Task10ms_0+0x48>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a06      	ldr	r2, [pc, #24]	; (800b4cc <Os_Scheduler_Task10ms_0+0x44>)
 800b4b4:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_10ms(), g_Os_dwt_10ms_f32);
 800b4b6:	f000 f88d 	bl	800b5d4 <Os_Task_10ms>
 800b4ba:	e7e7      	b.n	800b48c <Os_Scheduler_Task10ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800b4bc:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <Os_Scheduler_Task10ms_0+0x48>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a02      	ldr	r2, [pc, #8]	; (800b4cc <Os_Scheduler_Task10ms_0+0x44>)
 800b4c2:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b4c4:	e7e2      	b.n	800b48c <Os_Scheduler_Task10ms_0+0x4>
 800b4c6:	bf00      	nop
 800b4c8:	200015a0 	.word	0x200015a0
 800b4cc:	20001584 	.word	0x20001584
 800b4d0:	20001568 	.word	0x20001568
 800b4d4:	20001580 	.word	0x20001580

0800b4d8 <Os_Scheduler_Task50ms_0>:
/**
  * @brief  Periodic 50ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task50ms_0(void)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <Os_Scheduler_Task50ms_0+0x40>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d112      	bne.n	800b50c <Os_Scheduler_Task50ms_0+0x34>
    	{
			while(g_Os_Task50ms_count_u32 == g_Os_50msTimerISR_count_u32)
 800b4e6:	bf00      	nop
 800b4e8:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <Os_Scheduler_Task50ms_0+0x44>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <Os_Scheduler_Task50ms_0+0x48>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d0f9      	beq.n	800b4e8 <Os_Scheduler_Task50ms_0+0x10>
			{

			}
			Os_Task50ms_0_cnt++;
 800b4f4:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <Os_Scheduler_Task50ms_0+0x4c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	4a0a      	ldr	r2, [pc, #40]	; (800b524 <Os_Scheduler_Task50ms_0+0x4c>)
 800b4fc:	6013      	str	r3, [r2, #0]
			g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800b4fe:	4b08      	ldr	r3, [pc, #32]	; (800b520 <Os_Scheduler_Task50ms_0+0x48>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a06      	ldr	r2, [pc, #24]	; (800b51c <Os_Scheduler_Task50ms_0+0x44>)
 800b504:	6013      	str	r3, [r2, #0]
			OS_TASK_CALL(Os_Task_50ms(), g_Os_dwt_50ms_f32);
 800b506:	f000 f86b 	bl	800b5e0 <Os_Task_50ms>
 800b50a:	e7e7      	b.n	800b4dc <Os_Scheduler_Task50ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800b50c:	4b04      	ldr	r3, [pc, #16]	; (800b520 <Os_Scheduler_Task50ms_0+0x48>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a02      	ldr	r2, [pc, #8]	; (800b51c <Os_Scheduler_Task50ms_0+0x44>)
 800b512:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b514:	e7e2      	b.n	800b4dc <Os_Scheduler_Task50ms_0+0x4>
 800b516:	bf00      	nop
 800b518:	200015a0 	.word	0x200015a0
 800b51c:	2000158c 	.word	0x2000158c
 800b520:	2000156c 	.word	0x2000156c
 800b524:	20001588 	.word	0x20001588

0800b528 <Os_Scheduler_Task100ms_0>:
/**
  * @brief  Periodic 100ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task100ms_0(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b52c:	4b0e      	ldr	r3, [pc, #56]	; (800b568 <Os_Scheduler_Task100ms_0+0x40>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b03      	cmp	r3, #3
 800b534:	d112      	bne.n	800b55c <Os_Scheduler_Task100ms_0+0x34>
    	{
			while(g_Os_Task100ms_count_u32 == g_Os_100msTimerISR_count_u32)
 800b536:	bf00      	nop
 800b538:	4b0c      	ldr	r3, [pc, #48]	; (800b56c <Os_Scheduler_Task100ms_0+0x44>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <Os_Scheduler_Task100ms_0+0x48>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	429a      	cmp	r2, r3
 800b542:	d0f9      	beq.n	800b538 <Os_Scheduler_Task100ms_0+0x10>
			{

			}
			Os_Task100ms_0_cnt++;
 800b544:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <Os_Scheduler_Task100ms_0+0x4c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	4a0a      	ldr	r2, [pc, #40]	; (800b574 <Os_Scheduler_Task100ms_0+0x4c>)
 800b54c:	6013      	str	r3, [r2, #0]
			g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800b54e:	4b08      	ldr	r3, [pc, #32]	; (800b570 <Os_Scheduler_Task100ms_0+0x48>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a06      	ldr	r2, [pc, #24]	; (800b56c <Os_Scheduler_Task100ms_0+0x44>)
 800b554:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_100ms(), g_Os_dwt_100ms_f32);
 800b556:	f000 f849 	bl	800b5ec <Os_Task_100ms>
 800b55a:	e7e7      	b.n	800b52c <Os_Scheduler_Task100ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800b55c:	4b04      	ldr	r3, [pc, #16]	; (800b570 <Os_Scheduler_Task100ms_0+0x48>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a02      	ldr	r2, [pc, #8]	; (800b56c <Os_Scheduler_Task100ms_0+0x44>)
 800b562:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b564:	e7e2      	b.n	800b52c <Os_Scheduler_Task100ms_0+0x4>
 800b566:	bf00      	nop
 800b568:	200015a0 	.word	0x200015a0
 800b56c:	20001594 	.word	0x20001594
 800b570:	20001570 	.word	0x20001570
 800b574:	20001590 	.word	0x20001590

0800b578 <Os_Scheduler_Task500ms_0>:
/**
  * @brief  Periodic 500ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task500ms_0(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b57c:	4b0e      	ldr	r3, [pc, #56]	; (800b5b8 <Os_Scheduler_Task500ms_0+0x40>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b03      	cmp	r3, #3
 800b584:	d112      	bne.n	800b5ac <Os_Scheduler_Task500ms_0+0x34>
    	{
			while(g_Os_Task500ms_count_u32 == g_Os_500msTimerISR_count_u32)
 800b586:	bf00      	nop
 800b588:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <Os_Scheduler_Task500ms_0+0x44>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <Os_Scheduler_Task500ms_0+0x48>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	d0f9      	beq.n	800b588 <Os_Scheduler_Task500ms_0+0x10>
			{

			}
			Os_Task500ms_0_cnt++;
 800b594:	4b0b      	ldr	r3, [pc, #44]	; (800b5c4 <Os_Scheduler_Task500ms_0+0x4c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3301      	adds	r3, #1
 800b59a:	4a0a      	ldr	r2, [pc, #40]	; (800b5c4 <Os_Scheduler_Task500ms_0+0x4c>)
 800b59c:	6013      	str	r3, [r2, #0]
			g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800b59e:	4b08      	ldr	r3, [pc, #32]	; (800b5c0 <Os_Scheduler_Task500ms_0+0x48>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a06      	ldr	r2, [pc, #24]	; (800b5bc <Os_Scheduler_Task500ms_0+0x44>)
 800b5a4:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_500ms(), g_Os_dwt_500ms_f32);
 800b5a6:	f000 f827 	bl	800b5f8 <Os_Task_500ms>
 800b5aa:	e7e7      	b.n	800b57c <Os_Scheduler_Task500ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <Os_Scheduler_Task500ms_0+0x48>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a02      	ldr	r2, [pc, #8]	; (800b5bc <Os_Scheduler_Task500ms_0+0x44>)
 800b5b2:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800b5b4:	e7e2      	b.n	800b57c <Os_Scheduler_Task500ms_0+0x4>
 800b5b6:	bf00      	nop
 800b5b8:	200015a0 	.word	0x200015a0
 800b5bc:	2000159c 	.word	0x2000159c
 800b5c0:	20001574 	.word	0x20001574
 800b5c4:	20001598 	.word	0x20001598

0800b5c8 <Os_Task_Master>:

#include "Os_task.h"
#include "Rte_Os.h"

TASK(Master)()
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
	Rte_Os_Task_Master();
 800b5cc:	f000 f872 	bl	800b6b4 <Rte_Task_Master>
}
 800b5d0:	bf00      	nop
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <Os_Task_10ms>:

TASK(10ms)()
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 800b5d8:	f000 f88e 	bl	800b6f8 <Rte_Task_10ms>
}
 800b5dc:	bf00      	nop
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <Os_Task_50ms>:

TASK(50ms)()
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 800b5e4:	f000 f89c 	bl	800b720 <Rte_Task_50ms>
}
 800b5e8:	bf00      	nop
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <Os_Task_100ms>:

TASK(100ms)()
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 800b5f0:	f000 f89c 	bl	800b72c <Rte_Task_100ms>
}
 800b5f4:	bf00      	nop
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <Os_Task_500ms>:

TASK(500ms)()
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 800b5fc:	f000 f8a2 	bl	800b744 <Rte_Task_500ms>
}
 800b600:	bf00      	nop
 800b602:	bd80      	pop	{r7, pc}

0800b604 <Os_Task_Shutdown>:

TASK(Shutdown)()
{
 800b604:	b580      	push	{r7, lr}
 800b606:	af00      	add	r7, sp, #0
	Rte_Os_Task_Shutdown();
 800b608:	f000 f8d0 	bl	800b7ac <Rte_Task_Shutdown>
}
 800b60c:	bf00      	nop
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 800b610:	b480      	push	{r7}
 800b612:	af00      	add	r7, sp, #0

}
 800b614:	bf00      	nop
 800b616:	46bd      	mov	sp, r7
 800b618:	bc80      	pop	{r7}
 800b61a:	4770      	bx	lr

0800b61c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b61c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b654 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b620:	480d      	ldr	r0, [pc, #52]	; (800b658 <LoopForever+0x6>)
  ldr r1, =_edata
 800b622:	490e      	ldr	r1, [pc, #56]	; (800b65c <LoopForever+0xa>)
  ldr r2, =_sidata
 800b624:	4a0e      	ldr	r2, [pc, #56]	; (800b660 <LoopForever+0xe>)
  movs r3, #0
 800b626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b628:	e002      	b.n	800b630 <LoopCopyDataInit>

0800b62a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b62a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b62c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b62e:	3304      	adds	r3, #4

0800b630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b634:	d3f9      	bcc.n	800b62a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b636:	4a0b      	ldr	r2, [pc, #44]	; (800b664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b638:	4c0b      	ldr	r4, [pc, #44]	; (800b668 <LoopForever+0x16>)
  movs r3, #0
 800b63a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b63c:	e001      	b.n	800b642 <LoopFillZerobss>

0800b63e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b63e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b640:	3204      	adds	r2, #4

0800b642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b644:	d3fb      	bcc.n	800b63e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b646:	f7fb fd5d 	bl	8007104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b64a:	f000 facd 	bl	800bbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 800b64e:	f7ff fd82 	bl	800b156 <EcuM_Init>

0800b652 <LoopForever>:

LoopForever:
    b LoopForever
 800b652:	e7fe      	b.n	800b652 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b654:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b65c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800b660:	0800c578 	.word	0x0800c578
  ldr r2, =_sbss
 800b664:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800b668:	200017c4 	.word	0x200017c4

0800b66c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b66c:	e7fe      	b.n	800b66c <ADC1_2_IRQHandler>

0800b66e <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 800b66e:	b480      	push	{r7}
 800b670:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b672:	b672      	cpsid	i
}
 800b674:	bf00      	nop
	__disable_irq();
}
 800b676:	bf00      	nop
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr

0800b67e <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 800b67e:	b480      	push	{r7}
 800b680:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800b682:	b662      	cpsie	i
}
 800b684:	bf00      	nop
	__enable_irq();
}
 800b686:	bf00      	nop
 800b688:	46bd      	mov	sp, r7
 800b68a:	bc80      	pop	{r7}
 800b68c:	4770      	bx	lr
	...

0800b690 <Rte_Init>:

void Rte_Init(void)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800b694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b698:	4804      	ldr	r0, [pc, #16]	; (800b6ac <Rte_Init+0x1c>)
 800b69a:	f7f7 fe6b 	bl	8003374 <HAL_GPIO_ReadPin>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <Rte_Init+0x20>)
 800b6a4:	701a      	strb	r2, [r3, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	48000800 	.word	0x48000800
 800b6b0:	200015a1 	.word	0x200015a1

0800b6b4 <Rte_Task_Master>:

/* Os Tasks*/
/* Init task */
void Rte_Task_Master(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 800b6b8:	f7ff fd47 	bl	800b14a <EcuM_StartUp_Two>

	/* Bsw stacks init */
	NvM_Init();
 800b6bc:	f7ff f938 	bl	800a930 <NvM_Init>
	Ea_Init();
 800b6c0:	f7ff f8f2 	bl	800a8a8 <Ea_Init>
	/* Rte init */
	Rte_Init();
 800b6c4:	f7ff ffe4 	bl	800b690 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 800b6c8:	f7f6 f9c0 	bl	8001a4c <Cdd_Servo_Init>
	Cdd_Ultrasonic_Init();
 800b6cc:	f7f6 fb2c 	bl	8001d28 <Cdd_Ultrasonic_Init>
	/* Asw init */
	Access_Init();
 800b6d0:	f7f5 fca0 	bl	8001014 <Access_Init>
	Engine_Init();
 800b6d4:	f7f5 fe22 	bl	800131c <Engine_Init>
	Brakes_Init();
 800b6d8:	f7f5 fdb2 	bl	8001240 <Brakes_Init>
	Steering_Init();
 800b6dc:	f7f5 fff0 	bl	80016c0 <Steering_Init>
	Blinker_Init();
 800b6e0:	f7f5 ff1c 	bl	800151c <Blinker_Init>
	FrontLights_Init();
 800b6e4:	f7f5 ffb6 	bl	8001654 <FrontLights_Init>
	InteriorLights_Init();
 800b6e8:	f7f5 ffc6 	bl	8001678 <InteriorLights_Init>
	RearLights_Init();
 800b6ec:	f7f5 ffd6 	bl	800169c <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 800b6f0:	f7f5 fe82 	bl	80013f8 <LED_Init>

	/* Add new ASW init functions here */
}
 800b6f4:	bf00      	nop
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 800b6fc:	f7ff f988 	bl	800aa10 <BswM_MainFunction>
	NvM_MainFunction();
 800b700:	f7ff f926 	bl	800a950 <NvM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 800b704:	f7f6 f9ca 	bl	8001a9c <Cdd_Servo_MainFunction>
	Cdd_Ultrasonic_MainFunction();
 800b708:	f7f6 fc36 	bl	8001f78 <Cdd_Ultrasonic_MainFunction>
	/* ASW */
	Access_MainFunction();
 800b70c:	f7f5 fc8e 	bl	800102c <Access_MainFunction>
	Engine_MainFunction();
 800b710:	f7f5 fe10 	bl	8001334 <Engine_MainFunction>
	Brakes_MainFunction();
 800b714:	f7f5 fdbe 	bl	8001294 <Brakes_MainFunction>
	Steering_MainFunction();
 800b718:	f7f5 ffde 	bl	80016d8 <Steering_MainFunction>

}
 800b71c:	bf00      	nop
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 800b724:	f7f5 fe8c 	bl	8001440 <LED_MainFunction>
}
 800b728:	bf00      	nop
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 800b730:	f7f5 ff12 	bl	8001558 <Blinker_MainFunction>
	FrontLights_MainFunction();
 800b734:	f7f5 ff9a 	bl	800166c <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 800b738:	f7f5 ffaa 	bl	8001690 <InteriorLights_MainFunction>
	RearLights_MainFunction();
 800b73c:	f7f5 ffba 	bl	80016b4 <RearLights_MainFunction>
}
 800b740:	bf00      	nop
 800b742:	bd80      	pop	{r7, pc}

0800b744 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0

	/* UART test section. TODO: remove */
	sprintf(databuf, "%4d X", count);
 800b748:	4b13      	ldr	r3, [pc, #76]	; (800b798 <Rte_Task_500ms+0x54>)
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	461a      	mov	r2, r3
 800b74e:	4913      	ldr	r1, [pc, #76]	; (800b79c <Rte_Task_500ms+0x58>)
 800b750:	4813      	ldr	r0, [pc, #76]	; (800b7a0 <Rte_Task_500ms+0x5c>)
 800b752:	f000 fa1b 	bl	800bb8c <siprintf>
	databuf[strlen(databuf)] = 0;
 800b756:	4812      	ldr	r0, [pc, #72]	; (800b7a0 <Rte_Task_500ms+0x5c>)
 800b758:	f7f4 fd42 	bl	80001e0 <strlen>
 800b75c:	4603      	mov	r3, r0
 800b75e:	4a10      	ldr	r2, [pc, #64]	; (800b7a0 <Rte_Task_500ms+0x5c>)
 800b760:	2100      	movs	r1, #0
 800b762:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 800b764:	480e      	ldr	r0, [pc, #56]	; (800b7a0 <Rte_Task_500ms+0x5c>)
 800b766:	f7f4 fd3b 	bl	80001e0 <strlen>
 800b76a:	4603      	mov	r3, r0
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b772:	490b      	ldr	r1, [pc, #44]	; (800b7a0 <Rte_Task_500ms+0x5c>)
 800b774:	480b      	ldr	r0, [pc, #44]	; (800b7a4 <Rte_Task_500ms+0x60>)
 800b776:	f7fe f8d7 	bl	8009928 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 800b77a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b77e:	2201      	movs	r2, #1
 800b780:	4909      	ldr	r1, [pc, #36]	; (800b7a8 <Rte_Task_500ms+0x64>)
 800b782:	4808      	ldr	r0, [pc, #32]	; (800b7a4 <Rte_Task_500ms+0x60>)
 800b784:	f7fe f8d0 	bl	8009928 <HAL_UART_Transmit>

	count++;
 800b788:	4b03      	ldr	r3, [pc, #12]	; (800b798 <Rte_Task_500ms+0x54>)
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	3301      	adds	r3, #1
 800b78e:	b29a      	uxth	r2, r3
 800b790:	4b01      	ldr	r3, [pc, #4]	; (800b798 <Rte_Task_500ms+0x54>)
 800b792:	801a      	strh	r2, [r3, #0]
}
 800b794:	bf00      	nop
 800b796:	bd80      	pop	{r7, pc}
 800b798:	200015b8 	.word	0x200015b8
 800b79c:	0800c4e8 	.word	0x0800c4e8
 800b7a0:	200015a8 	.word	0x200015a8
 800b7a4:	20000500 	.word	0x20000500
 800b7a8:	20000014 	.word	0x20000014

0800b7ac <Rte_Task_Shutdown>:

void Rte_Task_Shutdown(void)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	af00      	add	r7, sp, #0
	/* ASW Shutdown callbacks */
	LED_Shutdown();
 800b7b0:	f7f5 fea4 	bl	80014fc <LED_Shutdown>
	Brakes_Shutdown();
 800b7b4:	f7f5 fda2 	bl	80012fc <Brakes_Shutdown>

	/* BSW Shutdown callbacks */
}
 800b7b8:	bf00      	nop
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>:
/* CDD interfaces: Ultrasonic */
/* Cdd_Ultrasonic: Trigger measurement */
void Rte_Call_Cdd_Ultrasonic_TriggerMeasurement(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_SET);
 800b7c0:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a0a      	ldr	r2, [pc, #40]	; (800b7f0 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b7c6:	8891      	ldrh	r1, [r2, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7f7 fde9 	bl	80033a2 <HAL_GPIO_WritePin>
	__asm("NOP");
 800b7d0:	bf00      	nop
	__asm("NOP");
 800b7d2:	bf00      	nop
	__asm("NOP");
 800b7d4:	bf00      	nop
	__asm("NOP");
 800b7d6:	bf00      	nop
	__asm("NOP");
 800b7d8:	bf00      	nop
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_RESET);
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a04      	ldr	r2, [pc, #16]	; (800b7f0 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800b7e0:	8891      	ldrh	r1, [r2, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7f7 fddc 	bl	80033a2 <HAL_GPIO_WritePin>
}
 800b7ea:	bf00      	nop
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	0800c4f0 	.word	0x0800c4f0

0800b7f4 <Rte_Read_Cdd_Ultrasonic_Distance_f32>:

/* Cdd_Ultrasonic: Read distance */
void Rte_Read_Cdd_Ultrasonic_Distance_f32(float32 *distance)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	*distance = Cdd_Ultrasonic_ReadDistance();
 800b7fc:	f7f6 fbd6 	bl	8001fac <Cdd_Ultrasonic_ReadDistance>
 800b800:	4602      	mov	r2, r0
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	601a      	str	r2, [r3, #0]
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 800b818:	4b04      	ldr	r3, [pc, #16]	; (800b82c <Rte_Read_PC13_Pin_State+0x1c>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	701a      	strb	r2, [r3, #0]
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	bc80      	pop	{r7}
 800b82a:	4770      	bx	lr
 800b82c:	200015a1 	.word	0x200015a1

0800b830 <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	4603      	mov	r3, r0
 800b838:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 800b83a:	4a04      	ldr	r2, [pc, #16]	; (800b84c <Rte_Write_PC13_Pin_State+0x1c>)
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	7013      	strb	r3, [r2, #0]
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	bc80      	pop	{r7}
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	200015a1 	.word	0x200015a1

0800b850 <Rte_Read_g_CollisionWarning_Status>:

void Rte_Read_g_CollisionWarning_Status(uint8 *status)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
	*status = g_Rte_CollisionWarning_Status_u8;
 800b858:	4b04      	ldr	r3, [pc, #16]	; (800b86c <Rte_Read_g_CollisionWarning_Status+0x1c>)
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	701a      	strb	r2, [r3, #0]
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	bc80      	pop	{r7}
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	200015ba 	.word	0x200015ba

0800b870 <Rte_Write_g_CollisionWarning_Status>:

void Rte_Write_g_CollisionWarning_Status(uint8 status)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	71fb      	strb	r3, [r7, #7]
	g_Rte_CollisionWarning_Status_u8 = status;
 800b87a:	4a04      	ldr	r2, [pc, #16]	; (800b88c <Rte_Write_g_CollisionWarning_Status+0x1c>)
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	7013      	strb	r3, [r2, #0]
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	bc80      	pop	{r7}
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	200015ba 	.word	0x200015ba

0800b890 <Rte_Read_DIO_Autobrakes_State_b>:

void Rte_Read_DIO_Autobrakes_State_b(boolean *state)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	*state = g_Rte_Autobrakes_Status_b;
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <Rte_Read_DIO_Autobrakes_State_b+0x1c>)
 800b89a:	781a      	ldrb	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	701a      	strb	r2, [r3, #0]
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bc80      	pop	{r7}
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	200015bb 	.word	0x200015bb

0800b8b0 <Rte_Write_PC_2>:

/* Write PC2 pin state */
void Rte_Write_PC_2(boolean state)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d105      	bne.n	800b8cc <Rte_Write_PC_2+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2104      	movs	r1, #4
 800b8c4:	4806      	ldr	r0, [pc, #24]	; (800b8e0 <Rte_Write_PC_2+0x30>)
 800b8c6:	f7f7 fd6c 	bl	80033a2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
	}
}
 800b8ca:	e004      	b.n	800b8d6 <Rte_Write_PC_2+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	2104      	movs	r1, #4
 800b8d0:	4803      	ldr	r0, [pc, #12]	; (800b8e0 <Rte_Write_PC_2+0x30>)
 800b8d2:	f7f7 fd66 	bl	80033a2 <HAL_GPIO_WritePin>
}
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	48000800 	.word	0x48000800

0800b8e4 <Rte_Write_PC_3>:

/* Write PC3 pin state */
void Rte_Write_PC_3(boolean state)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d105      	bne.n	800b900 <Rte_Write_PC_3+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2108      	movs	r1, #8
 800b8f8:	4806      	ldr	r0, [pc, #24]	; (800b914 <Rte_Write_PC_3+0x30>)
 800b8fa:	f7f7 fd52 	bl	80033a2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800b8fe:	e004      	b.n	800b90a <Rte_Write_PC_3+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800b900:	2201      	movs	r2, #1
 800b902:	2108      	movs	r1, #8
 800b904:	4803      	ldr	r0, [pc, #12]	; (800b914 <Rte_Write_PC_3+0x30>)
 800b906:	f7f7 fd4c 	bl	80033a2 <HAL_GPIO_WritePin>
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	48000800 	.word	0x48000800

0800b918 <Rte_Write_DIO_Autobrakes_State_b>:

/* Write PC6 pin state */
void Rte_Write_DIO_Autobrakes_State_b(boolean state)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
	g_Rte_Autobrakes_Status_b = state;
 800b922:	4a0a      	ldr	r2, [pc, #40]	; (800b94c <Rte_Write_DIO_Autobrakes_State_b+0x34>)
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	7013      	strb	r3, [r2, #0]
	if(TRUE == state)
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d105      	bne.n	800b93a <Rte_Write_DIO_Autobrakes_State_b+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800b92e:	2200      	movs	r2, #0
 800b930:	2140      	movs	r1, #64	; 0x40
 800b932:	4807      	ldr	r0, [pc, #28]	; (800b950 <Rte_Write_DIO_Autobrakes_State_b+0x38>)
 800b934:	f7f7 fd35 	bl	80033a2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}
}
 800b938:	e004      	b.n	800b944 <Rte_Write_DIO_Autobrakes_State_b+0x2c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800b93a:	2201      	movs	r2, #1
 800b93c:	2140      	movs	r1, #64	; 0x40
 800b93e:	4804      	ldr	r0, [pc, #16]	; (800b950 <Rte_Write_DIO_Autobrakes_State_b+0x38>)
 800b940:	f7f7 fd2f 	bl	80033a2 <HAL_GPIO_WritePin>
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	200015bb 	.word	0x200015bb
 800b950:	48000800 	.word	0x48000800

0800b954 <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 800b95e:	88fb      	ldrh	r3, [r7, #6]
 800b960:	4618      	mov	r0, r3
 800b962:	f7f6 f87f 	bl	8001a64 <Cdd_Servo_RawMove>
}
 800b966:	bf00      	nop
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <Rte_Read_NvM_Block>:

void Rte_Read_NvM_Block(uint16 blockID, uint8 *data)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	6039      	str	r1, [r7, #0]
 800b97a:	80fb      	strh	r3, [r7, #6]
	/* TODO:	- remove direct read <- should be done by ReadAll
	 * 			- add block update after write
	 */
	NvM_ReadBlock(blockID, Rte_NvM_RAM_Block[blockID]);
 800b97c:	88fb      	ldrh	r3, [r7, #6]
 800b97e:	015b      	lsls	r3, r3, #5
 800b980:	4a07      	ldr	r2, [pc, #28]	; (800b9a0 <Rte_Read_NvM_Block+0x30>)
 800b982:	441a      	add	r2, r3
 800b984:	88fb      	ldrh	r3, [r7, #6]
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff f814 	bl	800a9b6 <NvM_ReadBlock>
	data = &Rte_NvM_RAM_Block[blockID][0u];
 800b98e:	88fb      	ldrh	r3, [r7, #6]
 800b990:	015b      	lsls	r3, r3, #5
 800b992:	4a03      	ldr	r2, [pc, #12]	; (800b9a0 <Rte_Read_NvM_Block+0x30>)
 800b994:	4413      	add	r3, r2
 800b996:	603b      	str	r3, [r7, #0]
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	200015bc 	.word	0x200015bc

0800b9a4 <Rte_Write_NvM_Block>:

void Rte_Write_NvM_Block(uint16 blockID, uint8 *data)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	6039      	str	r1, [r7, #0]
 800b9ae:	80fb      	strh	r3, [r7, #6]
	NvM_WriteBlock(blockID, data);
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fe ffef 	bl	800a998 <NvM_WriteBlock>
}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 800b9ce:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <Rte_Write_AN0_Voltage_u16+0x1c>)
 800b9d0:	88fb      	ldrh	r3, [r7, #6]
 800b9d2:	8013      	strh	r3, [r2, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bc80      	pop	{r7}
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	200015a2 	.word	0x200015a2

0800b9e4 <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800b9ec:	f7ff fe3f 	bl	800b66e <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 800b9f0:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <Rte_Read_AN0_Voltage_u16+0x24>)
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800b9fa:	f7ff fe40 	bl	800b67e <Rte_Call_LeaveProtectedSection>
}
 800b9fe:	bf00      	nop
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	200015a2 	.word	0x200015a2

0800ba0c <Rte_Write_AN2_Voltage_u16>:

void Rte_Write_AN2_Voltage_u16(uint16 voltage)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN2_Voltage = voltage;
 800ba16:	4a04      	ldr	r2, [pc, #16]	; (800ba28 <Rte_Write_AN2_Voltage_u16+0x1c>)
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	8013      	strh	r3, [r2, #0]
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bc80      	pop	{r7}
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	200015a4 	.word	0x200015a4

0800ba2c <Rte_Read_AN2_Voltage_u16>:

void Rte_Read_AN2_Voltage_u16(uint16 *voltage)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800ba34:	f7ff fe1b 	bl	800b66e <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN2_Voltage;
 800ba38:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <Rte_Read_AN2_Voltage_u16+0x24>)
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800ba42:	f7ff fe1c 	bl	800b67e <Rte_Call_LeaveProtectedSection>
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200015a4 	.word	0x200015a4

0800ba54 <Rte_Read_Remote_D0>:


void Rte_Read_Remote_D0(uint8 *status)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800ba5c:	2110      	movs	r1, #16
 800ba5e:	4805      	ldr	r0, [pc, #20]	; (800ba74 <Rte_Read_Remote_D0+0x20>)
 800ba60:	f7f7 fc88 	bl	8003374 <HAL_GPIO_ReadPin>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461a      	mov	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	701a      	strb	r2, [r3, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	48000400 	.word	0x48000400

0800ba78 <Rte_Read_Remote_D1>:

void Rte_Read_Remote_D1(uint8 *status)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800ba80:	2108      	movs	r1, #8
 800ba82:	4805      	ldr	r0, [pc, #20]	; (800ba98 <Rte_Read_Remote_D1+0x20>)
 800ba84:	f7f7 fc76 	bl	8003374 <HAL_GPIO_ReadPin>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	701a      	strb	r2, [r3, #0]
}
 800ba90:	bf00      	nop
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	48000400 	.word	0x48000400

0800ba9c <Rte_Read_Remote_D2>:

void Rte_Read_Remote_D2(uint8 *status)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800baa4:	2120      	movs	r1, #32
 800baa6:	4805      	ldr	r0, [pc, #20]	; (800babc <Rte_Read_Remote_D2+0x20>)
 800baa8:	f7f7 fc64 	bl	8003374 <HAL_GPIO_ReadPin>
 800baac:	4603      	mov	r3, r0
 800baae:	461a      	mov	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	701a      	strb	r2, [r3, #0]
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	48000400 	.word	0x48000400

0800bac0 <Rte_Read_Remote_D3>:

void Rte_Read_Remote_D3(uint8 *status)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800bac8:	2140      	movs	r1, #64	; 0x40
 800baca:	4805      	ldr	r0, [pc, #20]	; (800bae0 <Rte_Read_Remote_D3+0x20>)
 800bacc:	f7f7 fc52 	bl	8003374 <HAL_GPIO_ReadPin>
 800bad0:	4603      	mov	r3, r0
 800bad2:	461a      	mov	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	701a      	strb	r2, [r3, #0]
}
 800bad8:	bf00      	nop
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	48000400 	.word	0x48000400

0800bae4 <Rte_Write_PB_13>:

/* Write Green pin state */
void Rte_Write_PB_13(boolean state)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d106      	bne.n	800bb02 <Rte_Write_PB_13+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_SET);
 800baf4:	2201      	movs	r2, #1
 800baf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bafa:	4807      	ldr	r0, [pc, #28]	; (800bb18 <Rte_Write_PB_13+0x34>)
 800bafc:	f7f7 fc51 	bl	80033a2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
	}
}
 800bb00:	e005      	b.n	800bb0e <Rte_Write_PB_13+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
 800bb02:	2200      	movs	r2, #0
 800bb04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bb08:	4803      	ldr	r0, [pc, #12]	; (800bb18 <Rte_Write_PB_13+0x34>)
 800bb0a:	f7f7 fc4a 	bl	80033a2 <HAL_GPIO_WritePin>
}
 800bb0e:	bf00      	nop
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	48000400 	.word	0x48000400

0800bb1c <Rte_Write_PB_14>:

/* Write Yellow pin state */
void Rte_Write_PB_14(boolean state)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800bb26:	79fb      	ldrb	r3, [r7, #7]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d106      	bne.n	800bb3a <Rte_Write_PB_14+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_SET);
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb32:	4807      	ldr	r0, [pc, #28]	; (800bb50 <Rte_Write_PB_14+0x34>)
 800bb34:	f7f7 fc35 	bl	80033a2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
	}
}
 800bb38:	e005      	b.n	800bb46 <Rte_Write_PB_14+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb40:	4803      	ldr	r0, [pc, #12]	; (800bb50 <Rte_Write_PB_14+0x34>)
 800bb42:	f7f7 fc2e 	bl	80033a2 <HAL_GPIO_WritePin>
}
 800bb46:	bf00      	nop
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	48000400 	.word	0x48000400

0800bb54 <Rte_Write_PB_15>:

/* Write Red pin state */
void Rte_Write_PB_15(boolean state)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d106      	bne.n	800bb72 <Rte_Write_PB_15+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_SET);
 800bb64:	2201      	movs	r2, #1
 800bb66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb6a:	4807      	ldr	r0, [pc, #28]	; (800bb88 <Rte_Write_PB_15+0x34>)
 800bb6c:	f7f7 fc19 	bl	80033a2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
	}
}
 800bb70:	e005      	b.n	800bb7e <Rte_Write_PB_15+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
 800bb72:	2200      	movs	r2, #0
 800bb74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb78:	4803      	ldr	r0, [pc, #12]	; (800bb88 <Rte_Write_PB_15+0x34>)
 800bb7a:	f7f7 fc12 	bl	80033a2 <HAL_GPIO_WritePin>
}
 800bb7e:	bf00      	nop
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	48000400 	.word	0x48000400

0800bb8c <siprintf>:
 800bb8c:	b40e      	push	{r1, r2, r3}
 800bb8e:	b500      	push	{lr}
 800bb90:	b09c      	sub	sp, #112	; 0x70
 800bb92:	ab1d      	add	r3, sp, #116	; 0x74
 800bb94:	9002      	str	r0, [sp, #8]
 800bb96:	9006      	str	r0, [sp, #24]
 800bb98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb9c:	4809      	ldr	r0, [pc, #36]	; (800bbc4 <siprintf+0x38>)
 800bb9e:	9107      	str	r1, [sp, #28]
 800bba0:	9104      	str	r1, [sp, #16]
 800bba2:	4909      	ldr	r1, [pc, #36]	; (800bbc8 <siprintf+0x3c>)
 800bba4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bba8:	9105      	str	r1, [sp, #20]
 800bbaa:	6800      	ldr	r0, [r0, #0]
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	a902      	add	r1, sp, #8
 800bbb0:	f000 f990 	bl	800bed4 <_svfiprintf_r>
 800bbb4:	9b02      	ldr	r3, [sp, #8]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	b01c      	add	sp, #112	; 0x70
 800bbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbc0:	b003      	add	sp, #12
 800bbc2:	4770      	bx	lr
 800bbc4:	20000064 	.word	0x20000064
 800bbc8:	ffff0208 	.word	0xffff0208

0800bbcc <memset>:
 800bbcc:	4402      	add	r2, r0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d100      	bne.n	800bbd6 <memset+0xa>
 800bbd4:	4770      	bx	lr
 800bbd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbda:	e7f9      	b.n	800bbd0 <memset+0x4>

0800bbdc <__errno>:
 800bbdc:	4b01      	ldr	r3, [pc, #4]	; (800bbe4 <__errno+0x8>)
 800bbde:	6818      	ldr	r0, [r3, #0]
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	20000064 	.word	0x20000064

0800bbe8 <__libc_init_array>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	4d0d      	ldr	r5, [pc, #52]	; (800bc20 <__libc_init_array+0x38>)
 800bbec:	4c0d      	ldr	r4, [pc, #52]	; (800bc24 <__libc_init_array+0x3c>)
 800bbee:	1b64      	subs	r4, r4, r5
 800bbf0:	10a4      	asrs	r4, r4, #2
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	42a6      	cmp	r6, r4
 800bbf6:	d109      	bne.n	800bc0c <__libc_init_array+0x24>
 800bbf8:	4d0b      	ldr	r5, [pc, #44]	; (800bc28 <__libc_init_array+0x40>)
 800bbfa:	4c0c      	ldr	r4, [pc, #48]	; (800bc2c <__libc_init_array+0x44>)
 800bbfc:	f000 fc68 	bl	800c4d0 <_init>
 800bc00:	1b64      	subs	r4, r4, r5
 800bc02:	10a4      	asrs	r4, r4, #2
 800bc04:	2600      	movs	r6, #0
 800bc06:	42a6      	cmp	r6, r4
 800bc08:	d105      	bne.n	800bc16 <__libc_init_array+0x2e>
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc10:	4798      	blx	r3
 800bc12:	3601      	adds	r6, #1
 800bc14:	e7ee      	b.n	800bbf4 <__libc_init_array+0xc>
 800bc16:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc1a:	4798      	blx	r3
 800bc1c:	3601      	adds	r6, #1
 800bc1e:	e7f2      	b.n	800bc06 <__libc_init_array+0x1e>
 800bc20:	0800c570 	.word	0x0800c570
 800bc24:	0800c570 	.word	0x0800c570
 800bc28:	0800c570 	.word	0x0800c570
 800bc2c:	0800c574 	.word	0x0800c574

0800bc30 <__retarget_lock_acquire_recursive>:
 800bc30:	4770      	bx	lr

0800bc32 <__retarget_lock_release_recursive>:
 800bc32:	4770      	bx	lr

0800bc34 <_free_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4605      	mov	r5, r0
 800bc38:	2900      	cmp	r1, #0
 800bc3a:	d041      	beq.n	800bcc0 <_free_r+0x8c>
 800bc3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc40:	1f0c      	subs	r4, r1, #4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	bfb8      	it	lt
 800bc46:	18e4      	addlt	r4, r4, r3
 800bc48:	f000 f8de 	bl	800be08 <__malloc_lock>
 800bc4c:	4a1d      	ldr	r2, [pc, #116]	; (800bcc4 <_free_r+0x90>)
 800bc4e:	6813      	ldr	r3, [r2, #0]
 800bc50:	b933      	cbnz	r3, 800bc60 <_free_r+0x2c>
 800bc52:	6063      	str	r3, [r4, #4]
 800bc54:	6014      	str	r4, [r2, #0]
 800bc56:	4628      	mov	r0, r5
 800bc58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc5c:	f000 b8da 	b.w	800be14 <__malloc_unlock>
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	d908      	bls.n	800bc76 <_free_r+0x42>
 800bc64:	6820      	ldr	r0, [r4, #0]
 800bc66:	1821      	adds	r1, r4, r0
 800bc68:	428b      	cmp	r3, r1
 800bc6a:	bf01      	itttt	eq
 800bc6c:	6819      	ldreq	r1, [r3, #0]
 800bc6e:	685b      	ldreq	r3, [r3, #4]
 800bc70:	1809      	addeq	r1, r1, r0
 800bc72:	6021      	streq	r1, [r4, #0]
 800bc74:	e7ed      	b.n	800bc52 <_free_r+0x1e>
 800bc76:	461a      	mov	r2, r3
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	b10b      	cbz	r3, 800bc80 <_free_r+0x4c>
 800bc7c:	42a3      	cmp	r3, r4
 800bc7e:	d9fa      	bls.n	800bc76 <_free_r+0x42>
 800bc80:	6811      	ldr	r1, [r2, #0]
 800bc82:	1850      	adds	r0, r2, r1
 800bc84:	42a0      	cmp	r0, r4
 800bc86:	d10b      	bne.n	800bca0 <_free_r+0x6c>
 800bc88:	6820      	ldr	r0, [r4, #0]
 800bc8a:	4401      	add	r1, r0
 800bc8c:	1850      	adds	r0, r2, r1
 800bc8e:	4283      	cmp	r3, r0
 800bc90:	6011      	str	r1, [r2, #0]
 800bc92:	d1e0      	bne.n	800bc56 <_free_r+0x22>
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	6053      	str	r3, [r2, #4]
 800bc9a:	4408      	add	r0, r1
 800bc9c:	6010      	str	r0, [r2, #0]
 800bc9e:	e7da      	b.n	800bc56 <_free_r+0x22>
 800bca0:	d902      	bls.n	800bca8 <_free_r+0x74>
 800bca2:	230c      	movs	r3, #12
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	e7d6      	b.n	800bc56 <_free_r+0x22>
 800bca8:	6820      	ldr	r0, [r4, #0]
 800bcaa:	1821      	adds	r1, r4, r0
 800bcac:	428b      	cmp	r3, r1
 800bcae:	bf04      	itt	eq
 800bcb0:	6819      	ldreq	r1, [r3, #0]
 800bcb2:	685b      	ldreq	r3, [r3, #4]
 800bcb4:	6063      	str	r3, [r4, #4]
 800bcb6:	bf04      	itt	eq
 800bcb8:	1809      	addeq	r1, r1, r0
 800bcba:	6021      	streq	r1, [r4, #0]
 800bcbc:	6054      	str	r4, [r2, #4]
 800bcbe:	e7ca      	b.n	800bc56 <_free_r+0x22>
 800bcc0:	bd38      	pop	{r3, r4, r5, pc}
 800bcc2:	bf00      	nop
 800bcc4:	200017bc 	.word	0x200017bc

0800bcc8 <sbrk_aligned>:
 800bcc8:	b570      	push	{r4, r5, r6, lr}
 800bcca:	4e0e      	ldr	r6, [pc, #56]	; (800bd04 <sbrk_aligned+0x3c>)
 800bccc:	460c      	mov	r4, r1
 800bcce:	6831      	ldr	r1, [r6, #0]
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	b911      	cbnz	r1, 800bcda <sbrk_aligned+0x12>
 800bcd4:	f000 fba6 	bl	800c424 <_sbrk_r>
 800bcd8:	6030      	str	r0, [r6, #0]
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f000 fba1 	bl	800c424 <_sbrk_r>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	d00a      	beq.n	800bcfc <sbrk_aligned+0x34>
 800bce6:	1cc4      	adds	r4, r0, #3
 800bce8:	f024 0403 	bic.w	r4, r4, #3
 800bcec:	42a0      	cmp	r0, r4
 800bcee:	d007      	beq.n	800bd00 <sbrk_aligned+0x38>
 800bcf0:	1a21      	subs	r1, r4, r0
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f000 fb96 	bl	800c424 <_sbrk_r>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d101      	bne.n	800bd00 <sbrk_aligned+0x38>
 800bcfc:	f04f 34ff 	mov.w	r4, #4294967295
 800bd00:	4620      	mov	r0, r4
 800bd02:	bd70      	pop	{r4, r5, r6, pc}
 800bd04:	200017c0 	.word	0x200017c0

0800bd08 <_malloc_r>:
 800bd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd0c:	1ccd      	adds	r5, r1, #3
 800bd0e:	f025 0503 	bic.w	r5, r5, #3
 800bd12:	3508      	adds	r5, #8
 800bd14:	2d0c      	cmp	r5, #12
 800bd16:	bf38      	it	cc
 800bd18:	250c      	movcc	r5, #12
 800bd1a:	2d00      	cmp	r5, #0
 800bd1c:	4607      	mov	r7, r0
 800bd1e:	db01      	blt.n	800bd24 <_malloc_r+0x1c>
 800bd20:	42a9      	cmp	r1, r5
 800bd22:	d905      	bls.n	800bd30 <_malloc_r+0x28>
 800bd24:	230c      	movs	r3, #12
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	2600      	movs	r6, #0
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be04 <_malloc_r+0xfc>
 800bd34:	f000 f868 	bl	800be08 <__malloc_lock>
 800bd38:	f8d8 3000 	ldr.w	r3, [r8]
 800bd3c:	461c      	mov	r4, r3
 800bd3e:	bb5c      	cbnz	r4, 800bd98 <_malloc_r+0x90>
 800bd40:	4629      	mov	r1, r5
 800bd42:	4638      	mov	r0, r7
 800bd44:	f7ff ffc0 	bl	800bcc8 <sbrk_aligned>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	d155      	bne.n	800bdfa <_malloc_r+0xf2>
 800bd4e:	f8d8 4000 	ldr.w	r4, [r8]
 800bd52:	4626      	mov	r6, r4
 800bd54:	2e00      	cmp	r6, #0
 800bd56:	d145      	bne.n	800bde4 <_malloc_r+0xdc>
 800bd58:	2c00      	cmp	r4, #0
 800bd5a:	d048      	beq.n	800bdee <_malloc_r+0xe6>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	4631      	mov	r1, r6
 800bd60:	4638      	mov	r0, r7
 800bd62:	eb04 0903 	add.w	r9, r4, r3
 800bd66:	f000 fb5d 	bl	800c424 <_sbrk_r>
 800bd6a:	4581      	cmp	r9, r0
 800bd6c:	d13f      	bne.n	800bdee <_malloc_r+0xe6>
 800bd6e:	6821      	ldr	r1, [r4, #0]
 800bd70:	1a6d      	subs	r5, r5, r1
 800bd72:	4629      	mov	r1, r5
 800bd74:	4638      	mov	r0, r7
 800bd76:	f7ff ffa7 	bl	800bcc8 <sbrk_aligned>
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	d037      	beq.n	800bdee <_malloc_r+0xe6>
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	442b      	add	r3, r5
 800bd82:	6023      	str	r3, [r4, #0]
 800bd84:	f8d8 3000 	ldr.w	r3, [r8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d038      	beq.n	800bdfe <_malloc_r+0xf6>
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	42a2      	cmp	r2, r4
 800bd90:	d12b      	bne.n	800bdea <_malloc_r+0xe2>
 800bd92:	2200      	movs	r2, #0
 800bd94:	605a      	str	r2, [r3, #4]
 800bd96:	e00f      	b.n	800bdb8 <_malloc_r+0xb0>
 800bd98:	6822      	ldr	r2, [r4, #0]
 800bd9a:	1b52      	subs	r2, r2, r5
 800bd9c:	d41f      	bmi.n	800bdde <_malloc_r+0xd6>
 800bd9e:	2a0b      	cmp	r2, #11
 800bda0:	d917      	bls.n	800bdd2 <_malloc_r+0xca>
 800bda2:	1961      	adds	r1, r4, r5
 800bda4:	42a3      	cmp	r3, r4
 800bda6:	6025      	str	r5, [r4, #0]
 800bda8:	bf18      	it	ne
 800bdaa:	6059      	strne	r1, [r3, #4]
 800bdac:	6863      	ldr	r3, [r4, #4]
 800bdae:	bf08      	it	eq
 800bdb0:	f8c8 1000 	streq.w	r1, [r8]
 800bdb4:	5162      	str	r2, [r4, r5]
 800bdb6:	604b      	str	r3, [r1, #4]
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f104 060b 	add.w	r6, r4, #11
 800bdbe:	f000 f829 	bl	800be14 <__malloc_unlock>
 800bdc2:	f026 0607 	bic.w	r6, r6, #7
 800bdc6:	1d23      	adds	r3, r4, #4
 800bdc8:	1af2      	subs	r2, r6, r3
 800bdca:	d0ae      	beq.n	800bd2a <_malloc_r+0x22>
 800bdcc:	1b9b      	subs	r3, r3, r6
 800bdce:	50a3      	str	r3, [r4, r2]
 800bdd0:	e7ab      	b.n	800bd2a <_malloc_r+0x22>
 800bdd2:	42a3      	cmp	r3, r4
 800bdd4:	6862      	ldr	r2, [r4, #4]
 800bdd6:	d1dd      	bne.n	800bd94 <_malloc_r+0x8c>
 800bdd8:	f8c8 2000 	str.w	r2, [r8]
 800bddc:	e7ec      	b.n	800bdb8 <_malloc_r+0xb0>
 800bdde:	4623      	mov	r3, r4
 800bde0:	6864      	ldr	r4, [r4, #4]
 800bde2:	e7ac      	b.n	800bd3e <_malloc_r+0x36>
 800bde4:	4634      	mov	r4, r6
 800bde6:	6876      	ldr	r6, [r6, #4]
 800bde8:	e7b4      	b.n	800bd54 <_malloc_r+0x4c>
 800bdea:	4613      	mov	r3, r2
 800bdec:	e7cc      	b.n	800bd88 <_malloc_r+0x80>
 800bdee:	230c      	movs	r3, #12
 800bdf0:	603b      	str	r3, [r7, #0]
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	f000 f80e 	bl	800be14 <__malloc_unlock>
 800bdf8:	e797      	b.n	800bd2a <_malloc_r+0x22>
 800bdfa:	6025      	str	r5, [r4, #0]
 800bdfc:	e7dc      	b.n	800bdb8 <_malloc_r+0xb0>
 800bdfe:	605b      	str	r3, [r3, #4]
 800be00:	deff      	udf	#255	; 0xff
 800be02:	bf00      	nop
 800be04:	200017bc 	.word	0x200017bc

0800be08 <__malloc_lock>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__malloc_lock+0x8>)
 800be0a:	f7ff bf11 	b.w	800bc30 <__retarget_lock_acquire_recursive>
 800be0e:	bf00      	nop
 800be10:	200017b8 	.word	0x200017b8

0800be14 <__malloc_unlock>:
 800be14:	4801      	ldr	r0, [pc, #4]	; (800be1c <__malloc_unlock+0x8>)
 800be16:	f7ff bf0c 	b.w	800bc32 <__retarget_lock_release_recursive>
 800be1a:	bf00      	nop
 800be1c:	200017b8 	.word	0x200017b8

0800be20 <__ssputs_r>:
 800be20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	688e      	ldr	r6, [r1, #8]
 800be26:	461f      	mov	r7, r3
 800be28:	42be      	cmp	r6, r7
 800be2a:	680b      	ldr	r3, [r1, #0]
 800be2c:	4682      	mov	sl, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	4690      	mov	r8, r2
 800be32:	d82c      	bhi.n	800be8e <__ssputs_r+0x6e>
 800be34:	898a      	ldrh	r2, [r1, #12]
 800be36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be3a:	d026      	beq.n	800be8a <__ssputs_r+0x6a>
 800be3c:	6965      	ldr	r5, [r4, #20]
 800be3e:	6909      	ldr	r1, [r1, #16]
 800be40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be44:	eba3 0901 	sub.w	r9, r3, r1
 800be48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be4c:	1c7b      	adds	r3, r7, #1
 800be4e:	444b      	add	r3, r9
 800be50:	106d      	asrs	r5, r5, #1
 800be52:	429d      	cmp	r5, r3
 800be54:	bf38      	it	cc
 800be56:	461d      	movcc	r5, r3
 800be58:	0553      	lsls	r3, r2, #21
 800be5a:	d527      	bpl.n	800beac <__ssputs_r+0x8c>
 800be5c:	4629      	mov	r1, r5
 800be5e:	f7ff ff53 	bl	800bd08 <_malloc_r>
 800be62:	4606      	mov	r6, r0
 800be64:	b360      	cbz	r0, 800bec0 <__ssputs_r+0xa0>
 800be66:	6921      	ldr	r1, [r4, #16]
 800be68:	464a      	mov	r2, r9
 800be6a:	f000 faeb 	bl	800c444 <memcpy>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be78:	81a3      	strh	r3, [r4, #12]
 800be7a:	6126      	str	r6, [r4, #16]
 800be7c:	6165      	str	r5, [r4, #20]
 800be7e:	444e      	add	r6, r9
 800be80:	eba5 0509 	sub.w	r5, r5, r9
 800be84:	6026      	str	r6, [r4, #0]
 800be86:	60a5      	str	r5, [r4, #8]
 800be88:	463e      	mov	r6, r7
 800be8a:	42be      	cmp	r6, r7
 800be8c:	d900      	bls.n	800be90 <__ssputs_r+0x70>
 800be8e:	463e      	mov	r6, r7
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	4632      	mov	r2, r6
 800be94:	4641      	mov	r1, r8
 800be96:	f000 faab 	bl	800c3f0 <memmove>
 800be9a:	68a3      	ldr	r3, [r4, #8]
 800be9c:	1b9b      	subs	r3, r3, r6
 800be9e:	60a3      	str	r3, [r4, #8]
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	4433      	add	r3, r6
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	2000      	movs	r0, #0
 800bea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beac:	462a      	mov	r2, r5
 800beae:	f000 fad7 	bl	800c460 <_realloc_r>
 800beb2:	4606      	mov	r6, r0
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d1e0      	bne.n	800be7a <__ssputs_r+0x5a>
 800beb8:	6921      	ldr	r1, [r4, #16]
 800beba:	4650      	mov	r0, sl
 800bebc:	f7ff feba 	bl	800bc34 <_free_r>
 800bec0:	230c      	movs	r3, #12
 800bec2:	f8ca 3000 	str.w	r3, [sl]
 800bec6:	89a3      	ldrh	r3, [r4, #12]
 800bec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800becc:	81a3      	strh	r3, [r4, #12]
 800bece:	f04f 30ff 	mov.w	r0, #4294967295
 800bed2:	e7e9      	b.n	800bea8 <__ssputs_r+0x88>

0800bed4 <_svfiprintf_r>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	4698      	mov	r8, r3
 800beda:	898b      	ldrh	r3, [r1, #12]
 800bedc:	061b      	lsls	r3, r3, #24
 800bede:	b09d      	sub	sp, #116	; 0x74
 800bee0:	4607      	mov	r7, r0
 800bee2:	460d      	mov	r5, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	d50e      	bpl.n	800bf06 <_svfiprintf_r+0x32>
 800bee8:	690b      	ldr	r3, [r1, #16]
 800beea:	b963      	cbnz	r3, 800bf06 <_svfiprintf_r+0x32>
 800beec:	2140      	movs	r1, #64	; 0x40
 800beee:	f7ff ff0b 	bl	800bd08 <_malloc_r>
 800bef2:	6028      	str	r0, [r5, #0]
 800bef4:	6128      	str	r0, [r5, #16]
 800bef6:	b920      	cbnz	r0, 800bf02 <_svfiprintf_r+0x2e>
 800bef8:	230c      	movs	r3, #12
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	e0d0      	b.n	800c0a4 <_svfiprintf_r+0x1d0>
 800bf02:	2340      	movs	r3, #64	; 0x40
 800bf04:	616b      	str	r3, [r5, #20]
 800bf06:	2300      	movs	r3, #0
 800bf08:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0a:	2320      	movs	r3, #32
 800bf0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf10:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf14:	2330      	movs	r3, #48	; 0x30
 800bf16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c0bc <_svfiprintf_r+0x1e8>
 800bf1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf1e:	f04f 0901 	mov.w	r9, #1
 800bf22:	4623      	mov	r3, r4
 800bf24:	469a      	mov	sl, r3
 800bf26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2a:	b10a      	cbz	r2, 800bf30 <_svfiprintf_r+0x5c>
 800bf2c:	2a25      	cmp	r2, #37	; 0x25
 800bf2e:	d1f9      	bne.n	800bf24 <_svfiprintf_r+0x50>
 800bf30:	ebba 0b04 	subs.w	fp, sl, r4
 800bf34:	d00b      	beq.n	800bf4e <_svfiprintf_r+0x7a>
 800bf36:	465b      	mov	r3, fp
 800bf38:	4622      	mov	r2, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff ff6f 	bl	800be20 <__ssputs_r>
 800bf42:	3001      	adds	r0, #1
 800bf44:	f000 80a9 	beq.w	800c09a <_svfiprintf_r+0x1c6>
 800bf48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf4a:	445a      	add	r2, fp
 800bf4c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 80a1 	beq.w	800c09a <_svfiprintf_r+0x1c6>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf62:	f10a 0a01 	add.w	sl, sl, #1
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	9307      	str	r3, [sp, #28]
 800bf6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf6e:	931a      	str	r3, [sp, #104]	; 0x68
 800bf70:	4654      	mov	r4, sl
 800bf72:	2205      	movs	r2, #5
 800bf74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf78:	4850      	ldr	r0, [pc, #320]	; (800c0bc <_svfiprintf_r+0x1e8>)
 800bf7a:	f7f4 f939 	bl	80001f0 <memchr>
 800bf7e:	9a04      	ldr	r2, [sp, #16]
 800bf80:	b9d8      	cbnz	r0, 800bfba <_svfiprintf_r+0xe6>
 800bf82:	06d0      	lsls	r0, r2, #27
 800bf84:	bf44      	itt	mi
 800bf86:	2320      	movmi	r3, #32
 800bf88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf8c:	0711      	lsls	r1, r2, #28
 800bf8e:	bf44      	itt	mi
 800bf90:	232b      	movmi	r3, #43	; 0x2b
 800bf92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf96:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf9c:	d015      	beq.n	800bfca <_svfiprintf_r+0xf6>
 800bf9e:	9a07      	ldr	r2, [sp, #28]
 800bfa0:	4654      	mov	r4, sl
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	f04f 0c0a 	mov.w	ip, #10
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfae:	3b30      	subs	r3, #48	; 0x30
 800bfb0:	2b09      	cmp	r3, #9
 800bfb2:	d94d      	bls.n	800c050 <_svfiprintf_r+0x17c>
 800bfb4:	b1b0      	cbz	r0, 800bfe4 <_svfiprintf_r+0x110>
 800bfb6:	9207      	str	r2, [sp, #28]
 800bfb8:	e014      	b.n	800bfe4 <_svfiprintf_r+0x110>
 800bfba:	eba0 0308 	sub.w	r3, r0, r8
 800bfbe:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	46a2      	mov	sl, r4
 800bfc8:	e7d2      	b.n	800bf70 <_svfiprintf_r+0x9c>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	1d19      	adds	r1, r3, #4
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	9103      	str	r1, [sp, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bfbb      	ittet	lt
 800bfd6:	425b      	neglt	r3, r3
 800bfd8:	f042 0202 	orrlt.w	r2, r2, #2
 800bfdc:	9307      	strge	r3, [sp, #28]
 800bfde:	9307      	strlt	r3, [sp, #28]
 800bfe0:	bfb8      	it	lt
 800bfe2:	9204      	strlt	r2, [sp, #16]
 800bfe4:	7823      	ldrb	r3, [r4, #0]
 800bfe6:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe8:	d10c      	bne.n	800c004 <_svfiprintf_r+0x130>
 800bfea:	7863      	ldrb	r3, [r4, #1]
 800bfec:	2b2a      	cmp	r3, #42	; 0x2a
 800bfee:	d134      	bne.n	800c05a <_svfiprintf_r+0x186>
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	1d1a      	adds	r2, r3, #4
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	9203      	str	r2, [sp, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bfb8      	it	lt
 800bffc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c000:	3402      	adds	r4, #2
 800c002:	9305      	str	r3, [sp, #20]
 800c004:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c0c0 <_svfiprintf_r+0x1ec>
 800c008:	7821      	ldrb	r1, [r4, #0]
 800c00a:	2203      	movs	r2, #3
 800c00c:	4650      	mov	r0, sl
 800c00e:	f7f4 f8ef 	bl	80001f0 <memchr>
 800c012:	b138      	cbz	r0, 800c024 <_svfiprintf_r+0x150>
 800c014:	9b04      	ldr	r3, [sp, #16]
 800c016:	eba0 000a 	sub.w	r0, r0, sl
 800c01a:	2240      	movs	r2, #64	; 0x40
 800c01c:	4082      	lsls	r2, r0
 800c01e:	4313      	orrs	r3, r2
 800c020:	3401      	adds	r4, #1
 800c022:	9304      	str	r3, [sp, #16]
 800c024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c028:	4826      	ldr	r0, [pc, #152]	; (800c0c4 <_svfiprintf_r+0x1f0>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02e:	2206      	movs	r2, #6
 800c030:	f7f4 f8de 	bl	80001f0 <memchr>
 800c034:	2800      	cmp	r0, #0
 800c036:	d038      	beq.n	800c0aa <_svfiprintf_r+0x1d6>
 800c038:	4b23      	ldr	r3, [pc, #140]	; (800c0c8 <_svfiprintf_r+0x1f4>)
 800c03a:	bb1b      	cbnz	r3, 800c084 <_svfiprintf_r+0x1b0>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	3307      	adds	r3, #7
 800c040:	f023 0307 	bic.w	r3, r3, #7
 800c044:	3308      	adds	r3, #8
 800c046:	9303      	str	r3, [sp, #12]
 800c048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04a:	4433      	add	r3, r6
 800c04c:	9309      	str	r3, [sp, #36]	; 0x24
 800c04e:	e768      	b.n	800bf22 <_svfiprintf_r+0x4e>
 800c050:	fb0c 3202 	mla	r2, ip, r2, r3
 800c054:	460c      	mov	r4, r1
 800c056:	2001      	movs	r0, #1
 800c058:	e7a6      	b.n	800bfa8 <_svfiprintf_r+0xd4>
 800c05a:	2300      	movs	r3, #0
 800c05c:	3401      	adds	r4, #1
 800c05e:	9305      	str	r3, [sp, #20]
 800c060:	4619      	mov	r1, r3
 800c062:	f04f 0c0a 	mov.w	ip, #10
 800c066:	4620      	mov	r0, r4
 800c068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06c:	3a30      	subs	r2, #48	; 0x30
 800c06e:	2a09      	cmp	r2, #9
 800c070:	d903      	bls.n	800c07a <_svfiprintf_r+0x1a6>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0c6      	beq.n	800c004 <_svfiprintf_r+0x130>
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	e7c4      	b.n	800c004 <_svfiprintf_r+0x130>
 800c07a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c07e:	4604      	mov	r4, r0
 800c080:	2301      	movs	r3, #1
 800c082:	e7f0      	b.n	800c066 <_svfiprintf_r+0x192>
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	462a      	mov	r2, r5
 800c08a:	4b10      	ldr	r3, [pc, #64]	; (800c0cc <_svfiprintf_r+0x1f8>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4638      	mov	r0, r7
 800c090:	f3af 8000 	nop.w
 800c094:	1c42      	adds	r2, r0, #1
 800c096:	4606      	mov	r6, r0
 800c098:	d1d6      	bne.n	800c048 <_svfiprintf_r+0x174>
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	065b      	lsls	r3, r3, #25
 800c09e:	f53f af2d 	bmi.w	800befc <_svfiprintf_r+0x28>
 800c0a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a4:	b01d      	add	sp, #116	; 0x74
 800c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0aa:	ab03      	add	r3, sp, #12
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	462a      	mov	r2, r5
 800c0b0:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <_svfiprintf_r+0x1f8>)
 800c0b2:	a904      	add	r1, sp, #16
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	f000 f879 	bl	800c1ac <_printf_i>
 800c0ba:	e7eb      	b.n	800c094 <_svfiprintf_r+0x1c0>
 800c0bc:	0800c53c 	.word	0x0800c53c
 800c0c0:	0800c542 	.word	0x0800c542
 800c0c4:	0800c546 	.word	0x0800c546
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	0800be21 	.word	0x0800be21

0800c0d0 <_printf_common>:
 800c0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	4699      	mov	r9, r3
 800c0d8:	688a      	ldr	r2, [r1, #8]
 800c0da:	690b      	ldr	r3, [r1, #16]
 800c0dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	bfb8      	it	lt
 800c0e4:	4613      	movlt	r3, r2
 800c0e6:	6033      	str	r3, [r6, #0]
 800c0e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	b10a      	cbz	r2, 800c0f6 <_printf_common+0x26>
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	6033      	str	r3, [r6, #0]
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	0699      	lsls	r1, r3, #26
 800c0fa:	bf42      	ittt	mi
 800c0fc:	6833      	ldrmi	r3, [r6, #0]
 800c0fe:	3302      	addmi	r3, #2
 800c100:	6033      	strmi	r3, [r6, #0]
 800c102:	6825      	ldr	r5, [r4, #0]
 800c104:	f015 0506 	ands.w	r5, r5, #6
 800c108:	d106      	bne.n	800c118 <_printf_common+0x48>
 800c10a:	f104 0a19 	add.w	sl, r4, #25
 800c10e:	68e3      	ldr	r3, [r4, #12]
 800c110:	6832      	ldr	r2, [r6, #0]
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	42ab      	cmp	r3, r5
 800c116:	dc26      	bgt.n	800c166 <_printf_common+0x96>
 800c118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c11c:	1e13      	subs	r3, r2, #0
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	bf18      	it	ne
 800c122:	2301      	movne	r3, #1
 800c124:	0692      	lsls	r2, r2, #26
 800c126:	d42b      	bmi.n	800c180 <_printf_common+0xb0>
 800c128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c12c:	4649      	mov	r1, r9
 800c12e:	4638      	mov	r0, r7
 800c130:	47c0      	blx	r8
 800c132:	3001      	adds	r0, #1
 800c134:	d01e      	beq.n	800c174 <_printf_common+0xa4>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	6922      	ldr	r2, [r4, #16]
 800c13a:	f003 0306 	and.w	r3, r3, #6
 800c13e:	2b04      	cmp	r3, #4
 800c140:	bf02      	ittt	eq
 800c142:	68e5      	ldreq	r5, [r4, #12]
 800c144:	6833      	ldreq	r3, [r6, #0]
 800c146:	1aed      	subeq	r5, r5, r3
 800c148:	68a3      	ldr	r3, [r4, #8]
 800c14a:	bf0c      	ite	eq
 800c14c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c150:	2500      	movne	r5, #0
 800c152:	4293      	cmp	r3, r2
 800c154:	bfc4      	itt	gt
 800c156:	1a9b      	subgt	r3, r3, r2
 800c158:	18ed      	addgt	r5, r5, r3
 800c15a:	2600      	movs	r6, #0
 800c15c:	341a      	adds	r4, #26
 800c15e:	42b5      	cmp	r5, r6
 800c160:	d11a      	bne.n	800c198 <_printf_common+0xc8>
 800c162:	2000      	movs	r0, #0
 800c164:	e008      	b.n	800c178 <_printf_common+0xa8>
 800c166:	2301      	movs	r3, #1
 800c168:	4652      	mov	r2, sl
 800c16a:	4649      	mov	r1, r9
 800c16c:	4638      	mov	r0, r7
 800c16e:	47c0      	blx	r8
 800c170:	3001      	adds	r0, #1
 800c172:	d103      	bne.n	800c17c <_printf_common+0xac>
 800c174:	f04f 30ff 	mov.w	r0, #4294967295
 800c178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17c:	3501      	adds	r5, #1
 800c17e:	e7c6      	b.n	800c10e <_printf_common+0x3e>
 800c180:	18e1      	adds	r1, r4, r3
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	2030      	movs	r0, #48	; 0x30
 800c186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c18a:	4422      	add	r2, r4
 800c18c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c194:	3302      	adds	r3, #2
 800c196:	e7c7      	b.n	800c128 <_printf_common+0x58>
 800c198:	2301      	movs	r3, #1
 800c19a:	4622      	mov	r2, r4
 800c19c:	4649      	mov	r1, r9
 800c19e:	4638      	mov	r0, r7
 800c1a0:	47c0      	blx	r8
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d0e6      	beq.n	800c174 <_printf_common+0xa4>
 800c1a6:	3601      	adds	r6, #1
 800c1a8:	e7d9      	b.n	800c15e <_printf_common+0x8e>
	...

0800c1ac <_printf_i>:
 800c1ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b0:	7e0f      	ldrb	r7, [r1, #24]
 800c1b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1b4:	2f78      	cmp	r7, #120	; 0x78
 800c1b6:	4691      	mov	r9, r2
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	469a      	mov	sl, r3
 800c1be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1c2:	d807      	bhi.n	800c1d4 <_printf_i+0x28>
 800c1c4:	2f62      	cmp	r7, #98	; 0x62
 800c1c6:	d80a      	bhi.n	800c1de <_printf_i+0x32>
 800c1c8:	2f00      	cmp	r7, #0
 800c1ca:	f000 80d4 	beq.w	800c376 <_printf_i+0x1ca>
 800c1ce:	2f58      	cmp	r7, #88	; 0x58
 800c1d0:	f000 80c0 	beq.w	800c354 <_printf_i+0x1a8>
 800c1d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1dc:	e03a      	b.n	800c254 <_printf_i+0xa8>
 800c1de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1e2:	2b15      	cmp	r3, #21
 800c1e4:	d8f6      	bhi.n	800c1d4 <_printf_i+0x28>
 800c1e6:	a101      	add	r1, pc, #4	; (adr r1, 800c1ec <_printf_i+0x40>)
 800c1e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1ec:	0800c245 	.word	0x0800c245
 800c1f0:	0800c259 	.word	0x0800c259
 800c1f4:	0800c1d5 	.word	0x0800c1d5
 800c1f8:	0800c1d5 	.word	0x0800c1d5
 800c1fc:	0800c1d5 	.word	0x0800c1d5
 800c200:	0800c1d5 	.word	0x0800c1d5
 800c204:	0800c259 	.word	0x0800c259
 800c208:	0800c1d5 	.word	0x0800c1d5
 800c20c:	0800c1d5 	.word	0x0800c1d5
 800c210:	0800c1d5 	.word	0x0800c1d5
 800c214:	0800c1d5 	.word	0x0800c1d5
 800c218:	0800c35d 	.word	0x0800c35d
 800c21c:	0800c285 	.word	0x0800c285
 800c220:	0800c317 	.word	0x0800c317
 800c224:	0800c1d5 	.word	0x0800c1d5
 800c228:	0800c1d5 	.word	0x0800c1d5
 800c22c:	0800c37f 	.word	0x0800c37f
 800c230:	0800c1d5 	.word	0x0800c1d5
 800c234:	0800c285 	.word	0x0800c285
 800c238:	0800c1d5 	.word	0x0800c1d5
 800c23c:	0800c1d5 	.word	0x0800c1d5
 800c240:	0800c31f 	.word	0x0800c31f
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	1d1a      	adds	r2, r3, #4
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	602a      	str	r2, [r5, #0]
 800c24c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c254:	2301      	movs	r3, #1
 800c256:	e09f      	b.n	800c398 <_printf_i+0x1ec>
 800c258:	6820      	ldr	r0, [r4, #0]
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	0607      	lsls	r7, r0, #24
 800c25e:	f103 0104 	add.w	r1, r3, #4
 800c262:	6029      	str	r1, [r5, #0]
 800c264:	d501      	bpl.n	800c26a <_printf_i+0xbe>
 800c266:	681e      	ldr	r6, [r3, #0]
 800c268:	e003      	b.n	800c272 <_printf_i+0xc6>
 800c26a:	0646      	lsls	r6, r0, #25
 800c26c:	d5fb      	bpl.n	800c266 <_printf_i+0xba>
 800c26e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c272:	2e00      	cmp	r6, #0
 800c274:	da03      	bge.n	800c27e <_printf_i+0xd2>
 800c276:	232d      	movs	r3, #45	; 0x2d
 800c278:	4276      	negs	r6, r6
 800c27a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c27e:	485a      	ldr	r0, [pc, #360]	; (800c3e8 <_printf_i+0x23c>)
 800c280:	230a      	movs	r3, #10
 800c282:	e012      	b.n	800c2aa <_printf_i+0xfe>
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	6820      	ldr	r0, [r4, #0]
 800c288:	1d19      	adds	r1, r3, #4
 800c28a:	6029      	str	r1, [r5, #0]
 800c28c:	0605      	lsls	r5, r0, #24
 800c28e:	d501      	bpl.n	800c294 <_printf_i+0xe8>
 800c290:	681e      	ldr	r6, [r3, #0]
 800c292:	e002      	b.n	800c29a <_printf_i+0xee>
 800c294:	0641      	lsls	r1, r0, #25
 800c296:	d5fb      	bpl.n	800c290 <_printf_i+0xe4>
 800c298:	881e      	ldrh	r6, [r3, #0]
 800c29a:	4853      	ldr	r0, [pc, #332]	; (800c3e8 <_printf_i+0x23c>)
 800c29c:	2f6f      	cmp	r7, #111	; 0x6f
 800c29e:	bf0c      	ite	eq
 800c2a0:	2308      	moveq	r3, #8
 800c2a2:	230a      	movne	r3, #10
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2aa:	6865      	ldr	r5, [r4, #4]
 800c2ac:	60a5      	str	r5, [r4, #8]
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	bfa2      	ittt	ge
 800c2b2:	6821      	ldrge	r1, [r4, #0]
 800c2b4:	f021 0104 	bicge.w	r1, r1, #4
 800c2b8:	6021      	strge	r1, [r4, #0]
 800c2ba:	b90e      	cbnz	r6, 800c2c0 <_printf_i+0x114>
 800c2bc:	2d00      	cmp	r5, #0
 800c2be:	d04b      	beq.n	800c358 <_printf_i+0x1ac>
 800c2c0:	4615      	mov	r5, r2
 800c2c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2c6:	fb03 6711 	mls	r7, r3, r1, r6
 800c2ca:	5dc7      	ldrb	r7, [r0, r7]
 800c2cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2d0:	4637      	mov	r7, r6
 800c2d2:	42bb      	cmp	r3, r7
 800c2d4:	460e      	mov	r6, r1
 800c2d6:	d9f4      	bls.n	800c2c2 <_printf_i+0x116>
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d10b      	bne.n	800c2f4 <_printf_i+0x148>
 800c2dc:	6823      	ldr	r3, [r4, #0]
 800c2de:	07de      	lsls	r6, r3, #31
 800c2e0:	d508      	bpl.n	800c2f4 <_printf_i+0x148>
 800c2e2:	6923      	ldr	r3, [r4, #16]
 800c2e4:	6861      	ldr	r1, [r4, #4]
 800c2e6:	4299      	cmp	r1, r3
 800c2e8:	bfde      	ittt	le
 800c2ea:	2330      	movle	r3, #48	; 0x30
 800c2ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2f4:	1b52      	subs	r2, r2, r5
 800c2f6:	6122      	str	r2, [r4, #16]
 800c2f8:	f8cd a000 	str.w	sl, [sp]
 800c2fc:	464b      	mov	r3, r9
 800c2fe:	aa03      	add	r2, sp, #12
 800c300:	4621      	mov	r1, r4
 800c302:	4640      	mov	r0, r8
 800c304:	f7ff fee4 	bl	800c0d0 <_printf_common>
 800c308:	3001      	adds	r0, #1
 800c30a:	d14a      	bne.n	800c3a2 <_printf_i+0x1f6>
 800c30c:	f04f 30ff 	mov.w	r0, #4294967295
 800c310:	b004      	add	sp, #16
 800c312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	f043 0320 	orr.w	r3, r3, #32
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	4833      	ldr	r0, [pc, #204]	; (800c3ec <_printf_i+0x240>)
 800c320:	2778      	movs	r7, #120	; 0x78
 800c322:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	6829      	ldr	r1, [r5, #0]
 800c32a:	061f      	lsls	r7, r3, #24
 800c32c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c330:	d402      	bmi.n	800c338 <_printf_i+0x18c>
 800c332:	065f      	lsls	r7, r3, #25
 800c334:	bf48      	it	mi
 800c336:	b2b6      	uxthmi	r6, r6
 800c338:	07df      	lsls	r7, r3, #31
 800c33a:	bf48      	it	mi
 800c33c:	f043 0320 	orrmi.w	r3, r3, #32
 800c340:	6029      	str	r1, [r5, #0]
 800c342:	bf48      	it	mi
 800c344:	6023      	strmi	r3, [r4, #0]
 800c346:	b91e      	cbnz	r6, 800c350 <_printf_i+0x1a4>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	f023 0320 	bic.w	r3, r3, #32
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	2310      	movs	r3, #16
 800c352:	e7a7      	b.n	800c2a4 <_printf_i+0xf8>
 800c354:	4824      	ldr	r0, [pc, #144]	; (800c3e8 <_printf_i+0x23c>)
 800c356:	e7e4      	b.n	800c322 <_printf_i+0x176>
 800c358:	4615      	mov	r5, r2
 800c35a:	e7bd      	b.n	800c2d8 <_printf_i+0x12c>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	6826      	ldr	r6, [r4, #0]
 800c360:	6961      	ldr	r1, [r4, #20]
 800c362:	1d18      	adds	r0, r3, #4
 800c364:	6028      	str	r0, [r5, #0]
 800c366:	0635      	lsls	r5, r6, #24
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	d501      	bpl.n	800c370 <_printf_i+0x1c4>
 800c36c:	6019      	str	r1, [r3, #0]
 800c36e:	e002      	b.n	800c376 <_printf_i+0x1ca>
 800c370:	0670      	lsls	r0, r6, #25
 800c372:	d5fb      	bpl.n	800c36c <_printf_i+0x1c0>
 800c374:	8019      	strh	r1, [r3, #0]
 800c376:	2300      	movs	r3, #0
 800c378:	6123      	str	r3, [r4, #16]
 800c37a:	4615      	mov	r5, r2
 800c37c:	e7bc      	b.n	800c2f8 <_printf_i+0x14c>
 800c37e:	682b      	ldr	r3, [r5, #0]
 800c380:	1d1a      	adds	r2, r3, #4
 800c382:	602a      	str	r2, [r5, #0]
 800c384:	681d      	ldr	r5, [r3, #0]
 800c386:	6862      	ldr	r2, [r4, #4]
 800c388:	2100      	movs	r1, #0
 800c38a:	4628      	mov	r0, r5
 800c38c:	f7f3 ff30 	bl	80001f0 <memchr>
 800c390:	b108      	cbz	r0, 800c396 <_printf_i+0x1ea>
 800c392:	1b40      	subs	r0, r0, r5
 800c394:	6060      	str	r0, [r4, #4]
 800c396:	6863      	ldr	r3, [r4, #4]
 800c398:	6123      	str	r3, [r4, #16]
 800c39a:	2300      	movs	r3, #0
 800c39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3a0:	e7aa      	b.n	800c2f8 <_printf_i+0x14c>
 800c3a2:	6923      	ldr	r3, [r4, #16]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	4640      	mov	r0, r8
 800c3aa:	47d0      	blx	sl
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d0ad      	beq.n	800c30c <_printf_i+0x160>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	079b      	lsls	r3, r3, #30
 800c3b4:	d413      	bmi.n	800c3de <_printf_i+0x232>
 800c3b6:	68e0      	ldr	r0, [r4, #12]
 800c3b8:	9b03      	ldr	r3, [sp, #12]
 800c3ba:	4298      	cmp	r0, r3
 800c3bc:	bfb8      	it	lt
 800c3be:	4618      	movlt	r0, r3
 800c3c0:	e7a6      	b.n	800c310 <_printf_i+0x164>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	4640      	mov	r0, r8
 800c3ca:	47d0      	blx	sl
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d09d      	beq.n	800c30c <_printf_i+0x160>
 800c3d0:	3501      	adds	r5, #1
 800c3d2:	68e3      	ldr	r3, [r4, #12]
 800c3d4:	9903      	ldr	r1, [sp, #12]
 800c3d6:	1a5b      	subs	r3, r3, r1
 800c3d8:	42ab      	cmp	r3, r5
 800c3da:	dcf2      	bgt.n	800c3c2 <_printf_i+0x216>
 800c3dc:	e7eb      	b.n	800c3b6 <_printf_i+0x20a>
 800c3de:	2500      	movs	r5, #0
 800c3e0:	f104 0619 	add.w	r6, r4, #25
 800c3e4:	e7f5      	b.n	800c3d2 <_printf_i+0x226>
 800c3e6:	bf00      	nop
 800c3e8:	0800c54d 	.word	0x0800c54d
 800c3ec:	0800c55e 	.word	0x0800c55e

0800c3f0 <memmove>:
 800c3f0:	4288      	cmp	r0, r1
 800c3f2:	b510      	push	{r4, lr}
 800c3f4:	eb01 0402 	add.w	r4, r1, r2
 800c3f8:	d902      	bls.n	800c400 <memmove+0x10>
 800c3fa:	4284      	cmp	r4, r0
 800c3fc:	4623      	mov	r3, r4
 800c3fe:	d807      	bhi.n	800c410 <memmove+0x20>
 800c400:	1e43      	subs	r3, r0, #1
 800c402:	42a1      	cmp	r1, r4
 800c404:	d008      	beq.n	800c418 <memmove+0x28>
 800c406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c40a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c40e:	e7f8      	b.n	800c402 <memmove+0x12>
 800c410:	4402      	add	r2, r0
 800c412:	4601      	mov	r1, r0
 800c414:	428a      	cmp	r2, r1
 800c416:	d100      	bne.n	800c41a <memmove+0x2a>
 800c418:	bd10      	pop	{r4, pc}
 800c41a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c41e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c422:	e7f7      	b.n	800c414 <memmove+0x24>

0800c424 <_sbrk_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d06      	ldr	r5, [pc, #24]	; (800c440 <_sbrk_r+0x1c>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	f7fc ffc0 	bl	80093b4 <_sbrk>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_sbrk_r+0x1a>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_sbrk_r+0x1a>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	200017b4 	.word	0x200017b4

0800c444 <memcpy>:
 800c444:	440a      	add	r2, r1
 800c446:	4291      	cmp	r1, r2
 800c448:	f100 33ff 	add.w	r3, r0, #4294967295
 800c44c:	d100      	bne.n	800c450 <memcpy+0xc>
 800c44e:	4770      	bx	lr
 800c450:	b510      	push	{r4, lr}
 800c452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c45a:	4291      	cmp	r1, r2
 800c45c:	d1f9      	bne.n	800c452 <memcpy+0xe>
 800c45e:	bd10      	pop	{r4, pc}

0800c460 <_realloc_r>:
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	4680      	mov	r8, r0
 800c466:	4614      	mov	r4, r2
 800c468:	460e      	mov	r6, r1
 800c46a:	b921      	cbnz	r1, 800c476 <_realloc_r+0x16>
 800c46c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c470:	4611      	mov	r1, r2
 800c472:	f7ff bc49 	b.w	800bd08 <_malloc_r>
 800c476:	b92a      	cbnz	r2, 800c484 <_realloc_r+0x24>
 800c478:	f7ff fbdc 	bl	800bc34 <_free_r>
 800c47c:	4625      	mov	r5, r4
 800c47e:	4628      	mov	r0, r5
 800c480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c484:	f000 f81b 	bl	800c4be <_malloc_usable_size_r>
 800c488:	4284      	cmp	r4, r0
 800c48a:	4607      	mov	r7, r0
 800c48c:	d802      	bhi.n	800c494 <_realloc_r+0x34>
 800c48e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c492:	d812      	bhi.n	800c4ba <_realloc_r+0x5a>
 800c494:	4621      	mov	r1, r4
 800c496:	4640      	mov	r0, r8
 800c498:	f7ff fc36 	bl	800bd08 <_malloc_r>
 800c49c:	4605      	mov	r5, r0
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d0ed      	beq.n	800c47e <_realloc_r+0x1e>
 800c4a2:	42bc      	cmp	r4, r7
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	bf28      	it	cs
 800c4aa:	463a      	movcs	r2, r7
 800c4ac:	f7ff ffca 	bl	800c444 <memcpy>
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	f7ff fbbe 	bl	800bc34 <_free_r>
 800c4b8:	e7e1      	b.n	800c47e <_realloc_r+0x1e>
 800c4ba:	4635      	mov	r5, r6
 800c4bc:	e7df      	b.n	800c47e <_realloc_r+0x1e>

0800c4be <_malloc_usable_size_r>:
 800c4be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c2:	1f18      	subs	r0, r3, #4
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	bfbc      	itt	lt
 800c4c8:	580b      	ldrlt	r3, [r1, r0]
 800c4ca:	18c0      	addlt	r0, r0, r3
 800c4cc:	4770      	bx	lr
	...

0800c4d0 <_init>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	bf00      	nop
 800c4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d6:	bc08      	pop	{r3}
 800c4d8:	469e      	mov	lr, r3
 800c4da:	4770      	bx	lr

0800c4dc <_fini>:
 800c4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4de:	bf00      	nop
 800c4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4e2:	bc08      	pop	{r3}
 800c4e4:	469e      	mov	lr, r3
 800c4e6:	4770      	bx	lr
