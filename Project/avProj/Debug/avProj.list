
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d250  0800d250  0001d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d318  0800d318  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800d318  0800d318  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d318  0800d318  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d318  0800d318  0001d318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d31c  0800d31c  0001d31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00001774  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200017dc  200017dc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d4d7  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004442  00000000  00000000  0003d5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ac0  00000000  00000000  000419f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001489  00000000  00000000  000434b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254cb  00000000  00000000  00044939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002d9b6  00000000  00000000  00069e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9326  00000000  00000000  000977ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007260  00000000  00000000  00170ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00177d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d238 	.word	0x0800d238

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800d238 	.word	0x0800d238

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_frsub>:
 8000a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	e002      	b.n	8000a78 <__addsf3>
 8000a72:	bf00      	nop

08000a74 <__aeabi_fsub>:
 8000a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a78 <__addsf3>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	bf1f      	itttt	ne
 8000a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a80:	ea92 0f03 	teqne	r2, r3
 8000a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8c:	d06a      	beq.n	8000b64 <__addsf3+0xec>
 8000a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a96:	bfc1      	itttt	gt
 8000a98:	18d2      	addgt	r2, r2, r3
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	4048      	eorgt	r0, r1
 8000a9e:	4041      	eorgt	r1, r0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	bf88      	it	hi
 8000aa8:	4770      	bxhi	lr
 8000aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4249      	negne	r1, r1
 8000aca:	ea92 0f03 	teq	r2, r3
 8000ace:	d03f      	beq.n	8000b50 <__addsf3+0xd8>
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad8:	eb10 000c 	adds.w	r0, r0, ip
 8000adc:	f1c3 0320 	rsb	r3, r3, #32
 8000ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__addsf3+0x78>
 8000aea:	4249      	negs	r1, r1
 8000aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af4:	d313      	bcc.n	8000b1e <__addsf3+0xa6>
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d306      	bcc.n	8000b0a <__addsf3+0x92>
 8000afc:	0840      	lsrs	r0, r0, #1
 8000afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b02:	f102 0201 	add.w	r2, r2, #1
 8000b06:	2afe      	cmp	r2, #254	; 0xfe
 8000b08:	d251      	bcs.n	8000bae <__addsf3+0x136>
 8000b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b12:	bf08      	it	eq
 8000b14:	f020 0001 	biceq.w	r0, r0, #1
 8000b18:	ea40 0003 	orr.w	r0, r0, r3
 8000b1c:	4770      	bx	lr
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	eb40 0000 	adc.w	r0, r0, r0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	bf28      	it	cs
 8000b28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b2c:	d2ed      	bcs.n	8000b0a <__addsf3+0x92>
 8000b2e:	fab0 fc80 	clz	ip, r0
 8000b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b36:	ebb2 020c 	subs.w	r2, r2, ip
 8000b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3e:	bfaa      	itet	ge
 8000b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b44:	4252      	neglt	r2, r2
 8000b46:	4318      	orrge	r0, r3
 8000b48:	bfbc      	itt	lt
 8000b4a:	40d0      	lsrlt	r0, r2
 8000b4c:	4318      	orrlt	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	f092 0f00 	teq	r2, #0
 8000b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b58:	bf06      	itte	eq
 8000b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5e:	3201      	addeq	r2, #1
 8000b60:	3b01      	subne	r3, #1
 8000b62:	e7b5      	b.n	8000ad0 <__addsf3+0x58>
 8000b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b6c:	bf18      	it	ne
 8000b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b72:	d021      	beq.n	8000bb8 <__addsf3+0x140>
 8000b74:	ea92 0f03 	teq	r2, r3
 8000b78:	d004      	beq.n	8000b84 <__addsf3+0x10c>
 8000b7a:	f092 0f00 	teq	r2, #0
 8000b7e:	bf08      	it	eq
 8000b80:	4608      	moveq	r0, r1
 8000b82:	4770      	bx	lr
 8000b84:	ea90 0f01 	teq	r0, r1
 8000b88:	bf1c      	itt	ne
 8000b8a:	2000      	movne	r0, #0
 8000b8c:	4770      	bxne	lr
 8000b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b92:	d104      	bne.n	8000b9e <__addsf3+0x126>
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	bf28      	it	cs
 8000b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ba2:	bf3c      	itt	cc
 8000ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bxcc	lr
 8000baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bbc:	bf16      	itet	ne
 8000bbe:	4608      	movne	r0, r1
 8000bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc4:	4601      	movne	r1, r0
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	bf06      	itte	eq
 8000bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bce:	ea90 0f01 	teqeq	r0, r1
 8000bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_ui2f>:
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e004      	b.n	8000be8 <__aeabi_i2f+0x8>
 8000bde:	bf00      	nop

08000be0 <__aeabi_i2f>:
 8000be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	bf48      	it	mi
 8000be6:	4240      	negmi	r0, r0
 8000be8:	ea5f 0c00 	movs.w	ip, r0
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	e01c      	b.n	8000c36 <__aeabi_l2f+0x2a>

08000bfc <__aeabi_ul2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e00a      	b.n	8000c20 <__aeabi_l2f+0x14>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_l2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_l2f+0x14>
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	ea5f 0c01 	movs.w	ip, r1
 8000c24:	bf02      	ittt	eq
 8000c26:	4684      	moveq	ip, r0
 8000c28:	4601      	moveq	r1, r0
 8000c2a:	2000      	moveq	r0, #0
 8000c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c30:	bf08      	it	eq
 8000c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c3a:	fabc f28c 	clz	r2, ip
 8000c3e:	3a08      	subs	r2, #8
 8000c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c44:	db10      	blt.n	8000c68 <__aeabi_l2f+0x5c>
 8000c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c58:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f102 0220 	add.w	r2, r2, #32
 8000c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c78:	fa21 f202 	lsr.w	r2, r1, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_fmul>:
 8000c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c90:	bf1e      	ittt	ne
 8000c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c96:	ea92 0f0c 	teqne	r2, ip
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d06f      	beq.n	8000d80 <__aeabi_fmul+0xf8>
 8000ca0:	441a      	add	r2, r3
 8000ca2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca6:	0240      	lsls	r0, r0, #9
 8000ca8:	bf18      	it	ne
 8000caa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cae:	d01e      	beq.n	8000cee <__aeabi_fmul+0x66>
 8000cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc8:	bf3e      	ittt	cc
 8000cca:	0049      	lslcc	r1, r1, #1
 8000ccc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd0:	005b      	lslcc	r3, r3, #1
 8000cd2:	ea40 0001 	orr.w	r0, r0, r1
 8000cd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cda:	2afd      	cmp	r2, #253	; 0xfd
 8000cdc:	d81d      	bhi.n	8000d1a <__aeabi_fmul+0x92>
 8000cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf6:	bf08      	it	eq
 8000cf8:	0249      	lsleq	r1, r1, #9
 8000cfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	bfc2      	ittt	gt
 8000d06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0e:	4770      	bxgt	lr
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	dc5d      	bgt.n	8000dd8 <__aeabi_fmul+0x150>
 8000d1c:	f112 0f19 	cmn.w	r2, #25
 8000d20:	bfdc      	itt	le
 8000d22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d26:	4770      	bxle	lr
 8000d28:	f1c2 0200 	rsb	r2, r2, #0
 8000d2c:	0041      	lsls	r1, r0, #1
 8000d2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d32:	f1c2 0220 	rsb	r2, r2, #32
 8000d36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3e:	f140 0000 	adc.w	r0, r0, #0
 8000d42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d46:	bf08      	it	eq
 8000d48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4c:	4770      	bx	lr
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0040      	lsleq	r0, r0, #1
 8000d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5e:	3a01      	subeq	r2, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xce>
 8000d62:	ea40 000c 	orr.w	r0, r0, ip
 8000d66:	f093 0f00 	teq	r3, #0
 8000d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0049      	lsleq	r1, r1, #1
 8000d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d76:	3b01      	subeq	r3, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xe6>
 8000d7a:	ea41 010c 	orr.w	r1, r1, ip
 8000d7e:	e78f      	b.n	8000ca0 <__aeabi_fmul+0x18>
 8000d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	bf18      	it	ne
 8000d8a:	ea93 0f0c 	teqne	r3, ip
 8000d8e:	d00a      	beq.n	8000da6 <__aeabi_fmul+0x11e>
 8000d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d94:	bf18      	it	ne
 8000d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	d1d8      	bne.n	8000d4e <__aeabi_fmul+0xc6>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	bf17      	itett	ne
 8000dac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db0:	4608      	moveq	r0, r1
 8000db2:	f091 0f00 	teqne	r1, #0
 8000db6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dba:	d014      	beq.n	8000de6 <__aeabi_fmul+0x15e>
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d101      	bne.n	8000dc6 <__aeabi_fmul+0x13e>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	d10f      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dc6:	ea93 0f0c 	teq	r3, ip
 8000dca:	d103      	bne.n	8000dd4 <__aeabi_fmul+0x14c>
 8000dcc:	024b      	lsls	r3, r1, #9
 8000dce:	bf18      	it	ne
 8000dd0:	4608      	movne	r0, r1
 8000dd2:	d108      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dd4:	ea80 0001 	eor.w	r0, r0, r1
 8000dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bx	lr
 8000de6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fdiv>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d069      	beq.n	8000edc <__aeabi_fdiv+0xec>
 8000e08:	eba2 0203 	sub.w	r2, r2, r3
 8000e0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e16:	d037      	beq.n	8000e88 <__aeabi_fdiv+0x98>
 8000e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	bf38      	it	cc
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e36:	428b      	cmp	r3, r1
 8000e38:	bf24      	itt	cs
 8000e3a:	1a5b      	subcs	r3, r3, r1
 8000e3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e44:	bf24      	itt	cs
 8000e46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e52:	bf24      	itt	cs
 8000e54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e72:	d1e0      	bne.n	8000e36 <__aeabi_fdiv+0x46>
 8000e74:	2afd      	cmp	r2, #253	; 0xfd
 8000e76:	f63f af50 	bhi.w	8000d1a <__aeabi_fmul+0x92>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e80:	bf08      	it	eq
 8000e82:	f020 0001 	biceq.w	r0, r0, #1
 8000e86:	4770      	bx	lr
 8000e88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e90:	327f      	adds	r2, #127	; 0x7f
 8000e92:	bfc2      	ittt	gt
 8000e94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9c:	4770      	bxgt	lr
 8000e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	e737      	b.n	8000d1a <__aeabi_fmul+0x92>
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xc2>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xda>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e795      	b.n	8000e08 <__aeabi_fdiv+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	d108      	bne.n	8000ef8 <__aeabi_fdiv+0x108>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	f47f af7d 	bne.w	8000de6 <__aeabi_fmul+0x15e>
 8000eec:	ea93 0f0c 	teq	r3, ip
 8000ef0:	f47f af70 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e776      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	d104      	bne.n	8000f08 <__aeabi_fdiv+0x118>
 8000efe:	024b      	lsls	r3, r1, #9
 8000f00:	f43f af4c 	beq.w	8000d9c <__aeabi_fmul+0x114>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e76e      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f0c:	bf18      	it	ne
 8000f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	d1ca      	bne.n	8000eaa <__aeabi_fdiv+0xba>
 8000f14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f18:	f47f af5c 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000f1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f20:	f47f af3c 	bne.w	8000d9c <__aeabi_fmul+0x114>
 8000f24:	e75f      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f26:	bf00      	nop

08000f28 <__gesf2>:
 8000f28:	f04f 3cff 	mov.w	ip, #4294967295
 8000f2c:	e006      	b.n	8000f3c <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__lesf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	e002      	b.n	8000f3c <__cmpsf2+0x4>
 8000f36:	bf00      	nop

08000f38 <__cmpsf2>:
 8000f38:	f04f 0c01 	mov.w	ip, #1
 8000f3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f4c:	bf18      	it	ne
 8000f4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f52:	d011      	beq.n	8000f78 <__cmpsf2+0x40>
 8000f54:	b001      	add	sp, #4
 8000f56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f5a:	bf18      	it	ne
 8000f5c:	ea90 0f01 	teqne	r0, r1
 8000f60:	bf58      	it	pl
 8000f62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f66:	bf88      	it	hi
 8000f68:	17c8      	asrhi	r0, r1, #31
 8000f6a:	bf38      	it	cc
 8000f6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f70:	bf18      	it	ne
 8000f72:	f040 0001 	orrne.w	r0, r0, #1
 8000f76:	4770      	bx	lr
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	d102      	bne.n	8000f84 <__cmpsf2+0x4c>
 8000f7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f82:	d105      	bne.n	8000f90 <__cmpsf2+0x58>
 8000f84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f88:	d1e4      	bne.n	8000f54 <__cmpsf2+0x1c>
 8000f8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f8e:	d0e1      	beq.n	8000f54 <__cmpsf2+0x1c>
 8000f90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <__aeabi_cfrcmple>:
 8000f98:	4684      	mov	ip, r0
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	4661      	mov	r1, ip
 8000f9e:	e7ff      	b.n	8000fa0 <__aeabi_cfcmpeq>

08000fa0 <__aeabi_cfcmpeq>:
 8000fa0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fa2:	f7ff ffc9 	bl	8000f38 <__cmpsf2>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf48      	it	mi
 8000faa:	f110 0f00 	cmnmi.w	r0, #0
 8000fae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fb0 <__aeabi_fcmpeq>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff fff4 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fb8:	bf0c      	ite	eq
 8000fba:	2001      	moveq	r0, #1
 8000fbc:	2000      	movne	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmplt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffea 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmple>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffe0 	bl	8000fa0 <__aeabi_cfcmpeq>
 8000fe0:	bf94      	ite	ls
 8000fe2:	2001      	movls	r0, #1
 8000fe4:	2000      	movhi	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmpge>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffd2 	bl	8000f98 <__aeabi_cfrcmple>
 8000ff4:	bf94      	ite	ls
 8000ff6:	2001      	movls	r0, #1
 8000ff8:	2000      	movhi	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmpgt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffc8 	bl	8000f98 <__aeabi_cfrcmple>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_f2uiz>:
 8001014:	0042      	lsls	r2, r0, #1
 8001016:	d20e      	bcs.n	8001036 <__aeabi_f2uiz+0x22>
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800101c:	d30b      	bcc.n	8001036 <__aeabi_f2uiz+0x22>
 800101e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d409      	bmi.n	800103c <__aeabi_f2uiz+0x28>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001030:	fa23 f002 	lsr.w	r0, r3, r2
 8001034:	4770      	bx	lr
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4770      	bx	lr
 800103c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001040:	d101      	bne.n	8001046 <__aeabi_f2uiz+0x32>
 8001042:	0242      	lsls	r2, r0, #9
 8001044:	d102      	bne.n	800104c <__aeabi_f2uiz+0x38>
 8001046:	f04f 30ff 	mov.w	r0, #4294967295
 800104a:	4770      	bx	lr
 800104c:	f04f 0000 	mov.w	r0, #0
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <Access_Init+0x14>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000084 	.word	0x20000084

0800106c <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <Brakes_OnAutobrakesEnabled>:
/**
  * @brief	Triggers the actions for Autobrakes enabled state
  * @return	None
  */
static void Brakes_OnAutobrakesEnabled(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Check critical distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Enable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <Brakes_OnAutobrakesEnabled+0x60>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4916      	ldr	r1, [pc, #88]	; (80010dc <Brakes_OnAutobrakesEnabled+0x64>)
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9e 	bl	8000fc4 <__aeabi_fcmplt>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00f      	beq.n	80010ae <Brakes_OnAutobrakesEnabled+0x36>
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b09      	cmp	r3, #9
 8001094:	d90b      	bls.n	80010ae <Brakes_OnAutobrakesEnabled+0x36>
	{
		/* Set Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = TRUE;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <Brakes_OnAutobrakesEnabled+0x6c>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		/* Set Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <Brakes_OnAutobrakesEnabled+0x6c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00b fad2 	bl	800c650 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes enable counter */
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
	}
}
 80010ac:	e012      	b.n	80010d4 <Brakes_OnAutobrakesEnabled+0x5c>
	else if (g_Brakes_Ultrasonic_Distance_cm_f32 < BRAKES_CRITICAL_DISTANCE_CM_F32)
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <Brakes_OnAutobrakesEnabled+0x60>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	490a      	ldr	r1, [pc, #40]	; (80010dc <Brakes_OnAutobrakesEnabled+0x64>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff85 	bl	8000fc4 <__aeabi_fcmplt>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <Brakes_OnAutobrakesEnabled+0x56>
		g_Brakes_Autobrakes_Enable_Cnt_u8++;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	e002      	b.n	80010d4 <Brakes_OnAutobrakesEnabled+0x5c>
		g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <Brakes_OnAutobrakesEnabled+0x68>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	41f00000 	.word	0x41f00000
 80010e0:	20000094 	.word	0x20000094
 80010e4:	20000092 	.word	0x20000092

080010e8 <Brakes_OnAutobrakesDisabled>:
/**
  * @brief	Triggers the actions for Autobrakes disabled state
  * @return	None
  */
static void Brakes_OnAutobrakesDisabled(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	/* Check Autobrakes disable distance */
	if((g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32) && (g_Brakes_Autobrakes_Disable_Cnt_u8 >= BRAKES_AUTOBRAKES_STATE_CNT_U8))
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <Brakes_OnAutobrakesDisabled+0x60>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4916      	ldr	r1, [pc, #88]	; (800114c <Brakes_OnAutobrakesDisabled+0x64>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff84 	bl	8001000 <__aeabi_fcmpgt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00f      	beq.n	800111e <Brakes_OnAutobrakesDisabled+0x36>
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b09      	cmp	r3, #9
 8001104:	d90b      	bls.n	800111e <Brakes_OnAutobrakesDisabled+0x36>
	{
		/* Reset Autobrakes flag */
		g_Brakes_Autobrakes_Status_b = FALSE;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <Brakes_OnAutobrakesDisabled+0x6c>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		/* Reset Autobrakes */
		Rte_Write_Autobrakes_State_b(g_Brakes_Autobrakes_Status_b);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Brakes_OnAutobrakesDisabled+0x6c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f00b fa9a 	bl	800c650 <Rte_Write_DIO_Autobrakes_State_b>
	else
	{
		/* Reset Autobrakes disable counter */
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
	}
}
 800111c:	e012      	b.n	8001144 <Brakes_OnAutobrakesDisabled+0x5c>
	else if(g_Brakes_Ultrasonic_Distance_cm_f32 > BRAKES_AUTOBRAKES_DISABLE_DISTANCE_CM_F32)
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <Brakes_OnAutobrakesDisabled+0x60>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	490a      	ldr	r1, [pc, #40]	; (800114c <Brakes_OnAutobrakesDisabled+0x64>)
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff6b 	bl	8001000 <__aeabi_fcmpgt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <Brakes_OnAutobrakesDisabled+0x56>
		g_Brakes_Autobrakes_Disable_Cnt_u8++;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	e002      	b.n	8001144 <Brakes_OnAutobrakesDisabled+0x5c>
		g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <Brakes_OnAutobrakesDisabled+0x68>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000008c 	.word	0x2000008c
 800114c:	428c0000 	.word	0x428c0000
 8001150:	20000093 	.word	0x20000093
 8001154:	20000092 	.word	0x20000092

08001158 <Brakes_OnDistance>:

static uint8 Brakes_OnDistance(float32 distance)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 8001160:	4942      	ldr	r1, [pc, #264]	; (800126c <Brakes_OnDistance+0x114>)
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff38 	bl	8000fd8 <__aeabi_fcmple>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <Brakes_OnDistance+0x2e>
 800116e:	4b40      	ldr	r3, [pc, #256]	; (8001270 <Brakes_OnDistance+0x118>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b09      	cmp	r3, #9
 8001174:	d807      	bhi.n	8001186 <Brakes_OnDistance+0x2e>
	{
		g_Informative_Dist_Status_Cnt_u8++;
 8001176:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <Brakes_OnDistance+0x118>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <Brakes_OnDistance+0x118>)
 8001180:	701a      	strb	r2, [r3, #0]
		return 3;
 8001182:	2303      	movs	r3, #3
 8001184:	e06d      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if(distance <= BRAKES_CRITICAL_DISTANCE_CM_F32 && g_Informative_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 8001186:	4939      	ldr	r1, [pc, #228]	; (800126c <Brakes_OnDistance+0x114>)
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff25 	bl	8000fd8 <__aeabi_fcmple>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <Brakes_OnDistance+0x54>
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <Brakes_OnDistance+0x118>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b09      	cmp	r3, #9
 800119a:	d907      	bls.n	80011ac <Brakes_OnDistance+0x54>
	{
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <Brakes_OnDistance+0x11c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <Brakes_OnDistance+0x120>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
		return 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	e05a      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 80011ac:	492f      	ldr	r1, [pc, #188]	; (800126c <Brakes_OnDistance+0x114>)
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff26 	bl	8001000 <__aeabi_fcmpgt>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d012      	beq.n	80011e0 <Brakes_OnDistance+0x88>
 80011ba:	4930      	ldr	r1, [pc, #192]	; (800127c <Brakes_OnDistance+0x124>)
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff0b 	bl	8000fd8 <__aeabi_fcmple>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00b      	beq.n	80011e0 <Brakes_OnDistance+0x88>
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d807      	bhi.n	80011e0 <Brakes_OnDistance+0x88>
	{
		g_Warning_Dist_Status_Cnt_u8++;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011da:	701a      	strb	r2, [r3, #0]
		return 3;
 80011dc:	2303      	movs	r3, #3
 80011de:	e040      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if((BRAKES_CRITICAL_DISTANCE_CM_F32 < distance) && (distance <= BRAKES_WARNING_DISTANCE_CM_F32) && g_Warning_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 80011e0:	4922      	ldr	r1, [pc, #136]	; (800126c <Brakes_OnDistance+0x114>)
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff0c 	bl	8001000 <__aeabi_fcmpgt>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d012      	beq.n	8001214 <Brakes_OnDistance+0xbc>
 80011ee:	4923      	ldr	r1, [pc, #140]	; (800127c <Brakes_OnDistance+0x124>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fef1 	bl	8000fd8 <__aeabi_fcmple>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <Brakes_OnDistance+0xbc>
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <Brakes_OnDistance+0x11c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b09      	cmp	r3, #9
 8001202:	d907      	bls.n	8001214 <Brakes_OnDistance+0xbc>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <Brakes_OnDistance+0x118>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		g_Critical_Dist_Status_Cnt_u8 = 0u;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <Brakes_OnDistance+0x120>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
		return 1;
 8001210:	2301      	movs	r3, #1
 8001212:	e026      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 < BRAKES_LED_STATE_CNT_U8)
 8001214:	4919      	ldr	r1, [pc, #100]	; (800127c <Brakes_OnDistance+0x124>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fef2 	bl	8001000 <__aeabi_fcmpgt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <Brakes_OnDistance+0xe2>
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <Brakes_OnDistance+0x120>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b09      	cmp	r3, #9
 8001228:	d807      	bhi.n	800123a <Brakes_OnDistance+0xe2>
	{
		g_Critical_Dist_Status_Cnt_u8++;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <Brakes_OnDistance+0x120>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <Brakes_OnDistance+0x120>)
 8001234:	701a      	strb	r2, [r3, #0]
		return 3;
 8001236:	2303      	movs	r3, #3
 8001238:	e013      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else if(BRAKES_WARNING_DISTANCE_CM_F32 < distance && g_Critical_Dist_Status_Cnt_u8 >= BRAKES_LED_STATE_CNT_U8)
 800123a:	4910      	ldr	r1, [pc, #64]	; (800127c <Brakes_OnDistance+0x124>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fedf 	bl	8001000 <__aeabi_fcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <Brakes_OnDistance+0x108>
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <Brakes_OnDistance+0x120>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b09      	cmp	r3, #9
 800124e:	d907      	bls.n	8001260 <Brakes_OnDistance+0x108>
	{
		g_Informative_Dist_Status_Cnt_u8 = 0u;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <Brakes_OnDistance+0x118>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
		g_Warning_Dist_Status_Cnt_u8 = 0u;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <Brakes_OnDistance+0x11c>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
		return 0;
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <Brakes_OnDistance+0x10a>
	}
	else
	{
		return 3;
 8001260:	2303      	movs	r3, #3
	}
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	41f00000 	.word	0x41f00000
 8001270:	200000b9 	.word	0x200000b9
 8001274:	200000ba 	.word	0x200000ba
 8001278:	200000bb 	.word	0x200000bb
 800127c:	42700000 	.word	0x42700000

08001280 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	/* Initialize variables */
	g_Brakes_AN0_Voltage_mV_u16 = 0u;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <Brakes_Init+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	801a      	strh	r2, [r3, #0]
	g_Brakes_AN2_Voltage_mV_u16 = 0u;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <Brakes_Init+0x48>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
	g_Brakes_SW_u8 = 0u;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <Brakes_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
	g_Brakes_Ultrasonic_Distance_cm_f32 = 0.0f;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <Brakes_Init+0x50>)
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
	g_Brakes_Autobrakes_Status_b = FALSE;
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <Brakes_Init+0x54>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Disable_Cnt_u8 = 0u;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <Brakes_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	g_Brakes_Autobrakes_Enable_Cnt_u8 = 0u;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <Brakes_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	//initilalizare cu 0 a noi var
	/* Read Brakes NvM block */
	Rte_Read_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <Brakes_Init+0x60>)
 80012b2:	2001      	movs	r0, #1
 80012b4:	f00b f9ea 	bl	800c68c <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <Brakes_Init+0x64>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000086 	.word	0x20000086
 80012c8:	20000088 	.word	0x20000088
 80012cc:	2000008a 	.word	0x2000008a
 80012d0:	2000008c 	.word	0x2000008c
 80012d4:	20000092 	.word	0x20000092
 80012d8:	20000093 	.word	0x20000093
 80012dc:	20000094 	.word	0x20000094
 80012e0:	20000098 	.word	0x20000098
 80012e4:	20000085 	.word	0x20000085

080012e8 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_Brakes_InitDone_b)
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <Brakes_MainFunction+0x70>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02f      	beq.n	8001354 <Brakes_MainFunction+0x6c>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_ADC_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_mV_u16);
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <Brakes_MainFunction+0x74>)
 80012f6:	f00b fa03 	bl	800c700 <Rte_Read_AN0_Voltage_u16>
		/* Read AN2 analog voltage (mV) */
		Rte_Read_ADC_AN2_Voltage_u16(&g_Brakes_AN2_Voltage_mV_u16);
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <Brakes_MainFunction+0x78>)
 80012fc:	f00b fa24 	bl	800c748 <Rte_Read_AN2_Voltage_u16>
		/* Read SWITCH analog voltage (mV) */
		Rte_Switch_Joystick(&g_Brakes_SW_u8);
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <Brakes_MainFunction+0x7c>)
 8001302:	f00b f92f 	bl	800c564 <Rte_Read_PC6_Pin_State>
		/* Read distance from ultrasonic sensor */
		Rte_Read_Ultrasonic_Distance_f32(&g_Brakes_Ultrasonic_Distance_cm_f32);
 8001306:	4818      	ldr	r0, [pc, #96]	; (8001368 <Brakes_MainFunction+0x80>)
 8001308:	f00b f8fe 	bl	800c508 <Rte_Read_Cdd_Ultrasonic_Distance_f32>
		/* Check Autobrakes condition */
		if(FALSE == g_Brakes_Autobrakes_Status_b)
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <Brakes_MainFunction+0x84>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <Brakes_MainFunction+0x32>
		{
			/* Autobrakes enabled actions */
			Brakes_OnAutobrakesEnabled();
 8001314:	f7ff feb0 	bl	8001078 <Brakes_OnAutobrakesEnabled>
 8001318:	e001      	b.n	800131e <Brakes_MainFunction+0x36>
		}
		else
		{
			/* Autobrakes disabled actions */
			Brakes_OnAutobrakesDisabled();
 800131a:	f7ff fee5 	bl	80010e8 <Brakes_OnAutobrakesDisabled>
		}
		/* rte write */
		g_Brakes_Ultrasonic_Distance_cm_u16 = (uint16) g_Brakes_Ultrasonic_Distance_cm_f32;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <Brakes_MainFunction+0x80>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe76 	bl	8001014 <__aeabi_f2uiz>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <Brakes_MainFunction+0x88>)
 800132e:	801a      	strh	r2, [r3, #0]
		g_Brakes_CollisionWarning_Status_u8 = Brakes_OnDistance(g_Brakes_Ultrasonic_Distance_cm_u16);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <Brakes_MainFunction+0x88>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fc4f 	bl	8000bd8 <__aeabi_ui2f>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff0b 	bl	8001158 <Brakes_OnDistance>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <Brakes_MainFunction+0x8c>)
 8001348:	701a      	strb	r2, [r3, #0]
		Rte_Write_Brakes_Collission_Status(g_Brakes_CollisionWarning_Status_u8);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <Brakes_MainFunction+0x8c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f00b f92a 	bl	800c5a8 <Rte_Write_g_CollisionWarning_Status>
	}
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000085 	.word	0x20000085
 800135c:	20000086 	.word	0x20000086
 8001360:	20000088 	.word	0x20000088
 8001364:	2000008a 	.word	0x2000008a
 8001368:	2000008c 	.word	0x2000008c
 800136c:	20000092 	.word	0x20000092
 8001370:	20000090 	.word	0x20000090
 8001374:	200000b8 	.word	0x200000b8

08001378 <Brakes_Shutdown>:
/**
  * @brief  Shutdown the Brakes module
  * @return None
  */
void Brakes_Shutdown(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	/* Write Brakes NvM block */
	Rte_Write_NvM_Brakes_Block(g_Brakes_NvMBlock_a);
 800137c:	4904      	ldr	r1, [pc, #16]	; (8001390 <Brakes_Shutdown+0x18>)
 800137e:	2001      	movs	r0, #1
 8001380:	f00b f99e 	bl	800c6c0 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_Brakes_InitDone_b = FALSE;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <Brakes_Shutdown+0x1c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000098 	.word	0x20000098
 8001394:	20000085 	.word	0x20000085

08001398 <move_Forward>:

/* STATIC FUNCTIONS: */

/* Move forward */
void move_Forward(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, uint8 increment)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d13c      	bne.n	8001428 <move_Forward+0x90>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d138      	bne.n	8001428 <move_Forward+0x90>
	{
		if(*speed_0 < 100 && *speed_1 < 100)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f993 3000 	ldrsb.w	r3, [r3]
 80013bc:	2b63      	cmp	r3, #99	; 0x63
 80013be:	dc2f      	bgt.n	8001420 <move_Forward+0x88>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f993 3000 	ldrsb.w	r3, [r3]
 80013c6:	2b63      	cmp	r3, #99	; 0x63
 80013c8:	dc2a      	bgt.n	8001420 <move_Forward+0x88>
		{
			if(*speed_0 == 0 && *speed_1 == 0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f993 3000 	ldrsb.w	r3, [r3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d116      	bne.n	8001402 <move_Forward+0x6a>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f993 3000 	ldrsb.w	r3, [r3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d111      	bne.n	8001402 <move_Forward+0x6a>
			{
				*speed_0 = *speed_0 + 2*increment;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f993 3000 	ldrsb.w	r3, [r3]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	7e3b      	ldrb	r3, [r7, #24]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f993 2000 	ldrsb.w	r2, [r3]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e00e      	b.n	8001420 <move_Forward+0x88>
			}
			else
			{
				*speed_0 = *speed_0 + increment;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f993 3000 	ldrsb.w	r3, [r3]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	7e3b      	ldrb	r3, [r7, #24]
 800140c:	4413      	add	r3, r2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	b25a      	sxtb	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f993 2000 	ldrsb.w	r2, [r3]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	701a      	strb	r2, [r3, #0]
		}
		else
		{

		}
		*previous_Status = 1;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001426:	e00a      	b.n	800143e <move_Forward+0xa6>
	else if(*current_Status == 0 && *previous_Status == 1)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <move_Forward+0xa6>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <move_Forward+0xa6>
		*previous_Status = 0;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <move_Right>:

/* Move right */
void move_Right(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, sint8 *speed_Before_Turn)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10c      	bne.n	8001478 <move_Right+0x30>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <move_Right+0x30>
	{
		*speed_Before_Turn = *speed_0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f993 2000 	ldrsb.w	r2, [r3]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e029      	b.n	80014cc <move_Right+0x84>
	}
	else if(*current_Status == 0 && *previous_Status == 1)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d111      	bne.n	80014a4 <move_Right+0x5c>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10d      	bne.n	80014a4 <move_Right+0x5c>
	{
		*speed_0 = *speed_Before_Turn;
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f993 2000 	ldrsb.w	r2, [r3]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_Before_Turn;
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f993 2000 	ldrsb.w	r2, [r3]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	701a      	strb	r2, [r3, #0]
		*previous_Status = 0;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e013      	b.n	80014cc <move_Right+0x84>
	}
	else if(*current_Status == 1 && *previous_Status == 1)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10f      	bne.n	80014cc <move_Right+0x84>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10b      	bne.n	80014cc <move_Right+0x84>
	{
		*speed_1 = *speed_Before_Turn;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f993 2000 	ldrsb.w	r2, [r3]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	701a      	strb	r2, [r3, #0]
		*speed_0 = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 80014ca:	e7ff      	b.n	80014cc <move_Right+0x84>
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <move_Left>:

/* Move left */
void move_Left(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, sint8 *speed_Before_Turn)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10c      	bne.n	8001506 <move_Left+0x30>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d108      	bne.n	8001506 <move_Left+0x30>
	{
		*speed_Before_Turn = *speed_0;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f993 2000 	ldrsb.w	r2, [r3]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	e029      	b.n	800155a <move_Left+0x84>
	}
	else if(*current_Status == 0 && *previous_Status == 1)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d111      	bne.n	8001532 <move_Left+0x5c>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10d      	bne.n	8001532 <move_Left+0x5c>
	{
		*speed_0 = *speed_Before_Turn;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f993 2000 	ldrsb.w	r2, [r3]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	701a      	strb	r2, [r3, #0]
		*speed_1 = *speed_Before_Turn;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f993 2000 	ldrsb.w	r2, [r3]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	701a      	strb	r2, [r3, #0]
		*previous_Status = 0;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e013      	b.n	800155a <move_Left+0x84>
	}
	else if(*current_Status == 1 && *previous_Status == 1)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10f      	bne.n	800155a <move_Left+0x84>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10b      	bne.n	800155a <move_Left+0x84>
	{
		*speed_0 = *speed_Before_Turn;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f993 2000 	ldrsb.w	r2, [r3]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	701a      	strb	r2, [r3, #0]
		*speed_1 = 0;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
		*previous_Status = 1;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001558:	e7ff      	b.n	800155a <move_Left+0x84>
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <move_Backward>:

/* Move backward */
void move_Backward(uint8 *current_Status, uint8 *previous_Status, sint8 *speed_0, sint8 *speed_1, uint8 decrement)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
	if(*current_Status == 1 && *previous_Status == 0)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d13e      	bne.n	80015f8 <move_Backward+0x94>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13a      	bne.n	80015f8 <move_Backward+0x94>
	{
		if(*speed_0 >= -90 && *speed_1 >= -90)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f993 3000 	ldrsb.w	r3, [r3]
 8001588:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 800158c:	db30      	blt.n	80015f0 <move_Backward+0x8c>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f993 3000 	ldrsb.w	r3, [r3]
 8001594:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001598:	db2a      	blt.n	80015f0 <move_Backward+0x8c>
		{
			if(*speed_0 == 0 && *speed_1 == 0)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f993 3000 	ldrsb.w	r3, [r3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d116      	bne.n	80015d2 <move_Backward+0x6e>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d111      	bne.n	80015d2 <move_Backward+0x6e>
			{
				*speed_0 = *speed_0 - 2*decrement;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f993 3000 	ldrsb.w	r3, [r3]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	7e3b      	ldrb	r3, [r7, #24]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f993 2000 	ldrsb.w	r2, [r3]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e00e      	b.n	80015f0 <move_Backward+0x8c>
			}
			else
			{
				*speed_0 = *speed_0 - decrement;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f993 3000 	ldrsb.w	r3, [r3]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	7e3b      	ldrb	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	701a      	strb	r2, [r3, #0]
				*speed_1 = *speed_0;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f993 2000 	ldrsb.w	r2, [r3]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	701a      	strb	r2, [r3, #0]
		}
		else
		{

		}
		*previous_Status = 1;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 80015f6:	e00a      	b.n	800160e <move_Backward+0xaa>
	else if(*current_Status == 0 && *previous_Status == 1)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <move_Backward+0xaa>
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <move_Backward+0xaa>
		*previous_Status = 0;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <set_Speed_And_Direction>:

/* Set speed and direction */
void set_Speed_And_Direction(sint8 *speed_0_s8, sint8 *speed_1_s8, uint8 *speed_0_u8, uint8 *speed_1_u8, uint8 *direction)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
	if(*speed_0_s8 == 0)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f993 3000 	ldrsb.w	r3, [r3]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d135      	bne.n	800169c <set_Speed_And_Direction+0x84>
	{
		if(*speed_1_s8 == 0)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f993 3000 	ldrsb.w	r3, [r3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <set_Speed_And_Direction+0x36>
		{
			*speed_0_u8 = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 800164c:	e0b1      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f993 3000 	ldrsb.w	r3, [r3]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd0c      	ble.n	8001672 <set_Speed_And_Direction+0x5a>
			*speed_0_u8 = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f993 3000 	ldrsb.w	r3, [r3]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
}
 8001670:	e09f      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f993 3000 	ldrsb.w	r3, [r3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f280 809a 	bge.w	80017b2 <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = 0;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f993 3000 	ldrsb.w	r3, [r3]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	425b      	negs	r3, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	e08a      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
	else if(*speed_0_s8 > 0)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dd3d      	ble.n	8001722 <set_Speed_And_Direction+0x10a>
		if(*speed_1_s8 == 0)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f993 3000 	ldrsb.w	r3, [r3]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <set_Speed_And_Direction+0xb2>
			*speed_0_u8 = *speed_0_s8;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f993 3000 	ldrsb.w	r3, [r3]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	e073      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f993 3000 	ldrsb.w	r3, [r3]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dd0f      	ble.n	80016f4 <set_Speed_And_Direction+0xdc>
			*speed_0_u8 = *speed_0_s8;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f993 3000 	ldrsb.w	r3, [r3]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f993 3000 	ldrsb.w	r3, [r3]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
}
 80016f2:	e05e      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f993 3000 	ldrsb.w	r3, [r3]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	da59      	bge.n	80017b2 <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = *speed_0_s8;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f993 3000 	ldrsb.w	r3, [r3]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f993 3000 	ldrsb.w	r3, [r3]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	425b      	negs	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	e047      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
	else if(*speed_0_s8 < 0)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f993 3000 	ldrsb.w	r3, [r3]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da42      	bge.n	80017b2 <set_Speed_And_Direction+0x19a>
		if(*speed_1_s8 == 0)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f993 3000 	ldrsb.w	r3, [r3]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10e      	bne.n	8001754 <set_Speed_And_Direction+0x13c>
			*speed_0_u8 = -*speed_0_s8;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f993 3000 	ldrsb.w	r3, [r3]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	425b      	negs	r3, r3
 8001740:	b2da      	uxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = 0;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
}
 8001752:	e02e      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 > 0)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f993 3000 	ldrsb.w	r3, [r3]
 800175a:	2b00      	cmp	r3, #0
 800175c:	dd11      	ble.n	8001782 <set_Speed_And_Direction+0x16a>
			*speed_0_u8 = -*speed_0_s8;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f993 3000 	ldrsb.w	r3, [r3]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	425b      	negs	r3, r3
 8001768:	b2da      	uxtb	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = *speed_1_s8;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f993 3000 	ldrsb.w	r3, [r3]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CW;
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
}
 8001780:	e017      	b.n	80017b2 <set_Speed_And_Direction+0x19a>
		else if(*speed_1_s8 < 0)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f993 3000 	ldrsb.w	r3, [r3]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da12      	bge.n	80017b2 <set_Speed_And_Direction+0x19a>
			*speed_0_u8 = -*speed_0_s8;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f993 3000 	ldrsb.w	r3, [r3]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	425b      	negs	r3, r3
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	701a      	strb	r2, [r3, #0]
			*speed_1_u8 = -*speed_1_s8;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f993 3000 	ldrsb.w	r3, [r3]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	425b      	negs	r3, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	701a      	strb	r2, [r3, #0]
			*direction = DC_MOTOR_DIR_CCW;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <Engine_Init+0x14>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200000bc 	.word	0x200000bc

080017d4 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af02      	add	r7, sp, #8
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <Engine_MainFunction+0xfc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d172      	bne.n	80018c8 <Engine_MainFunction+0xf4>
	{
		/* Read adc */
		Rte_Read_Remote_Channel0(&g_Remote_Control_Status_D0_u8);
 80017e2:	483c      	ldr	r0, [pc, #240]	; (80018d4 <Engine_MainFunction+0x100>)
 80017e4:	f00a ffc4 	bl	800c770 <Rte_Read_Remote_D0>
		Rte_Read_Remote_Channel1(&g_Remote_Control_Status_D1_u8);
 80017e8:	483b      	ldr	r0, [pc, #236]	; (80018d8 <Engine_MainFunction+0x104>)
 80017ea:	f00a ffd3 	bl	800c794 <Rte_Read_Remote_D1>
		Rte_Read_Remote_Channel2(&g_Remote_Control_Status_D2_u8);
 80017ee:	483b      	ldr	r0, [pc, #236]	; (80018dc <Engine_MainFunction+0x108>)
 80017f0:	f00a ffe2 	bl	800c7b8 <Rte_Read_Remote_D2>
		Rte_Read_Remote_Channel3(&g_Remote_Control_Status_D3_u8);
 80017f4:	483a      	ldr	r0, [pc, #232]	; (80018e0 <Engine_MainFunction+0x10c>)
 80017f6:	f00a fff3 	bl	800c7e0 <Rte_Read_Remote_D3>
		Rte_Engine_Switch_Joystick(&g_Engine_SW_u8);
 80017fa:	483a      	ldr	r0, [pc, #232]	; (80018e4 <Engine_MainFunction+0x110>)
 80017fc:	f00a feb2 	bl	800c564 <Rte_Read_PC6_Pin_State>

		//Rte_Start_DCMotor();

		if(g_Engine_SW_u8 == 0 && g_Engine_SW_Previous_State_u8 == 1)
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <Engine_MainFunction+0x110>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10d      	bne.n	8001824 <Engine_MainFunction+0x50>
 8001808:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <Engine_MainFunction+0x114>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d109      	bne.n	8001824 <Engine_MainFunction+0x50>
		{
			g_Switch_CNT_u8++;
 8001810:	4b36      	ldr	r3, [pc, #216]	; (80018ec <Engine_MainFunction+0x118>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <Engine_MainFunction+0x118>)
 800181a:	701a      	strb	r2, [r3, #0]
			g_Engine_SW_Previous_State_u8 = 0;
 800181c:	4b32      	ldr	r3, [pc, #200]	; (80018e8 <Engine_MainFunction+0x114>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e00a      	b.n	800183a <Engine_MainFunction+0x66>
		}
		else if(g_Engine_SW_u8 == 1 && g_Engine_SW_Previous_State_u8 == 0)
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <Engine_MainFunction+0x110>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <Engine_MainFunction+0x66>
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <Engine_MainFunction+0x114>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <Engine_MainFunction+0x66>
		{
			g_Engine_SW_Previous_State_u8 = 1;
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <Engine_MainFunction+0x114>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
		else
		{

		}

		if( g_Switch_CNT_u8 % 2 == 0)
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <Engine_MainFunction+0x118>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11f      	bne.n	8001888 <Engine_MainFunction+0xb4>
		{
			/* Moves from remote control */
			move_Forward(&g_Remote_Control_Status_D2_u8, &g_Remote_Control_Previous_Status_D2_u8, &g_Speed_0_s8, &g_Speed_1_s8, INCREMENT_SPEED);
 8001848:	230a      	movs	r3, #10
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <Engine_MainFunction+0x11c>)
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <Engine_MainFunction+0x120>)
 8001850:	4929      	ldr	r1, [pc, #164]	; (80018f8 <Engine_MainFunction+0x124>)
 8001852:	4822      	ldr	r0, [pc, #136]	; (80018dc <Engine_MainFunction+0x108>)
 8001854:	f7ff fda0 	bl	8001398 <move_Forward>
			move_Right(&g_Remote_Control_Status_D0_u8, &g_Remote_Control_Previous_Status_D0_u8, &g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_Before_Turn_s8);
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <Engine_MainFunction+0x128>)
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <Engine_MainFunction+0x11c>)
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <Engine_MainFunction+0x120>)
 8001860:	4927      	ldr	r1, [pc, #156]	; (8001900 <Engine_MainFunction+0x12c>)
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <Engine_MainFunction+0x100>)
 8001864:	f7ff fdf0 	bl	8001448 <move_Right>
		    move_Left(&g_Remote_Control_Status_D3_u8, &g_Remote_Control_Previous_Status_D3_u8, &g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_Before_Turn_s8);
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <Engine_MainFunction+0x128>)
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <Engine_MainFunction+0x11c>)
 800186e:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <Engine_MainFunction+0x120>)
 8001870:	4924      	ldr	r1, [pc, #144]	; (8001904 <Engine_MainFunction+0x130>)
 8001872:	481b      	ldr	r0, [pc, #108]	; (80018e0 <Engine_MainFunction+0x10c>)
 8001874:	f7ff fe2f 	bl	80014d6 <move_Left>
			move_Backward(&g_Remote_Control_Status_D1_u8, &g_Remote_Control_Previous_Status_D1_u8, &g_Speed_0_s8, &g_Speed_1_s8, DECREMENT_SPEED);
 8001878:	230a      	movs	r3, #10
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <Engine_MainFunction+0x11c>)
 800187e:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <Engine_MainFunction+0x120>)
 8001880:	4921      	ldr	r1, [pc, #132]	; (8001908 <Engine_MainFunction+0x134>)
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <Engine_MainFunction+0x104>)
 8001884:	f7ff fe6e 	bl	8001564 <move_Backward>
			/* Moves from joystick */

		}

		/* Set speed and direction */
		set_Speed_And_Direction(&g_Speed_0_s8, &g_Speed_1_s8, &g_Speed_0_u8, &g_Speed_1_u8, &g_Direction_u8);
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <Engine_MainFunction+0x138>)
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <Engine_MainFunction+0x13c>)
 800188e:	4a21      	ldr	r2, [pc, #132]	; (8001914 <Engine_MainFunction+0x140>)
 8001890:	4917      	ldr	r1, [pc, #92]	; (80018f0 <Engine_MainFunction+0x11c>)
 8001892:	4818      	ldr	r0, [pc, #96]	; (80018f4 <Engine_MainFunction+0x120>)
 8001894:	f7ff fec0 	bl	8001618 <set_Speed_And_Direction>

		Rte_Speed_DCMotor(DC_MOTOR_ID_0, g_Speed_0_u8);
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <Engine_MainFunction+0x140>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	2000      	movs	r0, #0
 80018a0:	f00b f804 	bl	800c8ac <Rte_Call_DCMotor_Set_Speed>
		Rte_Speed_DCMotor(DC_MOTOR_ID_1, g_Speed_1_u8);
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <Engine_MainFunction+0x13c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	2001      	movs	r0, #1
 80018ac:	f00a fffe 	bl	800c8ac <Rte_Call_DCMotor_Set_Speed>
		Rte_Direction_DCMotor(DC_MOTOR_ID_0, g_Direction_u8);
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <Engine_MainFunction+0x138>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	2000      	movs	r0, #0
 80018b8:	f00b f80a 	bl	800c8d0 <Rte_Call_DCMotor_Set_Dir>
		Rte_Direction_DCMotor(DC_MOTOR_ID_1, g_Direction_u8);
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <Engine_MainFunction+0x138>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	2001      	movs	r0, #1
 80018c4:	f00b f804 	bl	800c8d0 <Rte_Call_DCMotor_Set_Dir>
		//Rte_Stop_DCMotor();
		/* Write on DC motor */

	}
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200000bc 	.word	0x200000bc
 80018d4:	200000c0 	.word	0x200000c0
 80018d8:	200000c1 	.word	0x200000c1
 80018dc:	200000c2 	.word	0x200000c2
 80018e0:	200000c3 	.word	0x200000c3
 80018e4:	200000bd 	.word	0x200000bd
 80018e8:	200000bf 	.word	0x200000bf
 80018ec:	200000be 	.word	0x200000be
 80018f0:	200000cb 	.word	0x200000cb
 80018f4:	200000ca 	.word	0x200000ca
 80018f8:	200000c6 	.word	0x200000c6
 80018fc:	200000cc 	.word	0x200000cc
 8001900:	200000c4 	.word	0x200000c4
 8001904:	200000c7 	.word	0x200000c7
 8001908:	200000c5 	.word	0x200000c5
 800190c:	200000cd 	.word	0x200000cd
 8001910:	200000c9 	.word	0x200000c9
 8001914:	200000c8 	.word	0x200000c8

08001918 <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE_U16)
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <LED_UpdatePulseDirection+0x30>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001924:	d302      	bcc.n	800192c <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN_U8;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <LED_UpdatePulseDirection+0x34>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE_U16)
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <LED_UpdatePulseDirection+0x30>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001934:	4293      	cmp	r3, r2
 8001936:	d802      	bhi.n	800193e <LED_UpdatePulseDirection+0x26>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <LED_UpdatePulseDirection+0x34>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	}
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200000d0 	.word	0x200000d0
 800194c:	200000d2 	.word	0x200000d2

08001950 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP_U8 == g_LED_Pulse_Direction_u8)
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <LED_UpdatePulseWidth+0x48>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10c      	bne.n	8001976 <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE_U16)
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <LED_UpdatePulseWidth+0x4c>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001964:	d813      	bhi.n	800198e <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 + LED_FADE_PULSE_STEP_U16;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <LED_UpdatePulseWidth+0x4c>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <LED_UpdatePulseWidth+0x4c>)
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	e00b      	b.n	800198e <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP_U16)
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <LED_UpdatePulseWidth+0x4c>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800197e:	d306      	bcc.n	800198e <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16 - LED_FADE_PULSE_STEP_U16;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <LED_UpdatePulseWidth+0x4c>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <LED_UpdatePulseWidth+0x4c>)
 800198c:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 800198e:	f7ff ffc3 	bl	8001918 <LED_UpdatePulseDirection>
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000d2 	.word	0x200000d2
 800199c:	200000d0 	.word	0x200000d0

080019a0 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	g_LED_ButtonState_b = FALSE;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <LED_Init+0x34>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	g_LED_Pulse_u16 = 0u;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <LED_Init+0x38>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	801a      	strh	r2, [r3, #0]
	g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <LED_Init+0x3c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <LED_Init+0x38>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00a fe58 	bl	800c670 <Rte_Cdd_Servo_RawMove>
	/* Read LED NvM block */
	Rte_Read_NvM_LED_Block(g_LED_NvMBlock_a);
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <LED_Init+0x40>)
 80019c2:	2000      	movs	r0, #0
 80019c4:	f00a fe62 	bl	800c68c <Rte_Read_NvM_Block>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <LED_Init+0x44>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000cf 	.word	0x200000cf
 80019d8:	200000d0 	.word	0x200000d0
 80019dc:	200000d2 	.word	0x200000d2
 80019e0:	200000d4 	.word	0x200000d4
 80019e4:	200000ce 	.word	0x200000ce

080019e8 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_LED_InitDone_b)
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <LED_MainFunction+0xa8>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d04b      	beq.n	8001a8c <LED_MainFunction+0xa4>
	{
		/* Rte read the global variable */
		Rte_Read_LED_Collision_Status(&g_LED_CollisionWarning_Status);
 80019f4:	4827      	ldr	r0, [pc, #156]	; (8001a94 <LED_MainFunction+0xac>)
 80019f6:	f00a fdc7 	bl	800c588 <Rte_Read_g_CollisionWarning_Status>
		switch(g_LED_CollisionWarning_Status)
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <LED_MainFunction+0xac>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d01a      	beq.n	8001a38 <LED_MainFunction+0x50>
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	dc22      	bgt.n	8001a4c <LED_MainFunction+0x64>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <LED_MainFunction+0x28>
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d00a      	beq.n	8001a24 <LED_MainFunction+0x3c>
 8001a0e:	e01d      	b.n	8001a4c <LED_MainFunction+0x64>
		{
			case 0:
			{
				Rte_Write_Green_LED_Status(TRUE);                                  /* Green LED  */
 8001a10:	2001      	movs	r0, #1
 8001a12:	f00a fef7 	bl	800c804 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001a16:	2000      	movs	r0, #0
 8001a18:	f00a ff10 	bl	800c83c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f00a ff29 	bl	800c874 <Rte_Write_PB_15>
			}break;
 8001a22:	e01d      	b.n	8001a60 <LED_MainFunction+0x78>
			case 1:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001a24:	2000      	movs	r0, #0
 8001a26:	f00a feed 	bl	800c804 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(TRUE);                                 /* Yellow LED */
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f00a ff06 	bl	800c83c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001a30:	2000      	movs	r0, #0
 8001a32:	f00a ff1f 	bl	800c874 <Rte_Write_PB_15>
			}break;
 8001a36:	e013      	b.n	8001a60 <LED_MainFunction+0x78>
			case 2:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f00a fee3 	bl	800c804 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f00a fefc 	bl	800c83c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(TRUE);                                    /* Red LED    */
 8001a44:	2001      	movs	r0, #1
 8001a46:	f00a ff15 	bl	800c874 <Rte_Write_PB_15>
			}break;
 8001a4a:	e009      	b.n	8001a60 <LED_MainFunction+0x78>
			default:
			{
				Rte_Write_Green_LED_Status(FALSE);                                 /* Green LED  */
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f00a fed9 	bl	800c804 <Rte_Write_PB_13>
				Rte_Write_Yellow_LED_Status(FALSE);                                /* Yellow LED */
 8001a52:	2000      	movs	r0, #0
 8001a54:	f00a fef2 	bl	800c83c <Rte_Write_PB_14>
				Rte_Write_Red_LED_Status(FALSE);                                   /* Red LED    */
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f00a ff0b 	bl	800c874 <Rte_Write_PB_15>
			}break;
 8001a5e:	bf00      	nop
		}
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LED_MainFunction+0xb0>)
 8001a62:	f00a fd5f 	bl	800c524 <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(FALSE != g_LED_ButtonState_b)
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <LED_MainFunction+0xb0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <LED_MainFunction+0x96>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8001a6e:	f7ff ff6f 	bl	8001950 <LED_UpdatePulseWidth>
			/* Call the Servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <LED_MainFunction+0xb4>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00a fdfa 	bl	800c670 <Rte_Cdd_Servo_RawMove>
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
			/* Stop fading */
		}

	}
}
 8001a7c:	e006      	b.n	8001a8c <LED_MainFunction+0xa4>
			g_LED_NvMBlock_a[0] = 1u;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LED_MainFunction+0xb8>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
			Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <LED_MainFunction+0xb8>)
 8001a86:	2000      	movs	r0, #0
 8001a88:	f00a fe1a 	bl	800c6c0 <Rte_Write_NvM_Block>
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000ce 	.word	0x200000ce
 8001a94:	200000f4 	.word	0x200000f4
 8001a98:	200000cf 	.word	0x200000cf
 8001a9c:	200000d0 	.word	0x200000d0
 8001aa0:	200000d4 	.word	0x200000d4

08001aa4 <LED_Shutdown>:
/**
  * @brief  Shutdown the LED module
  * @return None
  */
void LED_Shutdown(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	/* Write LED NvM block */
	Rte_Write_NvM_LED_Block(g_LED_NvMBlock_a);
 8001aa8:	4904      	ldr	r1, [pc, #16]	; (8001abc <LED_Shutdown+0x18>)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f00a fe08 	bl	800c6c0 <Rte_Write_NvM_Block>
	/* Reset initialization flag */
	g_LED_InitDone_b = FALSE;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <LED_Shutdown+0x1c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000d4 	.word	0x200000d4
 8001ac0:	200000ce 	.word	0x200000ce

08001ac4 <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	g_Left_Blinker_Status_b = FALSE;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <Blinker_Init+0x30>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	g_Right_Blinker_Status_b = FALSE;
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <Blinker_Init+0x34>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
	Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <Blinker_Init+0x30>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00a fd85 	bl	800c5e8 <Rte_Write_PC_2>
	Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <Blinker_Init+0x34>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f00a fd9a 	bl	800c61c <Rte_Write_PC_3>
	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <Blinker_Init+0x38>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000fa 	.word	0x200000fa
 8001af8:	200000fb 	.word	0x200000fb
 8001afc:	200000f5 	.word	0x200000f5

08001b00 <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <Blinker_MainFunction+0xe0>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d167      	bne.n	8001bdc <Blinker_MainFunction+0xdc>
	{
		Rte_Read_Blinker_Autobrakes_Status(&g_Bliker_Autobrakes_Status);
 8001b0c:	4835      	ldr	r0, [pc, #212]	; (8001be4 <Blinker_MainFunction+0xe4>)
 8001b0e:	f00a fd5b 	bl	800c5c8 <Rte_Read_DIO_Autobrakes_State_b>

		if(TRUE == g_Bliker_Autobrakes_Status && FALSE == g_Bliker_Autobrakes_Previous_Status)
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <Blinker_MainFunction+0xe4>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10d      	bne.n	8001b36 <Blinker_MainFunction+0x36>
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <Blinker_MainFunction+0xe8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <Blinker_MainFunction+0x36>
		{
			g_Left_Blinker_Status_b = TRUE;
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <Blinker_MainFunction+0xec>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = TRUE;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <Blinker_MainFunction+0xf0>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
			g_Bliker_Autobrakes_Previous_Status = TRUE;
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <Blinker_MainFunction+0xe8>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e048      	b.n	8001bc8 <Blinker_MainFunction+0xc8>
		}
		else if(TRUE == g_Bliker_Autobrakes_Status && TRUE == g_Bliker_Autobrakes_Previous_Status)
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <Blinker_MainFunction+0xe4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d136      	bne.n	8001bac <Blinker_MainFunction+0xac>
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <Blinker_MainFunction+0xe8>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d132      	bne.n	8001bac <Blinker_MainFunction+0xac>
		{
			if(g_Blinker_Counter_u16 < 45)
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <Blinker_MainFunction+0xf4>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001b4c:	d827      	bhi.n	8001b9e <Blinker_MainFunction+0x9e>
			{
				g_Blinker_Counter_u16++;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <Blinker_MainFunction+0xf4>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <Blinker_MainFunction+0xf4>)
 8001b58:	801a      	strh	r2, [r3, #0]
				if(0 == g_Blinker_Counter_u16 % 5)
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <Blinker_MainFunction+0xf4>)
 8001b5c:	881a      	ldrh	r2, [r3, #0]
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <Blinker_MainFunction+0xf8>)
 8001b60:	fba3 1302 	umull	r1, r3, r3, r2
 8001b64:	0899      	lsrs	r1, r3, #2
 8001b66:	460b      	mov	r3, r1
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d128      	bne.n	8001bc6 <Blinker_MainFunction+0xc6>
				{
					g_Left_Blinker_Status_b = !g_Left_Blinker_Status_b;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <Blinker_MainFunction+0xec>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <Blinker_MainFunction+0xec>)
 8001b86:	701a      	strb	r2, [r3, #0]
					g_Right_Blinker_Status_b = !g_Right_Blinker_Status_b;
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <Blinker_MainFunction+0xf0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <Blinker_MainFunction+0xf0>)
 8001b9a:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 8001b9c:	e013      	b.n	8001bc6 <Blinker_MainFunction+0xc6>
				}

			}
			else
			{
				g_Left_Blinker_Status_b = FALSE;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <Blinker_MainFunction+0xec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
				g_Right_Blinker_Status_b = FALSE;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <Blinker_MainFunction+0xf0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
			if(g_Blinker_Counter_u16 < 45)
 8001baa:	e00c      	b.n	8001bc6 <Blinker_MainFunction+0xc6>
			}
		}
		else
		{
			g_Bliker_Autobrakes_Previous_Status = FALSE;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <Blinker_MainFunction+0xe8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
			g_Blinker_Counter_u16 = 0;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <Blinker_MainFunction+0xf4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	801a      	strh	r2, [r3, #0]
			g_Left_Blinker_Status_b = FALSE;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <Blinker_MainFunction+0xec>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
			g_Right_Blinker_Status_b = FALSE;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <Blinker_MainFunction+0xf0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	e000      	b.n	8001bc8 <Blinker_MainFunction+0xc8>
			if(g_Blinker_Counter_u16 < 45)
 8001bc6:	bf00      	nop
		}

		Rte_Write_Left_Blinker_Autobrakes_Status(g_Left_Blinker_Status_b);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <Blinker_MainFunction+0xec>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00a fd0b 	bl	800c5e8 <Rte_Write_PC_2>
		Rte_Write_Right_Blinker_Autobrakes_Status(g_Right_Blinker_Status_b);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <Blinker_MainFunction+0xf0>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00a fd20 	bl	800c61c <Rte_Write_PC_3>
	}
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200000f5 	.word	0x200000f5
 8001be4:	200000f6 	.word	0x200000f6
 8001be8:	200000f7 	.word	0x200000f7
 8001bec:	200000fa 	.word	0x200000fa
 8001bf0:	200000fb 	.word	0x200000fb
 8001bf4:	200000f8 	.word	0x200000f8
 8001bf8:	cccccccd 	.word	0xcccccccd

08001bfc <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <FrontLights_Init+0x14>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200000fc 	.word	0x200000fc

08001c14 <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <InteriorLights_Init+0x14>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200000fd 	.word	0x200000fd

08001c38 <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <RearLights_Init+0x14>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200000fe 	.word	0x200000fe

08001c5c <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <Steering_Init+0x14>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200000ff 	.word	0x200000ff

08001c80 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <Cdd_DCMotor_ConvertSpeedToARR>:
  * @brief	Cdd_DCMotor_ConvertSpeedToARR speed conversion function
  * @param	ub_Speed DC Motor speed in percents
  * @return	ARR speed value
  */
static uint16 Cdd_DCMotor_ConvertSpeedToARR(uint8 ub_Speed)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	uint16 Speed_u16;
	if(ub_Speed < 100u)
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b63      	cmp	r3, #99	; 0x63
 8001c9a:	d80b      	bhi.n	8001cb4 <Cdd_DCMotor_ConvertSpeedToARR+0x28>
	{
		Speed_u16 = (uint16)(ub_Speed * 599);
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	441a      	add	r2, r3
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	0109      	lsls	r1, r1, #4
 8001caa:	1a8a      	subs	r2, r1, r2
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	e002      	b.n	8001cba <Cdd_DCMotor_ConvertSpeedToARR+0x2e>
	}
	else
	{
		Speed_u16 = 59999;
 8001cb4:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8001cb8:	81fb      	strh	r3, [r7, #14]
	}

	return Speed_u16;
 8001cba:	89fb      	ldrh	r3, [r7, #14]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <Cdd_DCMotor_Driver_Init>:
/**
  * @brief	Cdd_DCMotor module initialization function
  * @return	None
  */
void Cdd_DCMotor_Driver_Init(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
    DC_MOTOR_Init(DC_MOTOR_ID_0);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 f81a 	bl	8001d04 <DC_MOTOR_Init>
    DC_MOTOR_Init(DC_MOTOR_ID_1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f000 f817 	bl	8001d04 <DC_MOTOR_Init>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <Cdd_DCMotor_Init>:
/**
  * @brief	Cdd_DCMotor module initialization function
  * @return	None
  */
void Cdd_DCMotor_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    DC_MOTOR_Start(DC_MOTOR_ID_0, DC_MOTOR_DIR_CW, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 f9d1 	bl	800208c <DC_MOTOR_Start>
    DC_MOTOR_Start(DC_MOTOR_ID_1, DC_MOTOR_DIR_CW, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 f9cc 	bl	800208c <DC_MOTOR_Start>
	/* Set initialization flag to done */
	g_Cdd_DCMotor_InitDone_b = TRUE;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <Cdd_DCMotor_Init+0x24>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000100 	.word	0x20000100

08001d04 <DC_MOTOR_Init>:

uint32 arr_val = 0;
void DC_MOTOR_Init(uint8 au8_MOTOR_Instance)
{
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b0b0      	sub	sp, #192	; 0xc0
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001d38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	615a      	str	r2, [r3, #20]
 8001d4a:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32 ARR_Value = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	4413      	add	r3, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d66:	d008      	beq.n	8001d7a <DC_MOTOR_Init+0x76>
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001d6c:	015b      	lsls	r3, r3, #5
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d78:	d10c      	bne.n	8001d94 <DC_MOTOR_Init+0x90>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4a33      	ldr	r2, [pc, #204]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	6153      	str	r3, [r2, #20]
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	e080      	b.n	8001e96 <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001d98:	015b      	lsls	r3, r3, #5
 8001d9a:	4413      	add	r3, r2
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2c      	ldr	r2, [pc, #176]	; (8001e50 <DC_MOTOR_Init+0x14c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d008      	beq.n	8001db6 <DC_MOTOR_Init+0xb2>
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001da8:	015b      	lsls	r3, r3, #5
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <DC_MOTOR_Init+0x14c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10c      	bne.n	8001dd0 <DC_MOTOR_Init+0xcc>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6153      	str	r3, [r2, #20]
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	e062      	b.n	8001e96 <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <DC_MOTOR_Init+0x150>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d008      	beq.n	8001df2 <DC_MOTOR_Init+0xee>
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <DC_MOTOR_Init+0x150>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10c      	bne.n	8001e0c <DC_MOTOR_Init+0x108>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dfc:	6153      	str	r3, [r2, #20]
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	e044      	b.n	8001e96 <DC_MOTOR_Init+0x192>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001e10:	015b      	lsls	r3, r3, #5
 8001e12:	4413      	add	r3, r2
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <DC_MOTOR_Init+0x154>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d008      	beq.n	8001e2e <DC_MOTOR_Init+0x12a>
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <DC_MOTOR_Init+0x144>)
 8001e20:	015b      	lsls	r3, r3, #5
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <DC_MOTOR_Init+0x154>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d116      	bne.n	8001e5c <DC_MOTOR_Init+0x158>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e38:	6153      	str	r3, [r2, #20]
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <DC_MOTOR_Init+0x148>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	e026      	b.n	8001e96 <DC_MOTOR_Init+0x192>
 8001e48:	0800d258 	.word	0x0800d258
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000400 	.word	0x48000400
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48000c00 	.word	0x48000c00
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4a85      	ldr	r2, [pc, #532]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	4413      	add	r3, r2
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a84      	ldr	r2, [pc, #528]	; (8002078 <DC_MOTOR_Init+0x374>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d008      	beq.n	8001e7e <DC_MOTOR_Init+0x17a>
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4a81      	ldr	r2, [pc, #516]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001e70:	015b      	lsls	r3, r3, #5
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a7f      	ldr	r2, [pc, #508]	; (8002078 <DC_MOTOR_Init+0x374>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10b      	bne.n	8001e96 <DC_MOTOR_Init+0x192>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	; (800207c <DC_MOTOR_Init+0x378>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	; (800207c <DC_MOTOR_Init+0x378>)
 8001e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e88:	6153      	str	r3, [r2, #20]
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	; (800207c <DC_MOTOR_Init+0x378>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    }
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4a76      	ldr	r2, [pc, #472]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001e9a:	015b      	lsls	r3, r3, #5
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	4a6f      	ldr	r2, [pc, #444]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001eb6:	015b      	lsls	r3, r3, #5
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 fee0 	bl	8003c88 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	4a6a      	ldr	r2, [pc, #424]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	4413      	add	r3, r2
 8001ed0:	330a      	adds	r3, #10
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4a63      	ldr	r2, [pc, #396]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fec6 	bl	8003c88 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	4a5d      	ldr	r2, [pc, #372]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001f00:	015b      	lsls	r3, r3, #5
 8001f02:	4413      	add	r3, r2
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001f0a:	015b      	lsls	r3, r3, #5
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3308      	adds	r3, #8
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	f002 f858 	bl	8003fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4a55      	ldr	r2, [pc, #340]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001f1e:	015b      	lsls	r3, r3, #5
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001f2a:	015b      	lsls	r3, r3, #5
 8001f2c:	4413      	add	r3, r2
 8001f2e:	330a      	adds	r3, #10
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	4619      	mov	r1, r3
 8001f36:	f002 f848 	bl	8003fca <HAL_GPIO_WritePin>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
	PSC_Value--;
	ARR_Value -= 2;
*/
	PSC_Value = 23;//(uint32) (DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz / 3600000.0);
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	ARR_Value = (uint32) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz / (50*(PSC_Value+1.0)))-1.0);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4a4c      	ldr	r2, [pc, #304]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001f44:	015b      	lsls	r3, r3, #5
 8001f46:	4413      	add	r3, r2
 8001f48:	3314      	adds	r3, #20
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fae1 	bl	8000514 <__aeabi_ui2d>
 8001f52:	4604      	mov	r4, r0
 8001f54:	460d      	mov	r5, r1
 8001f56:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001f5a:	f7fe fadb 	bl	8000514 <__aeabi_ui2d>
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <DC_MOTOR_Init+0x37c>)
 8001f64:	f7fe f99a 	bl	800029c <__adddf3>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	4b43      	ldr	r3, [pc, #268]	; (8002084 <DC_MOTOR_Init+0x380>)
 8001f76:	f7fe fb47 	bl	8000608 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe fc6b 	bl	800085c <__aeabi_ddiv>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <DC_MOTOR_Init+0x37c>)
 8001f94:	f7fe f980 	bl	8000298 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fd44 	bl	8000a2c <__aeabi_d2uiz>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	arr_val = ARR_Value;
 8001faa:	4a37      	ldr	r2, [pc, #220]	; (8002088 <DC_MOTOR_Init+0x384>)
 8001fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fb0:	6013      	str	r3, [r2, #0]
	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <DC_MOTOR_Init+0x370>)
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	4413      	add	r3, r2
 8001fba:	330c      	adds	r3, #12
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	623b      	str	r3, [r7, #32]
	htim.Init.Prescaler = PSC_Value;
 8001fc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Period = ARR_Value;
 8001fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_TIM_Base_Init(&htim);
 8001fd8:	f107 0320 	add.w	r3, r7, #32
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fa61 	bl	80044a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8001fea:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001fee:	f107 0320 	add.w	r3, r7, #32
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 f8fb 	bl	80051f0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 fb18 	bl	8004634 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8002010:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f003 ff88 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002020:	2360      	movs	r3, #96	; 0x60
 8002022:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.Pulse = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	673b      	str	r3, [r7, #112]	; 0x70
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <DC_MOTOR_Init+0x370>)
 8002034:	015b      	lsls	r3, r3, #5
 8002036:	4413      	add	r3, r2
 8002038:	3310      	adds	r3, #16
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	4618      	mov	r0, r3
 8002046:	f002 ffbf 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800204a:	f107 0320 	add.w	r3, r7, #32
 800204e:	4618      	mov	r0, r3
 8002050:	f006 fa40 	bl	80084d4 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <DC_MOTOR_Init+0x370>)
 8002058:	015b      	lsls	r3, r3, #5
 800205a:	4413      	add	r3, r2
 800205c:	3310      	adds	r3, #16
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fb3c 	bl	80046e4 <HAL_TIM_PWM_Start>
}
 800206c:	bf00      	nop
 800206e:	37c0      	adds	r7, #192	; 0xc0
 8002070:	46bd      	mov	sp, r7
 8002072:	bdb0      	pop	{r4, r5, r7, pc}
 8002074:	0800d258 	.word	0x0800d258
 8002078:	48001000 	.word	0x48001000
 800207c:	40021000 	.word	0x40021000
 8002080:	3ff00000 	.word	0x3ff00000
 8002084:	40490000 	.word	0x40490000
 8002088:	20000104 	.word	0x20000104

0800208c <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8 au8_MOTOR_Instance, uint8 au8_DIR, uint8 au8_SPEED)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	460b      	mov	r3, r1
 8002098:	71bb      	strb	r3, [r7, #6]
 800209a:	4613      	mov	r3, r2
 800209c:	717b      	strb	r3, [r7, #5]
	uint16 au16_SPEED = Cdd_DCMotor_ConvertSpeedToARR(au8_SPEED);
 800209e:	797b      	ldrb	r3, [r7, #5]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fdf3 	bl	8001c8c <Cdd_DCMotor_ConvertSpeedToARR>
 80020a6:	4603      	mov	r3, r0
 80020a8:	81fb      	strh	r3, [r7, #14]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DC_MOTOR_DIR_CW)
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11f      	bne.n	80020f0 <DC_MOTOR_Start+0x64>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <DC_MOTOR_Start+0x128>)
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	4413      	add	r3, r2
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <DC_MOTOR_Start+0x128>)
 80020be:	015b      	lsls	r3, r3, #5
 80020c0:	4413      	add	r3, r2
 80020c2:	3308      	adds	r3, #8
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4619      	mov	r1, r3
 80020ca:	f001 ff7e 	bl	8003fca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <DC_MOTOR_Start+0x128>)
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4a35      	ldr	r2, [pc, #212]	; (80021b4 <DC_MOTOR_Start+0x128>)
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	4413      	add	r3, r2
 80020e2:	330a      	adds	r3, #10
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f001 ff6e 	bl	8003fca <HAL_GPIO_WritePin>
 80020ee:	e021      	b.n	8002134 <DC_MOTOR_Start+0xa8>
	}
	else if(au8_DIR == DC_MOTOR_DIR_CCW)
 80020f0:	79bb      	ldrb	r3, [r7, #6]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d11e      	bne.n	8002134 <DC_MOTOR_Start+0xa8>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	4a2e      	ldr	r2, [pc, #184]	; (80021b4 <DC_MOTOR_Start+0x128>)
 80020fa:	015b      	lsls	r3, r3, #5
 80020fc:	4413      	add	r3, r2
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <DC_MOTOR_Start+0x128>)
 8002104:	015b      	lsls	r3, r3, #5
 8002106:	4413      	add	r3, r2
 8002108:	3308      	adds	r3, #8
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	f001 ff5b 	bl	8003fca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <DC_MOTOR_Start+0x128>)
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <DC_MOTOR_Start+0x128>)
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	4413      	add	r3, r2
 8002128:	330a      	adds	r3, #10
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	4619      	mov	r1, r3
 8002130:	f001 ff4b 	bl	8003fca <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <DC_MOTOR_Start+0x128>)
 8002138:	015b      	lsls	r3, r3, #5
 800213a:	4413      	add	r3, r2
 800213c:	3310      	adds	r3, #16
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d108      	bne.n	8002156 <DC_MOTOR_Start+0xca>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <DC_MOTOR_Start+0x128>)
 8002148:	015b      	lsls	r3, r3, #5
 800214a:	4413      	add	r3, r2
 800214c:	330c      	adds	r3, #12
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	89fa      	ldrh	r2, [r7, #14]
 8002152:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8002154:	e029      	b.n	80021aa <DC_MOTOR_Start+0x11e>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <DC_MOTOR_Start+0x128>)
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	4413      	add	r3, r2
 800215e:	3310      	adds	r3, #16
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d108      	bne.n	8002178 <DC_MOTOR_Start+0xec>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <DC_MOTOR_Start+0x128>)
 800216a:	015b      	lsls	r3, r3, #5
 800216c:	4413      	add	r3, r2
 800216e:	330c      	adds	r3, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	89fa      	ldrh	r2, [r7, #14]
 8002174:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002176:	e018      	b.n	80021aa <DC_MOTOR_Start+0x11e>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <DC_MOTOR_Start+0x128>)
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	4413      	add	r3, r2
 8002180:	3310      	adds	r3, #16
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d108      	bne.n	800219a <DC_MOTOR_Start+0x10e>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <DC_MOTOR_Start+0x128>)
 800218c:	015b      	lsls	r3, r3, #5
 800218e:	4413      	add	r3, r2
 8002190:	330c      	adds	r3, #12
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	89fa      	ldrh	r2, [r7, #14]
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002198:	e007      	b.n	80021aa <DC_MOTOR_Start+0x11e>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <DC_MOTOR_Start+0x128>)
 800219e:	015b      	lsls	r3, r3, #5
 80021a0:	4413      	add	r3, r2
 80021a2:	330c      	adds	r3, #12
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	89fa      	ldrh	r2, [r7, #14]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	0800d258 	.word	0x0800d258

080021b8 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8 au8_MOTOR_Instance, uint8 au8_SPEED)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	460a      	mov	r2, r1
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71bb      	strb	r3, [r7, #6]
	uint16 au16_SPEED = Cdd_DCMotor_ConvertSpeedToARR(au8_SPEED);
 80021c8:	79bb      	ldrb	r3, [r7, #6]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fd5e 	bl	8001c8c <Cdd_DCMotor_ConvertSpeedToARR>
 80021d0:	4603      	mov	r3, r0
 80021d2:	81fb      	strh	r3, [r7, #14]
	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <DC_MOTOR_Set_Speed+0x9c>)
 80021d8:	015b      	lsls	r3, r3, #5
 80021da:	4413      	add	r3, r2
 80021dc:	3310      	adds	r3, #16
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d108      	bne.n	80021f6 <DC_MOTOR_Set_Speed+0x3e>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <DC_MOTOR_Set_Speed+0x9c>)
 80021e8:	015b      	lsls	r3, r3, #5
 80021ea:	4413      	add	r3, r2
 80021ec:	330c      	adds	r3, #12
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	89fa      	ldrh	r2, [r7, #14]
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80021f4:	e029      	b.n	800224a <DC_MOTOR_Set_Speed+0x92>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	4a16      	ldr	r2, [pc, #88]	; (8002254 <DC_MOTOR_Set_Speed+0x9c>)
 80021fa:	015b      	lsls	r3, r3, #5
 80021fc:	4413      	add	r3, r2
 80021fe:	3310      	adds	r3, #16
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d108      	bne.n	8002218 <DC_MOTOR_Set_Speed+0x60>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <DC_MOTOR_Set_Speed+0x9c>)
 800220a:	015b      	lsls	r3, r3, #5
 800220c:	4413      	add	r3, r2
 800220e:	330c      	adds	r3, #12
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	89fa      	ldrh	r2, [r7, #14]
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002216:	e018      	b.n	800224a <DC_MOTOR_Set_Speed+0x92>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <DC_MOTOR_Set_Speed+0x9c>)
 800221c:	015b      	lsls	r3, r3, #5
 800221e:	4413      	add	r3, r2
 8002220:	3310      	adds	r3, #16
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d108      	bne.n	800223a <DC_MOTOR_Set_Speed+0x82>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <DC_MOTOR_Set_Speed+0x9c>)
 800222c:	015b      	lsls	r3, r3, #5
 800222e:	4413      	add	r3, r2
 8002230:	330c      	adds	r3, #12
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	89fa      	ldrh	r2, [r7, #14]
 8002236:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002238:	e007      	b.n	800224a <DC_MOTOR_Set_Speed+0x92>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4a05      	ldr	r2, [pc, #20]	; (8002254 <DC_MOTOR_Set_Speed+0x9c>)
 800223e:	015b      	lsls	r3, r3, #5
 8002240:	4413      	add	r3, r2
 8002242:	330c      	adds	r3, #12
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	89fa      	ldrh	r2, [r7, #14]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	0800d258 	.word	0x0800d258

08002258 <DC_MOTOR_Set_Dir>:

void DC_MOTOR_Set_Dir(uint8 au8_MOTOR_Instance, uint8 au8_DIR)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	460a      	mov	r2, r1
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	71bb      	strb	r3, [r7, #6]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DC_MOTOR_DIR_CW)
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d11f      	bne.n	80022ae <DC_MOTOR_Set_Dir+0x56>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 8002272:	015b      	lsls	r3, r3, #5
 8002274:	4413      	add	r3, r2
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	4a20      	ldr	r2, [pc, #128]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	4413      	add	r3, r2
 8002280:	3308      	adds	r3, #8
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	4619      	mov	r1, r3
 8002288:	f001 fe9f 	bl	8003fca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 8002290:	015b      	lsls	r3, r3, #5
 8002292:	4413      	add	r3, r2
 8002294:	3304      	adds	r3, #4
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4a18      	ldr	r2, [pc, #96]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 800229c:	015b      	lsls	r3, r3, #5
 800229e:	4413      	add	r3, r2
 80022a0:	330a      	adds	r3, #10
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	f001 fe8f 	bl	8003fca <HAL_GPIO_WritePin>
	}
	else
	{

	}
}
 80022ac:	e021      	b.n	80022f2 <DC_MOTOR_Set_Dir+0x9a>
	else if(au8_DIR == DC_MOTOR_DIR_CCW)
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d11e      	bne.n	80022f2 <DC_MOTOR_Set_Dir+0x9a>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 80022b8:	015b      	lsls	r3, r3, #5
 80022ba:	4413      	add	r3, r2
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	4413      	add	r3, r2
 80022c6:	3308      	adds	r3, #8
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	4619      	mov	r1, r3
 80022ce:	f001 fe7c 	bl	8003fca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	4a09      	ldr	r2, [pc, #36]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 80022d6:	015b      	lsls	r3, r3, #5
 80022d8:	4413      	add	r3, r2
 80022da:	3304      	adds	r3, #4
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <DC_MOTOR_Set_Dir+0xa4>)
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	4413      	add	r3, r2
 80022e6:	330a      	adds	r3, #10
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4619      	mov	r1, r3
 80022ee:	f001 fe6c 	bl	8003fca <HAL_GPIO_WritePin>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	0800d258 	.word	0x0800d258

08002300 <Cdd_DCMotor_MainFunction>:
  */
int inc = 0;
uint32 freq = 0;
uint8 dir = 0;
void Cdd_DCMotor_MainFunction(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

		DC_MOTOR_Set_Speed(DC_MOTOR_ID_0, inc);
		DC_MOTOR_Set_Speed(DC_MOTOR_ID_1, inc);*/

	}
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <Cdd_Servo_Driver_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Driver_Init(void)
{
 800230c:	b5b0      	push	{r4, r5, r7, lr}
 800230e:	b09e      	sub	sp, #120	; 0x78
 8002310:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef l_GPIO_InitStruct_s = {0};
 8002312:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef l_ClockSourceConfig_s = {0};
 8002322:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef l_MasterConfig_s = {0};
 8002330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef l_ConfigOC_s = {0};
 800233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	615a      	str	r2, [r3, #20]
 800234e:	619a      	str	r2, [r3, #24]
    uint32 l_PSC_Value_u32 = 0UL;
 8002350:	2300      	movs	r3, #0
 8002352:	677b      	str	r3, [r7, #116]	; 0x74
    uint32 l_ARR_Value_u32 = 0UL;
 8002354:	2300      	movs	r3, #0
 8002356:	673b      	str	r3, [r7, #112]	; 0x70
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 8002358:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800235c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002360:	d10c      	bne.n	800237c <Cdd_Servo_Driver_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4a6b      	ldr	r2, [pc, #428]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	6153      	str	r3, [r2, #20]
 800236e:	4b69      	ldr	r3, [pc, #420]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	e046      	b.n	800240a <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 800237c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002380:	4b65      	ldr	r3, [pc, #404]	; (8002518 <Cdd_Servo_Driver_Init+0x20c>)
 8002382:	429a      	cmp	r2, r3
 8002384:	d10c      	bne.n	80023a0 <Cdd_Servo_Driver_Init+0x94>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4a62      	ldr	r2, [pc, #392]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6153      	str	r3, [r2, #20]
 8002392:	4b60      	ldr	r3, [pc, #384]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	e034      	b.n	800240a <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 80023a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023a4:	4b5d      	ldr	r3, [pc, #372]	; (800251c <Cdd_Servo_Driver_Init+0x210>)
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d10c      	bne.n	80023c4 <Cdd_Servo_Driver_Init+0xb8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	4a59      	ldr	r2, [pc, #356]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023b4:	6153      	str	r3, [r2, #20]
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	e022      	b.n	800240a <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 80023c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023c8:	4b55      	ldr	r3, [pc, #340]	; (8002520 <Cdd_Servo_Driver_Init+0x214>)
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d10c      	bne.n	80023e8 <Cdd_Servo_Driver_Init+0xdc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ce:	4b51      	ldr	r3, [pc, #324]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4a50      	ldr	r2, [pc, #320]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d8:	6153      	str	r3, [r2, #20]
 80023da:	4b4e      	ldr	r3, [pc, #312]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	e010      	b.n	800240a <Cdd_Servo_Driver_Init+0xfe>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 80023e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80023ec:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <Cdd_Servo_Driver_Init+0x218>)
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10b      	bne.n	800240a <Cdd_Servo_Driver_Init+0xfe>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	4b48      	ldr	r3, [pc, #288]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a47      	ldr	r2, [pc, #284]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80023f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023fc:	6153      	str	r3, [r2, #20]
 80023fe:	4b45      	ldr	r3, [pc, #276]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    }
	l_GPIO_InitStruct_s.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 800240a:	2320      	movs	r3, #32
 800240c:	65fb      	str	r3, [r7, #92]	; 0x5c
	l_GPIO_InitStruct_s.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	663b      	str	r3, [r7, #96]	; 0x60
	l_GPIO_InitStruct_s.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	66bb      	str	r3, [r7, #104]	; 0x68
	l_GPIO_InitStruct_s.Alternate = GPIO_AF1_TIM2;
 8002416:	2301      	movs	r3, #1
 8002418:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &l_GPIO_InitStruct_s);
 800241a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800241e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f001 fc2f 	bl	8003c88 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	l_PSC_Value_u32 = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <Cdd_Servo_Driver_Init+0x21c>)
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f871 	bl	8000514 <__aeabi_ui2d>
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <Cdd_Servo_Driver_Init+0x220>)
 8002438:	f7fe fa10 	bl	800085c <__aeabi_ddiv>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe faf2 	bl	8000a2c <__aeabi_d2uiz>
 8002448:	4603      	mov	r3, r0
 800244a:	677b      	str	r3, [r7, #116]	; 0x74
	l_ARR_Value_u32 = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(l_PSC_Value_u32+1.0)))-1.0);
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <Cdd_Servo_Driver_Init+0x21c>)
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f860 	bl	8000514 <__aeabi_ui2d>
 8002454:	4604      	mov	r4, r0
 8002456:	460d      	mov	r5, r1
 8002458:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800245a:	f7fe f85b 	bl	8000514 <__aeabi_ui2d>
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <Cdd_Servo_Driver_Init+0x224>)
 8002464:	f7fd ff1a 	bl	800029c <__adddf3>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <Cdd_Servo_Driver_Init+0x228>)
 8002476:	f7fe f8c7 	bl	8000608 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fe f9eb 	bl	800085c <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b27      	ldr	r3, [pc, #156]	; (8002530 <Cdd_Servo_Driver_Init+0x224>)
 8002494:	f7fd ff00 	bl	8000298 <__aeabi_dsub>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fac4 	bl	8000a2c <__aeabi_d2uiz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	673b      	str	r3, [r7, #112]	; 0x70

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 80024a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ac:	4b22      	ldr	r3, [pc, #136]	; (8002538 <Cdd_Servo_Driver_Init+0x22c>)
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d10c      	bne.n	80024cc <Cdd_Servo_Driver_Init+0x1c0>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80024b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024bc:	6193      	str	r3, [r2, #24]
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	e04a      	b.n	8002562 <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 80024cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d10c      	bne.n	80024f0 <Cdd_Servo_Driver_Init+0x1e4>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	e038      	b.n	8002562 <Cdd_Servo_Driver_Init+0x256>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 80024f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <Cdd_Servo_Driver_Init+0x230>)
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d122      	bne.n	8002540 <Cdd_Servo_Driver_Init+0x234>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b03      	ldr	r3, [pc, #12]	; (8002514 <Cdd_Servo_Driver_Init+0x208>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	e026      	b.n	8002562 <Cdd_Servo_Driver_Init+0x256>
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400
 800251c:	48000800 	.word	0x48000800
 8002520:	48000c00 	.word	0x48000c00
 8002524:	48001000 	.word	0x48001000
 8002528:	044aa200 	.word	0x044aa200
 800252c:	41490000 	.word	0x41490000
 8002530:	3ff00000 	.word	0x3ff00000
 8002534:	40490000 	.word	0x40490000
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 8002540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <Cdd_Servo_Driver_Init+0x350>)
 8002546:	429a      	cmp	r2, r3
 8002548:	d10b      	bne.n	8002562 <Cdd_Servo_Driver_Init+0x256>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800254a:	4b45      	ldr	r3, [pc, #276]	; (8002660 <Cdd_Servo_Driver_Init+0x354>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a44      	ldr	r2, [pc, #272]	; (8002660 <Cdd_Servo_Driver_Init+0x354>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	61d3      	str	r3, [r2, #28]
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <Cdd_Servo_Driver_Init+0x354>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
	}

	g_TimerHandler_s.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 8002562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 8002568:	601a      	str	r2, [r3, #0]
	g_TimerHandler_s.Init.Prescaler = l_PSC_Value_u32;
 800256a:	4a3e      	ldr	r2, [pc, #248]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 800256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256e:	6053      	str	r3, [r2, #4]
	g_TimerHandler_s.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
	g_TimerHandler_s.Init.Period = l_ARR_Value_u32;
 8002576:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 8002578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257a:	60d3      	str	r3, [r2, #12]
	g_TimerHandler_s.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
	g_TimerHandler_s.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002582:	4b38      	ldr	r3, [pc, #224]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&g_TimerHandler_s);
 8002588:	4836      	ldr	r0, [pc, #216]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 800258a:	f001 ff8b 	bl	80044a4 <HAL_TIM_Base_Init>
	l_ClockSourceConfig_s.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_TIM_ConfigClockSource(&g_TimerHandler_s, &l_ClockSourceConfig_s);
 8002594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002598:	4619      	mov	r1, r3
 800259a:	4832      	ldr	r0, [pc, #200]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 800259c:	f002 fe28 	bl	80051f0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&g_TimerHandler_s);
 80025a0:	4830      	ldr	r0, [pc, #192]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 80025a2:	f002 f847 	bl	8004634 <HAL_TIM_PWM_Init>
	l_MasterConfig_s.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	643b      	str	r3, [r7, #64]	; 0x40
	l_MasterConfig_s.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIMEx_MasterConfigSynchronization(&g_TimerHandler_s, &l_MasterConfig_s);
 80025ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025b2:	4619      	mov	r1, r3
 80025b4:	482b      	ldr	r0, [pc, #172]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 80025b6:	f003 fcbb 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
	l_ConfigOC_s.OCMode = TIM_OCMODE_PWM1;
 80025ba:	2360      	movs	r3, #96	; 0x60
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
	l_ConfigOC_s.Pulse = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
	l_ConfigOC_s.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	l_ConfigOC_s.OCFastMode = TIM_OCFAST_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_ConfigChannel(&g_TimerHandler_s, &l_ConfigOC_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 80025ca:	2200      	movs	r2, #0
 80025cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4824      	ldr	r0, [pc, #144]	; (8002664 <Cdd_Servo_Driver_Init+0x358>)
 80025d4:	f002 fcf8 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	g_SERVO_info_s.Period_Min_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MinPulse/20.0));
 80025d8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80025da:	f7fd ff9b 	bl	8000514 <__aeabi_ui2d>
 80025de:	4604      	mov	r4, r0
 80025e0:	460d      	mov	r5, r1
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffb6 	bl	8000558 <__aeabi_f2d>
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <Cdd_Servo_Driver_Init+0x35c>)
 80025f2:	f7fe f933 	bl	800085c <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fe f803 	bl	8000608 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe fa0f 	bl	8000a2c <__aeabi_d2uiz>
 800260e:	4603      	mov	r3, r0
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <Cdd_Servo_Driver_Init+0x360>)
 8002614:	801a      	strh	r2, [r3, #0]
	g_SERVO_info_s.Period_Max_u16 = (uint16) (l_ARR_Value_u32 * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 8002616:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002618:	f7fd ff7c 	bl	8000514 <__aeabi_ui2d>
 800261c:	4604      	mov	r4, r0
 800261e:	460d      	mov	r5, r1
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <Cdd_Servo_Driver_Init+0x364>)
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff98 	bl	8000558 <__aeabi_f2d>
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <Cdd_Servo_Driver_Init+0x35c>)
 800262e:	f7fe f915 	bl	800085c <__aeabi_ddiv>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	f7fd ffe5 	bl	8000608 <__aeabi_dmul>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f7fe f9f1 	bl	8000a2c <__aeabi_d2uiz>
 800264a:	4603      	mov	r3, r0
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <Cdd_Servo_Driver_Init+0x360>)
 8002650:	805a      	strh	r2, [r3, #2]
}
 8002652:	bf00      	nop
 8002654:	3778      	adds	r7, #120	; 0x78
 8002656:	46bd      	mov	sp, r7
 8002658:	bdb0      	pop	{r4, r5, r7, pc}
 800265a:	bf00      	nop
 800265c:	40000800 	.word	0x40000800
 8002660:	40021000 	.word	0x40021000
 8002664:	20000108 	.word	0x20000108
 8002668:	40340000 	.word	0x40340000
 800266c:	20000154 	.word	0x20000154
 8002670:	41a00000 	.word	0x41a00000

08002674 <Cdd_Servo_Init>:

void Cdd_Servo_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
	/*--------[ Start The PWM Channel ]-------*/
	HAL_TIM_PWM_Start(&g_TimerHandler_s, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8002678:	2300      	movs	r3, #0
 800267a:	4619      	mov	r1, r3
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <Cdd_Servo_Init+0x14>)
 800267e:	f002 f831 	bl	80046e4 <HAL_TIM_PWM_Start>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000108 	.word	0x20000108

0800268c <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= g_SERVO_info_s.Period_Max_u16 && Pulse >= g_SERVO_info_s.Period_Min_u16)
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <Cdd_Servo_RawMove+0x30>)
 8002698:	885b      	ldrh	r3, [r3, #2]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	429a      	cmp	r2, r3
 800269e:	d807      	bhi.n	80026b0 <Cdd_Servo_RawMove+0x24>
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <Cdd_Servo_RawMove+0x30>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	88fa      	ldrh	r2, [r7, #6]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <Cdd_Servo_RawMove+0x34>)
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	6013      	str	r3, [r2, #0]
	}
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000154 	.word	0x20000154
 80026c0:	40000034 	.word	0x40000034

080026c4 <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <Cdd_Ultrasonic_Trigger>:
/**
  * @brief	Cdd_Ultrasonic module trigger measurement function
  * @return	None
  */
static void Cdd_Ultrasonic_Trigger(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	Rte_Call_TriggerUltrasonicMeasurement();
 80026d4:	f009 fefc 	bl	800c4d0 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}

080026dc <Cdd_Ultrasonic_ISR_CaptureCallback>:
  * @brief	Cdd_Ultrasonic capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	uint32 l_PS_u32 = 0UL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance) && (htim->Channel == g_Cdd_Ultrasonic_Info_s.ACTIV_CH))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a89      	ldr	r2, [pc, #548]	; (8002914 <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	f040 810b 	bne.w	800290a <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7f1a      	ldrb	r2, [r3, #28]
 80026f8:	4b87      	ldr	r3, [pc, #540]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80026fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fe:	429a      	cmp	r2, r3
 8002700:	f040 8103 	bne.w	800290a <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
	{
		if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 0u)
 8002704:	4b84      	ldr	r3, [pc, #528]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d166      	bne.n	80027da <Cdd_Ultrasonic_ISR_CaptureCallback+0xfe>
		{
			/* Capture T1 & Reverse The ICU Edge Polarity */
			g_Cdd_Ultrasonic_Info_s.T1 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 800270c:	2300      	movs	r3, #0
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f002 fe37 	bl	8005384 <HAL_TIM_ReadCapturedValue>
 8002716:	4603      	mov	r3, r0
 8002718:	4a7f      	ldr	r2, [pc, #508]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800271a:	60d3      	str	r3, [r2, #12]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 1u;
 800271c:	4b7e      	ldr	r3, [pc, #504]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d108      	bne.n	800273a <Cdd_Ultrasonic_ISR_CaptureCallback+0x5e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 020a 	bic.w	r2, r2, #10
 8002736:	621a      	str	r2, [r3, #32]
 8002738:	e01f      	b.n	800277a <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 800273a:	2300      	movs	r3, #0
 800273c:	2b04      	cmp	r3, #4
 800273e:	d108      	bne.n	8002752 <Cdd_Ultrasonic_ISR_CaptureCallback+0x76>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e013      	b.n	800277a <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 8002752:	2300      	movs	r3, #0
 8002754:	2b08      	cmp	r3, #8
 8002756:	d108      	bne.n	800276a <Cdd_Ultrasonic_ISR_CaptureCallback+0x8e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002766:	6213      	str	r3, [r2, #32]
 8002768:	e007      	b.n	800277a <Cdd_Ultrasonic_ISR_CaptureCallback+0x9e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	2300      	movs	r3, #0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d108      	bne.n	8002792 <Cdd_Ultrasonic_ISR_CaptureCallback+0xb6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0202 	orr.w	r2, r2, #2
 800278e:	621a      	str	r2, [r3, #32]
 8002790:	e01f      	b.n	80027d2 <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 8002792:	2300      	movs	r3, #0
 8002794:	2b04      	cmp	r3, #4
 8002796:	d108      	bne.n	80027aa <Cdd_Ultrasonic_ISR_CaptureCallback+0xce>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	f043 0320 	orr.w	r3, r3, #32
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e013      	b.n	80027d2 <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d108      	bne.n	80027c2 <Cdd_Ultrasonic_ISR_CaptureCallback+0xe6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027be:	6213      	str	r3, [r2, #32]
 80027c0:	e007      	b.n	80027d2 <Cdd_Ultrasonic_ISR_CaptureCallback+0xf6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027d0:	6213      	str	r3, [r2, #32]
			g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 80027d2:	4b51      	ldr	r3, [pc, #324]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	805a      	strh	r2, [r3, #2]
		else
		{
			/* Nothing to do */
		}
	}
}
 80027d8:	e097      	b.n	800290a <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
		else if (g_Cdd_Ultrasonic_Info_s.EDGE_STATE == 1u)
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 8093 	bne.w	800290a <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			l_PS_u32 = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 80027e4:	4b4b      	ldr	r3, [pc, #300]	; (8002914 <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	60fb      	str	r3, [r7, #12]
			g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 80027ea:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <Cdd_Ultrasonic_ISR_CaptureCallback+0x238>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 80027f0:	6093      	str	r3, [r2, #8]
			g_Cdd_Ultrasonic_Info_s.T2 = HAL_TIM_ReadCapturedValue(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 80027f2:	2300      	movs	r3, #0
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f002 fdc4 	bl	8005384 <HAL_TIM_ReadCapturedValue>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a46      	ldr	r2, [pc, #280]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002800:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.T2 += (g_Cdd_Ultrasonic_Info_s.TMR_OVC * (g_Cdd_Ultrasonic_Info_s.TMR_ARR+1u));
 8002802:	4b45      	ldr	r3, [pc, #276]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	4b44      	ldr	r3, [pc, #272]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002808:	885b      	ldrh	r3, [r3, #2]
 800280a:	4619      	mov	r1, r3
 800280c:	4b42      	ldr	r3, [pc, #264]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	4a3f      	ldr	r2, [pc, #252]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800281a:	6113      	str	r3, [r2, #16]
			g_Cdd_Ultrasonic_Info_s.DIFF = g_Cdd_Ultrasonic_Info_s.T2 - g_Cdd_Ultrasonic_Info_s.T1;
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	4a3c      	ldr	r2, [pc, #240]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002828:	6153      	str	r3, [r2, #20]
			g_Cdd_Ultrasonic_Info_s.DISTANCE = (g_Cdd_Ultrasonic_Info_s.DIFF * CDD_ULTRASONIC_DISTANCE_SCALE_FACTOR_F32)/(c_Cdd_Ultrasonic_CfgType_s.TIM_CLK_MHz/(l_PS_u32+1u));
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f9d2 	bl	8000bd8 <__aeabi_ui2f>
 8002834:	4603      	mov	r3, r0
 8002836:	4939      	ldr	r1, [pc, #228]	; (800291c <Cdd_Ultrasonic_ISR_CaptureCallback+0x240>)
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fa25 	bl	8000c88 <__aeabi_fmul>
 800283e:	4603      	mov	r3, r0
 8002840:	461c      	mov	r4, r3
 8002842:	2248      	movs	r2, #72	; 0x48
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3301      	adds	r3, #1
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe f9c3 	bl	8000bd8 <__aeabi_ui2f>
 8002852:	4603      	mov	r3, r0
 8002854:	4619      	mov	r1, r3
 8002856:	4620      	mov	r0, r4
 8002858:	f7fe faca 	bl	8000df0 <__aeabi_fdiv>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002862:	619a      	str	r2, [r3, #24]
			g_Cdd_Ultrasonic_Info_s.EDGE_STATE = 0u;
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <Cdd_Ultrasonic_ISR_CaptureCallback+0x23c>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d108      	bne.n	8002882 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1a6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020a 	bic.w	r2, r2, #10
 800287e:	621a      	str	r2, [r3, #32]
 8002880:	e01f      	b.n	80028c2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 8002882:	2300      	movs	r3, #0
 8002884:	2b04      	cmp	r3, #4
 8002886:	d108      	bne.n	800289a <Cdd_Ultrasonic_ISR_CaptureCallback+0x1be>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002896:	6213      	str	r3, [r2, #32]
 8002898:	e013      	b.n	80028c2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 800289a:	2300      	movs	r3, #0
 800289c:	2b08      	cmp	r3, #8
 800289e:	d108      	bne.n	80028b2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1d6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e007      	b.n	80028c2 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1e6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <Cdd_Ultrasonic_ISR_CaptureCallback+0x1fa>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6a12      	ldr	r2, [r2, #32]
 80028d2:	621a      	str	r2, [r3, #32]
}
 80028d4:	e019      	b.n	800290a <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d106      	bne.n	80028ea <Cdd_Ultrasonic_ISR_CaptureCallback+0x20e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	6213      	str	r3, [r2, #32]
}
 80028e8:	e00f      	b.n	800290a <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80028ea:	2300      	movs	r3, #0
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d106      	bne.n	80028fe <Cdd_Ultrasonic_ISR_CaptureCallback+0x222>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	6213      	str	r3, [r2, #32]
}
 80028fc:	e005      	b.n	800290a <Cdd_Ultrasonic_ISR_CaptureCallback+0x22e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	6213      	str	r3, [r2, #32]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bd90      	pop	{r4, r7, pc}
 8002912:	bf00      	nop
 8002914:	40000400 	.word	0x40000400
 8002918:	200001a4 	.word	0x200001a4
 800291c:	3c8b4396 	.word	0x3c8b4396

08002920 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
static void Cdd_Ultrasonic_ISR_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	if(htim->Instance == c_Cdd_Ultrasonic_CfgType_s.TIM_Instance)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x28>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d105      	bne.n	800293e <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x1e>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_OVC++;
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 8002934:	885b      	ldrh	r3, [r3, #2]
 8002936:	3301      	adds	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <Cdd_Ultrasonic_ISR_PeriodElapsedCallback+0x2c>)
 800293c:	805a      	strh	r2, [r3, #2]
	}
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	40000400 	.word	0x40000400
 800294c:	200001a4 	.word	0x200001a4

08002950 <Cdd_Ultrasonic_Init>:
/**
  * @brief	Cdd_Ultrasonic module initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	if(TRUE == g_Cdd_Ultrasonic_DriverInitDone_b)
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <Cdd_Ultrasonic_Init+0x28>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10a      	bne.n	8002972 <Cdd_Ultrasonic_Init+0x22>
	{
		/*--------[ Start The ICU Channel ]-------*/
		HAL_TIM_Base_Start_IT(&htim3);
 800295c:	4807      	ldr	r0, [pc, #28]	; (800297c <Cdd_Ultrasonic_Init+0x2c>)
 800295e:	f001 fdf9 	bl	8004554 <HAL_TIM_Base_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8002962:	2300      	movs	r3, #0
 8002964:	4619      	mov	r1, r3
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <Cdd_Ultrasonic_Init+0x2c>)
 8002968:	f002 f828 	bl	80049bc <HAL_TIM_IC_Start_IT>
		/* Set initialization flag to done */
		g_Cdd_Ultrasonic_InitDone_b = TRUE;
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <Cdd_Ultrasonic_Init+0x30>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
	}
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200001c9 	.word	0x200001c9
 800297c:	20000158 	.word	0x20000158
 8002980:	200001c8 	.word	0x200001c8

08002984 <Cdd_Ultrasonic_Driver_Init>:
/**
  * @brief	Cdd_Ultrasonic module driver initialization function
  * @return	None
  */
void Cdd_Ultrasonic_Driver_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b096      	sub	sp, #88	; 0x58
 8002988:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 800298a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80029b4:	f107 0318 	add.w	r3, r7, #24
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]

    /*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOA)
 80029c2:	4b6e      	ldr	r3, [pc, #440]	; (8002b7c <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 80029c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029c8:	d10c      	bne.n	80029e4 <Cdd_Ultrasonic_Driver_Init+0x60>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4a6c      	ldr	r2, [pc, #432]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6153      	str	r3, [r2, #20]
 80029d6:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	e042      	b.n	8002a6a <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOB)
 80029e4:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d10c      	bne.n	8002a06 <Cdd_Ultrasonic_Driver_Init+0x82>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80029ec:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	4a63      	ldr	r2, [pc, #396]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 80029f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f6:	6153      	str	r3, [r2, #20]
 80029f8:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	e031      	b.n	8002a6a <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOC)
 8002a06:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002a08:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <Cdd_Ultrasonic_Driver_Init+0x200>)
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10c      	bne.n	8002a28 <Cdd_Ultrasonic_Driver_Init+0xa4>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0e:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4a5b      	ldr	r2, [pc, #364]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a18:	6153      	str	r3, [r2, #20]
 8002a1a:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	e020      	b.n	8002a6a <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOD)
 8002a28:	4a54      	ldr	r2, [pc, #336]	; (8002b7c <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002a2a:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <Cdd_Ultrasonic_Driver_Init+0x204>)
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d10c      	bne.n	8002a4a <Cdd_Ultrasonic_Driver_Init+0xc6>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	6153      	str	r3, [r2, #20]
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	e00f      	b.n	8002a6a <Cdd_Ultrasonic_Driver_Init+0xe6>
    }
    else if(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO == GPIOE)
 8002a4a:	4a4c      	ldr	r2, [pc, #304]	; (8002b7c <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <Cdd_Ultrasonic_Driver_Init+0x208>)
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d10b      	bne.n	8002a6a <Cdd_Ultrasonic_Driver_Init+0xe6>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a5c:	6153      	str	r3, [r2, #20]
 8002a5e:	4b48      	ldr	r3, [pc, #288]	; (8002b80 <Cdd_Ultrasonic_Driver_Init+0x1fc>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
    }
    TRIG_GPIO_InitStruct.Pin = c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN;
 8002a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6e:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8002a7c:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <Cdd_Ultrasonic_Driver_Init+0x1f8>)
 8002a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f001 f8ff 	bl	8003c88 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	g_Cdd_Ultrasonic_Info_s.TMR_PSC = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->PSC;
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	4a41      	ldr	r2, [pc, #260]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002a90:	6053      	str	r3, [r2, #4]
	g_Cdd_Ultrasonic_Info_s.TMR_ARR = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance->ARR;
 8002a92:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	4a3f      	ldr	r2, [pc, #252]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002a98:	6093      	str	r3, [r2, #8]
	g_Cdd_Ultrasonic_Info_s.TMR_OVC = 0u;
 8002a9a:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	805a      	strh	r2, [r3, #2]
	g_Cdd_Ultrasonic_Info_s.HTIM = &htim3;
 8002aa0:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002aa2:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002aa4:	61da      	str	r2, [r3, #28]
	if(g_Cdd_Ultrasonic_Info_s.TMR_ARR == 0u)
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <Cdd_Ultrasonic_Driver_Init+0x132>
	{
		g_Cdd_Ultrasonic_Info_s.TMR_ARR = 65535u;
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab4:	609a      	str	r2, [r3, #8]
	}
	if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_1)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <Cdd_Ultrasonic_Driver_Init+0x142>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2020 	strb.w	r2, [r3, #32]
 8002ac4:	e016      	b.n	8002af4 <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_2)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d104      	bne.n	8002ad6 <Cdd_Ultrasonic_Driver_Init+0x152>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8002acc:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]
 8002ad4:	e00e      	b.n	8002af4 <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_3)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d104      	bne.n	8002ae6 <Cdd_Ultrasonic_Driver_Init+0x162>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002ade:	2204      	movs	r2, #4
 8002ae0:	f883 2020 	strb.w	r2, [r3, #32]
 8002ae4:	e006      	b.n	8002af4 <Cdd_Ultrasonic_Driver_Init+0x170>
	}
	else if(c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH == TIM_CHANNEL_4)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d103      	bne.n	8002af4 <Cdd_Ultrasonic_Driver_Init+0x170>
	{
		g_Cdd_Ultrasonic_Info_s.ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002aee:	2208      	movs	r2, #8
 8002af0:	f883 2020 	strb.w	r2, [r3, #32]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/
	htim3.Instance = c_Cdd_Ultrasonic_CfgType_s.TIM_Instance;
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <Cdd_Ultrasonic_Driver_Init+0x20c>)
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002af8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = g_Cdd_Ultrasonic_Info_s.TMR_PSC;
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b00:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = g_Cdd_Ultrasonic_Info_s.TMR_ARR;
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <Cdd_Ultrasonic_Driver_Init+0x210>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b0e:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim3);
 8002b1c:	481e      	ldr	r0, [pc, #120]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b1e:	f001 fcc1 	bl	80044a4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8002b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	481a      	ldr	r0, [pc, #104]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b30:	f002 fb5e 	bl	80051f0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim3);
 8002b34:	4818      	ldr	r0, [pc, #96]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b36:	f001 fee1 	bl	80048fc <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8002b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b46:	4619      	mov	r1, r3
 8002b48:	4813      	ldr	r0, [pc, #76]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b4a:	f003 f9f1 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0u;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, c_Cdd_Ultrasonic_CfgType_s.IC_TIM_CH);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f107 0318 	add.w	r3, r7, #24
 8002b64:	4619      	mov	r1, r3
 8002b66:	480c      	ldr	r0, [pc, #48]	; (8002b98 <Cdd_Ultrasonic_Driver_Init+0x214>)
 8002b68:	f002 f991 	bl	8004e8e <HAL_TIM_IC_ConfigChannel>
	/* Set driver initialization flag to done */
	g_Cdd_Ultrasonic_DriverInitDone_b = TRUE;
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <Cdd_Ultrasonic_Driver_Init+0x218>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	3758      	adds	r7, #88	; 0x58
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	48000400 	.word	0x48000400
 8002b80:	40021000 	.word	0x40021000
 8002b84:	48000800 	.word	0x48000800
 8002b88:	48000c00 	.word	0x48000c00
 8002b8c:	48001000 	.word	0x48001000
 8002b90:	40000400 	.word	0x40000400
 8002b94:	200001a4 	.word	0x200001a4
 8002b98:	20000158 	.word	0x20000158
 8002b9c:	200001c9 	.word	0x200001c9

08002ba0 <Cdd_Ultrasonic_MainFunction>:
/**
  * @brief	Cdd_Ultrasonic module main function (runs in task)
  * @return	None
  */
void Cdd_Ultrasonic_MainFunction(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Cdd_Ultrasonic_InitDone_b)
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <Cdd_Ultrasonic_MainFunction+0x2c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <Cdd_Ultrasonic_MainFunction+0x26>
	{
		/* Trigger measurement every 2nd cycle ( 20ms = 2 * task cycle ) */
		if(FALSE == g_Cdd_Ultrasonic_TriggerFlag_b)
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <Cdd_Ultrasonic_MainFunction+0x30>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <Cdd_Ultrasonic_MainFunction+0x1c>
		{
			/* Trigger measurement next cycle */
			g_Cdd_Ultrasonic_TriggerFlag_b = TRUE;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <Cdd_Ultrasonic_MainFunction+0x30>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
			/* Call trigger function */
			Cdd_Ultrasonic_Trigger();
		}
	}
}
 8002bba:	e004      	b.n	8002bc6 <Cdd_Ultrasonic_MainFunction+0x26>
			g_Cdd_Ultrasonic_TriggerFlag_b = FALSE;
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <Cdd_Ultrasonic_MainFunction+0x30>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
			Cdd_Ultrasonic_Trigger();
 8002bc2:	f7ff fd85 	bl	80026d0 <Cdd_Ultrasonic_Trigger>
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200001c8 	.word	0x200001c8
 8002bd0:	200001ca 	.word	0x200001ca

08002bd4 <Cdd_Ultrasonic_ReadDistance>:
/**
  * @brief	Cdd_Ultrasonic module read distance function
  * @return	Last measured distance in centimeters
  */
float32 Cdd_Ultrasonic_ReadDistance(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
	float32 l_Distance_f32 = 0.0f;
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	607b      	str	r3, [r7, #4]
	l_Distance_f32 = g_Cdd_Ultrasonic_Info_s.DISTANCE;
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <Cdd_Ultrasonic_ReadDistance+0x20>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	607b      	str	r3, [r7, #4]
	return l_Distance_f32;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	200001a4 	.word	0x200001a4

08002bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief	Cdd_Ultrasonic external capture callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_CaptureCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fd6b 	bl	80026dc <Cdd_Ultrasonic_ISR_CaptureCallback>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief	Cdd_Ultrasonic external period elapsed callback function
  * @return	None
  * @attention	Runs in ISR
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	Cdd_Ultrasonic_ISR_PeriodElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fe82 	bl	8002920 <Cdd_Ultrasonic_ISR_PeriodElapsedCallback>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b09a      	sub	sp, #104	; 0x68
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e1e3      	b.n	8003030 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d176      	bne.n	8002d68 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d152      	bne.n	8002d28 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f005 f9db 	bl	8008058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d13b      	bne.n	8002d28 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 ff83 	bl	8003bbc <ADC_Disable>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d12f      	bne.n	8002d28 <HAL_ADC_Init+0xe0>
 8002cc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12b      	bne.n	8002d28 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cd8:	f023 0302 	bic.w	r3, r3, #2
 8002cdc:	f043 0202 	orr.w	r2, r3, #2
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d02:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d04:	4b92      	ldr	r3, [pc, #584]	; (8002f50 <HAL_ADC_Init+0x308>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a92      	ldr	r2, [pc, #584]	; (8002f54 <HAL_ADC_Init+0x30c>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0c9a      	lsrs	r2, r3, #18
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d1a:	e002      	b.n	8002d22 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d44:	d110      	bne.n	8002d68 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f023 0312 	bic.w	r3, r3, #18
 8002d4e:	f043 0210 	orr.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 8150 	bne.w	8003016 <HAL_ADC_Init+0x3ce>
 8002d76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 814b 	bne.w	8003016 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 8143 	bne.w	8003016 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d98:	f043 0202 	orr.w	r2, r3, #2
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_Init+0x16c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_ADC_Init+0x310>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_Init+0x170>
 8002db4:	4b69      	ldr	r3, [pc, #420]	; (8002f5c <HAL_ADC_Init+0x314>)
 8002db6:	e000      	b.n	8002dba <HAL_ADC_Init+0x172>
 8002db8:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <HAL_ADC_Init+0x318>)
 8002dba:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d102      	bne.n	8002dcc <HAL_ADC_Init+0x184>
 8002dc6:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <HAL_ADC_Init+0x310>)
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e01a      	b.n	8002e02 <HAL_ADC_Init+0x1ba>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a61      	ldr	r2, [pc, #388]	; (8002f58 <HAL_ADC_Init+0x310>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d103      	bne.n	8002dde <HAL_ADC_Init+0x196>
 8002dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e011      	b.n	8002e02 <HAL_ADC_Init+0x1ba>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a60      	ldr	r2, [pc, #384]	; (8002f64 <HAL_ADC_Init+0x31c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_ADC_Init+0x1a6>
 8002de8:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_ADC_Init+0x320>)
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e009      	b.n	8002e02 <HAL_ADC_Init+0x1ba>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5d      	ldr	r2, [pc, #372]	; (8002f68 <HAL_ADC_Init+0x320>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_ADC_Init+0x1b6>
 8002df8:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <HAL_ADC_Init+0x31c>)
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e001      	b.n	8002e02 <HAL_ADC_Init+0x1ba>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_ADC_Init+0x1da>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_Init+0x1da>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_ADC_Init+0x1dc>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11c      	bne.n	8002e62 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_ADC_Init+0x202>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_Init+0x202>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_ADC_Init+0x204>
 8002e4a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e60:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7e5b      	ldrb	r3, [r3, #25]
 8002e66:	035b      	lsls	r3, r3, #13
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e6c:	2a01      	cmp	r2, #1
 8002e6e:	d002      	beq.n	8002e76 <HAL_ADC_Init+0x22e>
 8002e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e74:	e000      	b.n	8002e78 <HAL_ADC_Init+0x230>
 8002e76:	2200      	movs	r2, #0
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d11b      	bne.n	8002ece <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7e5b      	ldrb	r3, [r3, #25]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	045a      	lsls	r2, r3, #17
 8002ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	663b      	str	r3, [r7, #96]	; 0x60
 8002eb0:	e00d      	b.n	8002ece <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d054      	beq.n	8002f80 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_ADC_Init+0x31c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_ADC_Init+0x2a2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_ADC_Init+0x320>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d140      	bne.n	8002f6c <HAL_ADC_Init+0x324>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002ef2:	d02a      	beq.n	8002f4a <HAL_ADC_Init+0x302>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efc:	d022      	beq.n	8002f44 <HAL_ADC_Init+0x2fc>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002f06:	d01a      	beq.n	8002f3e <HAL_ADC_Init+0x2f6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002f10:	d012      	beq.n	8002f38 <HAL_ADC_Init+0x2f0>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002f1a:	d00a      	beq.n	8002f32 <HAL_ADC_Init+0x2ea>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002f24:	d002      	beq.n	8002f2c <HAL_ADC_Init+0x2e4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	e023      	b.n	8002f74 <HAL_ADC_Init+0x32c>
 8002f2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002f30:	e020      	b.n	8002f74 <HAL_ADC_Init+0x32c>
 8002f32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f36:	e01d      	b.n	8002f74 <HAL_ADC_Init+0x32c>
 8002f38:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002f3c:	e01a      	b.n	8002f74 <HAL_ADC_Init+0x32c>
 8002f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f42:	e017      	b.n	8002f74 <HAL_ADC_Init+0x32c>
 8002f44:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002f48:	e014      	b.n	8002f74 <HAL_ADC_Init+0x32c>
 8002f4a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002f4e:	e011      	b.n	8002f74 <HAL_ADC_Init+0x32c>
 8002f50:	20000000 	.word	0x20000000
 8002f54:	431bde83 	.word	0x431bde83
 8002f58:	50000100 	.word	0x50000100
 8002f5c:	50000300 	.word	0x50000300
 8002f60:	50000700 	.word	0x50000700
 8002f64:	50000400 	.word	0x50000400
 8002f68:	50000500 	.word	0x50000500
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d114      	bne.n	8002fb8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f9c:	f023 0302 	bic.w	r3, r3, #2
 8002fa0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
 8002fa6:	039a      	lsls	r2, r3, #14
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_ADC_Init+0x3f0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10c      	bne.n	8002fee <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f023 010f 	bic.w	r1, r3, #15
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
 8002fec:	e007      	b.n	8002ffe <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 020f 	bic.w	r2, r2, #15
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f023 0303 	bic.w	r3, r3, #3
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
 8003014:	e00a      	b.n	800302c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f023 0312 	bic.w	r3, r3, #18
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800302c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003030:	4618      	mov	r0, r3
 8003032:	3768      	adds	r7, #104	; 0x68
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	fff0c007 	.word	0xfff0c007

0800303c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 80f7 	bne.w	800324a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_ADC_Start_DMA+0x2e>
 8003066:	2302      	movs	r3, #2
 8003068:	e0f2      	b.n	8003250 <HAL_ADC_Start_DMA+0x214>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307a:	d004      	beq.n	8003086 <HAL_ADC_Start_DMA+0x4a>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a75      	ldr	r2, [pc, #468]	; (8003258 <HAL_ADC_Start_DMA+0x21c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d109      	bne.n	800309a <HAL_ADC_Start_DMA+0x5e>
 8003086:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_ADC_Start_DMA+0x220>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e008      	b.n	80030ac <HAL_ADC_Start_DMA+0x70>
 800309a:	4b71      	ldr	r3, [pc, #452]	; (8003260 <HAL_ADC_Start_DMA+0x224>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80c5 	beq.w	800323c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fd1e 	bl	8003af4 <ADC_Enable>
 80030b8:	4603      	mov	r3, r0
 80030ba:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 80b7 	bne.w	8003232 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e0:	d004      	beq.n	80030ec <HAL_ADC_Start_DMA+0xb0>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5c      	ldr	r2, [pc, #368]	; (8003258 <HAL_ADC_Start_DMA+0x21c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d106      	bne.n	80030fa <HAL_ADC_Start_DMA+0xbe>
 80030ec:	4b5b      	ldr	r3, [pc, #364]	; (800325c <HAL_ADC_Start_DMA+0x220>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_ADC_Start_DMA+0xde>
 80030f8:	e005      	b.n	8003106 <HAL_ADC_Start_DMA+0xca>
 80030fa:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_ADC_Start_DMA+0x224>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_ADC_Start_DMA+0xde>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310e:	d004      	beq.n	800311a <HAL_ADC_Start_DMA+0xde>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a53      	ldr	r2, [pc, #332]	; (8003264 <HAL_ADC_Start_DMA+0x228>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d115      	bne.n	8003146 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d036      	beq.n	80031a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800313c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003144:	e02d      	b.n	80031a2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315a:	d004      	beq.n	8003166 <HAL_ADC_Start_DMA+0x12a>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3d      	ldr	r2, [pc, #244]	; (8003258 <HAL_ADC_Start_DMA+0x21c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10a      	bne.n	800317c <HAL_ADC_Start_DMA+0x140>
 8003166:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e008      	b.n	800318e <HAL_ADC_Start_DMA+0x152>
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_ADC_Start_DMA+0x228>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800319a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ae:	d106      	bne.n	80031be <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	f023 0206 	bic.w	r2, r3, #6
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44
 80031bc:	e002      	b.n	80031c4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	4a25      	ldr	r2, [pc, #148]	; (8003268 <HAL_ADC_Start_DMA+0x22c>)
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	4a24      	ldr	r2, [pc, #144]	; (800326c <HAL_ADC_Start_DMA+0x230>)
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	4a23      	ldr	r2, [pc, #140]	; (8003270 <HAL_ADC_Start_DMA+0x234>)
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	221c      	movs	r2, #28
 80031ea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0210 	orr.w	r2, r2, #16
 80031fa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3340      	adds	r3, #64	; 0x40
 8003216:	4619      	mov	r1, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f000 ff4b 	bl	80040b6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0204 	orr.w	r2, r2, #4
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e00d      	b.n	800324e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800323a:	e008      	b.n	800324e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003248:	e001      	b.n	800324e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800324a:	2302      	movs	r3, #2
 800324c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800324e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	50000100 	.word	0x50000100
 800325c:	50000300 	.word	0x50000300
 8003260:	50000700 	.word	0x50000700
 8003264:	50000400 	.word	0x50000400
 8003268:	08003a29 	.word	0x08003a29
 800326c:	08003aa3 	.word	0x08003aa3
 8003270:	08003abf 	.word	0x08003abf

08003274 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b09b      	sub	sp, #108	; 0x6c
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x22>
 8003292:	2302      	movs	r3, #2
 8003294:	e2c8      	b.n	8003828 <HAL_ADC_ConfigChannel+0x5b4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 82ac 	bne.w	8003806 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d81c      	bhi.n	80032f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	461a      	mov	r2, r3
 80032ca:	231f      	movs	r3, #31
 80032cc:	4093      	lsls	r3, r2
 80032ce:	43db      	mvns	r3, r3
 80032d0:	4019      	ands	r1, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
 80032ee:	e063      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	d81e      	bhi.n	8003336 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	3b1e      	subs	r3, #30
 800330c:	221f      	movs	r2, #31
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	4019      	ands	r1, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	3b1e      	subs	r3, #30
 8003328:	fa00 f203 	lsl.w	r2, r0, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	; 0x34
 8003334:	e040      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b0e      	cmp	r3, #14
 800333c:	d81e      	bhi.n	800337c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	3b3c      	subs	r3, #60	; 0x3c
 8003352:	221f      	movs	r2, #31
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	4019      	ands	r1, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	3b3c      	subs	r3, #60	; 0x3c
 800336e:	fa00 f203 	lsl.w	r2, r0, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
 800337a:	e01d      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	3b5a      	subs	r3, #90	; 0x5a
 8003390:	221f      	movs	r2, #31
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	4019      	ands	r1, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	3b5a      	subs	r3, #90	; 0x5a
 80033ac:	fa00 f203 	lsl.w	r2, r0, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 80e5 	bne.w	8003592 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d91c      	bls.n	800340a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6999      	ldr	r1, [r3, #24]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4019      	ands	r1, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6898      	ldr	r0, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	3b1e      	subs	r3, #30
 80033fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	619a      	str	r2, [r3, #24]
 8003408:	e019      	b.n	800343e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6959      	ldr	r1, [r3, #20]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	4019      	ands	r1, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6898      	ldr	r0, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	fa00 f203 	lsl.w	r2, r0, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	3b01      	subs	r3, #1
 800345c:	2b03      	cmp	r3, #3
 800345e:	d84f      	bhi.n	8003500 <HAL_ADC_ConfigChannel+0x28c>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <HAL_ADC_ConfigChannel+0x1f4>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	08003479 	.word	0x08003479
 800346c:	0800349b 	.word	0x0800349b
 8003470:	080034bd 	.word	0x080034bd
 8003474:	080034df 	.word	0x080034df
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800347e:	4b99      	ldr	r3, [pc, #612]	; (80036e4 <HAL_ADC_ConfigChannel+0x470>)
 8003480:	4013      	ands	r3, r2
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	0691      	lsls	r1, r2, #26
 8003488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800348a:	430a      	orrs	r2, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003496:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003498:	e07b      	b.n	8003592 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034a0:	4b90      	ldr	r3, [pc, #576]	; (80036e4 <HAL_ADC_ConfigChannel+0x470>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	0691      	lsls	r1, r2, #26
 80034aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ac:	430a      	orrs	r2, r1
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034b8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034ba:	e06a      	b.n	8003592 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034c2:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_ADC_ConfigChannel+0x470>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	0691      	lsls	r1, r2, #26
 80034cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ce:	430a      	orrs	r2, r1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034da:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034dc:	e059      	b.n	8003592 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034e4:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_ADC_ConfigChannel+0x470>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	0691      	lsls	r1, r2, #26
 80034ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034f0:	430a      	orrs	r2, r1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034fc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034fe:	e048      	b.n	8003592 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	069b      	lsls	r3, r3, #26
 8003510:	429a      	cmp	r2, r3
 8003512:	d107      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003522:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	069b      	lsls	r3, r3, #26
 8003534:	429a      	cmp	r2, r3
 8003536:	d107      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003546:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	069b      	lsls	r3, r3, #26
 8003558:	429a      	cmp	r2, r3
 800355a:	d107      	bne.n	800356c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800356a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	069b      	lsls	r3, r3, #26
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800358e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003590:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d108      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x33e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x33e>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x340>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 8131 	bne.w	800381c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d00f      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43da      	mvns	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	400a      	ands	r2, r1
 80035dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80035e0:	e049      	b.n	8003676 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	409a      	lsls	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b09      	cmp	r3, #9
 8003602:	d91c      	bls.n	800363e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6999      	ldr	r1, [r3, #24]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	3b1b      	subs	r3, #27
 8003616:	2207      	movs	r2, #7
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	4019      	ands	r1, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6898      	ldr	r0, [r3, #8]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	3b1b      	subs	r3, #27
 8003630:	fa00 f203 	lsl.w	r2, r0, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	e01b      	b.n	8003676 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6959      	ldr	r1, [r3, #20]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	2207      	movs	r2, #7
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	4019      	ands	r1, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6898      	ldr	r0, [r3, #8]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800367e:	d004      	beq.n	800368a <HAL_ADC_ConfigChannel+0x416>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_ADC_ConfigChannel+0x474>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x41a>
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_ADC_ConfigChannel+0x478>)
 800368c:	e000      	b.n	8003690 <HAL_ADC_ConfigChannel+0x41c>
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_ADC_ConfigChannel+0x47c>)
 8003690:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b10      	cmp	r3, #16
 8003698:	d105      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800369a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036aa:	2b11      	cmp	r3, #17
 80036ac:	d105      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036be:	2b12      	cmp	r3, #18
 80036c0:	f040 80ac 	bne.w	800381c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80036c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f040 80a5 	bne.w	800381c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036da:	d10b      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x480>
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <HAL_ADC_ConfigChannel+0x474>)
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e023      	b.n	800372a <HAL_ADC_ConfigChannel+0x4b6>
 80036e2:	bf00      	nop
 80036e4:	83fff000 	.word	0x83fff000
 80036e8:	50000100 	.word	0x50000100
 80036ec:	50000300 	.word	0x50000300
 80036f0:	50000700 	.word	0x50000700
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a4e      	ldr	r2, [pc, #312]	; (8003834 <HAL_ADC_ConfigChannel+0x5c0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d103      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x492>
 80036fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e011      	b.n	800372a <HAL_ADC_ConfigChannel+0x4b6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a4b      	ldr	r2, [pc, #300]	; (8003838 <HAL_ADC_ConfigChannel+0x5c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d102      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x4a2>
 8003710:	4b4a      	ldr	r3, [pc, #296]	; (800383c <HAL_ADC_ConfigChannel+0x5c8>)
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e009      	b.n	800372a <HAL_ADC_ConfigChannel+0x4b6>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a48      	ldr	r2, [pc, #288]	; (800383c <HAL_ADC_ConfigChannel+0x5c8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d102      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x4b2>
 8003720:	4b45      	ldr	r3, [pc, #276]	; (8003838 <HAL_ADC_ConfigChannel+0x5c4>)
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e001      	b.n	800372a <HAL_ADC_ConfigChannel+0x4b6>
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_ADC_ConfigChannel+0x4d6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x4d6>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_ADC_ConfigChannel+0x4d8>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d150      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003750:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x4fe>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x4fe>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_ADC_ConfigChannel+0x500>
 8003772:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003774:	2b00      	cmp	r3, #0
 8003776:	d13c      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b10      	cmp	r3, #16
 800377e:	d11d      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x548>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003788:	d118      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003794:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003796:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_ADC_ConfigChannel+0x5cc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <HAL_ADC_ConfigChannel+0x5d0>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	0c9a      	lsrs	r2, r3, #18
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037ac:	e002      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f9      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037ba:	e02e      	b.n	800381a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b11      	cmp	r3, #17
 80037c2:	d10b      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x568>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037cc:	d106      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80037ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80037d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037da:	e01e      	b.n	800381a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b12      	cmp	r3, #18
 80037e2:	d11a      	bne.n	800381a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037f0:	e013      	b.n	800381a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003804:	e00a      	b.n	800381c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003818:	e000      	b.n	800381c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800381a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003824:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003828:	4618      	mov	r0, r3
 800382a:	376c      	adds	r7, #108	; 0x6c
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	50000100 	.word	0x50000100
 8003838:	50000400 	.word	0x50000400
 800383c:	50000500 	.word	0x50000500
 8003840:	20000000 	.word	0x20000000
 8003844:	431bde83 	.word	0x431bde83

08003848 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003848:	b480      	push	{r7}
 800384a:	b099      	sub	sp, #100	; 0x64
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003860:	d102      	bne.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003862:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	e01a      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d103      	bne.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e011      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a66      	ldr	r2, [pc, #408]	; (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d102      	bne.n	800388a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003884:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	e009      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a63      	ldr	r2, [pc, #396]	; (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d102      	bne.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003894:	4b60      	ldr	r3, [pc, #384]	; (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	e001      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b0      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0a9      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 808d 	bne.w	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 8086 	bne.w	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e4:	d004      	beq.n	80038f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80038f2:	e000      	b.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80038f6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d040      	beq.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003912:	035b      	lsls	r3, r3, #13
 8003914:	430b      	orrs	r3, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800391a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d108      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d15c      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d107      	bne.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800395e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003960:	2b00      	cmp	r3, #0
 8003962:	d14b      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800396c:	f023 030f 	bic.w	r3, r3, #15
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	6811      	ldr	r1, [r2, #0]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	6892      	ldr	r2, [r2, #8]
 8003978:	430a      	orrs	r2, r1
 800397a:	431a      	orrs	r2, r3
 800397c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800397e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003980:	e03c      	b.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800398c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d108      	bne.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80039ae:	2300      	movs	r3, #0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d123      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80039d0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d112      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80039d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039de:	f023 030f 	bic.w	r3, r3, #15
 80039e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039e6:	e009      	b.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80039fa:	e000      	b.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039fc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3764      	adds	r7, #100	; 0x64
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	50000100 	.word	0x50000100
 8003a18:	50000400 	.word	0x50000400
 8003a1c:	50000500 	.word	0x50000500
 8003a20:	50000300 	.word	0x50000300
 8003a24:	50000700 	.word	0x50000700

08003a28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d126      	bne.n	8003a90 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d115      	bne.n	8003a88 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d111      	bne.n	8003a88 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f043 0201 	orr.w	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f007 fe57 	bl	800b73c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003a8e:	e004      	b.n	8003a9a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff f8b7 	bl	8002c24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff f8a6 	bl	8002c36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d108      	bne.n	8003b20 <ADC_Enable+0x2c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <ADC_Enable+0x2c>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <ADC_Enable+0x2e>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d143      	bne.n	8003bae <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <ADC_Enable+0xc4>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0210 	orr.w	r2, r3, #16
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e02f      	b.n	8003bb0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003b60:	f004 f940 	bl	8007de4 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b66:	e01b      	b.n	8003ba0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b68:	f004 f93c 	bl	8007de4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d914      	bls.n	8003ba0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d00d      	beq.n	8003ba0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d1dc      	bne.n	8003b68 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	8000003f 	.word	0x8000003f

08003bbc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <ADC_Disable+0x2c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <ADC_Disable+0x2c>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <ADC_Disable+0x2e>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d047      	beq.n	8003c7e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030d 	and.w	r3, r3, #13
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10f      	bne.n	8003c1c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0202 	orr.w	r2, r2, #2
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2203      	movs	r2, #3
 8003c12:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003c14:	f004 f8e6 	bl	8007de4 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c1a:	e029      	b.n	8003c70 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e023      	b.n	8003c80 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c38:	f004 f8d4 	bl	8007de4 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d914      	bls.n	8003c70 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10d      	bne.n	8003c70 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e007      	b.n	8003c80 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d0dc      	beq.n	8003c38 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c96:	e160      	b.n	8003f5a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8152 	beq.w	8003f54 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d005      	beq.n	8003cc8 <HAL_GPIO_Init+0x40>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d130      	bne.n	8003d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cfe:	2201      	movs	r2, #1
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	f003 0201 	and.w	r2, r3, #1
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d017      	beq.n	8003d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	2203      	movs	r2, #3
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d123      	bne.n	8003dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	08da      	lsrs	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3208      	adds	r2, #8
 8003d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	220f      	movs	r2, #15
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	6939      	ldr	r1, [r7, #16]
 8003db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0203 	and.w	r2, r3, #3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80ac 	beq.w	8003f54 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfc:	4b5e      	ldr	r3, [pc, #376]	; (8003f78 <HAL_GPIO_Init+0x2f0>)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_GPIO_Init+0x2f0>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6193      	str	r3, [r2, #24]
 8003e08:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <HAL_GPIO_Init+0x2f0>)
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e14:	4a59      	ldr	r2, [pc, #356]	; (8003f7c <HAL_GPIO_Init+0x2f4>)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	220f      	movs	r2, #15
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e3e:	d025      	beq.n	8003e8c <HAL_GPIO_Init+0x204>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a4f      	ldr	r2, [pc, #316]	; (8003f80 <HAL_GPIO_Init+0x2f8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d01f      	beq.n	8003e88 <HAL_GPIO_Init+0x200>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a4e      	ldr	r2, [pc, #312]	; (8003f84 <HAL_GPIO_Init+0x2fc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d019      	beq.n	8003e84 <HAL_GPIO_Init+0x1fc>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a4d      	ldr	r2, [pc, #308]	; (8003f88 <HAL_GPIO_Init+0x300>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_GPIO_Init+0x1f8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a4c      	ldr	r2, [pc, #304]	; (8003f8c <HAL_GPIO_Init+0x304>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00d      	beq.n	8003e7c <HAL_GPIO_Init+0x1f4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4b      	ldr	r2, [pc, #300]	; (8003f90 <HAL_GPIO_Init+0x308>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <HAL_GPIO_Init+0x1f0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a4a      	ldr	r2, [pc, #296]	; (8003f94 <HAL_GPIO_Init+0x30c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_GPIO_Init+0x1ec>
 8003e70:	2306      	movs	r3, #6
 8003e72:	e00c      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e74:	2307      	movs	r3, #7
 8003e76:	e00a      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e78:	2305      	movs	r3, #5
 8003e7a:	e008      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	e006      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e80:	2303      	movs	r3, #3
 8003e82:	e004      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e002      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	f002 0203 	and.w	r2, r2, #3
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	4093      	lsls	r3, r2
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e9e:	4937      	ldr	r1, [pc, #220]	; (8003f7c <HAL_GPIO_Init+0x2f4>)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eac:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ed0:	4a31      	ldr	r2, [pc, #196]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003efa:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f24:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3301      	adds	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f47f ae97 	bne.w	8003c98 <HAL_GPIO_Init+0x10>
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	48000400 	.word	0x48000400
 8003f84:	48000800 	.word	0x48000800
 8003f88:	48000c00 	.word	0x48000c00
 8003f8c:	48001000 	.word	0x48001000
 8003f90:	48001400 	.word	0x48001400
 8003f94:	48001800 	.word	0x48001800
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e001      	b.n	8003fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	807b      	strh	r3, [r7, #2]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fda:	787b      	ldrb	r3, [r7, #1]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fe0:	887a      	ldrh	r2, [r7, #2]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fe6:	e002      	b.n	8003fee <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fe8:	887a      	ldrh	r2, [r7, #2]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800400e:	4a05      	ldr	r2, [pc, #20]	; (8004024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	4618      	mov	r0, r3
 8004018:	f003 fe62 	bl	8007ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40010400 	.word	0x40010400

08004028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e037      	b.n	80040ae <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004054:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004058:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f9c1 	bl	8004418 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}  
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_DMA_Start_IT+0x20>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e04a      	b.n	800416c <HAL_DMA_Start_IT+0xb6>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d13a      	bne.n	800415e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f956 	bl	80043be <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 020e 	orr.w	r2, r2, #14
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e00f      	b.n	800414c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 020a 	orr.w	r2, r2, #10
 800413a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0204 	bic.w	r2, r2, #4
 800414a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e005      	b.n	800416a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004166:	2302      	movs	r3, #2
 8004168:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800416a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004182:	2b02      	cmp	r3, #2
 8004184:	d008      	beq.n	8004198 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2204      	movs	r2, #4
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e020      	b.n	80041da <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 020e 	bic.w	r2, r2, #14
 80041a6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	2101      	movs	r1, #1
 80041c2:	fa01 f202 	lsl.w	r2, r1, r2
 80041c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d005      	beq.n	8004206 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2204      	movs	r2, #4
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
 8004204:	e027      	b.n	8004256 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 020e 	bic.w	r2, r2, #14
 8004214:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
    } 
  }
  return status;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2204      	movs	r2, #4
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d024      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x72>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01f      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	2104      	movs	r1, #4
 80042ba:	fa01 f202 	lsl.w	r2, r1, r2
 80042be:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d06a      	beq.n	800439e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80042d0:	e065      	b.n	800439e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2202      	movs	r2, #2
 80042d8:	409a      	lsls	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d02c      	beq.n	800433c <HAL_DMA_IRQHandler+0xdc>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d027      	beq.n	800433c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 020a 	bic.w	r2, r2, #10
 8004308:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2102      	movs	r1, #2
 800431c:	fa01 f202 	lsl.w	r2, r1, r2
 8004320:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d035      	beq.n	800439e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800433a:	e030      	b.n	800439e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	2208      	movs	r2, #8
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d028      	beq.n	800439e <HAL_DMA_IRQHandler+0x13e>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d023      	beq.n	800439e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 020e 	bic.w	r2, r2, #14
 8004364:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f202 	lsl.w	r2, r1, r2
 8004374:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
    }
  }
}  
 800439c:	e7ff      	b.n	800439e <HAL_DMA_IRQHandler+0x13e>
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f202 	lsl.w	r2, r1, r2
 80043da:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d108      	bne.n	80043fe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043fc:	e007      	b.n	800440e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	60da      	str	r2, [r3, #12]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <DMA_CalcBaseAndBitshift+0x5c>)
 8004428:	429a      	cmp	r2, r3
 800442a:	d80f      	bhi.n	800444c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <DMA_CalcBaseAndBitshift+0x60>)
 8004434:	4413      	add	r3, r2
 8004436:	4a11      	ldr	r2, [pc, #68]	; (800447c <DMA_CalcBaseAndBitshift+0x64>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	009a      	lsls	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a0e      	ldr	r2, [pc, #56]	; (8004480 <DMA_CalcBaseAndBitshift+0x68>)
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800444a:	e00e      	b.n	800446a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <DMA_CalcBaseAndBitshift+0x6c>)
 8004454:	4413      	add	r3, r2
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <DMA_CalcBaseAndBitshift+0x64>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	009a      	lsls	r2, r3, #2
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a08      	ldr	r2, [pc, #32]	; (8004488 <DMA_CalcBaseAndBitshift+0x70>)
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	40020407 	.word	0x40020407
 8004478:	bffdfff8 	.word	0xbffdfff8
 800447c:	cccccccd 	.word	0xcccccccd
 8004480:	40020000 	.word	0x40020000
 8004484:	bffdfbf8 	.word	0xbffdfbf8
 8004488:	40020400 	.word	0x40020400

0800448c <Gpt_Init>:
#include "Gpt.h"

static boolean g_Gpt_InitDone_b = FALSE;

void Gpt_Init(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
	g_Gpt_InitDone_b = TRUE;
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <Gpt_Init+0x14>)
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	200001cb 	.word	0x200001cb

080044a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e049      	b.n	800454a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f003 ff86 	bl	80083dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f000 ffae 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d001      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e04f      	b.n	800460c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <HAL_TIM_Base_Start_IT+0xc4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01d      	beq.n	80045ca <HAL_TIM_Base_Start_IT+0x76>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d018      	beq.n	80045ca <HAL_TIM_Base_Start_IT+0x76>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <HAL_TIM_Base_Start_IT+0xc8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_TIM_Base_Start_IT+0x76>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <HAL_TIM_Base_Start_IT+0xcc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIM_Base_Start_IT+0x76>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <HAL_TIM_Base_Start_IT+0xd0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIM_Base_Start_IT+0x76>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <HAL_TIM_Base_Start_IT+0xd4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIM_Base_Start_IT+0x76>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_TIM_Base_Start_IT+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d115      	bne.n	80045f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_TIM_Base_Start_IT+0xdc>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d015      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0xb4>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e2:	d011      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	e008      	b.n	8004608 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e000      	b.n	800460a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004608:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40013400 	.word	0x40013400
 8004628:	40014000 	.word	0x40014000
 800462c:	40015000 	.word	0x40015000
 8004630:	00010007 	.word	0x00010007

08004634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e049      	b.n	80046da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f003 ff1c 	bl	8008498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fee6 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_TIM_PWM_Start+0x24>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e03c      	b.n	8004782 <HAL_TIM_PWM_Start+0x9e>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d109      	bne.n	8004722 <HAL_TIM_PWM_Start+0x3e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	e02f      	b.n	8004782 <HAL_TIM_PWM_Start+0x9e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d109      	bne.n	800473c <HAL_TIM_PWM_Start+0x58>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e022      	b.n	8004782 <HAL_TIM_PWM_Start+0x9e>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b0c      	cmp	r3, #12
 8004740:	d109      	bne.n	8004756 <HAL_TIM_PWM_Start+0x72>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	e015      	b.n	8004782 <HAL_TIM_PWM_Start+0x9e>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b10      	cmp	r3, #16
 800475a:	d109      	bne.n	8004770 <HAL_TIM_PWM_Start+0x8c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e008      	b.n	8004782 <HAL_TIM_PWM_Start+0x9e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	bf14      	ite	ne
 800477c:	2301      	movne	r3, #1
 800477e:	2300      	moveq	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0a1      	b.n	80048ce <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <HAL_TIM_PWM_Start+0xb6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004798:	e023      	b.n	80047e2 <HAL_TIM_PWM_Start+0xfe>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d104      	bne.n	80047aa <HAL_TIM_PWM_Start+0xc6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	e01b      	b.n	80047e2 <HAL_TIM_PWM_Start+0xfe>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_PWM_Start+0xd6>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	e013      	b.n	80047e2 <HAL_TIM_PWM_Start+0xfe>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	d104      	bne.n	80047ca <HAL_TIM_PWM_Start+0xe6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c8:	e00b      	b.n	80047e2 <HAL_TIM_PWM_Start+0xfe>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PWM_Start+0xf6>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d8:	e003      	b.n	80047e2 <HAL_TIM_PWM_Start+0xfe>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2201      	movs	r2, #1
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 fb7b 	bl	8005ee6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a38      	ldr	r2, [pc, #224]	; (80048d8 <HAL_TIM_PWM_Start+0x1f4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <HAL_TIM_PWM_Start+0x148>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a37      	ldr	r2, [pc, #220]	; (80048dc <HAL_TIM_PWM_Start+0x1f8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_TIM_PWM_Start+0x148>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a35      	ldr	r2, [pc, #212]	; (80048e0 <HAL_TIM_PWM_Start+0x1fc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_TIM_PWM_Start+0x148>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a34      	ldr	r2, [pc, #208]	; (80048e4 <HAL_TIM_PWM_Start+0x200>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_TIM_PWM_Start+0x148>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_TIM_PWM_Start+0x204>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIM_PWM_Start+0x148>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a31      	ldr	r2, [pc, #196]	; (80048ec <HAL_TIM_PWM_Start+0x208>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_TIM_PWM_Start+0x14c>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_TIM_PWM_Start+0x14e>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <HAL_TIM_PWM_Start+0x1f4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d01d      	beq.n	800488c <HAL_TIM_PWM_Start+0x1a8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d018      	beq.n	800488c <HAL_TIM_PWM_Start+0x1a8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <HAL_TIM_PWM_Start+0x20c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_TIM_PWM_Start+0x1a8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <HAL_TIM_PWM_Start+0x210>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_PWM_Start+0x1a8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1a      	ldr	r2, [pc, #104]	; (80048dc <HAL_TIM_PWM_Start+0x1f8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_TIM_PWM_Start+0x1a8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a18      	ldr	r2, [pc, #96]	; (80048e0 <HAL_TIM_PWM_Start+0x1fc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_PWM_Start+0x1a8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a19      	ldr	r2, [pc, #100]	; (80048ec <HAL_TIM_PWM_Start+0x208>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d115      	bne.n	80048b8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_TIM_PWM_Start+0x214>)
 8004894:	4013      	ands	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d015      	beq.n	80048ca <HAL_TIM_PWM_Start+0x1e6>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d011      	beq.n	80048ca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	e008      	b.n	80048ca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e000      	b.n	80048cc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40013400 	.word	0x40013400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800
 80048ec:	40015000 	.word	0x40015000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	00010007 	.word	0x00010007

080048fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e049      	b.n	80049a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f841 	bl	80049aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f000 fd82 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <HAL_TIM_IC_Start_IT+0x1e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e023      	b.n	8004a22 <HAL_TIM_IC_Start_IT+0x66>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d104      	bne.n	80049ea <HAL_TIM_IC_Start_IT+0x2e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e01b      	b.n	8004a22 <HAL_TIM_IC_Start_IT+0x66>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d104      	bne.n	80049fa <HAL_TIM_IC_Start_IT+0x3e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e013      	b.n	8004a22 <HAL_TIM_IC_Start_IT+0x66>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	d104      	bne.n	8004a0a <HAL_TIM_IC_Start_IT+0x4e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	e00b      	b.n	8004a22 <HAL_TIM_IC_Start_IT+0x66>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_IC_Start_IT+0x5e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e003      	b.n	8004a22 <HAL_TIM_IC_Start_IT+0x66>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <HAL_TIM_IC_Start_IT+0x78>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e013      	b.n	8004a5c <HAL_TIM_IC_Start_IT+0xa0>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d104      	bne.n	8004a44 <HAL_TIM_IC_Start_IT+0x88>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e00b      	b.n	8004a5c <HAL_TIM_IC_Start_IT+0xa0>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d104      	bne.n	8004a54 <HAL_TIM_IC_Start_IT+0x98>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e003      	b.n	8004a5c <HAL_TIM_IC_Start_IT+0xa0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5e:	7bbb      	ldrb	r3, [r7, #14]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d102      	bne.n	8004a6a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a64:	7b7b      	ldrb	r3, [r7, #13]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d001      	beq.n	8004a6e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0dd      	b.n	8004c2a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_IC_Start_IT+0xc2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7c:	e023      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0x10a>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_IC_Start_IT+0xd2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8c:	e01b      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0x10a>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_IC_Start_IT+0xe2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a9c:	e013      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0x10a>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_IC_Start_IT+0xf2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aac:	e00b      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0x10a>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_IC_Start_IT+0x102>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004abc:	e003      	b.n	8004ac6 <HAL_TIM_IC_Start_IT+0x10a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0x11a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad4:	e013      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x142>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0x12a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae4:	e00b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x142>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0x13a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af4:	e003      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x142>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d841      	bhi.n	8004b88 <HAL_TIM_IC_Start_IT+0x1cc>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_TIM_IC_Start_IT+0x150>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b89 	.word	0x08004b89
 8004b14:	08004b89 	.word	0x08004b89
 8004b18:	08004b89 	.word	0x08004b89
 8004b1c:	08004b53 	.word	0x08004b53
 8004b20:	08004b89 	.word	0x08004b89
 8004b24:	08004b89 	.word	0x08004b89
 8004b28:	08004b89 	.word	0x08004b89
 8004b2c:	08004b65 	.word	0x08004b65
 8004b30:	08004b89 	.word	0x08004b89
 8004b34:	08004b89 	.word	0x08004b89
 8004b38:	08004b89 	.word	0x08004b89
 8004b3c:	08004b77 	.word	0x08004b77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0202 	orr.w	r2, r2, #2
 8004b4e:	60da      	str	r2, [r3, #12]
      break;
 8004b50:	e01d      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0204 	orr.w	r2, r2, #4
 8004b60:	60da      	str	r2, [r3, #12]
      break;
 8004b62:	e014      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0208 	orr.w	r2, r2, #8
 8004b72:	60da      	str	r2, [r3, #12]
      break;
 8004b74:	e00b      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0210 	orr.w	r2, r2, #16
 8004b84:	60da      	str	r2, [r3, #12]
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d149      	bne.n	8004c28 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 f9a2 	bl	8005ee6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <HAL_TIM_IC_Start_IT+0x278>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <HAL_TIM_IC_Start_IT+0x22c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d018      	beq.n	8004be8 <HAL_TIM_IC_Start_IT+0x22c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <HAL_TIM_IC_Start_IT+0x27c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_TIM_IC_Start_IT+0x22c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <HAL_TIM_IC_Start_IT+0x280>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_TIM_IC_Start_IT+0x22c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <HAL_TIM_IC_Start_IT+0x284>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_TIM_IC_Start_IT+0x22c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_TIM_IC_Start_IT+0x288>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIM_IC_Start_IT+0x22c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <HAL_TIM_IC_Start_IT+0x28c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d115      	bne.n	8004c14 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <HAL_TIM_IC_Start_IT+0x290>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d015      	beq.n	8004c26 <HAL_TIM_IC_Start_IT+0x26a>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d011      	beq.n	8004c26 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	e008      	b.n	8004c26 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e000      	b.n	8004c28 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c26:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40013400 	.word	0x40013400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40015000 	.word	0x40015000
 8004c4c:	00010007 	.word	0x00010007

08004c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0202 	mvn.w	r2, #2
 8004c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd ffb0 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fbb6 	bl	800540c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fbbc 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0204 	mvn.w	r2, #4
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fd ff86 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fb8c 	bl	800540c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb92 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0208 	mvn.w	r2, #8
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fd ff5c 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fb62 	bl	800540c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fb68 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b10      	cmp	r3, #16
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0210 	mvn.w	r2, #16
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fd ff32 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fb38 	bl	800540c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fb3e 	bl	800541e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10e      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d107      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0201 	mvn.w	r2, #1
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fd ff1d 	bl	8002c0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f001 f92d 	bl	800605a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d10e      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d107      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 f91f 	bl	800606c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d10e      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 faeb 	bl	8005430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d10e      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0220 	mvn.w	r2, #32
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 f8e1 	bl	8006048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e088      	b.n	8004fbe <HAL_TIM_IC_ConfigChannel+0x130>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11b      	bne.n	8004ef2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f000 fe57 	bl	8005b7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 020c 	bic.w	r2, r2, #12
 8004edc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6999      	ldr	r1, [r3, #24]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	619a      	str	r2, [r3, #24]
 8004ef0:	e060      	b.n	8004fb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d11c      	bne.n	8004f32 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f000 fed2 	bl	8005cb0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f1a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	021a      	lsls	r2, r3, #8
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	619a      	str	r2, [r3, #24]
 8004f30:	e040      	b.n	8004fb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f000 ff1d 	bl	8005d86 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 020c 	bic.w	r2, r2, #12
 8004f5a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69d9      	ldr	r1, [r3, #28]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	61da      	str	r2, [r3, #28]
 8004f6e:	e021      	b.n	8004fb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d11c      	bne.n	8004fb0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6819      	ldr	r1, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f000 ff39 	bl	8005dfc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69d9      	ldr	r1, [r3, #28]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	021a      	lsls	r2, r3, #8
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	61da      	str	r2, [r3, #28]
 8004fae:	e001      	b.n	8004fb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0ff      	b.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b14      	cmp	r3, #20
 8004ff2:	f200 80f0 	bhi.w	80051d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005051 	.word	0x08005051
 8005000:	080051d7 	.word	0x080051d7
 8005004:	080051d7 	.word	0x080051d7
 8005008:	080051d7 	.word	0x080051d7
 800500c:	08005091 	.word	0x08005091
 8005010:	080051d7 	.word	0x080051d7
 8005014:	080051d7 	.word	0x080051d7
 8005018:	080051d7 	.word	0x080051d7
 800501c:	080050d3 	.word	0x080050d3
 8005020:	080051d7 	.word	0x080051d7
 8005024:	080051d7 	.word	0x080051d7
 8005028:	080051d7 	.word	0x080051d7
 800502c:	08005113 	.word	0x08005113
 8005030:	080051d7 	.word	0x080051d7
 8005034:	080051d7 	.word	0x080051d7
 8005038:	080051d7 	.word	0x080051d7
 800503c:	08005155 	.word	0x08005155
 8005040:	080051d7 	.word	0x080051d7
 8005044:	080051d7 	.word	0x080051d7
 8005048:	080051d7 	.word	0x080051d7
 800504c:	08005195 	.word	0x08005195
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fa90 	bl	800557c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0208 	orr.w	r2, r2, #8
 800506a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0204 	bic.w	r2, r2, #4
 800507a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6999      	ldr	r1, [r3, #24]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]
      break;
 800508e:	e0a5      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb0a 	bl	80056b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6999      	ldr	r1, [r3, #24]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	021a      	lsls	r2, r3, #8
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	619a      	str	r2, [r3, #24]
      break;
 80050d0:	e084      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fb7b 	bl	80057d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0208 	orr.w	r2, r2, #8
 80050ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0204 	bic.w	r2, r2, #4
 80050fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69d9      	ldr	r1, [r3, #28]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	61da      	str	r2, [r3, #28]
      break;
 8005110:	e064      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fbed 	bl	80058f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800512c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69d9      	ldr	r1, [r3, #28]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	021a      	lsls	r2, r3, #8
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	61da      	str	r2, [r3, #28]
      break;
 8005152:	e043      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fc3a 	bl	80059d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0208 	orr.w	r2, r2, #8
 800516e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0204 	bic.w	r2, r2, #4
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005192:	e023      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fc84 	bl	8005aa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051d4:	e002      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
      break;
 80051da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop

080051f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIM_ConfigClockSource+0x1c>
 8005208:	2302      	movs	r3, #2
 800520a:	e0b6      	b.n	800537a <HAL_TIM_ConfigClockSource+0x18a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005248:	d03e      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0xd8>
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	f200 8087 	bhi.w	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	f000 8086 	beq.w	8005366 <HAL_TIM_ConfigClockSource+0x176>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d87f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005260:	2b70      	cmp	r3, #112	; 0x70
 8005262:	d01a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0xaa>
 8005264:	2b70      	cmp	r3, #112	; 0x70
 8005266:	d87b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d050      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x11e>
 800526c:	2b60      	cmp	r3, #96	; 0x60
 800526e:	d877      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005270:	2b50      	cmp	r3, #80	; 0x50
 8005272:	d03c      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xfe>
 8005274:	2b50      	cmp	r3, #80	; 0x50
 8005276:	d873      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d058      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x13e>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d86f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005280:	2b30      	cmp	r3, #48	; 0x30
 8005282:	d064      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d86b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d060      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 800528c:	2b20      	cmp	r3, #32
 800528e:	d867      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d05c      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005294:	2b10      	cmp	r3, #16
 8005296:	d05a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005298:	e062      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f000 fdfd 	bl	8005ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	609a      	str	r2, [r3, #8]
      break;
 80052c6:	e04f      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f000 fde6 	bl	8005ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ea:	609a      	str	r2, [r3, #8]
      break;
 80052ec:	e03c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 fcaa 	bl	8005c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2150      	movs	r1, #80	; 0x50
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fdb4 	bl	8005e74 <TIM_ITRx_SetConfig>
      break;
 800530c:	e02c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	461a      	mov	r2, r3
 800531c:	f000 fd04 	bl	8005d28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2160      	movs	r1, #96	; 0x60
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fda4 	bl	8005e74 <TIM_ITRx_SetConfig>
      break;
 800532c:	e01c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	f000 fc8a 	bl	8005c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fd94 	bl	8005e74 <TIM_ITRx_SetConfig>
      break;
 800534c:	e00c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 fd8b 	bl	8005e74 <TIM_ITRx_SetConfig>
      break;
 800535e:	e003      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e000      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d831      	bhi.n	80053fc <HAL_TIM_ReadCapturedValue+0x78>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053d5 	.word	0x080053d5
 80053a4:	080053fd 	.word	0x080053fd
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	080053df 	.word	0x080053df
 80053b4:	080053fd 	.word	0x080053fd
 80053b8:	080053fd 	.word	0x080053fd
 80053bc:	080053fd 	.word	0x080053fd
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053fd 	.word	0x080053fd
 80053c8:	080053fd 	.word	0x080053fd
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	080053f3 	.word	0x080053f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	60fb      	str	r3, [r7, #12]

      break;
 80053dc:	e00f      	b.n	80053fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	60fb      	str	r3, [r7, #12]

      break;
 80053e6:	e00a      	b.n	80053fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	60fb      	str	r3, [r7, #12]

      break;
 80053f0:	e005      	b.n	80053fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	60fb      	str	r3, [r7, #12]

      break;
 80053fa:	e000      	b.n	80053fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80053fc:	bf00      	nop
  }

  return tmpreg;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop

0800540c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
	...

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a41      	ldr	r2, [pc, #260]	; (800555c <TIM_Base_SetConfig+0x118>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3e      	ldr	r2, [pc, #248]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3d      	ldr	r2, [pc, #244]	; (8005564 <TIM_Base_SetConfig+0x120>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3c      	ldr	r2, [pc, #240]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3b      	ldr	r2, [pc, #236]	; (800556c <TIM_Base_SetConfig+0x128>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a30      	ldr	r2, [pc, #192]	; (800555c <TIM_Base_SetConfig+0x118>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01f      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d01b      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d017      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <TIM_Base_SetConfig+0x120>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <TIM_Base_SetConfig+0x124>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00f      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00b      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2a      	ldr	r2, [pc, #168]	; (8005574 <TIM_Base_SetConfig+0x130>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d007      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a29      	ldr	r2, [pc, #164]	; (8005578 <TIM_Base_SetConfig+0x134>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a24      	ldr	r2, [pc, #144]	; (800556c <TIM_Base_SetConfig+0x128>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d108      	bne.n	80054f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a11      	ldr	r2, [pc, #68]	; (800555c <TIM_Base_SetConfig+0x118>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a12      	ldr	r2, [pc, #72]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00f      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a12      	ldr	r2, [pc, #72]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00b      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a11      	ldr	r2, [pc, #68]	; (8005574 <TIM_Base_SetConfig+0x130>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a10      	ldr	r2, [pc, #64]	; (8005578 <TIM_Base_SetConfig+0x134>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0b      	ldr	r2, [pc, #44]	; (800556c <TIM_Base_SetConfig+0x128>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	615a      	str	r2, [r3, #20]
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40013400 	.word	0x40013400
 800556c:	40015000 	.word	0x40015000
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0201 	bic.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 0302 	bic.w	r3, r3, #2
 80055c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a30      	ldr	r2, [pc, #192]	; (8005698 <TIM_OC1_SetConfig+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <TIM_OC1_SetConfig+0x88>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a2f      	ldr	r2, [pc, #188]	; (800569c <TIM_OC1_SetConfig+0x120>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00f      	beq.n	8005604 <TIM_OC1_SetConfig+0x88>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a2e      	ldr	r2, [pc, #184]	; (80056a0 <TIM_OC1_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_OC1_SetConfig+0x88>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a2d      	ldr	r2, [pc, #180]	; (80056a4 <TIM_OC1_SetConfig+0x128>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_OC1_SetConfig+0x88>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a2c      	ldr	r2, [pc, #176]	; (80056a8 <TIM_OC1_SetConfig+0x12c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC1_SetConfig+0x88>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <TIM_OC1_SetConfig+0x130>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10c      	bne.n	800561e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0308 	bic.w	r3, r3, #8
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0304 	bic.w	r3, r3, #4
 800561c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <TIM_OC1_SetConfig+0x11c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <TIM_OC1_SetConfig+0xd2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1c      	ldr	r2, [pc, #112]	; (800569c <TIM_OC1_SetConfig+0x120>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00f      	beq.n	800564e <TIM_OC1_SetConfig+0xd2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <TIM_OC1_SetConfig+0x124>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_OC1_SetConfig+0xd2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <TIM_OC1_SetConfig+0x128>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_OC1_SetConfig+0xd2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <TIM_OC1_SetConfig+0x12c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_OC1_SetConfig+0xd2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a18      	ldr	r2, [pc, #96]	; (80056ac <TIM_OC1_SetConfig+0x130>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d111      	bne.n	8005672 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800565c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	621a      	str	r2, [r3, #32]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40013400 	.word	0x40013400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800
 80056ac:	40015000 	.word	0x40015000

080056b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0210 	bic.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0320 	bic.w	r3, r3, #32
 80056fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <TIM_OC2_SetConfig+0x10c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <TIM_OC2_SetConfig+0x74>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a2a      	ldr	r2, [pc, #168]	; (80057c0 <TIM_OC2_SetConfig+0x110>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC2_SetConfig+0x74>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a29      	ldr	r2, [pc, #164]	; (80057c4 <TIM_OC2_SetConfig+0x114>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d10d      	bne.n	8005740 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <TIM_OC2_SetConfig+0x10c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <TIM_OC2_SetConfig+0xc0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <TIM_OC2_SetConfig+0x110>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00f      	beq.n	8005770 <TIM_OC2_SetConfig+0xc0>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <TIM_OC2_SetConfig+0x118>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00b      	beq.n	8005770 <TIM_OC2_SetConfig+0xc0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <TIM_OC2_SetConfig+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d007      	beq.n	8005770 <TIM_OC2_SetConfig+0xc0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <TIM_OC2_SetConfig+0x120>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_OC2_SetConfig+0xc0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <TIM_OC2_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d113      	bne.n	8005798 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005776:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800577e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40013400 	.word	0x40013400
 80057c4:	40015000 	.word	0x40015000
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800

080057d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <TIM_OC3_SetConfig+0x10c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_OC3_SetConfig+0x72>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_OC3_SetConfig+0x110>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_OC3_SetConfig+0x72>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <TIM_OC3_SetConfig+0x114>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d10d      	bne.n	8005862 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800584c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005860:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <TIM_OC3_SetConfig+0x10c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <TIM_OC3_SetConfig+0x110>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00f      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <TIM_OC3_SetConfig+0x118>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00b      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <TIM_OC3_SetConfig+0x11c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d007      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <TIM_OC3_SetConfig+0x120>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC3_SetConfig+0xbe>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <TIM_OC3_SetConfig+0x114>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d113      	bne.n	80058ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40015000 	.word	0x40015000
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800

080058f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a19      	ldr	r2, [pc, #100]	; (80059bc <TIM_OC4_SetConfig+0xc4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <TIM_OC4_SetConfig+0x8c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <TIM_OC4_SetConfig+0xc8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_OC4_SetConfig+0x8c>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <TIM_OC4_SetConfig+0xcc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_OC4_SetConfig+0x8c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <TIM_OC4_SetConfig+0xd0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_OC4_SetConfig+0x8c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a15      	ldr	r2, [pc, #84]	; (80059cc <TIM_OC4_SetConfig+0xd4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC4_SetConfig+0x8c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <TIM_OC4_SetConfig+0xd8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d109      	bne.n	8005998 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	40015000 	.word	0x40015000

080059d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <TIM_OC5_SetConfig+0xbc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a18      	ldr	r2, [pc, #96]	; (8005a94 <TIM_OC5_SetConfig+0xc0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <TIM_OC5_SetConfig+0xc4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <TIM_OC5_SetConfig+0xc8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <TIM_OC5_SetConfig+0xcc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <TIM_OC5_SetConfig+0xd0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d109      	bne.n	8005a6a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40013400 	.word	0x40013400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40015000 	.word	0x40015000

08005aa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <TIM_OC6_SetConfig+0xbc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <TIM_OC6_SetConfig+0xc0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <TIM_OC6_SetConfig+0xc4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <TIM_OC6_SetConfig+0xc8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <TIM_OC6_SetConfig+0xcc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <TIM_OC6_SetConfig+0xd0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40013400 	.word	0x40013400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800
 8005b78:	40015000 	.word	0x40015000

08005b7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0201 	bic.w	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a25      	ldr	r2, [pc, #148]	; (8005c3c <TIM_TI1_SetConfig+0xc0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d017      	beq.n	8005bda <TIM_TI1_SetConfig+0x5e>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb0:	d013      	beq.n	8005bda <TIM_TI1_SetConfig+0x5e>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <TIM_TI1_SetConfig+0xc4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00f      	beq.n	8005bda <TIM_TI1_SetConfig+0x5e>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <TIM_TI1_SetConfig+0xc8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00b      	beq.n	8005bda <TIM_TI1_SetConfig+0x5e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <TIM_TI1_SetConfig+0xcc>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d007      	beq.n	8005bda <TIM_TI1_SetConfig+0x5e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <TIM_TI1_SetConfig+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_TI1_SetConfig+0x5e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <TIM_TI1_SetConfig+0xd4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d101      	bne.n	8005bde <TIM_TI1_SetConfig+0x62>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <TIM_TI1_SetConfig+0x64>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e003      	b.n	8005bfe <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f023 030a 	bic.w	r3, r3, #10
 8005c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 030a 	and.w	r3, r3, #10
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40015000 	.word	0x40015000

08005c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0201 	bic.w	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f023 030a 	bic.w	r3, r3, #10
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0210 	bic.w	r2, r3, #16
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	031b      	lsls	r3, r3, #12
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f023 0210 	bic.w	r2, r3, #16
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	031b      	lsls	r3, r3, #12
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	621a      	str	r2, [r3, #32]
}
 8005d7c:	bf00      	nop
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b087      	sub	sp, #28
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr

08005dfc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	031b      	lsls	r3, r3, #12
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	031b      	lsls	r3, r3, #12
 8005e54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr

08005e74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f043 0307 	orr.w	r3, r3, #7
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	609a      	str	r2, [r3, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	021a      	lsls	r2, r3, #8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b087      	sub	sp, #28
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2201      	movs	r2, #1
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	401a      	ands	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e06d      	b.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a30      	ldr	r2, [pc, #192]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d108      	bne.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d01d      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a16      	ldr	r2, [pc, #88]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a11      	ldr	r2, [pc, #68]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d10c      	bne.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	4313      	orrs	r3, r2
 8006008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40013400 	.word	0x40013400
 8006038:	40015000 	.word	0x40015000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40014000 	.word	0x40014000

08006048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr

0800606c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
	...

08006080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0a7      	b.n	80061e2 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d12c      	bne.n	80060f8 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a50      	ldr	r2, [pc, #320]	; (80061ec <HAL_I2C_Init+0x16c>)
 80060aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a50      	ldr	r2, [pc, #320]	; (80061f0 <HAL_I2C_Init+0x170>)
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a4f      	ldr	r2, [pc, #316]	; (80061f4 <HAL_I2C_Init+0x174>)
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a4f      	ldr	r2, [pc, #316]	; (80061f8 <HAL_I2C_Init+0x178>)
 80060bc:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a4e      	ldr	r2, [pc, #312]	; (80061fc <HAL_I2C_Init+0x17c>)
 80060c2:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a4e      	ldr	r2, [pc, #312]	; (8006200 <HAL_I2C_Init+0x180>)
 80060c8:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a4d      	ldr	r2, [pc, #308]	; (8006204 <HAL_I2C_Init+0x184>)
 80060ce:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a4d      	ldr	r2, [pc, #308]	; (8006208 <HAL_I2C_Init+0x188>)
 80060d4:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a4c      	ldr	r2, [pc, #304]	; (800620c <HAL_I2C_Init+0x18c>)
 80060da:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a4c      	ldr	r2, [pc, #304]	; (8006210 <HAL_I2C_Init+0x190>)
 80060e0:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a49      	ldr	r2, [pc, #292]	; (8006214 <HAL_I2C_Init+0x194>)
 80060ee:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2224      	movs	r2, #36	; 0x24
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0201 	bic.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800611c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800612c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d107      	bne.n	8006146 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	e006      	b.n	8006154 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d104      	bne.n	8006166 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	08006629 	.word	0x08006629
 80061f0:	0800663b 	.word	0x0800663b
 80061f4:	0800664d 	.word	0x0800664d
 80061f8:	0800665f 	.word	0x0800665f
 80061fc:	0800668b 	.word	0x0800668b
 8006200:	0800b7dd 	.word	0x0800b7dd
 8006204:	0800b7fd 	.word	0x0800b7fd
 8006208:	0800b81d 	.word	0x0800b81d
 800620c:	0800669d 	.word	0x0800669d
 8006210:	08006671 	.word	0x08006671
 8006214:	08008205 	.word	0x08008205

08006218 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	; 0x28
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4603      	mov	r3, r0
 8006228:	817b      	strh	r3, [r7, #10]
 800622a:	460b      	mov	r3, r1
 800622c:	813b      	strh	r3, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b20      	cmp	r3, #32
 800623c:	f040 80d5 	bne.w	80063ea <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_I2C_Mem_Write_DMA+0x34>
 8006246:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006252:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0c9      	b.n	80063ec <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006266:	d101      	bne.n	800626c <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8006268:	2302      	movs	r3, #2
 800626a:	e0bf      	b.n	80063ec <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_I2C_Mem_Write_DMA+0x62>
 8006276:	2302      	movs	r3, #2
 8006278:	e0b8      	b.n	80063ec <HAL_I2C_Mem_Write_DMA+0x1d4>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006282:	f001 fdaf 	bl	8007de4 <HAL_GetTick>
 8006286:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2221      	movs	r2, #33	; 0x21
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2240      	movs	r2, #64	; 0x40
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80062a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a51      	ldr	r2, [pc, #324]	; (80063f4 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a51      	ldr	r2, [pc, #324]	; (80063f8 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80062b4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2bff      	cmp	r3, #255	; 0xff
 80062be:	d906      	bls.n	80062ce <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	22ff      	movs	r2, #255	; 0xff
 80062c4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80062c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	e007      	b.n	80062de <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80062d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062dc:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 80062de:	88f8      	ldrh	r0, [r7, #6]
 80062e0:	893a      	ldrh	r2, [r7, #8]
 80062e2:	8979      	ldrh	r1, [r7, #10]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	2319      	movs	r3, #25
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4603      	mov	r3, r0
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fca2 	bl	8006c38 <I2C_RequestMemoryWrite>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e072      	b.n	80063ec <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	d020      	beq.n	8006350 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	4a3a      	ldr	r2, [pc, #232]	; (80063fc <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8006314:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	4a39      	ldr	r2, [pc, #228]	; (8006400 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 800631c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	2200      	movs	r2, #0
 8006324:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	2200      	movs	r2, #0
 800632c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3328      	adds	r3, #40	; 0x28
 800633a:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8006340:	f7fd feb9 	bl	80040b6 <HAL_DMA_Start_IT>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d139      	bne.n	80063c2 <HAL_I2C_Mem_Write_DMA+0x1aa>
 800634e:	e013      	b.n	8006378 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006364:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e039      	b.n	80063ec <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637c:	b2da      	uxtb	r2, r3
 800637e:	8979      	ldrh	r1, [r7, #10]
 8006380:	2300      	movs	r3, #0
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f001 fb2a 	bl	80079e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80063a6:	2110      	movs	r1, #16
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f001 fb45 	bl	8007a38 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063bc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e014      	b.n	80063ec <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	f043 0210 	orr.w	r2, r3, #16
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	ffff0000 	.word	0xffff0000
 80063f8:	080068b5 	.word	0x080068b5
 80063fc:	0800765d 	.word	0x0800765d
 8006400:	08007789 	.word	0x08007789

08006404 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	; 0x28
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	4608      	mov	r0, r1
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	4603      	mov	r3, r0
 8006414:	817b      	strh	r3, [r7, #10]
 8006416:	460b      	mov	r3, r1
 8006418:	813b      	strh	r3, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b20      	cmp	r3, #32
 8006428:	f040 80d5 	bne.w	80065d6 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_I2C_Mem_Read_DMA+0x34>
 8006432:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0c9      	b.n	80065d8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800644e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006452:	d101      	bne.n	8006458 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
 8006456:	e0bf      	b.n	80065d8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_I2C_Mem_Read_DMA+0x62>
 8006462:	2302      	movs	r3, #2
 8006464:	e0b8      	b.n	80065d8 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800646e:	f001 fcb9 	bl	8007de4 <HAL_GetTick>
 8006472:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2222      	movs	r2, #34	; 0x22
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4a51      	ldr	r2, [pc, #324]	; (80065e0 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800649a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a51      	ldr	r2, [pc, #324]	; (80065e4 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80064a0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2bff      	cmp	r3, #255	; 0xff
 80064aa:	d906      	bls.n	80064ba <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	22ff      	movs	r2, #255	; 0xff
 80064b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80064b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e007      	b.n	80064ca <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80064c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064c8:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80064ca:	88f8      	ldrh	r0, [r7, #6]
 80064cc:	893a      	ldrh	r2, [r7, #8]
 80064ce:	8979      	ldrh	r1, [r7, #10]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	2319      	movs	r3, #25
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	4603      	mov	r3, r0
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fc00 	bl	8006ce0 <I2C_RequestMemoryRead>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e072      	b.n	80065d8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d020      	beq.n	800653c <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	4a3a      	ldr	r2, [pc, #232]	; (80065e8 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8006500:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	4a39      	ldr	r2, [pc, #228]	; (80065ec <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8006508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	2200      	movs	r2, #0
 8006510:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	2200      	movs	r2, #0
 8006518:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	4619      	mov	r1, r3
 8006526:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800652c:	f7fd fdc3 	bl	80040b6 <HAL_DMA_Start_IT>
 8006530:	4603      	mov	r3, r0
 8006532:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d139      	bne.n	80065ae <HAL_I2C_Mem_Read_DMA+0x1aa>
 800653a:	e013      	b.n	8006564 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e039      	b.n	80065d8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	4b20      	ldr	r3, [pc, #128]	; (80065f0 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f001 fa34 	bl	80079e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006592:	2110      	movs	r1, #16
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f001 fa4f 	bl	8007a38 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	e014      	b.n	80065d8 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	f043 0210 	orr.w	r2, r3, #16
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80065d6:	2302      	movs	r3, #2
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	ffff0000 	.word	0xffff0000
 80065e4:	080068b5 	.word	0x080068b5
 80065e8:	080076f3 	.word	0x080076f3
 80065ec:	08007789 	.word	0x08007789
 80065f0:	80002400 	.word	0x80002400

080065f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
  }
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr

0800665e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
 800667c:	4613      	mov	r3, r2
 800667e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <I2C_Slave_ISR_IT+0x24>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e0e1      	b.n	80068ac <I2C_Slave_ISR_IT+0x1e8>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006704:	6939      	ldr	r1, [r7, #16]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fd2c 	bl	8007164 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	d04b      	beq.n	80067ae <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800671c:	2b00      	cmp	r3, #0
 800671e:	d046      	beq.n	80067ae <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d128      	bne.n	800677c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b28      	cmp	r3, #40	; 0x28
 8006734:	d108      	bne.n	8006748 <I2C_Slave_ISR_IT+0x84>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800673c:	d104      	bne.n	8006748 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800673e:	6939      	ldr	r1, [r7, #16]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fe19 	bl	8007378 <I2C_ITListenCplt>
 8006746:	e031      	b.n	80067ac <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b29      	cmp	r3, #41	; 0x29
 8006752:	d10e      	bne.n	8006772 <I2C_Slave_ISR_IT+0xae>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800675a:	d00a      	beq.n	8006772 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2210      	movs	r2, #16
 8006762:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 ff56 	bl	8007616 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fbcf 	bl	8006f0e <I2C_ITSlaveSeqCplt>
 8006770:	e01c      	b.n	80067ac <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2210      	movs	r2, #16
 8006778:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800677a:	e08f      	b.n	800689c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2210      	movs	r2, #16
 8006782:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	f043 0204 	orr.w	r2, r3, #4
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <I2C_Slave_ISR_IT+0xda>
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800679c:	d17e      	bne.n	800689c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	4619      	mov	r1, r3
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fe3d 	bl	8007424 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067aa:	e077      	b.n	800689c <I2C_Slave_ISR_IT+0x1d8>
 80067ac:	e076      	b.n	800689c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02f      	beq.n	8006818 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d02a      	beq.n	8006818 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d018      	beq.n	80067fe <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d14b      	bne.n	80068a0 <I2C_Slave_ISR_IT+0x1dc>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800680e:	d047      	beq.n	80068a0 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fb7c 	bl	8006f0e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006816:	e043      	b.n	80068a0 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800682c:	6939      	ldr	r1, [r7, #16]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 faaa 	bl	8006d88 <I2C_ITAddrCplt>
 8006834:	e035      	b.n	80068a2 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d030      	beq.n	80068a2 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02b      	beq.n	80068a2 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d018      	beq.n	8006886 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	851a      	strh	r2, [r3, #40]	; 0x28
 8006884:	e00d      	b.n	80068a2 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800688c:	d002      	beq.n	8006894 <I2C_Slave_ISR_IT+0x1d0>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fb3a 	bl	8006f0e <I2C_ITSlaveSeqCplt>
 800689a:	e002      	b.n	80068a2 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800689c:	bf00      	nop
 800689e:	e000      	b.n	80068a2 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80068a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <I2C_Master_ISR_DMA+0x1a>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e0d9      	b.n	8006a82 <I2C_Master_ISR_DMA+0x1ce>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d016      	beq.n	800690e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2210      	movs	r2, #16
 80068f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	f043 0204 	orr.w	r2, r3, #4
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80068fe:	2120      	movs	r1, #32
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f001 f899 	bl	8007a38 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fe85 	bl	8007616 <I2C_Flush_TXDR>
 800690c:	e0b4      	b.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d071      	beq.n	80069fc <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800691e:	2b00      	cmp	r3, #0
 8006920:	d06c      	beq.n	80069fc <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006930:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d04e      	beq.n	80069da <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006948:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	2bff      	cmp	r3, #255	; 0xff
 8006952:	d906      	bls.n	8006962 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	; 0xff
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800695a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e010      	b.n	8006984 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006974:	d003      	beq.n	800697e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	e002      	b.n	8006984 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800697e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006982:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006988:	b2da      	uxtb	r2, r3
 800698a:	8a79      	ldrh	r1, [r7, #18]
 800698c:	2300      	movs	r3, #0
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f001 f824 	bl	80079e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b22      	cmp	r3, #34	; 0x22
 80069b4:	d108      	bne.n	80069c8 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069c6:	e057      	b.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069d8:	e04e      	b.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069e8:	d003      	beq.n	80069f2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa50 	bl	8006e90 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80069f0:	e042      	b.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069f2:	2140      	movs	r1, #64	; 0x40
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fd15 	bl	8007424 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80069fa:	e03d      	b.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d028      	beq.n	8006a58 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d023      	beq.n	8006a58 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d119      	bne.n	8006a4e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a28:	d025      	beq.n	8006a76 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a32:	d108      	bne.n	8006a46 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a42:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a44:	e017      	b.n	8006a76 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fa22 	bl	8006e90 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006a4c:	e013      	b.n	8006a76 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a4e:	2140      	movs	r1, #64	; 0x40
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 fce7 	bl	8007424 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a56:	e00e      	b.n	8006a76 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 faac 	bl	8006fcc <I2C_ITMasterCplt>
 8006a74:	e000      	b.n	8006a78 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006a76:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b088      	sub	sp, #32
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <I2C_Slave_ISR_DMA+0x24>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e0bf      	b.n	8006c2e <I2C_Slave_ISR_DMA+0x1a4>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fb49 	bl	8007164 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8095 	beq.w	8006c08 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 808f 	beq.w	8006c08 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d104      	bne.n	8006afe <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d07d      	beq.n	8006bfa <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <I2C_Slave_ISR_DMA+0x96>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00c      	beq.n	8006b42 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d128      	bne.n	8006b9a <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b28      	cmp	r3, #40	; 0x28
 8006b52:	d108      	bne.n	8006b66 <I2C_Slave_ISR_DMA+0xdc>
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b5a:	d104      	bne.n	8006b66 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 fc0a 	bl	8007378 <I2C_ITListenCplt>
 8006b64:	e048      	b.n	8006bf8 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b29      	cmp	r3, #41	; 0x29
 8006b70:	d10e      	bne.n	8006b90 <I2C_Slave_ISR_DMA+0x106>
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b78:	d00a      	beq.n	8006b90 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2210      	movs	r2, #16
 8006b80:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fd47 	bl	8007616 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f9c0 	bl	8006f0e <I2C_ITSlaveSeqCplt>
 8006b8e:	e033      	b.n	8006bf8 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2210      	movs	r2, #16
 8006b96:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006b98:	e034      	b.n	8006c04 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	f043 0204 	orr.w	r2, r3, #4
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bb4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <I2C_Slave_ISR_DMA+0x13a>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bc2:	d11f      	bne.n	8006c04 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b21      	cmp	r3, #33	; 0x21
 8006bc8:	d002      	beq.n	8006bd0 <I2C_Slave_ISR_DMA+0x146>
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2b29      	cmp	r3, #41	; 0x29
 8006bce:	d103      	bne.n	8006bd8 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2221      	movs	r2, #33	; 0x21
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd6:	e008      	b.n	8006bea <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	2b22      	cmp	r3, #34	; 0x22
 8006bdc:	d002      	beq.n	8006be4 <I2C_Slave_ISR_DMA+0x15a>
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	2b2a      	cmp	r3, #42	; 0x2a
 8006be2:	d102      	bne.n	8006bea <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2222      	movs	r2, #34	; 0x22
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	4619      	mov	r1, r3
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fc17 	bl	8007424 <I2C_ITError>
      if (treatdmanack == 1U)
 8006bf6:	e005      	b.n	8006c04 <I2C_Slave_ISR_DMA+0x17a>
 8006bf8:	e004      	b.n	8006c04 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c02:	e00f      	b.n	8006c24 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8006c04:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c06:	e00d      	b.n	8006c24 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d008      	beq.n	8006c24 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f8b2 	bl	8006d88 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	4608      	mov	r0, r1
 8006c42:	4611      	mov	r1, r2
 8006c44:	461a      	mov	r2, r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	817b      	strh	r3, [r7, #10]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	813b      	strh	r3, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	8979      	ldrh	r1, [r7, #10]
 8006c58:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <I2C_RequestMemoryWrite+0xa4>)
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 febd 	bl	80079e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	69b9      	ldr	r1, [r7, #24]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fe01 	bl	8007872 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e02c      	b.n	8006cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c80:	893b      	ldrh	r3, [r7, #8]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
 8006c8a:	e015      	b.n	8006cb8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c8c:	893b      	ldrh	r3, [r7, #8]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	69b9      	ldr	r1, [r7, #24]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fde7 	bl	8007872 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e012      	b.n	8006cd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cae:	893b      	ldrh	r3, [r7, #8]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2180      	movs	r1, #128	; 0x80
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fd95 	bl	80077f2 <I2C_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	80002000 	.word	0x80002000

08006ce0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	817b      	strh	r3, [r7, #10]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	813b      	strh	r3, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006cfa:	88fb      	ldrh	r3, [r7, #6]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	8979      	ldrh	r1, [r7, #10]
 8006d00:	4b20      	ldr	r3, [pc, #128]	; (8006d84 <I2C_RequestMemoryRead+0xa4>)
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fe6a 	bl	80079e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	69b9      	ldr	r1, [r7, #24]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 fdae 	bl	8007872 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e02c      	b.n	8006d7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d105      	bne.n	8006d32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d26:	893b      	ldrh	r3, [r7, #8]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d30:	e015      	b.n	8006d5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d32:	893b      	ldrh	r3, [r7, #8]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	69b9      	ldr	r1, [r7, #24]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fd94 	bl	8007872 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e012      	b.n	8006d7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d54:	893b      	ldrh	r3, [r7, #8]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2200      	movs	r2, #0
 8006d66:	2140      	movs	r1, #64	; 0x40
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fd42 	bl	80077f2 <I2C_WaitOnFlagUntilTimeout>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	80002000 	.word	0x80002000

08006d88 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d9e:	2b28      	cmp	r3, #40	; 0x28
 8006da0:	d16a      	bne.n	8006e78 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006dc0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ddc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d138      	bne.n	8006e58 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006de6:	897b      	ldrh	r3, [r7, #10]
 8006de8:	09db      	lsrs	r3, r3, #7
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	89bb      	ldrh	r3, [r7, #12]
 8006dee:	4053      	eors	r3, r2
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f003 0306 	and.w	r3, r3, #6
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11c      	bne.n	8006e34 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006dfa:	897b      	ldrh	r3, [r7, #10]
 8006dfc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d13b      	bne.n	8006e88 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	89ba      	ldrh	r2, [r7, #12]
 8006e2c:	7bf9      	ldrb	r1, [r7, #15]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e32:	e029      	b.n	8006e88 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fe5d 	bl	8007afc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	89ba      	ldrh	r2, [r7, #12]
 8006e50:	7bf9      	ldrb	r1, [r7, #15]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
}
 8006e56:	e017      	b.n	8006e88 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fe4d 	bl	8007afc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	89ba      	ldrh	r2, [r7, #12]
 8006e70:	7bf9      	ldrb	r1, [r7, #15]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
}
 8006e76:	e007      	b.n	8006e88 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2208      	movs	r2, #8
 8006e7e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b21      	cmp	r3, #33	; 0x21
 8006eaa:	d116      	bne.n	8006eda <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2211      	movs	r2, #17
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fe1a 	bl	8007afc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ed8:	e015      	b.n	8006f06 <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2212      	movs	r2, #18
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006eee:	2102      	movs	r1, #2
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fe03 	bl	8007afc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e00c      	b.n	8006f5c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f5a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b29      	cmp	r3, #41	; 0x29
 8006f66:	d113      	bne.n	8006f90 <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2228      	movs	r2, #40	; 0x28
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2221      	movs	r2, #33	; 0x21
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f76:	2101      	movs	r1, #1
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fdbf 	bl	8007afc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f8e:	e018      	b.n	8006fc2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9a:	d112      	bne.n	8006fc2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2228      	movs	r2, #40	; 0x28
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2222      	movs	r2, #34	; 0x22
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006faa:	2102      	movs	r1, #2
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fda5 	bl	8007afc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b21      	cmp	r3, #33	; 0x21
 8006fec:	d107      	bne.n	8006ffe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fee:	2101      	movs	r1, #1
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fd83 	bl	8007afc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2211      	movs	r2, #17
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8006ffc:	e00c      	b.n	8007018 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b22      	cmp	r3, #34	; 0x22
 8007008:	d106      	bne.n	8007018 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800700a:	2102      	movs	r1, #2
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fd75 	bl	8007afc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2212      	movs	r2, #18
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b4e      	ldr	r3, [pc, #312]	; (800715c <I2C_ITMasterCplt+0x190>)
 8007024:	400b      	ands	r3, r1
 8007026:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a4b      	ldr	r2, [pc, #300]	; (8007160 <I2C_ITMasterCplt+0x194>)
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f003 0310 	and.w	r3, r3, #16
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2210      	movs	r2, #16
 8007044:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	f043 0204 	orr.w	r2, r3, #4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b60      	cmp	r3, #96	; 0x60
 800705c:	d10a      	bne.n	8007074 <I2C_ITMasterCplt+0xa8>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	b2db      	uxtb	r3, r3
 8007070:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007072:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 face 	bl	8007616 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b60      	cmp	r3, #96	; 0x60
 800708a:	d002      	beq.n	8007092 <I2C_ITMasterCplt+0xc6>
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d006      	beq.n	80070a0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f9c3 	bl	8007424 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800709e:	e058      	b.n	8007152 <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b21      	cmp	r3, #33	; 0x21
 80070aa:	d126      	bne.n	80070fa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d10c      	bne.n	80070e0 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
}
 80070de:	e038      	b.n	8007152 <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
}
 80070f8:	e02b      	b.n	8007152 <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b22      	cmp	r3, #34	; 0x22
 8007104:	d125      	bne.n	8007152 <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d10c      	bne.n	800713a <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
}
 8007138:	e00b      	b.n	8007152 <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
}
 8007152:	bf00      	nop
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	fe00e800 	.word	0xfe00e800
 8007160:	ffff0000 	.word	0xffff0000

08007164 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007180:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2220      	movs	r2, #32
 8007188:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	2b21      	cmp	r3, #33	; 0x21
 800718e:	d002      	beq.n	8007196 <I2C_ITSlaveCplt+0x32>
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	2b29      	cmp	r3, #41	; 0x29
 8007194:	d108      	bne.n	80071a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007196:	f248 0101 	movw	r1, #32769	; 0x8001
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fcae 	bl	8007afc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2221      	movs	r2, #33	; 0x21
 80071a4:	631a      	str	r2, [r3, #48]	; 0x30
 80071a6:	e00d      	b.n	80071c4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b22      	cmp	r3, #34	; 0x22
 80071ac:	d002      	beq.n	80071b4 <I2C_ITSlaveCplt+0x50>
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b2a      	cmp	r3, #42	; 0x2a
 80071b2:	d107      	bne.n	80071c4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80071b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fc9f 	bl	8007afc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2222      	movs	r2, #34	; 0x22
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6859      	ldr	r1, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4b64      	ldr	r3, [pc, #400]	; (8007370 <I2C_ITSlaveCplt+0x20c>)
 80071e0:	400b      	ands	r3, r1
 80071e2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa16 	bl	8007616 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d013      	beq.n	800721c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007202:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01f      	beq.n	800724c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	b29a      	uxth	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	855a      	strh	r2, [r3, #42]	; 0x2a
 800721a:	e017      	b.n	800724c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d012      	beq.n	800724c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007234:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d006      	beq.n	800724c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d020      	beq.n	8007298 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 0304 	bic.w	r3, r3, #4
 800725c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	f043 0204 	orr.w	r2, r3, #4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d010      	beq.n	80072e6 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f8aa 	bl	8007424 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b28      	cmp	r3, #40	; 0x28
 80072da:	d144      	bne.n	8007366 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80072dc:	6979      	ldr	r1, [r7, #20]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f84a 	bl	8007378 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072e4:	e03f      	b.n	8007366 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072ee:	d015      	beq.n	800731c <I2C_ITSlaveCplt+0x1b8>
    I2C_ITSlaveSeqCplt(hi2c);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fe0c 	bl	8006f0e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a1e      	ldr	r2, [pc, #120]	; (8007374 <I2C_ITSlaveCplt+0x210>)
 80072fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
}
 800731a:	e024      	b.n	8007366 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b22      	cmp	r3, #34	; 0x22
 8007326:	d10f      	bne.n	8007348 <I2C_ITSlaveCplt+0x1e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
}
 8007346:	e00e      	b.n	8007366 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
}
 8007366:	bf00      	nop
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	fe00e800 	.word	0xfe00e800
 8007374:	ffff0000 	.word	0xffff0000

08007378 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a26      	ldr	r2, [pc, #152]	; (8007420 <I2C_ITListenCplt+0xa8>)
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d022      	beq.n	80073f4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d012      	beq.n	80073f4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ec:	f043 0204 	orr.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb7f 	bl	8007afc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2210      	movs	r2, #16
 8007404:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	ffff0000 	.word	0xffff0000

08007424 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a5d      	ldr	r2, [pc, #372]	; (80075b8 <I2C_ITError+0x194>)
 8007442:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b28      	cmp	r3, #40	; 0x28
 800745a:	d005      	beq.n	8007468 <I2C_ITError+0x44>
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2b29      	cmp	r3, #41	; 0x29
 8007460:	d002      	beq.n	8007468 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b2a      	cmp	r3, #42	; 0x2a
 8007466:	d10b      	bne.n	8007480 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007468:	2103      	movs	r1, #3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fb46 	bl	8007afc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2228      	movs	r2, #40	; 0x28
 8007474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a50      	ldr	r2, [pc, #320]	; (80075bc <I2C_ITError+0x198>)
 800747c:	635a      	str	r2, [r3, #52]	; 0x34
 800747e:	e011      	b.n	80074a4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007480:	f248 0103 	movw	r1, #32771	; 0x8003
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fb39 	bl	8007afc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b60      	cmp	r3, #96	; 0x60
 8007494:	d003      	beq.n	800749e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d039      	beq.n	8007526 <I2C_ITError+0x102>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b11      	cmp	r3, #17
 80074b6:	d002      	beq.n	80074be <I2C_ITError+0x9a>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b21      	cmp	r3, #33	; 0x21
 80074bc:	d133      	bne.n	8007526 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074cc:	d107      	bne.n	80074de <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fc ff5f 	bl	80043a6 <HAL_DMA_GetState>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d017      	beq.n	800751e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	4a33      	ldr	r2, [pc, #204]	; (80075c0 <I2C_ITError+0x19c>)
 80074f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	4618      	mov	r0, r3
 8007504:	f7fc fe6e 	bl	80041e4 <HAL_DMA_Abort_IT>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d04d      	beq.n	80075aa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800751c:	e045      	b.n	80075aa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f850 	bl	80075c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007524:	e041      	b.n	80075aa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752a:	2b00      	cmp	r3, #0
 800752c:	d039      	beq.n	80075a2 <I2C_ITError+0x17e>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b12      	cmp	r3, #18
 8007532:	d002      	beq.n	800753a <I2C_ITError+0x116>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b22      	cmp	r3, #34	; 0x22
 8007538:	d133      	bne.n	80075a2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007548:	d107      	bne.n	800755a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007558:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	4618      	mov	r0, r3
 8007560:	f7fc ff21 	bl	80043a6 <HAL_DMA_GetState>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d017      	beq.n	800759a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756e:	4a14      	ldr	r2, [pc, #80]	; (80075c0 <I2C_ITError+0x19c>)
 8007570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	4618      	mov	r0, r3
 8007580:	f7fc fe30 	bl	80041e4 <HAL_DMA_Abort_IT>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d011      	beq.n	80075ae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007598:	e009      	b.n	80075ae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f812 	bl	80075c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075a0:	e005      	b.n	80075ae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f80e 	bl	80075c4 <I2C_TreatErrorCallback>
  }
}
 80075a8:	e002      	b.n	80075b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075aa:	bf00      	nop
 80075ac:	e000      	b.n	80075b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075ae:	bf00      	nop
}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	ffff0000 	.word	0xffff0000
 80075bc:	080066c5 	.word	0x080066c5
 80075c0:	080077b7 	.word	0x080077b7

080075c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b60      	cmp	r3, #96	; 0x60
 80075d6:	d10f      	bne.n	80075f8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075f6:	e00a      	b.n	800760e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b02      	cmp	r3, #2
 800762a:	d103      	bne.n	8007634 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2200      	movs	r2, #0
 8007632:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b01      	cmp	r3, #1
 8007640:	d007      	beq.n	8007652 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699a      	ldr	r2, [r3, #24]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0201 	orr.w	r2, r2, #1
 8007650:	619a      	str	r2, [r3, #24]
  }
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr

0800765c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007678:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767e:	b29b      	uxth	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007684:	2120      	movs	r1, #32
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f9d6 	bl	8007a38 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800768c:	e02d      	b.n	80076ea <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007696:	441a      	add	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2bff      	cmp	r3, #255	; 0xff
 80076a4:	d903      	bls.n	80076ae <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	22ff      	movs	r2, #255	; 0xff
 80076aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80076ac:	e004      	b.n	80076b8 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	4619      	mov	r1, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3328      	adds	r3, #40	; 0x28
 80076c8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80076ce:	f7fc fcf2 	bl	80040b6 <HAL_DMA_Start_IT>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80076d8:	2110      	movs	r1, #16
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fea2 	bl	8007424 <I2C_ITError>
}
 80076e0:	e003      	b.n	80076ea <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80076e2:	2140      	movs	r1, #64	; 0x40
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f9a7 	bl	8007a38 <I2C_Enable_IRQ>
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800770e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800771a:	2120      	movs	r1, #32
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f98b 	bl	8007a38 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007722:	e02d      	b.n	8007780 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800772c:	441a      	add	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007736:	b29b      	uxth	r3, r3
 8007738:	2bff      	cmp	r3, #255	; 0xff
 800773a:	d903      	bls.n	8007744 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	22ff      	movs	r2, #255	; 0xff
 8007740:	851a      	strh	r2, [r3, #40]	; 0x28
 8007742:	e004      	b.n	800774e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3324      	adds	r3, #36	; 0x24
 8007758:	4619      	mov	r1, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007764:	f7fc fca7 	bl	80040b6 <HAL_DMA_Start_IT>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800776e:	2110      	movs	r1, #16
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7ff fe57 	bl	8007424 <I2C_ITError>
}
 8007776:	e003      	b.n	8007780 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007778:	2140      	movs	r1, #64	; 0x40
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f95c 	bl	8007a38 <I2C_Enable_IRQ>
}
 8007780:	bf00      	nop
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077a4:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80077a6:	2110      	movs	r1, #16
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff fe3b 	bl	8007424 <I2C_ITError>
}
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	2200      	movs	r2, #0
 80077d2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e0:	2200      	movs	r2, #0
 80077e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff feed 	bl	80075c4 <I2C_TreatErrorCallback>
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007802:	e022      	b.n	800784a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d01e      	beq.n	800784a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780c:	f000 faea 	bl	8007de4 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d302      	bcc.n	8007822 <I2C_WaitOnFlagUntilTimeout+0x30>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d113      	bne.n	800784a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	f043 0220 	orr.w	r2, r3, #32
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e00f      	b.n	800786a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4013      	ands	r3, r2
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	429a      	cmp	r2, r3
 8007858:	bf0c      	ite	eq
 800785a:	2301      	moveq	r3, #1
 800785c:	2300      	movne	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	429a      	cmp	r2, r3
 8007866:	d0cd      	beq.n	8007804 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800787e:	e02c      	b.n	80078da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f835 	bl	80078f4 <I2C_IsAcknowledgeFailed>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e02a      	b.n	80078ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d01e      	beq.n	80078da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789c:	f000 faa2 	bl	8007de4 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d302      	bcc.n	80078b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d113      	bne.n	80078da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	f043 0220 	orr.w	r2, r3, #32
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e007      	b.n	80078ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d1cb      	bne.n	8007880 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b10      	cmp	r3, #16
 800790c:	d161      	bne.n	80079d2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800791c:	d02b      	beq.n	8007976 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800792c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800792e:	e022      	b.n	8007976 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d01e      	beq.n	8007976 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007938:	f000 fa54 	bl	8007de4 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	429a      	cmp	r2, r3
 8007946:	d302      	bcc.n	800794e <I2C_IsAcknowledgeFailed+0x5a>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d113      	bne.n	8007976 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	f043 0220 	orr.w	r2, r3, #32
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e02e      	b.n	80079d4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b20      	cmp	r3, #32
 8007982:	d1d5      	bne.n	8007930 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2210      	movs	r2, #16
 800798a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2220      	movs	r2, #32
 8007992:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fe3e 	bl	8007616 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6859      	ldr	r1, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	4b0d      	ldr	r3, [pc, #52]	; (80079dc <I2C_IsAcknowledgeFailed+0xe8>)
 80079a6:	400b      	ands	r3, r1
 80079a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	f043 0204 	orr.w	r2, r3, #4
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	fe00e800 	.word	0xfe00e800

080079e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	607b      	str	r3, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	817b      	strh	r3, [r7, #10]
 80079ee:	4613      	mov	r3, r2
 80079f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	0d5b      	lsrs	r3, r3, #21
 80079fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007a00:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <I2C_TransferConfig+0x54>)
 8007a02:	430b      	orrs	r3, r1
 8007a04:	43db      	mvns	r3, r3
 8007a06:	ea02 0103 	and.w	r1, r2, r3
 8007a0a:	897b      	ldrh	r3, [r7, #10]
 8007a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a10:	7a7b      	ldrb	r3, [r7, #9]
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr
 8007a34:	03ff63ff 	.word	0x03ff63ff

08007a38 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4c:	4a29      	ldr	r2, [pc, #164]	; (8007af4 <I2C_Enable_IRQ+0xbc>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d004      	beq.n	8007a5c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a56:	4a28      	ldr	r2, [pc, #160]	; (8007af8 <I2C_Enable_IRQ+0xc0>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d11d      	bne.n	8007a98 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007a5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	da03      	bge.n	8007a6c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007a6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	2b10      	cmp	r3, #16
 8007a70:	d103      	bne.n	8007a7a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007a78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a7a:	887b      	ldrh	r3, [r7, #2]
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d103      	bne.n	8007a88 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007a88:	887b      	ldrh	r3, [r7, #2]
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	d125      	bne.n	8007ada <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a94:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007a96:	e020      	b.n	8007ada <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007a98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da03      	bge.n	8007aa8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007aa6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007aa8:	887b      	ldrh	r3, [r7, #2]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007ab8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007aba:	887b      	ldrh	r3, [r7, #2]
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007aca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007acc:	887b      	ldrh	r3, [r7, #2]
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d103      	bne.n	8007ada <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f043 0320 	orr.w	r3, r3, #32
 8007ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	601a      	str	r2, [r3, #0]
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bc80      	pop	{r7}
 8007af2:	4770      	bx	lr
 8007af4:	080068b5 	.word	0x080068b5
 8007af8:	08006a8b 	.word	0x08006a8b

08007afc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b0c:	887b      	ldrh	r3, [r7, #2]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00f      	beq.n	8007b36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007b1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b2a:	2b28      	cmp	r3, #40	; 0x28
 8007b2c:	d003      	beq.n	8007b36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007b34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b36:	887b      	ldrh	r3, [r7, #2]
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00f      	beq.n	8007b60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007b46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b54:	2b28      	cmp	r3, #40	; 0x28
 8007b56:	d003      	beq.n	8007b60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007b5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	da03      	bge.n	8007b70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007b6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b70:	887b      	ldrh	r3, [r7, #2]
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d103      	bne.n	8007b7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007b7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b7e:	887b      	ldrh	r3, [r7, #2]
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d103      	bne.n	8007b8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f043 0320 	orr.w	r3, r3, #32
 8007b8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d103      	bne.n	8007b9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	400a      	ands	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d138      	bne.n	8007c3e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e032      	b.n	8007c40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2224      	movs	r2, #36	; 0x24
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0201 	bic.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6819      	ldr	r1, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0201 	orr.w	r2, r2, #1
 8007c28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d139      	bne.n	8007cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e033      	b.n	8007cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2224      	movs	r2, #36	; 0x24
 8007c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0201 	bic.w	r2, r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0201 	orr.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf0:	d10e      	bne.n	8007d10 <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8007cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007cf6:	4808      	ldr	r0, [pc, #32]	; (8007d18 <HAL_GPIO_EXTI_Callback+0x38>)
 8007cf8:	f7fc f950 	bl	8003f9c <HAL_GPIO_ReadPin>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d103      	bne.n	8007d0a <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 8007d02:	2001      	movs	r0, #1
 8007d04:	f004 fc1e 	bl	800c544 <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8007d08:	e002      	b.n	8007d10 <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f004 fc1a 	bl	800c544 <Rte_Write_PC13_Pin_State>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	48000800 	.word	0x48000800

08007d1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d20:	bf00      	nop
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d2c:	4b08      	ldr	r3, [pc, #32]	; (8007d50 <HAL_Init+0x28>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a07      	ldr	r2, [pc, #28]	; (8007d50 <HAL_Init+0x28>)
 8007d32:	f043 0310 	orr.w	r3, r3, #16
 8007d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d38:	2003      	movs	r0, #3
 8007d3a:	f000 f929 	bl	8007f90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d3e:	200f      	movs	r0, #15
 8007d40:	f000 f808 	bl	8007d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d44:	f000 f966 	bl	8008014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	40022000 	.word	0x40022000

08007d54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d5c:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <HAL_InitTick+0x60>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <HAL_InitTick+0x64>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	4619      	mov	r1, r3
 8007d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 f941 	bl	8007ffa <HAL_SYSTICK_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e014      	b.n	8007dac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b0f      	cmp	r3, #15
 8007d86:	d810      	bhi.n	8007daa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d88:	2200      	movs	r2, #0
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	f000 f909 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007d94:	2200      	movs	r2, #0
 8007d96:	210f      	movs	r1, #15
 8007d98:	f06f 0001 	mvn.w	r0, #1
 8007d9c:	f000 f903 	bl	8007fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007da0:	4a06      	ldr	r2, [pc, #24]	; (8007dbc <HAL_InitTick+0x68>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e000      	b.n	8007dac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000000 	.word	0x20000000
 8007db8:	20000008 	.word	0x20000008
 8007dbc:	20000004 	.word	0x20000004

08007dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <HAL_IncTick+0x1c>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <HAL_IncTick+0x20>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4413      	add	r3, r2
 8007dd0:	4a03      	ldr	r2, [pc, #12]	; (8007de0 <HAL_IncTick+0x20>)
 8007dd2:	6013      	str	r3, [r2, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr
 8007ddc:	20000008 	.word	0x20000008
 8007de0:	200001cc 	.word	0x200001cc

08007de4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  return uwTick;  
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <HAL_GetTick+0x10>)
 8007dea:	681b      	ldr	r3, [r3, #0]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr
 8007df4:	200001cc 	.word	0x200001cc

08007df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e08:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <__NVIC_SetPriorityGrouping+0x44>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e14:	4013      	ands	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e2a:	4a04      	ldr	r2, [pc, #16]	; (8007e3c <__NVIC_SetPriorityGrouping+0x44>)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	60d3      	str	r3, [r2, #12]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	e000ed00 	.word	0xe000ed00

08007e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <__NVIC_GetPriorityGrouping+0x18>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	0a1b      	lsrs	r3, r3, #8
 8007e4a:	f003 0307 	and.w	r3, r3, #7
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	e000ed00 	.word	0xe000ed00

08007e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	db0b      	blt.n	8007e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	f003 021f 	and.w	r2, r3, #31
 8007e74:	4906      	ldr	r1, [pc, #24]	; (8007e90 <__NVIC_EnableIRQ+0x34>)
 8007e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr
 8007e90:	e000e100 	.word	0xe000e100

08007e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	db0a      	blt.n	8007ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	490c      	ldr	r1, [pc, #48]	; (8007ee0 <__NVIC_SetPriority+0x4c>)
 8007eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb2:	0112      	lsls	r2, r2, #4
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ebc:	e00a      	b.n	8007ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	4908      	ldr	r1, [pc, #32]	; (8007ee4 <__NVIC_SetPriority+0x50>)
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	3b04      	subs	r3, #4
 8007ecc:	0112      	lsls	r2, r2, #4
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	761a      	strb	r2, [r3, #24]
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	e000e100 	.word	0xe000e100
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b089      	sub	sp, #36	; 0x24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f1c3 0307 	rsb	r3, r3, #7
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	bf28      	it	cs
 8007f06:	2304      	movcs	r3, #4
 8007f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	2b06      	cmp	r3, #6
 8007f10:	d902      	bls.n	8007f18 <NVIC_EncodePriority+0x30>
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	3b03      	subs	r3, #3
 8007f16:	e000      	b.n	8007f1a <NVIC_EncodePriority+0x32>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43da      	mvns	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f30:	f04f 31ff 	mov.w	r1, #4294967295
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3a:	43d9      	mvns	r1, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f40:	4313      	orrs	r3, r2
         );
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3724      	adds	r7, #36	; 0x24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f5c:	d301      	bcc.n	8007f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e00f      	b.n	8007f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f62:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <SysTick_Config+0x40>)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f6a:	210f      	movs	r1, #15
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	f7ff ff90 	bl	8007e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <SysTick_Config+0x40>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f7a:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <SysTick_Config+0x40>)
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	e000e010 	.word	0xe000e010

08007f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff2d 	bl	8007df8 <__NVIC_SetPriorityGrouping>
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4603      	mov	r3, r0
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fb8:	f7ff ff42 	bl	8007e40 <__NVIC_GetPriorityGrouping>
 8007fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	f7ff ff90 	bl	8007ee8 <NVIC_EncodePriority>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff ff5f 	bl	8007e94 <__NVIC_SetPriority>
}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ff35 	bl	8007e5c <__NVIC_EnableIRQ>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff ffa2 	bl	8007f4c <SysTick_Config>
 8008008:	4603      	mov	r3, r0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <HAL_MspInit+0x40>)
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	4a0d      	ldr	r2, [pc, #52]	; (8008054 <HAL_MspInit+0x40>)
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	6193      	str	r3, [r2, #24]
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_MspInit+0x40>)
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	607b      	str	r3, [r7, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008032:	4b08      	ldr	r3, [pc, #32]	; (8008054 <HAL_MspInit+0x40>)
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	4a07      	ldr	r2, [pc, #28]	; (8008054 <HAL_MspInit+0x40>)
 8008038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803c:	61d3      	str	r3, [r2, #28]
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_MspInit+0x40>)
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr
 8008054:	40021000 	.word	0x40021000

08008058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08c      	sub	sp, #48	; 0x30
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008060:	f107 031c 	add.w	r3, r7, #28
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	605a      	str	r2, [r3, #4]
 800806a:	609a      	str	r2, [r3, #8]
 800806c:	60da      	str	r2, [r3, #12]
 800806e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008078:	d156      	bne.n	8008128 <HAL_ADC_MspInit+0xd0>



  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800807a:	4b5b      	ldr	r3, [pc, #364]	; (80081e8 <HAL_ADC_MspInit+0x190>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3301      	adds	r3, #1
 8008080:	4a59      	ldr	r2, [pc, #356]	; (80081e8 <HAL_ADC_MspInit+0x190>)
 8008082:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8008084:	4b58      	ldr	r3, [pc, #352]	; (80081e8 <HAL_ADC_MspInit+0x190>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d10b      	bne.n	80080a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800808c:	4b57      	ldr	r3, [pc, #348]	; (80081ec <HAL_ADC_MspInit+0x194>)
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	4a56      	ldr	r2, [pc, #344]	; (80081ec <HAL_ADC_MspInit+0x194>)
 8008092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008096:	6153      	str	r3, [r2, #20]
 8008098:	4b54      	ldr	r3, [pc, #336]	; (80081ec <HAL_ADC_MspInit+0x194>)
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	69bb      	ldr	r3, [r7, #24]
    }



    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080a4:	4b51      	ldr	r3, [pc, #324]	; (80081ec <HAL_ADC_MspInit+0x194>)
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	4a50      	ldr	r2, [pc, #320]	; (80081ec <HAL_ADC_MspInit+0x194>)
 80080aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ae:	6153      	str	r3, [r2, #20]
 80080b0:	4b4e      	ldr	r3, [pc, #312]	; (80081ec <HAL_ADC_MspInit+0x194>)
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80080bc:	2301      	movs	r3, #1
 80080be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80080c0:	2303      	movs	r3, #3
 80080c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080c8:	f107 031c 	add.w	r3, r7, #28
 80080cc:	4619      	mov	r1, r3
 80080ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080d2:	f7fb fdd9 	bl	8003c88 <HAL_GPIO_Init>



    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80080d6:	4b46      	ldr	r3, [pc, #280]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 80080d8:	4a46      	ldr	r2, [pc, #280]	; (80081f4 <HAL_ADC_MspInit+0x19c>)
 80080da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80080dc:	4b44      	ldr	r3, [pc, #272]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 80080de:	2200      	movs	r2, #0
 80080e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80080e2:	4b43      	ldr	r3, [pc, #268]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80080e8:	4b41      	ldr	r3, [pc, #260]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 80080ea:	2280      	movs	r2, #128	; 0x80
 80080ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80080ee:	4b40      	ldr	r3, [pc, #256]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 80080f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80080f6:	4b3e      	ldr	r3, [pc, #248]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 80080f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80080fe:	4b3c      	ldr	r3, [pc, #240]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 8008100:	2220      	movs	r2, #32
 8008102:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008104:	4b3a      	ldr	r3, [pc, #232]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 8008106:	2200      	movs	r2, #0
 8008108:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800810a:	4839      	ldr	r0, [pc, #228]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 800810c:	f7fb ff8c 	bl	8004028 <HAL_DMA_Init>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_ADC_MspInit+0xc2>
    {
      Msp_Error_Handler();
 8008116:	f000 fa99 	bl	800864c <Msp_Error_Handler>
    }



    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a34      	ldr	r2, [pc, #208]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
 8008120:	4a33      	ldr	r2, [pc, #204]	; (80081f0 <HAL_ADC_MspInit+0x198>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END ADC2_MspInit 1 */
  }



}
 8008126:	e05a      	b.n	80081de <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a32      	ldr	r2, [pc, #200]	; (80081f8 <HAL_ADC_MspInit+0x1a0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d155      	bne.n	80081de <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8008132:	4b2d      	ldr	r3, [pc, #180]	; (80081e8 <HAL_ADC_MspInit+0x190>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	4a2b      	ldr	r2, [pc, #172]	; (80081e8 <HAL_ADC_MspInit+0x190>)
 800813a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800813c:	4b2a      	ldr	r3, [pc, #168]	; (80081e8 <HAL_ADC_MspInit+0x190>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d10b      	bne.n	800815c <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008144:	4b29      	ldr	r3, [pc, #164]	; (80081ec <HAL_ADC_MspInit+0x194>)
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	4a28      	ldr	r2, [pc, #160]	; (80081ec <HAL_ADC_MspInit+0x194>)
 800814a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800814e:	6153      	str	r3, [r2, #20]
 8008150:	4b26      	ldr	r3, [pc, #152]	; (80081ec <HAL_ADC_MspInit+0x194>)
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800815c:	4b23      	ldr	r3, [pc, #140]	; (80081ec <HAL_ADC_MspInit+0x194>)
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	4a22      	ldr	r2, [pc, #136]	; (80081ec <HAL_ADC_MspInit+0x194>)
 8008162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008166:	6153      	str	r3, [r2, #20]
 8008168:	4b20      	ldr	r3, [pc, #128]	; (80081ec <HAL_ADC_MspInit+0x194>)
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008174:	2310      	movs	r3, #16
 8008176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008178:	2303      	movs	r3, #3
 800817a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800817c:	2300      	movs	r3, #0
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008180:	f107 031c 	add.w	r3, r7, #28
 8008184:	4619      	mov	r1, r3
 8008186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800818a:	f7fb fd7d 	bl	8003c88 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800818e:	4b1b      	ldr	r3, [pc, #108]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 8008190:	4a1b      	ldr	r2, [pc, #108]	; (8008200 <HAL_ADC_MspInit+0x1a8>)
 8008192:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008194:	4b19      	ldr	r3, [pc, #100]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 8008196:	2200      	movs	r2, #0
 8008198:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800819a:	4b18      	ldr	r3, [pc, #96]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 800819c:	2200      	movs	r2, #0
 800819e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80081a0:	4b16      	ldr	r3, [pc, #88]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081a2:	2280      	movs	r2, #128	; 0x80
 80081a4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80081a6:	4b15      	ldr	r3, [pc, #84]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081ac:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80081ae:	4b13      	ldr	r3, [pc, #76]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081b4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081b8:	2220      	movs	r2, #32
 80081ba:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081be:	2200      	movs	r2, #0
 80081c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80081c2:	480e      	ldr	r0, [pc, #56]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081c4:	f7fb ff30 	bl	8004028 <HAL_DMA_Init>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_ADC_MspInit+0x17a>
      Msp_Error_Handler();
 80081ce:	f000 fa3d 	bl	800864c <Msp_Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a09      	ldr	r2, [pc, #36]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081d6:	639a      	str	r2, [r3, #56]	; 0x38
 80081d8:	4a08      	ldr	r2, [pc, #32]	; (80081fc <HAL_ADC_MspInit+0x1a4>)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6253      	str	r3, [r2, #36]	; 0x24
}
 80081de:	bf00      	nop
 80081e0:	3730      	adds	r7, #48	; 0x30
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	200001d0 	.word	0x200001d0
 80081ec:	40021000 	.word	0x40021000
 80081f0:	2000022c 	.word	0x2000022c
 80081f4:	40020008 	.word	0x40020008
 80081f8:	50000100 	.word	0x50000100
 80081fc:	200002c0 	.word	0x200002c0
 8008200:	40020408 	.word	0x40020408

08008204 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]
 800821a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a41      	ldr	r2, [pc, #260]	; (8008328 <HAL_I2C_MspInit+0x124>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d17c      	bne.n	8008320 <HAL_I2C_MspInit+0x11c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008226:	4b41      	ldr	r3, [pc, #260]	; (800832c <HAL_I2C_MspInit+0x128>)
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	4a40      	ldr	r2, [pc, #256]	; (800832c <HAL_I2C_MspInit+0x128>)
 800822c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008230:	6153      	str	r3, [r2, #20]
 8008232:	4b3e      	ldr	r3, [pc, #248]	; (800832c <HAL_I2C_MspInit+0x128>)
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800823e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008244:	2312      	movs	r3, #18
 8008246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008248:	2300      	movs	r3, #0
 800824a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800824c:	2303      	movs	r3, #3
 800824e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008250:	2304      	movs	r3, #4
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008254:	f107 0314 	add.w	r3, r7, #20
 8008258:	4619      	mov	r1, r3
 800825a:	4835      	ldr	r0, [pc, #212]	; (8008330 <HAL_I2C_MspInit+0x12c>)
 800825c:	f7fb fd14 	bl	8003c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008260:	4b32      	ldr	r3, [pc, #200]	; (800832c <HAL_I2C_MspInit+0x128>)
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	4a31      	ldr	r2, [pc, #196]	; (800832c <HAL_I2C_MspInit+0x128>)
 8008266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800826a:	61d3      	str	r3, [r2, #28]
 800826c:	4b2f      	ldr	r3, [pc, #188]	; (800832c <HAL_I2C_MspInit+0x128>)
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8008278:	4b2e      	ldr	r3, [pc, #184]	; (8008334 <HAL_I2C_MspInit+0x130>)
 800827a:	4a2f      	ldr	r2, [pc, #188]	; (8008338 <HAL_I2C_MspInit+0x134>)
 800827c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800827e:	4b2d      	ldr	r3, [pc, #180]	; (8008334 <HAL_I2C_MspInit+0x130>)
 8008280:	2200      	movs	r2, #0
 8008282:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008284:	4b2b      	ldr	r3, [pc, #172]	; (8008334 <HAL_I2C_MspInit+0x130>)
 8008286:	2200      	movs	r2, #0
 8008288:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800828a:	4b2a      	ldr	r3, [pc, #168]	; (8008334 <HAL_I2C_MspInit+0x130>)
 800828c:	2280      	movs	r2, #128	; 0x80
 800828e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008290:	4b28      	ldr	r3, [pc, #160]	; (8008334 <HAL_I2C_MspInit+0x130>)
 8008292:	2200      	movs	r2, #0
 8008294:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008296:	4b27      	ldr	r3, [pc, #156]	; (8008334 <HAL_I2C_MspInit+0x130>)
 8008298:	2200      	movs	r2, #0
 800829a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800829c:	4b25      	ldr	r3, [pc, #148]	; (8008334 <HAL_I2C_MspInit+0x130>)
 800829e:	2200      	movs	r2, #0
 80082a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <HAL_I2C_MspInit+0x130>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80082a8:	4822      	ldr	r0, [pc, #136]	; (8008334 <HAL_I2C_MspInit+0x130>)
 80082aa:	f7fb febd 	bl	8004028 <HAL_DMA_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_I2C_MspInit+0xb4>
    {
    	Msp_Error_Handler();
 80082b4:	f000 f9ca 	bl	800864c <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a1e      	ldr	r2, [pc, #120]	; (8008334 <HAL_I2C_MspInit+0x130>)
 80082bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80082be:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <HAL_I2C_MspInit+0x130>)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80082c4:	4b1d      	ldr	r3, [pc, #116]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <HAL_I2C_MspInit+0x13c>)
 80082c8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082ca:	4b1c      	ldr	r3, [pc, #112]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082cc:	2210      	movs	r2, #16
 80082ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082d0:	4b1a      	ldr	r3, [pc, #104]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80082d6:	4b19      	ldr	r3, [pc, #100]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082d8:	2280      	movs	r2, #128	; 0x80
 80082da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082dc:	4b17      	ldr	r3, [pc, #92]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082de:	2200      	movs	r2, #0
 80082e0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082e2:	4b16      	ldr	r3, [pc, #88]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80082e8:	4b14      	ldr	r3, [pc, #80]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80082f4:	4811      	ldr	r0, [pc, #68]	; (800833c <HAL_I2C_MspInit+0x138>)
 80082f6:	f7fb fe97 	bl	8004028 <HAL_DMA_Init>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <HAL_I2C_MspInit+0x100>
    {
    	Msp_Error_Handler();
 8008300:	f000 f9a4 	bl	800864c <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a0d      	ldr	r2, [pc, #52]	; (800833c <HAL_I2C_MspInit+0x138>)
 8008308:	639a      	str	r2, [r3, #56]	; 0x38
 800830a:	4a0c      	ldr	r2, [pc, #48]	; (800833c <HAL_I2C_MspInit+0x138>)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	201f      	movs	r0, #31
 8008316:	f7ff fe46 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800831a:	201f      	movs	r0, #31
 800831c:	f7ff fe5f 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008320:	bf00      	nop
 8008322:	3728      	adds	r7, #40	; 0x28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	40005400 	.word	0x40005400
 800832c:	40021000 	.word	0x40021000
 8008330:	48000400 	.word	0x48000400
 8008334:	20000380 	.word	0x20000380
 8008338:	40020080 	.word	0x40020080
 800833c:	200003c4 	.word	0x200003c4
 8008340:	4002006c 	.word	0x4002006c

08008344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	605a      	str	r2, [r3, #4]
 8008356:	609a      	str	r2, [r3, #8]
 8008358:	60da      	str	r2, [r3, #12]
 800835a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1b      	ldr	r2, [pc, #108]	; (80083d0 <HAL_SPI_MspInit+0x8c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d130      	bne.n	80083c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008366:	4b1b      	ldr	r3, [pc, #108]	; (80083d4 <HAL_SPI_MspInit+0x90>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	4a1a      	ldr	r2, [pc, #104]	; (80083d4 <HAL_SPI_MspInit+0x90>)
 800836c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008370:	61d3      	str	r3, [r2, #28]
 8008372:	4b18      	ldr	r3, [pc, #96]	; (80083d4 <HAL_SPI_MspInit+0x90>)
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <HAL_SPI_MspInit+0x90>)
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	4a14      	ldr	r2, [pc, #80]	; (80083d4 <HAL_SPI_MspInit+0x90>)
 8008384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008388:	6153      	str	r3, [r2, #20]
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <HAL_SPI_MspInit+0x90>)
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008396:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800839a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800839c:	2302      	movs	r3, #2
 800839e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083a4:	2303      	movs	r3, #3
 80083a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80083a8:	2306      	movs	r3, #6
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	4619      	mov	r1, r3
 80083b2:	4809      	ldr	r0, [pc, #36]	; (80083d8 <HAL_SPI_MspInit+0x94>)
 80083b4:	f7fb fc68 	bl	8003c88 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	2033      	movs	r0, #51	; 0x33
 80083be:	f7ff fdf2 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80083c2:	2033      	movs	r0, #51	; 0x33
 80083c4:	f7ff fe0b 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80083c8:	bf00      	nop
 80083ca:	3728      	adds	r7, #40	; 0x28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40003c00 	.word	0x40003c00
 80083d4:	40021000 	.word	0x40021000
 80083d8:	48000800 	.word	0x48000800

080083dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	; 0x28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e4:	f107 0314 	add.w	r3, r7, #20
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	60da      	str	r2, [r3, #12]
 80083f2:	611a      	str	r2, [r3, #16]
	if(htim_base->Instance==TIM3)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a24      	ldr	r2, [pc, #144]	; (800848c <HAL_TIM_Base_MspInit+0xb0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d131      	bne.n	8008462 <HAL_TIM_Base_MspInit+0x86>
	{
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 80083fe:	4b24      	ldr	r3, [pc, #144]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	4a23      	ldr	r2, [pc, #140]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	61d3      	str	r3, [r2, #28]
 800840a:	4b21      	ldr	r3, [pc, #132]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008416:	4b1e      	ldr	r3, [pc, #120]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 800841c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008420:	6153      	str	r3, [r2, #20]
 8008422:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
		/**TIM3 GPIO Configuration
		PA6     ------> TIM3_CH1
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008432:	2302      	movs	r3, #2
 8008434:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008436:	2300      	movs	r3, #0
 8008438:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800843a:	2300      	movs	r3, #0
 800843c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800843e:	2302      	movs	r3, #2
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008442:	f107 0314 	add.w	r3, r7, #20
 8008446:	4619      	mov	r1, r3
 8008448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800844c:	f7fb fc1c 	bl	8003c88 <HAL_GPIO_Init>

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008450:	2200      	movs	r2, #0
 8008452:	2100      	movs	r1, #0
 8008454:	201d      	movs	r0, #29
 8008456:	f7ff fda6 	bl	8007fa6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800845a:	201d      	movs	r0, #29
 800845c:	f7ff fdbf 	bl	8007fde <HAL_NVIC_EnableIRQ>
	  }
	else
	{

	}
}
 8008460:	e010      	b.n	8008484 <HAL_TIM_Base_MspInit+0xa8>
	else if(htim_base->Instance==TIM4)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a0b      	ldr	r2, [pc, #44]	; (8008494 <HAL_TIM_Base_MspInit+0xb8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d10b      	bne.n	8008484 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800846c:	4b08      	ldr	r3, [pc, #32]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	4a07      	ldr	r2, [pc, #28]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 8008472:	f043 0304 	orr.w	r3, r3, #4
 8008476:	61d3      	str	r3, [r2, #28]
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <HAL_TIM_Base_MspInit+0xb4>)
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	60bb      	str	r3, [r7, #8]
 8008482:	68bb      	ldr	r3, [r7, #8]
}
 8008484:	bf00      	nop
 8008486:	3728      	adds	r7, #40	; 0x28
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40000400 	.word	0x40000400
 8008490:	40021000 	.word	0x40021000
 8008494:	40000800 	.word	0x40000800

08008498 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a09      	ldr	r2, [pc, #36]	; (80084cc <HAL_TIM_PWM_MspInit+0x34>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d10b      	bne.n	80084c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80084aa:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <HAL_TIM_PWM_MspInit+0x38>)
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	4a08      	ldr	r2, [pc, #32]	; (80084d0 <HAL_TIM_PWM_MspInit+0x38>)
 80084b0:	f043 0304 	orr.w	r3, r3, #4
 80084b4:	61d3      	str	r3, [r2, #28]
 80084b6:	4b06      	ldr	r3, [pc, #24]	; (80084d0 <HAL_TIM_PWM_MspInit+0x38>)
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr
 80084cc:	40000800 	.word	0x40000800
 80084d0:	40021000 	.word	0x40021000

080084d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084dc:	f107 030c 	add.w	r3, r7, #12
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	609a      	str	r2, [r3, #8]
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a11      	ldr	r2, [pc, #68]	; (8008538 <HAL_TIM_MspPostInit+0x64>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d11b      	bne.n	800852e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084f6:	4b11      	ldr	r3, [pc, #68]	; (800853c <HAL_TIM_MspPostInit+0x68>)
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	4a10      	ldr	r2, [pc, #64]	; (800853c <HAL_TIM_MspPostInit+0x68>)
 80084fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008500:	6153      	str	r3, [r2, #20]
 8008502:	4b0e      	ldr	r3, [pc, #56]	; (800853c <HAL_TIM_MspPostInit+0x68>)
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800850a:	60bb      	str	r3, [r7, #8]
 800850c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800850e:	23c0      	movs	r3, #192	; 0xc0
 8008510:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008512:	2302      	movs	r3, #2
 8008514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800851e:	2302      	movs	r3, #2
 8008520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008522:	f107 030c 	add.w	r3, r7, #12
 8008526:	4619      	mov	r1, r3
 8008528:	4805      	ldr	r0, [pc, #20]	; (8008540 <HAL_TIM_MspPostInit+0x6c>)
 800852a:	f7fb fbad 	bl	8003c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800852e:	bf00      	nop
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40000800 	.word	0x40000800
 800853c:	40021000 	.word	0x40021000
 8008540:	48000400 	.word	0x48000400

08008544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08c      	sub	sp, #48	; 0x30
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800854c:	f107 031c 	add.w	r3, r7, #28
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	609a      	str	r2, [r3, #8]
 8008558:	60da      	str	r2, [r3, #12]
 800855a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a36      	ldr	r2, [pc, #216]	; (800863c <HAL_UART_MspInit+0xf8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d130      	bne.n	80085c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008566:	4b36      	ldr	r3, [pc, #216]	; (8008640 <HAL_UART_MspInit+0xfc>)
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	4a35      	ldr	r2, [pc, #212]	; (8008640 <HAL_UART_MspInit+0xfc>)
 800856c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008570:	6193      	str	r3, [r2, #24]
 8008572:	4b33      	ldr	r3, [pc, #204]	; (8008640 <HAL_UART_MspInit+0xfc>)
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800857a:	61bb      	str	r3, [r7, #24]
 800857c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800857e:	4b30      	ldr	r3, [pc, #192]	; (8008640 <HAL_UART_MspInit+0xfc>)
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	4a2f      	ldr	r2, [pc, #188]	; (8008640 <HAL_UART_MspInit+0xfc>)
 8008584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008588:	6153      	str	r3, [r2, #20]
 800858a:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <HAL_UART_MspInit+0xfc>)
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008596:	2330      	movs	r3, #48	; 0x30
 8008598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800859a:	2302      	movs	r3, #2
 800859c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085a2:	2303      	movs	r3, #3
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80085a6:	2307      	movs	r3, #7
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085aa:	f107 031c 	add.w	r3, r7, #28
 80085ae:	4619      	mov	r1, r3
 80085b0:	4824      	ldr	r0, [pc, #144]	; (8008644 <HAL_UART_MspInit+0x100>)
 80085b2:	f7fb fb69 	bl	8003c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80085b6:	2200      	movs	r2, #0
 80085b8:	2100      	movs	r1, #0
 80085ba:	2025      	movs	r0, #37	; 0x25
 80085bc:	f7ff fcf3 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085c0:	2025      	movs	r0, #37	; 0x25
 80085c2:	f7ff fd0c 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80085c6:	e035      	b.n	8008634 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1e      	ldr	r2, [pc, #120]	; (8008648 <HAL_UART_MspInit+0x104>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d130      	bne.n	8008634 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80085d2:	4b1b      	ldr	r3, [pc, #108]	; (8008640 <HAL_UART_MspInit+0xfc>)
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	4a1a      	ldr	r2, [pc, #104]	; (8008640 <HAL_UART_MspInit+0xfc>)
 80085d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085dc:	61d3      	str	r3, [r2, #28]
 80085de:	4b18      	ldr	r3, [pc, #96]	; (8008640 <HAL_UART_MspInit+0xfc>)
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e6:	613b      	str	r3, [r7, #16]
 80085e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ea:	4b15      	ldr	r3, [pc, #84]	; (8008640 <HAL_UART_MspInit+0xfc>)
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	4a14      	ldr	r2, [pc, #80]	; (8008640 <HAL_UART_MspInit+0xfc>)
 80085f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085f4:	6153      	str	r3, [r2, #20]
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <HAL_UART_MspInit+0xfc>)
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008602:	230c      	movs	r3, #12
 8008604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008606:	2302      	movs	r3, #2
 8008608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860a:	2300      	movs	r3, #0
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800860e:	2303      	movs	r3, #3
 8008610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008612:	2307      	movs	r3, #7
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008616:	f107 031c 	add.w	r3, r7, #28
 800861a:	4619      	mov	r1, r3
 800861c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008620:	f7fb fb32 	bl	8003c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	2026      	movs	r0, #38	; 0x26
 800862a:	f7ff fcbc 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800862e:	2026      	movs	r0, #38	; 0x26
 8008630:	f7ff fcd5 	bl	8007fde <HAL_NVIC_EnableIRQ>
}
 8008634:	bf00      	nop
 8008636:	3730      	adds	r7, #48	; 0x30
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40013800 	.word	0x40013800
 8008640:	40021000 	.word	0x40021000
 8008644:	48000800 	.word	0x48000800
 8008648:	40004400 	.word	0x40004400

0800864c <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008650:	b672      	cpsid	i
}
 8008652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008654:	e7fe      	b.n	8008654 <Msp_Error_Handler+0x8>
	...

08008658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800865e:	af00      	add	r7, sp, #0
 8008660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008664:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008668:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800866a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800866e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f001 b83a 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800867e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008682:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 816f 	beq.w	8008972 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008694:	4bb5      	ldr	r3, [pc, #724]	; (800896c <HAL_RCC_OscConfig+0x314>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f003 030c 	and.w	r3, r3, #12
 800869c:	2b04      	cmp	r3, #4
 800869e:	d00c      	beq.n	80086ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086a0:	4bb2      	ldr	r3, [pc, #712]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f003 030c 	and.w	r3, r3, #12
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d15c      	bne.n	8008766 <HAL_RCC_OscConfig+0x10e>
 80086ac:	4baf      	ldr	r3, [pc, #700]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80086b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b8:	d155      	bne.n	8008766 <HAL_RCC_OscConfig+0x10e>
 80086ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80086c6:	fa93 f3a3 	rbit	r3, r3
 80086ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80086ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d2:	fab3 f383 	clz	r3, r3
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d102      	bne.n	80086ec <HAL_RCC_OscConfig+0x94>
 80086e6:	4ba1      	ldr	r3, [pc, #644]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	e015      	b.n	8008718 <HAL_RCC_OscConfig+0xc0>
 80086ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80086f8:	fa93 f3a3 	rbit	r3, r3
 80086fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008704:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008708:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800870c:	fa93 f3a3 	rbit	r3, r3
 8008710:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008714:	4b95      	ldr	r3, [pc, #596]	; (800896c <HAL_RCC_OscConfig+0x314>)
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800871c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008720:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008724:	fa92 f2a2 	rbit	r2, r2
 8008728:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800872c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008730:	fab2 f282 	clz	r2, r2
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	f042 0220 	orr.w	r2, r2, #32
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	f002 021f 	and.w	r2, r2, #31
 8008740:	2101      	movs	r1, #1
 8008742:	fa01 f202 	lsl.w	r2, r1, r2
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8111 	beq.w	8008970 <HAL_RCC_OscConfig+0x318>
 800874e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008752:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	f040 8108 	bne.w	8008970 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f000 bfc6 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800876a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008776:	d106      	bne.n	8008786 <HAL_RCC_OscConfig+0x12e>
 8008778:	4b7c      	ldr	r3, [pc, #496]	; (800896c <HAL_RCC_OscConfig+0x314>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a7b      	ldr	r2, [pc, #492]	; (800896c <HAL_RCC_OscConfig+0x314>)
 800877e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	e036      	b.n	80087f4 <HAL_RCC_OscConfig+0x19c>
 8008786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800878a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10c      	bne.n	80087b0 <HAL_RCC_OscConfig+0x158>
 8008796:	4b75      	ldr	r3, [pc, #468]	; (800896c <HAL_RCC_OscConfig+0x314>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a74      	ldr	r2, [pc, #464]	; (800896c <HAL_RCC_OscConfig+0x314>)
 800879c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4b72      	ldr	r3, [pc, #456]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a71      	ldr	r2, [pc, #452]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e021      	b.n	80087f4 <HAL_RCC_OscConfig+0x19c>
 80087b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c0:	d10c      	bne.n	80087dc <HAL_RCC_OscConfig+0x184>
 80087c2:	4b6a      	ldr	r3, [pc, #424]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a69      	ldr	r2, [pc, #420]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	4b67      	ldr	r3, [pc, #412]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a66      	ldr	r2, [pc, #408]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	e00b      	b.n	80087f4 <HAL_RCC_OscConfig+0x19c>
 80087dc:	4b63      	ldr	r3, [pc, #396]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a62      	ldr	r2, [pc, #392]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	4b60      	ldr	r3, [pc, #384]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a5f      	ldr	r2, [pc, #380]	; (800896c <HAL_RCC_OscConfig+0x314>)
 80087ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d059      	beq.n	80088b8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008804:	f7ff faee 	bl	8007de4 <HAL_GetTick>
 8008808:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880c:	e00a      	b.n	8008824 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800880e:	f7ff fae9 	bl	8007de4 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b64      	cmp	r3, #100	; 0x64
 800881c:	d902      	bls.n	8008824 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	f000 bf67 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
 8008824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008828:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800882c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008830:	fa93 f3a3 	rbit	r3, r3
 8008834:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008838:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800883c:	fab3 f383 	clz	r3, r3
 8008840:	b2db      	uxtb	r3, r3
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b01      	cmp	r3, #1
 800884e:	d102      	bne.n	8008856 <HAL_RCC_OscConfig+0x1fe>
 8008850:	4b46      	ldr	r3, [pc, #280]	; (800896c <HAL_RCC_OscConfig+0x314>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	e015      	b.n	8008882 <HAL_RCC_OscConfig+0x22a>
 8008856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800885a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800885e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008862:	fa93 f3a3 	rbit	r3, r3
 8008866:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800886a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800886e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008872:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008876:	fa93 f3a3 	rbit	r3, r3
 800887a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800887e:	4b3b      	ldr	r3, [pc, #236]	; (800896c <HAL_RCC_OscConfig+0x314>)
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008886:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800888a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800888e:	fa92 f2a2 	rbit	r2, r2
 8008892:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008896:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800889a:	fab2 f282 	clz	r2, r2
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	f042 0220 	orr.w	r2, r2, #32
 80088a4:	b2d2      	uxtb	r2, r2
 80088a6:	f002 021f 	and.w	r2, r2, #31
 80088aa:	2101      	movs	r1, #1
 80088ac:	fa01 f202 	lsl.w	r2, r1, r2
 80088b0:	4013      	ands	r3, r2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0ab      	beq.n	800880e <HAL_RCC_OscConfig+0x1b6>
 80088b6:	e05c      	b.n	8008972 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b8:	f7ff fa94 	bl	8007de4 <HAL_GetTick>
 80088bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088c0:	e00a      	b.n	80088d8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088c2:	f7ff fa8f 	bl	8007de4 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b64      	cmp	r3, #100	; 0x64
 80088d0:	d902      	bls.n	80088d8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	f000 bf0d 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
 80088d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80088e4:	fa93 f3a3 	rbit	r3, r3
 80088e8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80088ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088f0:	fab3 f383 	clz	r3, r3
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b01      	cmp	r3, #1
 8008902:	d102      	bne.n	800890a <HAL_RCC_OscConfig+0x2b2>
 8008904:	4b19      	ldr	r3, [pc, #100]	; (800896c <HAL_RCC_OscConfig+0x314>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	e015      	b.n	8008936 <HAL_RCC_OscConfig+0x2de>
 800890a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800890e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008912:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008916:	fa93 f3a3 	rbit	r3, r3
 800891a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800891e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008922:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008926:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800892a:	fa93 f3a3 	rbit	r3, r3
 800892e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008932:	4b0e      	ldr	r3, [pc, #56]	; (800896c <HAL_RCC_OscConfig+0x314>)
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800893a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800893e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008942:	fa92 f2a2 	rbit	r2, r2
 8008946:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800894a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800894e:	fab2 f282 	clz	r2, r2
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	f042 0220 	orr.w	r2, r2, #32
 8008958:	b2d2      	uxtb	r2, r2
 800895a:	f002 021f 	and.w	r2, r2, #31
 800895e:	2101      	movs	r1, #1
 8008960:	fa01 f202 	lsl.w	r2, r1, r2
 8008964:	4013      	ands	r3, r2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1ab      	bne.n	80088c2 <HAL_RCC_OscConfig+0x26a>
 800896a:	e002      	b.n	8008972 <HAL_RCC_OscConfig+0x31a>
 800896c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008976:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 817f 	beq.w	8008c86 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008988:	4ba7      	ldr	r3, [pc, #668]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f003 030c 	and.w	r3, r3, #12
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00c      	beq.n	80089ae <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008994:	4ba4      	ldr	r3, [pc, #656]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f003 030c 	and.w	r3, r3, #12
 800899c:	2b08      	cmp	r3, #8
 800899e:	d173      	bne.n	8008a88 <HAL_RCC_OscConfig+0x430>
 80089a0:	4ba1      	ldr	r3, [pc, #644]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80089a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ac:	d16c      	bne.n	8008a88 <HAL_RCC_OscConfig+0x430>
 80089ae:	2302      	movs	r3, #2
 80089b0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80089b8:	fa93 f3a3 	rbit	r3, r3
 80089bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80089c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089c4:	fab3 f383 	clz	r3, r3
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	095b      	lsrs	r3, r3, #5
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d102      	bne.n	80089de <HAL_RCC_OscConfig+0x386>
 80089d8:	4b93      	ldr	r3, [pc, #588]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	e013      	b.n	8008a06 <HAL_RCC_OscConfig+0x3ae>
 80089de:	2302      	movs	r3, #2
 80089e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80089e8:	fa93 f3a3 	rbit	r3, r3
 80089ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80089f0:	2302      	movs	r3, #2
 80089f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80089f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80089fa:	fa93 f3a3 	rbit	r3, r3
 80089fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008a02:	4b89      	ldr	r3, [pc, #548]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2202      	movs	r2, #2
 8008a08:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008a0c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008a10:	fa92 f2a2 	rbit	r2, r2
 8008a14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008a18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008a1c:	fab2 f282 	clz	r2, r2
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	f042 0220 	orr.w	r2, r2, #32
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	f002 021f 	and.w	r2, r2, #31
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00a      	beq.n	8008a4e <HAL_RCC_OscConfig+0x3f6>
 8008a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d002      	beq.n	8008a4e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f000 be52 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a4e:	4b76      	ldr	r3, [pc, #472]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	21f8      	movs	r1, #248	; 0xf8
 8008a64:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a68:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008a6c:	fa91 f1a1 	rbit	r1, r1
 8008a70:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008a74:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008a78:	fab1 f181 	clz	r1, r1
 8008a7c:	b2c9      	uxtb	r1, r1
 8008a7e:	408b      	lsls	r3, r1
 8008a80:	4969      	ldr	r1, [pc, #420]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a86:	e0fe      	b.n	8008c86 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 8088 	beq.w	8008baa <HAL_RCC_OscConfig+0x552>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008aa4:	fa93 f3a3 	rbit	r3, r3
 8008aa8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008aac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ab0:	fab3 f383 	clz	r3, r3
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008aba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ac6:	f7ff f98d 	bl	8007de4 <HAL_GetTick>
 8008aca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ace:	e00a      	b.n	8008ae6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ad0:	f7ff f988 	bl	8007de4 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d902      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	f000 be06 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008af0:	fa93 f3a3 	rbit	r3, r3
 8008af4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8008af8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008afc:	fab3 f383 	clz	r3, r3
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d102      	bne.n	8008b16 <HAL_RCC_OscConfig+0x4be>
 8008b10:	4b45      	ldr	r3, [pc, #276]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	e013      	b.n	8008b3e <HAL_RCC_OscConfig+0x4e6>
 8008b16:	2302      	movs	r3, #2
 8008b18:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008b20:	fa93 f3a3 	rbit	r3, r3
 8008b24:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008b28:	2302      	movs	r3, #2
 8008b2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008b2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008b32:	fa93 f3a3 	rbit	r3, r3
 8008b36:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008b3a:	4b3b      	ldr	r3, [pc, #236]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008b44:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008b48:	fa92 f2a2 	rbit	r2, r2
 8008b4c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8008b50:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008b54:	fab2 f282 	clz	r2, r2
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	f042 0220 	orr.w	r2, r2, #32
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	f002 021f 	and.w	r2, r2, #31
 8008b64:	2101      	movs	r1, #1
 8008b66:	fa01 f202 	lsl.w	r2, r1, r2
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0af      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b70:	4b2d      	ldr	r3, [pc, #180]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	21f8      	movs	r1, #248	; 0xf8
 8008b86:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008b8e:	fa91 f1a1 	rbit	r1, r1
 8008b92:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8008b96:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008b9a:	fab1 f181 	clz	r1, r1
 8008b9e:	b2c9      	uxtb	r1, r1
 8008ba0:	408b      	lsls	r3, r1
 8008ba2:	4921      	ldr	r1, [pc, #132]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	600b      	str	r3, [r1, #0]
 8008ba8:	e06d      	b.n	8008c86 <HAL_RCC_OscConfig+0x62e>
 8008baa:	2301      	movs	r3, #1
 8008bac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008bb4:	fa93 f3a3 	rbit	r3, r3
 8008bb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8008bbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bc0:	fab3 f383 	clz	r3, r3
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008bca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bd6:	f7ff f905 	bl	8007de4 <HAL_GetTick>
 8008bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bde:	e00a      	b.n	8008bf6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008be0:	f7ff f900 	bl	8007de4 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d902      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	f000 bd7e 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c00:	fa93 f3a3 	rbit	r3, r3
 8008c04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8008c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c0c:	fab3 f383 	clz	r3, r3
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d105      	bne.n	8008c2c <HAL_RCC_OscConfig+0x5d4>
 8008c20:	4b01      	ldr	r3, [pc, #4]	; (8008c28 <HAL_RCC_OscConfig+0x5d0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	e016      	b.n	8008c54 <HAL_RCC_OscConfig+0x5fc>
 8008c26:	bf00      	nop
 8008c28:	40021000 	.word	0x40021000
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c36:	fa93 f3a3 	rbit	r3, r3
 8008c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c3e:	2302      	movs	r3, #2
 8008c40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008c44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008c48:	fa93 f3a3 	rbit	r3, r3
 8008c4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c50:	4bbf      	ldr	r3, [pc, #764]	; (8008f50 <HAL_RCC_OscConfig+0x8f8>)
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	2202      	movs	r2, #2
 8008c56:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008c5a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008c5e:	fa92 f2a2 	rbit	r2, r2
 8008c62:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8008c66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008c6a:	fab2 f282 	clz	r2, r2
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	f042 0220 	orr.w	r2, r2, #32
 8008c74:	b2d2      	uxtb	r2, r2
 8008c76:	f002 021f 	and.w	r2, r2, #31
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8008c80:	4013      	ands	r3, r2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1ac      	bne.n	8008be0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 8113 	beq.w	8008ec2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d07c      	beq.n	8008da6 <HAL_RCC_OscConfig+0x74e>
 8008cac:	2301      	movs	r3, #1
 8008cae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb6:	fa93 f3a3 	rbit	r3, r3
 8008cba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8008cbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cc2:	fab3 f383 	clz	r3, r3
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4ba2      	ldr	r3, [pc, #648]	; (8008f54 <HAL_RCC_OscConfig+0x8fc>)
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cd6:	f7ff f885 	bl	8007de4 <HAL_GetTick>
 8008cda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cde:	e00a      	b.n	8008cf6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ce0:	f7ff f880 	bl	8007de4 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d902      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	f000 bcfe 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d00:	fa93 f2a3 	rbit	r2, r3
 8008d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d16:	2202      	movs	r2, #2
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	fa93 f2a3 	rbit	r2, r3
 8008d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	fa93 f2a3 	rbit	r2, r3
 8008d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d56:	4b7e      	ldr	r3, [pc, #504]	; (8008f50 <HAL_RCC_OscConfig+0x8f8>)
 8008d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008d62:	2102      	movs	r1, #2
 8008d64:	6019      	str	r1, [r3, #0]
 8008d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	fa93 f1a3 	rbit	r1, r3
 8008d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d7c:	6019      	str	r1, [r3, #0]
  return result;
 8008d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	fab3 f383 	clz	r3, r3
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f003 031f 	and.w	r3, r3, #31
 8008d98:	2101      	movs	r1, #1
 8008d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9e:	4013      	ands	r3, r2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d09d      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x688>
 8008da4:	e08d      	b.n	8008ec2 <HAL_RCC_OscConfig+0x86a>
 8008da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008daa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dae:	2201      	movs	r2, #1
 8008db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008db6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	fa93 f2a3 	rbit	r2, r3
 8008dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dc4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008dc8:	601a      	str	r2, [r3, #0]
  return result;
 8008dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008dd2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008dd4:	fab3 f383 	clz	r3, r3
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	4b5d      	ldr	r3, [pc, #372]	; (8008f54 <HAL_RCC_OscConfig+0x8fc>)
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	461a      	mov	r2, r3
 8008de4:	2300      	movs	r3, #0
 8008de6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008de8:	f7fe fffc 	bl	8007de4 <HAL_GetTick>
 8008dec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008df0:	e00a      	b.n	8008e08 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008df2:	f7fe fff7 	bl	8007de4 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d902      	bls.n	8008e08 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	f000 bc75 	b.w	80096f2 <HAL_RCC_OscConfig+0x109a>
 8008e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008e10:	2202      	movs	r2, #2
 8008e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	fa93 f2a3 	rbit	r2, r3
 8008e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e34:	2202      	movs	r2, #2
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	fa93 f2a3 	rbit	r2, r3
 8008e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008e58:	2202      	movs	r2, #2
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	fa93 f2a3 	rbit	r2, r3
 8008e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008e72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e74:	4b36      	ldr	r3, [pc, #216]	; (8008f50 <HAL_RCC_OscConfig+0x8f8>)
 8008e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008e80:	2102      	movs	r1, #2
 8008e82:	6019      	str	r1, [r3, #0]
 8008e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	fa93 f1a3 	rbit	r1, r3
 8008e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e96:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008e9a:	6019      	str	r1, [r3, #0]
  return result;
 8008e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ea0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	fab3 f383 	clz	r3, r3
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 031f 	and.w	r3, r3, #31
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d197      	bne.n	8008df2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ec6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 81a5 	beq.w	8009222 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ede:	4b1c      	ldr	r3, [pc, #112]	; (8008f50 <HAL_RCC_OscConfig+0x8f8>)
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d116      	bne.n	8008f18 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <HAL_RCC_OscConfig+0x8f8>)
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	4a18      	ldr	r2, [pc, #96]	; (8008f50 <HAL_RCC_OscConfig+0x8f8>)
 8008ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ef4:	61d3      	str	r3, [r2, #28]
 8008ef6:	4b16      	ldr	r3, [pc, #88]	; (8008f50 <HAL_RCC_OscConfig+0x8f8>)
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008f12:	2301      	movs	r3, #1
 8008f14:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f18:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <HAL_RCC_OscConfig+0x900>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d121      	bne.n	8008f68 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <HAL_RCC_OscConfig+0x900>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a0b      	ldr	r2, [pc, #44]	; (8008f58 <HAL_RCC_OscConfig+0x900>)
 8008f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f30:	f7fe ff58 	bl	8007de4 <HAL_GetTick>
 8008f34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f38:	e010      	b.n	8008f5c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3a:	f7fe ff53 	bl	8007de4 <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b64      	cmp	r3, #100	; 0x64
 8008f48:	d908      	bls.n	8008f5c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e3d1      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
 8008f4e:	bf00      	nop
 8008f50:	40021000 	.word	0x40021000
 8008f54:	10908120 	.word	0x10908120
 8008f58:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f5c:	4b8d      	ldr	r3, [pc, #564]	; (8009194 <HAL_RCC_OscConfig+0xb3c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0e8      	beq.n	8008f3a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d106      	bne.n	8008f86 <HAL_RCC_OscConfig+0x92e>
 8008f78:	4b87      	ldr	r3, [pc, #540]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	4a86      	ldr	r2, [pc, #536]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	6213      	str	r3, [r2, #32]
 8008f84:	e035      	b.n	8008ff2 <HAL_RCC_OscConfig+0x99a>
 8008f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10c      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x958>
 8008f96:	4b80      	ldr	r3, [pc, #512]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	4a7f      	ldr	r2, [pc, #508]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008f9c:	f023 0301 	bic.w	r3, r3, #1
 8008fa0:	6213      	str	r3, [r2, #32]
 8008fa2:	4b7d      	ldr	r3, [pc, #500]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	4a7c      	ldr	r2, [pc, #496]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fa8:	f023 0304 	bic.w	r3, r3, #4
 8008fac:	6213      	str	r3, [r2, #32]
 8008fae:	e020      	b.n	8008ff2 <HAL_RCC_OscConfig+0x99a>
 8008fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	2b05      	cmp	r3, #5
 8008fbe:	d10c      	bne.n	8008fda <HAL_RCC_OscConfig+0x982>
 8008fc0:	4b75      	ldr	r3, [pc, #468]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	4a74      	ldr	r2, [pc, #464]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fc6:	f043 0304 	orr.w	r3, r3, #4
 8008fca:	6213      	str	r3, [r2, #32]
 8008fcc:	4b72      	ldr	r3, [pc, #456]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	4a71      	ldr	r2, [pc, #452]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fd2:	f043 0301 	orr.w	r3, r3, #1
 8008fd6:	6213      	str	r3, [r2, #32]
 8008fd8:	e00b      	b.n	8008ff2 <HAL_RCC_OscConfig+0x99a>
 8008fda:	4b6f      	ldr	r3, [pc, #444]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	4a6e      	ldr	r2, [pc, #440]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	6213      	str	r3, [r2, #32]
 8008fe6:	4b6c      	ldr	r3, [pc, #432]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	4a6b      	ldr	r2, [pc, #428]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8008fec:	f023 0304 	bic.w	r3, r3, #4
 8008ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ff6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 8081 	beq.w	8009106 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009004:	f7fe feee 	bl	8007de4 <HAL_GetTick>
 8009008:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800900c:	e00b      	b.n	8009026 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800900e:	f7fe fee9 	bl	8007de4 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	f241 3288 	movw	r2, #5000	; 0x1388
 800901e:	4293      	cmp	r3, r2
 8009020:	d901      	bls.n	8009026 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e365      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
 8009026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800902a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800902e:	2202      	movs	r2, #2
 8009030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009036:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	fa93 f2a3 	rbit	r2, r3
 8009040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009044:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800904e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009052:	2202      	movs	r2, #2
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800905a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	fa93 f2a3 	rbit	r2, r3
 8009064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009068:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800906c:	601a      	str	r2, [r3, #0]
  return result;
 800906e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009072:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009076:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009078:	fab3 f383 	clz	r3, r3
 800907c:	b2db      	uxtb	r3, r3
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f043 0302 	orr.w	r3, r3, #2
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d102      	bne.n	8009092 <HAL_RCC_OscConfig+0xa3a>
 800908c:	4b42      	ldr	r3, [pc, #264]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	e013      	b.n	80090ba <HAL_RCC_OscConfig+0xa62>
 8009092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009096:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800909a:	2202      	movs	r2, #2
 800909c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800909e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	fa93 f2a3 	rbit	r2, r3
 80090ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	4b38      	ldr	r3, [pc, #224]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80090be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80090c2:	2102      	movs	r1, #2
 80090c4:	6011      	str	r1, [r2, #0]
 80090c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80090ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	fa92 f1a2 	rbit	r1, r2
 80090d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80090d8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80090dc:	6011      	str	r1, [r2, #0]
  return result;
 80090de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80090e2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80090e6:	6812      	ldr	r2, [r2, #0]
 80090e8:	fab2 f282 	clz	r2, r2
 80090ec:	b2d2      	uxtb	r2, r2
 80090ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	f002 021f 	and.w	r2, r2, #31
 80090f8:	2101      	movs	r1, #1
 80090fa:	fa01 f202 	lsl.w	r2, r1, r2
 80090fe:	4013      	ands	r3, r2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d084      	beq.n	800900e <HAL_RCC_OscConfig+0x9b6>
 8009104:	e083      	b.n	800920e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009106:	f7fe fe6d 	bl	8007de4 <HAL_GetTick>
 800910a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800910e:	e00b      	b.n	8009128 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009110:	f7fe fe68 	bl	8007de4 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009120:	4293      	cmp	r3, r2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e2e4      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
 8009128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800912c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009130:	2202      	movs	r2, #2
 8009132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009138:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	fa93 f2a3 	rbit	r2, r3
 8009142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009146:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009150:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009154:	2202      	movs	r2, #2
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800915c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	fa93 f2a3 	rbit	r2, r3
 8009166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800916a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800916e:	601a      	str	r2, [r3, #0]
  return result;
 8009170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009174:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009178:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800917a:	fab3 f383 	clz	r3, r3
 800917e:	b2db      	uxtb	r3, r3
 8009180:	095b      	lsrs	r3, r3, #5
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f043 0302 	orr.w	r3, r3, #2
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d106      	bne.n	800919c <HAL_RCC_OscConfig+0xb44>
 800918e:	4b02      	ldr	r3, [pc, #8]	; (8009198 <HAL_RCC_OscConfig+0xb40>)
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	e017      	b.n	80091c4 <HAL_RCC_OscConfig+0xb6c>
 8009194:	40007000 	.word	0x40007000
 8009198:	40021000 	.word	0x40021000
 800919c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80091a4:	2202      	movs	r2, #2
 80091a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	fa93 f2a3 	rbit	r2, r3
 80091b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091ba:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	4bb3      	ldr	r3, [pc, #716]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80091cc:	2102      	movs	r1, #2
 80091ce:	6011      	str	r1, [r2, #0]
 80091d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80091d8:	6812      	ldr	r2, [r2, #0]
 80091da:	fa92 f1a2 	rbit	r1, r2
 80091de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091e2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80091e6:	6011      	str	r1, [r2, #0]
  return result;
 80091e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091ec:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	fab2 f282 	clz	r2, r2
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091fc:	b2d2      	uxtb	r2, r2
 80091fe:	f002 021f 	and.w	r2, r2, #31
 8009202:	2101      	movs	r1, #1
 8009204:	fa01 f202 	lsl.w	r2, r1, r2
 8009208:	4013      	ands	r3, r2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d180      	bne.n	8009110 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800920e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8009212:	2b01      	cmp	r3, #1
 8009214:	d105      	bne.n	8009222 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009216:	4b9e      	ldr	r3, [pc, #632]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	4a9d      	ldr	r2, [pc, #628]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 800921c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009220:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009226:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 825e 	beq.w	80096f0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009234:	4b96      	ldr	r3, [pc, #600]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f003 030c 	and.w	r3, r3, #12
 800923c:	2b08      	cmp	r3, #8
 800923e:	f000 821f 	beq.w	8009680 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	2b02      	cmp	r3, #2
 8009250:	f040 8170 	bne.w	8009534 <HAL_RCC_OscConfig+0xedc>
 8009254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009258:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800925c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009266:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	fa93 f2a3 	rbit	r2, r3
 8009270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009274:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009278:	601a      	str	r2, [r3, #0]
  return result;
 800927a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800927e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009282:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009284:	fab3 f383 	clz	r3, r3
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800928e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	461a      	mov	r2, r3
 8009296:	2300      	movs	r3, #0
 8009298:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800929a:	f7fe fda3 	bl	8007de4 <HAL_GetTick>
 800929e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092a2:	e009      	b.n	80092b8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092a4:	f7fe fd9e 	bl	8007de4 <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e21c      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
 80092b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80092c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80092c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	fa93 f2a3 	rbit	r2, r3
 80092d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80092dc:	601a      	str	r2, [r3, #0]
  return result;
 80092de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80092e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092e8:	fab3 f383 	clz	r3, r3
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f043 0301 	orr.w	r3, r3, #1
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d102      	bne.n	8009302 <HAL_RCC_OscConfig+0xcaa>
 80092fc:	4b64      	ldr	r3, [pc, #400]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	e027      	b.n	8009352 <HAL_RCC_OscConfig+0xcfa>
 8009302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009306:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800930a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800930e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009314:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	fa93 f2a3 	rbit	r2, r3
 800931e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009322:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800932c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800933a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	fa93 f2a3 	rbit	r2, r3
 8009344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009348:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	4b50      	ldr	r3, [pc, #320]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009356:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800935a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800935e:	6011      	str	r1, [r2, #0]
 8009360:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009364:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	fa92 f1a2 	rbit	r1, r2
 800936e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009372:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8009376:	6011      	str	r1, [r2, #0]
  return result;
 8009378:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800937c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	fab2 f282 	clz	r2, r2
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	f042 0220 	orr.w	r2, r2, #32
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	f002 021f 	and.w	r2, r2, #31
 8009392:	2101      	movs	r1, #1
 8009394:	fa01 f202 	lsl.w	r2, r1, r2
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d182      	bne.n	80092a4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800939e:	4b3c      	ldr	r3, [pc, #240]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	f023 020f 	bic.w	r2, r3, #15
 80093a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	4937      	ldr	r1, [pc, #220]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80093b8:	4b35      	ldr	r3, [pc, #212]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80093c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6a19      	ldr	r1, [r3, #32]
 80093cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	430b      	orrs	r3, r1
 80093da:	492d      	ldr	r1, [pc, #180]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 80093dc:	4313      	orrs	r3, r2
 80093de:	604b      	str	r3, [r1, #4]
 80093e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80093e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	fa93 f2a3 	rbit	r2, r3
 80093fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009400:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009404:	601a      	str	r2, [r3, #0]
  return result;
 8009406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800940a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800940e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009410:	fab3 f383 	clz	r3, r3
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800941a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	461a      	mov	r2, r3
 8009422:	2301      	movs	r3, #1
 8009424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009426:	f7fe fcdd 	bl	8007de4 <HAL_GetTick>
 800942a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800942e:	e009      	b.n	8009444 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009430:	f7fe fcd8 	bl	8007de4 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b02      	cmp	r3, #2
 800943e:	d901      	bls.n	8009444 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e156      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
 8009444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009448:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800944c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009456:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	fa93 f2a3 	rbit	r2, r3
 8009460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009464:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009468:	601a      	str	r2, [r3, #0]
  return result;
 800946a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800946e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009472:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009474:	fab3 f383 	clz	r3, r3
 8009478:	b2db      	uxtb	r3, r3
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	b2db      	uxtb	r3, r3
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	d105      	bne.n	8009494 <HAL_RCC_OscConfig+0xe3c>
 8009488:	4b01      	ldr	r3, [pc, #4]	; (8009490 <HAL_RCC_OscConfig+0xe38>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	e02a      	b.n	80094e4 <HAL_RCC_OscConfig+0xe8c>
 800948e:	bf00      	nop
 8009490:	40021000 	.word	0x40021000
 8009494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009498:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800949c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	fa93 f2a3 	rbit	r2, r3
 80094b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80094c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	fa93 f2a3 	rbit	r2, r3
 80094d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094da:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	4b86      	ldr	r3, [pc, #536]	; (80096fc <HAL_RCC_OscConfig+0x10a4>)
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80094e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80094ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80094f0:	6011      	str	r1, [r2, #0]
 80094f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80094f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80094fa:	6812      	ldr	r2, [r2, #0]
 80094fc:	fa92 f1a2 	rbit	r1, r2
 8009500:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009504:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009508:	6011      	str	r1, [r2, #0]
  return result;
 800950a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800950e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	fab2 f282 	clz	r2, r2
 8009518:	b2d2      	uxtb	r2, r2
 800951a:	f042 0220 	orr.w	r2, r2, #32
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	f002 021f 	and.w	r2, r2, #31
 8009524:	2101      	movs	r1, #1
 8009526:	fa01 f202 	lsl.w	r2, r1, r2
 800952a:	4013      	ands	r3, r2
 800952c:	2b00      	cmp	r3, #0
 800952e:	f43f af7f 	beq.w	8009430 <HAL_RCC_OscConfig+0xdd8>
 8009532:	e0dd      	b.n	80096f0 <HAL_RCC_OscConfig+0x1098>
 8009534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009538:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800953c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009546:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	fa93 f2a3 	rbit	r2, r3
 8009550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009554:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009558:	601a      	str	r2, [r3, #0]
  return result;
 800955a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800955e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009562:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009564:	fab3 f383 	clz	r3, r3
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800956e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	461a      	mov	r2, r3
 8009576:	2300      	movs	r3, #0
 8009578:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800957a:	f7fe fc33 	bl	8007de4 <HAL_GetTick>
 800957e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009582:	e009      	b.n	8009598 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009584:	f7fe fc2e 	bl	8007de4 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	2b02      	cmp	r3, #2
 8009592:	d901      	bls.n	8009598 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e0ac      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
 8009598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800959c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80095a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	fa93 f2a3 	rbit	r2, r3
 80095b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80095bc:	601a      	str	r2, [r3, #0]
  return result;
 80095be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80095c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095c8:	fab3 f383 	clz	r3, r3
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	095b      	lsrs	r3, r3, #5
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f043 0301 	orr.w	r3, r3, #1
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d102      	bne.n	80095e2 <HAL_RCC_OscConfig+0xf8a>
 80095dc:	4b47      	ldr	r3, [pc, #284]	; (80096fc <HAL_RCC_OscConfig+0x10a4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	e027      	b.n	8009632 <HAL_RCC_OscConfig+0xfda>
 80095e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095e6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80095ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	fa93 f2a3 	rbit	r2, r3
 80095fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009602:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800960c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800961a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	fa93 f2a3 	rbit	r2, r3
 8009624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009628:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	4b33      	ldr	r3, [pc, #204]	; (80096fc <HAL_RCC_OscConfig+0x10a4>)
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009636:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800963a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800963e:	6011      	str	r1, [r2, #0]
 8009640:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009644:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	fa92 f1a2 	rbit	r1, r2
 800964e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009652:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009656:	6011      	str	r1, [r2, #0]
  return result;
 8009658:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800965c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009660:	6812      	ldr	r2, [r2, #0]
 8009662:	fab2 f282 	clz	r2, r2
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	f042 0220 	orr.w	r2, r2, #32
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	f002 021f 	and.w	r2, r2, #31
 8009672:	2101      	movs	r1, #1
 8009674:	fa01 f202 	lsl.w	r2, r1, r2
 8009678:	4013      	ands	r3, r2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d182      	bne.n	8009584 <HAL_RCC_OscConfig+0xf2c>
 800967e:	e037      	b.n	80096f0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e02e      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009694:	4b19      	ldr	r3, [pc, #100]	; (80096fc <HAL_RCC_OscConfig+0x10a4>)
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800969c:	4b17      	ldr	r3, [pc, #92]	; (80096fc <HAL_RCC_OscConfig+0x10a4>)
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80096a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80096a8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80096ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d117      	bne.n	80096ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80096bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80096c0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80096c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d10b      	bne.n	80096ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80096d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80096d8:	f003 020f 	and.w	r2, r3, #15
 80096dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d001      	beq.n	80096f0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	40021000 	.word	0x40021000

08009700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b09e      	sub	sp, #120	; 0x78
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e162      	b.n	80099de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009718:	4b90      	ldr	r3, [pc, #576]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0307 	and.w	r3, r3, #7
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	429a      	cmp	r2, r3
 8009724:	d910      	bls.n	8009748 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009726:	4b8d      	ldr	r3, [pc, #564]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f023 0207 	bic.w	r2, r3, #7
 800972e:	498b      	ldr	r1, [pc, #556]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	4313      	orrs	r3, r2
 8009734:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009736:	4b89      	ldr	r3, [pc, #548]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	429a      	cmp	r2, r3
 8009742:	d001      	beq.n	8009748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e14a      	b.n	80099de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	2b00      	cmp	r3, #0
 8009752:	d008      	beq.n	8009766 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009754:	4b82      	ldr	r3, [pc, #520]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	497f      	ldr	r1, [pc, #508]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 8009762:	4313      	orrs	r3, r2
 8009764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 80dc 	beq.w	800992c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d13c      	bne.n	80097f6 <HAL_RCC_ClockConfig+0xf6>
 800977c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009780:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009784:	fa93 f3a3 	rbit	r3, r3
 8009788:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800978a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800978c:	fab3 f383 	clz	r3, r3
 8009790:	b2db      	uxtb	r3, r3
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	b2db      	uxtb	r3, r3
 8009796:	f043 0301 	orr.w	r3, r3, #1
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b01      	cmp	r3, #1
 800979e:	d102      	bne.n	80097a6 <HAL_RCC_ClockConfig+0xa6>
 80097a0:	4b6f      	ldr	r3, [pc, #444]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	e00f      	b.n	80097c6 <HAL_RCC_ClockConfig+0xc6>
 80097a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097ae:	fa93 f3a3 	rbit	r3, r3
 80097b2:	667b      	str	r3, [r7, #100]	; 0x64
 80097b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097b8:	663b      	str	r3, [r7, #96]	; 0x60
 80097ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097bc:	fa93 f3a3 	rbit	r3, r3
 80097c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097c2:	4b67      	ldr	r3, [pc, #412]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80097ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80097cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097ce:	fa92 f2a2 	rbit	r2, r2
 80097d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80097d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097d6:	fab2 f282 	clz	r2, r2
 80097da:	b2d2      	uxtb	r2, r2
 80097dc:	f042 0220 	orr.w	r2, r2, #32
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	f002 021f 	and.w	r2, r2, #31
 80097e6:	2101      	movs	r1, #1
 80097e8:	fa01 f202 	lsl.w	r2, r1, r2
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d17b      	bne.n	80098ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e0f3      	b.n	80099de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d13c      	bne.n	8009878 <HAL_RCC_ClockConfig+0x178>
 80097fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009802:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009806:	fa93 f3a3 	rbit	r3, r3
 800980a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800980c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800980e:	fab3 f383 	clz	r3, r3
 8009812:	b2db      	uxtb	r3, r3
 8009814:	095b      	lsrs	r3, r3, #5
 8009816:	b2db      	uxtb	r3, r3
 8009818:	f043 0301 	orr.w	r3, r3, #1
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b01      	cmp	r3, #1
 8009820:	d102      	bne.n	8009828 <HAL_RCC_ClockConfig+0x128>
 8009822:	4b4f      	ldr	r3, [pc, #316]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	e00f      	b.n	8009848 <HAL_RCC_ClockConfig+0x148>
 8009828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800982c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800982e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009830:	fa93 f3a3 	rbit	r3, r3
 8009834:	647b      	str	r3, [r7, #68]	; 0x44
 8009836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800983a:	643b      	str	r3, [r7, #64]	; 0x40
 800983c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983e:	fa93 f3a3 	rbit	r3, r3
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009844:	4b46      	ldr	r3, [pc, #280]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800984c:	63ba      	str	r2, [r7, #56]	; 0x38
 800984e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009850:	fa92 f2a2 	rbit	r2, r2
 8009854:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009858:	fab2 f282 	clz	r2, r2
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	f042 0220 	orr.w	r2, r2, #32
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	f002 021f 	and.w	r2, r2, #31
 8009868:	2101      	movs	r1, #1
 800986a:	fa01 f202 	lsl.w	r2, r1, r2
 800986e:	4013      	ands	r3, r2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d13a      	bne.n	80098ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e0b2      	b.n	80099de <HAL_RCC_ClockConfig+0x2de>
 8009878:	2302      	movs	r3, #2
 800987a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	fa93 f3a3 	rbit	r3, r3
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009886:	fab3 f383 	clz	r3, r3
 800988a:	b2db      	uxtb	r3, r3
 800988c:	095b      	lsrs	r3, r3, #5
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b01      	cmp	r3, #1
 8009898:	d102      	bne.n	80098a0 <HAL_RCC_ClockConfig+0x1a0>
 800989a:	4b31      	ldr	r3, [pc, #196]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	e00d      	b.n	80098bc <HAL_RCC_ClockConfig+0x1bc>
 80098a0:	2302      	movs	r3, #2
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	fa93 f3a3 	rbit	r3, r3
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
 80098ac:	2302      	movs	r3, #2
 80098ae:	623b      	str	r3, [r7, #32]
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	fa93 f3a3 	rbit	r3, r3
 80098b6:	61fb      	str	r3, [r7, #28]
 80098b8:	4b29      	ldr	r3, [pc, #164]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	2202      	movs	r2, #2
 80098be:	61ba      	str	r2, [r7, #24]
 80098c0:	69ba      	ldr	r2, [r7, #24]
 80098c2:	fa92 f2a2 	rbit	r2, r2
 80098c6:	617a      	str	r2, [r7, #20]
  return result;
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	fab2 f282 	clz	r2, r2
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	f042 0220 	orr.w	r2, r2, #32
 80098d4:	b2d2      	uxtb	r2, r2
 80098d6:	f002 021f 	and.w	r2, r2, #31
 80098da:	2101      	movs	r1, #1
 80098dc:	fa01 f202 	lsl.w	r2, r1, r2
 80098e0:	4013      	ands	r3, r2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e079      	b.n	80099de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80098ea:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f023 0203 	bic.w	r2, r3, #3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	491a      	ldr	r1, [pc, #104]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80098fc:	f7fe fa72 	bl	8007de4 <HAL_GetTick>
 8009900:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009902:	e00a      	b.n	800991a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009904:	f7fe fa6e 	bl	8007de4 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009912:	4293      	cmp	r3, r2
 8009914:	d901      	bls.n	800991a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e061      	b.n	80099de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800991a:	4b11      	ldr	r3, [pc, #68]	; (8009960 <HAL_RCC_ClockConfig+0x260>)
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f003 020c 	and.w	r2, r3, #12
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	429a      	cmp	r2, r3
 800992a:	d1eb      	bne.n	8009904 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800992c:	4b0b      	ldr	r3, [pc, #44]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 0307 	and.w	r3, r3, #7
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d214      	bcs.n	8009964 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800993a:	4b08      	ldr	r3, [pc, #32]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f023 0207 	bic.w	r2, r3, #7
 8009942:	4906      	ldr	r1, [pc, #24]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	4313      	orrs	r3, r2
 8009948:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <HAL_RCC_ClockConfig+0x25c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	429a      	cmp	r2, r3
 8009956:	d005      	beq.n	8009964 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e040      	b.n	80099de <HAL_RCC_ClockConfig+0x2de>
 800995c:	40022000 	.word	0x40022000
 8009960:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	d008      	beq.n	8009982 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009970:	4b1d      	ldr	r3, [pc, #116]	; (80099e8 <HAL_RCC_ClockConfig+0x2e8>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	491a      	ldr	r1, [pc, #104]	; (80099e8 <HAL_RCC_ClockConfig+0x2e8>)
 800997e:	4313      	orrs	r3, r2
 8009980:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800998e:	4b16      	ldr	r3, [pc, #88]	; (80099e8 <HAL_RCC_ClockConfig+0x2e8>)
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	4912      	ldr	r1, [pc, #72]	; (80099e8 <HAL_RCC_ClockConfig+0x2e8>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80099a2:	f000 f829 	bl	80099f8 <HAL_RCC_GetSysClockFreq>
 80099a6:	4601      	mov	r1, r0
 80099a8:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <HAL_RCC_ClockConfig+0x2e8>)
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099b0:	22f0      	movs	r2, #240	; 0xf0
 80099b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	fa92 f2a2 	rbit	r2, r2
 80099ba:	60fa      	str	r2, [r7, #12]
  return result;
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	fab2 f282 	clz	r2, r2
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	40d3      	lsrs	r3, r2
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <HAL_RCC_ClockConfig+0x2ec>)
 80099c8:	5cd3      	ldrb	r3, [r2, r3]
 80099ca:	fa21 f303 	lsr.w	r3, r1, r3
 80099ce:	4a08      	ldr	r2, [pc, #32]	; (80099f0 <HAL_RCC_ClockConfig+0x2f0>)
 80099d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80099d2:	4b08      	ldr	r3, [pc, #32]	; (80099f4 <HAL_RCC_ClockConfig+0x2f4>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe f9bc 	bl	8007d54 <HAL_InitTick>
  
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3778      	adds	r7, #120	; 0x78
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40021000 	.word	0x40021000
 80099ec:	0800d2ac 	.word	0x0800d2ac
 80099f0:	20000000 	.word	0x20000000
 80099f4:	20000004 	.word	0x20000004

080099f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b08b      	sub	sp, #44	; 0x2c
 80099fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61fb      	str	r3, [r7, #28]
 8009a02:	2300      	movs	r3, #0
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	2300      	movs	r3, #0
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009a12:	4b2a      	ldr	r3, [pc, #168]	; (8009abc <HAL_RCC_GetSysClockFreq+0xc4>)
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	f003 030c 	and.w	r3, r3, #12
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d002      	beq.n	8009a28 <HAL_RCC_GetSysClockFreq+0x30>
 8009a22:	2b08      	cmp	r3, #8
 8009a24:	d003      	beq.n	8009a2e <HAL_RCC_GetSysClockFreq+0x36>
 8009a26:	e03f      	b.n	8009aa8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009a28:	4b25      	ldr	r3, [pc, #148]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009a2a:	623b      	str	r3, [r7, #32]
      break;
 8009a2c:	e03f      	b.n	8009aae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009a34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009a38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	fa92 f2a2 	rbit	r2, r2
 8009a40:	607a      	str	r2, [r7, #4]
  return result;
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	fab2 f282 	clz	r2, r2
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	40d3      	lsrs	r3, r2
 8009a4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009a4e:	5cd3      	ldrb	r3, [r2, r3]
 8009a50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009a52:	4b1a      	ldr	r3, [pc, #104]	; (8009abc <HAL_RCC_GetSysClockFreq+0xc4>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	220f      	movs	r2, #15
 8009a5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	fa92 f2a2 	rbit	r2, r2
 8009a64:	60fa      	str	r2, [r7, #12]
  return result;
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	fab2 f282 	clz	r2, r2
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	40d3      	lsrs	r3, r2
 8009a70:	4a15      	ldr	r2, [pc, #84]	; (8009ac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a72:	5cd3      	ldrb	r3, [r2, r3]
 8009a74:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d008      	beq.n	8009a92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009a80:	4a0f      	ldr	r2, [pc, #60]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a90:	e007      	b.n	8009aa2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009a92:	4a0b      	ldr	r2, [pc, #44]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	fb02 f303 	mul.w	r3, r2, r3
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	623b      	str	r3, [r7, #32]
      break;
 8009aa6:	e002      	b.n	8009aae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009aaa:	623b      	str	r3, [r7, #32]
      break;
 8009aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009aae:	6a3b      	ldr	r3, [r7, #32]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	372c      	adds	r7, #44	; 0x2c
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bc80      	pop	{r7}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	40021000 	.word	0x40021000
 8009ac0:	007a1200 	.word	0x007a1200
 8009ac4:	0800d2c4 	.word	0x0800d2c4
 8009ac8:	0800d2d4 	.word	0x0800d2d4

08009acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <HAL_RCC_GetHCLKFreq+0x10>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bc80      	pop	{r7}
 8009ada:	4770      	bx	lr
 8009adc:	20000000 	.word	0x20000000

08009ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009ae6:	f7ff fff1 	bl	8009acc <HAL_RCC_GetHCLKFreq>
 8009aea:	4601      	mov	r1, r0
 8009aec:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009af4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009af8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	fa92 f2a2 	rbit	r2, r2
 8009b00:	603a      	str	r2, [r7, #0]
  return result;
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	fab2 f282 	clz	r2, r2
 8009b08:	b2d2      	uxtb	r2, r2
 8009b0a:	40d3      	lsrs	r3, r2
 8009b0c:	4a04      	ldr	r2, [pc, #16]	; (8009b20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009b0e:	5cd3      	ldrb	r3, [r2, r3]
 8009b10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40021000 	.word	0x40021000
 8009b20:	0800d2bc 	.word	0x0800d2bc

08009b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009b2a:	f7ff ffcf 	bl	8009acc <HAL_RCC_GetHCLKFreq>
 8009b2e:	4601      	mov	r1, r0
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009b38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	fa92 f2a2 	rbit	r2, r2
 8009b44:	603a      	str	r2, [r7, #0]
  return result;
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	fab2 f282 	clz	r2, r2
 8009b4c:	b2d2      	uxtb	r2, r2
 8009b4e:	40d3      	lsrs	r3, r2
 8009b50:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009b52:	5cd3      	ldrb	r3, [r2, r3]
 8009b54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	40021000 	.word	0x40021000
 8009b64:	0800d2bc 	.word	0x0800d2bc

08009b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b092      	sub	sp, #72	; 0x48
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 80d4 	beq.w	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b8c:	4b4e      	ldr	r3, [pc, #312]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10e      	bne.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b98:	4b4b      	ldr	r3, [pc, #300]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	4a4a      	ldr	r2, [pc, #296]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba2:	61d3      	str	r3, [r2, #28]
 8009ba4:	4b48      	ldr	r3, [pc, #288]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bac:	60bb      	str	r3, [r7, #8]
 8009bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bb6:	4b45      	ldr	r3, [pc, #276]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d118      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bc2:	4b42      	ldr	r3, [pc, #264]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a41      	ldr	r2, [pc, #260]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bce:	f7fe f909 	bl	8007de4 <HAL_GetTick>
 8009bd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bd4:	e008      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bd6:	f7fe f905 	bl	8007de4 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	2b64      	cmp	r3, #100	; 0x64
 8009be2:	d901      	bls.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e1d6      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009be8:	4b38      	ldr	r3, [pc, #224]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0f0      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009bf4:	4b34      	ldr	r3, [pc, #208]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
 8009bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 8084 	beq.w	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d07c      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c14:	4b2c      	ldr	r3, [pc, #176]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	fa93 f3a3 	rbit	r3, r3
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c2e:	fab3 f383 	clz	r3, r3
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	461a      	mov	r2, r3
 8009c36:	4b26      	ldr	r3, [pc, #152]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2301      	movs	r3, #1
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4a:	fa93 f3a3 	rbit	r3, r3
 8009c4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c52:	fab3 f383 	clz	r3, r3
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4b1d      	ldr	r3, [pc, #116]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	461a      	mov	r2, r3
 8009c62:	2300      	movs	r3, #0
 8009c64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009c66:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d04b      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c76:	f7fe f8b5 	bl	8007de4 <HAL_GetTick>
 8009c7a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c7c:	e00a      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c7e:	f7fe f8b1 	bl	8007de4 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d901      	bls.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e180      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009c94:	2302      	movs	r3, #2
 8009c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	fa93 f3a3 	rbit	r3, r3
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	623b      	str	r3, [r7, #32]
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	fa93 f3a3 	rbit	r3, r3
 8009caa:	61fb      	str	r3, [r7, #28]
  return result;
 8009cac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cae:	fab3 f383 	clz	r3, r3
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	095b      	lsrs	r3, r3, #5
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f043 0302 	orr.w	r3, r3, #2
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d108      	bne.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009cc2:	4b01      	ldr	r3, [pc, #4]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	e00d      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009cc8:	40021000 	.word	0x40021000
 8009ccc:	40007000 	.word	0x40007000
 8009cd0:	10908100 	.word	0x10908100
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	fa93 f3a3 	rbit	r3, r3
 8009cde:	617b      	str	r3, [r7, #20]
 8009ce0:	4b9a      	ldr	r3, [pc, #616]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	613a      	str	r2, [r7, #16]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	fa92 f2a2 	rbit	r2, r2
 8009cee:	60fa      	str	r2, [r7, #12]
  return result;
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	fab2 f282 	clz	r2, r2
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cfc:	b2d2      	uxtb	r2, r2
 8009cfe:	f002 021f 	and.w	r2, r2, #31
 8009d02:	2101      	movs	r1, #1
 8009d04:	fa01 f202 	lsl.w	r2, r1, r2
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0b7      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009d0e:	4b8f      	ldr	r3, [pc, #572]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	498c      	ldr	r1, [pc, #560]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009d20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d105      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d28:	4b88      	ldr	r3, [pc, #544]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	4a87      	ldr	r2, [pc, #540]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d008      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d40:	4b82      	ldr	r3, [pc, #520]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	f023 0203 	bic.w	r2, r3, #3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	497f      	ldr	r1, [pc, #508]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d008      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d5e:	4b7b      	ldr	r3, [pc, #492]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	4978      	ldr	r1, [pc, #480]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d008      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d7c:	4b73      	ldr	r3, [pc, #460]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	4970      	ldr	r1, [pc, #448]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d008      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d9a:	4b6c      	ldr	r3, [pc, #432]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9e:	f023 0210 	bic.w	r2, r3, #16
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	4969      	ldr	r1, [pc, #420]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d008      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009db8:	4b64      	ldr	r3, [pc, #400]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc4:	4961      	ldr	r1, [pc, #388]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d008      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009dd6:	4b5d      	ldr	r3, [pc, #372]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	f023 0220 	bic.w	r2, r3, #32
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	495a      	ldr	r1, [pc, #360]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d008      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009df4:	4b55      	ldr	r3, [pc, #340]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	4952      	ldr	r1, [pc, #328]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e02:	4313      	orrs	r3, r2
 8009e04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0308 	and.w	r3, r3, #8
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d008      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e12:	4b4e      	ldr	r3, [pc, #312]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	494b      	ldr	r1, [pc, #300]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0310 	and.w	r3, r3, #16
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d008      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e30:	4b46      	ldr	r3, [pc, #280]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	4943      	ldr	r1, [pc, #268]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d008      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009e4e:	4b3f      	ldr	r3, [pc, #252]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	493c      	ldr	r1, [pc, #240]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009e6c:	4b37      	ldr	r3, [pc, #220]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	4934      	ldr	r1, [pc, #208]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d008      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009e8a:	4b30      	ldr	r3, [pc, #192]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	492d      	ldr	r1, [pc, #180]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d008      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009ea8:	4b28      	ldr	r3, [pc, #160]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb4:	4925      	ldr	r1, [pc, #148]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d008      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8009ec6:	4b21      	ldr	r3, [pc, #132]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	491e      	ldr	r1, [pc, #120]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d008      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8009ee4:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	4916      	ldr	r1, [pc, #88]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d008      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0e:	490f      	ldr	r1, [pc, #60]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d008      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f24:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2c:	4907      	ldr	r1, [pc, #28]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00c      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8009f3e:	4b03      	ldr	r3, [pc, #12]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f42:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	e002      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009f4a:	bf00      	nop
 8009f4c:	40021000 	.word	0x40021000
 8009f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f52:	4913      	ldr	r1, [pc, #76]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d008      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009f64:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f70:	490b      	ldr	r1, [pc, #44]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f72:	4313      	orrs	r3, r2
 8009f74:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d008      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8009f82:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f8e:	4904      	ldr	r1, [pc, #16]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3748      	adds	r7, #72	; 0x48
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	40021000 	.word	0x40021000

08009fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009fa8:	e7fe      	b.n	8009fa8 <NMI_Handler+0x4>

08009faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009faa:	b480      	push	{r7}
 8009fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009fae:	e7fe      	b.n	8009fae <HardFault_Handler+0x4>

08009fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009fb4:	e7fe      	b.n	8009fb4 <MemManage_Handler+0x4>

08009fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009fba:	e7fe      	b.n	8009fba <BusFault_Handler+0x4>

08009fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009fc0:	e7fe      	b.n	8009fc0 <UsageFault_Handler+0x4>

08009fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009fc6:	bf00      	nop
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bc80      	pop	{r7}
 8009fcc:	4770      	bx	lr

08009fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009fd2:	bf00      	nop
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc80      	pop	{r7}
 8009fd8:	4770      	bx	lr
	...

08009fdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009fe0:	4802      	ldr	r0, [pc, #8]	; (8009fec <DMA1_Channel1_IRQHandler+0x10>)
 8009fe2:	f7fa f93d 	bl	8004260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009fe6:	bf00      	nop
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	2000022c 	.word	0x2000022c

08009ff0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009ff4:	4802      	ldr	r0, [pc, #8]	; (800a000 <DMA1_Channel6_IRQHandler+0x10>)
 8009ff6:	f7fa f933 	bl	8004260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8009ffa:	bf00      	nop
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	200003c4 	.word	0x200003c4

0800a004 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a008:	4802      	ldr	r0, [pc, #8]	; (800a014 <DMA1_Channel7_IRQHandler+0x10>)
 800a00a:	f7fa f929 	bl	8004260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800a00e:	bf00      	nop
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20000380 	.word	0x20000380

0800a018 <DMA2_Channel1_IRQHandler>:

void DMA2_Channel1_IRQHandler(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a01c:	4802      	ldr	r0, [pc, #8]	; (800a028 <DMA2_Channel1_IRQHandler+0x10>)
 800a01e:	f7fa f91f 	bl	8004260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	200002c0 	.word	0x200002c0

0800a02c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a030:	4802      	ldr	r0, [pc, #8]	; (800a03c <TIM3_IRQHandler+0x10>)
 800a032:	f7fa fe0d 	bl	8004c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a036:	bf00      	nop
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20000158 	.word	0x20000158

0800a040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a044:	4802      	ldr	r0, [pc, #8]	; (800a050 <I2C1_EV_IRQHandler+0x10>)
 800a046:	f7fc fad5 	bl	80065f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a04a:	bf00      	nop
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000304 	.word	0x20000304

0800a054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a058:	4802      	ldr	r0, [pc, #8]	; (800a064 <USART1_IRQHandler+0x10>)
 800a05a:	f000 fb6f 	bl	800a73c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a05e:	bf00      	nop
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000494 	.word	0x20000494

0800a068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a06c:	4802      	ldr	r0, [pc, #8]	; (800a078 <USART2_IRQHandler+0x10>)
 800a06e:	f000 fb65 	bl	800a73c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a072:	bf00      	nop
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20000518 	.word	0x20000518

0800a07c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800a080:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a084:	f7f9 ffb8 	bl	8003ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a088:	bf00      	nop
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a090:	4802      	ldr	r0, [pc, #8]	; (800a09c <SPI3_IRQHandler+0x10>)
 800a092:	f000 f91d 	bl	800a2d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a096:	bf00      	nop
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20000408 	.word	0x20000408

0800a0a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a0a8:	4a14      	ldr	r2, [pc, #80]	; (800a0fc <_sbrk+0x5c>)
 800a0aa:	4b15      	ldr	r3, [pc, #84]	; (800a100 <_sbrk+0x60>)
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a0b4:	4b13      	ldr	r3, [pc, #76]	; (800a104 <_sbrk+0x64>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d102      	bne.n	800a0c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a0bc:	4b11      	ldr	r3, [pc, #68]	; (800a104 <_sbrk+0x64>)
 800a0be:	4a12      	ldr	r2, [pc, #72]	; (800a108 <_sbrk+0x68>)
 800a0c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a0c2:	4b10      	ldr	r3, [pc, #64]	; (800a104 <_sbrk+0x64>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d207      	bcs.n	800a0e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a0d0:	f002 fc38 	bl	800c944 <__errno>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	220c      	movs	r2, #12
 800a0d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	e009      	b.n	800a0f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a0e0:	4b08      	ldr	r3, [pc, #32]	; (800a104 <_sbrk+0x64>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a0e6:	4b07      	ldr	r3, [pc, #28]	; (800a104 <_sbrk+0x64>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	4a05      	ldr	r2, [pc, #20]	; (800a104 <_sbrk+0x64>)
 800a0f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20010000 	.word	0x20010000
 800a100:	00000400 	.word	0x00000400
 800a104:	200001d4 	.word	0x200001d4
 800a108:	200017e0 	.word	0x200017e0

0800a10c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e0c1      	b.n	800a2a2 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	2b00      	cmp	r3, #0
 800a124:	d108      	bne.n	800a138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a12e:	d009      	beq.n	800a144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	61da      	str	r2, [r3, #28]
 800a136:	e005      	b.n	800a144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	d12a      	bne.n	800a1ac <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a52      	ldr	r2, [pc, #328]	; (800a2ac <HAL_SPI_Init+0x1a0>)
 800a162:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a52      	ldr	r2, [pc, #328]	; (800a2b0 <HAL_SPI_Init+0x1a4>)
 800a168:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a51      	ldr	r2, [pc, #324]	; (800a2b4 <HAL_SPI_Init+0x1a8>)
 800a16e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a51      	ldr	r2, [pc, #324]	; (800a2b8 <HAL_SPI_Init+0x1ac>)
 800a174:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a50      	ldr	r2, [pc, #320]	; (800a2bc <HAL_SPI_Init+0x1b0>)
 800a17a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a50      	ldr	r2, [pc, #320]	; (800a2c0 <HAL_SPI_Init+0x1b4>)
 800a180:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a4f      	ldr	r2, [pc, #316]	; (800a2c4 <HAL_SPI_Init+0x1b8>)
 800a186:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a4f      	ldr	r2, [pc, #316]	; (800a2c8 <HAL_SPI_Init+0x1bc>)
 800a18c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a4b      	ldr	r2, [pc, #300]	; (800a2cc <HAL_SPI_Init+0x1c0>)
 800a19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1cc:	d902      	bls.n	800a1d4 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	e002      	b.n	800a1da <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1e2:	d007      	beq.n	800a1f4 <HAL_SPI_Init+0xe8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1ec:	d002      	beq.n	800a1f4 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a236:	ea42 0103 	orr.w	r1, r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	0c1b      	lsrs	r3, r3, #16
 800a250:	f003 0204 	and.w	r2, r3, #4
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	f003 0310 	and.w	r3, r3, #16
 800a25c:	431a      	orrs	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a262:	f003 0308 	and.w	r3, r3, #8
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a270:	ea42 0103 	orr.w	r1, r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69da      	ldr	r2, [r3, #28]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	0800a4bd 	.word	0x0800a4bd
 800a2b0:	0800a4cf 	.word	0x0800a4cf
 800a2b4:	0800a4e1 	.word	0x0800a4e1
 800a2b8:	0800a4f3 	.word	0x0800a4f3
 800a2bc:	0800a505 	.word	0x0800a505
 800a2c0:	0800a517 	.word	0x0800a517
 800a2c4:	0800a529 	.word	0x0800a529
 800a2c8:	0800a53b 	.word	0x0800a53b
 800a2cc:	08008345 	.word	0x08008345

0800a2d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10e      	bne.n	800a310 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d009      	beq.n	800a310 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a302:	2b00      	cmp	r3, #0
 800a304:	d004      	beq.n	800a310 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	4798      	blx	r3
    return;
 800a30e:	e0cf      	b.n	800a4b0 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d009      	beq.n	800a32e <HAL_SPI_IRQHandler+0x5e>
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	4798      	blx	r3
    return;
 800a32c:	e0c0      	b.n	800a4b0 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <HAL_SPI_IRQHandler+0x7e>
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80b1 	beq.w	800a4b0 <HAL_SPI_IRQHandler+0x1e0>
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 80ab 	beq.w	800a4b0 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a360:	2b00      	cmp	r3, #0
 800a362:	d023      	beq.n	800a3ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d011      	beq.n	800a394 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a374:	f043 0204 	orr.w	r2, r3, #4
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	617b      	str	r3, [r7, #20]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	e00b      	b.n	800a3ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a394:	2300      	movs	r3, #0
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	613b      	str	r3, [r7, #16]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	693b      	ldr	r3, [r7, #16]
        return;
 800a3aa:	e081      	b.n	800a4b0 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	f003 0320 	and.w	r3, r3, #32
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d014      	beq.n	800a3e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ba:	f043 0201 	orr.w	r2, r3, #1
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60fb      	str	r3, [r7, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	60fb      	str	r3, [r7, #12]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ee:	f043 0208 	orr.w	r2, r3, #8
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60bb      	str	r3, [r7, #8]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	60bb      	str	r3, [r7, #8]
 800a402:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d050      	beq.n	800a4ae <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a41a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <HAL_SPI_IRQHandler+0x168>
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d034      	beq.n	800a4a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0203 	bic.w	r2, r2, #3
 800a446:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d011      	beq.n	800a474 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a454:	4a18      	ldr	r2, [pc, #96]	; (800a4b8 <HAL_SPI_IRQHandler+0x1e8>)
 800a456:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f9 fec1 	bl	80041e4 <HAL_DMA_Abort_IT>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a46c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d017      	beq.n	800a4ac <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a480:	4a0d      	ldr	r2, [pc, #52]	; (800a4b8 <HAL_SPI_IRQHandler+0x1e8>)
 800a482:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f9 feab 	bl	80041e4 <HAL_DMA_Abort_IT>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a498:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a4a0:	e004      	b.n	800a4ac <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a4aa:	e000      	b.n	800a4ae <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 800a4ac:	bf00      	nop
    return;
 800a4ae:	bf00      	nop
  }
}
 800a4b0:	3720      	adds	r7, #32
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	0800a54d 	.word	0x0800a54d

0800a4bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr

0800a4ce <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr

0800a4f2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr

0800a504 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr

0800a516 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	bc80      	pop	{r7}
 800a526:	4770      	bx	lr

0800a528 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	bc80      	pop	{r7}
 800a538:	4770      	bx	lr

0800a53a <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800a542:	bf00      	nop
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	bc80      	pop	{r7}
 800a54a:	4770      	bx	lr

0800a54c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a570:	bf00      	nop
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e040      	b.n	800a60c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7fd ffd2 	bl	8008544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2224      	movs	r2, #36	; 0x24
 800a5a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0201 	bic.w	r2, r2, #1
 800a5b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fbbc 	bl	800ad34 <UART_SetConfig>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e022      	b.n	800a60c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fd86 	bl	800b0e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f042 0201 	orr.w	r2, r2, #1
 800a602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fe0c 	bl	800b222 <UART_CheckIdleState>
 800a60a:	4603      	mov	r3, r0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08a      	sub	sp, #40	; 0x28
 800a618:	af02      	add	r7, sp, #8
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	4613      	mov	r3, r2
 800a622:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a628:	2b20      	cmp	r3, #32
 800a62a:	f040 8082 	bne.w	800a732 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <HAL_UART_Transmit+0x26>
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e07a      	b.n	800a734 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a644:	2b01      	cmp	r3, #1
 800a646:	d101      	bne.n	800a64c <HAL_UART_Transmit+0x38>
 800a648:	2302      	movs	r3, #2
 800a64a:	e073      	b.n	800a734 <HAL_UART_Transmit+0x120>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2221      	movs	r2, #33	; 0x21
 800a660:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a662:	f7fd fbbf 	bl	8007de4 <HAL_GetTick>
 800a666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	88fa      	ldrh	r2, [r7, #6]
 800a66c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	88fa      	ldrh	r2, [r7, #6]
 800a674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a680:	d108      	bne.n	800a694 <HAL_UART_Transmit+0x80>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d104      	bne.n	800a694 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	61bb      	str	r3, [r7, #24]
 800a692:	e003      	b.n	800a69c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a6a4:	e02d      	b.n	800a702 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2180      	movs	r1, #128	; 0x80
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 fdff 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e039      	b.n	800a734 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10b      	bne.n	800a6de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	881a      	ldrh	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6d2:	b292      	uxth	r2, r2
 800a6d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	3302      	adds	r3, #2
 800a6da:	61bb      	str	r3, [r7, #24]
 800a6dc:	e008      	b.n	800a6f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	b292      	uxth	r2, r2
 800a6e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a708:	b29b      	uxth	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1cb      	bne.n	800a6a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2200      	movs	r2, #0
 800a716:	2140      	movs	r1, #64	; 0x40
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fdcb 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e005      	b.n	800a734 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2220      	movs	r2, #32
 800a72c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	e000      	b.n	800a734 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a732:	2302      	movs	r3, #2
  }
}
 800a734:	4618      	mov	r0, r3
 800a736:	3720      	adds	r7, #32
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b0ba      	sub	sp, #232	; 0xe8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a762:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a766:	f640 030f 	movw	r3, #2063	; 0x80f
 800a76a:	4013      	ands	r3, r2
 800a76c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a774:	2b00      	cmp	r3, #0
 800a776:	d115      	bne.n	800a7a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a77c:	f003 0320 	and.w	r3, r3, #32
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00f      	beq.n	800a7a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a788:	f003 0320 	and.w	r3, r3, #32
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d009      	beq.n	800a7a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 82a3 	beq.w	800ace0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
      }
      return;
 800a7a2:	e29d      	b.n	800ace0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 8117 	beq.w	800a9dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a7ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a7ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a7be:	4b85      	ldr	r3, [pc, #532]	; (800a9d4 <HAL_UART_IRQHandler+0x298>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 810a 	beq.w	800a9dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d011      	beq.n	800a7f8 <HAL_UART_IRQHandler+0xbc>
 800a7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7ee:	f043 0201 	orr.w	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	2b00      	cmp	r3, #0
 800a802:	d011      	beq.n	800a828 <HAL_UART_IRQHandler+0xec>
 800a804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00b      	beq.n	800a828 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2202      	movs	r2, #2
 800a816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a81e:	f043 0204 	orr.w	r2, r3, #4
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d011      	beq.n	800a858 <HAL_UART_IRQHandler+0x11c>
 800a834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2204      	movs	r2, #4
 800a846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84e:	f043 0202 	orr.w	r2, r3, #2
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a85c:	f003 0308 	and.w	r3, r3, #8
 800a860:	2b00      	cmp	r3, #0
 800a862:	d017      	beq.n	800a894 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a868:	f003 0320 	and.w	r3, r3, #32
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d105      	bne.n	800a87c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a874:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2208      	movs	r2, #8
 800a882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a88a:	f043 0208 	orr.w	r2, r3, #8
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d012      	beq.n	800a8c6 <HAL_UART_IRQHandler+0x18a>
 800a8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00c      	beq.n	800a8c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8bc:	f043 0220 	orr.w	r2, r3, #32
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 8209 	beq.w	800ace4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a8d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00d      	beq.n	800a8fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a8de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8e2:	f003 0320 	and.w	r3, r3, #32
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d007      	beq.n	800a8fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90e:	2b40      	cmp	r3, #64	; 0x40
 800a910:	d005      	beq.n	800a91e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a916:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d04f      	beq.n	800a9be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fd8c 	bl	800b43c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a92e:	2b40      	cmp	r3, #64	; 0x40
 800a930:	d141      	bne.n	800a9b6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3308      	adds	r3, #8
 800a938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a95e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a96a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1d9      	bne.n	800a932 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a982:	2b00      	cmp	r3, #0
 800a984:	d013      	beq.n	800a9ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a98a:	4a13      	ldr	r2, [pc, #76]	; (800a9d8 <HAL_UART_IRQHandler+0x29c>)
 800a98c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a992:	4618      	mov	r0, r3
 800a994:	f7f9 fc26 	bl	80041e4 <HAL_DMA_Abort_IT>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d017      	beq.n	800a9ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ac:	e00f      	b.n	800a9ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f9ab 	bl	800ad0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b4:	e00b      	b.n	800a9ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f9a7 	bl	800ad0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9bc:	e007      	b.n	800a9ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9a3 	bl	800ad0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a9cc:	e18a      	b.n	800ace4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ce:	bf00      	nop
    return;
 800a9d0:	e188      	b.n	800ace4 <HAL_UART_IRQHandler+0x5a8>
 800a9d2:	bf00      	nop
 800a9d4:	04000120 	.word	0x04000120
 800a9d8:	0800b501 	.word	0x0800b501

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	f040 8143 	bne.w	800ac6c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ea:	f003 0310 	and.w	r3, r3, #16
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 813c 	beq.w	800ac6c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f8:	f003 0310 	and.w	r3, r3, #16
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 8135 	beq.w	800ac6c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2210      	movs	r2, #16
 800aa08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b40      	cmp	r3, #64	; 0x40
 800aa16:	f040 80b1 	bne.w	800ab7c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 815c 	beq.w	800ace8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	f080 8154 	bcs.w	800ace8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	f000 8085 	beq.w	800ab60 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1da      	bne.n	800aa56 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aab2:	f023 0301 	bic.w	r3, r3, #1
 800aab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aac4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aac8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aacc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e1      	bne.n	800aaa0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3308      	adds	r3, #8
 800aae2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aaec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3308      	adds	r3, #8
 800aafc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab00:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e3      	bne.n	800aadc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab30:	f023 0310 	bic.w	r3, r3, #16
 800ab34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab42:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e4      	bne.n	800ab20 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7f9 fb0a 	bl	8004174 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f8d1 	bl	800ad1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab7a:	e0b5      	b.n	800ace8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 80a7 	beq.w	800acec <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800ab9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 80a2 	beq.w	800acec <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	461a      	mov	r2, r3
 800abc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abca:	647b      	str	r3, [r7, #68]	; 0x44
 800abcc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e4      	bne.n	800aba8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3308      	adds	r3, #8
 800abe4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	623b      	str	r3, [r7, #32]
   return(result);
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3308      	adds	r3, #8
 800abfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac02:	633a      	str	r2, [r7, #48]	; 0x30
 800ac04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e3      	bne.n	800abde <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	e853 3f00 	ldrex	r3, [r3]
 800ac34:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f023 0310 	bic.w	r3, r3, #16
 800ac3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	461a      	mov	r2, r3
 800ac46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac4a:	61fb      	str	r3, [r7, #28]
 800ac4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4e:	69b9      	ldr	r1, [r7, #24]
 800ac50:	69fa      	ldr	r2, [r7, #28]
 800ac52:	e841 2300 	strex	r3, r2, [r1]
 800ac56:	617b      	str	r3, [r7, #20]
   return(result);
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1e4      	bne.n	800ac28 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f859 	bl	800ad1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac6a:	e03f      	b.n	800acec <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <HAL_UART_IRQHandler+0x55a>
 800ac78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d008      	beq.n	800ac96 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ac8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fc76 	bl	800b580 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac94:	e02d      	b.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ac96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00e      	beq.n	800acc0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d008      	beq.n	800acc0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01c      	beq.n	800acf0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
    }
    return;
 800acbe:	e017      	b.n	800acf0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800acc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d012      	beq.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
 800accc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00c      	beq.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fc27 	bl	800b52c <UART_EndTransmit_IT>
    return;
 800acde:	e008      	b.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ace0:	bf00      	nop
 800ace2:	e006      	b.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
    return;
 800ace4:	bf00      	nop
 800ace6:	e004      	b.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ace8:	bf00      	nop
 800acea:	e002      	b.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
      return;
 800acec:	bf00      	nop
 800acee:	e000      	b.n	800acf2 <HAL_UART_IRQHandler+0x5b6>
    return;
 800acf0:	bf00      	nop
  }

}
 800acf2:	37e8      	adds	r7, #232	; 0xe8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bc80      	pop	{r7}
 800ad08:	4770      	bx	lr

0800ad0a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bc80      	pop	{r7}
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr
	...

0800ad34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	431a      	orrs	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	4b92      	ldr	r3, [pc, #584]	; (800afa8 <UART_SetConfig+0x274>)
 800ad60:	4013      	ands	r3, r2
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6812      	ldr	r2, [r2, #0]
 800ad66:	6979      	ldr	r1, [r7, #20]
 800ad68:	430b      	orrs	r3, r1
 800ad6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68da      	ldr	r2, [r3, #12]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a80      	ldr	r2, [pc, #512]	; (800afac <UART_SetConfig+0x278>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d120      	bne.n	800adf2 <UART_SetConfig+0xbe>
 800adb0:	4b7f      	ldr	r3, [pc, #508]	; (800afb0 <UART_SetConfig+0x27c>)
 800adb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb4:	f003 0303 	and.w	r3, r3, #3
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d817      	bhi.n	800adec <UART_SetConfig+0xb8>
 800adbc:	a201      	add	r2, pc, #4	; (adr r2, 800adc4 <UART_SetConfig+0x90>)
 800adbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc2:	bf00      	nop
 800adc4:	0800add5 	.word	0x0800add5
 800adc8:	0800ade1 	.word	0x0800ade1
 800adcc:	0800ade7 	.word	0x0800ade7
 800add0:	0800addb 	.word	0x0800addb
 800add4:	2301      	movs	r3, #1
 800add6:	77fb      	strb	r3, [r7, #31]
 800add8:	e0b5      	b.n	800af46 <UART_SetConfig+0x212>
 800adda:	2302      	movs	r3, #2
 800addc:	77fb      	strb	r3, [r7, #31]
 800adde:	e0b2      	b.n	800af46 <UART_SetConfig+0x212>
 800ade0:	2304      	movs	r3, #4
 800ade2:	77fb      	strb	r3, [r7, #31]
 800ade4:	e0af      	b.n	800af46 <UART_SetConfig+0x212>
 800ade6:	2308      	movs	r3, #8
 800ade8:	77fb      	strb	r3, [r7, #31]
 800adea:	e0ac      	b.n	800af46 <UART_SetConfig+0x212>
 800adec:	2310      	movs	r3, #16
 800adee:	77fb      	strb	r3, [r7, #31]
 800adf0:	e0a9      	b.n	800af46 <UART_SetConfig+0x212>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a6f      	ldr	r2, [pc, #444]	; (800afb4 <UART_SetConfig+0x280>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d124      	bne.n	800ae46 <UART_SetConfig+0x112>
 800adfc:	4b6c      	ldr	r3, [pc, #432]	; (800afb0 <UART_SetConfig+0x27c>)
 800adfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae08:	d011      	beq.n	800ae2e <UART_SetConfig+0xfa>
 800ae0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae0e:	d817      	bhi.n	800ae40 <UART_SetConfig+0x10c>
 800ae10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae14:	d011      	beq.n	800ae3a <UART_SetConfig+0x106>
 800ae16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae1a:	d811      	bhi.n	800ae40 <UART_SetConfig+0x10c>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <UART_SetConfig+0xf4>
 800ae20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae24:	d006      	beq.n	800ae34 <UART_SetConfig+0x100>
 800ae26:	e00b      	b.n	800ae40 <UART_SetConfig+0x10c>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	77fb      	strb	r3, [r7, #31]
 800ae2c:	e08b      	b.n	800af46 <UART_SetConfig+0x212>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	77fb      	strb	r3, [r7, #31]
 800ae32:	e088      	b.n	800af46 <UART_SetConfig+0x212>
 800ae34:	2304      	movs	r3, #4
 800ae36:	77fb      	strb	r3, [r7, #31]
 800ae38:	e085      	b.n	800af46 <UART_SetConfig+0x212>
 800ae3a:	2308      	movs	r3, #8
 800ae3c:	77fb      	strb	r3, [r7, #31]
 800ae3e:	e082      	b.n	800af46 <UART_SetConfig+0x212>
 800ae40:	2310      	movs	r3, #16
 800ae42:	77fb      	strb	r3, [r7, #31]
 800ae44:	e07f      	b.n	800af46 <UART_SetConfig+0x212>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a5b      	ldr	r2, [pc, #364]	; (800afb8 <UART_SetConfig+0x284>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d124      	bne.n	800ae9a <UART_SetConfig+0x166>
 800ae50:	4b57      	ldr	r3, [pc, #348]	; (800afb0 <UART_SetConfig+0x27c>)
 800ae52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ae58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ae5c:	d011      	beq.n	800ae82 <UART_SetConfig+0x14e>
 800ae5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ae62:	d817      	bhi.n	800ae94 <UART_SetConfig+0x160>
 800ae64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae68:	d011      	beq.n	800ae8e <UART_SetConfig+0x15a>
 800ae6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae6e:	d811      	bhi.n	800ae94 <UART_SetConfig+0x160>
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <UART_SetConfig+0x148>
 800ae74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae78:	d006      	beq.n	800ae88 <UART_SetConfig+0x154>
 800ae7a:	e00b      	b.n	800ae94 <UART_SetConfig+0x160>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	77fb      	strb	r3, [r7, #31]
 800ae80:	e061      	b.n	800af46 <UART_SetConfig+0x212>
 800ae82:	2302      	movs	r3, #2
 800ae84:	77fb      	strb	r3, [r7, #31]
 800ae86:	e05e      	b.n	800af46 <UART_SetConfig+0x212>
 800ae88:	2304      	movs	r3, #4
 800ae8a:	77fb      	strb	r3, [r7, #31]
 800ae8c:	e05b      	b.n	800af46 <UART_SetConfig+0x212>
 800ae8e:	2308      	movs	r3, #8
 800ae90:	77fb      	strb	r3, [r7, #31]
 800ae92:	e058      	b.n	800af46 <UART_SetConfig+0x212>
 800ae94:	2310      	movs	r3, #16
 800ae96:	77fb      	strb	r3, [r7, #31]
 800ae98:	e055      	b.n	800af46 <UART_SetConfig+0x212>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a47      	ldr	r2, [pc, #284]	; (800afbc <UART_SetConfig+0x288>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d124      	bne.n	800aeee <UART_SetConfig+0x1ba>
 800aea4:	4b42      	ldr	r3, [pc, #264]	; (800afb0 <UART_SetConfig+0x27c>)
 800aea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800aeac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aeb0:	d011      	beq.n	800aed6 <UART_SetConfig+0x1a2>
 800aeb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aeb6:	d817      	bhi.n	800aee8 <UART_SetConfig+0x1b4>
 800aeb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aebc:	d011      	beq.n	800aee2 <UART_SetConfig+0x1ae>
 800aebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aec2:	d811      	bhi.n	800aee8 <UART_SetConfig+0x1b4>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <UART_SetConfig+0x19c>
 800aec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aecc:	d006      	beq.n	800aedc <UART_SetConfig+0x1a8>
 800aece:	e00b      	b.n	800aee8 <UART_SetConfig+0x1b4>
 800aed0:	2300      	movs	r3, #0
 800aed2:	77fb      	strb	r3, [r7, #31]
 800aed4:	e037      	b.n	800af46 <UART_SetConfig+0x212>
 800aed6:	2302      	movs	r3, #2
 800aed8:	77fb      	strb	r3, [r7, #31]
 800aeda:	e034      	b.n	800af46 <UART_SetConfig+0x212>
 800aedc:	2304      	movs	r3, #4
 800aede:	77fb      	strb	r3, [r7, #31]
 800aee0:	e031      	b.n	800af46 <UART_SetConfig+0x212>
 800aee2:	2308      	movs	r3, #8
 800aee4:	77fb      	strb	r3, [r7, #31]
 800aee6:	e02e      	b.n	800af46 <UART_SetConfig+0x212>
 800aee8:	2310      	movs	r3, #16
 800aeea:	77fb      	strb	r3, [r7, #31]
 800aeec:	e02b      	b.n	800af46 <UART_SetConfig+0x212>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a33      	ldr	r2, [pc, #204]	; (800afc0 <UART_SetConfig+0x28c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d124      	bne.n	800af42 <UART_SetConfig+0x20e>
 800aef8:	4b2d      	ldr	r3, [pc, #180]	; (800afb0 <UART_SetConfig+0x27c>)
 800aefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800af00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800af04:	d011      	beq.n	800af2a <UART_SetConfig+0x1f6>
 800af06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800af0a:	d817      	bhi.n	800af3c <UART_SetConfig+0x208>
 800af0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af10:	d011      	beq.n	800af36 <UART_SetConfig+0x202>
 800af12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af16:	d811      	bhi.n	800af3c <UART_SetConfig+0x208>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <UART_SetConfig+0x1f0>
 800af1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af20:	d006      	beq.n	800af30 <UART_SetConfig+0x1fc>
 800af22:	e00b      	b.n	800af3c <UART_SetConfig+0x208>
 800af24:	2300      	movs	r3, #0
 800af26:	77fb      	strb	r3, [r7, #31]
 800af28:	e00d      	b.n	800af46 <UART_SetConfig+0x212>
 800af2a:	2302      	movs	r3, #2
 800af2c:	77fb      	strb	r3, [r7, #31]
 800af2e:	e00a      	b.n	800af46 <UART_SetConfig+0x212>
 800af30:	2304      	movs	r3, #4
 800af32:	77fb      	strb	r3, [r7, #31]
 800af34:	e007      	b.n	800af46 <UART_SetConfig+0x212>
 800af36:	2308      	movs	r3, #8
 800af38:	77fb      	strb	r3, [r7, #31]
 800af3a:	e004      	b.n	800af46 <UART_SetConfig+0x212>
 800af3c:	2310      	movs	r3, #16
 800af3e:	77fb      	strb	r3, [r7, #31]
 800af40:	e001      	b.n	800af46 <UART_SetConfig+0x212>
 800af42:	2310      	movs	r3, #16
 800af44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af4e:	d16c      	bne.n	800b02a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800af50:	7ffb      	ldrb	r3, [r7, #31]
 800af52:	2b08      	cmp	r3, #8
 800af54:	d838      	bhi.n	800afc8 <UART_SetConfig+0x294>
 800af56:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <UART_SetConfig+0x228>)
 800af58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5c:	0800af81 	.word	0x0800af81
 800af60:	0800af89 	.word	0x0800af89
 800af64:	0800af91 	.word	0x0800af91
 800af68:	0800afc9 	.word	0x0800afc9
 800af6c:	0800af97 	.word	0x0800af97
 800af70:	0800afc9 	.word	0x0800afc9
 800af74:	0800afc9 	.word	0x0800afc9
 800af78:	0800afc9 	.word	0x0800afc9
 800af7c:	0800af9f 	.word	0x0800af9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af80:	f7fe fdae 	bl	8009ae0 <HAL_RCC_GetPCLK1Freq>
 800af84:	61b8      	str	r0, [r7, #24]
        break;
 800af86:	e024      	b.n	800afd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af88:	f7fe fdcc 	bl	8009b24 <HAL_RCC_GetPCLK2Freq>
 800af8c:	61b8      	str	r0, [r7, #24]
        break;
 800af8e:	e020      	b.n	800afd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af90:	4b0c      	ldr	r3, [pc, #48]	; (800afc4 <UART_SetConfig+0x290>)
 800af92:	61bb      	str	r3, [r7, #24]
        break;
 800af94:	e01d      	b.n	800afd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af96:	f7fe fd2f 	bl	80099f8 <HAL_RCC_GetSysClockFreq>
 800af9a:	61b8      	str	r0, [r7, #24]
        break;
 800af9c:	e019      	b.n	800afd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afa2:	61bb      	str	r3, [r7, #24]
        break;
 800afa4:	e015      	b.n	800afd2 <UART_SetConfig+0x29e>
 800afa6:	bf00      	nop
 800afa8:	efff69f3 	.word	0xefff69f3
 800afac:	40013800 	.word	0x40013800
 800afb0:	40021000 	.word	0x40021000
 800afb4:	40004400 	.word	0x40004400
 800afb8:	40004800 	.word	0x40004800
 800afbc:	40004c00 	.word	0x40004c00
 800afc0:	40005000 	.word	0x40005000
 800afc4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	77bb      	strb	r3, [r7, #30]
        break;
 800afd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d075      	beq.n	800b0c4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	005a      	lsls	r2, r3, #1
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	085b      	lsrs	r3, r3, #1
 800afe2:	441a      	add	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afec:	b29b      	uxth	r3, r3
 800afee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2b0f      	cmp	r3, #15
 800aff4:	d916      	bls.n	800b024 <UART_SetConfig+0x2f0>
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800affc:	d212      	bcs.n	800b024 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	b29b      	uxth	r3, r3
 800b002:	f023 030f 	bic.w	r3, r3, #15
 800b006:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	085b      	lsrs	r3, r3, #1
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f003 0307 	and.w	r3, r3, #7
 800b012:	b29a      	uxth	r2, r3
 800b014:	89fb      	ldrh	r3, [r7, #14]
 800b016:	4313      	orrs	r3, r2
 800b018:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	89fa      	ldrh	r2, [r7, #14]
 800b020:	60da      	str	r2, [r3, #12]
 800b022:	e04f      	b.n	800b0c4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	77bb      	strb	r3, [r7, #30]
 800b028:	e04c      	b.n	800b0c4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b02a:	7ffb      	ldrb	r3, [r7, #31]
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	d828      	bhi.n	800b082 <UART_SetConfig+0x34e>
 800b030:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <UART_SetConfig+0x304>)
 800b032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b036:	bf00      	nop
 800b038:	0800b05d 	.word	0x0800b05d
 800b03c:	0800b065 	.word	0x0800b065
 800b040:	0800b06d 	.word	0x0800b06d
 800b044:	0800b083 	.word	0x0800b083
 800b048:	0800b073 	.word	0x0800b073
 800b04c:	0800b083 	.word	0x0800b083
 800b050:	0800b083 	.word	0x0800b083
 800b054:	0800b083 	.word	0x0800b083
 800b058:	0800b07b 	.word	0x0800b07b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b05c:	f7fe fd40 	bl	8009ae0 <HAL_RCC_GetPCLK1Freq>
 800b060:	61b8      	str	r0, [r7, #24]
        break;
 800b062:	e013      	b.n	800b08c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b064:	f7fe fd5e 	bl	8009b24 <HAL_RCC_GetPCLK2Freq>
 800b068:	61b8      	str	r0, [r7, #24]
        break;
 800b06a:	e00f      	b.n	800b08c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b06c:	4b1b      	ldr	r3, [pc, #108]	; (800b0dc <UART_SetConfig+0x3a8>)
 800b06e:	61bb      	str	r3, [r7, #24]
        break;
 800b070:	e00c      	b.n	800b08c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b072:	f7fe fcc1 	bl	80099f8 <HAL_RCC_GetSysClockFreq>
 800b076:	61b8      	str	r0, [r7, #24]
        break;
 800b078:	e008      	b.n	800b08c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b07e:	61bb      	str	r3, [r7, #24]
        break;
 800b080:	e004      	b.n	800b08c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800b082:	2300      	movs	r3, #0
 800b084:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	77bb      	strb	r3, [r7, #30]
        break;
 800b08a:	bf00      	nop
    }

    if (pclk != 0U)
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d018      	beq.n	800b0c4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	085a      	lsrs	r2, r3, #1
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	441a      	add	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d908      	bls.n	800b0c0 <UART_SetConfig+0x38c>
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0b4:	d204      	bcs.n	800b0c0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	60da      	str	r2, [r3, #12]
 800b0be:	e001      	b.n	800b0c4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b0d0:	7fbb      	ldrb	r3, [r7, #30]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3720      	adds	r7, #32
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	007a1200 	.word	0x007a1200

0800b0e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00a      	beq.n	800b10a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00a      	beq.n	800b12c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00a      	beq.n	800b14e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	430a      	orrs	r2, r1
 800b14c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	f003 0308 	and.w	r3, r3, #8
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00a      	beq.n	800b192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	430a      	orrs	r2, r1
 800b190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b196:	f003 0320 	and.w	r3, r3, #32
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d01a      	beq.n	800b1f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1de:	d10a      	bne.n	800b1f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00a      	beq.n	800b218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	430a      	orrs	r2, r1
 800b216:	605a      	str	r2, [r3, #4]
  }
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bc80      	pop	{r7}
 800b220:	4770      	bx	lr

0800b222 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b086      	sub	sp, #24
 800b226:	af02      	add	r7, sp, #8
 800b228:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b232:	f7fc fdd7 	bl	8007de4 <HAL_GetTick>
 800b236:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0308 	and.w	r3, r3, #8
 800b242:	2b08      	cmp	r3, #8
 800b244:	d10e      	bne.n	800b264 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f82d 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b260:	2303      	movs	r3, #3
 800b262:	e023      	b.n	800b2ac <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d10e      	bne.n	800b290 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b272:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f817 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e00d      	b.n	800b2ac <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2220      	movs	r2, #32
 800b294:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2220      	movs	r2, #32
 800b29a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b09c      	sub	sp, #112	; 0x70
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2c4:	e0a5      	b.n	800b412 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2cc:	f000 80a1 	beq.w	800b412 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2d0:	f7fc fd88 	bl	8007de4 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d302      	bcc.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0x32>
 800b2e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d13e      	bne.n	800b364 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2fa:	667b      	str	r3, [r7, #100]	; 0x64
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	461a      	mov	r2, r3
 800b302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b304:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b306:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b30a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b30c:	e841 2300 	strex	r3, r2, [r1]
 800b310:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e6      	bne.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3308      	adds	r3, #8
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	663b      	str	r3, [r7, #96]	; 0x60
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3308      	adds	r3, #8
 800b336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b338:	64ba      	str	r2, [r7, #72]	; 0x48
 800b33a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b33e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e5      	bne.n	800b318 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2220      	movs	r2, #32
 800b350:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2220      	movs	r2, #32
 800b356:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b360:	2303      	movs	r3, #3
 800b362:	e067      	b.n	800b434 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 0304 	and.w	r3, r3, #4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d04f      	beq.n	800b412 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b37c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b380:	d147      	bne.n	800b412 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b38a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e6      	bne.n	800b38c <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f023 0301 	bic.w	r3, r3, #1
 800b3d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3de:	623a      	str	r2, [r7, #32]
 800b3e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e2:	69f9      	ldr	r1, [r7, #28]
 800b3e4:	6a3a      	ldr	r2, [r7, #32]
 800b3e6:	e841 2300 	strex	r3, r2, [r1]
 800b3ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1e5      	bne.n	800b3be <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b40e:	2303      	movs	r3, #3
 800b410:	e010      	b.n	800b434 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	69da      	ldr	r2, [r3, #28]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	4013      	ands	r3, r2
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	429a      	cmp	r2, r3
 800b420:	bf0c      	ite	eq
 800b422:	2301      	moveq	r3, #1
 800b424:	2300      	movne	r3, #0
 800b426:	b2db      	uxtb	r3, r3
 800b428:	461a      	mov	r2, r3
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	f43f af4a 	beq.w	800b2c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3770      	adds	r7, #112	; 0x70
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b095      	sub	sp, #84	; 0x54
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44c:	e853 3f00 	ldrex	r3, [r3]
 800b450:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b462:	643b      	str	r3, [r7, #64]	; 0x40
 800b464:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b466:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b468:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b46a:	e841 2300 	strex	r3, r2, [r1]
 800b46e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1e6      	bne.n	800b444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3308      	adds	r3, #8
 800b47c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	e853 3f00 	ldrex	r3, [r3]
 800b484:	61fb      	str	r3, [r7, #28]
   return(result);
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f023 0301 	bic.w	r3, r3, #1
 800b48c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3308      	adds	r3, #8
 800b494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b496:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b498:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b49c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b49e:	e841 2300 	strex	r3, r2, [r1]
 800b4a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e5      	bne.n	800b476 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d118      	bne.n	800b4e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	e853 3f00 	ldrex	r3, [r3]
 800b4be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	f023 0310 	bic.w	r3, r3, #16
 800b4c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4d0:	61bb      	str	r3, [r7, #24]
 800b4d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6979      	ldr	r1, [r7, #20]
 800b4d6:	69ba      	ldr	r2, [r7, #24]
 800b4d8:	e841 2300 	strex	r3, r2, [r1]
 800b4dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e6      	bne.n	800b4b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b4f6:	bf00      	nop
 800b4f8:	3754      	adds	r7, #84	; 0x54
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bc80      	pop	{r7}
 800b4fe:	4770      	bx	lr

0800b500 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f7ff fbf3 	bl	800ad0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b524:	bf00      	nop
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	60bb      	str	r3, [r7, #8]
   return(result);
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b548:	61fb      	str	r3, [r7, #28]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	61bb      	str	r3, [r7, #24]
 800b554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6979      	ldr	r1, [r7, #20]
 800b558:	69ba      	ldr	r2, [r7, #24]
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	613b      	str	r3, [r7, #16]
   return(result);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e6      	bne.n	800b534 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2220      	movs	r2, #32
 800b56a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7ff fbc0 	bl	800acf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b578:	bf00      	nop
 800b57a:	3720      	adds	r7, #32
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bc80      	pop	{r7}
 800b590:	4770      	bx	lr
	...

0800b594 <Ea_Init>:
/**
  * @brief	Ea module initialization function
  * @return	None
  */
void Ea_Init(void)
{
 800b594:	b480      	push	{r7}
 800b596:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Ea_InitDone_b = TRUE;
 800b598:	4b03      	ldr	r3, [pc, #12]	; (800b5a8 <Ea_Init+0x14>)
 800b59a:	2201      	movs	r2, #1
 800b59c:	701a      	strb	r2, [r3, #0]
}
 800b59e:	bf00      	nop
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bc80      	pop	{r7}
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	200001d8 	.word	0x200001d8

0800b5ac <Ea_Read>:
  * @param	BlockId		ID of the block to be read
  * @param  data		Pointer to the buffer where read data is stored
  * @return	None
  */
void Ea_Read(uint16 Block_Id, uint8 *data)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	6039      	str	r1, [r7, #0]
 800b5b6:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800b5b8:	88fb      	ldrh	r3, [r7, #6]
 800b5ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5be:	d20b      	bcs.n	800b5d8 <Ea_Read+0x2c>
	{
		HAL_I2C_Mem_Read_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800b5c0:	88fb      	ldrh	r3, [r7, #6]
 800b5c2:	015b      	lsls	r3, r3, #5
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	2320      	movs	r3, #32
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	2302      	movs	r3, #2
 800b5d0:	21a0      	movs	r1, #160	; 0xa0
 800b5d2:	4803      	ldr	r0, [pc, #12]	; (800b5e0 <Ea_Read+0x34>)
 800b5d4:	f7fa ff16 	bl	8006404 <HAL_I2C_Mem_Read_DMA>
	}
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20000304 	.word	0x20000304

0800b5e4 <Ea_Write>:
  * @param	BlockId		ID of the block to be written
  * @param  data		Pointer to the data to be written
  * @return	None
  */
void Ea_Write(uint16 Block_Id, uint8 *data)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	6039      	str	r1, [r7, #0]
 800b5ee:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 800b5f0:	88fb      	ldrh	r3, [r7, #6]
 800b5f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f6:	d20b      	bcs.n	800b610 <Ea_Write+0x2c>
	{
		HAL_I2C_Mem_Write_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 800b5f8:	88fb      	ldrh	r3, [r7, #6]
 800b5fa:	015b      	lsls	r3, r3, #5
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	2320      	movs	r3, #32
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	2302      	movs	r3, #2
 800b608:	21a0      	movs	r1, #160	; 0xa0
 800b60a:	4803      	ldr	r0, [pc, #12]	; (800b618 <Ea_Write+0x34>)
 800b60c:	f7fa fe04 	bl	8006218 <HAL_I2C_Mem_Write_DMA>
	}
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20000304 	.word	0x20000304

0800b61c <NvM_Init>:
/**
  * @brief	NvM module initialization function
  * @return	None
  */
void NvM_Init(void)
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
	g_NvM_State_e = NVM_STATE_INIT;
 800b620:	4b04      	ldr	r3, [pc, #16]	; (800b634 <NvM_Init+0x18>)
 800b622:	2200      	movs	r2, #0
 800b624:	701a      	strb	r2, [r3, #0]
	/* Set initialization flag to done */
	g_NvM_InitDone_b = TRUE;
 800b626:	4b04      	ldr	r3, [pc, #16]	; (800b638 <NvM_Init+0x1c>)
 800b628:	2201      	movs	r2, #1
 800b62a:	701a      	strb	r2, [r3, #0]
}
 800b62c:	bf00      	nop
 800b62e:	46bd      	mov	sp, r7
 800b630:	bc80      	pop	{r7}
 800b632:	4770      	bx	lr
 800b634:	200001da 	.word	0x200001da
 800b638:	200001d9 	.word	0x200001d9

0800b63c <NvM_MainFunction>:
/**
  * @brief	NvM module main function (runs in task)
  * @return	None
  */
void NvM_MainFunction(void)
{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(FALSE != g_NvM_InitDone_b)
 800b640:	4b0e      	ldr	r3, [pc, #56]	; (800b67c <NvM_MainFunction+0x40>)
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d015      	beq.n	800b674 <NvM_MainFunction+0x38>
	{
		switch(g_NvM_State_e)
 800b648:	4b0d      	ldr	r3, [pc, #52]	; (800b680 <NvM_MainFunction+0x44>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	dc0e      	bgt.n	800b66e <NvM_MainFunction+0x32>
 800b650:	2b02      	cmp	r3, #2
 800b652:	da08      	bge.n	800b666 <NvM_MainFunction+0x2a>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <NvM_MainFunction+0x22>
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d00a      	beq.n	800b672 <NvM_MainFunction+0x36>
			case NVM_STATE_SHUTDOWN:
			case NVM_STATE_ERROR:
			default:
			{

			}break;
 800b65c:	e007      	b.n	800b66e <NvM_MainFunction+0x32>
				g_NvM_State_e = NVM_STATE_READALL;
 800b65e:	4b08      	ldr	r3, [pc, #32]	; (800b680 <NvM_MainFunction+0x44>)
 800b660:	2204      	movs	r2, #4
 800b662:	701a      	strb	r2, [r3, #0]
			}break;
 800b664:	e006      	b.n	800b674 <NvM_MainFunction+0x38>
				g_NvM_State_e = NVM_STATE_READY;
 800b666:	4b06      	ldr	r3, [pc, #24]	; (800b680 <NvM_MainFunction+0x44>)
 800b668:	2201      	movs	r2, #1
 800b66a:	701a      	strb	r2, [r3, #0]
			}break;
 800b66c:	e002      	b.n	800b674 <NvM_MainFunction+0x38>
			}break;
 800b66e:	bf00      	nop
 800b670:	e000      	b.n	800b674 <NvM_MainFunction+0x38>
			}break;
 800b672:	bf00      	nop
		}
	}
}
 800b674:	bf00      	nop
 800b676:	46bd      	mov	sp, r7
 800b678:	bc80      	pop	{r7}
 800b67a:	4770      	bx	lr
 800b67c:	200001d9 	.word	0x200001d9
 800b680:	200001da 	.word	0x200001da

0800b684 <NvM_WriteBlock>:
  * @param	BlockId		ID of the block to be written
  * @param  NvM_SrcPtr	Pointer to the data to be written
  * @return	None
  */
void NvM_WriteBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	6039      	str	r1, [r7, #0]
 800b68e:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block write function */
	Ea_Write(BlockId, NvM_SrcPtr);
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	f7ff ffa5 	bl	800b5e4 <Ea_Write>
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <NvM_ReadBlock>:
  * @param	BlockId		ID of the block to be read
  * @param  NvM_SrcPtr	Pointer to the data to be read
  * @return	None
  */
void NvM_ReadBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	6039      	str	r1, [r7, #0]
 800b6ac:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block read function */
	Ea_Read(BlockId, NvM_SrcPtr);
 800b6ae:	88fb      	ldrh	r3, [r7, #6]
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7ff ff7a 	bl	800b5ac <Ea_Read>
}
 800b6b8:	bf00      	nop
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 800b6c4:	f000 f8ba 	bl	800b83c <SystemClock_Config>
	MX_DMA_Init();
 800b6c8:	f000 f91e 	bl	800b908 <MX_DMA_Init>
	MX_GPIO_Init();
 800b6cc:	f000 fb1e 	bl	800bd0c <MX_GPIO_Init>
	MX_ADC1_Init();
 800b6d0:	f000 f95c 	bl	800b98c <MX_ADC1_Init>
	MX_ADC2_Init();
 800b6d4:	f000 f9ca 	bl	800ba6c <MX_ADC2_Init>
	MX_I2C1_Init();
 800b6d8:	f000 fa3a 	bl	800bb50 <MX_I2C1_Init>
	MX_SPI3_Init();
 800b6dc:	f000 fa78 	bl	800bbd0 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 800b6e0:	f000 fab4 	bl	800bc4c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b6e4:	f000 fae2 	bl	800bcac <MX_USART2_UART_Init>
	Gpt_Init();
 800b6e8:	f7f8 fed0 	bl	800448c <Gpt_Init>

	/* Init Cdd drivers */
	Cdd_Servo_Driver_Init();
 800b6ec:	f7f6 fe0e 	bl	800230c <Cdd_Servo_Driver_Init>
	Cdd_Ultrasonic_Driver_Init();
 800b6f0:	f7f7 f948 	bl	8002984 <Cdd_Ultrasonic_Driver_Init>
	Cdd_DCMotor_Driver_Init();
 800b6f4:	f7f6 fae7 	bl	8001cc6 <Cdd_DCMotor_Driver_Init>
	/* Init system services */
	Tm_Init();
 800b6f8:	f000 fe10 	bl	800c31c <Tm_Init>

}
 800b6fc:	bf00      	nop
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc1_val, adc1_len);
 800b704:	4b07      	ldr	r3, [pc, #28]	; (800b724 <BswM_MainFunction+0x24>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	461a      	mov	r2, r3
 800b70a:	4907      	ldr	r1, [pc, #28]	; (800b728 <BswM_MainFunction+0x28>)
 800b70c:	4807      	ldr	r0, [pc, #28]	; (800b72c <BswM_MainFunction+0x2c>)
 800b70e:	f7f7 fc95 	bl	800303c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32 *)adc2_val, adc2_len);
 800b712:	4b07      	ldr	r3, [pc, #28]	; (800b730 <BswM_MainFunction+0x30>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	4906      	ldr	r1, [pc, #24]	; (800b734 <BswM_MainFunction+0x34>)
 800b71a:	4807      	ldr	r0, [pc, #28]	; (800b738 <BswM_MainFunction+0x38>)
 800b71c:	f7f7 fc8e 	bl	800303c <HAL_ADC_Start_DMA>

}
 800b720:	bf00      	nop
 800b722:	bd80      	pop	{r7, pc}
 800b724:	2000000c 	.word	0x2000000c
 800b728:	2000059c 	.word	0x2000059c
 800b72c:	200001dc 	.word	0x200001dc
 800b730:	20000010 	.word	0x20000010
 800b734:	200005a0 	.word	0x200005a0
 800b738:	20000270 	.word	0x20000270

0800b73c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	if(hadc == &hadc1)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a1e      	ldr	r2, [pc, #120]	; (800b7c0 <HAL_ADC_ConvCpltCallback+0x84>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d118      	bne.n	800b77e <HAL_ADC_ConvCpltCallback+0x42>
	{
		ADC_AN0_Voltage = (uint16)((adc1_val[0]*3300u)/4095u);
 800b74c:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <HAL_ADC_ConvCpltCallback+0x88>)
 800b74e:	881b      	ldrh	r3, [r3, #0]
 800b750:	b29b      	uxth	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b758:	fb03 f202 	mul.w	r2, r3, r2
 800b75c:	4b1a      	ldr	r3, [pc, #104]	; (800b7c8 <HAL_ADC_ConvCpltCallback+0x8c>)
 800b75e:	fba3 1302 	umull	r1, r3, r3, r2
 800b762:	1ad2      	subs	r2, r2, r3
 800b764:	0852      	lsrs	r2, r2, #1
 800b766:	4413      	add	r3, r2
 800b768:	0adb      	lsrs	r3, r3, #11
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	4b17      	ldr	r3, [pc, #92]	; (800b7cc <HAL_ADC_ConvCpltCallback+0x90>)
 800b76e:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 800b770:	4b16      	ldr	r3, [pc, #88]	; (800b7cc <HAL_ADC_ConvCpltCallback+0x90>)
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	b29b      	uxth	r3, r3
 800b776:	4618      	mov	r0, r3
 800b778:	f000 ffb2 	bl	800c6e0 <Rte_Write_AN0_Voltage_u16>
	}
	else
	{

	}
}
 800b77c:	e01b      	b.n	800b7b6 <HAL_ADC_ConvCpltCallback+0x7a>
	else if(hadc == &hadc2)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a13      	ldr	r2, [pc, #76]	; (800b7d0 <HAL_ADC_ConvCpltCallback+0x94>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d117      	bne.n	800b7b6 <HAL_ADC_ConvCpltCallback+0x7a>
		ADC_AN2_Voltage = (uint16)((adc2_val[0]*3300u)/4095u);
 800b786:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <HAL_ADC_ConvCpltCallback+0x98>)
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	461a      	mov	r2, r3
 800b78e:	f640 43e4 	movw	r3, #3300	; 0xce4
 800b792:	fb03 f202 	mul.w	r2, r3, r2
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <HAL_ADC_ConvCpltCallback+0x8c>)
 800b798:	fba3 1302 	umull	r1, r3, r3, r2
 800b79c:	1ad2      	subs	r2, r2, r3
 800b79e:	0852      	lsrs	r2, r2, #1
 800b7a0:	4413      	add	r3, r2
 800b7a2:	0adb      	lsrs	r3, r3, #11
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <HAL_ADC_ConvCpltCallback+0x9c>)
 800b7a8:	801a      	strh	r2, [r3, #0]
		Rte_Write_ADC_AN2_Voltage_u16(ADC_AN2_Voltage);
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <HAL_ADC_ConvCpltCallback+0x9c>)
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 ffb9 	bl	800c728 <Rte_Write_AN2_Voltage_u16>
}
 800b7b6:	bf00      	nop
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	200001dc 	.word	0x200001dc
 800b7c4:	2000059c 	.word	0x2000059c
 800b7c8:	00100101 	.word	0x00100101
 800b7cc:	2000059e 	.word	0x2000059e
 800b7d0:	20000270 	.word	0x20000270
 800b7d4:	200005a0 	.word	0x200005a0
 800b7d8:	200005a2 	.word	0x200005a2

0800b7dc <HAL_I2C_MemTxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	I2cTxCnt++;
 800b7e4:	4b04      	ldr	r3, [pc, #16]	; (800b7f8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	4a03      	ldr	r2, [pc, #12]	; (800b7f8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800b7ec:	6013      	str	r3, [r2, #0]
}
 800b7ee:	bf00      	nop
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bc80      	pop	{r7}
 800b7f6:	4770      	bx	lr
 800b7f8:	200005a8 	.word	0x200005a8

0800b7fc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
	I2cRxCnt++;
 800b804:	4b04      	ldr	r3, [pc, #16]	; (800b818 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3301      	adds	r3, #1
 800b80a:	4a03      	ldr	r2, [pc, #12]	; (800b818 <HAL_I2C_MemRxCpltCallback+0x1c>)
 800b80c:	6013      	str	r3, [r2, #0]
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bc80      	pop	{r7}
 800b816:	4770      	bx	lr
 800b818:	200005a4 	.word	0x200005a4

0800b81c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7fa ff42 	bl	80066ae <HAL_I2C_GetError>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	d001      	beq.n	800b834 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 800b830:	f000 fb04 	bl	800be3c <Error_Handler>
  }
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b0a6      	sub	sp, #152	; 0x98
 800b840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b842:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b846:	2228      	movs	r2, #40	; 0x28
 800b848:	2100      	movs	r1, #0
 800b84a:	4618      	mov	r0, r3
 800b84c:	f001 f872 	bl	800c934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b850:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
 800b858:	605a      	str	r2, [r3, #4]
 800b85a:	609a      	str	r2, [r3, #8]
 800b85c:	60da      	str	r2, [r3, #12]
 800b85e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b860:	1d3b      	adds	r3, r7, #4
 800b862:	2258      	movs	r2, #88	; 0x58
 800b864:	2100      	movs	r1, #0
 800b866:	4618      	mov	r0, r3
 800b868:	f001 f864 	bl	800c934 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b86c:	2302      	movs	r3, #2
 800b86e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b870:	2301      	movs	r3, #1
 800b872:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b874:	2310      	movs	r3, #16
 800b876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b87a:	2302      	movs	r3, #2
 800b87c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800b888:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800b88c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b890:	2300      	movs	r3, #0
 800b892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b896:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fc fedc 	bl	8008658 <HAL_RCC_OscConfig>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800b8a6:	f000 fac9 	bl	800be3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b8aa:	230f      	movs	r3, #15
 800b8ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b8c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b8c4:	2102      	movs	r1, #2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fd ff1a 	bl	8009700 <HAL_RCC_ClockConfig>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800b8d2:	f000 fab3 	bl	800be3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800b8d6:	23a3      	movs	r3, #163	; 0xa3
 800b8d8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800b8e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800b8e8:	2310      	movs	r3, #16
 800b8ea:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8ec:	1d3b      	adds	r3, r7, #4
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe f93a 	bl	8009b68 <HAL_RCCEx_PeriphCLKConfig>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800b8fa:	f000 fa9f 	bl	800be3c <Error_Handler>
  }
}
 800b8fe:	bf00      	nop
 800b900:	3798      	adds	r7, #152	; 0x98
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
	...

0800b908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800b90e:	4b1e      	ldr	r3, [pc, #120]	; (800b988 <MX_DMA_Init+0x80>)
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	4a1d      	ldr	r2, [pc, #116]	; (800b988 <MX_DMA_Init+0x80>)
 800b914:	f043 0301 	orr.w	r3, r3, #1
 800b918:	6153      	str	r3, [r2, #20]
 800b91a:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <MX_DMA_Init+0x80>)
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	607b      	str	r3, [r7, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800b926:	4b18      	ldr	r3, [pc, #96]	; (800b988 <MX_DMA_Init+0x80>)
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	4a17      	ldr	r2, [pc, #92]	; (800b988 <MX_DMA_Init+0x80>)
 800b92c:	f043 0302 	orr.w	r3, r3, #2
 800b930:	6153      	str	r3, [r2, #20]
 800b932:	4b15      	ldr	r3, [pc, #84]	; (800b988 <MX_DMA_Init+0x80>)
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	f003 0302 	and.w	r3, r3, #2
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	683b      	ldr	r3, [r7, #0]
	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800b93e:	2200      	movs	r2, #0
 800b940:	2100      	movs	r1, #0
 800b942:	200b      	movs	r0, #11
 800b944:	f7fc fb2f 	bl	8007fa6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800b948:	200b      	movs	r0, #11
 800b94a:	f7fc fb48 	bl	8007fde <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800b94e:	2200      	movs	r2, #0
 800b950:	2100      	movs	r1, #0
 800b952:	2010      	movs	r0, #16
 800b954:	f7fc fb27 	bl	8007fa6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800b958:	2010      	movs	r0, #16
 800b95a:	f7fc fb40 	bl	8007fde <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800b95e:	2200      	movs	r2, #0
 800b960:	2100      	movs	r1, #0
 800b962:	2011      	movs	r0, #17
 800b964:	f7fc fb1f 	bl	8007fa6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800b968:	2011      	movs	r0, #17
 800b96a:	f7fc fb38 	bl	8007fde <HAL_NVIC_EnableIRQ>
	  /* DMA2_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800b96e:	2200      	movs	r2, #0
 800b970:	2100      	movs	r1, #0
 800b972:	2038      	movs	r0, #56	; 0x38
 800b974:	f7fc fb17 	bl	8007fa6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800b978:	2038      	movs	r0, #56	; 0x38
 800b97a:	f7fc fb30 	bl	8007fde <HAL_NVIC_EnableIRQ>
}
 800b97e:	bf00      	nop
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	40021000 	.word	0x40021000

0800b98c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08a      	sub	sp, #40	; 0x28
 800b990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800b992:	f107 031c 	add.w	r3, r7, #28
 800b996:	2200      	movs	r2, #0
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	605a      	str	r2, [r3, #4]
 800b99c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800b99e:	1d3b      	adds	r3, r7, #4
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	605a      	str	r2, [r3, #4]
 800b9a6:	609a      	str	r2, [r3, #8]
 800b9a8:	60da      	str	r2, [r3, #12]
 800b9aa:	611a      	str	r2, [r3, #16]
 800b9ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b9ae:	4b2e      	ldr	r3, [pc, #184]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b9b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800b9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b9bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b9be:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b9c4:	4b28      	ldr	r3, [pc, #160]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b9ca:	4b27      	ldr	r3, [pc, #156]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b9d0:	4b25      	ldr	r3, [pc, #148]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b9d8:	4b23      	ldr	r3, [pc, #140]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b9de:	4b22      	ldr	r3, [pc, #136]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b9e4:	4b20      	ldr	r3, [pc, #128]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800b9ea:	4b1f      	ldr	r3, [pc, #124]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b9f0:	4b1d      	ldr	r3, [pc, #116]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b9f8:	4b1b      	ldr	r3, [pc, #108]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800b9fa:	2204      	movs	r2, #4
 800b9fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b9fe:	4b1a      	ldr	r3, [pc, #104]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800ba04:	4b18      	ldr	r3, [pc, #96]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800ba06:	2200      	movs	r2, #0
 800ba08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ba0a:	4817      	ldr	r0, [pc, #92]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800ba0c:	f7f7 f91c 	bl	8002c48 <HAL_ADC_Init>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800ba16:	f000 fa11 	bl	800be3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800ba1e:	f107 031c 	add.w	r3, r7, #28
 800ba22:	4619      	mov	r1, r3
 800ba24:	4810      	ldr	r0, [pc, #64]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800ba26:	f7f7 ff0f 	bl	8003848 <HAL_ADCEx_MultiModeConfigChannel>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800ba30:	f000 fa04 	bl	800be3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800ba34:	2301      	movs	r3, #1
 800ba36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ba4c:	1d3b      	adds	r3, r7, #4
 800ba4e:	4619      	mov	r1, r3
 800ba50:	4805      	ldr	r0, [pc, #20]	; (800ba68 <MX_ADC1_Init+0xdc>)
 800ba52:	f7f7 fc0f 	bl	8003274 <HAL_ADC_ConfigChannel>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800ba5c:	f000 f9ee 	bl	800be3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ba60:	bf00      	nop
 800ba62:	3728      	adds	r7, #40	; 0x28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	200001dc 	.word	0x200001dc

0800ba6c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800ba72:	f107 031c 	add.w	r3, r7, #28
 800ba76:	2200      	movs	r2, #0
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	605a      	str	r2, [r3, #4]
 800ba7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800ba7e:	1d3b      	adds	r3, r7, #4
 800ba80:	2200      	movs	r2, #0
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	609a      	str	r2, [r3, #8]
 800ba88:	60da      	str	r2, [r3, #12]
 800ba8a:	611a      	str	r2, [r3, #16]
 800ba8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800ba8e:	4b2e      	ldr	r3, [pc, #184]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800ba90:	4a2e      	ldr	r2, [pc, #184]	; (800bb4c <MX_ADC2_Init+0xe0>)
 800ba92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ba94:	4b2c      	ldr	r3, [pc, #176]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800ba96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ba9c:	4b2a      	ldr	r3, [pc, #168]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800baa2:	4b29      	ldr	r3, [pc, #164]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800baa8:	4b27      	ldr	r3, [pc, #156]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800baaa:	2200      	movs	r2, #0
 800baac:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800baae:	4b26      	ldr	r3, [pc, #152]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bab6:	4b24      	ldr	r3, [pc, #144]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bab8:	2200      	movs	r2, #0
 800baba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800babc:	4b22      	ldr	r3, [pc, #136]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800babe:	2201      	movs	r2, #1
 800bac0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bac2:	4b21      	ldr	r3, [pc, #132]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800bac8:	4b1f      	ldr	r3, [pc, #124]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800baca:	2201      	movs	r2, #1
 800bacc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800bace:	4b1e      	ldr	r3, [pc, #120]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bad6:	4b1c      	ldr	r3, [pc, #112]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bad8:	2204      	movs	r2, #4
 800bada:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800badc:	4b1a      	ldr	r3, [pc, #104]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bade:	2200      	movs	r2, #0
 800bae0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800bae2:	4b19      	ldr	r3, [pc, #100]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800bae8:	4817      	ldr	r0, [pc, #92]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800baea:	f7f7 f8ad 	bl	8002c48 <HAL_ADC_Init>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 800baf4:	f000 f9a2 	bl	800be3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800baf8:	2300      	movs	r3, #0
 800bafa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc2, &multimode) != HAL_OK)
 800bafc:	f107 031c 	add.w	r3, r7, #28
 800bb00:	4619      	mov	r1, r3
 800bb02:	4811      	ldr	r0, [pc, #68]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bb04:	f7f7 fea0 	bl	8003848 <HAL_ADCEx_MultiModeConfigChannel>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800bb0e:	f000 f995 	bl	800be3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800bb12:	2301      	movs	r3, #1
 800bb14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bb16:	2301      	movs	r3, #1
 800bb18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bb2a:	1d3b      	adds	r3, r7, #4
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4806      	ldr	r0, [pc, #24]	; (800bb48 <MX_ADC2_Init+0xdc>)
 800bb30:	f7f7 fba0 	bl	8003274 <HAL_ADC_ConfigChannel>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800bb3a:	f000 f97f 	bl	800be3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800bb3e:	bf00      	nop
 800bb40:	3728      	adds	r7, #40	; 0x28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20000270 	.word	0x20000270
 800bb4c:	50000100 	.word	0x50000100

0800bb50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 800bb54:	4b1b      	ldr	r3, [pc, #108]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb56:	4a1c      	ldr	r2, [pc, #112]	; (800bbc8 <MX_I2C1_Init+0x78>)
 800bb58:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00702681;
 800bb5a:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb5c:	4a1b      	ldr	r2, [pc, #108]	; (800bbcc <MX_I2C1_Init+0x7c>)
 800bb5e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 800bb60:	4b18      	ldr	r3, [pc, #96]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bb66:	4b17      	ldr	r3, [pc, #92]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bb6c:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800bb72:	4b14      	ldr	r3, [pc, #80]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bb78:	4b12      	ldr	r3, [pc, #72]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bb7e:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bb84:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bb8a:	480e      	ldr	r0, [pc, #56]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb8c:	f7fa fa78 	bl	8006080 <HAL_I2C_Init>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <MX_I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800bb96:	f000 f951 	bl	800be3c <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	4809      	ldr	r0, [pc, #36]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bb9e:	f7fc f80a 	bl	8007bb6 <HAL_I2CEx_ConfigAnalogFilter>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <MX_I2C1_Init+0x5c>
	  {
	    Error_Handler();
 800bba8:	f000 f948 	bl	800be3c <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bbac:	2100      	movs	r1, #0
 800bbae:	4805      	ldr	r0, [pc, #20]	; (800bbc4 <MX_I2C1_Init+0x74>)
 800bbb0:	f7fc f84b 	bl	8007c4a <HAL_I2CEx_ConfigDigitalFilter>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <MX_I2C1_Init+0x6e>
	  {
	    Error_Handler();
 800bbba:	f000 f93f 	bl	800be3c <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 800bbbe:	bf00      	nop
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000304 	.word	0x20000304
 800bbc8:	40005400 	.word	0x40005400
 800bbcc:	00702681 	.word	0x00702681

0800bbd0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800bbd4:	4b1b      	ldr	r3, [pc, #108]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bbd6:	4a1c      	ldr	r2, [pc, #112]	; (800bc48 <MX_SPI3_Init+0x78>)
 800bbd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800bbda:	4b1a      	ldr	r3, [pc, #104]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bbdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bbe0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800bbe2:	4b18      	ldr	r3, [pc, #96]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800bbe8:	4b16      	ldr	r3, [pc, #88]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bbea:	f44f 7240 	mov.w	r2, #768	; 0x300
 800bbee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bbf0:	4b14      	ldr	r3, [pc, #80]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bbf6:	4b13      	ldr	r3, [pc, #76]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800bbfc:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bbfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bc04:	4b0f      	ldr	r3, [pc, #60]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bc0a:	4b0e      	ldr	r3, [pc, #56]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800bc10:	4b0c      	ldr	r3, [pc, #48]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc16:	4b0b      	ldr	r3, [pc, #44]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc1e:	2207      	movs	r2, #7
 800bc20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bc22:	4b08      	ldr	r3, [pc, #32]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800bc2e:	4805      	ldr	r0, [pc, #20]	; (800bc44 <MX_SPI3_Init+0x74>)
 800bc30:	f7fe fa6c 	bl	800a10c <HAL_SPI_Init>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800bc3a:	f000 f8ff 	bl	800be3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800bc3e:	bf00      	nop
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000408 	.word	0x20000408
 800bc48:	40003c00 	.word	0x40003c00

0800bc4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800bc50:	4b14      	ldr	r3, [pc, #80]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc52:	4a15      	ldr	r2, [pc, #84]	; (800bca8 <MX_USART1_UART_Init+0x5c>)
 800bc54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800bc56:	4b13      	ldr	r3, [pc, #76]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc58:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800bc5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bc5e:	4b11      	ldr	r3, [pc, #68]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bc64:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bc6a:	4b0e      	ldr	r3, [pc, #56]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bc70:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc72:	220c      	movs	r2, #12
 800bc74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bc76:	4b0b      	ldr	r3, [pc, #44]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bc7c:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bc82:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bc88:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bc8e:	4805      	ldr	r0, [pc, #20]	; (800bca4 <MX_USART1_UART_Init+0x58>)
 800bc90:	f7fe fc72 	bl	800a578 <HAL_UART_Init>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800bc9a:	f000 f8cf 	bl	800be3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800bc9e:	bf00      	nop
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	20000494 	.word	0x20000494
 800bca8:	40013800 	.word	0x40013800

0800bcac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800bcb0:	4b14      	ldr	r3, [pc, #80]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcb2:	4a15      	ldr	r2, [pc, #84]	; (800bd08 <MX_USART2_UART_Init+0x5c>)
 800bcb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800bcb6:	4b13      	ldr	r3, [pc, #76]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bcbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bcbe:	4b11      	ldr	r3, [pc, #68]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800bcc4:	4b0f      	ldr	r3, [pc, #60]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800bcca:	4b0e      	ldr	r3, [pc, #56]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800bcd0:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcd2:	220c      	movs	r2, #12
 800bcd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bcdc:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bce2:	4b08      	ldr	r3, [pc, #32]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bce8:	4b06      	ldr	r3, [pc, #24]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bcee:	4805      	ldr	r0, [pc, #20]	; (800bd04 <MX_USART2_UART_Init+0x58>)
 800bcf0:	f7fe fc42 	bl	800a578 <HAL_UART_Init>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800bcfa:	f000 f89f 	bl	800be3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20000518 	.word	0x20000518
 800bd08:	40004400 	.word	0x40004400

0800bd0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd12:	f107 030c 	add.w	r3, r7, #12
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	605a      	str	r2, [r3, #4]
 800bd1c:	609a      	str	r2, [r3, #8]
 800bd1e:	60da      	str	r2, [r3, #12]
 800bd20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd22:	4b43      	ldr	r3, [pc, #268]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	4a42      	ldr	r2, [pc, #264]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd2c:	6153      	str	r3, [r2, #20]
 800bd2e:	4b40      	ldr	r3, [pc, #256]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd36:	60bb      	str	r3, [r7, #8]
 800bd38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd3a:	4b3d      	ldr	r3, [pc, #244]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	4a3c      	ldr	r2, [pc, #240]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd44:	6153      	str	r3, [r2, #20]
 800bd46:	4b3a      	ldr	r3, [pc, #232]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd4e:	607b      	str	r3, [r7, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd52:	4b37      	ldr	r3, [pc, #220]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	4a36      	ldr	r2, [pc, #216]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd5c:	6153      	str	r3, [r2, #20]
 800bd5e:	4b34      	ldr	r3, [pc, #208]	; (800be30 <MX_GPIO_Init+0x124>)
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd66:	603b      	str	r3, [r7, #0]
 800bd68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	2120      	movs	r1, #32
 800bd6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bd72:	f7f8 f92a 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800bd76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bd7c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800bd80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800bd86:	f107 030c 	add.w	r3, r7, #12
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4829      	ldr	r0, [pc, #164]	; (800be34 <MX_GPIO_Init+0x128>)
 800bd8e:	f7f7 ff7b 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800bd92:	2340      	movs	r3, #64	; 0x40
 800bd94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd96:	2300      	movs	r3, #0
 800bd98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd9e:	f107 030c 	add.w	r3, r7, #12
 800bda2:	4619      	mov	r1, r3
 800bda4:	4823      	ldr	r0, [pc, #140]	; (800be34 <MX_GPIO_Init+0x128>)
 800bda6:	f7f7 ff6f 	bl	8003c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800bdaa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800bdae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bdbc:	f107 030c 	add.w	r3, r7, #12
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	481d      	ldr	r0, [pc, #116]	; (800be38 <MX_GPIO_Init+0x12c>)
 800bdc4:	f7f7 ff60 	bl	8003c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3| GPIO_PIN_4;
 800bdc8:	2318      	movs	r3, #24
 800bdca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bdd4:	f107 030c 	add.w	r3, r7, #12
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4817      	ldr	r0, [pc, #92]	; (800be38 <MX_GPIO_Init+0x12c>)
 800bddc:	f7f7 ff54 	bl	8003c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7| GPIO_PIN_9;
 800bde0:	f44f 7320 	mov.w	r3, #640	; 0x280
 800bde4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bde6:	2300      	movs	r3, #0
 800bde8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdea:	2300      	movs	r3, #0
 800bdec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bdee:	f107 030c 	add.w	r3, r7, #12
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	480f      	ldr	r0, [pc, #60]	; (800be34 <MX_GPIO_Init+0x128>)
 800bdf6:	f7f7 ff47 	bl	8003c88 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin =  GPIO_PIN_2|GPIO_PIN_3;
 800bdfa:	230c      	movs	r3, #12
 800bdfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bdfe:	2301      	movs	r3, #1
 800be00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be02:	2300      	movs	r3, #0
 800be04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be06:	2300      	movs	r3, #0
 800be08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be0a:	f107 030c 	add.w	r3, r7, #12
 800be0e:	4619      	mov	r1, r3
 800be10:	4808      	ldr	r0, [pc, #32]	; (800be34 <MX_GPIO_Init+0x128>)
 800be12:	f7f7 ff39 	bl	8003c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800be16:	2200      	movs	r2, #0
 800be18:	2100      	movs	r1, #0
 800be1a:	2028      	movs	r0, #40	; 0x28
 800be1c:	f7fc f8c3 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800be20:	2028      	movs	r0, #40	; 0x28
 800be22:	f7fc f8dc 	bl	8007fde <HAL_NVIC_EnableIRQ>

}
 800be26:	bf00      	nop
 800be28:	3720      	adds	r7, #32
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	40021000 	.word	0x40021000
 800be34:	48000800 	.word	0x48000800
 800be38:	48000400 	.word	0x48000400

0800be3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800be40:	b672      	cpsid	i
}
 800be42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800be44:	e7fe      	b.n	800be44 <Error_Handler+0x8>

0800be46 <EcuM_StartUp_One>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_One()
{
 800be46:	b580      	push	{r7, lr}
 800be48:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 800be4a:	f7fb ff6d 	bl	8007d28 <HAL_Init>
	BswM_Init();
 800be4e:	f7ff fc37 	bl	800b6c0 <BswM_Init>
}
 800be52:	bf00      	nop
 800be54:	bd80      	pop	{r7, pc}

0800be56 <EcuM_StartUp_Two>:

void EcuM_StartUp_Two()
{
 800be56:	b480      	push	{r7}
 800be58:	af00      	add	r7, sp, #0

}
 800be5a:	bf00      	nop
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bc80      	pop	{r7}
 800be60:	4770      	bx	lr

0800be62 <EcuM_Init>:

int EcuM_Init(void)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	af00      	add	r7, sp, #0
	EcuM_StartUp_One();
 800be66:	f7ff ffee 	bl	800be46 <EcuM_StartUp_One>
	/* Start Scheduler */
	Os_Start();
 800be6a:	f000 f803 	bl	800be74 <Os_Start>

	return 0;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	bd80      	pop	{r7, pc}

0800be74 <Os_Start>:

#include "Os.h"
#include "Os_scheduler.h"

void Os_Start()
{
 800be74:	b580      	push	{r7, lr}
 800be76:	af00      	add	r7, sp, #0
	Os_Scheduler_Init();
 800be78:	f000 f8ba 	bl	800bff0 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 800be7c:	f000 f930 	bl	800c0e0 <Os_Scheduler_Start>

	while(1)
 800be80:	e7fe      	b.n	800be80 <Os_Start+0xc>
	...

0800be84 <SysTick_Handler>:
/**
  * @brief  SysTick IRQ Handler
  * @return None
  */
void SysTick_Handler(void)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	af00      	add	r7, sp, #0
	/* Increment general counter */
	HAL_IncTick();
 800be88:	f7fb ff9a 	bl	8007dc0 <HAL_IncTick>
	/* Reset counters if base counter reached maximum value */
	if(g_Os_BaseTimerISR_count_u32 == OS_BASETIMER_COUNT_MAX)
 800be8c:	4b40      	ldr	r3, [pc, #256]	; (800bf90 <SysTick_Handler+0x10c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f242 720f 	movw	r2, #9999	; 0x270f
 800be94:	4293      	cmp	r3, r2
 800be96:	d112      	bne.n	800bebe <SysTick_Handler+0x3a>
	{
		g_Os_BaseTimerISR_count_u32 = 0u;
 800be98:	4b3d      	ldr	r3, [pc, #244]	; (800bf90 <SysTick_Handler+0x10c>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
		g_Os_5msTimerISR_count_u32 = 0u;
 800be9e:	4b3d      	ldr	r3, [pc, #244]	; (800bf94 <SysTick_Handler+0x110>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
		g_Os_10msTimerISR_count_u32 = 0u;
 800bea4:	4b3c      	ldr	r3, [pc, #240]	; (800bf98 <SysTick_Handler+0x114>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	601a      	str	r2, [r3, #0]
		g_Os_50msTimerISR_count_u32 = 0u;
 800beaa:	4b3c      	ldr	r3, [pc, #240]	; (800bf9c <SysTick_Handler+0x118>)
 800beac:	2200      	movs	r2, #0
 800beae:	601a      	str	r2, [r3, #0]
		g_Os_100msTimerISR_count_u32 = 0u;
 800beb0:	4b3b      	ldr	r3, [pc, #236]	; (800bfa0 <SysTick_Handler+0x11c>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
		g_Os_500msTimerISR_count_u32 = 0u;
 800beb6:	4b3b      	ldr	r3, [pc, #236]	; (800bfa4 <SysTick_Handler+0x120>)
 800beb8:	2200      	movs	r2, #0
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	e004      	b.n	800bec8 <SysTick_Handler+0x44>
	}
	else
	{
		/* Increment base counter */
		g_Os_BaseTimerISR_count_u32++;
 800bebe:	4b34      	ldr	r3, [pc, #208]	; (800bf90 <SysTick_Handler+0x10c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	4a32      	ldr	r2, [pc, #200]	; (800bf90 <SysTick_Handler+0x10c>)
 800bec6:	6013      	str	r3, [r2, #0]
	}

	/* Check for 5ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 5) == 0u)
 800bec8:	4b31      	ldr	r3, [pc, #196]	; (800bf90 <SysTick_Handler+0x10c>)
 800beca:	6819      	ldr	r1, [r3, #0]
 800becc:	4b36      	ldr	r3, [pc, #216]	; (800bfa8 <SysTick_Handler+0x124>)
 800bece:	fba3 2301 	umull	r2, r3, r3, r1
 800bed2:	089a      	lsrs	r2, r3, #2
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	1aca      	subs	r2, r1, r3
 800bedc:	2a00      	cmp	r2, #0
 800bede:	d104      	bne.n	800beea <SysTick_Handler+0x66>
	{
		/* Increment 5ms counter */
		g_Os_5msTimerISR_count_u32++;
 800bee0:	4b2c      	ldr	r3, [pc, #176]	; (800bf94 <SysTick_Handler+0x110>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3301      	adds	r3, #1
 800bee6:	4a2b      	ldr	r2, [pc, #172]	; (800bf94 <SysTick_Handler+0x110>)
 800bee8:	6013      	str	r3, [r2, #0]
	}

	/* Check for 10ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 10) == 0u)
 800beea:	4b29      	ldr	r3, [pc, #164]	; (800bf90 <SysTick_Handler+0x10c>)
 800beec:	6819      	ldr	r1, [r3, #0]
 800beee:	4b2e      	ldr	r3, [pc, #184]	; (800bfa8 <SysTick_Handler+0x124>)
 800bef0:	fba3 2301 	umull	r2, r3, r3, r1
 800bef4:	08da      	lsrs	r2, r3, #3
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	1aca      	subs	r2, r1, r3
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	d104      	bne.n	800bf0e <SysTick_Handler+0x8a>
	{
		/* Increment 10ms counter */
		g_Os_10msTimerISR_count_u32++;
 800bf04:	4b24      	ldr	r3, [pc, #144]	; (800bf98 <SysTick_Handler+0x114>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	4a23      	ldr	r2, [pc, #140]	; (800bf98 <SysTick_Handler+0x114>)
 800bf0c:	6013      	str	r3, [r2, #0]
	}

	/* Check for 50ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 50) == 0u)
 800bf0e:	4b20      	ldr	r3, [pc, #128]	; (800bf90 <SysTick_Handler+0x10c>)
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	4b26      	ldr	r3, [pc, #152]	; (800bfac <SysTick_Handler+0x128>)
 800bf14:	fba3 1302 	umull	r1, r3, r3, r2
 800bf18:	091b      	lsrs	r3, r3, #4
 800bf1a:	2132      	movs	r1, #50	; 0x32
 800bf1c:	fb01 f303 	mul.w	r3, r1, r3
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d104      	bne.n	800bf30 <SysTick_Handler+0xac>
	{
		/* Increment 50ms counter */
		g_Os_50msTimerISR_count_u32++;
 800bf26:	4b1d      	ldr	r3, [pc, #116]	; (800bf9c <SysTick_Handler+0x118>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	4a1b      	ldr	r2, [pc, #108]	; (800bf9c <SysTick_Handler+0x118>)
 800bf2e:	6013      	str	r3, [r2, #0]
	}

	/* Check for 100ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 100) == 0u)
 800bf30:	4b17      	ldr	r3, [pc, #92]	; (800bf90 <SysTick_Handler+0x10c>)
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	4b1d      	ldr	r3, [pc, #116]	; (800bfac <SysTick_Handler+0x128>)
 800bf36:	fba3 1302 	umull	r1, r3, r3, r2
 800bf3a:	095b      	lsrs	r3, r3, #5
 800bf3c:	2164      	movs	r1, #100	; 0x64
 800bf3e:	fb01 f303 	mul.w	r3, r1, r3
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d104      	bne.n	800bf52 <SysTick_Handler+0xce>
	{
		/* Increment 100ms counter */
		g_Os_100msTimerISR_count_u32++;
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <SysTick_Handler+0x11c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	4a14      	ldr	r2, [pc, #80]	; (800bfa0 <SysTick_Handler+0x11c>)
 800bf50:	6013      	str	r3, [r2, #0]
	}

	/* Check for 500ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 500) == 0u)
 800bf52:	4b0f      	ldr	r3, [pc, #60]	; (800bf90 <SysTick_Handler+0x10c>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	4b16      	ldr	r3, [pc, #88]	; (800bfb0 <SysTick_Handler+0x12c>)
 800bf58:	fba3 1302 	umull	r1, r3, r3, r2
 800bf5c:	095b      	lsrs	r3, r3, #5
 800bf5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bf62:	fb01 f303 	mul.w	r3, r1, r3
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <SysTick_Handler+0xf2>
	{
		/* Increment 500ms counter */
		g_Os_500msTimerISR_count_u32++;
 800bf6c:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <SysTick_Handler+0x120>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3301      	adds	r3, #1
 800bf72:	4a0c      	ldr	r2, [pc, #48]	; (800bfa4 <SysTick_Handler+0x120>)
 800bf74:	6013      	str	r3, [r2, #0]
	}

	/* Call PendSV_Handler for context switch */
	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <SysTick_Handler+0x130>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d105      	bne.n	800bf8c <SysTick_Handler+0x108>
	{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800bf80:	4b0d      	ldr	r3, [pc, #52]	; (800bfb8 <SysTick_Handler+0x134>)
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	4a0c      	ldr	r2, [pc, #48]	; (800bfb8 <SysTick_Handler+0x134>)
 800bf86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf8a:	6053      	str	r3, [r2, #4]
	}
}
 800bf8c:	bf00      	nop
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20001578 	.word	0x20001578
 800bf94:	2000157c 	.word	0x2000157c
 800bf98:	20001580 	.word	0x20001580
 800bf9c:	20001584 	.word	0x20001584
 800bfa0:	20001588 	.word	0x20001588
 800bfa4:	2000158c 	.word	0x2000158c
 800bfa8:	cccccccd 	.word	0xcccccccd
 800bfac:	51eb851f 	.word	0x51eb851f
 800bfb0:	10624dd3 	.word	0x10624dd3
 800bfb4:	200015b8 	.word	0x200015b8
 800bfb8:	e000ed00 	.word	0xe000ed00

0800bfbc <PendSV_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 800bfbc:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 800bfbe:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 800bfc0:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800bfc2:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 800bfc4:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 800bfc6:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 800bfc8:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800bfca:	4808      	ldr	r0, [pc, #32]	; (800bfec <PendSV_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 800bfcc:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 800bfce:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 800bfd0:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 800bfd2:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 800bfd4:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 800bfd6:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 800bfd8:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 800bfda:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800bfdc:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800bfde:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800bfe0:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800bfe2:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 800bfe4:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 800bfe6:	b662      	cpsie	i
    __asm("BX      LR");
 800bfe8:	4770      	bx	lr

}
 800bfea:	bf00      	nop
 800bfec:	200005d4 	.word	0x200005d4

0800bff0 <Os_Scheduler_Init>:
/**
  * @brief  OS Scheduler initialization function
  * @return None
  */
void Os_Scheduler_Init()
{
 800bff0:	b480      	push	{r7}
 800bff2:	af00      	add	r7, sp, #0
	/* Enter critical section: Disable interrupts */
	__asm("CPSID   I");
 800bff4:	b672      	cpsid	i
	/* Make the Task Control Block linked list circular */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8];
 800bff6:	4b29      	ldr	r3, [pc, #164]	; (800c09c <Os_Scheduler_Init+0xac>)
 800bff8:	4a29      	ldr	r2, [pc, #164]	; (800c0a0 <Os_Scheduler_Init+0xb0>)
 800bffa:	605a      	str	r2, [r3, #4]
	g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8];
 800bffc:	4b27      	ldr	r3, [pc, #156]	; (800c09c <Os_Scheduler_Init+0xac>)
 800bffe:	4a29      	ldr	r2, [pc, #164]	; (800c0a4 <Os_Scheduler_Init+0xb4>)
 800c000:	60da      	str	r2, [r3, #12]
	g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8];
 800c002:	4b26      	ldr	r3, [pc, #152]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c004:	4a28      	ldr	r2, [pc, #160]	; (800c0a8 <Os_Scheduler_Init+0xb8>)
 800c006:	615a      	str	r2, [r3, #20]
	g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8];
 800c008:	4b24      	ldr	r3, [pc, #144]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c00a:	4a28      	ldr	r2, [pc, #160]	; (800c0ac <Os_Scheduler_Init+0xbc>)
 800c00c:	61da      	str	r2, [r3, #28]
	g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].nextPt_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800c00e:	4b23      	ldr	r3, [pc, #140]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c010:	4a22      	ldr	r2, [pc, #136]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c012:	625a      	str	r2, [r3, #36]	; 0x24
	/* Setup stack for initialization (master) task */
	g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-16];
 800c014:	4b21      	ldr	r3, [pc, #132]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c016:	4a26      	ldr	r2, [pc, #152]	; (800c0b0 <Os_Scheduler_Init+0xc0>)
 800c018:	601a      	str	r2, [r3, #0]
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c01a:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c01c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c020:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	g_Os_TaskStack_aau32[OS_TASK_INIT_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_TaskMaster_0);
 800c024:	4a24      	ldr	r2, [pc, #144]	; (800c0b8 <Os_Scheduler_Init+0xc8>)
 800c026:	4b23      	ldr	r3, [pc, #140]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c028:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	/* Setup stack for 10ms task */
    g_Os_TaskBlock_as[OS_TASK_10MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c02c:	4b1b      	ldr	r3, [pc, #108]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c02e:	4a23      	ldr	r2, [pc, #140]	; (800c0bc <Os_Scheduler_Init+0xcc>)
 800c030:	609a      	str	r2, [r3, #8]
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c032:	4b20      	ldr	r3, [pc, #128]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c038:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    g_Os_TaskStack_aau32[OS_TASK_10MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task10ms_0);
 800c03c:	4a20      	ldr	r2, [pc, #128]	; (800c0c0 <Os_Scheduler_Init+0xd0>)
 800c03e:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c040:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
	/* Setup stack for 50ms task */
    g_Os_TaskBlock_as[OS_TASK_50MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c044:	4b15      	ldr	r3, [pc, #84]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c046:	4a1f      	ldr	r2, [pc, #124]	; (800c0c4 <Os_Scheduler_Init+0xd4>)
 800c048:	611a      	str	r2, [r3, #16]
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c04a:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c04c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c050:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    g_Os_TaskStack_aau32[OS_TASK_50MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task50ms_0);
 800c054:	4a1c      	ldr	r2, [pc, #112]	; (800c0c8 <Os_Scheduler_Init+0xd8>)
 800c056:	4b17      	ldr	r3, [pc, #92]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c058:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
	/* Setup stack for 100ms task */
    g_Os_TaskBlock_as[OS_TASK_100MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c05c:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c05e:	4a1b      	ldr	r2, [pc, #108]	; (800c0cc <Os_Scheduler_Init+0xdc>)
 800c060:	619a      	str	r2, [r3, #24]
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c062:	4b14      	ldr	r3, [pc, #80]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c068:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    g_Os_TaskStack_aau32[OS_TASK_100MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task100ms_0);
 800c06c:	4a18      	ldr	r2, [pc, #96]	; (800c0d0 <Os_Scheduler_Init+0xe0>)
 800c06e:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c070:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78
	/* Setup stack for 500ms task */
    g_Os_TaskBlock_as[OS_TASK_500MS_ID_U8].stackPt_pu32 = &g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-16];
 800c074:	4b09      	ldr	r3, [pc, #36]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c076:	4a17      	ldr	r2, [pc, #92]	; (800c0d4 <Os_Scheduler_Init+0xe4>)
 800c078:	621a      	str	r2, [r3, #32]
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-1] = OS_TASK_XPSR_TBIT_U32;
 800c07a:	4b0e      	ldr	r3, [pc, #56]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c07c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c080:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    g_Os_TaskStack_aau32[OS_TASK_500MS_ID_U8][OS_TASK_STACKSIZE-2] = (uint32)(Os_Scheduler_Task500ms_0);
 800c084:	4a14      	ldr	r2, [pc, #80]	; (800c0d8 <Os_Scheduler_Init+0xe8>)
 800c086:	4b0b      	ldr	r3, [pc, #44]	; (800c0b4 <Os_Scheduler_Init+0xc4>)
 800c088:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
    /* Set the current task control block to point to init task */
    g_Os_CurrentTaskBlock_ps = &g_Os_TaskBlock_as[OS_TASK_INIT_ID_U8];
 800c08c:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <Os_Scheduler_Init+0xec>)
 800c08e:	4a03      	ldr	r2, [pc, #12]	; (800c09c <Os_Scheduler_Init+0xac>)
 800c090:	601a      	str	r2, [r3, #0]
    /* Leave critical section: Enable interrupts */
    __asm("CPSIE   I ");
 800c092:	b662      	cpsie	i
}
 800c094:	bf00      	nop
 800c096:	46bd      	mov	sp, r7
 800c098:	bc80      	pop	{r7}
 800c09a:	4770      	bx	lr
 800c09c:	200005ac 	.word	0x200005ac
 800c0a0:	200005b4 	.word	0x200005b4
 800c0a4:	200005bc 	.word	0x200005bc
 800c0a8:	200005c4 	.word	0x200005c4
 800c0ac:	200005cc 	.word	0x200005cc
 800c0b0:	200008b8 	.word	0x200008b8
 800c0b4:	200005d8 	.word	0x200005d8
 800c0b8:	0800c10d 	.word	0x0800c10d
 800c0bc:	20000bd8 	.word	0x20000bd8
 800c0c0:	0800c195 	.word	0x0800c195
 800c0c4:	20000ef8 	.word	0x20000ef8
 800c0c8:	0800c1e5 	.word	0x0800c1e5
 800c0cc:	20001218 	.word	0x20001218
 800c0d0:	0800c235 	.word	0x0800c235
 800c0d4:	20001538 	.word	0x20001538
 800c0d8:	0800c285 	.word	0x0800c285
 800c0dc:	200005d4 	.word	0x200005d4

0800c0e0 <Os_Scheduler_Start>:
  * @return None
  */
__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =g_Os_CurrentTaskBlock_ps");
 800c0e0:	4809      	ldr	r0, [pc, #36]	; (800c108 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 800c0e2:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 800c0e4:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 800c0e6:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800c0ea:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800c0ec:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800c0ee:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800c0f0:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 800c0f2:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 800c0f4:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800c0f6:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800c0f8:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 800c0fa:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 800c0fc:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 800c0fe:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 800c100:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 800c102:	b662      	cpsie	i
    __asm("BX      LR");
 800c104:	4770      	bx	lr
}
 800c106:	bf00      	nop
 800c108:	200005d4 	.word	0x200005d4

0800c10c <Os_Scheduler_TaskMaster_0>:
/**
  * @brief  Initialization task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_TaskMaster_0(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	af00      	add	r7, sp, #0
    while(1)
    {
    	/* Wait for context switch of master task */
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800c110:	bf00      	nop
 800c112:	4b1c      	ldr	r3, [pc, #112]	; (800c184 <Os_Scheduler_TaskMaster_0+0x78>)
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	4b1c      	ldr	r3, [pc, #112]	; (800c188 <Os_Scheduler_TaskMaster_0+0x7c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d0f9      	beq.n	800c112 <Os_Scheduler_TaskMaster_0+0x6>
    	{
    	}
    	Os_Task5ms_0_cnt++;
 800c11e:	4b1b      	ldr	r3, [pc, #108]	; (800c18c <Os_Scheduler_TaskMaster_0+0x80>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3301      	adds	r3, #1
 800c124:	4a19      	ldr	r2, [pc, #100]	; (800c18c <Os_Scheduler_TaskMaster_0+0x80>)
 800c126:	6013      	str	r3, [r2, #0]
    	g_Os_Task5ms_count_u32 = g_Os_5msTimerISR_count_u32;
 800c128:	4b17      	ldr	r3, [pc, #92]	; (800c188 <Os_Scheduler_TaskMaster_0+0x7c>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a15      	ldr	r2, [pc, #84]	; (800c184 <Os_Scheduler_TaskMaster_0+0x78>)
 800c12e:	6013      	str	r3, [r2, #0]

    	/* Check Os state */
    	switch (g_OS_State_e)
 800c130:	4b17      	ldr	r3, [pc, #92]	; (800c190 <Os_Scheduler_TaskMaster_0+0x84>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b05      	cmp	r3, #5
 800c138:	d822      	bhi.n	800c180 <Os_Scheduler_TaskMaster_0+0x74>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <Os_Scheduler_TaskMaster_0+0x34>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c159 	.word	0x0800c159
 800c144:	0800c161 	.word	0x0800c161
 800c148:	0800c16d 	.word	0x0800c16d
 800c14c:	0800c16d 	.word	0x0800c16d
 800c150:	0800c175 	.word	0x0800c175
 800c154:	0800c181 	.word	0x0800c181
    	{
    		case OS_STATE_RESET_E:
    		{
    			g_OS_State_e = OS_STATE_INIT_E;
 800c158:	4b0d      	ldr	r3, [pc, #52]	; (800c190 <Os_Scheduler_TaskMaster_0+0x84>)
 800c15a:	2201      	movs	r2, #1
 800c15c:	701a      	strb	r2, [r3, #0]
    		} break;
 800c15e:	e010      	b.n	800c182 <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_INIT_E:
    		{
    			OS_TASK_CALL(Os_Task_Master(), g_Os_dwt_Master_f32);
 800c160:	f000 f8b8 	bl	800c2d4 <Os_Task_Master>
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800c164:	4b0a      	ldr	r3, [pc, #40]	; (800c190 <Os_Scheduler_TaskMaster_0+0x84>)
 800c166:	2202      	movs	r2, #2
 800c168:	701a      	strb	r2, [r3, #0]
    		} break;
 800c16a:	e00a      	b.n	800c182 <Os_Scheduler_TaskMaster_0+0x76>
    			//g_OS_State_e = OS_STATE_RUNNING_E;
    		}
    		case OS_STATE_RUNNING_E:
    		{
    			/* TODO: add task activate/suspend here */
    			g_OS_State_e = OS_STATE_RUNNING_E;
 800c16c:	4b08      	ldr	r3, [pc, #32]	; (800c190 <Os_Scheduler_TaskMaster_0+0x84>)
 800c16e:	2203      	movs	r2, #3
 800c170:	701a      	strb	r2, [r3, #0]
    		} break;
 800c172:	e006      	b.n	800c182 <Os_Scheduler_TaskMaster_0+0x76>
    		case OS_STATE_SHUTDOWN_E:
    		{
    			/* TODO: Addc condition to get here */
    			OS_TASK_CALL(Os_Task_Shutdown(), g_Os_dwt_Shutdown_f32);
 800c174:	f000 f8cc 	bl	800c310 <Os_Task_Shutdown>
    			/* TODO: move to reset state */
    			g_OS_State_e = OS_STATE_NVMREAD_E;
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <Os_Scheduler_TaskMaster_0+0x84>)
 800c17a:	2202      	movs	r2, #2
 800c17c:	701a      	strb	r2, [r3, #0]
    		} break;
 800c17e:	e000      	b.n	800c182 <Os_Scheduler_TaskMaster_0+0x76>
    			/* NvM write all, write error */
    		} break;
    		default:
    		{

    		} break;
 800c180:	bf00      	nop
    	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 800c182:	e7c5      	b.n	800c110 <Os_Scheduler_TaskMaster_0+0x4>
 800c184:	20001594 	.word	0x20001594
 800c188:	2000157c 	.word	0x2000157c
 800c18c:	20001590 	.word	0x20001590
 800c190:	200015b8 	.word	0x200015b8

0800c194 <Os_Scheduler_Task10ms_0>:
/**
  * @brief  Periodic 10ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task10ms_0(void)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c198:	4b0e      	ldr	r3, [pc, #56]	; (800c1d4 <Os_Scheduler_Task10ms_0+0x40>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d112      	bne.n	800c1c8 <Os_Scheduler_Task10ms_0+0x34>
    	{
			while(g_Os_Task10ms_count_u32 == g_Os_10msTimerISR_count_u32)
 800c1a2:	bf00      	nop
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <Os_Scheduler_Task10ms_0+0x44>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <Os_Scheduler_Task10ms_0+0x48>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d0f9      	beq.n	800c1a4 <Os_Scheduler_Task10ms_0+0x10>
			{

			}
			Os_Task10ms_0_cnt++;
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <Os_Scheduler_Task10ms_0+0x4c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	4a0a      	ldr	r2, [pc, #40]	; (800c1e0 <Os_Scheduler_Task10ms_0+0x4c>)
 800c1b8:	6013      	str	r3, [r2, #0]
			g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800c1ba:	4b08      	ldr	r3, [pc, #32]	; (800c1dc <Os_Scheduler_Task10ms_0+0x48>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a06      	ldr	r2, [pc, #24]	; (800c1d8 <Os_Scheduler_Task10ms_0+0x44>)
 800c1c0:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_10ms(), g_Os_dwt_10ms_f32);
 800c1c2:	f000 f88d 	bl	800c2e0 <Os_Task_10ms>
 800c1c6:	e7e7      	b.n	800c198 <Os_Scheduler_Task10ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800c1c8:	4b04      	ldr	r3, [pc, #16]	; (800c1dc <Os_Scheduler_Task10ms_0+0x48>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a02      	ldr	r2, [pc, #8]	; (800c1d8 <Os_Scheduler_Task10ms_0+0x44>)
 800c1ce:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c1d0:	e7e2      	b.n	800c198 <Os_Scheduler_Task10ms_0+0x4>
 800c1d2:	bf00      	nop
 800c1d4:	200015b8 	.word	0x200015b8
 800c1d8:	2000159c 	.word	0x2000159c
 800c1dc:	20001580 	.word	0x20001580
 800c1e0:	20001598 	.word	0x20001598

0800c1e4 <Os_Scheduler_Task50ms_0>:
/**
  * @brief  Periodic 50ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task50ms_0(void)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c1e8:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <Os_Scheduler_Task50ms_0+0x40>)
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	d112      	bne.n	800c218 <Os_Scheduler_Task50ms_0+0x34>
    	{
			while(g_Os_Task50ms_count_u32 == g_Os_50msTimerISR_count_u32)
 800c1f2:	bf00      	nop
 800c1f4:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <Os_Scheduler_Task50ms_0+0x44>)
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <Os_Scheduler_Task50ms_0+0x48>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d0f9      	beq.n	800c1f4 <Os_Scheduler_Task50ms_0+0x10>
			{

			}
			Os_Task50ms_0_cnt++;
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <Os_Scheduler_Task50ms_0+0x4c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3301      	adds	r3, #1
 800c206:	4a0a      	ldr	r2, [pc, #40]	; (800c230 <Os_Scheduler_Task50ms_0+0x4c>)
 800c208:	6013      	str	r3, [r2, #0]
			g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800c20a:	4b08      	ldr	r3, [pc, #32]	; (800c22c <Os_Scheduler_Task50ms_0+0x48>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a06      	ldr	r2, [pc, #24]	; (800c228 <Os_Scheduler_Task50ms_0+0x44>)
 800c210:	6013      	str	r3, [r2, #0]
			OS_TASK_CALL(Os_Task_50ms(), g_Os_dwt_50ms_f32);
 800c212:	f000 f86b 	bl	800c2ec <Os_Task_50ms>
 800c216:	e7e7      	b.n	800c1e8 <Os_Scheduler_Task50ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800c218:	4b04      	ldr	r3, [pc, #16]	; (800c22c <Os_Scheduler_Task50ms_0+0x48>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a02      	ldr	r2, [pc, #8]	; (800c228 <Os_Scheduler_Task50ms_0+0x44>)
 800c21e:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c220:	e7e2      	b.n	800c1e8 <Os_Scheduler_Task50ms_0+0x4>
 800c222:	bf00      	nop
 800c224:	200015b8 	.word	0x200015b8
 800c228:	200015a4 	.word	0x200015a4
 800c22c:	20001584 	.word	0x20001584
 800c230:	200015a0 	.word	0x200015a0

0800c234 <Os_Scheduler_Task100ms_0>:
/**
  * @brief  Periodic 100ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task100ms_0(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c238:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <Os_Scheduler_Task100ms_0+0x40>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b03      	cmp	r3, #3
 800c240:	d112      	bne.n	800c268 <Os_Scheduler_Task100ms_0+0x34>
    	{
			while(g_Os_Task100ms_count_u32 == g_Os_100msTimerISR_count_u32)
 800c242:	bf00      	nop
 800c244:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <Os_Scheduler_Task100ms_0+0x44>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <Os_Scheduler_Task100ms_0+0x48>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d0f9      	beq.n	800c244 <Os_Scheduler_Task100ms_0+0x10>
			{

			}
			Os_Task100ms_0_cnt++;
 800c250:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <Os_Scheduler_Task100ms_0+0x4c>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3301      	adds	r3, #1
 800c256:	4a0a      	ldr	r2, [pc, #40]	; (800c280 <Os_Scheduler_Task100ms_0+0x4c>)
 800c258:	6013      	str	r3, [r2, #0]
			g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800c25a:	4b08      	ldr	r3, [pc, #32]	; (800c27c <Os_Scheduler_Task100ms_0+0x48>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a06      	ldr	r2, [pc, #24]	; (800c278 <Os_Scheduler_Task100ms_0+0x44>)
 800c260:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_100ms(), g_Os_dwt_100ms_f32);
 800c262:	f000 f849 	bl	800c2f8 <Os_Task_100ms>
 800c266:	e7e7      	b.n	800c238 <Os_Scheduler_Task100ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 800c268:	4b04      	ldr	r3, [pc, #16]	; (800c27c <Os_Scheduler_Task100ms_0+0x48>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a02      	ldr	r2, [pc, #8]	; (800c278 <Os_Scheduler_Task100ms_0+0x44>)
 800c26e:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c270:	e7e2      	b.n	800c238 <Os_Scheduler_Task100ms_0+0x4>
 800c272:	bf00      	nop
 800c274:	200015b8 	.word	0x200015b8
 800c278:	200015ac 	.word	0x200015ac
 800c27c:	20001588 	.word	0x20001588
 800c280:	200015a8 	.word	0x200015a8

0800c284 <Os_Scheduler_Task500ms_0>:
/**
  * @brief  Periodic 500ms task
  * @return None
  */
OS_TASK_FUNC void Os_Scheduler_Task500ms_0(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c288:	4b0e      	ldr	r3, [pc, #56]	; (800c2c4 <Os_Scheduler_Task500ms_0+0x40>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d112      	bne.n	800c2b8 <Os_Scheduler_Task500ms_0+0x34>
    	{
			while(g_Os_Task500ms_count_u32 == g_Os_500msTimerISR_count_u32)
 800c292:	bf00      	nop
 800c294:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <Os_Scheduler_Task500ms_0+0x44>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <Os_Scheduler_Task500ms_0+0x48>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d0f9      	beq.n	800c294 <Os_Scheduler_Task500ms_0+0x10>
			{

			}
			Os_Task500ms_0_cnt++;
 800c2a0:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <Os_Scheduler_Task500ms_0+0x4c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	4a0a      	ldr	r2, [pc, #40]	; (800c2d0 <Os_Scheduler_Task500ms_0+0x4c>)
 800c2a8:	6013      	str	r3, [r2, #0]
			g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800c2aa:	4b08      	ldr	r3, [pc, #32]	; (800c2cc <Os_Scheduler_Task500ms_0+0x48>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a06      	ldr	r2, [pc, #24]	; (800c2c8 <Os_Scheduler_Task500ms_0+0x44>)
 800c2b0:	6013      	str	r3, [r2, #0]

			OS_TASK_CALL(Os_Task_500ms(), g_Os_dwt_500ms_f32);
 800c2b2:	f000 f827 	bl	800c304 <Os_Task_500ms>
 800c2b6:	e7e7      	b.n	800c288 <Os_Scheduler_Task500ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800c2b8:	4b04      	ldr	r3, [pc, #16]	; (800c2cc <Os_Scheduler_Task500ms_0+0x48>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a02      	ldr	r2, [pc, #8]	; (800c2c8 <Os_Scheduler_Task500ms_0+0x44>)
 800c2be:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING_E == g_OS_State_e)
 800c2c0:	e7e2      	b.n	800c288 <Os_Scheduler_Task500ms_0+0x4>
 800c2c2:	bf00      	nop
 800c2c4:	200015b8 	.word	0x200015b8
 800c2c8:	200015b4 	.word	0x200015b4
 800c2cc:	2000158c 	.word	0x2000158c
 800c2d0:	200015b0 	.word	0x200015b0

0800c2d4 <Os_Task_Master>:

#include "Os_task.h"
#include "Rte_Os.h"

TASK(Master)()
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
	Rte_Os_Task_Master();
 800c2d8:	f000 f872 	bl	800c3c0 <Rte_Task_Master>
}
 800c2dc:	bf00      	nop
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <Os_Task_10ms>:

TASK(10ms)()
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 800c2e4:	f000 f890 	bl	800c408 <Rte_Task_10ms>
}
 800c2e8:	bf00      	nop
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <Os_Task_50ms>:

TASK(50ms)()
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 800c2f0:	f000 f89e 	bl	800c430 <Rte_Task_50ms>
}
 800c2f4:	bf00      	nop
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <Os_Task_100ms>:

TASK(100ms)()
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 800c2fc:	f000 f8a0 	bl	800c440 <Rte_Task_100ms>
}
 800c300:	bf00      	nop
 800c302:	bd80      	pop	{r7, pc}

0800c304 <Os_Task_500ms>:

TASK(500ms)()
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 800c308:	f000 f8a6 	bl	800c458 <Rte_Task_500ms>
}
 800c30c:	bf00      	nop
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <Os_Task_Shutdown>:

TASK(Shutdown)()
{
 800c310:	b580      	push	{r7, lr}
 800c312:	af00      	add	r7, sp, #0
	Rte_Os_Task_Shutdown();
 800c314:	f000 f8d4 	bl	800c4c0 <Rte_Task_Shutdown>
}
 800c318:	bf00      	nop
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0

}
 800c320:	bf00      	nop
 800c322:	46bd      	mov	sp, r7
 800c324:	bc80      	pop	{r7}
 800c326:	4770      	bx	lr

0800c328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c328:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c360 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c32c:	480d      	ldr	r0, [pc, #52]	; (800c364 <LoopForever+0x6>)
  ldr r1, =_edata
 800c32e:	490e      	ldr	r1, [pc, #56]	; (800c368 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c330:	4a0e      	ldr	r2, [pc, #56]	; (800c36c <LoopForever+0xe>)
  movs r3, #0
 800c332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c334:	e002      	b.n	800c33c <LoopCopyDataInit>

0800c336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c33a:	3304      	adds	r3, #4

0800c33c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c33c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c33e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c340:	d3f9      	bcc.n	800c336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c342:	4a0b      	ldr	r2, [pc, #44]	; (800c370 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c344:	4c0b      	ldr	r4, [pc, #44]	; (800c374 <LoopForever+0x16>)
  movs r3, #0
 800c346:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c348:	e001      	b.n	800c34e <LoopFillZerobss>

0800c34a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c34a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c34c:	3204      	adds	r2, #4

0800c34e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c34e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c350:	d3fb      	bcc.n	800c34a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c352:	f7fb fce3 	bl	8007d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c356:	f000 fafb 	bl	800c950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 800c35a:	f7ff fd82 	bl	800be62 <EcuM_Init>

0800c35e <LoopForever>:

LoopForever:
    b LoopForever
 800c35e:	e7fe      	b.n	800c35e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c360:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800c364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c368:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800c36c:	0800d320 	.word	0x0800d320
  ldr r2, =_sbss
 800c370:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800c374:	200017dc 	.word	0x200017dc

0800c378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c378:	e7fe      	b.n	800c378 <ADC1_2_IRQHandler>

0800c37a <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 800c37a:	b480      	push	{r7}
 800c37c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c37e:	b672      	cpsid	i
}
 800c380:	bf00      	nop
	__disable_irq();
}
 800c382:	bf00      	nop
 800c384:	46bd      	mov	sp, r7
 800c386:	bc80      	pop	{r7}
 800c388:	4770      	bx	lr

0800c38a <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 800c38a:	b480      	push	{r7}
 800c38c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800c38e:	b662      	cpsie	i
}
 800c390:	bf00      	nop
	__enable_irq();
}
 800c392:	bf00      	nop
 800c394:	46bd      	mov	sp, r7
 800c396:	bc80      	pop	{r7}
 800c398:	4770      	bx	lr
	...

0800c39c <Rte_Init>:

void Rte_Init(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800c3a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3a4:	4804      	ldr	r0, [pc, #16]	; (800c3b8 <Rte_Init+0x1c>)
 800c3a6:	f7f7 fdf9 	bl	8003f9c <HAL_GPIO_ReadPin>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	4b03      	ldr	r3, [pc, #12]	; (800c3bc <Rte_Init+0x20>)
 800c3b0:	701a      	strb	r2, [r3, #0]
}
 800c3b2:	bf00      	nop
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	48000800 	.word	0x48000800
 800c3bc:	200015b9 	.word	0x200015b9

0800c3c0 <Rte_Task_Master>:

/* Os Tasks*/
/* Init task */
void Rte_Task_Master(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 800c3c4:	f7ff fd47 	bl	800be56 <EcuM_StartUp_Two>

	/* Bsw stacks init */
	NvM_Init();
 800c3c8:	f7ff f928 	bl	800b61c <NvM_Init>
	Ea_Init();
 800c3cc:	f7ff f8e2 	bl	800b594 <Ea_Init>
	/* Rte init */
	Rte_Init();
 800c3d0:	f7ff ffe4 	bl	800c39c <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 800c3d4:	f7f6 f94e 	bl	8002674 <Cdd_Servo_Init>
	Cdd_Ultrasonic_Init();
 800c3d8:	f7f6 faba 	bl	8002950 <Cdd_Ultrasonic_Init>
	Cdd_DCMotor_Init();
 800c3dc:	f7f5 fc7e 	bl	8001cdc <Cdd_DCMotor_Init>
	/* Asw init */
	Access_Init();
 800c3e0:	f7f4 fe38 	bl	8001054 <Access_Init>
	Engine_Init();
 800c3e4:	f7f5 f9ea 	bl	80017bc <Engine_Init>
	Brakes_Init();
 800c3e8:	f7f4 ff4a 	bl	8001280 <Brakes_Init>
	Steering_Init();
 800c3ec:	f7f5 fc3c 	bl	8001c68 <Steering_Init>
	Blinker_Init();
 800c3f0:	f7f5 fb68 	bl	8001ac4 <Blinker_Init>
	FrontLights_Init();
 800c3f4:	f7f5 fc02 	bl	8001bfc <FrontLights_Init>
	InteriorLights_Init();
 800c3f8:	f7f5 fc12 	bl	8001c20 <InteriorLights_Init>
	RearLights_Init();
 800c3fc:	f7f5 fc22 	bl	8001c44 <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 800c400:	f7f5 face 	bl	80019a0 <LED_Init>

	/* Add new ASW init functions here */
}
 800c404:	bf00      	nop
 800c406:	bd80      	pop	{r7, pc}

0800c408 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 800c40c:	f7ff f978 	bl	800b700 <BswM_MainFunction>
	NvM_MainFunction();
 800c410:	f7ff f914 	bl	800b63c <NvM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 800c414:	f7f6 f956 	bl	80026c4 <Cdd_Servo_MainFunction>
	Cdd_Ultrasonic_MainFunction();
 800c418:	f7f6 fbc2 	bl	8002ba0 <Cdd_Ultrasonic_MainFunction>
	/* ASW */
	Access_MainFunction();
 800c41c:	f7f4 fe26 	bl	800106c <Access_MainFunction>
	Engine_MainFunction();
 800c420:	f7f5 f9d8 	bl	80017d4 <Engine_MainFunction>
	Brakes_MainFunction();
 800c424:	f7f4 ff60 	bl	80012e8 <Brakes_MainFunction>
	Steering_MainFunction();
 800c428:	f7f5 fc2a 	bl	8001c80 <Steering_MainFunction>

}
 800c42c:	bf00      	nop
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 800c434:	f7f5 fad8 	bl	80019e8 <LED_MainFunction>
	Cdd_DCMotor_MainFunction();
 800c438:	f7f5 ff62 	bl	8002300 <Cdd_DCMotor_MainFunction>
}
 800c43c:	bf00      	nop
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 800c444:	f7f5 fb5c 	bl	8001b00 <Blinker_MainFunction>
	FrontLights_MainFunction();
 800c448:	f7f5 fbe4 	bl	8001c14 <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 800c44c:	f7f5 fbf4 	bl	8001c38 <InteriorLights_MainFunction>
	RearLights_MainFunction();
 800c450:	f7f5 fc04 	bl	8001c5c <RearLights_MainFunction>
}
 800c454:	bf00      	nop
 800c456:	bd80      	pop	{r7, pc}

0800c458 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0

	/* UART test section. TODO: remove */
	sprintf(databuf, "%4d X", count);
 800c45c:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <Rte_Task_500ms+0x54>)
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	4913      	ldr	r1, [pc, #76]	; (800c4b0 <Rte_Task_500ms+0x58>)
 800c464:	4813      	ldr	r0, [pc, #76]	; (800c4b4 <Rte_Task_500ms+0x5c>)
 800c466:	f000 fa45 	bl	800c8f4 <siprintf>
	databuf[strlen(databuf)] = 0;
 800c46a:	4812      	ldr	r0, [pc, #72]	; (800c4b4 <Rte_Task_500ms+0x5c>)
 800c46c:	f7f3 feb8 	bl	80001e0 <strlen>
 800c470:	4603      	mov	r3, r0
 800c472:	4a10      	ldr	r2, [pc, #64]	; (800c4b4 <Rte_Task_500ms+0x5c>)
 800c474:	2100      	movs	r1, #0
 800c476:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 800c478:	480e      	ldr	r0, [pc, #56]	; (800c4b4 <Rte_Task_500ms+0x5c>)
 800c47a:	f7f3 feb1 	bl	80001e0 <strlen>
 800c47e:	4603      	mov	r3, r0
 800c480:	b29a      	uxth	r2, r3
 800c482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c486:	490b      	ldr	r1, [pc, #44]	; (800c4b4 <Rte_Task_500ms+0x5c>)
 800c488:	480b      	ldr	r0, [pc, #44]	; (800c4b8 <Rte_Task_500ms+0x60>)
 800c48a:	f7fe f8c3 	bl	800a614 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 800c48e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c492:	2201      	movs	r2, #1
 800c494:	4909      	ldr	r1, [pc, #36]	; (800c4bc <Rte_Task_500ms+0x64>)
 800c496:	4808      	ldr	r0, [pc, #32]	; (800c4b8 <Rte_Task_500ms+0x60>)
 800c498:	f7fe f8bc 	bl	800a614 <HAL_UART_Transmit>

	count++;
 800c49c:	4b03      	ldr	r3, [pc, #12]	; (800c4ac <Rte_Task_500ms+0x54>)
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	4b01      	ldr	r3, [pc, #4]	; (800c4ac <Rte_Task_500ms+0x54>)
 800c4a6:	801a      	strh	r2, [r3, #0]
}
 800c4a8:	bf00      	nop
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	200015d0 	.word	0x200015d0
 800c4b0:	0800d250 	.word	0x0800d250
 800c4b4:	200015c0 	.word	0x200015c0
 800c4b8:	20000518 	.word	0x20000518
 800c4bc:	20000014 	.word	0x20000014

0800c4c0 <Rte_Task_Shutdown>:

void Rte_Task_Shutdown(void)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
	/* ASW Shutdown callbacks */
	LED_Shutdown();
 800c4c4:	f7f5 faee 	bl	8001aa4 <LED_Shutdown>
	Brakes_Shutdown();
 800c4c8:	f7f4 ff56 	bl	8001378 <Brakes_Shutdown>

	/* BSW Shutdown callbacks */
}
 800c4cc:	bf00      	nop
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement>:
/* CDD interfaces: Ultrasonic */
/* Cdd_Ultrasonic: Trigger measurement */
void Rte_Call_Cdd_Ultrasonic_TriggerMeasurement(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_SET);
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a0a      	ldr	r2, [pc, #40]	; (800c504 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c4da:	8891      	ldrh	r1, [r2, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7f7 fd73 	bl	8003fca <HAL_GPIO_WritePin>
	__asm("NOP");
 800c4e4:	bf00      	nop
	__asm("NOP");
 800c4e6:	bf00      	nop
	__asm("NOP");
 800c4e8:	bf00      	nop
	__asm("NOP");
 800c4ea:	bf00      	nop
	__asm("NOP");
 800c4ec:	bf00      	nop
	HAL_GPIO_WritePin(c_Cdd_Ultrasonic_CfgType_s.TRIG_GPIO, c_Cdd_Ultrasonic_CfgType_s.TRIG_PIN, (GPIO_PinState)GPIO_PIN_RESET);
 800c4ee:	4b05      	ldr	r3, [pc, #20]	; (800c504 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a04      	ldr	r2, [pc, #16]	; (800c504 <Rte_Call_Cdd_Ultrasonic_TriggerMeasurement+0x34>)
 800c4f4:	8891      	ldrh	r1, [r2, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7f7 fd66 	bl	8003fca <HAL_GPIO_WritePin>
}
 800c4fe:	bf00      	nop
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	0800d298 	.word	0x0800d298

0800c508 <Rte_Read_Cdd_Ultrasonic_Distance_f32>:

/* Cdd_Ultrasonic: Read distance */
void Rte_Read_Cdd_Ultrasonic_Distance_f32(float32 *distance)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
	*distance = Cdd_Ultrasonic_ReadDistance();
 800c510:	f7f6 fb60 	bl	8002bd4 <Cdd_Ultrasonic_ReadDistance>
 800c514:	4602      	mov	r2, r0
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	601a      	str	r2, [r3, #0]
}
 800c51a:	bf00      	nop
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 800c52c:	4b04      	ldr	r3, [pc, #16]	; (800c540 <Rte_Read_PC13_Pin_State+0x1c>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	b2da      	uxtb	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	701a      	strb	r2, [r3, #0]
}
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bc80      	pop	{r7}
 800c53e:	4770      	bx	lr
 800c540:	200015b9 	.word	0x200015b9

0800c544 <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 800c54e:	4a04      	ldr	r2, [pc, #16]	; (800c560 <Rte_Write_PC13_Pin_State+0x1c>)
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	7013      	strb	r3, [r2, #0]
}
 800c554:	bf00      	nop
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	200015b9 	.word	0x200015b9

0800c564 <Rte_Read_PC6_Pin_State>:

void Rte_Read_PC6_Pin_State(uint8 *state)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	*state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 800c56c:	2140      	movs	r1, #64	; 0x40
 800c56e:	4805      	ldr	r0, [pc, #20]	; (800c584 <Rte_Read_PC6_Pin_State+0x20>)
 800c570:	f7f7 fd14 	bl	8003f9c <HAL_GPIO_ReadPin>
 800c574:	4603      	mov	r3, r0
 800c576:	461a      	mov	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	701a      	strb	r2, [r3, #0]
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	48000800 	.word	0x48000800

0800c588 <Rte_Read_g_CollisionWarning_Status>:

void Rte_Read_g_CollisionWarning_Status(uint8 *status)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	*status = g_Rte_CollisionWarning_Status_u8;
 800c590:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <Rte_Read_g_CollisionWarning_Status+0x1c>)
 800c592:	781a      	ldrb	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	701a      	strb	r2, [r3, #0]
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bc80      	pop	{r7}
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	200015d2 	.word	0x200015d2

0800c5a8 <Rte_Write_g_CollisionWarning_Status>:

void Rte_Write_g_CollisionWarning_Status(uint8 status)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	71fb      	strb	r3, [r7, #7]
	g_Rte_CollisionWarning_Status_u8 = status;
 800c5b2:	4a04      	ldr	r2, [pc, #16]	; (800c5c4 <Rte_Write_g_CollisionWarning_Status+0x1c>)
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	7013      	strb	r3, [r2, #0]
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc80      	pop	{r7}
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	200015d2 	.word	0x200015d2

0800c5c8 <Rte_Read_DIO_Autobrakes_State_b>:

void Rte_Read_DIO_Autobrakes_State_b(boolean *state)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	*state = g_Rte_Autobrakes_Status_b;
 800c5d0:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <Rte_Read_DIO_Autobrakes_State_b+0x1c>)
 800c5d2:	781a      	ldrb	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	701a      	strb	r2, [r3, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bc80      	pop	{r7}
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	200015d3 	.word	0x200015d3

0800c5e8 <Rte_Write_PC_2>:

/* Write PC2 pin state */
void Rte_Write_PC_2(boolean state)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d105      	bne.n	800c604 <Rte_Write_PC_2+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	2104      	movs	r1, #4
 800c5fc:	4806      	ldr	r0, [pc, #24]	; (800c618 <Rte_Write_PC_2+0x30>)
 800c5fe:	f7f7 fce4 	bl	8003fca <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
	}
}
 800c602:	e004      	b.n	800c60e <Rte_Write_PC_2+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800c604:	2201      	movs	r2, #1
 800c606:	2104      	movs	r1, #4
 800c608:	4803      	ldr	r0, [pc, #12]	; (800c618 <Rte_Write_PC_2+0x30>)
 800c60a:	f7f7 fcde 	bl	8003fca <HAL_GPIO_WritePin>
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	48000800 	.word	0x48000800

0800c61c <Rte_Write_PC_3>:

/* Write PC3 pin state */
void Rte_Write_PC_3(boolean state)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	4603      	mov	r3, r0
 800c624:	71fb      	strb	r3, [r7, #7]
	if(FALSE == state)
 800c626:	79fb      	ldrb	r3, [r7, #7]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d105      	bne.n	800c638 <Rte_Write_PC_3+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800c62c:	2200      	movs	r2, #0
 800c62e:	2108      	movs	r1, #8
 800c630:	4806      	ldr	r0, [pc, #24]	; (800c64c <Rte_Write_PC_3+0x30>)
 800c632:	f7f7 fcca 	bl	8003fca <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800c636:	e004      	b.n	800c642 <Rte_Write_PC_3+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800c638:	2201      	movs	r2, #1
 800c63a:	2108      	movs	r1, #8
 800c63c:	4803      	ldr	r0, [pc, #12]	; (800c64c <Rte_Write_PC_3+0x30>)
 800c63e:	f7f7 fcc4 	bl	8003fca <HAL_GPIO_WritePin>
}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	48000800 	.word	0x48000800

0800c650 <Rte_Write_DIO_Autobrakes_State_b>:

/* Write PC6 pin state */
void Rte_Write_DIO_Autobrakes_State_b(boolean state)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	71fb      	strb	r3, [r7, #7]
	g_Rte_Autobrakes_Status_b = state;
 800c65a:	4a04      	ldr	r2, [pc, #16]	; (800c66c <Rte_Write_DIO_Autobrakes_State_b+0x1c>)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	7013      	strb	r3, [r2, #0]
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}
	*/
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	bc80      	pop	{r7}
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	200015d3 	.word	0x200015d3

0800c670 <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 800c67a:	88fb      	ldrh	r3, [r7, #6]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7f6 f805 	bl	800268c <Cdd_Servo_RawMove>
}
 800c682:	bf00      	nop
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
	...

0800c68c <Rte_Read_NvM_Block>:

void Rte_Read_NvM_Block(uint16 blockID, uint8 *data)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	6039      	str	r1, [r7, #0]
 800c696:	80fb      	strh	r3, [r7, #6]
	/* TODO:	- remove direct read <- should be done by ReadAll
	 * 			- add block update after write
	 */
	NvM_ReadBlock(blockID, Rte_NvM_RAM_Block[blockID]);
 800c698:	88fb      	ldrh	r3, [r7, #6]
 800c69a:	015b      	lsls	r3, r3, #5
 800c69c:	4a07      	ldr	r2, [pc, #28]	; (800c6bc <Rte_Read_NvM_Block+0x30>)
 800c69e:	441a      	add	r2, r3
 800c6a0:	88fb      	ldrh	r3, [r7, #6]
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe fffc 	bl	800b6a2 <NvM_ReadBlock>
	data = &Rte_NvM_RAM_Block[blockID][0u];
 800c6aa:	88fb      	ldrh	r3, [r7, #6]
 800c6ac:	015b      	lsls	r3, r3, #5
 800c6ae:	4a03      	ldr	r2, [pc, #12]	; (800c6bc <Rte_Read_NvM_Block+0x30>)
 800c6b0:	4413      	add	r3, r2
 800c6b2:	603b      	str	r3, [r7, #0]
}
 800c6b4:	bf00      	nop
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	200015d4 	.word	0x200015d4

0800c6c0 <Rte_Write_NvM_Block>:

void Rte_Write_NvM_Block(uint16 blockID, uint8 *data)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	6039      	str	r1, [r7, #0]
 800c6ca:	80fb      	strh	r3, [r7, #6]
	NvM_WriteBlock(blockID, data);
 800c6cc:	88fb      	ldrh	r3, [r7, #6]
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe ffd7 	bl	800b684 <NvM_WriteBlock>
}
 800c6d6:	bf00      	nop
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 800c6ea:	4a04      	ldr	r2, [pc, #16]	; (800c6fc <Rte_Write_AN0_Voltage_u16+0x1c>)
 800c6ec:	88fb      	ldrh	r3, [r7, #6]
 800c6ee:	8013      	strh	r3, [r2, #0]
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bc80      	pop	{r7}
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	200015ba 	.word	0x200015ba

0800c700 <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800c708:	f7ff fe37 	bl	800c37a <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 800c70c:	4b05      	ldr	r3, [pc, #20]	; (800c724 <Rte_Read_AN0_Voltage_u16+0x24>)
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	b29a      	uxth	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800c716:	f7ff fe38 	bl	800c38a <Rte_Call_LeaveProtectedSection>
}
 800c71a:	bf00      	nop
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	200015ba 	.word	0x200015ba

0800c728 <Rte_Write_AN2_Voltage_u16>:

void Rte_Write_AN2_Voltage_u16(uint16 voltage)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN2_Voltage = voltage;
 800c732:	4a04      	ldr	r2, [pc, #16]	; (800c744 <Rte_Write_AN2_Voltage_u16+0x1c>)
 800c734:	88fb      	ldrh	r3, [r7, #6]
 800c736:	8013      	strh	r3, [r2, #0]
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bc80      	pop	{r7}
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	200015bc 	.word	0x200015bc

0800c748 <Rte_Read_AN2_Voltage_u16>:

void Rte_Read_AN2_Voltage_u16(uint16 *voltage)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 800c750:	f7ff fe13 	bl	800c37a <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN2_Voltage;
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <Rte_Read_AN2_Voltage_u16+0x24>)
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	b29a      	uxth	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800c75e:	f7ff fe14 	bl	800c38a <Rte_Call_LeaveProtectedSection>
}
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	200015bc 	.word	0x200015bc

0800c770 <Rte_Read_Remote_D0>:

void Rte_Read_Remote_D0(uint8 *status)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 800c778:	2180      	movs	r1, #128	; 0x80
 800c77a:	4805      	ldr	r0, [pc, #20]	; (800c790 <Rte_Read_Remote_D0+0x20>)
 800c77c:	f7f7 fc0e 	bl	8003f9c <HAL_GPIO_ReadPin>
 800c780:	4603      	mov	r3, r0
 800c782:	461a      	mov	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	701a      	strb	r2, [r3, #0]
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	48000800 	.word	0x48000800

0800c794 <Rte_Read_Remote_D1>:

void Rte_Read_Remote_D1(uint8 *status)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800c79c:	2108      	movs	r1, #8
 800c79e:	4805      	ldr	r0, [pc, #20]	; (800c7b4 <Rte_Read_Remote_D1+0x20>)
 800c7a0:	f7f7 fbfc 	bl	8003f9c <HAL_GPIO_ReadPin>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	701a      	strb	r2, [r3, #0]
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	48000400 	.word	0x48000400

0800c7b8 <Rte_Read_Remote_D2>:

void Rte_Read_Remote_D2(uint8 *status)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 800c7c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c7c4:	4805      	ldr	r0, [pc, #20]	; (800c7dc <Rte_Read_Remote_D2+0x24>)
 800c7c6:	f7f7 fbe9 	bl	8003f9c <HAL_GPIO_ReadPin>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	701a      	strb	r2, [r3, #0]
}
 800c7d2:	bf00      	nop
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	48000800 	.word	0x48000800

0800c7e0 <Rte_Read_Remote_D3>:

void Rte_Read_Remote_D3(uint8 *status)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
	*status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800c7e8:	2110      	movs	r1, #16
 800c7ea:	4805      	ldr	r0, [pc, #20]	; (800c800 <Rte_Read_Remote_D3+0x20>)
 800c7ec:	f7f7 fbd6 	bl	8003f9c <HAL_GPIO_ReadPin>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	701a      	strb	r2, [r3, #0]
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	48000400 	.word	0x48000400

0800c804 <Rte_Write_PB_13>:

/* Write Green pin state */
void Rte_Write_PB_13(boolean state)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c80e:	79fb      	ldrb	r3, [r7, #7]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d106      	bne.n	800c822 <Rte_Write_PB_13+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_SET);
 800c814:	2201      	movs	r2, #1
 800c816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c81a:	4807      	ldr	r0, [pc, #28]	; (800c838 <Rte_Write_PB_13+0x34>)
 800c81c:	f7f7 fbd5 	bl	8003fca <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
	}
}
 800c820:	e005      	b.n	800c82e <Rte_Write_PB_13+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_GREEN, GPIO_PIN_RESET);
 800c822:	2200      	movs	r2, #0
 800c824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c828:	4803      	ldr	r0, [pc, #12]	; (800c838 <Rte_Write_PB_13+0x34>)
 800c82a:	f7f7 fbce 	bl	8003fca <HAL_GPIO_WritePin>
}
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	48000400 	.word	0x48000400

0800c83c <Rte_Write_PB_14>:

/* Write Yellow pin state */
void Rte_Write_PB_14(boolean state)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	4603      	mov	r3, r0
 800c844:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d106      	bne.n	800c85a <Rte_Write_PB_14+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_SET);
 800c84c:	2201      	movs	r2, #1
 800c84e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c852:	4807      	ldr	r0, [pc, #28]	; (800c870 <Rte_Write_PB_14+0x34>)
 800c854:	f7f7 fbb9 	bl	8003fca <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
	}
}
 800c858:	e005      	b.n	800c866 <Rte_Write_PB_14+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_YELLOW, GPIO_PIN_RESET);
 800c85a:	2200      	movs	r2, #0
 800c85c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c860:	4803      	ldr	r0, [pc, #12]	; (800c870 <Rte_Write_PB_14+0x34>)
 800c862:	f7f7 fbb2 	bl	8003fca <HAL_GPIO_WritePin>
}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	48000400 	.word	0x48000400

0800c874 <Rte_Write_PB_15>:

/* Write Red pin state */
void Rte_Write_PB_15(boolean state)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	71fb      	strb	r3, [r7, #7]
	if(TRUE == state)
 800c87e:	79fb      	ldrb	r3, [r7, #7]
 800c880:	2b01      	cmp	r3, #1
 800c882:	d106      	bne.n	800c892 <Rte_Write_PB_15+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_SET);
 800c884:	2201      	movs	r2, #1
 800c886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c88a:	4807      	ldr	r0, [pc, #28]	; (800c8a8 <Rte_Write_PB_15+0x34>)
 800c88c:	f7f7 fb9d 	bl	8003fca <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
	}
}
 800c890:	e005      	b.n	800c89e <Rte_Write_PB_15+0x2a>
		HAL_GPIO_WritePin(GPIOB, LED_AUTOBRAKES_RED, GPIO_PIN_RESET);
 800c892:	2200      	movs	r2, #0
 800c894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c898:	4803      	ldr	r0, [pc, #12]	; (800c8a8 <Rte_Write_PB_15+0x34>)
 800c89a:	f7f7 fb96 	bl	8003fca <HAL_GPIO_WritePin>
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	48000400 	.word	0x48000400

0800c8ac <Rte_Call_DCMotor_Set_Speed>:
{
	DC_MOTOR_Start(au8_MOTOR_Instance, au8_DIR, au8_SPEED);
}

void Rte_Call_DCMotor_Set_Speed(uint8 au8_MOTOR_Instance, uint8 au8_SPEED)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	460a      	mov	r2, r1
 800c8b6:	71fb      	strb	r3, [r7, #7]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	71bb      	strb	r3, [r7, #6]
	DC_MOTOR_Set_Speed(au8_MOTOR_Instance, au8_SPEED);
 800c8bc:	79ba      	ldrb	r2, [r7, #6]
 800c8be:	79fb      	ldrb	r3, [r7, #7]
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7f5 fc78 	bl	80021b8 <DC_MOTOR_Set_Speed>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <Rte_Call_DCMotor_Set_Dir>:

void Rte_Call_DCMotor_Set_Dir(uint8 au8_MOTOR_Instance, uint8 au8_DIR)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	460a      	mov	r2, r1
 800c8da:	71fb      	strb	r3, [r7, #7]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	71bb      	strb	r3, [r7, #6]
	DC_MOTOR_Set_Dir(au8_MOTOR_Instance, au8_DIR);
 800c8e0:	79ba      	ldrb	r2, [r7, #6]
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f5 fcb6 	bl	8002258 <DC_MOTOR_Set_Dir>
}
 800c8ec:	bf00      	nop
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <siprintf>:
 800c8f4:	b40e      	push	{r1, r2, r3}
 800c8f6:	b500      	push	{lr}
 800c8f8:	b09c      	sub	sp, #112	; 0x70
 800c8fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c8fc:	9002      	str	r0, [sp, #8]
 800c8fe:	9006      	str	r0, [sp, #24]
 800c900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c904:	4809      	ldr	r0, [pc, #36]	; (800c92c <siprintf+0x38>)
 800c906:	9107      	str	r1, [sp, #28]
 800c908:	9104      	str	r1, [sp, #16]
 800c90a:	4909      	ldr	r1, [pc, #36]	; (800c930 <siprintf+0x3c>)
 800c90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c910:	9105      	str	r1, [sp, #20]
 800c912:	6800      	ldr	r0, [r0, #0]
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	a902      	add	r1, sp, #8
 800c918:	f000 f990 	bl	800cc3c <_svfiprintf_r>
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	2200      	movs	r2, #0
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	b01c      	add	sp, #112	; 0x70
 800c924:	f85d eb04 	ldr.w	lr, [sp], #4
 800c928:	b003      	add	sp, #12
 800c92a:	4770      	bx	lr
 800c92c:	20000064 	.word	0x20000064
 800c930:	ffff0208 	.word	0xffff0208

0800c934 <memset>:
 800c934:	4402      	add	r2, r0
 800c936:	4603      	mov	r3, r0
 800c938:	4293      	cmp	r3, r2
 800c93a:	d100      	bne.n	800c93e <memset+0xa>
 800c93c:	4770      	bx	lr
 800c93e:	f803 1b01 	strb.w	r1, [r3], #1
 800c942:	e7f9      	b.n	800c938 <memset+0x4>

0800c944 <__errno>:
 800c944:	4b01      	ldr	r3, [pc, #4]	; (800c94c <__errno+0x8>)
 800c946:	6818      	ldr	r0, [r3, #0]
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20000064 	.word	0x20000064

0800c950 <__libc_init_array>:
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	4d0d      	ldr	r5, [pc, #52]	; (800c988 <__libc_init_array+0x38>)
 800c954:	4c0d      	ldr	r4, [pc, #52]	; (800c98c <__libc_init_array+0x3c>)
 800c956:	1b64      	subs	r4, r4, r5
 800c958:	10a4      	asrs	r4, r4, #2
 800c95a:	2600      	movs	r6, #0
 800c95c:	42a6      	cmp	r6, r4
 800c95e:	d109      	bne.n	800c974 <__libc_init_array+0x24>
 800c960:	4d0b      	ldr	r5, [pc, #44]	; (800c990 <__libc_init_array+0x40>)
 800c962:	4c0c      	ldr	r4, [pc, #48]	; (800c994 <__libc_init_array+0x44>)
 800c964:	f000 fc68 	bl	800d238 <_init>
 800c968:	1b64      	subs	r4, r4, r5
 800c96a:	10a4      	asrs	r4, r4, #2
 800c96c:	2600      	movs	r6, #0
 800c96e:	42a6      	cmp	r6, r4
 800c970:	d105      	bne.n	800c97e <__libc_init_array+0x2e>
 800c972:	bd70      	pop	{r4, r5, r6, pc}
 800c974:	f855 3b04 	ldr.w	r3, [r5], #4
 800c978:	4798      	blx	r3
 800c97a:	3601      	adds	r6, #1
 800c97c:	e7ee      	b.n	800c95c <__libc_init_array+0xc>
 800c97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c982:	4798      	blx	r3
 800c984:	3601      	adds	r6, #1
 800c986:	e7f2      	b.n	800c96e <__libc_init_array+0x1e>
 800c988:	0800d318 	.word	0x0800d318
 800c98c:	0800d318 	.word	0x0800d318
 800c990:	0800d318 	.word	0x0800d318
 800c994:	0800d31c 	.word	0x0800d31c

0800c998 <__retarget_lock_acquire_recursive>:
 800c998:	4770      	bx	lr

0800c99a <__retarget_lock_release_recursive>:
 800c99a:	4770      	bx	lr

0800c99c <_free_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4605      	mov	r5, r0
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	d041      	beq.n	800ca28 <_free_r+0x8c>
 800c9a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a8:	1f0c      	subs	r4, r1, #4
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bfb8      	it	lt
 800c9ae:	18e4      	addlt	r4, r4, r3
 800c9b0:	f000 f8de 	bl	800cb70 <__malloc_lock>
 800c9b4:	4a1d      	ldr	r2, [pc, #116]	; (800ca2c <_free_r+0x90>)
 800c9b6:	6813      	ldr	r3, [r2, #0]
 800c9b8:	b933      	cbnz	r3, 800c9c8 <_free_r+0x2c>
 800c9ba:	6063      	str	r3, [r4, #4]
 800c9bc:	6014      	str	r4, [r2, #0]
 800c9be:	4628      	mov	r0, r5
 800c9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9c4:	f000 b8da 	b.w	800cb7c <__malloc_unlock>
 800c9c8:	42a3      	cmp	r3, r4
 800c9ca:	d908      	bls.n	800c9de <_free_r+0x42>
 800c9cc:	6820      	ldr	r0, [r4, #0]
 800c9ce:	1821      	adds	r1, r4, r0
 800c9d0:	428b      	cmp	r3, r1
 800c9d2:	bf01      	itttt	eq
 800c9d4:	6819      	ldreq	r1, [r3, #0]
 800c9d6:	685b      	ldreq	r3, [r3, #4]
 800c9d8:	1809      	addeq	r1, r1, r0
 800c9da:	6021      	streq	r1, [r4, #0]
 800c9dc:	e7ed      	b.n	800c9ba <_free_r+0x1e>
 800c9de:	461a      	mov	r2, r3
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	b10b      	cbz	r3, 800c9e8 <_free_r+0x4c>
 800c9e4:	42a3      	cmp	r3, r4
 800c9e6:	d9fa      	bls.n	800c9de <_free_r+0x42>
 800c9e8:	6811      	ldr	r1, [r2, #0]
 800c9ea:	1850      	adds	r0, r2, r1
 800c9ec:	42a0      	cmp	r0, r4
 800c9ee:	d10b      	bne.n	800ca08 <_free_r+0x6c>
 800c9f0:	6820      	ldr	r0, [r4, #0]
 800c9f2:	4401      	add	r1, r0
 800c9f4:	1850      	adds	r0, r2, r1
 800c9f6:	4283      	cmp	r3, r0
 800c9f8:	6011      	str	r1, [r2, #0]
 800c9fa:	d1e0      	bne.n	800c9be <_free_r+0x22>
 800c9fc:	6818      	ldr	r0, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	6053      	str	r3, [r2, #4]
 800ca02:	4408      	add	r0, r1
 800ca04:	6010      	str	r0, [r2, #0]
 800ca06:	e7da      	b.n	800c9be <_free_r+0x22>
 800ca08:	d902      	bls.n	800ca10 <_free_r+0x74>
 800ca0a:	230c      	movs	r3, #12
 800ca0c:	602b      	str	r3, [r5, #0]
 800ca0e:	e7d6      	b.n	800c9be <_free_r+0x22>
 800ca10:	6820      	ldr	r0, [r4, #0]
 800ca12:	1821      	adds	r1, r4, r0
 800ca14:	428b      	cmp	r3, r1
 800ca16:	bf04      	itt	eq
 800ca18:	6819      	ldreq	r1, [r3, #0]
 800ca1a:	685b      	ldreq	r3, [r3, #4]
 800ca1c:	6063      	str	r3, [r4, #4]
 800ca1e:	bf04      	itt	eq
 800ca20:	1809      	addeq	r1, r1, r0
 800ca22:	6021      	streq	r1, [r4, #0]
 800ca24:	6054      	str	r4, [r2, #4]
 800ca26:	e7ca      	b.n	800c9be <_free_r+0x22>
 800ca28:	bd38      	pop	{r3, r4, r5, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200017d4 	.word	0x200017d4

0800ca30 <sbrk_aligned>:
 800ca30:	b570      	push	{r4, r5, r6, lr}
 800ca32:	4e0e      	ldr	r6, [pc, #56]	; (800ca6c <sbrk_aligned+0x3c>)
 800ca34:	460c      	mov	r4, r1
 800ca36:	6831      	ldr	r1, [r6, #0]
 800ca38:	4605      	mov	r5, r0
 800ca3a:	b911      	cbnz	r1, 800ca42 <sbrk_aligned+0x12>
 800ca3c:	f000 fba6 	bl	800d18c <_sbrk_r>
 800ca40:	6030      	str	r0, [r6, #0]
 800ca42:	4621      	mov	r1, r4
 800ca44:	4628      	mov	r0, r5
 800ca46:	f000 fba1 	bl	800d18c <_sbrk_r>
 800ca4a:	1c43      	adds	r3, r0, #1
 800ca4c:	d00a      	beq.n	800ca64 <sbrk_aligned+0x34>
 800ca4e:	1cc4      	adds	r4, r0, #3
 800ca50:	f024 0403 	bic.w	r4, r4, #3
 800ca54:	42a0      	cmp	r0, r4
 800ca56:	d007      	beq.n	800ca68 <sbrk_aligned+0x38>
 800ca58:	1a21      	subs	r1, r4, r0
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f000 fb96 	bl	800d18c <_sbrk_r>
 800ca60:	3001      	adds	r0, #1
 800ca62:	d101      	bne.n	800ca68 <sbrk_aligned+0x38>
 800ca64:	f04f 34ff 	mov.w	r4, #4294967295
 800ca68:	4620      	mov	r0, r4
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}
 800ca6c:	200017d8 	.word	0x200017d8

0800ca70 <_malloc_r>:
 800ca70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca74:	1ccd      	adds	r5, r1, #3
 800ca76:	f025 0503 	bic.w	r5, r5, #3
 800ca7a:	3508      	adds	r5, #8
 800ca7c:	2d0c      	cmp	r5, #12
 800ca7e:	bf38      	it	cc
 800ca80:	250c      	movcc	r5, #12
 800ca82:	2d00      	cmp	r5, #0
 800ca84:	4607      	mov	r7, r0
 800ca86:	db01      	blt.n	800ca8c <_malloc_r+0x1c>
 800ca88:	42a9      	cmp	r1, r5
 800ca8a:	d905      	bls.n	800ca98 <_malloc_r+0x28>
 800ca8c:	230c      	movs	r3, #12
 800ca8e:	603b      	str	r3, [r7, #0]
 800ca90:	2600      	movs	r6, #0
 800ca92:	4630      	mov	r0, r6
 800ca94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb6c <_malloc_r+0xfc>
 800ca9c:	f000 f868 	bl	800cb70 <__malloc_lock>
 800caa0:	f8d8 3000 	ldr.w	r3, [r8]
 800caa4:	461c      	mov	r4, r3
 800caa6:	bb5c      	cbnz	r4, 800cb00 <_malloc_r+0x90>
 800caa8:	4629      	mov	r1, r5
 800caaa:	4638      	mov	r0, r7
 800caac:	f7ff ffc0 	bl	800ca30 <sbrk_aligned>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	4604      	mov	r4, r0
 800cab4:	d155      	bne.n	800cb62 <_malloc_r+0xf2>
 800cab6:	f8d8 4000 	ldr.w	r4, [r8]
 800caba:	4626      	mov	r6, r4
 800cabc:	2e00      	cmp	r6, #0
 800cabe:	d145      	bne.n	800cb4c <_malloc_r+0xdc>
 800cac0:	2c00      	cmp	r4, #0
 800cac2:	d048      	beq.n	800cb56 <_malloc_r+0xe6>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	4631      	mov	r1, r6
 800cac8:	4638      	mov	r0, r7
 800caca:	eb04 0903 	add.w	r9, r4, r3
 800cace:	f000 fb5d 	bl	800d18c <_sbrk_r>
 800cad2:	4581      	cmp	r9, r0
 800cad4:	d13f      	bne.n	800cb56 <_malloc_r+0xe6>
 800cad6:	6821      	ldr	r1, [r4, #0]
 800cad8:	1a6d      	subs	r5, r5, r1
 800cada:	4629      	mov	r1, r5
 800cadc:	4638      	mov	r0, r7
 800cade:	f7ff ffa7 	bl	800ca30 <sbrk_aligned>
 800cae2:	3001      	adds	r0, #1
 800cae4:	d037      	beq.n	800cb56 <_malloc_r+0xe6>
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	442b      	add	r3, r5
 800caea:	6023      	str	r3, [r4, #0]
 800caec:	f8d8 3000 	ldr.w	r3, [r8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d038      	beq.n	800cb66 <_malloc_r+0xf6>
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	42a2      	cmp	r2, r4
 800caf8:	d12b      	bne.n	800cb52 <_malloc_r+0xe2>
 800cafa:	2200      	movs	r2, #0
 800cafc:	605a      	str	r2, [r3, #4]
 800cafe:	e00f      	b.n	800cb20 <_malloc_r+0xb0>
 800cb00:	6822      	ldr	r2, [r4, #0]
 800cb02:	1b52      	subs	r2, r2, r5
 800cb04:	d41f      	bmi.n	800cb46 <_malloc_r+0xd6>
 800cb06:	2a0b      	cmp	r2, #11
 800cb08:	d917      	bls.n	800cb3a <_malloc_r+0xca>
 800cb0a:	1961      	adds	r1, r4, r5
 800cb0c:	42a3      	cmp	r3, r4
 800cb0e:	6025      	str	r5, [r4, #0]
 800cb10:	bf18      	it	ne
 800cb12:	6059      	strne	r1, [r3, #4]
 800cb14:	6863      	ldr	r3, [r4, #4]
 800cb16:	bf08      	it	eq
 800cb18:	f8c8 1000 	streq.w	r1, [r8]
 800cb1c:	5162      	str	r2, [r4, r5]
 800cb1e:	604b      	str	r3, [r1, #4]
 800cb20:	4638      	mov	r0, r7
 800cb22:	f104 060b 	add.w	r6, r4, #11
 800cb26:	f000 f829 	bl	800cb7c <__malloc_unlock>
 800cb2a:	f026 0607 	bic.w	r6, r6, #7
 800cb2e:	1d23      	adds	r3, r4, #4
 800cb30:	1af2      	subs	r2, r6, r3
 800cb32:	d0ae      	beq.n	800ca92 <_malloc_r+0x22>
 800cb34:	1b9b      	subs	r3, r3, r6
 800cb36:	50a3      	str	r3, [r4, r2]
 800cb38:	e7ab      	b.n	800ca92 <_malloc_r+0x22>
 800cb3a:	42a3      	cmp	r3, r4
 800cb3c:	6862      	ldr	r2, [r4, #4]
 800cb3e:	d1dd      	bne.n	800cafc <_malloc_r+0x8c>
 800cb40:	f8c8 2000 	str.w	r2, [r8]
 800cb44:	e7ec      	b.n	800cb20 <_malloc_r+0xb0>
 800cb46:	4623      	mov	r3, r4
 800cb48:	6864      	ldr	r4, [r4, #4]
 800cb4a:	e7ac      	b.n	800caa6 <_malloc_r+0x36>
 800cb4c:	4634      	mov	r4, r6
 800cb4e:	6876      	ldr	r6, [r6, #4]
 800cb50:	e7b4      	b.n	800cabc <_malloc_r+0x4c>
 800cb52:	4613      	mov	r3, r2
 800cb54:	e7cc      	b.n	800caf0 <_malloc_r+0x80>
 800cb56:	230c      	movs	r3, #12
 800cb58:	603b      	str	r3, [r7, #0]
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f000 f80e 	bl	800cb7c <__malloc_unlock>
 800cb60:	e797      	b.n	800ca92 <_malloc_r+0x22>
 800cb62:	6025      	str	r5, [r4, #0]
 800cb64:	e7dc      	b.n	800cb20 <_malloc_r+0xb0>
 800cb66:	605b      	str	r3, [r3, #4]
 800cb68:	deff      	udf	#255	; 0xff
 800cb6a:	bf00      	nop
 800cb6c:	200017d4 	.word	0x200017d4

0800cb70 <__malloc_lock>:
 800cb70:	4801      	ldr	r0, [pc, #4]	; (800cb78 <__malloc_lock+0x8>)
 800cb72:	f7ff bf11 	b.w	800c998 <__retarget_lock_acquire_recursive>
 800cb76:	bf00      	nop
 800cb78:	200017d0 	.word	0x200017d0

0800cb7c <__malloc_unlock>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	; (800cb84 <__malloc_unlock+0x8>)
 800cb7e:	f7ff bf0c 	b.w	800c99a <__retarget_lock_release_recursive>
 800cb82:	bf00      	nop
 800cb84:	200017d0 	.word	0x200017d0

0800cb88 <__ssputs_r>:
 800cb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8c:	688e      	ldr	r6, [r1, #8]
 800cb8e:	461f      	mov	r7, r3
 800cb90:	42be      	cmp	r6, r7
 800cb92:	680b      	ldr	r3, [r1, #0]
 800cb94:	4682      	mov	sl, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	4690      	mov	r8, r2
 800cb9a:	d82c      	bhi.n	800cbf6 <__ssputs_r+0x6e>
 800cb9c:	898a      	ldrh	r2, [r1, #12]
 800cb9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cba2:	d026      	beq.n	800cbf2 <__ssputs_r+0x6a>
 800cba4:	6965      	ldr	r5, [r4, #20]
 800cba6:	6909      	ldr	r1, [r1, #16]
 800cba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbac:	eba3 0901 	sub.w	r9, r3, r1
 800cbb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbb4:	1c7b      	adds	r3, r7, #1
 800cbb6:	444b      	add	r3, r9
 800cbb8:	106d      	asrs	r5, r5, #1
 800cbba:	429d      	cmp	r5, r3
 800cbbc:	bf38      	it	cc
 800cbbe:	461d      	movcc	r5, r3
 800cbc0:	0553      	lsls	r3, r2, #21
 800cbc2:	d527      	bpl.n	800cc14 <__ssputs_r+0x8c>
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	f7ff ff53 	bl	800ca70 <_malloc_r>
 800cbca:	4606      	mov	r6, r0
 800cbcc:	b360      	cbz	r0, 800cc28 <__ssputs_r+0xa0>
 800cbce:	6921      	ldr	r1, [r4, #16]
 800cbd0:	464a      	mov	r2, r9
 800cbd2:	f000 faeb 	bl	800d1ac <memcpy>
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbe0:	81a3      	strh	r3, [r4, #12]
 800cbe2:	6126      	str	r6, [r4, #16]
 800cbe4:	6165      	str	r5, [r4, #20]
 800cbe6:	444e      	add	r6, r9
 800cbe8:	eba5 0509 	sub.w	r5, r5, r9
 800cbec:	6026      	str	r6, [r4, #0]
 800cbee:	60a5      	str	r5, [r4, #8]
 800cbf0:	463e      	mov	r6, r7
 800cbf2:	42be      	cmp	r6, r7
 800cbf4:	d900      	bls.n	800cbf8 <__ssputs_r+0x70>
 800cbf6:	463e      	mov	r6, r7
 800cbf8:	6820      	ldr	r0, [r4, #0]
 800cbfa:	4632      	mov	r2, r6
 800cbfc:	4641      	mov	r1, r8
 800cbfe:	f000 faab 	bl	800d158 <memmove>
 800cc02:	68a3      	ldr	r3, [r4, #8]
 800cc04:	1b9b      	subs	r3, r3, r6
 800cc06:	60a3      	str	r3, [r4, #8]
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	4433      	add	r3, r6
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc14:	462a      	mov	r2, r5
 800cc16:	f000 fad7 	bl	800d1c8 <_realloc_r>
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d1e0      	bne.n	800cbe2 <__ssputs_r+0x5a>
 800cc20:	6921      	ldr	r1, [r4, #16]
 800cc22:	4650      	mov	r0, sl
 800cc24:	f7ff feba 	bl	800c99c <_free_r>
 800cc28:	230c      	movs	r3, #12
 800cc2a:	f8ca 3000 	str.w	r3, [sl]
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3a:	e7e9      	b.n	800cc10 <__ssputs_r+0x88>

0800cc3c <_svfiprintf_r>:
 800cc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc40:	4698      	mov	r8, r3
 800cc42:	898b      	ldrh	r3, [r1, #12]
 800cc44:	061b      	lsls	r3, r3, #24
 800cc46:	b09d      	sub	sp, #116	; 0x74
 800cc48:	4607      	mov	r7, r0
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	d50e      	bpl.n	800cc6e <_svfiprintf_r+0x32>
 800cc50:	690b      	ldr	r3, [r1, #16]
 800cc52:	b963      	cbnz	r3, 800cc6e <_svfiprintf_r+0x32>
 800cc54:	2140      	movs	r1, #64	; 0x40
 800cc56:	f7ff ff0b 	bl	800ca70 <_malloc_r>
 800cc5a:	6028      	str	r0, [r5, #0]
 800cc5c:	6128      	str	r0, [r5, #16]
 800cc5e:	b920      	cbnz	r0, 800cc6a <_svfiprintf_r+0x2e>
 800cc60:	230c      	movs	r3, #12
 800cc62:	603b      	str	r3, [r7, #0]
 800cc64:	f04f 30ff 	mov.w	r0, #4294967295
 800cc68:	e0d0      	b.n	800ce0c <_svfiprintf_r+0x1d0>
 800cc6a:	2340      	movs	r3, #64	; 0x40
 800cc6c:	616b      	str	r3, [r5, #20]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	9309      	str	r3, [sp, #36]	; 0x24
 800cc72:	2320      	movs	r3, #32
 800cc74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc78:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc7c:	2330      	movs	r3, #48	; 0x30
 800cc7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce24 <_svfiprintf_r+0x1e8>
 800cc82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc86:	f04f 0901 	mov.w	r9, #1
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	469a      	mov	sl, r3
 800cc8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc92:	b10a      	cbz	r2, 800cc98 <_svfiprintf_r+0x5c>
 800cc94:	2a25      	cmp	r2, #37	; 0x25
 800cc96:	d1f9      	bne.n	800cc8c <_svfiprintf_r+0x50>
 800cc98:	ebba 0b04 	subs.w	fp, sl, r4
 800cc9c:	d00b      	beq.n	800ccb6 <_svfiprintf_r+0x7a>
 800cc9e:	465b      	mov	r3, fp
 800cca0:	4622      	mov	r2, r4
 800cca2:	4629      	mov	r1, r5
 800cca4:	4638      	mov	r0, r7
 800cca6:	f7ff ff6f 	bl	800cb88 <__ssputs_r>
 800ccaa:	3001      	adds	r0, #1
 800ccac:	f000 80a9 	beq.w	800ce02 <_svfiprintf_r+0x1c6>
 800ccb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccb2:	445a      	add	r2, fp
 800ccb4:	9209      	str	r2, [sp, #36]	; 0x24
 800ccb6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 80a1 	beq.w	800ce02 <_svfiprintf_r+0x1c6>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccca:	f10a 0a01 	add.w	sl, sl, #1
 800ccce:	9304      	str	r3, [sp, #16]
 800ccd0:	9307      	str	r3, [sp, #28]
 800ccd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccd6:	931a      	str	r3, [sp, #104]	; 0x68
 800ccd8:	4654      	mov	r4, sl
 800ccda:	2205      	movs	r2, #5
 800ccdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce0:	4850      	ldr	r0, [pc, #320]	; (800ce24 <_svfiprintf_r+0x1e8>)
 800cce2:	f7f3 fa85 	bl	80001f0 <memchr>
 800cce6:	9a04      	ldr	r2, [sp, #16]
 800cce8:	b9d8      	cbnz	r0, 800cd22 <_svfiprintf_r+0xe6>
 800ccea:	06d0      	lsls	r0, r2, #27
 800ccec:	bf44      	itt	mi
 800ccee:	2320      	movmi	r3, #32
 800ccf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccf4:	0711      	lsls	r1, r2, #28
 800ccf6:	bf44      	itt	mi
 800ccf8:	232b      	movmi	r3, #43	; 0x2b
 800ccfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccfe:	f89a 3000 	ldrb.w	r3, [sl]
 800cd02:	2b2a      	cmp	r3, #42	; 0x2a
 800cd04:	d015      	beq.n	800cd32 <_svfiprintf_r+0xf6>
 800cd06:	9a07      	ldr	r2, [sp, #28]
 800cd08:	4654      	mov	r4, sl
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	f04f 0c0a 	mov.w	ip, #10
 800cd10:	4621      	mov	r1, r4
 800cd12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd16:	3b30      	subs	r3, #48	; 0x30
 800cd18:	2b09      	cmp	r3, #9
 800cd1a:	d94d      	bls.n	800cdb8 <_svfiprintf_r+0x17c>
 800cd1c:	b1b0      	cbz	r0, 800cd4c <_svfiprintf_r+0x110>
 800cd1e:	9207      	str	r2, [sp, #28]
 800cd20:	e014      	b.n	800cd4c <_svfiprintf_r+0x110>
 800cd22:	eba0 0308 	sub.w	r3, r0, r8
 800cd26:	fa09 f303 	lsl.w	r3, r9, r3
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	9304      	str	r3, [sp, #16]
 800cd2e:	46a2      	mov	sl, r4
 800cd30:	e7d2      	b.n	800ccd8 <_svfiprintf_r+0x9c>
 800cd32:	9b03      	ldr	r3, [sp, #12]
 800cd34:	1d19      	adds	r1, r3, #4
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	9103      	str	r1, [sp, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	bfbb      	ittet	lt
 800cd3e:	425b      	neglt	r3, r3
 800cd40:	f042 0202 	orrlt.w	r2, r2, #2
 800cd44:	9307      	strge	r3, [sp, #28]
 800cd46:	9307      	strlt	r3, [sp, #28]
 800cd48:	bfb8      	it	lt
 800cd4a:	9204      	strlt	r2, [sp, #16]
 800cd4c:	7823      	ldrb	r3, [r4, #0]
 800cd4e:	2b2e      	cmp	r3, #46	; 0x2e
 800cd50:	d10c      	bne.n	800cd6c <_svfiprintf_r+0x130>
 800cd52:	7863      	ldrb	r3, [r4, #1]
 800cd54:	2b2a      	cmp	r3, #42	; 0x2a
 800cd56:	d134      	bne.n	800cdc2 <_svfiprintf_r+0x186>
 800cd58:	9b03      	ldr	r3, [sp, #12]
 800cd5a:	1d1a      	adds	r2, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	9203      	str	r2, [sp, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	bfb8      	it	lt
 800cd64:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd68:	3402      	adds	r4, #2
 800cd6a:	9305      	str	r3, [sp, #20]
 800cd6c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ce28 <_svfiprintf_r+0x1ec>
 800cd70:	7821      	ldrb	r1, [r4, #0]
 800cd72:	2203      	movs	r2, #3
 800cd74:	4650      	mov	r0, sl
 800cd76:	f7f3 fa3b 	bl	80001f0 <memchr>
 800cd7a:	b138      	cbz	r0, 800cd8c <_svfiprintf_r+0x150>
 800cd7c:	9b04      	ldr	r3, [sp, #16]
 800cd7e:	eba0 000a 	sub.w	r0, r0, sl
 800cd82:	2240      	movs	r2, #64	; 0x40
 800cd84:	4082      	lsls	r2, r0
 800cd86:	4313      	orrs	r3, r2
 800cd88:	3401      	adds	r4, #1
 800cd8a:	9304      	str	r3, [sp, #16]
 800cd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd90:	4826      	ldr	r0, [pc, #152]	; (800ce2c <_svfiprintf_r+0x1f0>)
 800cd92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd96:	2206      	movs	r2, #6
 800cd98:	f7f3 fa2a 	bl	80001f0 <memchr>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d038      	beq.n	800ce12 <_svfiprintf_r+0x1d6>
 800cda0:	4b23      	ldr	r3, [pc, #140]	; (800ce30 <_svfiprintf_r+0x1f4>)
 800cda2:	bb1b      	cbnz	r3, 800cdec <_svfiprintf_r+0x1b0>
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	3307      	adds	r3, #7
 800cda8:	f023 0307 	bic.w	r3, r3, #7
 800cdac:	3308      	adds	r3, #8
 800cdae:	9303      	str	r3, [sp, #12]
 800cdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb2:	4433      	add	r3, r6
 800cdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdb6:	e768      	b.n	800cc8a <_svfiprintf_r+0x4e>
 800cdb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	2001      	movs	r0, #1
 800cdc0:	e7a6      	b.n	800cd10 <_svfiprintf_r+0xd4>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	3401      	adds	r4, #1
 800cdc6:	9305      	str	r3, [sp, #20]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	f04f 0c0a 	mov.w	ip, #10
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdd4:	3a30      	subs	r2, #48	; 0x30
 800cdd6:	2a09      	cmp	r2, #9
 800cdd8:	d903      	bls.n	800cde2 <_svfiprintf_r+0x1a6>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0c6      	beq.n	800cd6c <_svfiprintf_r+0x130>
 800cdde:	9105      	str	r1, [sp, #20]
 800cde0:	e7c4      	b.n	800cd6c <_svfiprintf_r+0x130>
 800cde2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cde6:	4604      	mov	r4, r0
 800cde8:	2301      	movs	r3, #1
 800cdea:	e7f0      	b.n	800cdce <_svfiprintf_r+0x192>
 800cdec:	ab03      	add	r3, sp, #12
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4b10      	ldr	r3, [pc, #64]	; (800ce34 <_svfiprintf_r+0x1f8>)
 800cdf4:	a904      	add	r1, sp, #16
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f3af 8000 	nop.w
 800cdfc:	1c42      	adds	r2, r0, #1
 800cdfe:	4606      	mov	r6, r0
 800ce00:	d1d6      	bne.n	800cdb0 <_svfiprintf_r+0x174>
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	065b      	lsls	r3, r3, #25
 800ce06:	f53f af2d 	bmi.w	800cc64 <_svfiprintf_r+0x28>
 800ce0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce0c:	b01d      	add	sp, #116	; 0x74
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce12:	ab03      	add	r3, sp, #12
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	462a      	mov	r2, r5
 800ce18:	4b06      	ldr	r3, [pc, #24]	; (800ce34 <_svfiprintf_r+0x1f8>)
 800ce1a:	a904      	add	r1, sp, #16
 800ce1c:	4638      	mov	r0, r7
 800ce1e:	f000 f879 	bl	800cf14 <_printf_i>
 800ce22:	e7eb      	b.n	800cdfc <_svfiprintf_r+0x1c0>
 800ce24:	0800d2e4 	.word	0x0800d2e4
 800ce28:	0800d2ea 	.word	0x0800d2ea
 800ce2c:	0800d2ee 	.word	0x0800d2ee
 800ce30:	00000000 	.word	0x00000000
 800ce34:	0800cb89 	.word	0x0800cb89

0800ce38 <_printf_common>:
 800ce38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3c:	4616      	mov	r6, r2
 800ce3e:	4699      	mov	r9, r3
 800ce40:	688a      	ldr	r2, [r1, #8]
 800ce42:	690b      	ldr	r3, [r1, #16]
 800ce44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	bfb8      	it	lt
 800ce4c:	4613      	movlt	r3, r2
 800ce4e:	6033      	str	r3, [r6, #0]
 800ce50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce54:	4607      	mov	r7, r0
 800ce56:	460c      	mov	r4, r1
 800ce58:	b10a      	cbz	r2, 800ce5e <_printf_common+0x26>
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	6033      	str	r3, [r6, #0]
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	0699      	lsls	r1, r3, #26
 800ce62:	bf42      	ittt	mi
 800ce64:	6833      	ldrmi	r3, [r6, #0]
 800ce66:	3302      	addmi	r3, #2
 800ce68:	6033      	strmi	r3, [r6, #0]
 800ce6a:	6825      	ldr	r5, [r4, #0]
 800ce6c:	f015 0506 	ands.w	r5, r5, #6
 800ce70:	d106      	bne.n	800ce80 <_printf_common+0x48>
 800ce72:	f104 0a19 	add.w	sl, r4, #25
 800ce76:	68e3      	ldr	r3, [r4, #12]
 800ce78:	6832      	ldr	r2, [r6, #0]
 800ce7a:	1a9b      	subs	r3, r3, r2
 800ce7c:	42ab      	cmp	r3, r5
 800ce7e:	dc26      	bgt.n	800cece <_printf_common+0x96>
 800ce80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce84:	1e13      	subs	r3, r2, #0
 800ce86:	6822      	ldr	r2, [r4, #0]
 800ce88:	bf18      	it	ne
 800ce8a:	2301      	movne	r3, #1
 800ce8c:	0692      	lsls	r2, r2, #26
 800ce8e:	d42b      	bmi.n	800cee8 <_printf_common+0xb0>
 800ce90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce94:	4649      	mov	r1, r9
 800ce96:	4638      	mov	r0, r7
 800ce98:	47c0      	blx	r8
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	d01e      	beq.n	800cedc <_printf_common+0xa4>
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	6922      	ldr	r2, [r4, #16]
 800cea2:	f003 0306 	and.w	r3, r3, #6
 800cea6:	2b04      	cmp	r3, #4
 800cea8:	bf02      	ittt	eq
 800ceaa:	68e5      	ldreq	r5, [r4, #12]
 800ceac:	6833      	ldreq	r3, [r6, #0]
 800ceae:	1aed      	subeq	r5, r5, r3
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	bf0c      	ite	eq
 800ceb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ceb8:	2500      	movne	r5, #0
 800ceba:	4293      	cmp	r3, r2
 800cebc:	bfc4      	itt	gt
 800cebe:	1a9b      	subgt	r3, r3, r2
 800cec0:	18ed      	addgt	r5, r5, r3
 800cec2:	2600      	movs	r6, #0
 800cec4:	341a      	adds	r4, #26
 800cec6:	42b5      	cmp	r5, r6
 800cec8:	d11a      	bne.n	800cf00 <_printf_common+0xc8>
 800ceca:	2000      	movs	r0, #0
 800cecc:	e008      	b.n	800cee0 <_printf_common+0xa8>
 800cece:	2301      	movs	r3, #1
 800ced0:	4652      	mov	r2, sl
 800ced2:	4649      	mov	r1, r9
 800ced4:	4638      	mov	r0, r7
 800ced6:	47c0      	blx	r8
 800ced8:	3001      	adds	r0, #1
 800ceda:	d103      	bne.n	800cee4 <_printf_common+0xac>
 800cedc:	f04f 30ff 	mov.w	r0, #4294967295
 800cee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee4:	3501      	adds	r5, #1
 800cee6:	e7c6      	b.n	800ce76 <_printf_common+0x3e>
 800cee8:	18e1      	adds	r1, r4, r3
 800ceea:	1c5a      	adds	r2, r3, #1
 800ceec:	2030      	movs	r0, #48	; 0x30
 800ceee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cef2:	4422      	add	r2, r4
 800cef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cefc:	3302      	adds	r3, #2
 800cefe:	e7c7      	b.n	800ce90 <_printf_common+0x58>
 800cf00:	2301      	movs	r3, #1
 800cf02:	4622      	mov	r2, r4
 800cf04:	4649      	mov	r1, r9
 800cf06:	4638      	mov	r0, r7
 800cf08:	47c0      	blx	r8
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	d0e6      	beq.n	800cedc <_printf_common+0xa4>
 800cf0e:	3601      	adds	r6, #1
 800cf10:	e7d9      	b.n	800cec6 <_printf_common+0x8e>
	...

0800cf14 <_printf_i>:
 800cf14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf18:	7e0f      	ldrb	r7, [r1, #24]
 800cf1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf1c:	2f78      	cmp	r7, #120	; 0x78
 800cf1e:	4691      	mov	r9, r2
 800cf20:	4680      	mov	r8, r0
 800cf22:	460c      	mov	r4, r1
 800cf24:	469a      	mov	sl, r3
 800cf26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf2a:	d807      	bhi.n	800cf3c <_printf_i+0x28>
 800cf2c:	2f62      	cmp	r7, #98	; 0x62
 800cf2e:	d80a      	bhi.n	800cf46 <_printf_i+0x32>
 800cf30:	2f00      	cmp	r7, #0
 800cf32:	f000 80d4 	beq.w	800d0de <_printf_i+0x1ca>
 800cf36:	2f58      	cmp	r7, #88	; 0x58
 800cf38:	f000 80c0 	beq.w	800d0bc <_printf_i+0x1a8>
 800cf3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf44:	e03a      	b.n	800cfbc <_printf_i+0xa8>
 800cf46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf4a:	2b15      	cmp	r3, #21
 800cf4c:	d8f6      	bhi.n	800cf3c <_printf_i+0x28>
 800cf4e:	a101      	add	r1, pc, #4	; (adr r1, 800cf54 <_printf_i+0x40>)
 800cf50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf54:	0800cfad 	.word	0x0800cfad
 800cf58:	0800cfc1 	.word	0x0800cfc1
 800cf5c:	0800cf3d 	.word	0x0800cf3d
 800cf60:	0800cf3d 	.word	0x0800cf3d
 800cf64:	0800cf3d 	.word	0x0800cf3d
 800cf68:	0800cf3d 	.word	0x0800cf3d
 800cf6c:	0800cfc1 	.word	0x0800cfc1
 800cf70:	0800cf3d 	.word	0x0800cf3d
 800cf74:	0800cf3d 	.word	0x0800cf3d
 800cf78:	0800cf3d 	.word	0x0800cf3d
 800cf7c:	0800cf3d 	.word	0x0800cf3d
 800cf80:	0800d0c5 	.word	0x0800d0c5
 800cf84:	0800cfed 	.word	0x0800cfed
 800cf88:	0800d07f 	.word	0x0800d07f
 800cf8c:	0800cf3d 	.word	0x0800cf3d
 800cf90:	0800cf3d 	.word	0x0800cf3d
 800cf94:	0800d0e7 	.word	0x0800d0e7
 800cf98:	0800cf3d 	.word	0x0800cf3d
 800cf9c:	0800cfed 	.word	0x0800cfed
 800cfa0:	0800cf3d 	.word	0x0800cf3d
 800cfa4:	0800cf3d 	.word	0x0800cf3d
 800cfa8:	0800d087 	.word	0x0800d087
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	1d1a      	adds	r2, r3, #4
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	602a      	str	r2, [r5, #0]
 800cfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e09f      	b.n	800d100 <_printf_i+0x1ec>
 800cfc0:	6820      	ldr	r0, [r4, #0]
 800cfc2:	682b      	ldr	r3, [r5, #0]
 800cfc4:	0607      	lsls	r7, r0, #24
 800cfc6:	f103 0104 	add.w	r1, r3, #4
 800cfca:	6029      	str	r1, [r5, #0]
 800cfcc:	d501      	bpl.n	800cfd2 <_printf_i+0xbe>
 800cfce:	681e      	ldr	r6, [r3, #0]
 800cfd0:	e003      	b.n	800cfda <_printf_i+0xc6>
 800cfd2:	0646      	lsls	r6, r0, #25
 800cfd4:	d5fb      	bpl.n	800cfce <_printf_i+0xba>
 800cfd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cfda:	2e00      	cmp	r6, #0
 800cfdc:	da03      	bge.n	800cfe6 <_printf_i+0xd2>
 800cfde:	232d      	movs	r3, #45	; 0x2d
 800cfe0:	4276      	negs	r6, r6
 800cfe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe6:	485a      	ldr	r0, [pc, #360]	; (800d150 <_printf_i+0x23c>)
 800cfe8:	230a      	movs	r3, #10
 800cfea:	e012      	b.n	800d012 <_printf_i+0xfe>
 800cfec:	682b      	ldr	r3, [r5, #0]
 800cfee:	6820      	ldr	r0, [r4, #0]
 800cff0:	1d19      	adds	r1, r3, #4
 800cff2:	6029      	str	r1, [r5, #0]
 800cff4:	0605      	lsls	r5, r0, #24
 800cff6:	d501      	bpl.n	800cffc <_printf_i+0xe8>
 800cff8:	681e      	ldr	r6, [r3, #0]
 800cffa:	e002      	b.n	800d002 <_printf_i+0xee>
 800cffc:	0641      	lsls	r1, r0, #25
 800cffe:	d5fb      	bpl.n	800cff8 <_printf_i+0xe4>
 800d000:	881e      	ldrh	r6, [r3, #0]
 800d002:	4853      	ldr	r0, [pc, #332]	; (800d150 <_printf_i+0x23c>)
 800d004:	2f6f      	cmp	r7, #111	; 0x6f
 800d006:	bf0c      	ite	eq
 800d008:	2308      	moveq	r3, #8
 800d00a:	230a      	movne	r3, #10
 800d00c:	2100      	movs	r1, #0
 800d00e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d012:	6865      	ldr	r5, [r4, #4]
 800d014:	60a5      	str	r5, [r4, #8]
 800d016:	2d00      	cmp	r5, #0
 800d018:	bfa2      	ittt	ge
 800d01a:	6821      	ldrge	r1, [r4, #0]
 800d01c:	f021 0104 	bicge.w	r1, r1, #4
 800d020:	6021      	strge	r1, [r4, #0]
 800d022:	b90e      	cbnz	r6, 800d028 <_printf_i+0x114>
 800d024:	2d00      	cmp	r5, #0
 800d026:	d04b      	beq.n	800d0c0 <_printf_i+0x1ac>
 800d028:	4615      	mov	r5, r2
 800d02a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d02e:	fb03 6711 	mls	r7, r3, r1, r6
 800d032:	5dc7      	ldrb	r7, [r0, r7]
 800d034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d038:	4637      	mov	r7, r6
 800d03a:	42bb      	cmp	r3, r7
 800d03c:	460e      	mov	r6, r1
 800d03e:	d9f4      	bls.n	800d02a <_printf_i+0x116>
 800d040:	2b08      	cmp	r3, #8
 800d042:	d10b      	bne.n	800d05c <_printf_i+0x148>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	07de      	lsls	r6, r3, #31
 800d048:	d508      	bpl.n	800d05c <_printf_i+0x148>
 800d04a:	6923      	ldr	r3, [r4, #16]
 800d04c:	6861      	ldr	r1, [r4, #4]
 800d04e:	4299      	cmp	r1, r3
 800d050:	bfde      	ittt	le
 800d052:	2330      	movle	r3, #48	; 0x30
 800d054:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d05c:	1b52      	subs	r2, r2, r5
 800d05e:	6122      	str	r2, [r4, #16]
 800d060:	f8cd a000 	str.w	sl, [sp]
 800d064:	464b      	mov	r3, r9
 800d066:	aa03      	add	r2, sp, #12
 800d068:	4621      	mov	r1, r4
 800d06a:	4640      	mov	r0, r8
 800d06c:	f7ff fee4 	bl	800ce38 <_printf_common>
 800d070:	3001      	adds	r0, #1
 800d072:	d14a      	bne.n	800d10a <_printf_i+0x1f6>
 800d074:	f04f 30ff 	mov.w	r0, #4294967295
 800d078:	b004      	add	sp, #16
 800d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	f043 0320 	orr.w	r3, r3, #32
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	4833      	ldr	r0, [pc, #204]	; (800d154 <_printf_i+0x240>)
 800d088:	2778      	movs	r7, #120	; 0x78
 800d08a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	6829      	ldr	r1, [r5, #0]
 800d092:	061f      	lsls	r7, r3, #24
 800d094:	f851 6b04 	ldr.w	r6, [r1], #4
 800d098:	d402      	bmi.n	800d0a0 <_printf_i+0x18c>
 800d09a:	065f      	lsls	r7, r3, #25
 800d09c:	bf48      	it	mi
 800d09e:	b2b6      	uxthmi	r6, r6
 800d0a0:	07df      	lsls	r7, r3, #31
 800d0a2:	bf48      	it	mi
 800d0a4:	f043 0320 	orrmi.w	r3, r3, #32
 800d0a8:	6029      	str	r1, [r5, #0]
 800d0aa:	bf48      	it	mi
 800d0ac:	6023      	strmi	r3, [r4, #0]
 800d0ae:	b91e      	cbnz	r6, 800d0b8 <_printf_i+0x1a4>
 800d0b0:	6823      	ldr	r3, [r4, #0]
 800d0b2:	f023 0320 	bic.w	r3, r3, #32
 800d0b6:	6023      	str	r3, [r4, #0]
 800d0b8:	2310      	movs	r3, #16
 800d0ba:	e7a7      	b.n	800d00c <_printf_i+0xf8>
 800d0bc:	4824      	ldr	r0, [pc, #144]	; (800d150 <_printf_i+0x23c>)
 800d0be:	e7e4      	b.n	800d08a <_printf_i+0x176>
 800d0c0:	4615      	mov	r5, r2
 800d0c2:	e7bd      	b.n	800d040 <_printf_i+0x12c>
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	6826      	ldr	r6, [r4, #0]
 800d0c8:	6961      	ldr	r1, [r4, #20]
 800d0ca:	1d18      	adds	r0, r3, #4
 800d0cc:	6028      	str	r0, [r5, #0]
 800d0ce:	0635      	lsls	r5, r6, #24
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	d501      	bpl.n	800d0d8 <_printf_i+0x1c4>
 800d0d4:	6019      	str	r1, [r3, #0]
 800d0d6:	e002      	b.n	800d0de <_printf_i+0x1ca>
 800d0d8:	0670      	lsls	r0, r6, #25
 800d0da:	d5fb      	bpl.n	800d0d4 <_printf_i+0x1c0>
 800d0dc:	8019      	strh	r1, [r3, #0]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	6123      	str	r3, [r4, #16]
 800d0e2:	4615      	mov	r5, r2
 800d0e4:	e7bc      	b.n	800d060 <_printf_i+0x14c>
 800d0e6:	682b      	ldr	r3, [r5, #0]
 800d0e8:	1d1a      	adds	r2, r3, #4
 800d0ea:	602a      	str	r2, [r5, #0]
 800d0ec:	681d      	ldr	r5, [r3, #0]
 800d0ee:	6862      	ldr	r2, [r4, #4]
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f7f3 f87c 	bl	80001f0 <memchr>
 800d0f8:	b108      	cbz	r0, 800d0fe <_printf_i+0x1ea>
 800d0fa:	1b40      	subs	r0, r0, r5
 800d0fc:	6060      	str	r0, [r4, #4]
 800d0fe:	6863      	ldr	r3, [r4, #4]
 800d100:	6123      	str	r3, [r4, #16]
 800d102:	2300      	movs	r3, #0
 800d104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d108:	e7aa      	b.n	800d060 <_printf_i+0x14c>
 800d10a:	6923      	ldr	r3, [r4, #16]
 800d10c:	462a      	mov	r2, r5
 800d10e:	4649      	mov	r1, r9
 800d110:	4640      	mov	r0, r8
 800d112:	47d0      	blx	sl
 800d114:	3001      	adds	r0, #1
 800d116:	d0ad      	beq.n	800d074 <_printf_i+0x160>
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	079b      	lsls	r3, r3, #30
 800d11c:	d413      	bmi.n	800d146 <_printf_i+0x232>
 800d11e:	68e0      	ldr	r0, [r4, #12]
 800d120:	9b03      	ldr	r3, [sp, #12]
 800d122:	4298      	cmp	r0, r3
 800d124:	bfb8      	it	lt
 800d126:	4618      	movlt	r0, r3
 800d128:	e7a6      	b.n	800d078 <_printf_i+0x164>
 800d12a:	2301      	movs	r3, #1
 800d12c:	4632      	mov	r2, r6
 800d12e:	4649      	mov	r1, r9
 800d130:	4640      	mov	r0, r8
 800d132:	47d0      	blx	sl
 800d134:	3001      	adds	r0, #1
 800d136:	d09d      	beq.n	800d074 <_printf_i+0x160>
 800d138:	3501      	adds	r5, #1
 800d13a:	68e3      	ldr	r3, [r4, #12]
 800d13c:	9903      	ldr	r1, [sp, #12]
 800d13e:	1a5b      	subs	r3, r3, r1
 800d140:	42ab      	cmp	r3, r5
 800d142:	dcf2      	bgt.n	800d12a <_printf_i+0x216>
 800d144:	e7eb      	b.n	800d11e <_printf_i+0x20a>
 800d146:	2500      	movs	r5, #0
 800d148:	f104 0619 	add.w	r6, r4, #25
 800d14c:	e7f5      	b.n	800d13a <_printf_i+0x226>
 800d14e:	bf00      	nop
 800d150:	0800d2f5 	.word	0x0800d2f5
 800d154:	0800d306 	.word	0x0800d306

0800d158 <memmove>:
 800d158:	4288      	cmp	r0, r1
 800d15a:	b510      	push	{r4, lr}
 800d15c:	eb01 0402 	add.w	r4, r1, r2
 800d160:	d902      	bls.n	800d168 <memmove+0x10>
 800d162:	4284      	cmp	r4, r0
 800d164:	4623      	mov	r3, r4
 800d166:	d807      	bhi.n	800d178 <memmove+0x20>
 800d168:	1e43      	subs	r3, r0, #1
 800d16a:	42a1      	cmp	r1, r4
 800d16c:	d008      	beq.n	800d180 <memmove+0x28>
 800d16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d172:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d176:	e7f8      	b.n	800d16a <memmove+0x12>
 800d178:	4402      	add	r2, r0
 800d17a:	4601      	mov	r1, r0
 800d17c:	428a      	cmp	r2, r1
 800d17e:	d100      	bne.n	800d182 <memmove+0x2a>
 800d180:	bd10      	pop	{r4, pc}
 800d182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d18a:	e7f7      	b.n	800d17c <memmove+0x24>

0800d18c <_sbrk_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d06      	ldr	r5, [pc, #24]	; (800d1a8 <_sbrk_r+0x1c>)
 800d190:	2300      	movs	r3, #0
 800d192:	4604      	mov	r4, r0
 800d194:	4608      	mov	r0, r1
 800d196:	602b      	str	r3, [r5, #0]
 800d198:	f7fc ff82 	bl	800a0a0 <_sbrk>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_sbrk_r+0x1a>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_sbrk_r+0x1a>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	200017cc 	.word	0x200017cc

0800d1ac <memcpy>:
 800d1ac:	440a      	add	r2, r1
 800d1ae:	4291      	cmp	r1, r2
 800d1b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1b4:	d100      	bne.n	800d1b8 <memcpy+0xc>
 800d1b6:	4770      	bx	lr
 800d1b8:	b510      	push	{r4, lr}
 800d1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1c2:	4291      	cmp	r1, r2
 800d1c4:	d1f9      	bne.n	800d1ba <memcpy+0xe>
 800d1c6:	bd10      	pop	{r4, pc}

0800d1c8 <_realloc_r>:
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	4614      	mov	r4, r2
 800d1d0:	460e      	mov	r6, r1
 800d1d2:	b921      	cbnz	r1, 800d1de <_realloc_r+0x16>
 800d1d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d8:	4611      	mov	r1, r2
 800d1da:	f7ff bc49 	b.w	800ca70 <_malloc_r>
 800d1de:	b92a      	cbnz	r2, 800d1ec <_realloc_r+0x24>
 800d1e0:	f7ff fbdc 	bl	800c99c <_free_r>
 800d1e4:	4625      	mov	r5, r4
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ec:	f000 f81b 	bl	800d226 <_malloc_usable_size_r>
 800d1f0:	4284      	cmp	r4, r0
 800d1f2:	4607      	mov	r7, r0
 800d1f4:	d802      	bhi.n	800d1fc <_realloc_r+0x34>
 800d1f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1fa:	d812      	bhi.n	800d222 <_realloc_r+0x5a>
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	4640      	mov	r0, r8
 800d200:	f7ff fc36 	bl	800ca70 <_malloc_r>
 800d204:	4605      	mov	r5, r0
 800d206:	2800      	cmp	r0, #0
 800d208:	d0ed      	beq.n	800d1e6 <_realloc_r+0x1e>
 800d20a:	42bc      	cmp	r4, r7
 800d20c:	4622      	mov	r2, r4
 800d20e:	4631      	mov	r1, r6
 800d210:	bf28      	it	cs
 800d212:	463a      	movcs	r2, r7
 800d214:	f7ff ffca 	bl	800d1ac <memcpy>
 800d218:	4631      	mov	r1, r6
 800d21a:	4640      	mov	r0, r8
 800d21c:	f7ff fbbe 	bl	800c99c <_free_r>
 800d220:	e7e1      	b.n	800d1e6 <_realloc_r+0x1e>
 800d222:	4635      	mov	r5, r6
 800d224:	e7df      	b.n	800d1e6 <_realloc_r+0x1e>

0800d226 <_malloc_usable_size_r>:
 800d226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d22a:	1f18      	subs	r0, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfbc      	itt	lt
 800d230:	580b      	ldrlt	r3, [r1, r0]
 800d232:	18c0      	addlt	r0, r0, r3
 800d234:	4770      	bx	lr
	...

0800d238 <_init>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	bf00      	nop
 800d23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23e:	bc08      	pop	{r3}
 800d240:	469e      	mov	lr, r3
 800d242:	4770      	bx	lr

0800d244 <_fini>:
 800d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d246:	bf00      	nop
 800d248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24a:	bc08      	pop	{r3}
 800d24c:	469e      	mov	lr, r3
 800d24e:	4770      	bx	lr
