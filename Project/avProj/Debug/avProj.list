
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e5c  08008e5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008e5c  08008e5c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e5c  08008e5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00002914  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002988  20002988  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b629  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000378b  00000000  00000000  0003b6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015a0  00000000  00000000  000405f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002403f  00000000  00000000  00041b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023627  00000000  00000000  00065bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d79bf  00000000  00000000  000891f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160bb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064c0  00000000  00000000  00160c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008dd0 	.word	0x08008dd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008dd0 	.word	0x08008dd0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Access_InitDone_b = TRUE;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <Access_Init+0x14>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000090 	.word	0x20000090

08000a84 <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Access_InitDone_b)
	{

	}
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Brakes_InitDone_b = TRUE;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <Brakes_Init+0x14>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000091 	.word	0x20000091

08000aa8 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Brakes_InitDone_b)
	{

	}
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Engine_InitDone_b = TRUE;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <Engine_Init+0x14>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000092 	.word	0x20000092

08000acc <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Engine_InitDone_b)
	{

	}
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(LED_Pulse_u16 >= LED_FADE_MAX_PULSE)
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <LED_UpdatePulseDirection+0x2c>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000ae4:	d302      	bcc.n	8000aec <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <LED_UpdatePulseDirection+0x30>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(LED_Pulse_u16 <= LED_FADE_MIN_PULSE)
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <LED_UpdatePulseDirection+0x2c>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af4:	d802      	bhi.n	8000afc <LED_UpdatePulseDirection+0x24>
	{
		/* Switch pulse direction to upward */
		LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP;
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <LED_UpdatePulseDirection+0x30>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
	}
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000096 	.word	0x20000096
 8000b08:	20000098 	.word	0x20000098

08000b0c <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP == LED_Pulse_Direction_u8)
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <LED_UpdatePulseWidth+0x48>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10c      	bne.n	8000b32 <LED_UpdatePulseWidth+0x26>
	{
		if(LED_Pulse_u16 <= LED_FADE_MAX_PULSE)
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <LED_UpdatePulseWidth+0x4c>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000b20:	d813      	bhi.n	8000b4a <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			LED_Pulse_u16 = LED_Pulse_u16+LED_FADE_PULSE_STEP;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <LED_UpdatePulseWidth+0x4c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <LED_UpdatePulseWidth+0x4c>)
 8000b2e:	801a      	strh	r2, [r3, #0]
 8000b30:	e00b      	b.n	8000b4a <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(LED_Pulse_u16 >= LED_FADE_PULSE_STEP)
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <LED_UpdatePulseWidth+0x4c>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000b3a:	d306      	bcc.n	8000b4a <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			LED_Pulse_u16 = LED_Pulse_u16-LED_FADE_PULSE_STEP;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <LED_UpdatePulseWidth+0x4c>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <LED_UpdatePulseWidth+0x4c>)
 8000b48:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 8000b4a:	f7ff ffc5 	bl	8000ad8 <LED_UpdatePulseDirection>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000098 	.word	0x20000098
 8000b58:	20000096 	.word	0x20000096

08000b5c <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(0u);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f007 fc89 	bl	8008478 <Rte_Cdd_Servo_RawMove>
	/* Set initialization flag to done */
	LED_InitDone_b = TRUE;
 8000b66:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <LED_Init+0x14>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000093 	.word	0x20000093

08000b74 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == LED_InitDone_b)
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <LED_MainFunction+0x2c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d10d      	bne.n	8000b9c <LED_MainFunction+0x28>
	{
		/* Read the blue button state */
		Rte_Read_Button_State(&LED_ButtonState_b);
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <LED_MainFunction+0x30>)
 8000b82:	f007 fc59 	bl	8008438 <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(TRUE == (boolean)LED_ButtonState_b)
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LED_MainFunction+0x30>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d106      	bne.n	8000b9c <LED_MainFunction+0x28>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8000b8e:	f7ff ffbd 	bl	8000b0c <LED_UpdatePulseWidth>
			/* Call the servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(LED_Pulse_u16);
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <LED_MainFunction+0x34>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f007 fc6e 	bl	8008478 <Rte_Cdd_Servo_RawMove>
		else
		{
			/* Stop fading */
		}
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000093 	.word	0x20000093
 8000ba4:	20000094 	.word	0x20000094
 8000ba8:	20000096 	.word	0x20000096

08000bac <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	Steering_InitDone_b = TRUE;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <Steering_Init+0x14>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000099 	.word	0x20000099

08000bc4 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == Steering_InitDone_b)
	{

	}
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <Cdd_Servo_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Init(void)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b0b2      	sub	sp, #200	; 0xc8
 8000bd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000c00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32 ARR_Value = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam.SERVO_GPIO == GPIOA)
 8000c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c28:	d10c      	bne.n	8000c44 <Cdd_Servo_Init+0x74>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b70      	ldr	r3, [pc, #448]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a6f      	ldr	r2, [pc, #444]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b6d      	ldr	r3, [pc, #436]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	e046      	b.n	8000cd2 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOB)
 8000c44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c48:	4b69      	ldr	r3, [pc, #420]	; (8000df0 <Cdd_Servo_Init+0x220>)
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d10c      	bne.n	8000c68 <Cdd_Servo_Init+0x98>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b67      	ldr	r3, [pc, #412]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a66      	ldr	r2, [pc, #408]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b64      	ldr	r3, [pc, #400]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	e034      	b.n	8000cd2 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOC)
 8000c68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c6c:	4b61      	ldr	r3, [pc, #388]	; (8000df4 <Cdd_Servo_Init+0x224>)
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d10c      	bne.n	8000c8c <Cdd_Servo_Init+0xbc>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b5e      	ldr	r3, [pc, #376]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a5d      	ldr	r2, [pc, #372]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b5b      	ldr	r3, [pc, #364]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	e022      	b.n	8000cd2 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOD)
 8000c8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c90:	4b59      	ldr	r3, [pc, #356]	; (8000df8 <Cdd_Servo_Init+0x228>)
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10c      	bne.n	8000cb0 <Cdd_Servo_Init+0xe0>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b55      	ldr	r3, [pc, #340]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a54      	ldr	r2, [pc, #336]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b52      	ldr	r3, [pc, #328]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	e010      	b.n	8000cd2 <Cdd_Servo_Init+0x102>
    }
    else if(SERVO_CfgParam.SERVO_GPIO == GPIOE)
 8000cb0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cb4:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <Cdd_Servo_Init+0x22c>)
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d10b      	bne.n	8000cd2 <Cdd_Servo_Init+0x102>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cba:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a4b      	ldr	r2, [pc, #300]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b49      	ldr	r3, [pc, #292]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam.SERVO_PIN;
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(SERVO_CfgParam.SERVO_GPIO, &GPIO_InitStruct);
 8000cea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	f001 fc8d 	bl	8002614 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32) (SERVO_CfgParam.TIM_CLK / 3276800.0);
 8000cfa:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <Cdd_Servo_Init+0x230>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc09 	bl	8000514 <__aeabi_ui2d>
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <Cdd_Servo_Init+0x234>)
 8000d08:	f7ff fda8 	bl	800085c <__aeabi_ddiv>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fe8a 	bl	8000a2c <__aeabi_d2uiz>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32) ((SERVO_CfgParam.TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000d1e:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <Cdd_Servo_Init+0x230>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fbf7 	bl	8000514 <__aeabi_ui2d>
 8000d26:	4604      	mov	r4, r0
 8000d28:	460d      	mov	r5, r1
 8000d2a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000d2e:	f7ff fbf1 	bl	8000514 <__aeabi_ui2d>
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <Cdd_Servo_Init+0x238>)
 8000d38:	f7ff fab0 	bl	800029c <__adddf3>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <Cdd_Servo_Init+0x23c>)
 8000d4a:	f7ff fc5d 	bl	8000608 <__aeabi_dmul>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4620      	mov	r0, r4
 8000d54:	4629      	mov	r1, r5
 8000d56:	f7ff fd81 	bl	800085c <__aeabi_ddiv>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <Cdd_Servo_Init+0x238>)
 8000d68:	f7ff fa96 	bl	8000298 <__aeabi_dsub>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4610      	mov	r0, r2
 8000d72:	4619      	mov	r1, r3
 8000d74:	f7ff fe5a 	bl	8000a2c <__aeabi_d2uiz>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam.TIM_Instance == TIM1)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <Cdd_Servo_Init+0x240>)
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d10c      	bne.n	8000da2 <Cdd_Servo_Init+0x1d2>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	e04b      	b.n	8000e3a <Cdd_Servo_Init+0x26a>
	}
	else if(SERVO_CfgParam.TIM_Instance == TIM2)
 8000da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000daa:	d10c      	bne.n	8000dc6 <Cdd_Servo_Init+0x1f6>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	61d3      	str	r3, [r2, #28]
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	e039      	b.n	8000e3a <Cdd_Servo_Init+0x26a>
	}
	else if(SERVO_CfgParam.TIM_Instance == TIM3)
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <Cdd_Servo_Init+0x244>)
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d123      	bne.n	8000e18 <Cdd_Servo_Init+0x248>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a05      	ldr	r2, [pc, #20]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	61d3      	str	r3, [r2, #28]
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <Cdd_Servo_Init+0x21c>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	e027      	b.n	8000e3a <Cdd_Servo_Init+0x26a>
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000800 	.word	0x48000800
 8000df8:	48000c00 	.word	0x48000c00
 8000dfc:	48001000 	.word	0x48001000
 8000e00:	044aa200 	.word	0x044aa200
 8000e04:	41490000 	.word	0x41490000
 8000e08:	3ff00000 	.word	0x3ff00000
 8000e0c:	40490000 	.word	0x40490000
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam.TIM_Instance == TIM4)
 8000e18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <Cdd_Servo_Init+0x388>)
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d10b      	bne.n	8000e3a <Cdd_Servo_Init+0x26a>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000e22:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <Cdd_Servo_Init+0x38c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <Cdd_Servo_Init+0x38c>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <Cdd_Servo_Init+0x38c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
	}

	htim.Instance = SERVO_CfgParam.TIM_Instance;
 8000e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Prescaler = PSC_Value;
 8000e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Period = ARR_Value;
 8000e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_Base_Init(&htim);
 8000e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 ff36 	bl	8002cce <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000e6a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fb91 	bl	800359c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 ffec 	bl	8002e5c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000e90:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 f8c2 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea0:	2360      	movs	r3, #96	; 0x60
 8000ea2:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam.PWM_TIM_CH);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fa59 	bl	8003374 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info.Period_Min = (uint16) (ARR_Value * (SERVO_CfgParam.MinPulse/20.0));
 8000ec2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000ec6:	f7ff fb25 	bl	8000514 <__aeabi_ui2d>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	460d      	mov	r5, r1
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fb40 	bl	8000558 <__aeabi_f2d>
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <Cdd_Servo_Init+0x390>)
 8000ede:	f7ff fcbd 	bl	800085c <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	4629      	mov	r1, r5
 8000eea:	f7ff fb8d 	bl	8000608 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fd99 	bl	8000a2c <__aeabi_d2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <Cdd_Servo_Init+0x394>)
 8000f00:	801a      	strh	r2, [r3, #0]
	gs_SERVO_info.Period_Max = (uint16) (ARR_Value * (SERVO_CfgParam.MaxPulse/20.0));
 8000f02:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000f06:	f7ff fb05 	bl	8000514 <__aeabi_ui2d>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <Cdd_Servo_Init+0x398>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fb21 	bl	8000558 <__aeabi_f2d>
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <Cdd_Servo_Init+0x390>)
 8000f1c:	f7ff fc9e 	bl	800085c <__aeabi_ddiv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4620      	mov	r0, r4
 8000f26:	4629      	mov	r1, r5
 8000f28:	f7ff fb6e 	bl	8000608 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fd7a 	bl	8000a2c <__aeabi_d2uiz>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <Cdd_Servo_Init+0x394>)
 8000f3e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam.PWM_TIM_CH);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 ffe7 	bl	8002f1c <HAL_TIM_PWM_Start>
}
 8000f4e:	bf00      	nop
 8000f50:	37c8      	adds	r7, #200	; 0xc8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bdb0      	pop	{r4, r5, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40340000 	.word	0x40340000
 8000f64:	2000009c 	.word	0x2000009c
 8000f68:	41a00000 	.word	0x41a00000

08000f6c <Cdd_Servo_RawMove>:
	*(SERVO_CfgParam.TIM_CCRx) = Pulse;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= gs_SERVO_info.Period_Max && Pulse >= gs_SERVO_info.Period_Min)
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <Cdd_Servo_RawMove+0x30>)
 8000f78:	885b      	ldrh	r3, [r3, #2]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d807      	bhi.n	8000f90 <Cdd_Servo_RawMove+0x24>
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <Cdd_Servo_RawMove+0x30>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	88fa      	ldrh	r2, [r7, #6]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d302      	bcc.n	8000f90 <Cdd_Servo_RawMove+0x24>
	{
		*(SERVO_CfgParam.TIM_CCRx) = Pulse;
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <Cdd_Servo_RawMove+0x34>)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	6013      	str	r3, [r2, #0]
	}
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000009c 	.word	0x2000009c
 8000fa0:	40000034 	.word	0x40000034

08000fa4 <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(Angle--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09a      	sub	sp, #104	; 0x68
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e1e3      	b.n	80013bc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	d176      	bne.n	80010f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	d152      	bne.n	80010b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f003 fc21 	bl	8004870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d13b      	bne.n	80010b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 fa83 	bl	8002548 <ADC_Disable>
 8001042:	4603      	mov	r3, r0
 8001044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	2b00      	cmp	r3, #0
 8001052:	d12f      	bne.n	80010b4 <HAL_ADC_Init+0xe0>
 8001054:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001058:	2b00      	cmp	r3, #0
 800105a:	d12b      	bne.n	80010b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001064:	f023 0302 	bic.w	r3, r3, #2
 8001068:	f043 0202 	orr.w	r2, r3, #2
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800107e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800108e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001090:	4b92      	ldr	r3, [pc, #584]	; (80012dc <HAL_ADC_Init+0x308>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a92      	ldr	r2, [pc, #584]	; (80012e0 <HAL_ADC_Init+0x30c>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	0c9a      	lsrs	r2, r3, #18
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a6:	e002      	b.n	80010ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f9      	bne.n	80010a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010d0:	d110      	bne.n	80010f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f023 0312 	bic.w	r3, r3, #18
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f040 8150 	bne.w	80013a2 <HAL_ADC_Init+0x3ce>
 8001102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 814b 	bne.w	80013a2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 8143 	bne.w	80013a2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001124:	f043 0202 	orr.w	r2, r3, #2
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001134:	d004      	beq.n	8001140 <HAL_ADC_Init+0x16c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a6a      	ldr	r2, [pc, #424]	; (80012e4 <HAL_ADC_Init+0x310>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_ADC_Init+0x170>
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <HAL_ADC_Init+0x314>)
 8001142:	e000      	b.n	8001146 <HAL_ADC_Init+0x172>
 8001144:	4b69      	ldr	r3, [pc, #420]	; (80012ec <HAL_ADC_Init+0x318>)
 8001146:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001150:	d102      	bne.n	8001158 <HAL_ADC_Init+0x184>
 8001152:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <HAL_ADC_Init+0x310>)
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	e01a      	b.n	800118e <HAL_ADC_Init+0x1ba>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a61      	ldr	r2, [pc, #388]	; (80012e4 <HAL_ADC_Init+0x310>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d103      	bne.n	800116a <HAL_ADC_Init+0x196>
 8001162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e011      	b.n	800118e <HAL_ADC_Init+0x1ba>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a60      	ldr	r2, [pc, #384]	; (80012f0 <HAL_ADC_Init+0x31c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d102      	bne.n	800117a <HAL_ADC_Init+0x1a6>
 8001174:	4b5f      	ldr	r3, [pc, #380]	; (80012f4 <HAL_ADC_Init+0x320>)
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e009      	b.n	800118e <HAL_ADC_Init+0x1ba>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <HAL_ADC_Init+0x320>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d102      	bne.n	800118a <HAL_ADC_Init+0x1b6>
 8001184:	4b5a      	ldr	r3, [pc, #360]	; (80012f0 <HAL_ADC_Init+0x31c>)
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e001      	b.n	800118e <HAL_ADC_Init+0x1ba>
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_ADC_Init+0x1da>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_Init+0x1da>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_ADC_Init+0x1dc>
 80011ae:	2300      	movs	r3, #0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d11c      	bne.n	80011ee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d010      	beq.n	80011dc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d107      	bne.n	80011d6 <HAL_ADC_Init+0x202>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_Init+0x202>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_ADC_Init+0x204>
 80011d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d108      	bne.n	80011ee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7e5b      	ldrb	r3, [r3, #25]
 80011f2:	035b      	lsls	r3, r3, #13
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011f8:	2a01      	cmp	r2, #1
 80011fa:	d002      	beq.n	8001202 <HAL_ADC_Init+0x22e>
 80011fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001200:	e000      	b.n	8001204 <HAL_ADC_Init+0x230>
 8001202:	2200      	movs	r2, #0
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4313      	orrs	r3, r2
 8001212:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001214:	4313      	orrs	r3, r2
 8001216:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d11b      	bne.n	800125a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7e5b      	ldrb	r3, [r3, #25]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	3b01      	subs	r3, #1
 8001230:	045a      	lsls	r2, r3, #17
 8001232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001234:	4313      	orrs	r3, r2
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	663b      	str	r3, [r7, #96]	; 0x60
 800123c:	e00d      	b.n	800125a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001246:	f043 0220 	orr.w	r2, r3, #32
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f043 0201 	orr.w	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125e:	2b01      	cmp	r3, #1
 8001260:	d054      	beq.n	800130c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <HAL_ADC_Init+0x31c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d004      	beq.n	8001276 <HAL_ADC_Init+0x2a2>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <HAL_ADC_Init+0x320>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d140      	bne.n	80012f8 <HAL_ADC_Init+0x324>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800127e:	d02a      	beq.n	80012d6 <HAL_ADC_Init+0x302>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	d022      	beq.n	80012d0 <HAL_ADC_Init+0x2fc>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001292:	d01a      	beq.n	80012ca <HAL_ADC_Init+0x2f6>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800129c:	d012      	beq.n	80012c4 <HAL_ADC_Init+0x2f0>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80012a6:	d00a      	beq.n	80012be <HAL_ADC_Init+0x2ea>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80012b0:	d002      	beq.n	80012b8 <HAL_ADC_Init+0x2e4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	e023      	b.n	8001300 <HAL_ADC_Init+0x32c>
 80012b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012bc:	e020      	b.n	8001300 <HAL_ADC_Init+0x32c>
 80012be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012c2:	e01d      	b.n	8001300 <HAL_ADC_Init+0x32c>
 80012c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80012c8:	e01a      	b.n	8001300 <HAL_ADC_Init+0x32c>
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	e017      	b.n	8001300 <HAL_ADC_Init+0x32c>
 80012d0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012d4:	e014      	b.n	8001300 <HAL_ADC_Init+0x32c>
 80012d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012da:	e011      	b.n	8001300 <HAL_ADC_Init+0x32c>
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	50000100 	.word	0x50000100
 80012e8:	50000300 	.word	0x50000300
 80012ec:	50000700 	.word	0x50000700
 80012f0:	50000400 	.word	0x50000400
 80012f4:	50000500 	.word	0x50000500
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001304:	4313      	orrs	r3, r2
 8001306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001308:	4313      	orrs	r3, r2
 800130a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b00      	cmp	r3, #0
 8001318:	d114      	bne.n	8001344 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001328:	f023 0302 	bic.w	r3, r3, #2
 800132c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e1b      	ldrb	r3, [r3, #24]
 8001332:	039a      	lsls	r2, r3, #14
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4313      	orrs	r3, r2
 800133e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001340:	4313      	orrs	r3, r2
 8001342:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_ADC_Init+0x3f0>)
 800134c:	4013      	ands	r3, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001354:	430b      	orrs	r3, r1
 8001356:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10c      	bne.n	800137a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f023 010f 	bic.w	r1, r3, #15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
 8001378:	e007      	b.n	800138a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 020f 	bic.w	r2, r2, #15
 8001388:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f023 0303 	bic.w	r3, r3, #3
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	641a      	str	r2, [r3, #64]	; 0x40
 80013a0:	e00a      	b.n	80013b8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f023 0312 	bic.w	r3, r3, #18
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3768      	adds	r7, #104	; 0x68
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	fff0c007 	.word	0xfff0c007

080013c8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8123 	bne.w	800162a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_ADC_Start_IT+0x2a>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e11e      	b.n	8001630 <HAL_ADC_Start_IT+0x268>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 f840 	bl	8002480 <ADC_Enable>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 810a 	bne.w	8001620 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001428:	d004      	beq.n	8001434 <HAL_ADC_Start_IT+0x6c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a82      	ldr	r2, [pc, #520]	; (8001638 <HAL_ADC_Start_IT+0x270>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d106      	bne.n	8001442 <HAL_ADC_Start_IT+0x7a>
 8001434:	4b81      	ldr	r3, [pc, #516]	; (800163c <HAL_ADC_Start_IT+0x274>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	2b00      	cmp	r3, #0
 800143e:	d010      	beq.n	8001462 <HAL_ADC_Start_IT+0x9a>
 8001440:	e005      	b.n	800144e <HAL_ADC_Start_IT+0x86>
 8001442:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <HAL_ADC_Start_IT+0x278>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <HAL_ADC_Start_IT+0x9a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001456:	d004      	beq.n	8001462 <HAL_ADC_Start_IT+0x9a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a79      	ldr	r2, [pc, #484]	; (8001644 <HAL_ADC_Start_IT+0x27c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d115      	bne.n	800148e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d036      	beq.n	80014ea <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800148c:	e02d      	b.n	80014ea <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Start_IT+0xe6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a63      	ldr	r2, [pc, #396]	; (8001638 <HAL_ADC_Start_IT+0x270>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10a      	bne.n	80014c4 <HAL_ADC_Start_IT+0xfc>
 80014ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e008      	b.n	80014d6 <HAL_ADC_Start_IT+0x10e>
 80014c4:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_ADC_Start_IT+0x27c>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf14      	ite	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	2300      	moveq	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f6:	d106      	bne.n	8001506 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	f023 0206 	bic.w	r2, r3, #6
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	645a      	str	r2, [r3, #68]	; 0x44
 8001504:	e002      	b.n	800150c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	221c      	movs	r2, #28
 800151a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	2b08      	cmp	r3, #8
 8001522:	d110      	bne.n	8001546 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0204 	bic.w	r2, r2, #4
 8001532:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	605a      	str	r2, [r3, #4]
          break;
 8001544:	e008      	b.n	8001558 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 020c 	orr.w	r2, r2, #12
 8001554:	605a      	str	r2, [r3, #4]
          break;
 8001556:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0210 	bic.w	r2, r2, #16
 800156e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001578:	d004      	beq.n	8001584 <HAL_ADC_Start_IT+0x1bc>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <HAL_ADC_Start_IT+0x270>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d106      	bne.n	8001592 <HAL_ADC_Start_IT+0x1ca>
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_ADC_Start_IT+0x274>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b00      	cmp	r3, #0
 800158e:	d03e      	beq.n	800160e <HAL_ADC_Start_IT+0x246>
 8001590:	e005      	b.n	800159e <HAL_ADC_Start_IT+0x1d6>
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_ADC_Start_IT+0x278>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2b00      	cmp	r3, #0
 800159c:	d037      	beq.n	800160e <HAL_ADC_Start_IT+0x246>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_Start_IT+0x1ea>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_ADC_Start_IT+0x270>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d106      	bne.n	80015c0 <HAL_ADC_Start_IT+0x1f8>
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_ADC_Start_IT+0x274>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b05      	cmp	r3, #5
 80015bc:	d027      	beq.n	800160e <HAL_ADC_Start_IT+0x246>
 80015be:	e005      	b.n	80015cc <HAL_ADC_Start_IT+0x204>
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_ADC_Start_IT+0x278>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d020      	beq.n	800160e <HAL_ADC_Start_IT+0x246>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_Start_IT+0x218>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_ADC_Start_IT+0x270>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d106      	bne.n	80015ee <HAL_ADC_Start_IT+0x226>
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_ADC_Start_IT+0x274>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d010      	beq.n	800160e <HAL_ADC_Start_IT+0x246>
 80015ec:	e005      	b.n	80015fa <HAL_ADC_Start_IT+0x232>
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_ADC_Start_IT+0x278>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	d009      	beq.n	800160e <HAL_ADC_Start_IT+0x246>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001602:	d004      	beq.n	800160e <HAL_ADC_Start_IT+0x246>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_ADC_Start_IT+0x27c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10f      	bne.n	800162e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0204 	orr.w	r2, r2, #4
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	e006      	b.n	800162e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001628:	e001      	b.n	800162e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800162a:	2302      	movs	r3, #2
 800162c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	50000100 	.word	0x50000100
 800163c:	50000300 	.word	0x50000300
 8001640:	50000700 	.word	0x50000700
 8001644:	50000400 	.word	0x50000400

08001648 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b04      	cmp	r3, #4
 8001680:	d106      	bne.n	8001690 <HAL_ADC_IRQHandler+0x30>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b04      	cmp	r3, #4
 800168e:	d00f      	beq.n	80016b0 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800169a:	2b08      	cmp	r3, #8
 800169c:	f040 80c0 	bne.w	8001820 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	f040 80b8 	bne.w	8001820 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d0:	d004      	beq.n	80016dc <HAL_ADC_IRQHandler+0x7c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a8e      	ldr	r2, [pc, #568]	; (8001910 <HAL_ADC_IRQHandler+0x2b0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d106      	bne.n	80016ea <HAL_ADC_IRQHandler+0x8a>
 80016dc:	4b8d      	ldr	r3, [pc, #564]	; (8001914 <HAL_ADC_IRQHandler+0x2b4>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03e      	beq.n	8001766 <HAL_ADC_IRQHandler+0x106>
 80016e8:	e005      	b.n	80016f6 <HAL_ADC_IRQHandler+0x96>
 80016ea:	4b8b      	ldr	r3, [pc, #556]	; (8001918 <HAL_ADC_IRQHandler+0x2b8>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d037      	beq.n	8001766 <HAL_ADC_IRQHandler+0x106>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fe:	d004      	beq.n	800170a <HAL_ADC_IRQHandler+0xaa>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a82      	ldr	r2, [pc, #520]	; (8001910 <HAL_ADC_IRQHandler+0x2b0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d106      	bne.n	8001718 <HAL_ADC_IRQHandler+0xb8>
 800170a:	4b82      	ldr	r3, [pc, #520]	; (8001914 <HAL_ADC_IRQHandler+0x2b4>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	2b05      	cmp	r3, #5
 8001714:	d027      	beq.n	8001766 <HAL_ADC_IRQHandler+0x106>
 8001716:	e005      	b.n	8001724 <HAL_ADC_IRQHandler+0xc4>
 8001718:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_ADC_IRQHandler+0x2b8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2b05      	cmp	r3, #5
 8001722:	d020      	beq.n	8001766 <HAL_ADC_IRQHandler+0x106>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172c:	d004      	beq.n	8001738 <HAL_ADC_IRQHandler+0xd8>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a77      	ldr	r2, [pc, #476]	; (8001910 <HAL_ADC_IRQHandler+0x2b0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d106      	bne.n	8001746 <HAL_ADC_IRQHandler+0xe6>
 8001738:	4b76      	ldr	r3, [pc, #472]	; (8001914 <HAL_ADC_IRQHandler+0x2b4>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2b09      	cmp	r3, #9
 8001742:	d010      	beq.n	8001766 <HAL_ADC_IRQHandler+0x106>
 8001744:	e005      	b.n	8001752 <HAL_ADC_IRQHandler+0xf2>
 8001746:	4b74      	ldr	r3, [pc, #464]	; (8001918 <HAL_ADC_IRQHandler+0x2b8>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2b09      	cmp	r3, #9
 8001750:	d009      	beq.n	8001766 <HAL_ADC_IRQHandler+0x106>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175a:	d004      	beq.n	8001766 <HAL_ADC_IRQHandler+0x106>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_ADC_IRQHandler+0x2bc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d104      	bne.n	8001770 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	e00f      	b.n	8001790 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001778:	d004      	beq.n	8001784 <HAL_ADC_IRQHandler+0x124>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a64      	ldr	r2, [pc, #400]	; (8001910 <HAL_ADC_IRQHandler+0x2b0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d102      	bne.n	800178a <HAL_ADC_IRQHandler+0x12a>
 8001784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001788:	e000      	b.n	800178c <HAL_ADC_IRQHandler+0x12c>
 800178a:	4b64      	ldr	r3, [pc, #400]	; (800191c <HAL_ADC_IRQHandler+0x2bc>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800179a:	2b00      	cmp	r3, #0
 800179c:	d139      	bne.n	8001812 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d134      	bne.n	8001812 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d12d      	bne.n	8001812 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d11a      	bne.n	80017fa <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020c 	bic.w	r2, r2, #12
 80017d2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d112      	bne.n	8001812 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40
 80017f8:	e00b      	b.n	8001812 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f043 0210 	orr.w	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f006 f964 	bl	8007ae0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	220c      	movs	r2, #12
 800181e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b20      	cmp	r3, #32
 800182c:	d106      	bne.n	800183c <HAL_ADC_IRQHandler+0x1dc>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b20      	cmp	r3, #32
 800183a:	d00f      	beq.n	800185c <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	f040 8143 	bne.w	8001ad2 <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b40      	cmp	r3, #64	; 0x40
 8001858:	f040 813b 	bne.w	8001ad2 <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001870:	d004      	beq.n	800187c <HAL_ADC_IRQHandler+0x21c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a26      	ldr	r2, [pc, #152]	; (8001910 <HAL_ADC_IRQHandler+0x2b0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d106      	bne.n	800188a <HAL_ADC_IRQHandler+0x22a>
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_ADC_IRQHandler+0x2b4>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	2b00      	cmp	r3, #0
 8001886:	d03e      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2a6>
 8001888:	e005      	b.n	8001896 <HAL_ADC_IRQHandler+0x236>
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_ADC_IRQHandler+0x2b8>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2b00      	cmp	r3, #0
 8001894:	d037      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2a6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189e:	d004      	beq.n	80018aa <HAL_ADC_IRQHandler+0x24a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_ADC_IRQHandler+0x2b0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d106      	bne.n	80018b8 <HAL_ADC_IRQHandler+0x258>
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_ADC_IRQHandler+0x2b4>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d027      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2a6>
 80018b6:	e005      	b.n	80018c4 <HAL_ADC_IRQHandler+0x264>
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_ADC_IRQHandler+0x2b8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d020      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2a6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018cc:	d004      	beq.n	80018d8 <HAL_ADC_IRQHandler+0x278>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_ADC_IRQHandler+0x2b0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d106      	bne.n	80018e6 <HAL_ADC_IRQHandler+0x286>
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_ADC_IRQHandler+0x2b4>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	d010      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2a6>
 80018e4:	e005      	b.n	80018f2 <HAL_ADC_IRQHandler+0x292>
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_ADC_IRQHandler+0x2b8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	d009      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2a6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fa:	d004      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2a6>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_ADC_IRQHandler+0x2bc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10c      	bne.n	8001920 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e017      	b.n	8001940 <HAL_ADC_IRQHandler+0x2e0>
 8001910:	50000100 	.word	0x50000100
 8001914:	50000300 	.word	0x50000300
 8001918:	50000700 	.word	0x50000700
 800191c:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001928:	d004      	beq.n	8001934 <HAL_ADC_IRQHandler+0x2d4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5b      	ldr	r2, [pc, #364]	; (8001a9c <HAL_ADC_IRQHandler+0x43c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d102      	bne.n	800193a <HAL_ADC_IRQHandler+0x2da>
 8001934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001938:	e000      	b.n	800193c <HAL_ADC_IRQHandler+0x2dc>
 800193a:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_ADC_IRQHandler+0x440>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80ba 	bne.w	8001ac4 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 80ad 	bne.w	8001ac4 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 80a7 	bne.w	8001ac4 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001980:	2b40      	cmp	r3, #64	; 0x40
 8001982:	f040 809f 	bne.w	8001ac4 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800198e:	d004      	beq.n	800199a <HAL_ADC_IRQHandler+0x33a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a41      	ldr	r2, [pc, #260]	; (8001a9c <HAL_ADC_IRQHandler+0x43c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_IRQHandler+0x348>
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_ADC_IRQHandler+0x444>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03e      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x3c4>
 80019a6:	e005      	b.n	80019b4 <HAL_ADC_IRQHandler+0x354>
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_ADC_IRQHandler+0x448>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d037      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x3c4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019bc:	d004      	beq.n	80019c8 <HAL_ADC_IRQHandler+0x368>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <HAL_ADC_IRQHandler+0x43c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d106      	bne.n	80019d6 <HAL_ADC_IRQHandler+0x376>
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_ADC_IRQHandler+0x444>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d027      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x3c4>
 80019d4:	e005      	b.n	80019e2 <HAL_ADC_IRQHandler+0x382>
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_ADC_IRQHandler+0x448>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d020      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x3c4>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ea:	d004      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x396>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_ADC_IRQHandler+0x43c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d106      	bne.n	8001a04 <HAL_ADC_IRQHandler+0x3a4>
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_ADC_IRQHandler+0x444>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2b07      	cmp	r3, #7
 8001a00:	d010      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x3c4>
 8001a02:	e005      	b.n	8001a10 <HAL_ADC_IRQHandler+0x3b0>
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_ADC_IRQHandler+0x448>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	d009      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x3c4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a18:	d004      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x3c4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a20      	ldr	r2, [pc, #128]	; (8001aa0 <HAL_ADC_IRQHandler+0x440>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d104      	bne.n	8001a2e <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e00f      	b.n	8001a4e <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a36:	d004      	beq.n	8001a42 <HAL_ADC_IRQHandler+0x3e2>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_ADC_IRQHandler+0x43c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d102      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x3e8>
 8001a42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a46:	e000      	b.n	8001a4a <HAL_ADC_IRQHandler+0x3ea>
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_ADC_IRQHandler+0x440>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d135      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d122      	bne.n	8001aac <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a74:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11a      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9a:	e013      	b.n	8001ac4 <HAL_ADC_IRQHandler+0x464>
 8001a9c:	50000100 	.word	0x50000100
 8001aa0:	50000400 	.word	0x50000400
 8001aa4:	50000300 	.word	0x50000300
 8001aa8:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f8db 	bl	8001c80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2260      	movs	r2, #96	; 0x60
 8001ad0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	2b80      	cmp	r3, #128	; 0x80
 8001ade:	d113      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x4a8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	2b80      	cmp	r3, #128	; 0x80
 8001aec:	d10c      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fa58 	bl	8000fb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b16:	d115      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x4e4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b26:	d10d      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8b5 	bl	8001ca4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b42:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b52:	d115      	bne.n	8001b80 <HAL_ADC_IRQHandler+0x520>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b62:	d10d      	bne.n	8001b80 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8a0 	bl	8001cb6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d149      	bne.n	8001c22 <HAL_ADC_IRQHandler+0x5c2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d142      	bne.n	8001c22 <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d102      	bne.n	8001baa <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e025      	b.n	8001bf6 <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb2:	d004      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x55e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <HAL_ADC_IRQHandler+0x614>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x562>
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_ADC_IRQHandler+0x618>)
 8001bc0:	e000      	b.n	8001bc4 <HAL_ADC_IRQHandler+0x564>
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_ADC_IRQHandler+0x61c>)
 8001bc4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d10a      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8001be0:	2301      	movs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10e      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f043 0202 	orr.w	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff f9d4 	bl	8000fc2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d11b      	bne.n	8001c6a <HAL_ADC_IRQHandler+0x60a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c40:	d113      	bne.n	8001c6a <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f043 0208 	orr.w	r2, r3, #8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c62:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f814 	bl	8001c92 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	50000100 	.word	0x50000100
 8001c78:	50000300 	.word	0x50000300
 8001c7c:	50000700 	.word	0x50000700

08001c80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b09b      	sub	sp, #108	; 0x6c
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x22>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e2ca      	b.n	8002280 <HAL_ADC_ConfigChannel+0x5b8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 82ae 	bne.w	800225e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d81c      	bhi.n	8001d44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	231f      	movs	r3, #31
 8001d20:	4093      	lsls	r3, r2
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4019      	ands	r1, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
 8001d42:	e063      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d81e      	bhi.n	8001d8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	221f      	movs	r2, #31
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	4019      	ands	r1, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	3b1e      	subs	r3, #30
 8001d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34
 8001d88:	e040      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b0e      	cmp	r3, #14
 8001d90:	d81e      	bhi.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	3b3c      	subs	r3, #60	; 0x3c
 8001da6:	221f      	movs	r2, #31
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4019      	ands	r1, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	3b3c      	subs	r3, #60	; 0x3c
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8001dce:	e01d      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	3b5a      	subs	r3, #90	; 0x5a
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	4019      	ands	r1, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	3b5a      	subs	r3, #90	; 0x5a
 8001e00:	fa00 f203 	lsl.w	r2, r0, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 80e5 	bne.w	8001fe6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	d91c      	bls.n	8001e5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6999      	ldr	r1, [r3, #24]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	3b1e      	subs	r3, #30
 8001e36:	2207      	movs	r2, #7
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4019      	ands	r1, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6898      	ldr	r0, [r3, #8]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	619a      	str	r2, [r3, #24]
 8001e5c:	e019      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6898      	ldr	r0, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	08db      	lsrs	r3, r3, #3
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d84f      	bhi.n	8001f54 <HAL_ADC_ConfigChannel+0x28c>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_ADC_ConfigChannel+0x1f4>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001eef 	.word	0x08001eef
 8001ec4:	08001f11 	.word	0x08001f11
 8001ec8:	08001f33 	.word	0x08001f33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ed2:	4b9a      	ldr	r3, [pc, #616]	; (800213c <HAL_ADC_ConfigChannel+0x474>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	0691      	lsls	r1, r2, #26
 8001edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eec:	e07e      	b.n	8001fec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ef4:	4b91      	ldr	r3, [pc, #580]	; (800213c <HAL_ADC_ConfigChannel+0x474>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	0691      	lsls	r1, r2, #26
 8001efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f00:	430a      	orrs	r2, r1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f0e:	e06d      	b.n	8001fec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_ADC_ConfigChannel+0x474>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	0691      	lsls	r1, r2, #26
 8001f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f22:	430a      	orrs	r2, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f30:	e05c      	b.n	8001fec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f38:	4b80      	ldr	r3, [pc, #512]	; (800213c <HAL_ADC_ConfigChannel+0x474>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	0691      	lsls	r1, r2, #26
 8001f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f44:	430a      	orrs	r2, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f52:	e04b      	b.n	8001fec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d107      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	069b      	lsls	r3, r3, #26
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	069b      	lsls	r3, r3, #26
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fbe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	069b      	lsls	r3, r3, #26
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d10a      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fe2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001fe4:	e001      	b.n	8001fea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001fe6:	bf00      	nop
 8001fe8:	e000      	b.n	8001fec <HAL_ADC_ConfigChannel+0x324>
      break;
 8001fea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_ADC_ConfigChannel+0x344>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x344>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_ADC_ConfigChannel+0x346>
 800200c:	2300      	movs	r3, #0
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8130 	bne.w	8002274 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d00f      	beq.n	800203c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	400a      	ands	r2, r1
 8002036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800203a:	e049      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b09      	cmp	r3, #9
 800205c:	d91c      	bls.n	8002098 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6999      	ldr	r1, [r3, #24]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	3b1b      	subs	r3, #27
 8002070:	2207      	movs	r2, #7
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	4019      	ands	r1, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6898      	ldr	r0, [r3, #8]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	3b1b      	subs	r3, #27
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	e01b      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6959      	ldr	r1, [r3, #20]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	2207      	movs	r2, #7
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4019      	ands	r1, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6898      	ldr	r0, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	fa00 f203 	lsl.w	r2, r0, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x41c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_ADC_ConfigChannel+0x478>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x420>
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_ADC_ConfigChannel+0x47c>)
 80020e6:	e000      	b.n	80020ea <HAL_ADC_ConfigChannel+0x422>
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_ADC_ConfigChannel+0x480>)
 80020ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d015      	beq.n	800212c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002104:	2b11      	cmp	r3, #17
 8002106:	d105      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002118:	2b12      	cmp	r3, #18
 800211a:	f040 80ab 	bne.w	8002274 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800211e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80a4 	bne.w	8002274 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002134:	d10a      	bne.n	800214c <HAL_ADC_ConfigChannel+0x484>
 8002136:	4b02      	ldr	r3, [pc, #8]	; (8002140 <HAL_ADC_ConfigChannel+0x478>)
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e022      	b.n	8002182 <HAL_ADC_ConfigChannel+0x4ba>
 800213c:	83fff000 	.word	0x83fff000
 8002140:	50000100 	.word	0x50000100
 8002144:	50000300 	.word	0x50000300
 8002148:	50000700 	.word	0x50000700
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a4e      	ldr	r2, [pc, #312]	; (800228c <HAL_ADC_ConfigChannel+0x5c4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d103      	bne.n	800215e <HAL_ADC_ConfigChannel+0x496>
 8002156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e011      	b.n	8002182 <HAL_ADC_ConfigChannel+0x4ba>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a4b      	ldr	r2, [pc, #300]	; (8002290 <HAL_ADC_ConfigChannel+0x5c8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d102      	bne.n	800216e <HAL_ADC_ConfigChannel+0x4a6>
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_ADC_ConfigChannel+0x5cc>)
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e009      	b.n	8002182 <HAL_ADC_ConfigChannel+0x4ba>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_ADC_ConfigChannel+0x5cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d102      	bne.n	800217e <HAL_ADC_ConfigChannel+0x4b6>
 8002178:	4b45      	ldr	r3, [pc, #276]	; (8002290 <HAL_ADC_ConfigChannel+0x5c8>)
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e001      	b.n	8002182 <HAL_ADC_ConfigChannel+0x4ba>
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x4da>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x4da>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x4dc>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d150      	bne.n	800224a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x502>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x502>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_ADC_ConfigChannel+0x504>
 80021ca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d13c      	bne.n	800224a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d11d      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x54c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e0:	d118      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_ADC_ConfigChannel+0x5d0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_ADC_ConfigChannel+0x5d4>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9a      	lsrs	r2, r3, #18
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002204:	e002      	b.n	800220c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002212:	e02e      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b11      	cmp	r3, #17
 800221a:	d10b      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x56c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002224:	d106      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800222e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002230:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002232:	e01e      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b12      	cmp	r3, #18
 800223a:	d11a      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002246:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002248:	e013      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f043 0220 	orr.w	r2, r3, #32
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800225c:	e00a      	b.n	8002274 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002270:	e000      	b.n	8002274 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002272:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800227c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002280:	4618      	mov	r0, r3
 8002282:	376c      	adds	r7, #108	; 0x6c
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	50000100 	.word	0x50000100
 8002290:	50000400 	.word	0x50000400
 8002294:	50000500 	.word	0x50000500
 8002298:	20000000 	.word	0x20000000
 800229c:	431bde83 	.word	0x431bde83

080022a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b099      	sub	sp, #100	; 0x64
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b8:	d102      	bne.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80022ba:	4b6c      	ldr	r3, [pc, #432]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	e01a      	b.n	80022f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a69      	ldr	r2, [pc, #420]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d103      	bne.n	80022d2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80022ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	e011      	b.n	80022f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a66      	ldr	r2, [pc, #408]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d102      	bne.n	80022e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	e009      	b.n	80022f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a63      	ldr	r2, [pc, #396]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d102      	bne.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80022ec:	4b60      	ldr	r3, [pc, #384]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	e001      	b.n	80022f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b0      	b.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800230a:	2302      	movs	r3, #2
 800230c:	e0a9      	b.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 808d 	bne.w	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8086 	bne.w	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800233c:	d004      	beq.n	8002348 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002348:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800234a:	e000      	b.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800234e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d040      	beq.n	80023da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236a:	035b      	lsls	r3, r3, #13
 800236c:	430b      	orrs	r3, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002372:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d15c      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80023b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d14b      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023c4:	f023 030f 	bic.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6811      	ldr	r1, [r2, #0]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	6892      	ldr	r2, [r2, #8]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d8:	e03c      	b.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d123      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002428:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d112      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800242e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002436:	f023 030f 	bic.w	r3, r3, #15
 800243a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800243c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800243e:	e009      	b.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002452:	e000      	b.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002454:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800245e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002462:	4618      	mov	r0, r3
 8002464:	3764      	adds	r7, #100	; 0x64
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	50000100 	.word	0x50000100
 8002470:	50000400 	.word	0x50000400
 8002474:	50000500 	.word	0x50000500
 8002478:	50000300 	.word	0x50000300
 800247c:	50000700 	.word	0x50000700

08002480 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <ADC_Enable+0x2c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <ADC_Enable+0x2c>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <ADC_Enable+0x2e>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d143      	bne.n	800253a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <ADC_Enable+0xc4>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0210 	orr.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e02f      	b.n	800253c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80024ec:	f002 f886 	bl	80045fc <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024f2:	e01b      	b.n	800252c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024f4:	f002 f882 	bl	80045fc <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d914      	bls.n	800252c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d00d      	beq.n	800252c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d1dc      	bne.n	80024f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	8000003f 	.word	0x8000003f

08002548 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <ADC_Disable+0x2c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <ADC_Disable+0x2c>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <ADC_Disable+0x2e>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d047      	beq.n	800260a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030d 	and.w	r3, r3, #13
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10f      	bne.n	80025a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0202 	orr.w	r2, r2, #2
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2203      	movs	r2, #3
 800259e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025a0:	f002 f82c 	bl	80045fc <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025a6:	e029      	b.n	80025fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f043 0210 	orr.w	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e023      	b.n	800260c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025c4:	f002 f81a 	bl	80045fc <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d914      	bls.n	80025fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10d      	bne.n	80025fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0210 	orr.w	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d0dc      	beq.n	80025c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	e160      	b.n	80028e6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8152 	beq.w	80028e0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d005      	beq.n	8002654 <HAL_GPIO_Init+0x40>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d130      	bne.n	80026b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800268a:	2201      	movs	r2, #1
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0201 	and.w	r2, r3, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d017      	beq.n	80026f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d123      	bne.n	8002746 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3208      	adds	r2, #8
 8002706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	6939      	ldr	r1, [r7, #16]
 8002742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80ac 	beq.w	80028e0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002788:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_GPIO_Init+0x2f0>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a5d      	ldr	r2, [pc, #372]	; (8002904 <HAL_GPIO_Init+0x2f0>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <HAL_GPIO_Init+0x2f0>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027a0:	4a59      	ldr	r2, [pc, #356]	; (8002908 <HAL_GPIO_Init+0x2f4>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ca:	d025      	beq.n	8002818 <HAL_GPIO_Init+0x204>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_GPIO_Init+0x2f8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01f      	beq.n	8002814 <HAL_GPIO_Init+0x200>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a4e      	ldr	r2, [pc, #312]	; (8002910 <HAL_GPIO_Init+0x2fc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d019      	beq.n	8002810 <HAL_GPIO_Init+0x1fc>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a4d      	ldr	r2, [pc, #308]	; (8002914 <HAL_GPIO_Init+0x300>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_GPIO_Init+0x1f8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a4c      	ldr	r2, [pc, #304]	; (8002918 <HAL_GPIO_Init+0x304>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_GPIO_Init+0x1f4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a4b      	ldr	r2, [pc, #300]	; (800291c <HAL_GPIO_Init+0x308>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <HAL_GPIO_Init+0x1f0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a4a      	ldr	r2, [pc, #296]	; (8002920 <HAL_GPIO_Init+0x30c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_GPIO_Init+0x1ec>
 80027fc:	2306      	movs	r3, #6
 80027fe:	e00c      	b.n	800281a <HAL_GPIO_Init+0x206>
 8002800:	2307      	movs	r3, #7
 8002802:	e00a      	b.n	800281a <HAL_GPIO_Init+0x206>
 8002804:	2305      	movs	r3, #5
 8002806:	e008      	b.n	800281a <HAL_GPIO_Init+0x206>
 8002808:	2304      	movs	r3, #4
 800280a:	e006      	b.n	800281a <HAL_GPIO_Init+0x206>
 800280c:	2303      	movs	r3, #3
 800280e:	e004      	b.n	800281a <HAL_GPIO_Init+0x206>
 8002810:	2302      	movs	r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x206>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_GPIO_Init+0x206>
 8002818:	2300      	movs	r3, #0
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	f002 0203 	and.w	r2, r2, #3
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4093      	lsls	r3, r2
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800282a:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_GPIO_Init+0x2f4>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_GPIO_Init+0x310>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800285c:	4a31      	ldr	r2, [pc, #196]	; (8002924 <HAL_GPIO_Init+0x310>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_GPIO_Init+0x310>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002886:	4a27      	ldr	r2, [pc, #156]	; (8002924 <HAL_GPIO_Init+0x310>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_GPIO_Init+0x310>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_GPIO_Init+0x310>)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_GPIO_Init+0x310>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <HAL_GPIO_Init+0x310>)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f ae97 	bne.w	8002624 <HAL_GPIO_Init+0x10>
  }
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000
 800290c:	48000400 	.word	0x48000400
 8002910:	48000800 	.word	0x48000800
 8002914:	48000c00 	.word	0x48000c00
 8002918:	48001000 	.word	0x48001000
 800291c:	48001400 	.word	0x48001400
 8002920:	48001800 	.word	0x48001800
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e001      	b.n	800294a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	807b      	strh	r3, [r7, #2]
 8002962:	4613      	mov	r3, r2
 8002964:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002966:	787b      	ldrb	r3, [r7, #1]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296c:	887a      	ldrh	r2, [r7, #2]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002972:	e002      	b.n	800297a <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002974:	887a      	ldrh	r2, [r7, #2]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 fdc0 	bl	8004528 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40010400 	.word	0x40010400

080029b4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d008      	beq.n	80029d8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2204      	movs	r2, #4
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e020      	b.n	8002a1a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 020e 	bic.w	r2, r2, #14
 80029e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d005      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e027      	b.n	8002a96 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 020e 	bic.w	r2, r2, #14
 8002a54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
    } 
  }
  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <Gpt_Init>:

static void Gpt_TIM3_Init(void);
static void Gpt_Error_Handler(void);

void Gpt_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	Gpt_TIM3_Init();
 8002aa4:	f000 f8c0 	bl	8002c28 <Gpt_TIM3_Init>
	Gpt_InitDone = 1u;
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <Gpt_Init+0x14>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000108 	.word	0x20000108

08002ab8 <Gpt_TIM3_Start_IT>:

void Gpt_TIM3_Start_IT(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	if(1u == Gpt_InitDone)
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <Gpt_TIM3_Start_IT+0x18>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <Gpt_TIM3_Start_IT+0x12>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8002ac4:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <Gpt_TIM3_Start_IT+0x1c>)
 8002ac6:	f000 f959 	bl	8002d7c <HAL_TIM_Base_Start_IT>
	}
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000108 	.word	0x20000108
 8002ad4:	200000bc 	.word	0x200000bc

08002ad8 <HAL_TIM_PeriodElapsedCallback>:
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	//TODO: Remove and redirect timer callback
	if(tim3_count == 9999)
 8002ae0:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d115      	bne.n	8002b18 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim3_count = 0u;
 8002aec:	4b44      	ldr	r3, [pc, #272]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
		tim3_5count = 0u;
 8002af2:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
		tim3_10count = 0u;
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
		tim3_20count = 0u;
 8002afe:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
		tim3_50count = 0u;
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
		tim3_100count = 0u;
 8002b0a:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
		tim3_500count = 0u;
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e004      	b.n	8002b22 <HAL_TIM_PeriodElapsedCallback+0x4a>
	}
	else
	{
		tim3_count++;
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	4a38      	ldr	r2, [pc, #224]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b20:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 5) == 0u)
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b28:	fba3 2301 	umull	r2, r3, r3, r1
 8002b2c:	089a      	lsrs	r2, r3, #2
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	1aca      	subs	r2, r1, r3
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	d104      	bne.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		tim3_5count++;
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	4a30      	ldr	r2, [pc, #192]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002b42:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 10) == 0u)
 8002b44:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	1aca      	subs	r2, r1, r3
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d104      	bne.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		tim3_10count++;
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002b66:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 20) == 0u)
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b72:	091a      	lsrs	r2, r3, #4
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	1aca      	subs	r2, r1, r3
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d104      	bne.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		tim3_20count++;
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002b8a:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 50) == 0u)
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	2132      	movs	r1, #50	; 0x32
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		tim3_50count++;
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002bac:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 100) == 0u)
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	2164      	movs	r1, #100	; 0x64
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <HAL_TIM_PeriodElapsedCallback+0xf8>
	{
		tim3_100count++;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002bce:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 500) == 0u)
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <HAL_TIM_PeriodElapsedCallback+0x11c>
	{
		tim3_500count++;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002bf2:	6013      	str	r3, [r2, #0]
	}
	//HAL_IncTick();
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200000a0 	.word	0x200000a0
 8002c04:	200000a4 	.word	0x200000a4
 8002c08:	200000a8 	.word	0x200000a8
 8002c0c:	200000ac 	.word	0x200000ac
 8002c10:	200000b0 	.word	0x200000b0
 8002c14:	200000b4 	.word	0x200000b4
 8002c18:	200000b8 	.word	0x200000b8
 8002c1c:	cccccccd 	.word	0xcccccccd
 8002c20:	51eb851f 	.word	0x51eb851f
 8002c24:	10624dd3 	.word	0x10624dd3

08002c28 <Gpt_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void Gpt_TIM3_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2e:	f107 0310 	add.w	r3, r7, #16
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <Gpt_TIM3_Init+0x98>)
 8002c4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c4e:	220a      	movs	r2, #10
 8002c50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c5a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002c5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c6c:	4813      	ldr	r0, [pc, #76]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c6e:	f000 f82e 	bl	8002cce <HAL_TIM_Base_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <Gpt_TIM3_Init+0x54>
  {
	  Gpt_Error_Handler();
 8002c78:	f000 f824 	bl	8002cc4 <Gpt_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c82:	f107 0310 	add.w	r3, r7, #16
 8002c86:	4619      	mov	r1, r3
 8002c88:	480c      	ldr	r0, [pc, #48]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002c8a:	f000 fc87 	bl	800359c <HAL_TIM_ConfigClockSource>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <Gpt_TIM3_Init+0x70>
  {
	  Gpt_Error_Handler();
 8002c94:	f000 f816 	bl	8002cc4 <Gpt_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4805      	ldr	r0, [pc, #20]	; (8002cbc <Gpt_TIM3_Init+0x94>)
 8002ca6:	f001 f9bd 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <Gpt_TIM3_Init+0x8c>
  {
	  Gpt_Error_Handler();
 8002cb0:	f000 f808 	bl	8002cc4 <Gpt_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200000bc 	.word	0x200000bc
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <Gpt_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Gpt_Error_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc8:	b672      	cpsid	i
}
 8002cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <Gpt_Error_Handler+0x8>

08002cce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e049      	b.n	8002d74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f001 fe99 	bl	8004a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f000 fd33 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d001      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e04f      	b.n	8002e34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01d      	beq.n	8002df2 <HAL_TIM_Base_Start_IT+0x76>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d018      	beq.n	8002df2 <HAL_TIM_Base_Start_IT+0x76>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <HAL_TIM_Base_Start_IT+0x76>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00e      	beq.n	8002df2 <HAL_TIM_Base_Start_IT+0x76>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d009      	beq.n	8002df2 <HAL_TIM_Base_Start_IT+0x76>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_TIM_Base_Start_IT+0x76>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d115      	bne.n	8002e1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d015      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0xb4>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0a:	d011      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1c:	e008      	b.n	8002e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e000      	b.n	8002e32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	40014000 	.word	0x40014000
 8002e54:	40015000 	.word	0x40015000
 8002e58:	00010007 	.word	0x00010007

08002e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e049      	b.n	8002f02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f841 	bl	8002f0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 fc6c 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_TIM_PWM_Start+0x24>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e03c      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d109      	bne.n	8002f5a <HAL_TIM_PWM_Start+0x3e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e02f      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start+0x58>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e022      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d109      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x72>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e015      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start+0x8c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e008      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0a1      	b.n	8003106 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0xb6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	e023      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d104      	bne.n	8002fe2 <HAL_TIM_PWM_Start+0xc6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe0:	e01b      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d104      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0xd6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	e013      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_PWM_Start+0xe6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003000:	e00b      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d104      	bne.n	8003012 <HAL_TIM_PWM_Start+0xf6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003010:	e003      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2201      	movs	r2, #1
 8003020:	6839      	ldr	r1, [r7, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ffda 	bl	8003fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a38      	ldr	r2, [pc, #224]	; (8003110 <HAL_TIM_PWM_Start+0x1f4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_TIM_PWM_Start+0x148>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a37      	ldr	r2, [pc, #220]	; (8003114 <HAL_TIM_PWM_Start+0x1f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_TIM_PWM_Start+0x148>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a35      	ldr	r2, [pc, #212]	; (8003118 <HAL_TIM_PWM_Start+0x1fc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_TIM_PWM_Start+0x148>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a34      	ldr	r2, [pc, #208]	; (800311c <HAL_TIM_PWM_Start+0x200>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_TIM_PWM_Start+0x148>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a32      	ldr	r2, [pc, #200]	; (8003120 <HAL_TIM_PWM_Start+0x204>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_TIM_PWM_Start+0x148>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a31      	ldr	r2, [pc, #196]	; (8003124 <HAL_TIM_PWM_Start+0x208>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_TIM_PWM_Start+0x14c>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_TIM_PWM_Start+0x14e>
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a23      	ldr	r2, [pc, #140]	; (8003110 <HAL_TIM_PWM_Start+0x1f4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d01d      	beq.n	80030c4 <HAL_TIM_PWM_Start+0x1a8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003090:	d018      	beq.n	80030c4 <HAL_TIM_PWM_Start+0x1a8>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a24      	ldr	r2, [pc, #144]	; (8003128 <HAL_TIM_PWM_Start+0x20c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d013      	beq.n	80030c4 <HAL_TIM_PWM_Start+0x1a8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a22      	ldr	r2, [pc, #136]	; (800312c <HAL_TIM_PWM_Start+0x210>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00e      	beq.n	80030c4 <HAL_TIM_PWM_Start+0x1a8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <HAL_TIM_PWM_Start+0x1f8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d009      	beq.n	80030c4 <HAL_TIM_PWM_Start+0x1a8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a18      	ldr	r2, [pc, #96]	; (8003118 <HAL_TIM_PWM_Start+0x1fc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_TIM_PWM_Start+0x1a8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_TIM_PWM_Start+0x208>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d115      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_TIM_PWM_Start+0x214>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d015      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1e6>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d011      	beq.n	8003102 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	e008      	b.n	8003102 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e000      	b.n	8003104 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40013400 	.word	0x40013400
 8003118:	40014000 	.word	0x40014000
 800311c:	40014400 	.word	0x40014400
 8003120:	40014800 	.word	0x40014800
 8003124:	40015000 	.word	0x40015000
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	00010007 	.word	0x00010007

08003134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d122      	bne.n	8003190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d11b      	bne.n	8003190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0202 	mvn.w	r2, #2
 8003160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fae2 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fad5 	bl	800372e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fae4 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d122      	bne.n	80031e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d11b      	bne.n	80031e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0204 	mvn.w	r2, #4
 80031b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fab8 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 80031d0:	e005      	b.n	80031de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 faab 	bl	800372e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 faba 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d122      	bne.n	8003238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d11b      	bne.n	8003238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0208 	mvn.w	r2, #8
 8003208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2204      	movs	r2, #4
 800320e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa8e 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fa81 	bl	800372e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa90 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b10      	cmp	r3, #16
 8003244:	d122      	bne.n	800328c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b10      	cmp	r3, #16
 8003252:	d11b      	bne.n	800328c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0210 	mvn.w	r2, #16
 800325c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2208      	movs	r2, #8
 8003262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa64 	bl	8003740 <HAL_TIM_IC_CaptureCallback>
 8003278:	e005      	b.n	8003286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa57 	bl	800372e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fa66 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0201 	mvn.w	r2, #1
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fc10 	bl	8002ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 ff35 	bl	800414e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f2:	d10e      	bne.n	8003312 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d107      	bne.n	8003312 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800330a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 ff27 	bl	8004160 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d10e      	bne.n	800333e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d107      	bne.n	800333e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fa13 	bl	8003764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b20      	cmp	r3, #32
 800334a:	d10e      	bne.n	800336a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d107      	bne.n	800336a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f06f 0220 	mvn.w	r2, #32
 8003362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fee9 	bl	800413c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800338e:	2302      	movs	r3, #2
 8003390:	e0ff      	b.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b14      	cmp	r3, #20
 800339e:	f200 80f0 	bhi.w	8003582 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033fd 	.word	0x080033fd
 80033ac:	08003583 	.word	0x08003583
 80033b0:	08003583 	.word	0x08003583
 80033b4:	08003583 	.word	0x08003583
 80033b8:	0800343d 	.word	0x0800343d
 80033bc:	08003583 	.word	0x08003583
 80033c0:	08003583 	.word	0x08003583
 80033c4:	08003583 	.word	0x08003583
 80033c8:	0800347f 	.word	0x0800347f
 80033cc:	08003583 	.word	0x08003583
 80033d0:	08003583 	.word	0x08003583
 80033d4:	08003583 	.word	0x08003583
 80033d8:	080034bf 	.word	0x080034bf
 80033dc:	08003583 	.word	0x08003583
 80033e0:	08003583 	.word	0x08003583
 80033e4:	08003583 	.word	0x08003583
 80033e8:	08003501 	.word	0x08003501
 80033ec:	08003583 	.word	0x08003583
 80033f0:	08003583 	.word	0x08003583
 80033f4:	08003583 	.word	0x08003583
 80033f8:	08003541 	.word	0x08003541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fa54 	bl	80038b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0208 	orr.w	r2, r2, #8
 8003416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0204 	bic.w	r2, r2, #4
 8003426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6999      	ldr	r1, [r3, #24]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	619a      	str	r2, [r3, #24]
      break;
 800343a:	e0a5      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 face 	bl	80039e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6999      	ldr	r1, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	021a      	lsls	r2, r3, #8
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	619a      	str	r2, [r3, #24]
      break;
 800347c:	e084      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fb3f 	bl	8003b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0208 	orr.w	r2, r2, #8
 8003498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0204 	bic.w	r2, r2, #4
 80034a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69d9      	ldr	r1, [r3, #28]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	61da      	str	r2, [r3, #28]
      break;
 80034bc:	e064      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fbb1 	bl	8003c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69d9      	ldr	r1, [r3, #28]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	021a      	lsls	r2, r3, #8
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	61da      	str	r2, [r3, #28]
      break;
 80034fe:	e043      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fbfe 	bl	8003d08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0208 	orr.w	r2, r2, #8
 800351a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800353e:	e023      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fc48 	bl	8003ddc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	021a      	lsls	r2, r3, #8
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003580:	e002      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
      break;
 8003586:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop

0800359c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0b6      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x18a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f4:	d03e      	beq.n	8003674 <HAL_TIM_ConfigClockSource+0xd8>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	f200 8087 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x170>
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003602:	f000 8086 	beq.w	8003712 <HAL_TIM_ConfigClockSource+0x176>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	d87f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x170>
 800360c:	2b70      	cmp	r3, #112	; 0x70
 800360e:	d01a      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0xaa>
 8003610:	2b70      	cmp	r3, #112	; 0x70
 8003612:	d87b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x170>
 8003614:	2b60      	cmp	r3, #96	; 0x60
 8003616:	d050      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x11e>
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d877      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x170>
 800361c:	2b50      	cmp	r3, #80	; 0x50
 800361e:	d03c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0xfe>
 8003620:	2b50      	cmp	r3, #80	; 0x50
 8003622:	d873      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x170>
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d058      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x13e>
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d86f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x170>
 800362c:	2b30      	cmp	r3, #48	; 0x30
 800362e:	d064      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15e>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d86b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x170>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d060      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15e>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d867      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x170>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15e>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d05a      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15e>
 8003644:	e062      	b.n	800370c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f000 fca2 	bl	8003f9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	609a      	str	r2, [r3, #8]
      break;
 8003672:	e04f      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f000 fc8b 	bl	8003f9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003696:	609a      	str	r2, [r3, #8]
      break;
 8003698:	e03c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 fc02 	bl	8003eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2150      	movs	r1, #80	; 0x50
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc59 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 80036b8:	e02c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 fc20 	bl	8003f0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2160      	movs	r1, #96	; 0x60
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fc49 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 80036d8:	e01c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 fbe2 	bl	8003eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2140      	movs	r1, #64	; 0x40
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fc39 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 80036f8:	e00c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f000 fc30 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 800370a:	e003      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e000      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
	...

08003778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a41      	ldr	r2, [pc, #260]	; (8003890 <TIM_Base_SetConfig+0x118>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d00f      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3e      	ldr	r2, [pc, #248]	; (8003894 <TIM_Base_SetConfig+0x11c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00b      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3d      	ldr	r2, [pc, #244]	; (8003898 <TIM_Base_SetConfig+0x120>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3c      	ldr	r2, [pc, #240]	; (800389c <TIM_Base_SetConfig+0x124>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <TIM_Base_SetConfig+0x128>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d108      	bne.n	80037ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <TIM_Base_SetConfig+0x118>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d01b      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <TIM_Base_SetConfig+0x11c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d017      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2c      	ldr	r2, [pc, #176]	; (8003898 <TIM_Base_SetConfig+0x120>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2b      	ldr	r2, [pc, #172]	; (800389c <TIM_Base_SetConfig+0x124>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00f      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2b      	ldr	r2, [pc, #172]	; (80038a4 <TIM_Base_SetConfig+0x12c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <TIM_Base_SetConfig+0x130>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a29      	ldr	r2, [pc, #164]	; (80038ac <TIM_Base_SetConfig+0x134>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_Base_SetConfig+0x9a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a24      	ldr	r2, [pc, #144]	; (80038a0 <TIM_Base_SetConfig+0x128>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a11      	ldr	r2, [pc, #68]	; (8003890 <TIM_Base_SetConfig+0x118>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <TIM_Base_SetConfig+0x100>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <TIM_Base_SetConfig+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00f      	beq.n	8003878 <TIM_Base_SetConfig+0x100>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <TIM_Base_SetConfig+0x12c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00b      	beq.n	8003878 <TIM_Base_SetConfig+0x100>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a11      	ldr	r2, [pc, #68]	; (80038a8 <TIM_Base_SetConfig+0x130>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <TIM_Base_SetConfig+0x100>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a10      	ldr	r2, [pc, #64]	; (80038ac <TIM_Base_SetConfig+0x134>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_Base_SetConfig+0x100>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <TIM_Base_SetConfig+0x128>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d103      	bne.n	8003880 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	615a      	str	r2, [r3, #20]
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40013400 	.word	0x40013400
 80038a0:	40015000 	.word	0x40015000
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800

080038b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f023 0302 	bic.w	r3, r3, #2
 80038fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a30      	ldr	r2, [pc, #192]	; (80039cc <TIM_OC1_SetConfig+0x11c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <TIM_OC1_SetConfig+0x88>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <TIM_OC1_SetConfig+0x120>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00f      	beq.n	8003938 <TIM_OC1_SetConfig+0x88>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <TIM_OC1_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <TIM_OC1_SetConfig+0x88>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a2d      	ldr	r2, [pc, #180]	; (80039d8 <TIM_OC1_SetConfig+0x128>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <TIM_OC1_SetConfig+0x88>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <TIM_OC1_SetConfig+0x12c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_OC1_SetConfig+0x88>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <TIM_OC1_SetConfig+0x130>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d10c      	bne.n	8003952 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0308 	bic.w	r3, r3, #8
 800393e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <TIM_OC1_SetConfig+0x11c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <TIM_OC1_SetConfig+0xd2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <TIM_OC1_SetConfig+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00f      	beq.n	8003982 <TIM_OC1_SetConfig+0xd2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <TIM_OC1_SetConfig+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_OC1_SetConfig+0xd2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <TIM_OC1_SetConfig+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_OC1_SetConfig+0xd2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <TIM_OC1_SetConfig+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_OC1_SetConfig+0xd2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <TIM_OC1_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40013400 	.word	0x40013400
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800
 80039e0:	40015000 	.word	0x40015000

080039e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0210 	bic.w	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0320 	bic.w	r3, r3, #32
 8003a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2b      	ldr	r2, [pc, #172]	; (8003af0 <TIM_OC2_SetConfig+0x10c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_OC2_SetConfig+0x74>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <TIM_OC2_SetConfig+0x110>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC2_SetConfig+0x74>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <TIM_OC2_SetConfig+0x114>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10d      	bne.n	8003a74 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <TIM_OC2_SetConfig+0x10c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <TIM_OC2_SetConfig+0xc0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <TIM_OC2_SetConfig+0x110>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00f      	beq.n	8003aa4 <TIM_OC2_SetConfig+0xc0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <TIM_OC2_SetConfig+0x118>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_OC2_SetConfig+0xc0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <TIM_OC2_SetConfig+0x11c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_OC2_SetConfig+0xc0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <TIM_OC2_SetConfig+0x120>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_OC2_SetConfig+0xc0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <TIM_OC2_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d113      	bne.n	8003acc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aaa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ab2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40015000 	.word	0x40015000
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800

08003b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2b      	ldr	r2, [pc, #172]	; (8003c14 <TIM_OC3_SetConfig+0x10c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <TIM_OC3_SetConfig+0x72>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <TIM_OC3_SetConfig+0x110>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_OC3_SetConfig+0x72>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <TIM_OC3_SetConfig+0x114>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10d      	bne.n	8003b96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <TIM_OC3_SetConfig+0x10c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <TIM_OC3_SetConfig+0x110>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00f      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <TIM_OC3_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <TIM_OC3_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <TIM_OC3_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <TIM_OC3_SetConfig+0xbe>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <TIM_OC3_SetConfig+0x114>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d113      	bne.n	8003bee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	621a      	str	r2, [r3, #32]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40013400 	.word	0x40013400
 8003c1c:	40015000 	.word	0x40015000
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800

08003c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <TIM_OC4_SetConfig+0xc4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x8c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <TIM_OC4_SetConfig+0xc8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x8c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <TIM_OC4_SetConfig+0xcc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x8c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <TIM_OC4_SetConfig+0xd0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x8c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <TIM_OC4_SetConfig+0xd4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x8c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <TIM_OC4_SetConfig+0xd8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d109      	bne.n	8003ccc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800
 8003d04:	40015000 	.word	0x40015000

08003d08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <TIM_OC5_SetConfig+0xbc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <TIM_OC5_SetConfig+0xc0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <TIM_OC5_SetConfig+0xc4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <TIM_OC5_SetConfig+0xc8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <TIM_OC5_SetConfig+0xcc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <TIM_OC5_SetConfig+0xd0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d109      	bne.n	8003d9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40013400 	.word	0x40013400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800
 8003dd8:	40015000 	.word	0x40015000

08003ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	051b      	lsls	r3, r3, #20
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <TIM_OC6_SetConfig+0xbc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <TIM_OC6_SetConfig+0xc0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00f      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <TIM_OC6_SetConfig+0xc4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <TIM_OC6_SetConfig+0xc8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <TIM_OC6_SetConfig+0xcc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <TIM_OC6_SetConfig+0xd0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800
 8003eac:	40015000 	.word	0x40015000

08003eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0201 	bic.w	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f023 030a 	bic.w	r3, r3, #10
 8003eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f023 0210 	bic.w	r2, r3, #16
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	031b      	lsls	r3, r3, #12
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	621a      	str	r2, [r3, #32]
}
 8003f60:	bf00      	nop
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f043 0307 	orr.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	609a      	str	r2, [r3, #8]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	2201      	movs	r2, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1a      	ldr	r2, [r3, #32]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	401a      	ands	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	fa01 f303 	lsl.w	r3, r1, r3
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004038:	2302      	movs	r3, #2
 800403a:	e06d      	b.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a30      	ldr	r2, [pc, #192]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2f      	ldr	r2, [pc, #188]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d01d      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d018      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a15      	ldr	r2, [pc, #84]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a11      	ldr	r2, [pc, #68]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10c      	bne.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40013400 	.word	0x40013400
 800412c:	40015000 	.word	0x40015000
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40014000 	.word	0x40014000

0800413c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
	...

08004174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0a7      	b.n	80042d6 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d12c      	bne.n	80041ec <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a50      	ldr	r2, [pc, #320]	; (80042e0 <HAL_I2C_Init+0x16c>)
 800419e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_I2C_Init+0x170>)
 80041a4:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4f      	ldr	r2, [pc, #316]	; (80042e8 <HAL_I2C_Init+0x174>)
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a4f      	ldr	r2, [pc, #316]	; (80042ec <HAL_I2C_Init+0x178>)
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4e      	ldr	r2, [pc, #312]	; (80042f0 <HAL_I2C_Init+0x17c>)
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a4e      	ldr	r2, [pc, #312]	; (80042f4 <HAL_I2C_Init+0x180>)
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4d      	ldr	r2, [pc, #308]	; (80042f8 <HAL_I2C_Init+0x184>)
 80041c2:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a4d      	ldr	r2, [pc, #308]	; (80042fc <HAL_I2C_Init+0x188>)
 80041c8:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a4c      	ldr	r2, [pc, #304]	; (8004300 <HAL_I2C_Init+0x18c>)
 80041ce:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a4c      	ldr	r2, [pc, #304]	; (8004304 <HAL_I2C_Init+0x190>)
 80041d4:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a49      	ldr	r2, [pc, #292]	; (8004308 <HAL_I2C_Init+0x194>)
 80041e2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2224      	movs	r2, #36	; 0x24
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004210:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004220:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d107      	bne.n	800423a <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	e006      	b.n	8004248 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004246:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d104      	bne.n	800425a <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004258:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800427c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	08004341 	.word	0x08004341
 80042e4:	08004353 	.word	0x08004353
 80042e8:	08004365 	.word	0x08004365
 80042ec:	08004377 	.word	0x08004377
 80042f0:	080043a3 	.word	0x080043a3
 80042f4:	080043b5 	.word	0x080043b5
 80042f8:	080043c7 	.word	0x080043c7
 80042fc:	080043d9 	.word	0x080043d9
 8004300:	080043eb 	.word	0x080043eb
 8004304:	08004389 	.word	0x08004389
 8004308:	080048fd 	.word	0x080048fd

0800430c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
  }
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr

08004352 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
 8004394:	4613      	mov	r3, r2
 8004396:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b20      	cmp	r3, #32
 8004410:	d138      	bne.n	8004484 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800441c:	2302      	movs	r3, #2
 800441e:	e032      	b.n	8004486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800444e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d139      	bne.n	800451a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e033      	b.n	800451c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	; 0x24
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
	...

08004528 <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004538:	d10e      	bne.n	8004558 <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800453a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800453e:	4808      	ldr	r0, [pc, #32]	; (8004560 <HAL_GPIO_EXTI_Callback+0x38>)
 8004540:	f7fe f9f2 	bl	8002928 <HAL_GPIO_ReadPin>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d103      	bne.n	8004552 <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 800454a:	2001      	movs	r0, #1
 800454c:	f003 ff84 	bl	8008458 <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8004550:	e002      	b.n	8004558 <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 8004552:	2000      	movs	r0, #0
 8004554:	f003 ff80 	bl	8008458 <Rte_Write_PC13_Pin_State>
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	48000800 	.word	0x48000800

08004564 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <HAL_Init+0x28>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a07      	ldr	r2, [pc, #28]	; (8004598 <HAL_Init+0x28>)
 800457a:	f043 0310 	orr.w	r3, r3, #16
 800457e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004580:	2003      	movs	r0, #3
 8004582:	f000 f911 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004586:	200f      	movs	r0, #15
 8004588:	f000 f808 	bl	800459c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800458c:	f000 f94e 	bl	800482c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40022000 	.word	0x40022000

0800459c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_InitTick+0x54>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_InitTick+0x58>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f929 	bl	8004812 <HAL_SYSTICK_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e00e      	b.n	80045e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b0f      	cmp	r3, #15
 80045ce:	d80a      	bhi.n	80045e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045d0:	2200      	movs	r2, #0
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	f000 f8f1 	bl	80047be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045dc:	4a06      	ldr	r2, [pc, #24]	; (80045f8 <HAL_InitTick+0x5c>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000000 	.word	0x20000000
 80045f4:	20000008 	.word	0x20000008
 80045f8:	20000004 	.word	0x20000004

080045fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8004600:	4b02      	ldr	r3, [pc, #8]	; (800460c <HAL_GetTick+0x10>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	2000010c 	.word	0x2000010c

08004610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800462c:	4013      	ands	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004642:	4a04      	ldr	r2, [pc, #16]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	60d3      	str	r3, [r2, #12]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <__NVIC_GetPriorityGrouping+0x18>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0307 	and.w	r3, r3, #7
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	2b00      	cmp	r3, #0
 8004684:	db0b      	blt.n	800469e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	4906      	ldr	r1, [pc, #24]	; (80046a8 <__NVIC_EnableIRQ+0x34>)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2001      	movs	r0, #1
 8004696:	fa00 f202 	lsl.w	r2, r0, r2
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	e000e100 	.word	0xe000e100

080046ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db0a      	blt.n	80046d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	490c      	ldr	r1, [pc, #48]	; (80046f8 <__NVIC_SetPriority+0x4c>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	0112      	lsls	r2, r2, #4
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	440b      	add	r3, r1
 80046d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d4:	e00a      	b.n	80046ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4908      	ldr	r1, [pc, #32]	; (80046fc <__NVIC_SetPriority+0x50>)
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	3b04      	subs	r3, #4
 80046e4:	0112      	lsls	r2, r2, #4
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	440b      	add	r3, r1
 80046ea:	761a      	strb	r2, [r3, #24]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	e000e100 	.word	0xe000e100
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f1c3 0307 	rsb	r3, r3, #7
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf28      	it	cs
 800471e:	2304      	movcs	r3, #4
 8004720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3304      	adds	r3, #4
 8004726:	2b06      	cmp	r3, #6
 8004728:	d902      	bls.n	8004730 <NVIC_EncodePriority+0x30>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3b03      	subs	r3, #3
 800472e:	e000      	b.n	8004732 <NVIC_EncodePriority+0x32>
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	401a      	ands	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004748:	f04f 31ff 	mov.w	r1, #4294967295
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	43d9      	mvns	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	4313      	orrs	r3, r2
         );
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004774:	d301      	bcc.n	800477a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004776:	2301      	movs	r3, #1
 8004778:	e00f      	b.n	800479a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <SysTick_Config+0x40>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004782:	210f      	movs	r1, #15
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	f7ff ff90 	bl	80046ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <SysTick_Config+0x40>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <SysTick_Config+0x40>)
 8004794:	2207      	movs	r2, #7
 8004796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	e000e010 	.word	0xe000e010

080047a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff2d 	bl	8004610 <__NVIC_SetPriorityGrouping>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b086      	sub	sp, #24
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d0:	f7ff ff42 	bl	8004658 <__NVIC_GetPriorityGrouping>
 80047d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7ff ff90 	bl	8004700 <NVIC_EncodePriority>
 80047e0:	4602      	mov	r2, r0
 80047e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff5f 	bl	80046ac <__NVIC_SetPriority>
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff35 	bl	8004674 <__NVIC_EnableIRQ>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ffa2 	bl	8004764 <SysTick_Config>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <HAL_MspInit+0x40>)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <HAL_MspInit+0x40>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6193      	str	r3, [r2, #24]
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_MspInit+0x40>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_MspInit+0x40>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4a07      	ldr	r2, [pc, #28]	; (800486c <HAL_MspInit+0x40>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004854:	61d3      	str	r3, [r2, #28]
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_MspInit+0x40>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	40021000 	.word	0x40021000

08004870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004890:	d12b      	bne.n	80048ea <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004892:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_ADC_MspInit+0x84>)
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <HAL_ADC_MspInit+0x84>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	6153      	str	r3, [r2, #20]
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <HAL_ADC_MspInit+0x84>)
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_ADC_MspInit+0x84>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_ADC_MspInit+0x84>)
 80048b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048b4:	6153      	str	r3, [r2, #20]
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <HAL_ADC_MspInit+0x84>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048c6:	2303      	movs	r3, #3
 80048c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ce:	f107 0314 	add.w	r3, r7, #20
 80048d2:	4619      	mov	r1, r3
 80048d4:	4808      	ldr	r0, [pc, #32]	; (80048f8 <HAL_ADC_MspInit+0x88>)
 80048d6:	f7fd fe9d 	bl	8002614 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80048da:	2200      	movs	r2, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	2012      	movs	r0, #18
 80048e0:	f7ff ff6d 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80048e4:	2012      	movs	r0, #18
 80048e6:	f7ff ff86 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048ea:	bf00      	nop
 80048ec:	3728      	adds	r7, #40	; 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	48000800 	.word	0x48000800

080048fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	f107 0314 	add.w	r3, r7, #20
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
 8004912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_I2C_MspInit+0x8c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d130      	bne.n	8004980 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491e:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_I2C_MspInit+0x90>)
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	4a1a      	ldr	r2, [pc, #104]	; (800498c <HAL_I2C_MspInit+0x90>)
 8004924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004928:	6153      	str	r3, [r2, #20]
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_I2C_MspInit+0x90>)
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800493a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800493c:	2312      	movs	r3, #18
 800493e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004944:	2303      	movs	r3, #3
 8004946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004948:	2304      	movs	r3, #4
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	4619      	mov	r1, r3
 8004952:	480f      	ldr	r0, [pc, #60]	; (8004990 <HAL_I2C_MspInit+0x94>)
 8004954:	f7fd fe5e 	bl	8002614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <HAL_I2C_MspInit+0x90>)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <HAL_I2C_MspInit+0x90>)
 800495e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004962:	61d3      	str	r3, [r2, #28]
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_I2C_MspInit+0x90>)
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004970:	2200      	movs	r2, #0
 8004972:	2100      	movs	r1, #0
 8004974:	201f      	movs	r0, #31
 8004976:	f7ff ff22 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800497a:	201f      	movs	r0, #31
 800497c:	f7ff ff3b 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004980:	bf00      	nop
 8004982:	3728      	adds	r7, #40	; 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40005400 	.word	0x40005400
 800498c:	40021000 	.word	0x40021000
 8004990:	48000400 	.word	0x48000400

08004994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499c:	f107 0314 	add.w	r3, r7, #20
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_SPI_MspInit+0x8c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d130      	bne.n	8004a18 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_SPI_MspInit+0x90>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_SPI_MspInit+0x90>)
 80049bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c0:	61d3      	str	r3, [r2, #28]
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_SPI_MspInit+0x90>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_SPI_MspInit+0x90>)
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <HAL_SPI_MspInit+0x90>)
 80049d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d8:	6153      	str	r3, [r2, #20]
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_SPI_MspInit+0x90>)
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80049e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80049ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ec:	2302      	movs	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049f4:	2303      	movs	r3, #3
 80049f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049f8:	2306      	movs	r3, #6
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049fc:	f107 0314 	add.w	r3, r7, #20
 8004a00:	4619      	mov	r1, r3
 8004a02:	4809      	ldr	r0, [pc, #36]	; (8004a28 <HAL_SPI_MspInit+0x94>)
 8004a04:	f7fd fe06 	bl	8002614 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	2033      	movs	r0, #51	; 0x33
 8004a0e:	f7ff fed6 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004a12:	2033      	movs	r0, #51	; 0x33
 8004a14:	f7ff feef 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004a18:	bf00      	nop
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40003c00 	.word	0x40003c00
 8004a24:	40021000 	.word	0x40021000
 8004a28:	48000800 	.word	0x48000800

08004a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <HAL_TIM_Base_MspInit+0x44>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d113      	bne.n	8004a66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <HAL_TIM_Base_MspInit+0x48>)
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <HAL_TIM_Base_MspInit+0x48>)
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	61d3      	str	r3, [r2, #28]
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <HAL_TIM_Base_MspInit+0x48>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a56:	2200      	movs	r2, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	201d      	movs	r0, #29
 8004a5c:	f7ff feaf 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a60:	201d      	movs	r0, #29
 8004a62:	f7ff fec8 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40021000 	.word	0x40021000

08004a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08c      	sub	sp, #48	; 0x30
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a80:	f107 031c 	add.w	r3, r7, #28
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a36      	ldr	r2, [pc, #216]	; (8004b70 <HAL_UART_MspInit+0xf8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d130      	bne.n	8004afc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	4a35      	ldr	r2, [pc, #212]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aa4:	6193      	str	r3, [r2, #24]
 8004aa6:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004abc:	6153      	str	r3, [r2, #20]
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004aca:	2330      	movs	r3, #48	; 0x30
 8004acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ada:	2307      	movs	r3, #7
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ade:	f107 031c 	add.w	r3, r7, #28
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4824      	ldr	r0, [pc, #144]	; (8004b78 <HAL_UART_MspInit+0x100>)
 8004ae6:	f7fd fd95 	bl	8002614 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	2025      	movs	r0, #37	; 0x25
 8004af0:	f7ff fe65 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004af4:	2025      	movs	r0, #37	; 0x25
 8004af6:	f7ff fe7e 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004afa:	e035      	b.n	8004b68 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <HAL_UART_MspInit+0x104>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d130      	bne.n	8004b68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b06:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b10:	61d3      	str	r3, [r2, #28]
 8004b12:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b28:	6153      	str	r3, [r2, #20]
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_UART_MspInit+0xfc>)
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b36:	230c      	movs	r3, #12
 8004b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b42:	2303      	movs	r3, #3
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b46:	2307      	movs	r3, #7
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4a:	f107 031c 	add.w	r3, r7, #28
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b54:	f7fd fd5e 	bl	8002614 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	2026      	movs	r0, #38	; 0x26
 8004b5e:	f7ff fe2e 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b62:	2026      	movs	r0, #38	; 0x26
 8004b64:	f7ff fe47 	bl	80047f6 <HAL_NVIC_EnableIRQ>
}
 8004b68:	bf00      	nop
 8004b6a:	3730      	adds	r7, #48	; 0x30
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40013800 	.word	0x40013800
 8004b74:	40021000 	.word	0x40021000
 8004b78:	48000800 	.word	0x48000800
 8004b7c:	40004400 	.word	0x40004400

08004b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b90:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f001 b83a 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004baa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 816f 	beq.w	8004e9a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004bbc:	4bb5      	ldr	r3, [pc, #724]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d00c      	beq.n	8004be2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bc8:	4bb2      	ldr	r3, [pc, #712]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d15c      	bne.n	8004c8e <HAL_RCC_OscConfig+0x10e>
 8004bd4:	4baf      	ldr	r3, [pc, #700]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d155      	bne.n	8004c8e <HAL_RCC_OscConfig+0x10e>
 8004be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d102      	bne.n	8004c14 <HAL_RCC_OscConfig+0x94>
 8004c0e:	4ba1      	ldr	r3, [pc, #644]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	e015      	b.n	8004c40 <HAL_RCC_OscConfig+0xc0>
 8004c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c18:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c30:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c3c:	4b95      	ldr	r3, [pc, #596]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c44:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004c48:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004c4c:	fa92 f2a2 	rbit	r2, r2
 8004c50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004c54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004c58:	fab2 f282 	clz	r2, r2
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	f042 0220 	orr.w	r2, r2, #32
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	f002 021f 	and.w	r2, r2, #31
 8004c68:	2101      	movs	r1, #1
 8004c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8111 	beq.w	8004e98 <HAL_RCC_OscConfig+0x318>
 8004c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 8108 	bne.w	8004e98 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f000 bfc6 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x12e>
 8004ca0:	4b7c      	ldr	r3, [pc, #496]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a7b      	ldr	r2, [pc, #492]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e036      	b.n	8004d1c <HAL_RCC_OscConfig+0x19c>
 8004cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x158>
 8004cbe:	4b75      	ldr	r3, [pc, #468]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a74      	ldr	r2, [pc, #464]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b72      	ldr	r3, [pc, #456]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a71      	ldr	r2, [pc, #452]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e021      	b.n	8004d1c <HAL_RCC_OscConfig+0x19c>
 8004cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x184>
 8004cea:	4b6a      	ldr	r3, [pc, #424]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a69      	ldr	r2, [pc, #420]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a66      	ldr	r2, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e00b      	b.n	8004d1c <HAL_RCC_OscConfig+0x19c>
 8004d04:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a62      	ldr	r2, [pc, #392]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b60      	ldr	r3, [pc, #384]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a5f      	ldr	r2, [pc, #380]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d059      	beq.n	8004de0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7ff fc66 	bl	80045fc <HAL_GetTick>
 8004d30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d36:	f7ff fc61 	bl	80045fc <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d902      	bls.n	8004d4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	f000 bf67 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
 8004d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d50:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004d60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_OscConfig+0x1fe>
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	e015      	b.n	8004daa <HAL_RCC_OscConfig+0x22a>
 8004d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d82:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d96:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d9a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004d9e:	fa93 f3a3 	rbit	r3, r3
 8004da2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004da6:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dae:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004db2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004db6:	fa92 f2a2 	rbit	r2, r2
 8004dba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004dbe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004dc2:	fab2 f282 	clz	r2, r2
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	f042 0220 	orr.w	r2, r2, #32
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f002 021f 	and.w	r2, r2, #31
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ab      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1b6>
 8004dde:	e05c      	b.n	8004e9a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de0:	f7ff fc0c 	bl	80045fc <HAL_GetTick>
 8004de4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de8:	e00a      	b.n	8004e00 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dea:	f7ff fc07 	bl	80045fc <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d902      	bls.n	8004e00 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	f000 bf0d 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
 8004e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e04:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004e14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e18:	fab3 f383 	clz	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2b2>
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	e015      	b.n	8004e5e <HAL_RCC_OscConfig+0x2de>
 8004e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e4a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004e4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <HAL_RCC_OscConfig+0x314>)
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e62:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004e66:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004e6a:	fa92 f2a2 	rbit	r2, r2
 8004e6e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004e72:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004e76:	fab2 f282 	clz	r2, r2
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	f042 0220 	orr.w	r2, r2, #32
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	f002 021f 	and.w	r2, r2, #31
 8004e86:	2101      	movs	r1, #1
 8004e88:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ab      	bne.n	8004dea <HAL_RCC_OscConfig+0x26a>
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_OscConfig+0x31a>
 8004e94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 817f 	beq.w	80051ae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004eb0:	4ba7      	ldr	r3, [pc, #668]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ebc:	4ba4      	ldr	r3, [pc, #656]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d173      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x430>
 8004ec8:	4ba1      	ldr	r3, [pc, #644]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	d16c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x430>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004ee0:	fa93 f3a3 	rbit	r3, r3
 8004ee4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004ee8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d102      	bne.n	8004f06 <HAL_RCC_OscConfig+0x386>
 8004f00:	4b93      	ldr	r3, [pc, #588]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	e013      	b.n	8004f2e <HAL_RCC_OscConfig+0x3ae>
 8004f06:	2302      	movs	r3, #2
 8004f08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004f1e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004f22:	fa93 f3a3 	rbit	r3, r3
 8004f26:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004f2a:	4b89      	ldr	r3, [pc, #548]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004f34:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004f38:	fa92 f2a2 	rbit	r2, r2
 8004f3c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004f40:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004f44:	fab2 f282 	clz	r2, r2
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	f042 0220 	orr.w	r2, r2, #32
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	f002 021f 	and.w	r2, r2, #31
 8004f54:	2101      	movs	r1, #1
 8004f56:	fa01 f202 	lsl.w	r2, r1, r2
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCC_OscConfig+0x3f6>
 8004f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d002      	beq.n	8004f76 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f000 be52 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f76:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	21f8      	movs	r1, #248	; 0xf8
 8004f8c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f90:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004f94:	fa91 f1a1 	rbit	r1, r1
 8004f98:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004f9c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004fa0:	fab1 f181 	clz	r1, r1
 8004fa4:	b2c9      	uxtb	r1, r1
 8004fa6:	408b      	lsls	r3, r1
 8004fa8:	4969      	ldr	r1, [pc, #420]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	e0fe      	b.n	80051ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8088 	beq.w	80050d2 <HAL_RCC_OscConfig+0x552>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004fcc:	fa93 f3a3 	rbit	r3, r3
 8004fd0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004fd4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd8:	fab3 f383 	clz	r3, r3
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fe2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2301      	movs	r3, #1
 8004fec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7ff fb05 	bl	80045fc <HAL_GetTick>
 8004ff2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff8:	f7ff fb00 	bl	80045fc <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d902      	bls.n	800500e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	f000 be06 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
 800500e:	2302      	movs	r3, #2
 8005010:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005014:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005020:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	fab3 f383 	clz	r3, r3
 8005028:	b2db      	uxtb	r3, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <HAL_RCC_OscConfig+0x4be>
 8005038:	4b45      	ldr	r3, [pc, #276]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	e013      	b.n	8005066 <HAL_RCC_OscConfig+0x4e6>
 800503e:	2302      	movs	r3, #2
 8005040:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005044:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005050:	2302      	movs	r3, #2
 8005052:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005056:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2202      	movs	r2, #2
 8005068:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800506c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005070:	fa92 f2a2 	rbit	r2, r2
 8005074:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005078:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800507c:	fab2 f282 	clz	r2, r2
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	f042 0220 	orr.w	r2, r2, #32
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	f002 021f 	and.w	r2, r2, #31
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f202 	lsl.w	r2, r1, r2
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0af      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	21f8      	movs	r1, #248	; 0xf8
 80050ae:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80050b6:	fa91 f1a1 	rbit	r1, r1
 80050ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80050be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80050c2:	fab1 f181 	clz	r1, r1
 80050c6:	b2c9      	uxtb	r1, r1
 80050c8:	408b      	lsls	r3, r1
 80050ca:	4921      	ldr	r1, [pc, #132]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]
 80050d0:	e06d      	b.n	80051ae <HAL_RCC_OscConfig+0x62e>
 80050d2:	2301      	movs	r3, #1
 80050d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80050dc:	fa93 f3a3 	rbit	r3, r3
 80050e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80050e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e8:	fab3 f383 	clz	r3, r3
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	461a      	mov	r2, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7ff fa7d 	bl	80045fc <HAL_GetTick>
 8005102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005106:	e00a      	b.n	800511e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005108:	f7ff fa78 	bl	80045fc <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d902      	bls.n	800511e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	f000 bd7e 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
 800511e:	2302      	movs	r3, #2
 8005120:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005134:	fab3 f383 	clz	r3, r3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d105      	bne.n	8005154 <HAL_RCC_OscConfig+0x5d4>
 8005148:	4b01      	ldr	r3, [pc, #4]	; (8005150 <HAL_RCC_OscConfig+0x5d0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	e016      	b.n	800517c <HAL_RCC_OscConfig+0x5fc>
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	2302      	movs	r3, #2
 8005156:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005166:	2302      	movs	r3, #2
 8005168:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800516c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005170:	fa93 f3a3 	rbit	r3, r3
 8005174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005178:	4bbf      	ldr	r3, [pc, #764]	; (8005478 <HAL_RCC_OscConfig+0x8f8>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2202      	movs	r2, #2
 800517e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005182:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005186:	fa92 f2a2 	rbit	r2, r2
 800518a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800518e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005192:	fab2 f282 	clz	r2, r2
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	f042 0220 	orr.w	r2, r2, #32
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	f002 021f 	and.w	r2, r2, #31
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f202 	lsl.w	r2, r1, r2
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ac      	bne.n	8005108 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8113 	beq.w	80053ea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d07c      	beq.n	80052ce <HAL_RCC_OscConfig+0x74e>
 80051d4:	2301      	movs	r3, #1
 80051d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051de:	fa93 f3a3 	rbit	r3, r3
 80051e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80051e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	4ba2      	ldr	r3, [pc, #648]	; (800547c <HAL_RCC_OscConfig+0x8fc>)
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	461a      	mov	r2, r3
 80051fa:	2301      	movs	r3, #1
 80051fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7ff f9fd 	bl	80045fc <HAL_GetTick>
 8005202:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005208:	f7ff f9f8 	bl	80045fc <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d902      	bls.n	800521e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	f000 bcfe 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
 800521e:	2302      	movs	r3, #2
 8005220:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005228:	fa93 f2a3 	rbit	r2, r3
 800522c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005230:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800523a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800523e:	2202      	movs	r2, #2
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005246:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	fa93 f2a3 	rbit	r2, r3
 8005250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800525e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005262:	2202      	movs	r2, #2
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800526a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	fa93 f2a3 	rbit	r2, r3
 8005274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005278:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800527c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527e:	4b7e      	ldr	r3, [pc, #504]	; (8005478 <HAL_RCC_OscConfig+0x8f8>)
 8005280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005286:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800528a:	2102      	movs	r1, #2
 800528c:	6019      	str	r1, [r3, #0]
 800528e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005292:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	fa93 f1a3 	rbit	r1, r3
 800529c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052a4:	6019      	str	r1, [r3, #0]
  return result;
 80052a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	2101      	movs	r1, #1
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d09d      	beq.n	8005208 <HAL_RCC_OscConfig+0x688>
 80052cc:	e08d      	b.n	80053ea <HAL_RCC_OscConfig+0x86a>
 80052ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	fa93 f2a3 	rbit	r2, r3
 80052e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052f0:	601a      	str	r2, [r3, #0]
  return result;
 80052f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fc:	fab3 f383 	clz	r3, r3
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	4b5d      	ldr	r3, [pc, #372]	; (800547c <HAL_RCC_OscConfig+0x8fc>)
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	461a      	mov	r2, r3
 800530c:	2300      	movs	r3, #0
 800530e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005310:	f7ff f974 	bl	80045fc <HAL_GetTick>
 8005314:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005318:	e00a      	b.n	8005330 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531a:	f7ff f96f 	bl	80045fc <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d902      	bls.n	8005330 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	f000 bc75 	b.w	8005c1a <HAL_RCC_OscConfig+0x109a>
 8005330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005334:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005338:	2202      	movs	r2, #2
 800533a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005340:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	fa93 f2a3 	rbit	r2, r3
 800534a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800534e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800535c:	2202      	movs	r2, #2
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	fa93 f2a3 	rbit	r2, r3
 800536e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800537c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005380:	2202      	movs	r2, #2
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005388:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	fa93 f2a3 	rbit	r2, r3
 8005392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005396:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800539a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <HAL_RCC_OscConfig+0x8f8>)
 800539e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80053a8:	2102      	movs	r1, #2
 80053aa:	6019      	str	r1, [r3, #0]
 80053ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	fa93 f1a3 	rbit	r1, r3
 80053ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053be:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053c2:	6019      	str	r1, [r3, #0]
  return result;
 80053c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	2101      	movs	r1, #1
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d197      	bne.n	800531a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 81a5 	beq.w	800574a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005406:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <HAL_RCC_OscConfig+0x8f8>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d116      	bne.n	8005440 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCC_OscConfig+0x8f8>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_RCC_OscConfig+0x8f8>)
 8005418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541c:	61d3      	str	r3, [r2, #28]
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_RCC_OscConfig+0x8f8>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800542a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005438:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <HAL_RCC_OscConfig+0x900>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d121      	bne.n	8005490 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544c:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <HAL_RCC_OscConfig+0x900>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <HAL_RCC_OscConfig+0x900>)
 8005452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005456:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005458:	f7ff f8d0 	bl	80045fc <HAL_GetTick>
 800545c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005460:	e010      	b.n	8005484 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005462:	f7ff f8cb 	bl	80045fc <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	; 0x64
 8005470:	d908      	bls.n	8005484 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e3d1      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000
 800547c:	10908120 	.word	0x10908120
 8005480:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005484:	4b8d      	ldr	r3, [pc, #564]	; (80056bc <HAL_RCC_OscConfig+0xb3c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0e8      	beq.n	8005462 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005494:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d106      	bne.n	80054ae <HAL_RCC_OscConfig+0x92e>
 80054a0:	4b87      	ldr	r3, [pc, #540]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	4a86      	ldr	r2, [pc, #536]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	6213      	str	r3, [r2, #32]
 80054ac:	e035      	b.n	800551a <HAL_RCC_OscConfig+0x99a>
 80054ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10c      	bne.n	80054d8 <HAL_RCC_OscConfig+0x958>
 80054be:	4b80      	ldr	r3, [pc, #512]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	4a7f      	ldr	r2, [pc, #508]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	6213      	str	r3, [r2, #32]
 80054ca:	4b7d      	ldr	r3, [pc, #500]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4a7c      	ldr	r2, [pc, #496]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	6213      	str	r3, [r2, #32]
 80054d6:	e020      	b.n	800551a <HAL_RCC_OscConfig+0x99a>
 80054d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d10c      	bne.n	8005502 <HAL_RCC_OscConfig+0x982>
 80054e8:	4b75      	ldr	r3, [pc, #468]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4a74      	ldr	r2, [pc, #464]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054ee:	f043 0304 	orr.w	r3, r3, #4
 80054f2:	6213      	str	r3, [r2, #32]
 80054f4:	4b72      	ldr	r3, [pc, #456]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	4a71      	ldr	r2, [pc, #452]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6213      	str	r3, [r2, #32]
 8005500:	e00b      	b.n	800551a <HAL_RCC_OscConfig+0x99a>
 8005502:	4b6f      	ldr	r3, [pc, #444]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	4a6e      	ldr	r2, [pc, #440]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	6213      	str	r3, [r2, #32]
 800550e:	4b6c      	ldr	r3, [pc, #432]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	4a6b      	ldr	r2, [pc, #428]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800551a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800551e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8081 	beq.w	800562e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552c:	f7ff f866 	bl	80045fc <HAL_GetTick>
 8005530:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005534:	e00b      	b.n	800554e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005536:	f7ff f861 	bl	80045fc <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e365      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
 800554e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005552:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005556:	2202      	movs	r2, #2
 8005558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800555e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f2a3 	rbit	r2, r3
 8005568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800556c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005576:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800557a:	2202      	movs	r2, #2
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005582:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	fa93 f2a3 	rbit	r2, r3
 800558c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005590:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005594:	601a      	str	r2, [r3, #0]
  return result;
 8005596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800559a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800559e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a0:	fab3 f383 	clz	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f043 0302 	orr.w	r3, r3, #2
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_OscConfig+0xa3a>
 80055b4:	4b42      	ldr	r3, [pc, #264]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	e013      	b.n	80055e2 <HAL_RCC_OscConfig+0xa62>
 80055ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80055c2:	2202      	movs	r2, #2
 80055c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	fa93 f2a3 	rbit	r2, r3
 80055d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055ea:	2102      	movs	r1, #2
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	fa92 f1a2 	rbit	r1, r2
 80055fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005600:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005604:	6011      	str	r1, [r2, #0]
  return result;
 8005606:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800560a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	fab2 f282 	clz	r2, r2
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	f002 021f 	and.w	r2, r2, #31
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f202 	lsl.w	r2, r1, r2
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d084      	beq.n	8005536 <HAL_RCC_OscConfig+0x9b6>
 800562c:	e083      	b.n	8005736 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562e:	f7fe ffe5 	bl	80045fc <HAL_GetTick>
 8005632:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005636:	e00b      	b.n	8005650 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005638:	f7fe ffe0 	bl	80045fc <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	f241 3288 	movw	r2, #5000	; 0x1388
 8005648:	4293      	cmp	r3, r2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e2e4      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
 8005650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005654:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005658:	2202      	movs	r2, #2
 800565a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005660:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	fa93 f2a3 	rbit	r2, r3
 800566a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800566e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005678:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800567c:	2202      	movs	r2, #2
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005684:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	fa93 f2a3 	rbit	r2, r3
 800568e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005692:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005696:	601a      	str	r2, [r3, #0]
  return result;
 8005698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800569c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80056a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d106      	bne.n	80056c4 <HAL_RCC_OscConfig+0xb44>
 80056b6:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <HAL_RCC_OscConfig+0xb40>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	e017      	b.n	80056ec <HAL_RCC_OscConfig+0xb6c>
 80056bc:	40007000 	.word	0x40007000
 80056c0:	40021000 	.word	0x40021000
 80056c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80056cc:	2202      	movs	r2, #2
 80056ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	fa93 f2a3 	rbit	r2, r3
 80056de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056e2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	4bb3      	ldr	r3, [pc, #716]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056f4:	2102      	movs	r1, #2
 80056f6:	6011      	str	r1, [r2, #0]
 80056f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	fa92 f1a2 	rbit	r1, r2
 8005706:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800570a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800570e:	6011      	str	r1, [r2, #0]
  return result;
 8005710:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005714:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	fab2 f282 	clz	r2, r2
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	f002 021f 	and.w	r2, r2, #31
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d180      	bne.n	8005638 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005736:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800573e:	4b9e      	ldr	r3, [pc, #632]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4a9d      	ldr	r2, [pc, #628]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005748:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800574e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 825e 	beq.w	8005c18 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800575c:	4b96      	ldr	r3, [pc, #600]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 030c 	and.w	r3, r3, #12
 8005764:	2b08      	cmp	r3, #8
 8005766:	f000 821f 	beq.w	8005ba8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800576e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b02      	cmp	r3, #2
 8005778:	f040 8170 	bne.w	8005a5c <HAL_RCC_OscConfig+0xedc>
 800577c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005780:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800578e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	fa93 f2a3 	rbit	r2, r3
 8005798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800579c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80057a0:	601a      	str	r2, [r3, #0]
  return result;
 80057a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80057aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ac:	fab3 f383 	clz	r3, r3
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	461a      	mov	r2, r3
 80057be:	2300      	movs	r3, #0
 80057c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c2:	f7fe ff1b 	bl	80045fc <HAL_GetTick>
 80057c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ca:	e009      	b.n	80057e0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fe ff16 	bl	80045fc <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e21c      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
 80057e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	fa93 f2a3 	rbit	r2, r3
 80057fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005800:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005804:	601a      	str	r2, [r3, #0]
  return result;
 8005806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800580a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800580e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d102      	bne.n	800582a <HAL_RCC_OscConfig+0xcaa>
 8005824:	4b64      	ldr	r3, [pc, #400]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	e027      	b.n	800587a <HAL_RCC_OscConfig+0xcfa>
 800582a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800582e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800583c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	fa93 f2a3 	rbit	r2, r3
 8005846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800584a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005854:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005862:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	fa93 f2a3 	rbit	r2, r3
 800586c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005870:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	4b50      	ldr	r3, [pc, #320]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800587e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005882:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005886:	6011      	str	r1, [r2, #0]
 8005888:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800588c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	fa92 f1a2 	rbit	r1, r2
 8005896:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800589a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800589e:	6011      	str	r1, [r2, #0]
  return result;
 80058a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058a4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	fab2 f282 	clz	r2, r2
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	f042 0220 	orr.w	r2, r2, #32
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	f002 021f 	and.w	r2, r2, #31
 80058ba:	2101      	movs	r1, #1
 80058bc:	fa01 f202 	lsl.w	r2, r1, r2
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d182      	bne.n	80057cc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058c6:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f023 020f 	bic.w	r2, r3, #15
 80058ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	4937      	ldr	r1, [pc, #220]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	62cb      	str	r3, [r1, #44]	; 0x2c
 80058e0:	4b35      	ldr	r3, [pc, #212]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80058e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a19      	ldr	r1, [r3, #32]
 80058f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	430b      	orrs	r3, r1
 8005902:	492d      	ldr	r1, [pc, #180]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 8005904:	4313      	orrs	r3, r2
 8005906:	604b      	str	r3, [r1, #4]
 8005908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800590c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800591a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	fa93 f2a3 	rbit	r2, r3
 8005924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005928:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800592c:	601a      	str	r2, [r3, #0]
  return result;
 800592e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005932:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005936:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005942:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	461a      	mov	r2, r3
 800594a:	2301      	movs	r3, #1
 800594c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594e:	f7fe fe55 	bl	80045fc <HAL_GetTick>
 8005952:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005956:	e009      	b.n	800596c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005958:	f7fe fe50 	bl	80045fc <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e156      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
 800596c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005970:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800597e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	fa93 f2a3 	rbit	r2, r3
 8005988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800598c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005990:	601a      	str	r2, [r3, #0]
  return result;
 8005992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005996:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800599a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800599c:	fab3 f383 	clz	r3, r3
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d105      	bne.n	80059bc <HAL_RCC_OscConfig+0xe3c>
 80059b0:	4b01      	ldr	r3, [pc, #4]	; (80059b8 <HAL_RCC_OscConfig+0xe38>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	e02a      	b.n	8005a0c <HAL_RCC_OscConfig+0xe8c>
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80059c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ce:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	fa93 f2a3 	rbit	r2, r3
 80059d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80059ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059f4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	fa93 f2a3 	rbit	r2, r3
 80059fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a02:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	4b86      	ldr	r3, [pc, #536]	; (8005c24 <HAL_RCC_OscConfig+0x10a4>)
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a10:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a18:	6011      	str	r1, [r2, #0]
 8005a1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a1e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	fa92 f1a2 	rbit	r1, r2
 8005a28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a2c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a30:	6011      	str	r1, [r2, #0]
  return result;
 8005a32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a36:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	fab2 f282 	clz	r2, r2
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	f042 0220 	orr.w	r2, r2, #32
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	f002 021f 	and.w	r2, r2, #31
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f43f af7f 	beq.w	8005958 <HAL_RCC_OscConfig+0xdd8>
 8005a5a:	e0dd      	b.n	8005c18 <HAL_RCC_OscConfig+0x1098>
 8005a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	fa93 f2a3 	rbit	r2, r3
 8005a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a80:	601a      	str	r2, [r3, #0]
  return result;
 8005a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a86:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005a8a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8c:	fab3 f383 	clz	r3, r3
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa2:	f7fe fdab 	bl	80045fc <HAL_GetTick>
 8005aa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aaa:	e009      	b.n	8005ac0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fe fda6 	bl	80045fc <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e0ac      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
 8005ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ac4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	fa93 f2a3 	rbit	r2, r3
 8005adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ae0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005ae4:	601a      	str	r2, [r3, #0]
  return result;
 8005ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005aea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005aee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af0:	fab3 f383 	clz	r3, r3
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d102      	bne.n	8005b0a <HAL_RCC_OscConfig+0xf8a>
 8005b04:	4b47      	ldr	r3, [pc, #284]	; (8005c24 <HAL_RCC_OscConfig+0x10a4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	e027      	b.n	8005b5a <HAL_RCC_OscConfig+0xfda>
 8005b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b0e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b1c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	fa93 f2a3 	rbit	r2, r3
 8005b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b2a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b34:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	fa93 f2a3 	rbit	r2, r3
 8005b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b50:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_RCC_OscConfig+0x10a4>)
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b66:	6011      	str	r1, [r2, #0]
 8005b68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b6c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	fa92 f1a2 	rbit	r1, r2
 8005b76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b7a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005b7e:	6011      	str	r1, [r2, #0]
  return result;
 8005b80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b84:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	fab2 f282 	clz	r2, r2
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	f042 0220 	orr.w	r2, r2, #32
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	f002 021f 	and.w	r2, r2, #31
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d182      	bne.n	8005aac <HAL_RCC_OscConfig+0xf2c>
 8005ba6:	e037      	b.n	8005c18 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e02e      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bbc:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_RCC_OscConfig+0x10a4>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005bc4:	4b17      	ldr	r3, [pc, #92]	; (8005c24 <HAL_RCC_OscConfig+0x10a4>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005bd0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d117      	bne.n	8005c14 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005be4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005be8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bf0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d10b      	bne.n	8005c14 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000

08005c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b09e      	sub	sp, #120	; 0x78
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e162      	b.n	8005f06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c40:	4b90      	ldr	r3, [pc, #576]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d910      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4e:	4b8d      	ldr	r3, [pc, #564]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f023 0207 	bic.w	r2, r3, #7
 8005c56:	498b      	ldr	r1, [pc, #556]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	4b89      	ldr	r3, [pc, #548]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e14a      	b.n	8005f06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7c:	4b82      	ldr	r3, [pc, #520]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	497f      	ldr	r1, [pc, #508]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 80dc 	beq.w	8005e54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d13c      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xf6>
 8005ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ca8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cac:	fa93 f3a3 	rbit	r3, r3
 8005cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb4:	fab3 f383 	clz	r3, r3
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d102      	bne.n	8005cce <HAL_RCC_ClockConfig+0xa6>
 8005cc8:	4b6f      	ldr	r3, [pc, #444]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	e00f      	b.n	8005cee <HAL_RCC_ClockConfig+0xc6>
 8005cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cd6:	fa93 f3a3 	rbit	r3, r3
 8005cda:	667b      	str	r3, [r7, #100]	; 0x64
 8005cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce4:	fa93 f3a3 	rbit	r3, r3
 8005ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cea:	4b67      	ldr	r3, [pc, #412]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cf6:	fa92 f2a2 	rbit	r2, r2
 8005cfa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cfe:	fab2 f282 	clz	r2, r2
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	f042 0220 	orr.w	r2, r2, #32
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	f002 021f 	and.w	r2, r2, #31
 8005d0e:	2101      	movs	r1, #1
 8005d10:	fa01 f202 	lsl.w	r2, r1, r2
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d17b      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e0f3      	b.n	8005f06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d13c      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x178>
 8005d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2e:	fa93 f3a3 	rbit	r3, r3
 8005d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d36:	fab3 f383 	clz	r3, r3
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d102      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x128>
 8005d4a:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	e00f      	b.n	8005d70 <HAL_RCC_ClockConfig+0x148>
 8005d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d58:	fa93 f3a3 	rbit	r3, r3
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d62:	643b      	str	r3, [r7, #64]	; 0x40
 8005d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d66:	fa93 f3a3 	rbit	r3, r3
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6c:	4b46      	ldr	r3, [pc, #280]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d74:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d78:	fa92 f2a2 	rbit	r2, r2
 8005d7c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d80:	fab2 f282 	clz	r2, r2
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	f042 0220 	orr.w	r2, r2, #32
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	f002 021f 	and.w	r2, r2, #31
 8005d90:	2101      	movs	r1, #1
 8005d92:	fa01 f202 	lsl.w	r2, r1, r2
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d13a      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0b2      	b.n	8005f06 <HAL_RCC_ClockConfig+0x2de>
 8005da0:	2302      	movs	r3, #2
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	fa93 f3a3 	rbit	r3, r3
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dae:	fab3 f383 	clz	r3, r3
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d102      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0x1a0>
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	e00d      	b.n	8005de4 <HAL_RCC_ClockConfig+0x1bc>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	fa93 f3a3 	rbit	r3, r3
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	fa93 f3a3 	rbit	r3, r3
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2202      	movs	r2, #2
 8005de6:	61ba      	str	r2, [r7, #24]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	fa92 f2a2 	rbit	r2, r2
 8005dee:	617a      	str	r2, [r7, #20]
  return result;
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	fab2 f282 	clz	r2, r2
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	f042 0220 	orr.w	r2, r2, #32
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	f002 021f 	and.w	r2, r2, #31
 8005e02:	2101      	movs	r1, #1
 8005e04:	fa01 f202 	lsl.w	r2, r1, r2
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e079      	b.n	8005f06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e12:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f023 0203 	bic.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	491a      	ldr	r1, [pc, #104]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e24:	f7fe fbea 	bl	80045fc <HAL_GetTick>
 8005e28:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2a:	e00a      	b.n	8005e42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e2c:	f7fe fbe6 	bl	80045fc <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e061      	b.n	8005f06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <HAL_RCC_ClockConfig+0x260>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 020c 	and.w	r2, r3, #12
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d1eb      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d214      	bcs.n	8005e8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e62:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 0207 	bic.w	r2, r3, #7
 8005e6a:	4906      	ldr	r1, [pc, #24]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <HAL_RCC_ClockConfig+0x25c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e040      	b.n	8005f06 <HAL_RCC_ClockConfig+0x2de>
 8005e84:	40022000 	.word	0x40022000
 8005e88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e98:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <HAL_RCC_ClockConfig+0x2e8>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	491a      	ldr	r1, [pc, #104]	; (8005f10 <HAL_RCC_ClockConfig+0x2e8>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eb6:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <HAL_RCC_ClockConfig+0x2e8>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4912      	ldr	r1, [pc, #72]	; (8005f10 <HAL_RCC_ClockConfig+0x2e8>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005eca:	f000 f829 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8005ece:	4601      	mov	r1, r0
 8005ed0:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <HAL_RCC_ClockConfig+0x2e8>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed8:	22f0      	movs	r2, #240	; 0xf0
 8005eda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	fa92 f2a2 	rbit	r2, r2
 8005ee2:	60fa      	str	r2, [r7, #12]
  return result;
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	fab2 f282 	clz	r2, r2
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	40d3      	lsrs	r3, r2
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <HAL_RCC_ClockConfig+0x2ec>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ef6:	4a08      	ldr	r2, [pc, #32]	; (8005f18 <HAL_RCC_ClockConfig+0x2f0>)
 8005ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005efa:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <HAL_RCC_ClockConfig+0x2f4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fb4c 	bl	800459c <HAL_InitTick>
  
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3778      	adds	r7, #120	; 0x78
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000
 8005f14:	08008df0 	.word	0x08008df0
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	20000004 	.word	0x20000004

08005f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b08b      	sub	sp, #44	; 0x2c
 8005f24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005f3a:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d002      	beq.n	8005f50 <HAL_RCC_GetSysClockFreq+0x30>
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0x36>
 8005f4e:	e03f      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005f52:	623b      	str	r3, [r7, #32]
      break;
 8005f54:	e03f      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005f5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005f60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	fa92 f2a2 	rbit	r2, r2
 8005f68:	607a      	str	r2, [r7, #4]
  return result;
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	fab2 f282 	clz	r2, r2
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	40d3      	lsrs	r3, r2
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f76:	5cd3      	ldrb	r3, [r2, r3]
 8005f78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	220f      	movs	r2, #15
 8005f84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	fa92 f2a2 	rbit	r2, r2
 8005f8c:	60fa      	str	r2, [r7, #12]
  return result;
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	fab2 f282 	clz	r2, r2
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	40d3      	lsrs	r3, r2
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f9a:	5cd3      	ldrb	r3, [r2, r3]
 8005f9c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fa8:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	e007      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fba:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	623b      	str	r3, [r7, #32]
      break;
 8005fce:	e002      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fd0:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005fd2:	623b      	str	r3, [r7, #32]
      break;
 8005fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	372c      	adds	r7, #44	; 0x2c
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	007a1200 	.word	0x007a1200
 8005fec:	08008e08 	.word	0x08008e08
 8005ff0:	08008e18 	.word	0x08008e18

08005ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	20000000 	.word	0x20000000

08006008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800600e:	f7ff fff1 	bl	8005ff4 <HAL_RCC_GetHCLKFreq>
 8006012:	4601      	mov	r1, r0
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800601c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006020:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	fa92 f2a2 	rbit	r2, r2
 8006028:	603a      	str	r2, [r7, #0]
  return result;
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	fab2 f282 	clz	r2, r2
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	40d3      	lsrs	r3, r2
 8006034:	4a04      	ldr	r2, [pc, #16]	; (8006048 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006036:	5cd3      	ldrb	r3, [r2, r3]
 8006038:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40021000 	.word	0x40021000
 8006048:	08008e00 	.word	0x08008e00

0800604c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006052:	f7ff ffcf 	bl	8005ff4 <HAL_RCC_GetHCLKFreq>
 8006056:	4601      	mov	r1, r0
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006060:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006064:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	fa92 f2a2 	rbit	r2, r2
 800606c:	603a      	str	r2, [r7, #0]
  return result;
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	fab2 f282 	clz	r2, r2
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	40d3      	lsrs	r3, r2
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <HAL_RCC_GetPCLK2Freq+0x40>)
 800607a:	5cd3      	ldrb	r3, [r2, r3]
 800607c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000
 800608c:	08008e00 	.word	0x08008e00

08006090 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b092      	sub	sp, #72	; 0x48
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 80d4 	beq.w	800625c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060b4:	4b4e      	ldr	r3, [pc, #312]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10e      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060c0:	4b4b      	ldr	r3, [pc, #300]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	4a4a      	ldr	r2, [pc, #296]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ca:	61d3      	str	r3, [r2, #28]
 80060cc:	4b48      	ldr	r3, [pc, #288]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060de:	4b45      	ldr	r3, [pc, #276]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d118      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ea:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a41      	ldr	r2, [pc, #260]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f6:	f7fe fa81 	bl	80045fc <HAL_GetTick>
 80060fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fe:	f7fe fa7d 	bl	80045fc <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b64      	cmp	r3, #100	; 0x64
 800610a:	d901      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e1d6      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006110:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800611c:	4b34      	ldr	r3, [pc, #208]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8084 	beq.w	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006138:	429a      	cmp	r2, r3
 800613a:	d07c      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800613c:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800614a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006156:	fab3 f383 	clz	r3, r3
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	461a      	mov	r2, r3
 8006166:	2301      	movs	r3, #1
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800616e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	fa93 f3a3 	rbit	r3, r3
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800617a:	fab3 f383 	clz	r3, r3
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	461a      	mov	r2, r3
 800618a:	2300      	movs	r3, #0
 800618c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800618e:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04b      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619e:	f7fe fa2d 	bl	80045fc <HAL_GetTick>
 80061a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a4:	e00a      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a6:	f7fe fa29 	bl	80045fc <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d901      	bls.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e180      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80061bc:	2302      	movs	r3, #2
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	fa93 f3a3 	rbit	r3, r3
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
 80061c8:	2302      	movs	r3, #2
 80061ca:	623b      	str	r3, [r7, #32]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	fa93 f3a3 	rbit	r3, r3
 80061d2:	61fb      	str	r3, [r7, #28]
  return result;
 80061d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d6:	fab3 f383 	clz	r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d108      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80061ea:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	e00d      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80061f0:	40021000 	.word	0x40021000
 80061f4:	40007000 	.word	0x40007000
 80061f8:	10908100 	.word	0x10908100
 80061fc:	2302      	movs	r3, #2
 80061fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	fa93 f3a3 	rbit	r3, r3
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	4b9a      	ldr	r3, [pc, #616]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	2202      	movs	r2, #2
 800620e:	613a      	str	r2, [r7, #16]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	fa92 f2a2 	rbit	r2, r2
 8006216:	60fa      	str	r2, [r7, #12]
  return result;
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	fab2 f282 	clz	r2, r2
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	f002 021f 	and.w	r2, r2, #31
 800622a:	2101      	movs	r1, #1
 800622c:	fa01 f202 	lsl.w	r2, r1, r2
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0b7      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006236:	4b8f      	ldr	r3, [pc, #572]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	498c      	ldr	r1, [pc, #560]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006244:	4313      	orrs	r3, r2
 8006246:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006248:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800624c:	2b01      	cmp	r3, #1
 800624e:	d105      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006250:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	4a87      	ldr	r2, [pc, #540]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800625a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006268:	4b82      	ldr	r3, [pc, #520]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	f023 0203 	bic.w	r2, r3, #3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	497f      	ldr	r1, [pc, #508]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006276:	4313      	orrs	r3, r2
 8006278:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006286:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	4978      	ldr	r1, [pc, #480]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006294:	4313      	orrs	r3, r2
 8006296:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062a4:	4b73      	ldr	r3, [pc, #460]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	4970      	ldr	r1, [pc, #448]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062c2:	4b6c      	ldr	r3, [pc, #432]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	f023 0210 	bic.w	r2, r3, #16
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4969      	ldr	r1, [pc, #420]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80062e0:	4b64      	ldr	r3, [pc, #400]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ec:	4961      	ldr	r1, [pc, #388]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062fe:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f023 0220 	bic.w	r2, r3, #32
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	495a      	ldr	r1, [pc, #360]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800630c:	4313      	orrs	r3, r2
 800630e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800631c:	4b55      	ldr	r3, [pc, #340]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	4952      	ldr	r1, [pc, #328]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800632a:	4313      	orrs	r3, r2
 800632c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800633a:	4b4e      	ldr	r3, [pc, #312]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	494b      	ldr	r1, [pc, #300]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006348:	4313      	orrs	r3, r2
 800634a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006358:	4b46      	ldr	r3, [pc, #280]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	4943      	ldr	r1, [pc, #268]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006366:	4313      	orrs	r3, r2
 8006368:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006376:	4b3f      	ldr	r3, [pc, #252]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	493c      	ldr	r1, [pc, #240]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006384:	4313      	orrs	r3, r2
 8006386:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006394:	4b37      	ldr	r3, [pc, #220]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	4934      	ldr	r1, [pc, #208]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80063b2:	4b30      	ldr	r3, [pc, #192]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	492d      	ldr	r1, [pc, #180]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80063d0:	4b28      	ldr	r3, [pc, #160]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063dc:	4925      	ldr	r1, [pc, #148]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	491e      	ldr	r1, [pc, #120]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	4916      	ldr	r1, [pc, #88]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800641a:	4313      	orrs	r3, r2
 800641c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	490f      	ldr	r1, [pc, #60]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006438:	4313      	orrs	r3, r2
 800643a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006454:	4907      	ldr	r1, [pc, #28]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006456:	4313      	orrs	r3, r2
 8006458:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00c      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006466:	4b03      	ldr	r3, [pc, #12]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000
 8006478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647a:	4913      	ldr	r1, [pc, #76]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800647c:	4313      	orrs	r3, r2
 800647e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800648c:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006498:	490b      	ldr	r1, [pc, #44]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800649a:	4313      	orrs	r3, r2
 800649c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	4904      	ldr	r1, [pc, #16]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3748      	adds	r7, #72	; 0x48
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40021000 	.word	0x40021000

080064cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064d0:	e7fe      	b.n	80064d0 <NMI_Handler+0x4>

080064d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064d2:	b480      	push	{r7}
 80064d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064d6:	e7fe      	b.n	80064d6 <HardFault_Handler+0x4>

080064d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064dc:	e7fe      	b.n	80064dc <MemManage_Handler+0x4>

080064de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064de:	b480      	push	{r7}
 80064e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064e2:	e7fe      	b.n	80064e2 <BusFault_Handler+0x4>

080064e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064e8:	e7fe      	b.n	80064e8 <UsageFault_Handler+0x4>

080064ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064ea:	b480      	push	{r7}
 80064ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064f6:	b480      	push	{r7}
 80064f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006502:	b480      	push	{r7}
 8006504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006506:	bf00      	nop
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr
	...

08006510 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006514:	4802      	ldr	r0, [pc, #8]	; (8006520 <ADC1_2_IRQHandler+0x10>)
 8006516:	f7fb f8a3 	bl	8001660 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000114 	.word	0x20000114

08006524 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006528:	4802      	ldr	r0, [pc, #8]	; (8006534 <TIM3_IRQHandler+0x10>)
 800652a:	f7fc fe03 	bl	8003134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	200000bc 	.word	0x200000bc

08006538 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800653c:	4802      	ldr	r0, [pc, #8]	; (8006548 <I2C1_EV_IRQHandler+0x10>)
 800653e:	f7fd fee5 	bl	800430c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006542:	bf00      	nop
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000164 	.word	0x20000164

0800654c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006550:	4802      	ldr	r0, [pc, #8]	; (800655c <USART1_IRQHandler+0x10>)
 8006552:	f000 fb79 	bl	8006c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	2000026c 	.word	0x2000026c

08006560 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006564:	4802      	ldr	r0, [pc, #8]	; (8006570 <USART2_IRQHandler+0x10>)
 8006566:	f000 fb6f 	bl	8006c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200002f0 	.word	0x200002f0

08006574 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8006578:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800657c:	f7fc fa02 	bl	8002984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006580:	bf00      	nop
 8006582:	bd80      	pop	{r7, pc}

08006584 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8006588:	4802      	ldr	r0, [pc, #8]	; (8006594 <SPI3_IRQHandler+0x10>)
 800658a:	f000 f91d 	bl	80067c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800658e:	bf00      	nop
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	200001e0 	.word	0x200001e0

08006598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065a0:	4a14      	ldr	r2, [pc, #80]	; (80065f4 <_sbrk+0x5c>)
 80065a2:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <_sbrk+0x60>)
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <_sbrk+0x64>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065b4:	4b11      	ldr	r3, [pc, #68]	; (80065fc <_sbrk+0x64>)
 80065b6:	4a12      	ldr	r2, [pc, #72]	; (8006600 <_sbrk+0x68>)
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065ba:	4b10      	ldr	r3, [pc, #64]	; (80065fc <_sbrk+0x64>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4413      	add	r3, r2
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d207      	bcs.n	80065d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065c8:	f001 ff64 	bl	8008494 <__errno>
 80065cc:	4603      	mov	r3, r0
 80065ce:	220c      	movs	r2, #12
 80065d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065d2:	f04f 33ff 	mov.w	r3, #4294967295
 80065d6:	e009      	b.n	80065ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065d8:	4b08      	ldr	r3, [pc, #32]	; (80065fc <_sbrk+0x64>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065de:	4b07      	ldr	r3, [pc, #28]	; (80065fc <_sbrk+0x64>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4413      	add	r3, r2
 80065e6:	4a05      	ldr	r2, [pc, #20]	; (80065fc <_sbrk+0x64>)
 80065e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065ea:	68fb      	ldr	r3, [r7, #12]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20010000 	.word	0x20010000
 80065f8:	00000400 	.word	0x00000400
 80065fc:	20000110 	.word	0x20000110
 8006600:	20002988 	.word	0x20002988

08006604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0c1      	b.n	800679a <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006626:	d009      	beq.n	800663c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	61da      	str	r2, [r3, #28]
 800662e:	e005      	b.n	800663c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d12a      	bne.n	80066a4 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a52      	ldr	r2, [pc, #328]	; (80067a4 <HAL_SPI_Init+0x1a0>)
 800665a:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a52      	ldr	r2, [pc, #328]	; (80067a8 <HAL_SPI_Init+0x1a4>)
 8006660:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a51      	ldr	r2, [pc, #324]	; (80067ac <HAL_SPI_Init+0x1a8>)
 8006666:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a51      	ldr	r2, [pc, #324]	; (80067b0 <HAL_SPI_Init+0x1ac>)
 800666c:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a50      	ldr	r2, [pc, #320]	; (80067b4 <HAL_SPI_Init+0x1b0>)
 8006672:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a50      	ldr	r2, [pc, #320]	; (80067b8 <HAL_SPI_Init+0x1b4>)
 8006678:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a4f      	ldr	r2, [pc, #316]	; (80067bc <HAL_SPI_Init+0x1b8>)
 800667e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a4f      	ldr	r2, [pc, #316]	; (80067c0 <HAL_SPI_Init+0x1bc>)
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a4b      	ldr	r2, [pc, #300]	; (80067c4 <HAL_SPI_Init+0x1c0>)
 8006696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066c4:	d902      	bls.n	80066cc <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	e002      	b.n	80066d2 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066da:	d007      	beq.n	80066ec <HAL_SPI_Init+0xe8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066e4:	d002      	beq.n	80066ec <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672e:	ea42 0103 	orr.w	r1, r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	0c1b      	lsrs	r3, r3, #16
 8006748:	f003 0204 	and.w	r2, r3, #4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006768:	ea42 0103 	orr.w	r1, r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006788:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	080069c9 	.word	0x080069c9
 80067a8:	080069db 	.word	0x080069db
 80067ac:	080069ed 	.word	0x080069ed
 80067b0:	080069ff 	.word	0x080069ff
 80067b4:	08006a11 	.word	0x08006a11
 80067b8:	08006a23 	.word	0x08006a23
 80067bc:	08006a35 	.word	0x08006a35
 80067c0:	08006a47 	.word	0x08006a47
 80067c4:	08004995 	.word	0x08004995

080067c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	099b      	lsrs	r3, r3, #6
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10f      	bne.n	800680c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	099b      	lsrs	r3, r3, #6
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
    return;
 800680a:	e0d8      	b.n	80069be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <HAL_SPI_IRQHandler+0x66>
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	09db      	lsrs	r3, r3, #7
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
    return;
 800682c:	e0c7      	b.n	80069be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <HAL_SPI_IRQHandler+0x8c>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	099b      	lsrs	r3, r3, #6
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 80b5 	beq.w	80069be <HAL_SPI_IRQHandler+0x1f6>
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80ae 	beq.w	80069be <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	099b      	lsrs	r3, r3, #6
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d023      	beq.n	80068b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b03      	cmp	r3, #3
 8006878:	d011      	beq.n	800689e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	e00b      	b.n	80068b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800689e:	2300      	movs	r3, #0
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	693b      	ldr	r3, [r7, #16]
        return;
 80068b4:	e083      	b.n	80069be <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d014      	beq.n	80068ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00c      	beq.n	8006912 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fc:	f043 0208 	orr.w	r2, r3, #8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006904:	2300      	movs	r3, #0
 8006906:	60bb      	str	r3, [r7, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006916:	2b00      	cmp	r3, #0
 8006918:	d050      	beq.n	80069bc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006928:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_SPI_IRQHandler+0x17e>
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d034      	beq.n	80069b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0203 	bic.w	r2, r2, #3
 8006954:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695a:	2b00      	cmp	r3, #0
 800695c:	d011      	beq.n	8006982 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006962:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <HAL_SPI_IRQHandler+0x1fc>)
 8006964:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	4618      	mov	r0, r3
 800696c:	f7fc f85a 	bl	8002a24 <HAL_DMA_Abort_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	2b00      	cmp	r3, #0
 8006988:	d017      	beq.n	80069ba <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <HAL_SPI_IRQHandler+0x1fc>)
 8006990:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	4618      	mov	r0, r3
 8006998:	f7fc f844 	bl	8002a24 <HAL_DMA_Abort_IT>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80069ae:	e004      	b.n	80069ba <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069b8:	e000      	b.n	80069bc <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80069ba:	bf00      	nop
    return;
 80069bc:	bf00      	nop
  }
}
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	08006a59 	.word	0x08006a59

080069c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e040      	b.n	8006b18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fd ffe6 	bl	8004a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2224      	movs	r2, #36	; 0x24
 8006ab0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fbbc 	bl	8007240 <UART_SetConfig>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e022      	b.n	8006b18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fd86 	bl	80075ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fe0c 	bl	800772e <UART_CheckIdleState>
 8006b16:	4603      	mov	r3, r0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	; 0x28
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	f040 8082 	bne.w	8006c3e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_UART_Transmit+0x26>
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07a      	b.n	8006c40 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_UART_Transmit+0x38>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e073      	b.n	8006c40 <HAL_UART_Transmit+0x120>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2221      	movs	r2, #33	; 0x21
 8006b6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b6e:	f7fd fd45 	bl	80045fc <HAL_GetTick>
 8006b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	88fa      	ldrh	r2, [r7, #6]
 8006b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8c:	d108      	bne.n	8006ba0 <HAL_UART_Transmit+0x80>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	e003      	b.n	8006ba8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006bb0:	e02d      	b.n	8006c0e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2180      	movs	r1, #128	; 0x80
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fdff 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e039      	b.n	8006c40 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10b      	bne.n	8006bea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bde:	b292      	uxth	r2, r2
 8006be0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3302      	adds	r3, #2
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	e008      	b.n	8006bfc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1cb      	bne.n	8006bb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	2140      	movs	r1, #64	; 0x40
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fdcb 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e005      	b.n	8006c40 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e000      	b.n	8006c40 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006c3e:	2302      	movs	r3, #2
  }
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b0ba      	sub	sp, #232	; 0xe8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c72:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c76:	4013      	ands	r3, r2
 8006c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d115      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00f      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d009      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 82a3 	beq.w	80071ec <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
      }
      return;
 8006cae:	e29d      	b.n	80071ec <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8117 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cca:	4b85      	ldr	r3, [pc, #532]	; (8006ee0 <HAL_UART_IRQHandler+0x298>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 810a 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <HAL_UART_IRQHandler+0xbc>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfa:	f043 0201 	orr.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d011      	beq.n	8006d34 <HAL_UART_IRQHandler+0xec>
 8006d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2202      	movs	r2, #2
 8006d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d2a:	f043 0204 	orr.w	r2, r3, #4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d011      	beq.n	8006d64 <HAL_UART_IRQHandler+0x11c>
 8006d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2204      	movs	r2, #4
 8006d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5a:	f043 0202 	orr.w	r2, r3, #2
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d017      	beq.n	8006da0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d105      	bne.n	8006d88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d96:	f043 0208 	orr.w	r2, r3, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d012      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x18a>
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00c      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8209 	beq.w	80071f0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d005      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d04f      	beq.n	8006eca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fd8c 	bl	8007948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d141      	bne.n	8006ec2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1d9      	bne.n	8006e3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d013      	beq.n	8006eba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	4a13      	ldr	r2, [pc, #76]	; (8006ee4 <HAL_UART_IRQHandler+0x29c>)
 8006e98:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fb fdc0 	bl	8002a24 <HAL_DMA_Abort_IT>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d017      	beq.n	8006eda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	e00f      	b.n	8006eda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9ab 	bl	8007216 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	e00b      	b.n	8006eda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f9a7 	bl	8007216 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	e007      	b.n	8006eda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9a3 	bl	8007216 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ed8:	e18a      	b.n	80071f0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eda:	bf00      	nop
    return;
 8006edc:	e188      	b.n	80071f0 <HAL_UART_IRQHandler+0x5a8>
 8006ede:	bf00      	nop
 8006ee0:	04000120 	.word	0x04000120
 8006ee4:	08007a0d 	.word	0x08007a0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	f040 8143 	bne.w	8007178 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 813c 	beq.w	8007178 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8135 	beq.w	8007178 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2210      	movs	r2, #16
 8006f14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	f040 80b1 	bne.w	8007088 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 815c 	beq.w	80071f4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f46:	429a      	cmp	r2, r3
 8006f48:	f080 8154 	bcs.w	80071f4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	f000 8085 	beq.w	800706c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1da      	bne.n	8006f62 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fd0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e1      	bne.n	8006fac <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3308      	adds	r3, #8
 8006fee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800700c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800700e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007012:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800701a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e3      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800703a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703c:	f023 0310 	bic.w	r3, r3, #16
 8007040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800704e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007050:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800705c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e4      	bne.n	800702c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	4618      	mov	r0, r3
 8007068:	f7fb fca4 	bl	80029b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007078:	b29b      	uxth	r3, r3
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	b29b      	uxth	r3, r3
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8d1 	bl	8007228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007086:	e0b5      	b.n	80071f4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007094:	b29b      	uxth	r3, r3
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80a7 	beq.w	80071f8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80070aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80a2 	beq.w	80071f8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070d6:	647b      	str	r3, [r7, #68]	; 0x44
 80070d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e4      	bne.n	80070b4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	623b      	str	r3, [r7, #32]
   return(result);
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800710e:	633a      	str	r2, [r7, #48]	; 0x30
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e3      	bne.n	80070ea <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	60fb      	str	r3, [r7, #12]
   return(result);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f023 0310 	bic.w	r3, r3, #16
 8007148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	69b9      	ldr	r1, [r7, #24]
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	617b      	str	r3, [r7, #20]
   return(result);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e4      	bne.n	8007134 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800716a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f859 	bl	8007228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007176:	e03f      	b.n	80071f8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <HAL_UART_IRQHandler+0x55a>
 8007184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fc76 	bl	8007a8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071a0:	e02d      	b.n	80071fe <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00e      	beq.n	80071cc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01c      	beq.n	80071fc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
    }
    return;
 80071ca:	e017      	b.n	80071fc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d012      	beq.n	80071fe <HAL_UART_IRQHandler+0x5b6>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fc27 	bl	8007a38 <UART_EndTransmit_IT>
    return;
 80071ea:	e008      	b.n	80071fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80071ec:	bf00      	nop
 80071ee:	e006      	b.n	80071fe <HAL_UART_IRQHandler+0x5b6>
    return;
 80071f0:	bf00      	nop
 80071f2:	e004      	b.n	80071fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <HAL_UART_IRQHandler+0x5b6>
    return;
 80071fc:	bf00      	nop
  }

}
 80071fe:	37e8      	adds	r7, #232	; 0xe8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
	...

08007240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b92      	ldr	r3, [pc, #584]	; (80074b4 <UART_SetConfig+0x274>)
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	6979      	ldr	r1, [r7, #20]
 8007274:	430b      	orrs	r3, r1
 8007276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a80      	ldr	r2, [pc, #512]	; (80074b8 <UART_SetConfig+0x278>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d120      	bne.n	80072fe <UART_SetConfig+0xbe>
 80072bc:	4b7f      	ldr	r3, [pc, #508]	; (80074bc <UART_SetConfig+0x27c>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d817      	bhi.n	80072f8 <UART_SetConfig+0xb8>
 80072c8:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <UART_SetConfig+0x90>)
 80072ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ce:	bf00      	nop
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072ed 	.word	0x080072ed
 80072d8:	080072f3 	.word	0x080072f3
 80072dc:	080072e7 	.word	0x080072e7
 80072e0:	2301      	movs	r3, #1
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	e0b5      	b.n	8007452 <UART_SetConfig+0x212>
 80072e6:	2302      	movs	r3, #2
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e0b2      	b.n	8007452 <UART_SetConfig+0x212>
 80072ec:	2304      	movs	r3, #4
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e0af      	b.n	8007452 <UART_SetConfig+0x212>
 80072f2:	2308      	movs	r3, #8
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e0ac      	b.n	8007452 <UART_SetConfig+0x212>
 80072f8:	2310      	movs	r3, #16
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e0a9      	b.n	8007452 <UART_SetConfig+0x212>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a6f      	ldr	r2, [pc, #444]	; (80074c0 <UART_SetConfig+0x280>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d124      	bne.n	8007352 <UART_SetConfig+0x112>
 8007308:	4b6c      	ldr	r3, [pc, #432]	; (80074bc <UART_SetConfig+0x27c>)
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007310:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007314:	d011      	beq.n	800733a <UART_SetConfig+0xfa>
 8007316:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800731a:	d817      	bhi.n	800734c <UART_SetConfig+0x10c>
 800731c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007320:	d011      	beq.n	8007346 <UART_SetConfig+0x106>
 8007322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007326:	d811      	bhi.n	800734c <UART_SetConfig+0x10c>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <UART_SetConfig+0xf4>
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007330:	d006      	beq.n	8007340 <UART_SetConfig+0x100>
 8007332:	e00b      	b.n	800734c <UART_SetConfig+0x10c>
 8007334:	2300      	movs	r3, #0
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e08b      	b.n	8007452 <UART_SetConfig+0x212>
 800733a:	2302      	movs	r3, #2
 800733c:	77fb      	strb	r3, [r7, #31]
 800733e:	e088      	b.n	8007452 <UART_SetConfig+0x212>
 8007340:	2304      	movs	r3, #4
 8007342:	77fb      	strb	r3, [r7, #31]
 8007344:	e085      	b.n	8007452 <UART_SetConfig+0x212>
 8007346:	2308      	movs	r3, #8
 8007348:	77fb      	strb	r3, [r7, #31]
 800734a:	e082      	b.n	8007452 <UART_SetConfig+0x212>
 800734c:	2310      	movs	r3, #16
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e07f      	b.n	8007452 <UART_SetConfig+0x212>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a5b      	ldr	r2, [pc, #364]	; (80074c4 <UART_SetConfig+0x284>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d124      	bne.n	80073a6 <UART_SetConfig+0x166>
 800735c:	4b57      	ldr	r3, [pc, #348]	; (80074bc <UART_SetConfig+0x27c>)
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007364:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007368:	d011      	beq.n	800738e <UART_SetConfig+0x14e>
 800736a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800736e:	d817      	bhi.n	80073a0 <UART_SetConfig+0x160>
 8007370:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007374:	d011      	beq.n	800739a <UART_SetConfig+0x15a>
 8007376:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800737a:	d811      	bhi.n	80073a0 <UART_SetConfig+0x160>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <UART_SetConfig+0x148>
 8007380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007384:	d006      	beq.n	8007394 <UART_SetConfig+0x154>
 8007386:	e00b      	b.n	80073a0 <UART_SetConfig+0x160>
 8007388:	2300      	movs	r3, #0
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e061      	b.n	8007452 <UART_SetConfig+0x212>
 800738e:	2302      	movs	r3, #2
 8007390:	77fb      	strb	r3, [r7, #31]
 8007392:	e05e      	b.n	8007452 <UART_SetConfig+0x212>
 8007394:	2304      	movs	r3, #4
 8007396:	77fb      	strb	r3, [r7, #31]
 8007398:	e05b      	b.n	8007452 <UART_SetConfig+0x212>
 800739a:	2308      	movs	r3, #8
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e058      	b.n	8007452 <UART_SetConfig+0x212>
 80073a0:	2310      	movs	r3, #16
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e055      	b.n	8007452 <UART_SetConfig+0x212>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a47      	ldr	r2, [pc, #284]	; (80074c8 <UART_SetConfig+0x288>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d124      	bne.n	80073fa <UART_SetConfig+0x1ba>
 80073b0:	4b42      	ldr	r3, [pc, #264]	; (80074bc <UART_SetConfig+0x27c>)
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80073b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073bc:	d011      	beq.n	80073e2 <UART_SetConfig+0x1a2>
 80073be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073c2:	d817      	bhi.n	80073f4 <UART_SetConfig+0x1b4>
 80073c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c8:	d011      	beq.n	80073ee <UART_SetConfig+0x1ae>
 80073ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ce:	d811      	bhi.n	80073f4 <UART_SetConfig+0x1b4>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <UART_SetConfig+0x19c>
 80073d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d8:	d006      	beq.n	80073e8 <UART_SetConfig+0x1a8>
 80073da:	e00b      	b.n	80073f4 <UART_SetConfig+0x1b4>
 80073dc:	2300      	movs	r3, #0
 80073de:	77fb      	strb	r3, [r7, #31]
 80073e0:	e037      	b.n	8007452 <UART_SetConfig+0x212>
 80073e2:	2302      	movs	r3, #2
 80073e4:	77fb      	strb	r3, [r7, #31]
 80073e6:	e034      	b.n	8007452 <UART_SetConfig+0x212>
 80073e8:	2304      	movs	r3, #4
 80073ea:	77fb      	strb	r3, [r7, #31]
 80073ec:	e031      	b.n	8007452 <UART_SetConfig+0x212>
 80073ee:	2308      	movs	r3, #8
 80073f0:	77fb      	strb	r3, [r7, #31]
 80073f2:	e02e      	b.n	8007452 <UART_SetConfig+0x212>
 80073f4:	2310      	movs	r3, #16
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e02b      	b.n	8007452 <UART_SetConfig+0x212>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a33      	ldr	r2, [pc, #204]	; (80074cc <UART_SetConfig+0x28c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d124      	bne.n	800744e <UART_SetConfig+0x20e>
 8007404:	4b2d      	ldr	r3, [pc, #180]	; (80074bc <UART_SetConfig+0x27c>)
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800740c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007410:	d011      	beq.n	8007436 <UART_SetConfig+0x1f6>
 8007412:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007416:	d817      	bhi.n	8007448 <UART_SetConfig+0x208>
 8007418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800741c:	d011      	beq.n	8007442 <UART_SetConfig+0x202>
 800741e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007422:	d811      	bhi.n	8007448 <UART_SetConfig+0x208>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <UART_SetConfig+0x1f0>
 8007428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800742c:	d006      	beq.n	800743c <UART_SetConfig+0x1fc>
 800742e:	e00b      	b.n	8007448 <UART_SetConfig+0x208>
 8007430:	2300      	movs	r3, #0
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e00d      	b.n	8007452 <UART_SetConfig+0x212>
 8007436:	2302      	movs	r3, #2
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e00a      	b.n	8007452 <UART_SetConfig+0x212>
 800743c:	2304      	movs	r3, #4
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e007      	b.n	8007452 <UART_SetConfig+0x212>
 8007442:	2308      	movs	r3, #8
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e004      	b.n	8007452 <UART_SetConfig+0x212>
 8007448:	2310      	movs	r3, #16
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e001      	b.n	8007452 <UART_SetConfig+0x212>
 800744e:	2310      	movs	r3, #16
 8007450:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800745a:	d16c      	bne.n	8007536 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800745c:	7ffb      	ldrb	r3, [r7, #31]
 800745e:	2b08      	cmp	r3, #8
 8007460:	d838      	bhi.n	80074d4 <UART_SetConfig+0x294>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <UART_SetConfig+0x228>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	0800748d 	.word	0x0800748d
 800746c:	08007495 	.word	0x08007495
 8007470:	0800749d 	.word	0x0800749d
 8007474:	080074d5 	.word	0x080074d5
 8007478:	080074a3 	.word	0x080074a3
 800747c:	080074d5 	.word	0x080074d5
 8007480:	080074d5 	.word	0x080074d5
 8007484:	080074d5 	.word	0x080074d5
 8007488:	080074ab 	.word	0x080074ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fe fdbc 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8007490:	61b8      	str	r0, [r7, #24]
        break;
 8007492:	e024      	b.n	80074de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007494:	f7fe fdda 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 8007498:	61b8      	str	r0, [r7, #24]
        break;
 800749a:	e020      	b.n	80074de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <UART_SetConfig+0x290>)
 800749e:	61bb      	str	r3, [r7, #24]
        break;
 80074a0:	e01d      	b.n	80074de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a2:	f7fe fd3d 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 80074a6:	61b8      	str	r0, [r7, #24]
        break;
 80074a8:	e019      	b.n	80074de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ae:	61bb      	str	r3, [r7, #24]
        break;
 80074b0:	e015      	b.n	80074de <UART_SetConfig+0x29e>
 80074b2:	bf00      	nop
 80074b4:	efff69f3 	.word	0xefff69f3
 80074b8:	40013800 	.word	0x40013800
 80074bc:	40021000 	.word	0x40021000
 80074c0:	40004400 	.word	0x40004400
 80074c4:	40004800 	.word	0x40004800
 80074c8:	40004c00 	.word	0x40004c00
 80074cc:	40005000 	.word	0x40005000
 80074d0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	77bb      	strb	r3, [r7, #30]
        break;
 80074dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d075      	beq.n	80075d0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	005a      	lsls	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	441a      	add	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b0f      	cmp	r3, #15
 8007500:	d916      	bls.n	8007530 <UART_SetConfig+0x2f0>
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007508:	d212      	bcs.n	8007530 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f023 030f 	bic.w	r3, r3, #15
 8007512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	085b      	lsrs	r3, r3, #1
 8007518:	b29b      	uxth	r3, r3
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	b29a      	uxth	r2, r3
 8007520:	89fb      	ldrh	r3, [r7, #14]
 8007522:	4313      	orrs	r3, r2
 8007524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	89fa      	ldrh	r2, [r7, #14]
 800752c:	60da      	str	r2, [r3, #12]
 800752e:	e04f      	b.n	80075d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	77bb      	strb	r3, [r7, #30]
 8007534:	e04c      	b.n	80075d0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007536:	7ffb      	ldrb	r3, [r7, #31]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d828      	bhi.n	800758e <UART_SetConfig+0x34e>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x304>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007569 	.word	0x08007569
 8007548:	08007571 	.word	0x08007571
 800754c:	08007579 	.word	0x08007579
 8007550:	0800758f 	.word	0x0800758f
 8007554:	0800757f 	.word	0x0800757f
 8007558:	0800758f 	.word	0x0800758f
 800755c:	0800758f 	.word	0x0800758f
 8007560:	0800758f 	.word	0x0800758f
 8007564:	08007587 	.word	0x08007587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007568:	f7fe fd4e 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 800756c:	61b8      	str	r0, [r7, #24]
        break;
 800756e:	e013      	b.n	8007598 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007570:	f7fe fd6c 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 8007574:	61b8      	str	r0, [r7, #24]
        break;
 8007576:	e00f      	b.n	8007598 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <UART_SetConfig+0x3a8>)
 800757a:	61bb      	str	r3, [r7, #24]
        break;
 800757c:	e00c      	b.n	8007598 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757e:	f7fe fccf 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8007582:	61b8      	str	r0, [r7, #24]
        break;
 8007584:	e008      	b.n	8007598 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800758a:	61bb      	str	r3, [r7, #24]
        break;
 800758c:	e004      	b.n	8007598 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	77bb      	strb	r3, [r7, #30]
        break;
 8007596:	bf00      	nop
    }

    if (pclk != 0U)
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d018      	beq.n	80075d0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	085a      	lsrs	r2, r3, #1
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	441a      	add	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b0f      	cmp	r3, #15
 80075b8:	d908      	bls.n	80075cc <UART_SetConfig+0x38c>
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c0:	d204      	bcs.n	80075cc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	e001      	b.n	80075d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	007a1200 	.word	0x007a1200

080075ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01a      	beq.n	8007702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ea:	d10a      	bne.n	8007702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	605a      	str	r2, [r3, #4]
  }
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr

0800772e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af02      	add	r7, sp, #8
 8007734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800773e:	f7fc ff5d 	bl	80045fc <HAL_GetTick>
 8007742:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b08      	cmp	r3, #8
 8007750:	d10e      	bne.n	8007770 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007752:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f82d 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e023      	b.n	80077b8 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b04      	cmp	r3, #4
 800777c:	d10e      	bne.n	800779c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800777e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f817 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e00d      	b.n	80077b8 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b09c      	sub	sp, #112	; 0x70
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d0:	e0a5      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	f000 80a1 	beq.w	800791e <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077dc:	f7fc ff0e 	bl	80045fc <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d302      	bcc.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x32>
 80077ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d13e      	bne.n	8007870 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007802:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007806:	667b      	str	r3, [r7, #100]	; 0x64
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007812:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007816:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800781e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	f023 0301 	bic.w	r3, r3, #1
 800783a:	663b      	str	r3, [r7, #96]	; 0x60
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007844:	64ba      	str	r2, [r7, #72]	; 0x48
 8007846:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800784a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e5      	bne.n	8007824 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e067      	b.n	8007940 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	d04f      	beq.n	800791e <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788c:	d147      	bne.n	800791e <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007896:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
 80078b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e6      	bne.n	8007898 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	613b      	str	r3, [r7, #16]
   return(result);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078ea:	623a      	str	r2, [r7, #32]
 80078ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	69f9      	ldr	r1, [r7, #28]
 80078f0:	6a3a      	ldr	r2, [r7, #32]
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e5      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2220      	movs	r2, #32
 8007902:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e010      	b.n	8007940 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69da      	ldr	r2, [r3, #28]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	4013      	ands	r3, r2
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	429a      	cmp	r2, r3
 800792c:	bf0c      	ite	eq
 800792e:	2301      	moveq	r3, #1
 8007930:	2300      	movne	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	429a      	cmp	r2, r3
 800793a:	f43f af4a 	beq.w	80077d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3770      	adds	r7, #112	; 0x70
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b095      	sub	sp, #84	; 0x54
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796e:	643b      	str	r3, [r7, #64]	; 0x40
 8007970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e6      	bne.n	8007950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	61fb      	str	r3, [r7, #28]
   return(result);
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	64bb      	str	r3, [r7, #72]	; 0x48
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d118      	bne.n	80079f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f023 0310 	bic.w	r3, r3, #16
 80079d2:	647b      	str	r3, [r7, #68]	; 0x44
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6979      	ldr	r1, [r7, #20]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e6      	bne.n	80079be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a02:	bf00      	nop
 8007a04:	3754      	adds	r7, #84	; 0x54
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7ff fbf3 	bl	8007216 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	61bb      	str	r3, [r7, #24]
 8007a60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6979      	ldr	r1, [r7, #20]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e6      	bne.n	8007a40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fbc0 	bl	8007204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a84:	bf00      	nop
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr

08007a9e <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 8007aa2:	f000 f843 	bl	8007b2c <SystemClock_Config>
	MX_GPIO_Init();
 8007aa6:	f000 f9f5 	bl	8007e94 <MX_GPIO_Init>
	MX_ADC1_Init();
 8007aaa:	f000 f8a5 	bl	8007bf8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8007aae:	f000 f913 	bl	8007cd8 <MX_I2C1_Init>
	MX_SPI3_Init();
 8007ab2:	f000 f951 	bl	8007d58 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8007ab6:	f000 f98d 	bl	8007dd4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8007aba:	f000 f9bb 	bl	8007e34 <MX_USART2_UART_Init>
	Gpt_Init();
 8007abe:	f7fa ffef 	bl	8002aa0 <Gpt_Init>

	/* Init system services */
	Tm_Init();
 8007ac2:	f000 fc05 	bl	80082d0 <Tm_Init>
}
 8007ac6:	bf00      	nop
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_IT(&hadc1);
 8007ad0:	4802      	ldr	r0, [pc, #8]	; (8007adc <BswM_MainFunction+0x10>)
 8007ad2:	f7f9 fc79 	bl	80013c8 <HAL_ADC_Start_IT>
}
 8007ad6:	bf00      	nop
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000114 	.word	0x20000114

08007ae0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc1);
 8007ae8:	480c      	ldr	r0, [pc, #48]	; (8007b1c <HAL_ADC_ConvCpltCallback+0x3c>)
 8007aea:	f7f9 fdad 	bl	8001648 <HAL_ADC_GetValue>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4a0b      	ldr	r2, [pc, #44]	; (8007b20 <HAL_ADC_ConvCpltCallback+0x40>)
 8007af2:	6013      	str	r3, [r2, #0]
  ADC_AN0_Voltage = (uint16)((adc_val*3300u)/4095u);
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <HAL_ADC_ConvCpltCallback+0x40>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f640 42e4 	movw	r2, #3300	; 0xce4
 8007afc:	fb03 f202 	mul.w	r2, r3, r2
 8007b00:	4b08      	ldr	r3, [pc, #32]	; (8007b24 <HAL_ADC_ConvCpltCallback+0x44>)
 8007b02:	fba3 1302 	umull	r1, r3, r3, r2
 8007b06:	1ad2      	subs	r2, r2, r3
 8007b08:	0852      	lsrs	r2, r2, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	0adb      	lsrs	r3, r3, #11
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <HAL_ADC_ConvCpltCallback+0x48>)
 8007b12:	801a      	strh	r2, [r3, #0]
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000114 	.word	0x20000114
 8007b20:	20000374 	.word	0x20000374
 8007b24:	00100101 	.word	0x00100101
 8007b28:	20000378 	.word	0x20000378

08007b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b0a6      	sub	sp, #152	; 0x98
 8007b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b36:	2228      	movs	r2, #40	; 0x28
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fcd4 	bl	80084e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	609a      	str	r2, [r3, #8]
 8007b4c:	60da      	str	r2, [r3, #12]
 8007b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b50:	1d3b      	adds	r3, r7, #4
 8007b52:	2258      	movs	r2, #88	; 0x58
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fcc6 	bl	80084e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b60:	2301      	movs	r3, #1
 8007b62:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007b64:	2310      	movs	r3, #16
 8007b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007b78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fc fff8 	bl	8004b80 <HAL_RCC_OscConfig>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8007b96:	f000 f9d1 	bl	8007f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b9a:	230f      	movs	r3, #15
 8007b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007baa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007bac:	2300      	movs	r3, #0
 8007bae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007bb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe f836 	bl	8005c28 <HAL_RCC_ClockConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007bc2:	f000 f9bb 	bl	8007f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8007bc6:	23a3      	movs	r3, #163	; 0xa3
 8007bc8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8007bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8007bd8:	2310      	movs	r3, #16
 8007bda:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007bdc:	1d3b      	adds	r3, r7, #4
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe fa56 	bl	8006090 <HAL_RCCEx_PeriphCLKConfig>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007bea:	f000 f9a7 	bl	8007f3c <Error_Handler>
  }
}
 8007bee:	bf00      	nop
 8007bf0:	3798      	adds	r7, #152	; 0x98
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8007bfe:	f107 031c 	add.w	r3, r7, #28
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	605a      	str	r2, [r3, #4]
 8007c08:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8007c0a:	1d3b      	adds	r3, r7, #4
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	60da      	str	r2, [r3, #12]
 8007c16:	611a      	str	r2, [r3, #16]
 8007c18:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8007c1a:	4b2e      	ldr	r3, [pc, #184]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c20:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007c22:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c28:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007c2a:	4b2a      	ldr	r3, [pc, #168]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007c30:	4b28      	ldr	r3, [pc, #160]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8007c36:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007c3c:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007c44:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007c4a:	4b22      	ldr	r3, [pc, #136]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007c50:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8007c56:	4b1f      	ldr	r3, [pc, #124]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007c5c:	4b1d      	ldr	r3, [pc, #116]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007c64:	4b1b      	ldr	r3, [pc, #108]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c66:	2204      	movs	r2, #4
 8007c68:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007c6a:	4b1a      	ldr	r3, [pc, #104]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007c70:	4b18      	ldr	r3, [pc, #96]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007c76:	4817      	ldr	r0, [pc, #92]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c78:	f7f9 f9ac 	bl	8000fd4 <HAL_ADC_Init>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <MX_ADC1_Init+0x8e>
	  {
	    Error_Handler();
 8007c82:	f000 f95b 	bl	8007f3c <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007c8a:	f107 031c 	add.w	r3, r7, #28
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4810      	ldr	r0, [pc, #64]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007c92:	f7fa fb05 	bl	80022a0 <HAL_ADCEx_MultiModeConfigChannel>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <MX_ADC1_Init+0xa8>
	  {
	    Error_Handler();
 8007c9c:	f000 f94e 	bl	8007f3c <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cb8:	1d3b      	adds	r3, r7, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4805      	ldr	r0, [pc, #20]	; (8007cd4 <MX_ADC1_Init+0xdc>)
 8007cbe:	f7fa f803 	bl	8001cc8 <HAL_ADC_ConfigChannel>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <MX_ADC1_Init+0xd4>
	  {
	    Error_Handler();
 8007cc8:	f000 f938 	bl	8007f3c <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

}
 8007ccc:	bf00      	nop
 8007cce:	3728      	adds	r7, #40	; 0x28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20000114 	.word	0x20000114

08007cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007cdc:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007cde:	4a1c      	ldr	r2, [pc, #112]	; (8007d50 <MX_I2C1_Init+0x78>)
 8007ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8007ce2:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007ce4:	4a1b      	ldr	r2, [pc, #108]	; (8007d54 <MX_I2C1_Init+0x7c>)
 8007ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007ce8:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007cee:	4b17      	ldr	r3, [pc, #92]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007cf4:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007cfa:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007d00:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007d12:	480e      	ldr	r0, [pc, #56]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007d14:	f7fc fa2e 	bl	8004174 <HAL_I2C_Init>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007d1e:	f000 f90d 	bl	8007f3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007d22:	2100      	movs	r1, #0
 8007d24:	4809      	ldr	r0, [pc, #36]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007d26:	f7fc fb69 	bl	80043fc <HAL_I2CEx_ConfigAnalogFilter>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007d30:	f000 f904 	bl	8007f3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007d34:	2100      	movs	r1, #0
 8007d36:	4805      	ldr	r0, [pc, #20]	; (8007d4c <MX_I2C1_Init+0x74>)
 8007d38:	f7fc fbaa 	bl	8004490 <HAL_I2CEx_ConfigDigitalFilter>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007d42:	f000 f8fb 	bl	8007f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007d46:	bf00      	nop
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000164 	.word	0x20000164
 8007d50:	40005400 	.word	0x40005400
 8007d54:	00702681 	.word	0x00702681

08007d58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007d5c:	4b1b      	ldr	r3, [pc, #108]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <MX_SPI3_Init+0x78>)
 8007d60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007d62:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007d6a:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8007d70:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007d76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d78:	4b14      	ldr	r3, [pc, #80]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007d84:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d8c:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d92:	4b0e      	ldr	r3, [pc, #56]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007da6:	2207      	movs	r2, #7
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007daa:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007db0:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007db2:	2208      	movs	r2, #8
 8007db4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007db6:	4805      	ldr	r0, [pc, #20]	; (8007dcc <MX_SPI3_Init+0x74>)
 8007db8:	f7fe fc24 	bl	8006604 <HAL_SPI_Init>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007dc2:	f000 f8bb 	bl	8007f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200001e0 	.word	0x200001e0
 8007dd0:	40003c00 	.word	0x40003c00

08007dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007dda:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <MX_USART1_UART_Init+0x5c>)
 8007ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007de0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007de6:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007df2:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007dfa:	220c      	movs	r2, #12
 8007dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e04:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007e0a:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007e10:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007e16:	4805      	ldr	r0, [pc, #20]	; (8007e2c <MX_USART1_UART_Init+0x58>)
 8007e18:	f7fe fe34 	bl	8006a84 <HAL_UART_Init>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8007e22:	f000 f88b 	bl	8007f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007e26:	bf00      	nop
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	2000026c 	.word	0x2000026c
 8007e30:	40013800 	.word	0x40013800

08007e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007e38:	4b14      	ldr	r3, [pc, #80]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e3a:	4a15      	ldr	r2, [pc, #84]	; (8007e90 <MX_USART2_UART_Init+0x5c>)
 8007e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007e3e:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007e46:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007e4c:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007e52:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e5a:	220c      	movs	r2, #12
 8007e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e64:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007e6a:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007e76:	4805      	ldr	r0, [pc, #20]	; (8007e8c <MX_USART2_UART_Init+0x58>)
 8007e78:	f7fe fe04 	bl	8006a84 <HAL_UART_Init>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8007e82:	f000 f85b 	bl	8007f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007e86:	bf00      	nop
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	200002f0 	.word	0x200002f0
 8007e90:	40004400 	.word	0x40004400

08007e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e9a:	f107 030c 	add.w	r3, r7, #12
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	605a      	str	r2, [r3, #4]
 8007ea4:	609a      	str	r2, [r3, #8]
 8007ea6:	60da      	str	r2, [r3, #12]
 8007ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007eaa:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	4a21      	ldr	r2, [pc, #132]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eb4:	6153      	str	r3, [r2, #20]
 8007eb6:	4b1f      	ldr	r3, [pc, #124]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ec2:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	4a1b      	ldr	r2, [pc, #108]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ecc:	6153      	str	r3, [r2, #20]
 8007ece:	4b19      	ldr	r3, [pc, #100]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed6:	607b      	str	r3, [r7, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007eda:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	4a15      	ldr	r2, [pc, #84]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ee4:	6153      	str	r3, [r2, #20]
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <MX_GPIO_Init+0xa0>)
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2120      	movs	r1, #32
 8007ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007efa:	f7fa fd2c 	bl	8002956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8007efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007f04:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8007f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8007f0e:	f107 030c 	add.w	r3, r7, #12
 8007f12:	4619      	mov	r1, r3
 8007f14:	4808      	ldr	r0, [pc, #32]	; (8007f38 <MX_GPIO_Init+0xa4>)
 8007f16:	f7fa fb7d 	bl	8002614 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	2028      	movs	r0, #40	; 0x28
 8007f20:	f7fc fc4d 	bl	80047be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007f24:	2028      	movs	r0, #40	; 0x28
 8007f26:	f7fc fc66 	bl	80047f6 <HAL_NVIC_EnableIRQ>

}
 8007f2a:	bf00      	nop
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40021000 	.word	0x40021000
 8007f38:	48000800 	.word	0x48000800

08007f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007f40:	b672      	cpsid	i
}
 8007f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007f44:	e7fe      	b.n	8007f44 <Error_Handler+0x8>

08007f46 <EcuM_StartUp_Two>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_Two()
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 8007f4a:	f7fc fb11 	bl	8004570 <HAL_Init>
	BswM_Init();
 8007f4e:	f7ff fda6 	bl	8007a9e <BswM_Init>
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <EcuM_Init>:

int EcuM_Init(void)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	af00      	add	r7, sp, #0

	Os_Task_StartUp();
 8007f5a:	f000 f98f 	bl	800827c <Os_Task_StartUp>

	/* Start Scheduler */
	Os_Start();
 8007f5e:	f000 f803 	bl	8007f68 <Os_Start>

	return 0;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <Os_Start>:
#include "Os_scheduler.h"
#include "Os_task.h"


void Os_Start()
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
	Os_Task_StartUp_0();
 8007f6c:	f000 f8d8 	bl	8008120 <Os_Task_StartUp_0>
	Os_Scheduler_Init();
 8007f70:	f000 f81e 	bl	8007fb0 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 8007f74:	f000 f8be 	bl	80080f4 <Os_Scheduler_Start>

	while(1)
 8007f78:	e7fe      	b.n	8007f78 <Os_Start+0x10>
	...

08007f7c <SysTick_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 8007f7c:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 8007f7e:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 8007f80:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 8007f82:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 8007f84:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 8007f86:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 8007f88:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =pCurntTcb");
 8007f8a:	4808      	ldr	r0, [pc, #32]	; (8007fac <SysTick_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 8007f8c:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 8007f8e:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 8007f90:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 8007f92:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 8007f94:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 8007f96:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 8007f98:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 8007f9a:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8007f9c:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8007f9e:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8007fa0:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8007fa2:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 8007fa4:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 8007fa6:	b662      	cpsie	i
    __asm("BX      LR");
 8007fa8:	4770      	bx	lr

}
 8007faa:	bf00      	nop
 8007fac:	200003ac 	.word	0x200003ac

08007fb0 <Os_Scheduler_Init>:

void Os_Scheduler_Init()
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0
	/// Enter critical section
	/// Disable interrupts
	__asm("CPSID   I");
 8007fb4:	b672      	cpsid	i
	/// Make the TCB linked list circular
	tcbs[0].nextPt = &tcbs[1];
 8007fb6:	4b3b      	ldr	r3, [pc, #236]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fb8:	4a3b      	ldr	r2, [pc, #236]	; (80080a8 <Os_Scheduler_Init+0xf8>)
 8007fba:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 8007fbc:	4b39      	ldr	r3, [pc, #228]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fbe:	4a3b      	ldr	r2, [pc, #236]	; (80080ac <Os_Scheduler_Init+0xfc>)
 8007fc0:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[3];
 8007fc2:	4b38      	ldr	r3, [pc, #224]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fc4:	4a3a      	ldr	r2, [pc, #232]	; (80080b0 <Os_Scheduler_Init+0x100>)
 8007fc6:	615a      	str	r2, [r3, #20]
	tcbs[3].nextPt = &tcbs[4];
 8007fc8:	4b36      	ldr	r3, [pc, #216]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fca:	4a3a      	ldr	r2, [pc, #232]	; (80080b4 <Os_Scheduler_Init+0x104>)
 8007fcc:	61da      	str	r2, [r3, #28]
	tcbs[4].nextPt = &tcbs[5];
 8007fce:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fd0:	4a39      	ldr	r2, [pc, #228]	; (80080b8 <Os_Scheduler_Init+0x108>)
 8007fd2:	625a      	str	r2, [r3, #36]	; 0x24
	tcbs[5].nextPt = &tcbs[0];
 8007fd4:	4b33      	ldr	r3, [pc, #204]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fd6:	4a33      	ldr	r2, [pc, #204]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fd8:	62da      	str	r2, [r3, #44]	; 0x2c

	/// Setup stack for task0

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
	tcbs[0].stackPt = &TCB_STACK[0][STACKSIZE-16];
 8007fda:	4b32      	ldr	r3, [pc, #200]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007fdc:	4a37      	ldr	r2, [pc, #220]	; (80080bc <Os_Scheduler_Init+0x10c>)
 8007fde:	601a      	str	r2, [r3, #0]
	/// Set the 'T' bit in stacked xPSR to '1' to notify processor
	/// on exception return about the thumb state. V6-m and V7-m cores
	/// can only support thumb state hence this should be always set
	/// to '1'.
	TCB_STACK[0][STACKSIZE-1] = 0x01000000;
 8007fe0:	4b37      	ldr	r3, [pc, #220]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8007fe2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fe6:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
	/// Set the stacked PC to point to the task
	TCB_STACK[0][STACKSIZE-2] = (int32_t)(Task5ms_0);
 8007fea:	4a36      	ldr	r2, [pc, #216]	; (80080c4 <Os_Scheduler_Init+0x114>)
 8007fec:	4b34      	ldr	r3, [pc, #208]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8007fee:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638

	/// Setup stack for task1

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
    tcbs[1].stackPt = &TCB_STACK[1][STACKSIZE-16];
 8007ff2:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8007ff4:	4a34      	ldr	r2, [pc, #208]	; (80080c8 <Os_Scheduler_Init+0x118>)
 8007ff6:	609a      	str	r2, [r3, #8]
    /// Set the 'T' bit in stacked xPSR to '1' to notify processor
    /// on exception return about the thumb state. V6-m and V7-m cores
    /// can only support thumb state hence this should be always set
    /// to '1'.
    TCB_STACK[1][STACKSIZE-1] = 0x01000000;
 8007ff8:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8007ffa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ffe:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    /// Set the stacked PC to point to the task
    TCB_STACK[1][STACKSIZE-2] = (int32_t)(Task10ms_0);
 8008002:	4a32      	ldr	r2, [pc, #200]	; (80080cc <Os_Scheduler_Init+0x11c>)
 8008004:	4b2e      	ldr	r3, [pc, #184]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008006:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78


    tcbs[2].stackPt = &TCB_STACK[2][STACKSIZE-16];
 800800a:	4b26      	ldr	r3, [pc, #152]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 800800c:	4a30      	ldr	r2, [pc, #192]	; (80080d0 <Os_Scheduler_Init+0x120>)
 800800e:	611a      	str	r2, [r3, #16]
    TCB_STACK[2][STACKSIZE-1] = 0x01000000;
 8008010:	4b2b      	ldr	r3, [pc, #172]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008016:	461a      	mov	r2, r3
 8008018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800801c:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
    TCB_STACK[2][STACKSIZE-2] = (int32_t)(Task20ms_0);
 8008020:	4b2c      	ldr	r3, [pc, #176]	; (80080d4 <Os_Scheduler_Init+0x124>)
 8008022:	4a27      	ldr	r2, [pc, #156]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008024:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008028:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8

    tcbs[3].stackPt = &TCB_STACK[3][STACKSIZE-16];
 800802c:	4b1d      	ldr	r3, [pc, #116]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 800802e:	4a2a      	ldr	r2, [pc, #168]	; (80080d8 <Os_Scheduler_Init+0x128>)
 8008030:	619a      	str	r2, [r3, #24]
    TCB_STACK[3][STACKSIZE-1] = 0x01000000;
 8008032:	4b23      	ldr	r3, [pc, #140]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008038:	461a      	mov	r2, r3
 800803a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800803e:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
    TCB_STACK[3][STACKSIZE-2] = (int32_t)(Task50ms_0);
 8008042:	4b26      	ldr	r3, [pc, #152]	; (80080dc <Os_Scheduler_Init+0x12c>)
 8008044:	4a1e      	ldr	r2, [pc, #120]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800804a:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8

    tcbs[4].stackPt = &TCB_STACK[4][STACKSIZE-16];
 800804e:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8008050:	4a23      	ldr	r2, [pc, #140]	; (80080e0 <Os_Scheduler_Init+0x130>)
 8008052:	621a      	str	r2, [r3, #32]
    TCB_STACK[4][STACKSIZE-1] = 0x01000000;
 8008054:	4b1a      	ldr	r3, [pc, #104]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805a:	461a      	mov	r2, r3
 800805c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008060:	f8c2 3f3c 	str.w	r3, [r2, #3900]	; 0xf3c
    TCB_STACK[4][STACKSIZE-2] = (int32_t)(Task100ms_0);
 8008064:	4b1f      	ldr	r3, [pc, #124]	; (80080e4 <Os_Scheduler_Init+0x134>)
 8008066:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008068:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800806c:	f8c2 3f38 	str.w	r3, [r2, #3896]	; 0xf38

    tcbs[5].stackPt = &TCB_STACK[5][STACKSIZE-16];
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8008072:	4a1d      	ldr	r2, [pc, #116]	; (80080e8 <Os_Scheduler_Init+0x138>)
 8008074:	629a      	str	r2, [r3, #40]	; 0x28
    TCB_STACK[5][STACKSIZE-1] = 0x01000000;
 8008076:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <Os_Scheduler_Init+0x110>)
 8008078:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800807c:	461a      	mov	r2, r3
 800807e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008082:	f8c2 357c 	str.w	r3, [r2, #1404]	; 0x57c
    TCB_STACK[5][STACKSIZE-2] = (int32_t)(Task500ms_0);
 8008086:	4b19      	ldr	r3, [pc, #100]	; (80080ec <Os_Scheduler_Init+0x13c>)
 8008088:	4a0d      	ldr	r2, [pc, #52]	; (80080c0 <Os_Scheduler_Init+0x110>)
 800808a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800808e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578

    /// Make current tcb pointer point to task0
    pCurntTcb = &tcbs[0];
 8008092:	4b17      	ldr	r3, [pc, #92]	; (80080f0 <Os_Scheduler_Init+0x140>)
 8008094:	4a03      	ldr	r2, [pc, #12]	; (80080a4 <Os_Scheduler_Init+0xf4>)
 8008096:	601a      	str	r2, [r3, #0]
    /// Enable interrupts
    __asm("CPSIE   I ");
 8008098:	b662      	cpsie	i
}
 800809a:	bf00      	nop
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	2000037c 	.word	0x2000037c
 80080a8:	20000384 	.word	0x20000384
 80080ac:	2000038c 	.word	0x2000038c
 80080b0:	20000394 	.word	0x20000394
 80080b4:	2000039c 	.word	0x2000039c
 80080b8:	200003a4 	.word	0x200003a4
 80080bc:	200009b0 	.word	0x200009b0
 80080c0:	200003b0 	.word	0x200003b0
 80080c4:	0800812d 	.word	0x0800812d
 80080c8:	20000ff0 	.word	0x20000ff0
 80080cc:	08008165 	.word	0x08008165
 80080d0:	20001630 	.word	0x20001630
 80080d4:	0800819d 	.word	0x0800819d
 80080d8:	20001c70 	.word	0x20001c70
 80080dc:	080081d5 	.word	0x080081d5
 80080e0:	200022b0 	.word	0x200022b0
 80080e4:	0800820d 	.word	0x0800820d
 80080e8:	200028f0 	.word	0x200028f0
 80080ec:	08008245 	.word	0x08008245
 80080f0:	200003ac 	.word	0x200003ac

080080f4 <Os_Scheduler_Start>:


__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =pCurntTcb");
 80080f4:	4809      	ldr	r0, [pc, #36]	; (800811c <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 80080f6:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 80080f8:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 80080fa:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 80080fc:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 80080fe:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8008100:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8008102:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8008104:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 8008106:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 8008108:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800810a:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800810c:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 800810e:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 8008110:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 8008112:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 8008114:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 8008116:	b662      	cpsie	i
    __asm("BX      LR");
 8008118:	4770      	bx	lr
}
 800811a:	bf00      	nop
 800811c:	200003ac 	.word	0x200003ac

08008120 <Os_Task_StartUp_0>:

void Os_Task_StartUp_0()
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
	Os_Task_StartUp();
 8008124:	f000 f8aa 	bl	800827c <Os_Task_StartUp>
}
 8008128:	bf00      	nop
 800812a:	bd80      	pop	{r7, pc}

0800812c <Task5ms_0>:

volatile void Task5ms_0()
{
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task5ms_cnt == tim3_5count)
 8008130:	bf00      	nop
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <Task5ms_0+0x2c>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b09      	ldr	r3, [pc, #36]	; (800815c <Task5ms_0+0x30>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d0f9      	beq.n	8008132 <Task5ms_0+0x6>
    	{

    	}
   		Os_Task5ms_0_cnt++;
 800813e:	4b08      	ldr	r3, [pc, #32]	; (8008160 <Task5ms_0+0x34>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	4a06      	ldr	r2, [pc, #24]	; (8008160 <Task5ms_0+0x34>)
 8008146:	6013      	str	r3, [r2, #0]
    	task5ms_cnt = tim3_5count;
 8008148:	4b04      	ldr	r3, [pc, #16]	; (800815c <Task5ms_0+0x30>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a02      	ldr	r2, [pc, #8]	; (8008158 <Task5ms_0+0x2c>)
 800814e:	6013      	str	r3, [r2, #0]

    	Os_Task_5ms();
 8008150:	f000 f89a 	bl	8008288 <Os_Task_5ms>
    	while(task5ms_cnt == tim3_5count)
 8008154:	e7ec      	b.n	8008130 <Task5ms_0+0x4>
 8008156:	bf00      	nop
 8008158:	20002934 	.word	0x20002934
 800815c:	200000a4 	.word	0x200000a4
 8008160:	20002930 	.word	0x20002930

08008164 <Task10ms_0>:
    }
}

volatile void Task10ms_0()
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task10ms_cnt == tim3_10count)
 8008168:	bf00      	nop
 800816a:	4b09      	ldr	r3, [pc, #36]	; (8008190 <Task10ms_0+0x2c>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4b09      	ldr	r3, [pc, #36]	; (8008194 <Task10ms_0+0x30>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d0f9      	beq.n	800816a <Task10ms_0+0x6>
    	{

    	}
   		Os_Task10ms_0_cnt++;
 8008176:	4b08      	ldr	r3, [pc, #32]	; (8008198 <Task10ms_0+0x34>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3301      	adds	r3, #1
 800817c:	4a06      	ldr	r2, [pc, #24]	; (8008198 <Task10ms_0+0x34>)
 800817e:	6013      	str	r3, [r2, #0]
    	task10ms_cnt = tim3_10count;
 8008180:	4b04      	ldr	r3, [pc, #16]	; (8008194 <Task10ms_0+0x30>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a02      	ldr	r2, [pc, #8]	; (8008190 <Task10ms_0+0x2c>)
 8008186:	6013      	str	r3, [r2, #0]

    	Os_Task_10ms();
 8008188:	f000 f884 	bl	8008294 <Os_Task_10ms>
    	while(task10ms_cnt == tim3_10count)
 800818c:	e7ec      	b.n	8008168 <Task10ms_0+0x4>
 800818e:	bf00      	nop
 8008190:	2000293c 	.word	0x2000293c
 8008194:	200000a8 	.word	0x200000a8
 8008198:	20002938 	.word	0x20002938

0800819c <Task20ms_0>:
    }
}

volatile void Task20ms_0()
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task20ms_cnt == tim3_20count)
 80081a0:	bf00      	nop
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <Task20ms_0+0x2c>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4b09      	ldr	r3, [pc, #36]	; (80081cc <Task20ms_0+0x30>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d0f9      	beq.n	80081a2 <Task20ms_0+0x6>
    	{

    	}
   		Os_Task20ms_0_cnt++;
 80081ae:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <Task20ms_0+0x34>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a06      	ldr	r2, [pc, #24]	; (80081d0 <Task20ms_0+0x34>)
 80081b6:	6013      	str	r3, [r2, #0]
    	task20ms_cnt = tim3_20count;
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <Task20ms_0+0x30>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a02      	ldr	r2, [pc, #8]	; (80081c8 <Task20ms_0+0x2c>)
 80081be:	6013      	str	r3, [r2, #0]

    	Os_Task_20ms();
 80081c0:	f000 f86e 	bl	80082a0 <Os_Task_20ms>
    	while(task20ms_cnt == tim3_20count)
 80081c4:	e7ec      	b.n	80081a0 <Task20ms_0+0x4>
 80081c6:	bf00      	nop
 80081c8:	20002944 	.word	0x20002944
 80081cc:	200000ac 	.word	0x200000ac
 80081d0:	20002940 	.word	0x20002940

080081d4 <Task50ms_0>:
    }
}


volatile void Task50ms_0()
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task50ms_cnt == tim3_50count)
 80081d8:	bf00      	nop
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <Task50ms_0+0x2c>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <Task50ms_0+0x30>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d0f9      	beq.n	80081da <Task50ms_0+0x6>
    	{

    	}
   		Os_Task50ms_0_cnt++;
 80081e6:	4b08      	ldr	r3, [pc, #32]	; (8008208 <Task50ms_0+0x34>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a06      	ldr	r2, [pc, #24]	; (8008208 <Task50ms_0+0x34>)
 80081ee:	6013      	str	r3, [r2, #0]
    	task50ms_cnt = tim3_50count;
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <Task50ms_0+0x30>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a02      	ldr	r2, [pc, #8]	; (8008200 <Task50ms_0+0x2c>)
 80081f6:	6013      	str	r3, [r2, #0]

    	Os_Task_50ms();
 80081f8:	f000 f858 	bl	80082ac <Os_Task_50ms>
    	while(task50ms_cnt == tim3_50count)
 80081fc:	e7ec      	b.n	80081d8 <Task50ms_0+0x4>
 80081fe:	bf00      	nop
 8008200:	2000294c 	.word	0x2000294c
 8008204:	200000b0 	.word	0x200000b0
 8008208:	20002948 	.word	0x20002948

0800820c <Task100ms_0>:
    }
}


volatile void Task100ms_0()
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task100ms_cnt == tim3_100count)
 8008210:	bf00      	nop
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <Task100ms_0+0x2c>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <Task100ms_0+0x30>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d0f9      	beq.n	8008212 <Task100ms_0+0x6>
    	{

    	}
   		Os_Task100ms_0_cnt++;
 800821e:	4b08      	ldr	r3, [pc, #32]	; (8008240 <Task100ms_0+0x34>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3301      	adds	r3, #1
 8008224:	4a06      	ldr	r2, [pc, #24]	; (8008240 <Task100ms_0+0x34>)
 8008226:	6013      	str	r3, [r2, #0]
    	task100ms_cnt = tim3_100count;
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <Task100ms_0+0x30>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a02      	ldr	r2, [pc, #8]	; (8008238 <Task100ms_0+0x2c>)
 800822e:	6013      	str	r3, [r2, #0]

    	Os_Task_100ms();
 8008230:	f000 f842 	bl	80082b8 <Os_Task_100ms>
    	while(task100ms_cnt == tim3_100count)
 8008234:	e7ec      	b.n	8008210 <Task100ms_0+0x4>
 8008236:	bf00      	nop
 8008238:	20002954 	.word	0x20002954
 800823c:	200000b4 	.word	0x200000b4
 8008240:	20002950 	.word	0x20002950

08008244 <Task500ms_0>:
    }
}


volatile void Task500ms_0()
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task500ms_cnt == tim3_500count)
 8008248:	bf00      	nop
 800824a:	4b09      	ldr	r3, [pc, #36]	; (8008270 <Task500ms_0+0x2c>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <Task500ms_0+0x30>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d0f9      	beq.n	800824a <Task500ms_0+0x6>
    	{

    	}
   		Os_Task500ms_0_cnt++;
 8008256:	4b08      	ldr	r3, [pc, #32]	; (8008278 <Task500ms_0+0x34>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	4a06      	ldr	r2, [pc, #24]	; (8008278 <Task500ms_0+0x34>)
 800825e:	6013      	str	r3, [r2, #0]
    	task500ms_cnt = tim3_500count;
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <Task500ms_0+0x30>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a02      	ldr	r2, [pc, #8]	; (8008270 <Task500ms_0+0x2c>)
 8008266:	6013      	str	r3, [r2, #0]

    	Os_Task_500ms();
 8008268:	f000 f82c 	bl	80082c4 <Os_Task_500ms>
    	while(task500ms_cnt == tim3_500count)
 800826c:	e7ec      	b.n	8008248 <Task500ms_0+0x4>
 800826e:	bf00      	nop
 8008270:	2000295c 	.word	0x2000295c
 8008274:	200000b8 	.word	0x200000b8
 8008278:	20002958 	.word	0x20002958

0800827c <Os_Task_StartUp>:

#include "Cdd_Servo.h"
#include "LED.h"

TASK(StartUp)()
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
	Rte_Os_Task_StartUp();
 8008280:	f000 f868 	bl	8008354 <Rte_Task_StartUp>
}
 8008284:	bf00      	nop
 8008286:	bd80      	pop	{r7, pc}

08008288 <Os_Task_5ms>:

TASK(5ms)()
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
	Rte_Os_Task_5ms();
 800828c:	f000 f876 	bl	800837c <Rte_Task_5ms>
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}

08008294 <Os_Task_10ms>:

TASK(10ms)()
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 8008298:	f000 f876 	bl	8008388 <Rte_Task_10ms>
}
 800829c:	bf00      	nop
 800829e:	bd80      	pop	{r7, pc}

080082a0 <Os_Task_20ms>:

TASK(20ms)()
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
	Rte_Os_Task_20ms();
 80082a4:	f000 f882 	bl	80083ac <Rte_Task_20ms>
}
 80082a8:	bf00      	nop
 80082aa:	bd80      	pop	{r7, pc}

080082ac <Os_Task_50ms>:

TASK(50ms)()
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 80082b0:	f000 f882 	bl	80083b8 <Rte_Task_50ms>
}
 80082b4:	bf00      	nop
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <Os_Task_100ms>:

TASK(100ms)()
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 80082bc:	f000 f882 	bl	80083c4 <Rte_Task_100ms>
}
 80082c0:	bf00      	nop
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <Os_Task_500ms>:

TASK(500ms)()
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 80082c8:	f000 f882 	bl	80083d0 <Rte_Task_500ms>
}
 80082cc:	bf00      	nop
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
	Gpt_TIM3_Start_IT();
 80082d4:	f7fa fbf0 	bl	8002ab8 <Gpt_TIM3_Start_IT>
}
 80082d8:	bf00      	nop
 80082da:	bd80      	pop	{r7, pc}

080082dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80082dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008314 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80082e0:	480d      	ldr	r0, [pc, #52]	; (8008318 <LoopForever+0x6>)
  ldr r1, =_edata
 80082e2:	490e      	ldr	r1, [pc, #56]	; (800831c <LoopForever+0xa>)
  ldr r2, =_sidata
 80082e4:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <LoopForever+0xe>)
  movs r3, #0
 80082e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082e8:	e002      	b.n	80082f0 <LoopCopyDataInit>

080082ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082ee:	3304      	adds	r3, #4

080082f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082f4:	d3f9      	bcc.n	80082ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082f6:	4a0b      	ldr	r2, [pc, #44]	; (8008324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80082f8:	4c0b      	ldr	r4, [pc, #44]	; (8008328 <LoopForever+0x16>)
  movs r3, #0
 80082fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082fc:	e001      	b.n	8008302 <LoopFillZerobss>

080082fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008300:	3204      	adds	r2, #4

08008302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008304:	d3fb      	bcc.n	80082fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008306:	f7fc f92d 	bl	8004564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800830a:	f000 f8c9 	bl	80084a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 800830e:	f7ff fe22 	bl	8007f56 <EcuM_Init>

08008312 <LoopForever>:

LoopForever:
    b LoopForever
 8008312:	e7fe      	b.n	8008312 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008314:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800831c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8008320:	08008e64 	.word	0x08008e64
  ldr r2, =_sbss
 8008324:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8008328:	20002988 	.word	0x20002988

0800832c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800832c:	e7fe      	b.n	800832c <ADC3_IRQHandler>
	...

08008330 <Rte_Init>:
char databuf[16];
uint16 count = 0;
uint8 crlf[1] = { 0x0A };

void Rte_Init(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8008334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008338:	4804      	ldr	r0, [pc, #16]	; (800834c <Rte_Init+0x1c>)
 800833a:	f7fa faf5 	bl	8002928 <HAL_GPIO_ReadPin>
 800833e:	4603      	mov	r3, r0
 8008340:	461a      	mov	r2, r3
 8008342:	4b03      	ldr	r3, [pc, #12]	; (8008350 <Rte_Init+0x20>)
 8008344:	701a      	strb	r2, [r3, #0]
}
 8008346:	bf00      	nop
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	48000800 	.word	0x48000800
 8008350:	20002960 	.word	0x20002960

08008354 <Rte_Task_StartUp>:

/* Os Tasks*/
/* Init task */
void Rte_Task_StartUp(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 8008358:	f7ff fdf5 	bl	8007f46 <EcuM_StartUp_Two>

	/* Bsw stacks init */

	/* Rte init */
	Rte_Init();
 800835c:	f7ff ffe8 	bl	8008330 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 8008360:	f7f8 fc36 	bl	8000bd0 <Cdd_Servo_Init>
	/* Asw init */
	Access_Init();
 8008364:	f7f8 fb82 	bl	8000a6c <Access_Init>
	Engine_Init();
 8008368:	f7f8 fba4 	bl	8000ab4 <Engine_Init>
	Brakes_Init();
 800836c:	f7f8 fb90 	bl	8000a90 <Brakes_Init>
	Steering_Init();
 8008370:	f7f8 fc1c 	bl	8000bac <Steering_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 8008374:	f7f8 fbf2 	bl	8000b5c <LED_Init>
}
 8008378:	bf00      	nop
 800837a:	bd80      	pop	{r7, pc}

0800837c <Rte_Task_5ms>:

/* Periodic tasks */
void Rte_Task_5ms(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0

}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 800838c:	f7ff fb9e 	bl	8007acc <BswM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 8008390:	f7f8 fe08 	bl	8000fa4 <Cdd_Servo_MainFunction>
	/* ASW */
	Access_MainFunction();
 8008394:	f7f8 fb76 	bl	8000a84 <Access_MainFunction>
	Engine_MainFunction();
 8008398:	f7f8 fb98 	bl	8000acc <Engine_MainFunction>
	Brakes_MainFunction();
 800839c:	f7f8 fb84 	bl	8000aa8 <Brakes_MainFunction>
	Steering_MainFunction();
 80083a0:	f7f8 fc10 	bl	8000bc4 <Steering_MainFunction>
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 80083a4:	f7f8 fbe6 	bl	8000b74 <LED_MainFunction>
}
 80083a8:	bf00      	nop
 80083aa:	bd80      	pop	{r7, pc}

080083ac <Rte_Task_20ms>:

void Rte_Task_20ms(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0

}
 80083b0:	bf00      	nop
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0

}
 80083bc:	bf00      	nop
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr

080083c4 <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0

}
 80083c8:	bf00      	nop
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
	sprintf(databuf, "%4d X", count);
 80083d4:	4b13      	ldr	r3, [pc, #76]	; (8008424 <Rte_Task_500ms+0x54>)
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	4913      	ldr	r1, [pc, #76]	; (8008428 <Rte_Task_500ms+0x58>)
 80083dc:	4813      	ldr	r0, [pc, #76]	; (800842c <Rte_Task_500ms+0x5c>)
 80083de:	f000 f88b 	bl	80084f8 <siprintf>
	databuf[strlen(databuf)] = 0;
 80083e2:	4812      	ldr	r0, [pc, #72]	; (800842c <Rte_Task_500ms+0x5c>)
 80083e4:	f7f7 fefc 	bl	80001e0 <strlen>
 80083e8:	4603      	mov	r3, r0
 80083ea:	4a10      	ldr	r2, [pc, #64]	; (800842c <Rte_Task_500ms+0x5c>)
 80083ec:	2100      	movs	r1, #0
 80083ee:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 80083f0:	480e      	ldr	r0, [pc, #56]	; (800842c <Rte_Task_500ms+0x5c>)
 80083f2:	f7f7 fef5 	bl	80001e0 <strlen>
 80083f6:	4603      	mov	r3, r0
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083fe:	490b      	ldr	r1, [pc, #44]	; (800842c <Rte_Task_500ms+0x5c>)
 8008400:	480b      	ldr	r0, [pc, #44]	; (8008430 <Rte_Task_500ms+0x60>)
 8008402:	f7fe fb8d 	bl	8006b20 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 8008406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800840a:	2201      	movs	r2, #1
 800840c:	4909      	ldr	r1, [pc, #36]	; (8008434 <Rte_Task_500ms+0x64>)
 800840e:	4808      	ldr	r0, [pc, #32]	; (8008430 <Rte_Task_500ms+0x60>)
 8008410:	f7fe fb86 	bl	8006b20 <HAL_UART_Transmit>

	count++;
 8008414:	4b03      	ldr	r3, [pc, #12]	; (8008424 <Rte_Task_500ms+0x54>)
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	3301      	adds	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	4b01      	ldr	r3, [pc, #4]	; (8008424 <Rte_Task_500ms+0x54>)
 800841e:	801a      	strh	r2, [r3, #0]
}
 8008420:	bf00      	nop
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20002974 	.word	0x20002974
 8008428:	08008de8 	.word	0x08008de8
 800842c:	20002964 	.word	0x20002964
 8008430:	200002f0 	.word	0x200002f0
 8008434:	2000000c 	.word	0x2000000c

08008438 <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <Rte_Read_PC13_Pin_State+0x1c>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	701a      	strb	r2, [r3, #0]
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr
 8008454:	20002960 	.word	0x20002960

08008458 <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 8008462:	4a04      	ldr	r2, [pc, #16]	; (8008474 <Rte_Write_PC13_Pin_State+0x1c>)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	7013      	strb	r3, [r2, #0]
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20002960 	.word	0x20002960

08008478 <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	4618      	mov	r0, r3
 8008486:	f7f8 fd71 	bl	8000f6c <Cdd_Servo_RawMove>
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <__errno>:
 8008494:	4b01      	ldr	r3, [pc, #4]	; (800849c <__errno+0x8>)
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000010 	.word	0x20000010

080084a0 <__libc_init_array>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4d0d      	ldr	r5, [pc, #52]	; (80084d8 <__libc_init_array+0x38>)
 80084a4:	4c0d      	ldr	r4, [pc, #52]	; (80084dc <__libc_init_array+0x3c>)
 80084a6:	1b64      	subs	r4, r4, r5
 80084a8:	10a4      	asrs	r4, r4, #2
 80084aa:	2600      	movs	r6, #0
 80084ac:	42a6      	cmp	r6, r4
 80084ae:	d109      	bne.n	80084c4 <__libc_init_array+0x24>
 80084b0:	4d0b      	ldr	r5, [pc, #44]	; (80084e0 <__libc_init_array+0x40>)
 80084b2:	4c0c      	ldr	r4, [pc, #48]	; (80084e4 <__libc_init_array+0x44>)
 80084b4:	f000 fc8c 	bl	8008dd0 <_init>
 80084b8:	1b64      	subs	r4, r4, r5
 80084ba:	10a4      	asrs	r4, r4, #2
 80084bc:	2600      	movs	r6, #0
 80084be:	42a6      	cmp	r6, r4
 80084c0:	d105      	bne.n	80084ce <__libc_init_array+0x2e>
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c8:	4798      	blx	r3
 80084ca:	3601      	adds	r6, #1
 80084cc:	e7ee      	b.n	80084ac <__libc_init_array+0xc>
 80084ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d2:	4798      	blx	r3
 80084d4:	3601      	adds	r6, #1
 80084d6:	e7f2      	b.n	80084be <__libc_init_array+0x1e>
 80084d8:	08008e5c 	.word	0x08008e5c
 80084dc:	08008e5c 	.word	0x08008e5c
 80084e0:	08008e5c 	.word	0x08008e5c
 80084e4:	08008e60 	.word	0x08008e60

080084e8 <memset>:
 80084e8:	4402      	add	r2, r0
 80084ea:	4603      	mov	r3, r0
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d100      	bne.n	80084f2 <memset+0xa>
 80084f0:	4770      	bx	lr
 80084f2:	f803 1b01 	strb.w	r1, [r3], #1
 80084f6:	e7f9      	b.n	80084ec <memset+0x4>

080084f8 <siprintf>:
 80084f8:	b40e      	push	{r1, r2, r3}
 80084fa:	b500      	push	{lr}
 80084fc:	b09c      	sub	sp, #112	; 0x70
 80084fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008500:	9002      	str	r0, [sp, #8]
 8008502:	9006      	str	r0, [sp, #24]
 8008504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008508:	4809      	ldr	r0, [pc, #36]	; (8008530 <siprintf+0x38>)
 800850a:	9107      	str	r1, [sp, #28]
 800850c:	9104      	str	r1, [sp, #16]
 800850e:	4909      	ldr	r1, [pc, #36]	; (8008534 <siprintf+0x3c>)
 8008510:	f853 2b04 	ldr.w	r2, [r3], #4
 8008514:	9105      	str	r1, [sp, #20]
 8008516:	6800      	ldr	r0, [r0, #0]
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	a902      	add	r1, sp, #8
 800851c:	f000 f868 	bl	80085f0 <_svfiprintf_r>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	b01c      	add	sp, #112	; 0x70
 8008528:	f85d eb04 	ldr.w	lr, [sp], #4
 800852c:	b003      	add	sp, #12
 800852e:	4770      	bx	lr
 8008530:	20000010 	.word	0x20000010
 8008534:	ffff0208 	.word	0xffff0208

08008538 <__ssputs_r>:
 8008538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800853c:	688e      	ldr	r6, [r1, #8]
 800853e:	429e      	cmp	r6, r3
 8008540:	4682      	mov	sl, r0
 8008542:	460c      	mov	r4, r1
 8008544:	4690      	mov	r8, r2
 8008546:	461f      	mov	r7, r3
 8008548:	d838      	bhi.n	80085bc <__ssputs_r+0x84>
 800854a:	898a      	ldrh	r2, [r1, #12]
 800854c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008550:	d032      	beq.n	80085b8 <__ssputs_r+0x80>
 8008552:	6825      	ldr	r5, [r4, #0]
 8008554:	6909      	ldr	r1, [r1, #16]
 8008556:	eba5 0901 	sub.w	r9, r5, r1
 800855a:	6965      	ldr	r5, [r4, #20]
 800855c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008564:	3301      	adds	r3, #1
 8008566:	444b      	add	r3, r9
 8008568:	106d      	asrs	r5, r5, #1
 800856a:	429d      	cmp	r5, r3
 800856c:	bf38      	it	cc
 800856e:	461d      	movcc	r5, r3
 8008570:	0553      	lsls	r3, r2, #21
 8008572:	d531      	bpl.n	80085d8 <__ssputs_r+0xa0>
 8008574:	4629      	mov	r1, r5
 8008576:	f000 fb61 	bl	8008c3c <_malloc_r>
 800857a:	4606      	mov	r6, r0
 800857c:	b950      	cbnz	r0, 8008594 <__ssputs_r+0x5c>
 800857e:	230c      	movs	r3, #12
 8008580:	f8ca 3000 	str.w	r3, [sl]
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	6921      	ldr	r1, [r4, #16]
 8008596:	464a      	mov	r2, r9
 8008598:	f000 fabe 	bl	8008b18 <memcpy>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	6126      	str	r6, [r4, #16]
 80085aa:	6165      	str	r5, [r4, #20]
 80085ac:	444e      	add	r6, r9
 80085ae:	eba5 0509 	sub.w	r5, r5, r9
 80085b2:	6026      	str	r6, [r4, #0]
 80085b4:	60a5      	str	r5, [r4, #8]
 80085b6:	463e      	mov	r6, r7
 80085b8:	42be      	cmp	r6, r7
 80085ba:	d900      	bls.n	80085be <__ssputs_r+0x86>
 80085bc:	463e      	mov	r6, r7
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	4632      	mov	r2, r6
 80085c2:	4641      	mov	r1, r8
 80085c4:	f000 fab6 	bl	8008b34 <memmove>
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	1b9b      	subs	r3, r3, r6
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	4433      	add	r3, r6
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7db      	b.n	8008590 <__ssputs_r+0x58>
 80085d8:	462a      	mov	r2, r5
 80085da:	f000 fba3 	bl	8008d24 <_realloc_r>
 80085de:	4606      	mov	r6, r0
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1e1      	bne.n	80085a8 <__ssputs_r+0x70>
 80085e4:	6921      	ldr	r1, [r4, #16]
 80085e6:	4650      	mov	r0, sl
 80085e8:	f000 fabe 	bl	8008b68 <_free_r>
 80085ec:	e7c7      	b.n	800857e <__ssputs_r+0x46>
	...

080085f0 <_svfiprintf_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	4698      	mov	r8, r3
 80085f6:	898b      	ldrh	r3, [r1, #12]
 80085f8:	061b      	lsls	r3, r3, #24
 80085fa:	b09d      	sub	sp, #116	; 0x74
 80085fc:	4607      	mov	r7, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	4614      	mov	r4, r2
 8008602:	d50e      	bpl.n	8008622 <_svfiprintf_r+0x32>
 8008604:	690b      	ldr	r3, [r1, #16]
 8008606:	b963      	cbnz	r3, 8008622 <_svfiprintf_r+0x32>
 8008608:	2140      	movs	r1, #64	; 0x40
 800860a:	f000 fb17 	bl	8008c3c <_malloc_r>
 800860e:	6028      	str	r0, [r5, #0]
 8008610:	6128      	str	r0, [r5, #16]
 8008612:	b920      	cbnz	r0, 800861e <_svfiprintf_r+0x2e>
 8008614:	230c      	movs	r3, #12
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	f04f 30ff 	mov.w	r0, #4294967295
 800861c:	e0d1      	b.n	80087c2 <_svfiprintf_r+0x1d2>
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	616b      	str	r3, [r5, #20]
 8008622:	2300      	movs	r3, #0
 8008624:	9309      	str	r3, [sp, #36]	; 0x24
 8008626:	2320      	movs	r3, #32
 8008628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800862c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008630:	2330      	movs	r3, #48	; 0x30
 8008632:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087dc <_svfiprintf_r+0x1ec>
 8008636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800863a:	f04f 0901 	mov.w	r9, #1
 800863e:	4623      	mov	r3, r4
 8008640:	469a      	mov	sl, r3
 8008642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008646:	b10a      	cbz	r2, 800864c <_svfiprintf_r+0x5c>
 8008648:	2a25      	cmp	r2, #37	; 0x25
 800864a:	d1f9      	bne.n	8008640 <_svfiprintf_r+0x50>
 800864c:	ebba 0b04 	subs.w	fp, sl, r4
 8008650:	d00b      	beq.n	800866a <_svfiprintf_r+0x7a>
 8008652:	465b      	mov	r3, fp
 8008654:	4622      	mov	r2, r4
 8008656:	4629      	mov	r1, r5
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff ff6d 	bl	8008538 <__ssputs_r>
 800865e:	3001      	adds	r0, #1
 8008660:	f000 80aa 	beq.w	80087b8 <_svfiprintf_r+0x1c8>
 8008664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008666:	445a      	add	r2, fp
 8008668:	9209      	str	r2, [sp, #36]	; 0x24
 800866a:	f89a 3000 	ldrb.w	r3, [sl]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 80a2 	beq.w	80087b8 <_svfiprintf_r+0x1c8>
 8008674:	2300      	movs	r3, #0
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867e:	f10a 0a01 	add.w	sl, sl, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	9307      	str	r3, [sp, #28]
 8008686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800868a:	931a      	str	r3, [sp, #104]	; 0x68
 800868c:	4654      	mov	r4, sl
 800868e:	2205      	movs	r2, #5
 8008690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008694:	4851      	ldr	r0, [pc, #324]	; (80087dc <_svfiprintf_r+0x1ec>)
 8008696:	f7f7 fdab 	bl	80001f0 <memchr>
 800869a:	9a04      	ldr	r2, [sp, #16]
 800869c:	b9d8      	cbnz	r0, 80086d6 <_svfiprintf_r+0xe6>
 800869e:	06d0      	lsls	r0, r2, #27
 80086a0:	bf44      	itt	mi
 80086a2:	2320      	movmi	r3, #32
 80086a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a8:	0711      	lsls	r1, r2, #28
 80086aa:	bf44      	itt	mi
 80086ac:	232b      	movmi	r3, #43	; 0x2b
 80086ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b2:	f89a 3000 	ldrb.w	r3, [sl]
 80086b6:	2b2a      	cmp	r3, #42	; 0x2a
 80086b8:	d015      	beq.n	80086e6 <_svfiprintf_r+0xf6>
 80086ba:	9a07      	ldr	r2, [sp, #28]
 80086bc:	4654      	mov	r4, sl
 80086be:	2000      	movs	r0, #0
 80086c0:	f04f 0c0a 	mov.w	ip, #10
 80086c4:	4621      	mov	r1, r4
 80086c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ca:	3b30      	subs	r3, #48	; 0x30
 80086cc:	2b09      	cmp	r3, #9
 80086ce:	d94e      	bls.n	800876e <_svfiprintf_r+0x17e>
 80086d0:	b1b0      	cbz	r0, 8008700 <_svfiprintf_r+0x110>
 80086d2:	9207      	str	r2, [sp, #28]
 80086d4:	e014      	b.n	8008700 <_svfiprintf_r+0x110>
 80086d6:	eba0 0308 	sub.w	r3, r0, r8
 80086da:	fa09 f303 	lsl.w	r3, r9, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	46a2      	mov	sl, r4
 80086e4:	e7d2      	b.n	800868c <_svfiprintf_r+0x9c>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	1d19      	adds	r1, r3, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9103      	str	r1, [sp, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfbb      	ittet	lt
 80086f2:	425b      	neglt	r3, r3
 80086f4:	f042 0202 	orrlt.w	r2, r2, #2
 80086f8:	9307      	strge	r3, [sp, #28]
 80086fa:	9307      	strlt	r3, [sp, #28]
 80086fc:	bfb8      	it	lt
 80086fe:	9204      	strlt	r2, [sp, #16]
 8008700:	7823      	ldrb	r3, [r4, #0]
 8008702:	2b2e      	cmp	r3, #46	; 0x2e
 8008704:	d10c      	bne.n	8008720 <_svfiprintf_r+0x130>
 8008706:	7863      	ldrb	r3, [r4, #1]
 8008708:	2b2a      	cmp	r3, #42	; 0x2a
 800870a:	d135      	bne.n	8008778 <_svfiprintf_r+0x188>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9203      	str	r2, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfb8      	it	lt
 8008718:	f04f 33ff 	movlt.w	r3, #4294967295
 800871c:	3402      	adds	r4, #2
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80087e0 <_svfiprintf_r+0x1f0>
 8008724:	7821      	ldrb	r1, [r4, #0]
 8008726:	2203      	movs	r2, #3
 8008728:	4650      	mov	r0, sl
 800872a:	f7f7 fd61 	bl	80001f0 <memchr>
 800872e:	b140      	cbz	r0, 8008742 <_svfiprintf_r+0x152>
 8008730:	2340      	movs	r3, #64	; 0x40
 8008732:	eba0 000a 	sub.w	r0, r0, sl
 8008736:	fa03 f000 	lsl.w	r0, r3, r0
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	4303      	orrs	r3, r0
 800873e:	3401      	adds	r4, #1
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008746:	4827      	ldr	r0, [pc, #156]	; (80087e4 <_svfiprintf_r+0x1f4>)
 8008748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800874c:	2206      	movs	r2, #6
 800874e:	f7f7 fd4f 	bl	80001f0 <memchr>
 8008752:	2800      	cmp	r0, #0
 8008754:	d038      	beq.n	80087c8 <_svfiprintf_r+0x1d8>
 8008756:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <_svfiprintf_r+0x1f8>)
 8008758:	bb1b      	cbnz	r3, 80087a2 <_svfiprintf_r+0x1b2>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	3307      	adds	r3, #7
 800875e:	f023 0307 	bic.w	r3, r3, #7
 8008762:	3308      	adds	r3, #8
 8008764:	9303      	str	r3, [sp, #12]
 8008766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008768:	4433      	add	r3, r6
 800876a:	9309      	str	r3, [sp, #36]	; 0x24
 800876c:	e767      	b.n	800863e <_svfiprintf_r+0x4e>
 800876e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008772:	460c      	mov	r4, r1
 8008774:	2001      	movs	r0, #1
 8008776:	e7a5      	b.n	80086c4 <_svfiprintf_r+0xd4>
 8008778:	2300      	movs	r3, #0
 800877a:	3401      	adds	r4, #1
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	4619      	mov	r1, r3
 8008780:	f04f 0c0a 	mov.w	ip, #10
 8008784:	4620      	mov	r0, r4
 8008786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800878a:	3a30      	subs	r2, #48	; 0x30
 800878c:	2a09      	cmp	r2, #9
 800878e:	d903      	bls.n	8008798 <_svfiprintf_r+0x1a8>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0c5      	beq.n	8008720 <_svfiprintf_r+0x130>
 8008794:	9105      	str	r1, [sp, #20]
 8008796:	e7c3      	b.n	8008720 <_svfiprintf_r+0x130>
 8008798:	fb0c 2101 	mla	r1, ip, r1, r2
 800879c:	4604      	mov	r4, r0
 800879e:	2301      	movs	r3, #1
 80087a0:	e7f0      	b.n	8008784 <_svfiprintf_r+0x194>
 80087a2:	ab03      	add	r3, sp, #12
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	462a      	mov	r2, r5
 80087a8:	4b10      	ldr	r3, [pc, #64]	; (80087ec <_svfiprintf_r+0x1fc>)
 80087aa:	a904      	add	r1, sp, #16
 80087ac:	4638      	mov	r0, r7
 80087ae:	f3af 8000 	nop.w
 80087b2:	1c42      	adds	r2, r0, #1
 80087b4:	4606      	mov	r6, r0
 80087b6:	d1d6      	bne.n	8008766 <_svfiprintf_r+0x176>
 80087b8:	89ab      	ldrh	r3, [r5, #12]
 80087ba:	065b      	lsls	r3, r3, #25
 80087bc:	f53f af2c 	bmi.w	8008618 <_svfiprintf_r+0x28>
 80087c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c2:	b01d      	add	sp, #116	; 0x74
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4b07      	ldr	r3, [pc, #28]	; (80087ec <_svfiprintf_r+0x1fc>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	4638      	mov	r0, r7
 80087d4:	f000 f87a 	bl	80088cc <_printf_i>
 80087d8:	e7eb      	b.n	80087b2 <_svfiprintf_r+0x1c2>
 80087da:	bf00      	nop
 80087dc:	08008e28 	.word	0x08008e28
 80087e0:	08008e2e 	.word	0x08008e2e
 80087e4:	08008e32 	.word	0x08008e32
 80087e8:	00000000 	.word	0x00000000
 80087ec:	08008539 	.word	0x08008539

080087f0 <_printf_common>:
 80087f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f4:	4616      	mov	r6, r2
 80087f6:	4699      	mov	r9, r3
 80087f8:	688a      	ldr	r2, [r1, #8]
 80087fa:	690b      	ldr	r3, [r1, #16]
 80087fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008800:	4293      	cmp	r3, r2
 8008802:	bfb8      	it	lt
 8008804:	4613      	movlt	r3, r2
 8008806:	6033      	str	r3, [r6, #0]
 8008808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800880c:	4607      	mov	r7, r0
 800880e:	460c      	mov	r4, r1
 8008810:	b10a      	cbz	r2, 8008816 <_printf_common+0x26>
 8008812:	3301      	adds	r3, #1
 8008814:	6033      	str	r3, [r6, #0]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	0699      	lsls	r1, r3, #26
 800881a:	bf42      	ittt	mi
 800881c:	6833      	ldrmi	r3, [r6, #0]
 800881e:	3302      	addmi	r3, #2
 8008820:	6033      	strmi	r3, [r6, #0]
 8008822:	6825      	ldr	r5, [r4, #0]
 8008824:	f015 0506 	ands.w	r5, r5, #6
 8008828:	d106      	bne.n	8008838 <_printf_common+0x48>
 800882a:	f104 0a19 	add.w	sl, r4, #25
 800882e:	68e3      	ldr	r3, [r4, #12]
 8008830:	6832      	ldr	r2, [r6, #0]
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	42ab      	cmp	r3, r5
 8008836:	dc26      	bgt.n	8008886 <_printf_common+0x96>
 8008838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800883c:	1e13      	subs	r3, r2, #0
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	bf18      	it	ne
 8008842:	2301      	movne	r3, #1
 8008844:	0692      	lsls	r2, r2, #26
 8008846:	d42b      	bmi.n	80088a0 <_printf_common+0xb0>
 8008848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800884c:	4649      	mov	r1, r9
 800884e:	4638      	mov	r0, r7
 8008850:	47c0      	blx	r8
 8008852:	3001      	adds	r0, #1
 8008854:	d01e      	beq.n	8008894 <_printf_common+0xa4>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	68e5      	ldr	r5, [r4, #12]
 800885a:	6832      	ldr	r2, [r6, #0]
 800885c:	f003 0306 	and.w	r3, r3, #6
 8008860:	2b04      	cmp	r3, #4
 8008862:	bf08      	it	eq
 8008864:	1aad      	subeq	r5, r5, r2
 8008866:	68a3      	ldr	r3, [r4, #8]
 8008868:	6922      	ldr	r2, [r4, #16]
 800886a:	bf0c      	ite	eq
 800886c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008870:	2500      	movne	r5, #0
 8008872:	4293      	cmp	r3, r2
 8008874:	bfc4      	itt	gt
 8008876:	1a9b      	subgt	r3, r3, r2
 8008878:	18ed      	addgt	r5, r5, r3
 800887a:	2600      	movs	r6, #0
 800887c:	341a      	adds	r4, #26
 800887e:	42b5      	cmp	r5, r6
 8008880:	d11a      	bne.n	80088b8 <_printf_common+0xc8>
 8008882:	2000      	movs	r0, #0
 8008884:	e008      	b.n	8008898 <_printf_common+0xa8>
 8008886:	2301      	movs	r3, #1
 8008888:	4652      	mov	r2, sl
 800888a:	4649      	mov	r1, r9
 800888c:	4638      	mov	r0, r7
 800888e:	47c0      	blx	r8
 8008890:	3001      	adds	r0, #1
 8008892:	d103      	bne.n	800889c <_printf_common+0xac>
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889c:	3501      	adds	r5, #1
 800889e:	e7c6      	b.n	800882e <_printf_common+0x3e>
 80088a0:	18e1      	adds	r1, r4, r3
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	2030      	movs	r0, #48	; 0x30
 80088a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088aa:	4422      	add	r2, r4
 80088ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088b4:	3302      	adds	r3, #2
 80088b6:	e7c7      	b.n	8008848 <_printf_common+0x58>
 80088b8:	2301      	movs	r3, #1
 80088ba:	4622      	mov	r2, r4
 80088bc:	4649      	mov	r1, r9
 80088be:	4638      	mov	r0, r7
 80088c0:	47c0      	blx	r8
 80088c2:	3001      	adds	r0, #1
 80088c4:	d0e6      	beq.n	8008894 <_printf_common+0xa4>
 80088c6:	3601      	adds	r6, #1
 80088c8:	e7d9      	b.n	800887e <_printf_common+0x8e>
	...

080088cc <_printf_i>:
 80088cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	7e0f      	ldrb	r7, [r1, #24]
 80088d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d4:	2f78      	cmp	r7, #120	; 0x78
 80088d6:	4691      	mov	r9, r2
 80088d8:	4680      	mov	r8, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	469a      	mov	sl, r3
 80088de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088e2:	d807      	bhi.n	80088f4 <_printf_i+0x28>
 80088e4:	2f62      	cmp	r7, #98	; 0x62
 80088e6:	d80a      	bhi.n	80088fe <_printf_i+0x32>
 80088e8:	2f00      	cmp	r7, #0
 80088ea:	f000 80d8 	beq.w	8008a9e <_printf_i+0x1d2>
 80088ee:	2f58      	cmp	r7, #88	; 0x58
 80088f0:	f000 80a3 	beq.w	8008a3a <_printf_i+0x16e>
 80088f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088fc:	e03a      	b.n	8008974 <_printf_i+0xa8>
 80088fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008902:	2b15      	cmp	r3, #21
 8008904:	d8f6      	bhi.n	80088f4 <_printf_i+0x28>
 8008906:	a101      	add	r1, pc, #4	; (adr r1, 800890c <_printf_i+0x40>)
 8008908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800890c:	08008965 	.word	0x08008965
 8008910:	08008979 	.word	0x08008979
 8008914:	080088f5 	.word	0x080088f5
 8008918:	080088f5 	.word	0x080088f5
 800891c:	080088f5 	.word	0x080088f5
 8008920:	080088f5 	.word	0x080088f5
 8008924:	08008979 	.word	0x08008979
 8008928:	080088f5 	.word	0x080088f5
 800892c:	080088f5 	.word	0x080088f5
 8008930:	080088f5 	.word	0x080088f5
 8008934:	080088f5 	.word	0x080088f5
 8008938:	08008a85 	.word	0x08008a85
 800893c:	080089a9 	.word	0x080089a9
 8008940:	08008a67 	.word	0x08008a67
 8008944:	080088f5 	.word	0x080088f5
 8008948:	080088f5 	.word	0x080088f5
 800894c:	08008aa7 	.word	0x08008aa7
 8008950:	080088f5 	.word	0x080088f5
 8008954:	080089a9 	.word	0x080089a9
 8008958:	080088f5 	.word	0x080088f5
 800895c:	080088f5 	.word	0x080088f5
 8008960:	08008a6f 	.word	0x08008a6f
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	602a      	str	r2, [r5, #0]
 800896c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008974:	2301      	movs	r3, #1
 8008976:	e0a3      	b.n	8008ac0 <_printf_i+0x1f4>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	6829      	ldr	r1, [r5, #0]
 800897c:	0606      	lsls	r6, r0, #24
 800897e:	f101 0304 	add.w	r3, r1, #4
 8008982:	d50a      	bpl.n	800899a <_printf_i+0xce>
 8008984:	680e      	ldr	r6, [r1, #0]
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	2e00      	cmp	r6, #0
 800898a:	da03      	bge.n	8008994 <_printf_i+0xc8>
 800898c:	232d      	movs	r3, #45	; 0x2d
 800898e:	4276      	negs	r6, r6
 8008990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008994:	485e      	ldr	r0, [pc, #376]	; (8008b10 <_printf_i+0x244>)
 8008996:	230a      	movs	r3, #10
 8008998:	e019      	b.n	80089ce <_printf_i+0x102>
 800899a:	680e      	ldr	r6, [r1, #0]
 800899c:	602b      	str	r3, [r5, #0]
 800899e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089a2:	bf18      	it	ne
 80089a4:	b236      	sxthne	r6, r6
 80089a6:	e7ef      	b.n	8008988 <_printf_i+0xbc>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	6820      	ldr	r0, [r4, #0]
 80089ac:	1d19      	adds	r1, r3, #4
 80089ae:	6029      	str	r1, [r5, #0]
 80089b0:	0601      	lsls	r1, r0, #24
 80089b2:	d501      	bpl.n	80089b8 <_printf_i+0xec>
 80089b4:	681e      	ldr	r6, [r3, #0]
 80089b6:	e002      	b.n	80089be <_printf_i+0xf2>
 80089b8:	0646      	lsls	r6, r0, #25
 80089ba:	d5fb      	bpl.n	80089b4 <_printf_i+0xe8>
 80089bc:	881e      	ldrh	r6, [r3, #0]
 80089be:	4854      	ldr	r0, [pc, #336]	; (8008b10 <_printf_i+0x244>)
 80089c0:	2f6f      	cmp	r7, #111	; 0x6f
 80089c2:	bf0c      	ite	eq
 80089c4:	2308      	moveq	r3, #8
 80089c6:	230a      	movne	r3, #10
 80089c8:	2100      	movs	r1, #0
 80089ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089ce:	6865      	ldr	r5, [r4, #4]
 80089d0:	60a5      	str	r5, [r4, #8]
 80089d2:	2d00      	cmp	r5, #0
 80089d4:	bfa2      	ittt	ge
 80089d6:	6821      	ldrge	r1, [r4, #0]
 80089d8:	f021 0104 	bicge.w	r1, r1, #4
 80089dc:	6021      	strge	r1, [r4, #0]
 80089de:	b90e      	cbnz	r6, 80089e4 <_printf_i+0x118>
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	d04d      	beq.n	8008a80 <_printf_i+0x1b4>
 80089e4:	4615      	mov	r5, r2
 80089e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80089ea:	fb03 6711 	mls	r7, r3, r1, r6
 80089ee:	5dc7      	ldrb	r7, [r0, r7]
 80089f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089f4:	4637      	mov	r7, r6
 80089f6:	42bb      	cmp	r3, r7
 80089f8:	460e      	mov	r6, r1
 80089fa:	d9f4      	bls.n	80089e6 <_printf_i+0x11a>
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	d10b      	bne.n	8008a18 <_printf_i+0x14c>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	07de      	lsls	r6, r3, #31
 8008a04:	d508      	bpl.n	8008a18 <_printf_i+0x14c>
 8008a06:	6923      	ldr	r3, [r4, #16]
 8008a08:	6861      	ldr	r1, [r4, #4]
 8008a0a:	4299      	cmp	r1, r3
 8008a0c:	bfde      	ittt	le
 8008a0e:	2330      	movle	r3, #48	; 0x30
 8008a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a18:	1b52      	subs	r2, r2, r5
 8008a1a:	6122      	str	r2, [r4, #16]
 8008a1c:	f8cd a000 	str.w	sl, [sp]
 8008a20:	464b      	mov	r3, r9
 8008a22:	aa03      	add	r2, sp, #12
 8008a24:	4621      	mov	r1, r4
 8008a26:	4640      	mov	r0, r8
 8008a28:	f7ff fee2 	bl	80087f0 <_printf_common>
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d14c      	bne.n	8008aca <_printf_i+0x1fe>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	b004      	add	sp, #16
 8008a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3a:	4835      	ldr	r0, [pc, #212]	; (8008b10 <_printf_i+0x244>)
 8008a3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a40:	6829      	ldr	r1, [r5, #0]
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a48:	6029      	str	r1, [r5, #0]
 8008a4a:	061d      	lsls	r5, r3, #24
 8008a4c:	d514      	bpl.n	8008a78 <_printf_i+0x1ac>
 8008a4e:	07df      	lsls	r7, r3, #31
 8008a50:	bf44      	itt	mi
 8008a52:	f043 0320 	orrmi.w	r3, r3, #32
 8008a56:	6023      	strmi	r3, [r4, #0]
 8008a58:	b91e      	cbnz	r6, 8008a62 <_printf_i+0x196>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	f023 0320 	bic.w	r3, r3, #32
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	2310      	movs	r3, #16
 8008a64:	e7b0      	b.n	80089c8 <_printf_i+0xfc>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	f043 0320 	orr.w	r3, r3, #32
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	2378      	movs	r3, #120	; 0x78
 8008a70:	4828      	ldr	r0, [pc, #160]	; (8008b14 <_printf_i+0x248>)
 8008a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a76:	e7e3      	b.n	8008a40 <_printf_i+0x174>
 8008a78:	0659      	lsls	r1, r3, #25
 8008a7a:	bf48      	it	mi
 8008a7c:	b2b6      	uxthmi	r6, r6
 8008a7e:	e7e6      	b.n	8008a4e <_printf_i+0x182>
 8008a80:	4615      	mov	r5, r2
 8008a82:	e7bb      	b.n	80089fc <_printf_i+0x130>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	6826      	ldr	r6, [r4, #0]
 8008a88:	6961      	ldr	r1, [r4, #20]
 8008a8a:	1d18      	adds	r0, r3, #4
 8008a8c:	6028      	str	r0, [r5, #0]
 8008a8e:	0635      	lsls	r5, r6, #24
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	d501      	bpl.n	8008a98 <_printf_i+0x1cc>
 8008a94:	6019      	str	r1, [r3, #0]
 8008a96:	e002      	b.n	8008a9e <_printf_i+0x1d2>
 8008a98:	0670      	lsls	r0, r6, #25
 8008a9a:	d5fb      	bpl.n	8008a94 <_printf_i+0x1c8>
 8008a9c:	8019      	strh	r1, [r3, #0]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	4615      	mov	r5, r2
 8008aa4:	e7ba      	b.n	8008a1c <_printf_i+0x150>
 8008aa6:	682b      	ldr	r3, [r5, #0]
 8008aa8:	1d1a      	adds	r2, r3, #4
 8008aaa:	602a      	str	r2, [r5, #0]
 8008aac:	681d      	ldr	r5, [r3, #0]
 8008aae:	6862      	ldr	r2, [r4, #4]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f7f7 fb9c 	bl	80001f0 <memchr>
 8008ab8:	b108      	cbz	r0, 8008abe <_printf_i+0x1f2>
 8008aba:	1b40      	subs	r0, r0, r5
 8008abc:	6060      	str	r0, [r4, #4]
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac8:	e7a8      	b.n	8008a1c <_printf_i+0x150>
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	462a      	mov	r2, r5
 8008ace:	4649      	mov	r1, r9
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	47d0      	blx	sl
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d0ab      	beq.n	8008a30 <_printf_i+0x164>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	079b      	lsls	r3, r3, #30
 8008adc:	d413      	bmi.n	8008b06 <_printf_i+0x23a>
 8008ade:	68e0      	ldr	r0, [r4, #12]
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	bfb8      	it	lt
 8008ae6:	4618      	movlt	r0, r3
 8008ae8:	e7a4      	b.n	8008a34 <_printf_i+0x168>
 8008aea:	2301      	movs	r3, #1
 8008aec:	4632      	mov	r2, r6
 8008aee:	4649      	mov	r1, r9
 8008af0:	4640      	mov	r0, r8
 8008af2:	47d0      	blx	sl
 8008af4:	3001      	adds	r0, #1
 8008af6:	d09b      	beq.n	8008a30 <_printf_i+0x164>
 8008af8:	3501      	adds	r5, #1
 8008afa:	68e3      	ldr	r3, [r4, #12]
 8008afc:	9903      	ldr	r1, [sp, #12]
 8008afe:	1a5b      	subs	r3, r3, r1
 8008b00:	42ab      	cmp	r3, r5
 8008b02:	dcf2      	bgt.n	8008aea <_printf_i+0x21e>
 8008b04:	e7eb      	b.n	8008ade <_printf_i+0x212>
 8008b06:	2500      	movs	r5, #0
 8008b08:	f104 0619 	add.w	r6, r4, #25
 8008b0c:	e7f5      	b.n	8008afa <_printf_i+0x22e>
 8008b0e:	bf00      	nop
 8008b10:	08008e39 	.word	0x08008e39
 8008b14:	08008e4a 	.word	0x08008e4a

08008b18 <memcpy>:
 8008b18:	440a      	add	r2, r1
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b20:	d100      	bne.n	8008b24 <memcpy+0xc>
 8008b22:	4770      	bx	lr
 8008b24:	b510      	push	{r4, lr}
 8008b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b2e:	4291      	cmp	r1, r2
 8008b30:	d1f9      	bne.n	8008b26 <memcpy+0xe>
 8008b32:	bd10      	pop	{r4, pc}

08008b34 <memmove>:
 8008b34:	4288      	cmp	r0, r1
 8008b36:	b510      	push	{r4, lr}
 8008b38:	eb01 0402 	add.w	r4, r1, r2
 8008b3c:	d902      	bls.n	8008b44 <memmove+0x10>
 8008b3e:	4284      	cmp	r4, r0
 8008b40:	4623      	mov	r3, r4
 8008b42:	d807      	bhi.n	8008b54 <memmove+0x20>
 8008b44:	1e43      	subs	r3, r0, #1
 8008b46:	42a1      	cmp	r1, r4
 8008b48:	d008      	beq.n	8008b5c <memmove+0x28>
 8008b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b52:	e7f8      	b.n	8008b46 <memmove+0x12>
 8008b54:	4402      	add	r2, r0
 8008b56:	4601      	mov	r1, r0
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	d100      	bne.n	8008b5e <memmove+0x2a>
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b66:	e7f7      	b.n	8008b58 <memmove+0x24>

08008b68 <_free_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d041      	beq.n	8008bf4 <_free_r+0x8c>
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f0c      	subs	r4, r1, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	f000 f912 	bl	8008da4 <__malloc_lock>
 8008b80:	4a1d      	ldr	r2, [pc, #116]	; (8008bf8 <_free_r+0x90>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	b933      	cbnz	r3, 8008b94 <_free_r+0x2c>
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6014      	str	r4, [r2, #0]
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b90:	f000 b90e 	b.w	8008db0 <__malloc_unlock>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x42>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf01      	itttt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	1809      	addeq	r1, r1, r0
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	e7ed      	b.n	8008b86 <_free_r+0x1e>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x4c>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x42>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1850      	adds	r0, r2, r1
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x6c>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	1850      	adds	r0, r2, r1
 8008bc2:	4283      	cmp	r3, r0
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1e0      	bne.n	8008b8a <_free_r+0x22>
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	6053      	str	r3, [r2, #4]
 8008bce:	4401      	add	r1, r0
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	e7da      	b.n	8008b8a <_free_r+0x22>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x74>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	e7d6      	b.n	8008b8a <_free_r+0x22>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	1821      	adds	r1, r4, r0
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf04      	itt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	bf04      	itt	eq
 8008bec:	1809      	addeq	r1, r1, r0
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	6054      	str	r4, [r2, #4]
 8008bf2:	e7ca      	b.n	8008b8a <_free_r+0x22>
 8008bf4:	bd38      	pop	{r3, r4, r5, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20002978 	.word	0x20002978

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0e      	ldr	r6, [pc, #56]	; (8008c38 <sbrk_aligned+0x3c>)
 8008c00:	460c      	mov	r4, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	b911      	cbnz	r1, 8008c0e <sbrk_aligned+0x12>
 8008c08:	f000 f8bc 	bl	8008d84 <_sbrk_r>
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f8b7 	bl	8008d84 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d00a      	beq.n	8008c30 <sbrk_aligned+0x34>
 8008c1a:	1cc4      	adds	r4, r0, #3
 8008c1c:	f024 0403 	bic.w	r4, r4, #3
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d007      	beq.n	8008c34 <sbrk_aligned+0x38>
 8008c24:	1a21      	subs	r1, r4, r0
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 f8ac 	bl	8008d84 <_sbrk_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d101      	bne.n	8008c34 <sbrk_aligned+0x38>
 8008c30:	f04f 34ff 	mov.w	r4, #4294967295
 8008c34:	4620      	mov	r0, r4
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	2000297c 	.word	0x2000297c

08008c3c <_malloc_r>:
 8008c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	1ccd      	adds	r5, r1, #3
 8008c42:	f025 0503 	bic.w	r5, r5, #3
 8008c46:	3508      	adds	r5, #8
 8008c48:	2d0c      	cmp	r5, #12
 8008c4a:	bf38      	it	cc
 8008c4c:	250c      	movcc	r5, #12
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	4607      	mov	r7, r0
 8008c52:	db01      	blt.n	8008c58 <_malloc_r+0x1c>
 8008c54:	42a9      	cmp	r1, r5
 8008c56:	d905      	bls.n	8008c64 <_malloc_r+0x28>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c64:	4e2e      	ldr	r6, [pc, #184]	; (8008d20 <_malloc_r+0xe4>)
 8008c66:	f000 f89d 	bl	8008da4 <__malloc_lock>
 8008c6a:	6833      	ldr	r3, [r6, #0]
 8008c6c:	461c      	mov	r4, r3
 8008c6e:	bb34      	cbnz	r4, 8008cbe <_malloc_r+0x82>
 8008c70:	4629      	mov	r1, r5
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7ff ffc2 	bl	8008bfc <sbrk_aligned>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	d14d      	bne.n	8008d1a <_malloc_r+0xde>
 8008c7e:	6834      	ldr	r4, [r6, #0]
 8008c80:	4626      	mov	r6, r4
 8008c82:	2e00      	cmp	r6, #0
 8008c84:	d140      	bne.n	8008d08 <_malloc_r+0xcc>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	eb04 0803 	add.w	r8, r4, r3
 8008c90:	f000 f878 	bl	8008d84 <_sbrk_r>
 8008c94:	4580      	cmp	r8, r0
 8008c96:	d13a      	bne.n	8008d0e <_malloc_r+0xd2>
 8008c98:	6821      	ldr	r1, [r4, #0]
 8008c9a:	3503      	adds	r5, #3
 8008c9c:	1a6d      	subs	r5, r5, r1
 8008c9e:	f025 0503 	bic.w	r5, r5, #3
 8008ca2:	3508      	adds	r5, #8
 8008ca4:	2d0c      	cmp	r5, #12
 8008ca6:	bf38      	it	cc
 8008ca8:	250c      	movcc	r5, #12
 8008caa:	4629      	mov	r1, r5
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa5 	bl	8008bfc <sbrk_aligned>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d02b      	beq.n	8008d0e <_malloc_r+0xd2>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	442b      	add	r3, r5
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	e00e      	b.n	8008cdc <_malloc_r+0xa0>
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	1b52      	subs	r2, r2, r5
 8008cc2:	d41e      	bmi.n	8008d02 <_malloc_r+0xc6>
 8008cc4:	2a0b      	cmp	r2, #11
 8008cc6:	d916      	bls.n	8008cf6 <_malloc_r+0xba>
 8008cc8:	1961      	adds	r1, r4, r5
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	6025      	str	r5, [r4, #0]
 8008cce:	bf18      	it	ne
 8008cd0:	6059      	strne	r1, [r3, #4]
 8008cd2:	6863      	ldr	r3, [r4, #4]
 8008cd4:	bf08      	it	eq
 8008cd6:	6031      	streq	r1, [r6, #0]
 8008cd8:	5162      	str	r2, [r4, r5]
 8008cda:	604b      	str	r3, [r1, #4]
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f104 060b 	add.w	r6, r4, #11
 8008ce2:	f000 f865 	bl	8008db0 <__malloc_unlock>
 8008ce6:	f026 0607 	bic.w	r6, r6, #7
 8008cea:	1d23      	adds	r3, r4, #4
 8008cec:	1af2      	subs	r2, r6, r3
 8008cee:	d0b6      	beq.n	8008c5e <_malloc_r+0x22>
 8008cf0:	1b9b      	subs	r3, r3, r6
 8008cf2:	50a3      	str	r3, [r4, r2]
 8008cf4:	e7b3      	b.n	8008c5e <_malloc_r+0x22>
 8008cf6:	6862      	ldr	r2, [r4, #4]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	bf0c      	ite	eq
 8008cfc:	6032      	streq	r2, [r6, #0]
 8008cfe:	605a      	strne	r2, [r3, #4]
 8008d00:	e7ec      	b.n	8008cdc <_malloc_r+0xa0>
 8008d02:	4623      	mov	r3, r4
 8008d04:	6864      	ldr	r4, [r4, #4]
 8008d06:	e7b2      	b.n	8008c6e <_malloc_r+0x32>
 8008d08:	4634      	mov	r4, r6
 8008d0a:	6876      	ldr	r6, [r6, #4]
 8008d0c:	e7b9      	b.n	8008c82 <_malloc_r+0x46>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	4638      	mov	r0, r7
 8008d14:	f000 f84c 	bl	8008db0 <__malloc_unlock>
 8008d18:	e7a1      	b.n	8008c5e <_malloc_r+0x22>
 8008d1a:	6025      	str	r5, [r4, #0]
 8008d1c:	e7de      	b.n	8008cdc <_malloc_r+0xa0>
 8008d1e:	bf00      	nop
 8008d20:	20002978 	.word	0x20002978

08008d24 <_realloc_r>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4614      	mov	r4, r2
 8008d2c:	460e      	mov	r6, r1
 8008d2e:	b921      	cbnz	r1, 8008d3a <_realloc_r+0x16>
 8008d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	4611      	mov	r1, r2
 8008d36:	f7ff bf81 	b.w	8008c3c <_malloc_r>
 8008d3a:	b92a      	cbnz	r2, 8008d48 <_realloc_r+0x24>
 8008d3c:	f7ff ff14 	bl	8008b68 <_free_r>
 8008d40:	4625      	mov	r5, r4
 8008d42:	4628      	mov	r0, r5
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	f000 f838 	bl	8008dbc <_malloc_usable_size_r>
 8008d4c:	4284      	cmp	r4, r0
 8008d4e:	4607      	mov	r7, r0
 8008d50:	d802      	bhi.n	8008d58 <_realloc_r+0x34>
 8008d52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d56:	d812      	bhi.n	8008d7e <_realloc_r+0x5a>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f7ff ff6e 	bl	8008c3c <_malloc_r>
 8008d60:	4605      	mov	r5, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d0ed      	beq.n	8008d42 <_realloc_r+0x1e>
 8008d66:	42bc      	cmp	r4, r7
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	bf28      	it	cs
 8008d6e:	463a      	movcs	r2, r7
 8008d70:	f7ff fed2 	bl	8008b18 <memcpy>
 8008d74:	4631      	mov	r1, r6
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff fef6 	bl	8008b68 <_free_r>
 8008d7c:	e7e1      	b.n	8008d42 <_realloc_r+0x1e>
 8008d7e:	4635      	mov	r5, r6
 8008d80:	e7df      	b.n	8008d42 <_realloc_r+0x1e>
	...

08008d84 <_sbrk_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d06      	ldr	r5, [pc, #24]	; (8008da0 <_sbrk_r+0x1c>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	f7fd fc02 	bl	8006598 <_sbrk>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_sbrk_r+0x1a>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_sbrk_r+0x1a>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	20002980 	.word	0x20002980

08008da4 <__malloc_lock>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__malloc_lock+0x8>)
 8008da6:	f000 b811 	b.w	8008dcc <__retarget_lock_acquire_recursive>
 8008daa:	bf00      	nop
 8008dac:	20002984 	.word	0x20002984

08008db0 <__malloc_unlock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_unlock+0x8>)
 8008db2:	f000 b80c 	b.w	8008dce <__retarget_lock_release_recursive>
 8008db6:	bf00      	nop
 8008db8:	20002984 	.word	0x20002984

08008dbc <_malloc_usable_size_r>:
 8008dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc0:	1f18      	subs	r0, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfbc      	itt	lt
 8008dc6:	580b      	ldrlt	r3, [r1, r0]
 8008dc8:	18c0      	addlt	r0, r0, r3
 8008dca:	4770      	bx	lr

08008dcc <__retarget_lock_acquire_recursive>:
 8008dcc:	4770      	bx	lr

08008dce <__retarget_lock_release_recursive>:
 8008dce:	4770      	bx	lr

08008dd0 <_init>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr

08008ddc <_fini>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr
